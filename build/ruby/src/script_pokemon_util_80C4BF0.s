@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	sub_80C4BF0
	.type	 sub_80C4BF0,function
	.thumb_func
sub_80C4BF0:
	push	{r4, lr}
	ldr	r2, .L3
	ldr	r1, .L3+0x4
	ldrb	r3, [r1, #0x15]
	mov	r4, #0x9b
	lsl	r4, r4, #0x5
	add	r0, r2, r4
	strh	r3, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x55
	ldrb	r3, [r0]
	add	r4, r4, #0x2
	add	r0, r2, r4
	strh	r3, [r0]
	add	r1, r1, #0x95
	ldrb	r0, [r1]
	ldr	r1, .L3+0x8
	add	r2, r2, r1
	strh	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gSaveBlock1
	.word	gContestMons
	.word	0x1364
.Lfe1:
	.size	 sub_80C4BF0,.Lfe1-sub_80C4BF0
	.align	2, 0
	.globl	sub_80C4C28
	.type	 sub_80C4C28,function
	.thumb_func
sub_80C4C28:
	push	{lr}
	ldr	r0, .L13
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r0, #0x1
	beq	.L8	@cond_branch
	cmp	r0, #0x1
	bgt	.L12	@cond_branch
	cmp	r0, #0
	beq	.L7	@cond_branch
	b	.L10
.L14:
	.align	2, 0
.L13:
	.word	gSpecialVar_0x8005
.L12:
	cmp	r1, #0x2
	beq	.L9	@cond_branch
	b	.L10
.L7:
	mov	r1, #0x3
	b	.L6
.L8:
	mov	r1, #0x4
	b	.L6
.L9:
	mov	r1, #0x5
	b	.L6
.L10:
	mov	r1, #0x64
.L6:
	ldr	r0, .L15
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gSpecialVar_0x8004
.Lfe2:
	.size	 sub_80C4C28,.Lfe2-sub_80C4C28
	.align	2, 0
	.globl	sub_80C4C64
	.type	 sub_80C4C64,function
	.thumb_func
sub_80C4C64:
	push	{lr}
	bl	sub_80C46EC
	bl	sub_80C4740
	bl	sub_80C48F4
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_80C4C64,.Lfe3-sub_80C4C64
	.align	2, 0
	.globl	sub_80C4C78
	.type	 sub_80C4C78,function
	.thumb_func
sub_80C4C78:
	push	{lr}
	ldr	r0, .L29
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L25	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L29+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L30:
	.align	2, 0
.L29:
	.word	gScriptContestCategory
	.word	.L26
	.align	2, 0
	.align	2, 0
.L26:
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L25
.L20:
	mov	r0, #0x8
	b	.L19
.L21:
	mov	r0, #0x9
	b	.L19
.L22:
	mov	r0, #0xa
	b	.L19
.L23:
	mov	r0, #0xb
	b	.L19
.L25:
	mov	r0, #0xc
.L19:
	ldr	r1, .L31
	lsl	r0, r0, #0x5
	add	r0, r0, r1
	ldr	r1, .L31+0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	bne	.L27	@cond_branch
	ldr	r0, .L31+0x8
	strh	r1, [r0]
	b	.L28
.L32:
	.align	2, 0
.L31:
	.word	gSaveBlock1
	.word	0x2e04
	.word	gSpecialVar_0x8004
.L27:
	ldr	r1, .L33
	mov	r0, #0x1
	strh	r0, [r1]
.L28:
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gSpecialVar_0x8004
.Lfe4:
	.size	 sub_80C4C78,.Lfe4-sub_80C4C78
	.align	2, 0
	.globl	sub_80C4CEC
	.type	 sub_80C4CEC,function
	.thumb_func
sub_80C4CEC:
	push	{lr}
	mov	r0, #0xff
	bl	sub_80B2A7C
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 sub_80C4CEC,.Lfe5-sub_80C4CEC
	.align	2, 0
	.globl	sub_80C4CF8
	.type	 sub_80C4CF8,function
	.thumb_func
sub_80C4CF8:
	push	{lr}
	ldr	r0, .L40
	ldr	r1, .L40+0x4
	ldrb	r2, [r1]
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L37	@cond_branch
	ldr	r0, .L40+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x3
	bne	.L37	@cond_branch
	ldr	r1, .L40+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L40+0x10
	cmp	r1, r0
	ble	.L37	@cond_branch
	ldr	r1, .L40+0x14
	mov	r0, #0x1
	b	.L39
.L41:
	.align	2, 0
.L40:
	.word	gUnknown_02038690
	.word	gContestPlayerMonIndex
	.word	gScriptContestRank
	.word	gUnknown_02038678
	.word	0x31f
	.word	gSpecialVar_0x8004
.L37:
	ldr	r1, .L42
	mov	r0, #0x0
.L39:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gSpecialVar_0x8004
.Lfe6:
	.size	 sub_80C4CF8,.Lfe6-sub_80C4CF8
	.align	2, 0
	.globl	sub_80C4D50
	.type	 sub_80C4D50,function
	.thumb_func
sub_80C4D50:
	push	{lr}
	mov	r3, #0x0
	ldr	r0, .L51
	ldr	r1, .L51+0x4
	add	r2, r0, r1
	mov	r1, #0x4
.L48:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L47	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L47:
	add	r2, r2, #0x20
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L48	@cond_branch
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L52:
	.align	2, 0
.L51:
	.word	gSaveBlock1
	.word	0x2f04
.Lfe7:
	.size	 sub_80C4D50,.Lfe7-sub_80C4D50
	.align	2, 0
	.globl	sub_80C4D80
	.type	 sub_80C4D80,function
	.thumb_func
sub_80C4D80:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x8
    ldr r0, _080C4EA0 @ =gUnknown_02038670
    mov r12, r0
    ldr r1, _080C4EA4 @ =gSpecialVar_0x8006
    mov r8, r1
    ldr r2, _080C4EA8 @ =gStringVar1
    mov r9, r2
    mov r2, r12
    mov r1, sp
    movs r6, 0x3
_080C4D9E:
    ldrh r0, [r2]
    strh r0, [r1]
    adds r2, 0x2
    adds r1, 0x2
    subs r6, 0x1
    cmp r6, 0
    bge _080C4D9E
    movs r6, 0
_080C4DAE:
    movs r1, 0x3
    cmp r1, r6
    ble _080C4DD8
_080C4DB4:
    subs r4, r1, 0x1
    lsls r0, r4, 1
    mov r5, sp
    adds r3, r5, r0
    lsls r0, r1, 1
    adds r2, r5, r0
    ldrh r5, [r3]
    movs r7, 0
    ldrsh r1, [r3, r7]
    movs r7, 0
    ldrsh r0, [r2, r7]
    cmp r1, r0
    bge _080C4DD2
    strh r5, [r2]
    strh r0, [r3]
_080C4DD2:
    adds r1, r4, 0
    cmp r1, r6
    bgt _080C4DB4
_080C4DD8:
    adds r6, 0x1
    cmp r6, 0x2
    ble _080C4DAE
    mov r2, r8
    ldrh r0, [r2]
    lsls r0, 1
    add r0, sp
    ldrh r0, [r0]
    movs r2, 0
    movs r7, 0
    movs r6, 0
    lsls r0, 16
    asrs r4, r0, 16
    adds r3, r0, 0
    mov r1, sp
_080C4DF6:
    movs r5, 0
    ldrsh r0, [r1, r5]
    cmp r0, r4
    bne _080C4E12
    lsls r0, r2, 24
    movs r2, 0x80
    lsls r2, 17
    adds r0, r2
    lsrs r2, r0, 24
    mov r5, r8
    ldrh r5, [r5]
    cmp r6, r5
    bne _080C4E12
    adds r7, r2, 0
_080C4E12:
    adds r1, 0x2
    adds r6, 0x1
    cmp r6, 0x3
    ble _080C4DF6
    movs r6, 0
    mov r0, sp
    movs r1, 0
    ldrsh r0, [r0, r1]
    asrs r1, r3, 16
    lsls r2, 24
    mov r10, r2
    cmp r0, r1
    beq _080C4E40
    adds r2, r1, 0
    mov r1, sp
_080C4E30:
    adds r1, 0x2
    adds r6, 0x1
    cmp r6, 0x3
    bgt _080C4E40
    movs r4, 0
    ldrsh r0, [r1, r4]
    cmp r0, r2
    bne _080C4E30
_080C4E40:
    lsls r0, r6, 24
    lsrs r4, r0, 24
    adds r2, r7, 0
    movs r6, 0
    asrs r5, r3, 16
    mov r8, r5
    mov r1, r12
    movs r5, 0
    ldrsh r0, [r1, r5]
    cmp r8, r0
    bne _080C4E60
    cmp r7, 0x1
    beq _080C4E78
_080C4E5A:
    subs r0, r2, 0x1
    lsls r0, 24
    lsrs r2, r0, 24
_080C4E60:
    adds r6, 0x1
    cmp r6, 0x3
    bgt _080C4E78
    lsls r0, r6, 1
    add r0, r12
    asrs r1, r3, 16
    movs r5, 0
    ldrsh r0, [r0, r5]
    cmp r1, r0
    bne _080C4E60
    cmp r2, 0x1
    bne _080C4E5A
_080C4E78:
    lsls r1, r6, 24
    lsrs r1, 24
    mov r0, r9
    bl sub_80C4698
    ldr r0, _080C4EAC @ =gIsLinkContest
    ldrb r1, [r0]
    movs r0, 0x1
    ands r0, r1
    cmp r0, 0
    beq _080C4EB8
    ldr r0, _080C4EB0 @ =gStringVar2
    lsls r1, r6, 3
    subs r1, r6
    lsls r1, 2
    ldr r2, _080C4EB4 @ =gLinkPlayers + 0x8
    adds r1, r2
    bl sub_80C4674
    b _080C4EC4
    .align 2, 0
_080C4EA0: .4byte gUnknown_02038670
_080C4EA4: .4byte gSpecialVar_0x8006
_080C4EA8: .4byte gStringVar1
_080C4EAC: .4byte gIsLinkContest
_080C4EB0: .4byte gStringVar2
_080C4EB4: .4byte gLinkPlayers + 0x8
_080C4EB8:
    ldr r0, _080C4ED8 @ =gStringVar2
    lsls r1, r6, 6
    ldr r2, _080C4EDC @ =gUnknown_0203857D
    adds r1, r2
    bl sub_80C4674
_080C4EC4:
    mov r1, r10
    asrs r0, r1, 24
    cmp r0, 0x1
    beq _080C4ED0
    cmp r7, r0
    bne _080C4EE4
_080C4ED0:
    ldr r0, _080C4EE0 @ =gSpecialVar_0x8006
    strh r4, [r0]
    b _080C4EEA
    .align 2, 0
_080C4ED8: .4byte gStringVar2
_080C4EDC: .4byte gUnknown_0203857D
_080C4EE0: .4byte gSpecialVar_0x8006
_080C4EE4:
    ldr r1, _080C4EFC @ =gSpecialVar_0x8006
    adds r0, r4, 0x4
    strh r0, [r1]
_080C4EEA:
    add sp, 0x8
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_080C4EFC: .4byte gSpecialVar_0x8006
    .syntax divided
	.code	16
.Lfe8:
	.size	 sub_80C4D80,.Lfe8-sub_80C4D80
	.align	2, 0
	.globl	ShowContestWinnerCleanup
	.type	 ShowContestWinnerCleanup,function
	.thumb_func
ShowContestWinnerCleanup:
	push	{lr}
	ldr	r0, .L55
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	c2_exit_to_overworld_1_continue_scripts_restart_music
.Lfe9:
	.size	 ShowContestWinnerCleanup,.Lfe9-ShowContestWinnerCleanup
	.align	2, 0
	.globl	ShowContestWinner
	.type	 ShowContestWinner,function
	.thumb_func
ShowContestWinner:
	push	{r4, r5, r6, lr}
	ldr	r6, .L59
	ldrb	r0, [r6]
	cmp	r0, #0
	beq	.L58	@cond_branch
	bl	sub_80AAF30
	ldr	r4, .L59+0x4
	ldr	r0, .L59+0x8
	add	r1, r4, r0
	mov	r5, #0x0
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0xfe
	mov	r1, #0x0
	bl	sub_80B2C4C
	ldr	r1, .L59+0xc
	add	r4, r4, r1
	strb	r0, [r4]
	mov	r0, #0x3
	bl	sub_80B2A7C
	strb	r5, [r6]
.L58:
	ldr	r0, .L59+0x10
	bl	SetMainCallback2
	ldr	r1, .L59+0x14
	ldr	r0, .L59+0x18
	str	r0, [r1, #0x8]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	gUnknown_0203856C
	.word	gSharedMem
	.word	0x15ddf
	.word	0x15dde
	.word	CB2_ContestPainting
	.word	gMain
	.word	ShowContestWinnerCleanup
.Lfe10:
	.size	 ShowContestWinner,.Lfe10-ShowContestWinner
	.align	2, 0
	.globl	sub_80C4F70
	.type	 sub_80C4F70,function
	.thumb_func
sub_80C4F70:
	push	{r4, lr}
	ldr	r0, .L62
	ldr	r4, .L62+0x4
	ldrb	r1, [r4, #0x15]
	bl	VarSet
	ldr	r0, .L62+0x8
	add	r1, r4, #0
	add	r1, r1, #0x55
	ldrb	r1, [r1]
	bl	VarSet
	ldr	r0, .L62+0xc
	add	r1, r4, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	bl	VarSet
	ldr	r0, .L62+0x10
	add	r1, r4, #0
	add	r1, r1, #0xd5
	ldrb	r1, [r1]
	bl	VarSet
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	0x4010
	.word	gContestMons
	.word	0x4011
	.word	0x4012
	.word	0x4013
.Lfe11:
	.size	 sub_80C4F70,.Lfe11-sub_80C4F70
	.align	2, 0
	.globl	GiveMonArtistRibbon
	.type	 GiveMonArtistRibbon,function
	.thumb_func
GiveMonArtistRibbon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L68
	ldrb	r0, [r6]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L68+0x4
	add	r0, r0, r4
	mov	r1, #0x46
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	strb	r0, [r1]
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldr	r0, .L68+0x8
	ldr	r1, .L68+0xc
	ldrb	r2, [r1]
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldr	r0, .L68+0x10
	ldrh	r0, [r0]
	cmp	r0, #0x3
	bne	.L65	@cond_branch
	ldr	r1, .L68+0x14
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L68+0x18
	cmp	r1, r0
	ble	.L65	@cond_branch
	mov	r1, #0x1
	mov	r0, sp
	strb	r1, [r0]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x46
	mov	r2, sp
	bl	SetMonData
	mov	r0, #0x1
	b	.L67
.L69:
	.align	2, 0
.L68:
	.word	gUnknown_02038694
	.word	gPlayerParty
	.word	gUnknown_02038690
	.word	gContestPlayerMonIndex
	.word	gScriptContestRank
	.word	gUnknown_02038678
	.word	0x31f
.L65:
	mov	r0, #0x0
.L67:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 GiveMonArtistRibbon,.Lfe12-GiveMonArtistRibbon
	.align	2, 0
	.globl	sub_80C5044
	.type	 sub_80C5044,function
	.thumb_func
sub_80C5044:
	ldr	r0, .L71
	ldrb	r0, [r0]
	bx	lr
.L72:
	.align	2, 0
.L71:
	.word	gUnknown_0203856C
.Lfe13:
	.size	 sub_80C5044,.Lfe13-sub_80C5044
	.align	2, 0
	.globl	ShowContestEntryMonPic
	.type	 ShowContestEntryMonPic,function
	.thumb_func
ShowContestEntryMonPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff4
	ldr	r4, .L75
	add	r0, r4, #0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L74	@cond_branch
	mov	r0, #0xa
	mov	sl, r0
	mov	r7, #0x3
	mov	r1, #0x3
	mov	r2, #0x13
	mov	r3, #0xd
	bl	MenuDrawTextWindow
	ldr	r2, .L75+0x4
	ldr	r0, .L75+0x8
	ldrh	r1, [r0]
	lsl	r1, r1, #0x6
	add	r0, r1, r2
	ldrh	r6, [r0]
	add	r0, r2, #0
	add	r0, r0, #0x38
	add	r0, r1, r0
	ldr	r0, [r0]
	mov	r8, r0
	add	r2, r2, #0x3c
	add	r1, r1, r2
	ldr	r1, [r1]
	mov	r9, r1
	add	r0, r4, #0
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L75+0xc
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	lsl	r5, r5, #0x3
	add	r5, r5, r1
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	strh	r6, [r5, #0xa]
	lsl	r0, r6, #0x3
	ldr	r1, .L75+0x10
	add	r0, r0, r1
	ldr	r1, .L75+0x14
	lsl	r2, r6, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	ldr	r4, .L75+0x18
	ldr	r3, [r4]
	ldr	r4, [r4, #0x4]
	str	r4, [sp]
	str	r6, [sp, #0x4]
	mov	r4, r8
	str	r4, [sp, #0x8]
	bl	HandleLoadSpecialPokePic
	add	r0, r6, #0
	mov	r1, r9
	mov	r2, r8
	bl	GetMonSpritePalStructFromOtIdPersonality
	add	r4, r0, #0
	bl	LoadCompressedObjectPalette
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L75+0x1c
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x2]
	mov	r1, #0x78
	mov	r2, #0x40
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xc]
	mov	r1, sl
	strh	r1, [r5, #0xe]
	strh	r7, [r5, #0x10]
	ldr	r3, .L75+0x20
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L75+0x24
	str	r2, [r0]
	add	r1, r1, r3
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
.L74:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	sub_80C5190
	.word	gContestMons
	.word	gSpecialVar_0x8006
	.word	gTasks
	.word	gMonFrontPicTable
	.word	gMonFrontPicCoords
	.word	gUnknown_081FAF4C
	.word	gUnknown_02024E8C
	.word	gSprites
	.word	SpriteCallbackDummy
.Lfe14:
	.size	 ShowContestEntryMonPic,.Lfe14-ShowContestEntryMonPic
	.align	2, 0
	.globl	sub_80C5164
	.type	 sub_80C5164,function
	.thumb_func
sub_80C5164:
	push	{lr}
	ldr	r0, .L79
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L78	@cond_branch
	ldr	r0, .L79+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L78:
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	sub_80C5190
	.word	gTasks
.Lfe15:
	.size	 sub_80C5164,.Lfe15-sub_80C5164
	.align	2, 0
	.globl	sub_80C5190
	.type	 sub_80C5190,function
	.thumb_func
sub_80C5190:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L91
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L82	@cond_branch
	cmp	r0, #0x1
	bgt	.L90	@cond_branch
	cmp	r0, #0
	beq	.L85	@cond_branch
	b	.L82
.L92:
	.align	2, 0
.L91:
	.word	gTasks
.L90:
	cmp	r0, #0x2
	beq	.L83	@cond_branch
	cmp	r0, #0x3
	beq	.L86	@cond_branch
	b	.L82
.L83:
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L93
	add	r5, r0, r1
	ldrb	r0, [r5, #0x5]
	lsr	r0, r0, #0x4
	bl	GetSpritePaletteTagByPaletteNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FreeSpritePaletteByTag
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	beq	.L84	@cond_branch
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
.L84:
	add	r0, r5, #0
	bl	DestroySprite
.L85:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L82
.L94:
	.align	2, 0
.L93:
	.word	gSprites
.L86:
	ldrb	r2, [r4, #0xe]
	add	r0, r2, #0
	ldrb	r3, [r4, #0x10]
	add	r1, r3, #0
	add	r2, r2, #0x9
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r3, r3, #0xa
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	MenuZeroFillWindowRect
	add	r0, r5, #0
	bl	DestroyTask
.L82:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_80C5190,.Lfe16-sub_80C5190
	.align	2, 0
	.globl	ScriptGetMultiplayerId
	.type	 ScriptGetMultiplayerId,function
	.thumb_func
ScriptGetMultiplayerId:
	push	{r4, lr}
	ldr	r0, .L98
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L96	@cond_branch
	ldr	r4, .L98+0x4
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	b	.L97
.L99:
	.align	2, 0
.L98:
	.word	gIsLinkContest
	.word	gScriptResult
.L96:
	ldr	r1, .L100
	mov	r0, #0x4
	strh	r0, [r1]
.L97:
	pop	{r4}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gScriptResult
.Lfe17:
	.size	 ScriptGetMultiplayerId,.Lfe17-ScriptGetMultiplayerId
	.align	2, 0
	.globl	ScriptRandom
	.type	 ScriptRandom,function
	.thumb_func
ScriptRandom:
	push	{r4, lr}
	ldr	r0, .L105
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L103	@cond_branch
	ldr	r2, .L105+0x4
	ldr	r1, [r2]
	ldr	r0, .L105+0x8
	mul	r0, r0, r1
	ldr	r1, .L105+0xc
	add	r0, r0, r1
	str	r0, [r2]
	lsr	r0, r0, #0x10
	ldr	r4, .L105+0x10
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	gIsLinkContest
	.word	gUnknown_03005D28
	.word	0x41c64e6d
	.word	0x6073
	.word	gScriptResult
.L103:
	ldr	r4, .L107
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L104:
	ldrh	r1, [r4]
	bl	__umodsi3
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gScriptResult
.Lfe18:
	.size	 ScriptRandom,.Lfe18-ScriptRandom
	.align	2, 0
	.globl	ScrSpecial_HealPlayerParty
	.type	 ScrSpecial_HealPlayerParty,function
	.thumb_func
ScrSpecial_HealPlayerParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L120
	ldrb	r0, [r0]
	cmp	r8, r0
	bcs	.L111	@cond_branch
	ldr	r1, .L120+0x4
	mov	sl, r1
	mov	r6, sp
.L113:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	lsl	r1, r0, #0x10
	strb	r0, [r6]
	lsr	r1, r1, #0x18
	strb	r1, [r6, #0x1]
	add	r0, r4, #0
	mov	r1, #0x39
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r5, #0x0
	mov	r1, #0x1
	add	r1, r1, r8
	mov	r9, r1
.L117:
	add	r1, r5, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r7, #0
	add	r2, r5, #0
	bl	CalculatePPWithBonus
	strb	r0, [r6]
	add	r1, r5, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L117	@cond_branch
	mov	r0, #0x0
	strb	r0, [r6]
	strb	r0, [r6, #0x1]
	strb	r0, [r6, #0x2]
	strb	r0, [r6, #0x3]
	mov	r1, #0x64
	mov	r0, r8
	mul	r0, r0, r1
	add	r0, r0, sl
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L120
	ldrb	r0, [r0]
	cmp	r8, r0
	bcc	.L113	@cond_branch
.L111:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe19:
	.size	 ScrSpecial_HealPlayerParty,.Lfe19-ScrSpecial_HealPlayerParty
	.align	2, 0
	.globl	ScriptGiveMon
	.type	 ScriptGiveMon,function
	.thumb_func
ScriptGiveMon:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xffffff88
	add	r5, r0, #0
	add	r3, r1, #0
	add	r4, r2, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r0, r4, #0x10
	mov	r8, r0
	add	r6, sp, #0x14
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r3, #0
	mov	r3, #0x20
	bl	CreateMon
	add	r0, sp, #0x10
	mov	r1, r8
	strb	r1, [r0]
	lsr	r4, r4, #0x18
	strb	r4, [r0, #0x1]
	add	r0, r6, #0
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, r6, #0
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r4, #0x1
	bgt	.L123	@cond_branch
	cmp	r4, #0
	blt	.L123	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetSetPokedexFlag
.L123:
	add	r0, r4, #0
	add	sp, sp, #0x78
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 ScriptGiveMon,.Lfe20-ScriptGiveMon
	.align	2, 0
	.globl	ScriptGiveEgg
	.type	 ScriptGiveEgg,function
	.thumb_func
ScriptGiveEgg:
	push	{lr}
	add	sp, sp, #0xffffff98
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, sp
	mov	r2, #0x1
	bl	CreateEgg
	add	r2, sp, #0x64
	mov	r0, #0x1
	strb	r0, [r2]
	mov	r0, sp
	mov	r1, #0x2d
	bl	SetMonData
	mov	r0, sp
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x68
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 ScriptGiveEgg,.Lfe21-ScriptGiveEgg
	.align	2, 0
	.globl	CheckForAlivePartyMons
	.type	 CheckForAlivePartyMons,function
	.thumb_func
CheckForAlivePartyMons:
	push	{lr}
	bl	sub_803DAA0
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1
	beq	.L133	@cond_branch
	cmp	r1, #0x1
	bgt	.L136	@cond_branch
	cmp	r1, #0
	beq	.L132	@cond_branch
	b	.L130
.L136:
	cmp	r1, #0x2
	bne	.L130	@cond_branch
.L132:
.L133:
	ldr	r0, .L137
	strh	r1, [r0]
.L130:
	pop	{r0}
	bx	r0
.L138:
	.align	2, 0
.L137:
	.word	gScriptResult
.Lfe22:
	.size	 CheckForAlivePartyMons,.Lfe22-CheckForAlivePartyMons
	.align	2, 0
	.globl	CheckPartyMonHasHeldItem
	.type	 CheckPartyMonHasHeldItem,function
	.thumb_func
CheckPartyMonHasHeldItem:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r5, #0x0
	mov	r7, #0xce
	lsl	r7, r7, #0x1
.L143:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L147
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L142	@cond_branch
	cmp	r0, r7
	beq	.L142	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	cmp	r0, r6
	bne	.L142	@cond_branch
	mov	r0, #0x1
	b	.L146
.L148:
	.align	2, 0
.L147:
	.word	gPlayerParty
.L142:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L143	@cond_branch
	mov	r0, #0x0
.L146:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 CheckPartyMonHasHeldItem,.Lfe23-CheckPartyMonHasHeldItem
	.align	2, 0
	.globl	GetNameOfEnigmaBerryInPlayerParty
	.type	 GetNameOfEnigmaBerryInPlayerParty,function
	.thumb_func
GetNameOfEnigmaBerryInPlayerParty:
	push	{r4, lr}
	mov	r0, #0xaf
	bl	CheckPartyMonHasHeldItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	cmp	r4, #0x1
	bne	.L150	@cond_branch
	mov	r0, #0xaf
	bl	ItemIdToBerryType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L151
	bl	GetBerryNameByBerryType
.L150:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L152:
	.align	2, 0
.L151:
	.word	gStringVar1
.Lfe24:
	.size	 GetNameOfEnigmaBerryInPlayerParty,.Lfe24-GetNameOfEnigmaBerryInPlayerParty
	.align	2, 0
	.globl	CreateScriptedWildMon
	.type	 CreateScriptedWildMon,function
	.thumb_func
CreateScriptedWildMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xffffffec
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r7, r2, #0x10
	lsr	r6, r7, #0x10
	bl	ZeroEnemyPartyMons
	ldr	r0, .L155
	mov	r8, r0
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r0, r8
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x20
	bl	CreateMon
	cmp	r6, #0
	beq	.L154	@cond_branch
	add	r0, sp, #0x10
	strb	r6, [r0]
	add	r1, r0, #0
	lsr	r0, r7, #0x18
	strb	r0, [r1, #0x1]
	mov	r0, r8
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
.L154:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	gEnemyParty
.Lfe25:
	.size	 CreateScriptedWildMon,.Lfe25-CreateScriptedWildMon
	.align	2, 0
	.globl	ScriptSetMonMoveSlot
	.type	 ScriptSetMonMoveSlot,function
	.thumb_func
ScriptSetMonMoveSlot:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r3, #0x6
	bls	.L158	@cond_branch
	ldr	r0, .L159
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L158:
	mov	r0, #0x64
	mul	r0, r0, r3
	ldr	r1, .L159+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	SetMonMoveSlot
	pop	{r4}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe26:
	.size	 ScriptSetMonMoveSlot,.Lfe26-ScriptSetMonMoveSlot
	.align	2, 0
	.globl	sub_80C5568
	.type	 sub_80C5568,function
	.thumb_func
sub_80C5568:
	push	{lr}
	ldr	r1, .L162
	ldr	r0, .L162+0x4
	str	r0, [r1, #0x8]
	bl	sub_8121E10
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	gMain
	.word	sub_80C5580
.Lfe27:
	.size	 sub_80C5568,.Lfe27-sub_80C5568
	.align	2, 0
	.globl	sub_80C5580
	.type	 sub_80C5580,function
	.thumb_func
sub_80C5580:
	push	{lr}
	ldr	r0, .L169
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L167	@cond_branch
	ldr	r0, .L169+0x4
	strh	r1, [r0]
	b	.L165
.L170:
	.align	2, 0
.L169:
	.word	gSelectedOrderFromParty
	.word	gScriptResult
.L167:
	ldr	r1, .L171
	mov	r0, #0x1
	strh	r0, [r1]
.L165:
	ldr	r0, .L171+0x4
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	gScriptResult
	.word	c2_exit_to_overworld_1_continue_scripts_restart_music
.Lfe28:
	.size	 sub_80C5580,.Lfe28-sub_80C5580
	.align	2, 0
	.globl	ChooseBattleTowerPlayerParty
	.type	 ChooseBattleTowerPlayerParty,function
	.thumb_func
ChooseBattleTowerPlayerParty:
	push	{lr}
	ldr	r1, .L174
	ldr	r0, .L174+0x4
	str	r0, [r1, #0x8]
	bl	sub_8121E34
	pop	{r0}
	bx	r0
.L175:
	.align	2, 0
.L174:
	.word	gMain
	.word	SetBattleTowerPlayerParty
.Lfe29:
	.size	 ChooseBattleTowerPlayerParty,.Lfe29-ChooseBattleTowerPlayerParty
	.align	2, 0
	.globl	SetBattleTowerPlayerParty
	.type	 SetBattleTowerPlayerParty,function
	.thumb_func
SetBattleTowerPlayerParty:
	push	{r4, lr}
	ldr	r0, .L181
	ldrb	r4, [r0]
	cmp	r4, #0
	bne	.L179	@cond_branch
	bl	LoadPlayerParty
	ldr	r0, .L181+0x4
	strh	r4, [r0]
	b	.L177
.L182:
	.align	2, 0
.L181:
	.word	gSelectedOrderFromParty
	.word	gScriptResult
.L179:
	bl	ReducePlayerPartyToThree
	ldr	r1, .L183
	mov	r0, #0x1
	strh	r0, [r1]
.L177:
	ldr	r0, .L183+0x4
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L184:
	.align	2, 0
.L183:
	.word	gScriptResult
	.word	c2_exit_to_overworld_1_continue_scripts_restart_music
.Lfe30:
	.size	 SetBattleTowerPlayerParty,.Lfe30-SetBattleTowerPlayerParty
	.align	2, 0
	.globl	ReducePlayerPartyToThree
	.type	 ReducePlayerPartyToThree,function
	.thumb_func
ReducePlayerPartyToThree:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffecc
	add	r0, sp, #0x12c
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r2, .L197
	mov	r1, sp
	bl	CpuSet
	mov	r5, #0x0
	mov	r7, #0x64
	ldr	r6, .L197+0x4
	mov	r4, sp
.L189:
	ldr	r0, .L197+0x8
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L188	@cond_branch
	sub	r0, r0, #0x1
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r6
	add	r0, r4, #0
	mov	r2, #0x64
	bl	memcpy
.L188:
	add	r4, r4, #0x64
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L189	@cond_branch
	add	r0, sp, #0x130
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r4, .L197+0x4
	ldr	r2, .L197+0xc
	add	r1, r4, #0
	bl	CpuSet
	mov	r5, sp
	add	r6, sp, #0xc8
.L195:
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	add	r5, r5, #0x64
	add	r4, r4, #0x64
	cmp	r5, r6
	ble	.L195	@cond_branch
	bl	CalculatePlayerPartyCount
	add	sp, sp, #0x134
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	0x500004b
	.word	gPlayerParty
	.word	gSelectedOrderFromParty
	.word	0x5000096
.Lfe31:
	.size	 ReducePlayerPartyToThree,.Lfe31-ReducePlayerPartyToThree
.text
	.align	2, 0
