@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 sUnknownShedinjaJpnString,object
sUnknownShedinjaJpnString:
	.byte	0x67
	.byte	0x59
	.byte	0x66
	.byte	0x7e
	.byte	0xff
	.size	 sUnknownShedinjaJpnString,5
	.type	 sUnusedString0,object
sUnusedString0:
	.byte	0xfc
	.byte	0x1
	.byte	0x1
	.byte	0xfc
	.byte	0x2
	.byte	0xf
	.byte	0xfc
	.byte	0x3
	.byte	0x8
	.byte	0xff
	.size	 sUnusedString0,10
	.type	 sUnusedString1,object
sUnusedString1:
	.byte	0xef
	.byte	0xfe
	.byte	0x0
	.byte	0xff
	.size	 sUnusedString1,4
	.type	 sUnusedString2,object
sUnusedString2:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0xef
	.byte	0xff
	.size	 sUnusedString2,10
	.type	 sUnusedString3,object
sUnusedString3:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0xff
	.size	 sUnusedString3,10
	.type	 sPadding,object
	.size	 sPadding,9
sPadding:
	.byte	0x0
	.space	8
.text
	.align	2, 0
	.type	 CB2_BeginEvolutionScene,function
	.thumb_func
CB2_BeginEvolutionScene:
	push	{lr}
	bl	UpdatePaletteFade
	bl	RunTasks
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 CB2_BeginEvolutionScene,.Lfe1-CB2_BeginEvolutionScene
	.align	2, 0
	.type	 Task_BeginEvolutionScene,function
	.thumb_func
Task_BeginEvolutionScene:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r7, #0x0
	ldr	r1, .L10
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L5	@cond_branch
	cmp	r0, #0x1
	beq	.L6	@cond_branch
	b	.L4
.L11:
	.align	2, 0
.L10:
	.word	gTasks
.L5:
	mov	r0, #0x1
	neg	r0, r0
	str	r7, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L4
.L6:
	ldr	r0, .L12
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4	@cond_branch
	mov	r0, #0xa
	ldrsh	r7, [r4, r0]
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrh	r5, [r4, #0x10]
	ldrb	r6, [r4, #0x12]
	ldrh	r4, [r4, #0x20]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r2, #0
	bl	DestroyTask
	add	r0, r7, #0
	add	r1, r5, #0
	add	r2, r6, #0
	add	r3, r4, #0
	bl	EvolutionScene
.L4:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	gPaletteFade
.Lfe2:
	.size	 Task_BeginEvolutionScene,.Lfe2-Task_BeginEvolutionScene
	.align	2, 0
	.globl	BeginEvolutionScene
	.type	 BeginEvolutionScene,function
	.thumb_func
BeginEvolutionScene:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r4, r1, #0
	add	r5, r2, #0
	add	r6, r3, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L15
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L15+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	mov	r0, r8
	strh	r0, [r1, #0xa]
	mov	r0, r8
	lsr	r0, r0, #0x10
	strh	r0, [r1, #0xc]
	strh	r4, [r1, #0x10]
	strh	r5, [r1, #0x12]
	strh	r6, [r1, #0x20]
	ldr	r0, .L15+0x8
	bl	SetMainCallback2
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	Task_BeginEvolutionScene
	.word	gTasks
	.word	CB2_BeginEvolutionScene
.Lfe3:
	.size	 BeginEvolutionScene,.Lfe3-BeginEvolutionScene
	.align	2, 0
	.globl	EvolutionScene
	.type	 EvolutionScene,function
	.thumb_func
EvolutionScene:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffc8
	str	r0, [sp, #0x20]
	mov	sl, r1
	mov	r0, sl
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x24]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x28]
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r5, #0x0
	str	r5, [sp, #0x1c]
	add	r0, sp, #0x1c
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L18
	bl	CpuSet
	ldr	r0, .L18+0x4
	strh	r5, [r0]
	sub	r0, r0, #0xc
	strh	r5, [r0]
	add	r0, r0, #0x4
	strh	r5, [r0]
	sub	r0, r0, #0x2
	strh	r5, [r0]
	add	r0, r0, #0x4
	strh	r5, [r0]
	add	r0, r0, #0x2
	strh	r5, [r0]
	add	r0, r0, #0x2
	strh	r5, [r0]
	ldr	r4, .L18+0x8
	add	r0, r4, #0
	bl	SetUpWindowConfig
	bl	ResetPaletteFade
	ldr	r0, .L18+0xc
	strh	r5, [r0]
	ldr	r0, .L18+0x10
	strh	r5, [r0]
	ldr	r0, .L18+0x14
	strh	r5, [r0]
	ldr	r0, .L18+0x18
	strh	r5, [r0]
	ldr	r0, .L18+0x1c
	strh	r5, [r0]
	ldr	r0, .L18+0x20
	strh	r5, [r0]
	ldr	r1, .L18+0x24
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L18+0x28
	strh	r5, [r0]
	ldr	r0, .L18+0x2c
	add	r1, r4, #0
	bl	InitWindowFromConfig
	ldr	r1, .L18+0x30
	mov	r0, #0x9
	strb	r0, [r1]
	bl	sub_800D6D4
	bl	sub_800DAB8
	bl	ResetSpriteData
	bl	remove_some_task
	bl	ResetTasks
	bl	FreeAllSpritePalettes
	ldr	r0, .L18+0x34
	mov	r3, #0x4
	strb	r3, [r0]
	ldr	r0, [sp, #0x20]
	mov	r1, #0x2
	add	r2, sp, #0x8
	bl	GetMonData
	ldr	r0, .L18+0x38
	add	r1, sp, #0x8
	bl	StringCopy10
	ldr	r0, .L18+0x3c
	mov	r1, #0xb
	mov	r4, sl
	mul	r4, r4, r1
	add	r1, r4, #0
	ldr	r2, .L18+0x40
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, [sp, #0x20]
	mov	r1, #0xb
	bl	GetMonData
	add	r6, r0, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	ldr	r0, [sp, #0x20]
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x2c]
	ldr	r0, [sp, #0x20]
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x30]
	lsl	r0, r6, #0x3
	ldr	r1, .L18+0x44
	add	r0, r0, r1
	lsl	r2, r6, #0x2
	ldr	r3, .L18+0x48
	add	r2, r2, r3
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	ldr	r4, .L18+0x4c
	ldr	r3, [r4, #0x4]
	str	r3, [sp]
	str	r6, [sp, #0x4]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	bl	DecompressPicFromTable_2
	add	r0, r6, #0
	ldr	r1, [sp, #0x2c]
	ldr	r2, [sp, #0x30]
	bl	GetMonSpritePalStructFromOtIdPersonality
	ldr	r0, [r0]
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L18+0x50
	mov	r9, r0
	ldr	r1, .L18+0x54
	str	r1, [r0, #0x10]
	mov	r1, #0x78
	mov	r2, #0x40
	mov	r3, #0x1e
	bl	CreateSprite
	lsl	r1, r0, #0x18
	lsr	r2, r1, #0x18
	ldr	r3, .L18+0x58
	strb	r0, [r3]
	ldr	r7, .L18+0x5c
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	mov	r4, #0x1c
	add	r4, r4, r7
	mov	r8, r4
	add	r0, r1, r4
	ldr	r2, .L18+0x60
	str	r2, [r0]
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r4, #0xf
	add	r0, r4, #0
	and	r0, r0, r2
	mov	r2, #0x10
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	mov	r1, sl
	lsl	r0, r1, #0x3
	ldr	r2, .L18+0x44
	add	r0, r0, r2
	lsl	r2, r1, #0x2
	ldr	r3, .L18+0x48
	add	r2, r2, r3
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	str	r2, [sp, #0x34]
	ldr	r2, .L18+0x4c
	ldr	r2, [r2, #0xc]
	str	r2, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	ldr	r2, [sp, #0x34]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	bl	DecompressPicFromTable_2
	mov	r0, sl
	ldr	r1, [sp, #0x2c]
	ldr	r2, [sp, #0x30]
	bl	GetMonSpritePalStructFromOtIdPersonality
	ldr	r0, [r0]
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	mov	r0, sl
	mov	r1, #0x3
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L18+0x54
	mov	r1, r9
	str	r0, [r1, #0x10]
	mov	r0, r9
	mov	r1, #0x78
	mov	r2, #0x40
	mov	r3, #0x1e
	bl	CreateSprite
	lsl	r1, r0, #0x18
	lsr	r2, r1, #0x18
	ldr	r3, .L18+0x58
	strb	r0, [r3, #0x1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r8, r8, r1
	ldr	r0, .L18+0x60
	mov	r2, r8
	str	r0, [r2]
	add	r1, r1, r7
	ldrb	r0, [r1, #0x5]
	and	r4, r4, r0
	mov	r0, #0x20
	orr	r4, r4, r0
	strb	r4, [r1, #0x5]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	bl	LoadEvoSparkleSpriteAndPal
	ldr	r0, .L18+0x64
	mov	r1, #0x0
	bl	CreateTask
	lsl	r1, r0, #0x18
	lsr	r2, r1, #0x18
	ldr	r4, .L18+0x58
	strb	r0, [r4, #0x2]
	ldr	r1, .L18+0x68
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	strh	r6, [r0, #0xe]
	mov	r1, sl
	strh	r1, [r0, #0x10]
	mov	r2, sp
	ldrh	r2, [r2, #0x20]
	strh	r2, [r0, #0xa]
	ldr	r3, [sp, #0x20]
	lsr	r1, r3, #0x10
	strh	r1, [r0, #0xc]
	mov	r4, sp
	ldrh	r4, [r4, #0x24]
	strh	r4, [r0, #0x12]
	mov	r1, #0x1
	strh	r1, [r0, #0x14]
	strh	r5, [r0, #0x1e]
	mov	r1, sp
	ldrh	r1, [r1, #0x28]
	strh	r1, [r0, #0x20]
	ldr	r0, .L18+0x6c
	ldr	r1, .L18+0x70
	mov	r2, #0x60
	bl	memcpy
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xfa
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L18+0x74
	bl	SetHBlankCallback
	ldr	r0, .L18+0x78
	bl	SetVBlankCallback
	bl	m4aMPlayAllStop
	ldr	r0, .L18+0x7c
	bl	SetMainCallback2
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	0x5006000
	.word	0x400004c
	.word	gWindowConfig_81E6C58
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
	.word	gUnknown_03004210
	.word	gBattleTerrain
	.word	gReservedSpritePaletteCount
	.word	gStringVar1
	.word	gStringVar2
	.word	gSpeciesNames
	.word	gMonFrontPicTable
	.word	gMonFrontPicCoords
	.word	gUnknown_081FAF4C
	.word	gUnknown_02024E8C
	.word	gDummySpriteAffineAnimTable
	.word	gSharedMem+0x14800
	.word	gSprites
	.word	nullsub_37
	.word	Task_EvolutionScene
	.word	gTasks
	.word	0x2009000
	.word	gPlttBufferUnfaded+0x40
	.word	EvoDummyFunc
	.word	VBlankCB_EvolutionScene
	.word	CB2_EvolutionSceneUpdate
.Lfe4:
	.size	 EvolutionScene,.Lfe4-EvolutionScene
	.align	2, 0
	.type	 CB2_EvolutionSceneLoadGraphics,function
	.thumb_func
CB2_EvolutionSceneLoadGraphics:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #0xfffffff4
	ldr	r2, .L21
	ldr	r0, .L21+0x4
	mov	r9, r0
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x20
	ldrsh	r2, [r0, r1]
	mov	r1, #0x64
	mov	r4, r2
	mul	r4, r4, r1
	ldr	r1, .L21+0x8
	add	r4, r4, r1
	ldrh	r6, [r0, #0x10]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	mov	sl, r0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	mov	r8, r0
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L21+0xc
	add	r0, sp, #0x8
	bl	CpuSet
	ldr	r0, .L21+0x10
	strh	r5, [r0]
	sub	r0, r0, #0xc
	strh	r5, [r0]
	add	r0, r0, #0x4
	strh	r5, [r0]
	sub	r0, r0, #0x2
	strh	r5, [r0]
	add	r0, r0, #0x4
	strh	r5, [r0]
	add	r0, r0, #0x2
	strh	r5, [r0]
	add	r0, r0, #0x2
	strh	r5, [r0]
	ldr	r4, .L21+0x14
	add	r0, r4, #0
	bl	SetUpWindowConfig
	bl	ResetPaletteFade
	ldr	r0, .L21+0x18
	strh	r5, [r0]
	ldr	r0, .L21+0x1c
	strh	r5, [r0]
	ldr	r0, .L21+0x20
	strh	r5, [r0]
	ldr	r0, .L21+0x24
	strh	r5, [r0]
	ldr	r0, .L21+0x28
	strh	r5, [r0]
	ldr	r0, .L21+0x2c
	strh	r5, [r0]
	ldr	r1, .L21+0x30
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L21+0x34
	strh	r5, [r0]
	ldr	r0, .L21+0x38
	add	r1, r4, #0
	bl	InitWindowFromConfig
	ldr	r1, .L21+0x3c
	mov	r0, #0x9
	strb	r0, [r1]
	bl	sub_800D6D4
	bl	sub_800DAB8
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r1, .L21+0x40
	mov	r0, #0x4
	strb	r0, [r1]
	lsl	r0, r6, #0x3
	ldr	r1, .L21+0x44
	add	r0, r0, r1
	ldr	r1, .L21+0x48
	lsl	r2, r6, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L21+0x4c
	ldr	r4, [r4, #0xc]
	str	r4, [sp]
	str	r6, [sp, #0x4]
	bl	DecompressPicFromTable_2
	add	r0, r6, #0
	mov	r1, sl
	mov	r2, r8
	bl	GetMonSpritePalStructFromOtIdPersonality
	ldr	r0, [r0]
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L21+0x50
	ldr	r1, .L21+0x54
	str	r1, [r0, #0x10]
	mov	r1, #0x78
	mov	r2, #0x40
	mov	r3, #0x1e
	bl	CreateSprite
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	mov	r1, r9
	strb	r0, [r1, #0x1]
	ldr	r3, .L21+0x58
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L21+0x5c
	str	r2, [r0]
	add	r1, r1, r3
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	mov	r2, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xfa
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L21+0x60
	bl	SetHBlankCallback
	ldr	r0, .L21+0x64
	bl	SetVBlankCallback
	ldr	r0, .L21+0x68
	bl	SetMainCallback2
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	gTasks
	.word	gSharedMem+0x14800
	.word	gPlayerParty
	.word	0x5006000
	.word	0x400004c
	.word	gWindowConfig_81E6C58
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
	.word	gUnknown_03004210
	.word	gBattleTerrain
	.word	gReservedSpritePaletteCount
	.word	gMonFrontPicTable
	.word	gMonFrontPicCoords
	.word	gUnknown_081FAF4C
	.word	gUnknown_02024E8C
	.word	gDummySpriteAffineAnimTable
	.word	gSprites
	.word	nullsub_37
	.word	EvoDummyFunc
	.word	VBlankCB_EvolutionScene
	.word	CB2_EvolutionSceneUpdate
.Lfe5:
	.size	 CB2_EvolutionSceneLoadGraphics,.Lfe5-CB2_EvolutionSceneLoadGraphics
	.align	2, 0
	.type	 CB2_TradeEvolutionSceneLoadGraphics,function
	.thumb_func
CB2_TradeEvolutionSceneLoadGraphics:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff8
	ldr	r2, .L36
	ldr	r0, .L36+0x4
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x20
	ldrsh	r2, [r0, r1]
	mov	r1, #0x64
	mul	r2, r2, r1
	ldr	r1, .L36+0x8
	add	r4, r2, r1
	ldrh	r7, [r0, #0x10]
	ldr	r0, .L36+0xc
	ldr	r2, .L36+0x10
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bls	.LCB773
	b	.L24	@long jump
.LCB773:
	lsl	r0, r0, #0x2
	ldr	r1, .L36+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L37:
	.align	2, 0
.L36:
	.word	gTasks
	.word	gSharedMem+0x14800
	.word	gPlayerParty
	.word	gMain
	.word	0x43c
	.word	.L32
	.align	2, 0
	.align	2, 0
.L32:
	.word	.L25
	.word	.L26
	.word	.L27
	.word	.L28
	.word	.L29
	.word	.L30
	.word	.L31
.L25:
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	mov	r4, #0x0
	strh	r4, [r0]
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r1, .L38
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, .L38+0x4
	strh	r4, [r0]
	ldr	r0, .L38+0x8
	strh	r4, [r0]
	ldr	r0, .L38+0xc
	strh	r4, [r0]
	ldr	r0, .L38+0x10
	strh	r4, [r0]
	ldr	r0, .L38+0x14
	strh	r4, [r0]
	ldr	r0, .L38+0x18
	strh	r4, [r0]
	ldr	r1, .L38+0x1c
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L38+0x20
	strh	r4, [r0]
	ldr	r1, .L38+0x24
	ldr	r0, .L38+0x28
	add	r1, r1, r0
	b	.L34
.L39:
	.align	2, 0
.L38:
	.word	gReservedSpritePaletteCount
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
	.word	gMain
	.word	0x43c
.L26:
	ldr	r4, .L40
	add	r0, r4, #0
	bl	SetUpWindowConfig
	ldr	r0, .L40+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4
	add	r1, r4, #0
	bl	InitWindowFromConfig
	b	.L35
.L41:
	.align	2, 0
.L40:
	.word	gWindowConfig_81E6F84
	.word	gUnknown_03004828
.L27:
	ldr	r4, .L42
	ldr	r0, [r4]
	add	r0, r0, #0x4
	bl	LoadTextWindowGraphics
	mov	r0, #0x2
	bl	SetTextWindowBaseTileNum
	ldr	r1, [r4]
	add	r1, r1, #0x34
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x4
	bl	LoadTextWindowGraphics
	bl	MenuZeroFillScreen
	bl	ResetPaletteFade
	ldr	r1, .L42+0x4
	ldr	r0, .L42+0x8
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L42+0xc
	bl	SetHBlankCallback
	ldr	r0, .L42+0x10
	bl	SetVBlankCallback
	b	.L24
.L43:
	.align	2, 0
.L42:
	.word	gUnknown_03004828
	.word	gMain
	.word	0x43c
	.word	EvoDummyFunc
	.word	VBlankCB_TradeEvolutionScene
.L28:
	bl	sub_804E22C
	b	.L35
.L29:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	add	r6, r0, #0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r5, r0, #0
	lsl	r0, r7, #0x3
	ldr	r1, .L44
	add	r0, r0, r1
	ldr	r1, .L44+0x4
	lsl	r2, r7, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L44+0x8
	ldr	r4, [r4, #0xc]
	str	r4, [sp]
	str	r7, [sp, #0x4]
	bl	DecompressPicFromTable_2
	add	r0, r7, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	GetMonSpritePalStructFromOtIdPersonality
	ldr	r0, [r0]
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r1, .L44+0xc
	ldr	r0, .L44+0x10
	add	r1, r1, r0
	b	.L34
.L45:
	.align	2, 0
.L44:
	.word	gMonFrontPicTable
	.word	gMonFrontPicCoords
	.word	gUnknown_081FAF4C
	.word	gMain
	.word	0x43c
.L30:
	add	r0, r7, #0
	mov	r1, #0x3
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L46
	ldr	r1, .L46+0x4
	str	r1, [r0, #0x10]
	mov	r1, #0x78
	mov	r2, #0x40
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r1, .L46+0x8
	lsl	r2, r0, #0x18
	lsr	r2, r2, #0x18
	strb	r0, [r1, #0x1]
	ldr	r3, .L46+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L46+0x10
	str	r2, [r0]
	add	r1, r1, r3
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	mov	r2, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L35:
	ldr	r1, .L46+0x14
	ldr	r2, .L46+0x18
	add	r1, r1, r2
.L34:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L24
.L47:
	.align	2, 0
.L46:
	.word	gUnknown_02024E8C
	.word	gDummySpriteAffineAnimTable
	.word	gSharedMem+0x14800
	.word	gSprites
	.word	nullsub_37
	.word	gMain
	.word	0x43c
.L31:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L48
	bl	SetMainCallback2
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0x9a
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
.L24:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	CB2_TradeEvolutionSceneUpdate
.Lfe6:
	.size	 CB2_TradeEvolutionSceneLoadGraphics,.Lfe6-CB2_TradeEvolutionSceneLoadGraphics
	.align	2, 0
	.globl	TradeEvolutionScene
	.type	 TradeEvolutionScene,function
	.thumb_func
TradeEvolutionScene:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffdc
	str	r0, [sp, #0x1c]
	add	r5, r1, #0
	add	r4, r2, #0
	mov	sl, r3
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, [sp, #0x1c]
	mov	r1, #0x2
	add	r2, sp, #0x8
	bl	GetMonData
	ldr	r0, .L51
	add	r1, sp, #0x8
	bl	StringCopy10
	ldr	r0, .L51+0x4
	mov	r1, #0xb
	mul	r1, r1, r5
	ldr	r2, .L51+0x8
	add	r1, r1, r2
	bl	StringCopy
	ldr	r1, .L51+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, [sp, #0x1c]
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	mov	r1, r8
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	ldr	r0, [sp, #0x1c]
	mov	r1, #0x0
	bl	GetMonData
	add	r6, r0, #0
	ldr	r0, [sp, #0x1c]
	mov	r1, #0x1
	bl	GetMonData
	add	r7, r0, #0
	ldr	r2, .L51+0x10
	mov	r9, r2
	strb	r4, [r2]
	lsl	r0, r5, #0x3
	ldr	r1, .L51+0x14
	add	r0, r0, r1
	ldr	r1, .L51+0x18
	lsl	r2, r5, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L51+0x1c
	ldr	r4, [r4, #0x4]
	str	r4, [sp]
	str	r5, [sp, #0x4]
	bl	DecompressPicFromTable_2
	add	r0, r5, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	GetMonSpritePalStructFromOtIdPersonality
	ldr	r0, [r0]
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L51+0x20
	ldr	r1, .L51+0x24
	str	r1, [r0, #0x10]
	mov	r1, #0x78
	mov	r2, #0x40
	mov	r3, #0x1e
	bl	CreateSprite
	lsl	r1, r0, #0x18
	lsr	r2, r1, #0x18
	mov	r1, r9
	strb	r0, [r1, #0x1]
	ldr	r3, .L51+0x28
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L51+0x2c
	str	r2, [r0]
	add	r1, r1, r3
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	mov	r2, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	bl	LoadEvoSparkleSpriteAndPal
	ldr	r0, .L51+0x30
	mov	r1, #0x0
	bl	CreateTask
	lsl	r1, r0, #0x18
	lsr	r2, r1, #0x18
	mov	r1, r9
	strb	r0, [r1, #0x2]
	ldr	r1, .L51+0x34
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0, #0x8]
	mov	r1, r8
	strh	r1, [r0, #0xe]
	strh	r5, [r0, #0x10]
	mov	r2, sp
	ldrh	r2, [r2, #0x1c]
	strh	r2, [r0, #0xa]
	ldr	r1, [sp, #0x1c]
	lsr	r1, r1, #0x10
	str	r1, [sp, #0x20]
	strh	r1, [r0, #0xc]
	mov	r1, #0x1
	strh	r1, [r0, #0x14]
	mov	r1, #0x0
	strh	r1, [r0, #0x1e]
	mov	r2, sl
	strh	r2, [r0, #0x20]
	ldr	r0, .L51+0x38
	bl	SetMainCallback2
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gStringVar1
	.word	gStringVar2
	.word	gSpeciesNames
	.word	gAffineAnimsDisabled
	.word	gSharedMem+0x14800
	.word	gMonFrontPicTable
	.word	gMonFrontPicCoords
	.word	gUnknown_081FAF4C
	.word	gUnknown_02024E8C
	.word	gDummySpriteAffineAnimTable
	.word	gSprites
	.word	nullsub_37
	.word	Task_TradeEvolutionScene
	.word	gTasks
	.word	CB2_TradeEvolutionSceneUpdate
.Lfe7:
	.size	 TradeEvolutionScene,.Lfe7-TradeEvolutionScene
	.align	2, 0
	.type	 CB2_EvolutionSceneUpdate,function
	.thumb_func
CB2_EvolutionSceneUpdate:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	ldr	r0, .L54
	bl	sub_800374C
	bl	UpdatePaletteFade
	bl	RunTasks
	pop	{r0}
	bx	r0
.L55:
	.align	2, 0
.L54:
	.word	gUnknown_03004210
.Lfe8:
	.size	 CB2_EvolutionSceneUpdate,.Lfe8-CB2_EvolutionSceneUpdate
	.align	2, 0
	.type	 CB2_TradeEvolutionSceneUpdate,function
	.thumb_func
CB2_TradeEvolutionSceneUpdate:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	ldr	r0, .L57
	ldr	r0, [r0]
	add	r0, r0, #0x4
	bl	sub_80035AC
	bl	UpdatePaletteFade
	bl	RunTasks
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	gUnknown_03004828
.Lfe9:
	.size	 CB2_TradeEvolutionSceneUpdate,.Lfe9-CB2_TradeEvolutionSceneUpdate
	.align	2, 0
	.type	 CreateShedinja,function
	.thumb_func
CreateShedinja:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	sl, r1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L72
	mov	r8, r0
	lsl	r1, r7, #0x2
	mov	r9, r1
	add	r0, r1, r7
	lsl	r4, r0, #0x3
	mov	r0, r8
	add	r6, r4, r0
	ldrh	r0, [r6]
	cmp	r0, #0xd
	beq	.LCB1330
	b	.L60	@long jump
.LCB1330:
	ldr	r1, .L72+0x4
	ldrb	r0, [r1]
	cmp	r0, #0x5
	bhi	.L60	@cond_branch
	add	r1, r0, #0
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L72+0x8
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, sl
	mov	r2, #0x64
	bl	CopyMon
	mov	r1, r8
	add	r2, r1, r4
	add	r2, r2, #0xc
	add	r0, r5, #0
	mov	r1, #0xb
	bl	SetMonData
	ldrh	r1, [r6, #0xc]
	mov	r0, #0xb
	mov	r2, r1
	mul	r2, r2, r0
	ldr	r0, .L72+0xc
	add	r2, r2, r0
	add	r0, r5, #0
	mov	r1, #0x2
	bl	SetMonData
	add	r0, r5, #0
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0
	mov	r1, #0x8
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0
	mov	r1, #0xa
	mov	r2, sp
	bl	SetMonData
	mov	r4, #0x32
	mov	r6, r9
.L64:
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, sp
	bl	SetMonData
	add	r4, r4, #0x1
	cmp	r4, #0x36
	ble	.L64	@cond_branch
	mov	r4, #0x43
.L69:
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, sp
	bl	SetMonData
	add	r4, r4, #0x1
	cmp	r4, #0x4f
	ble	.L69	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	mov	r0, #0xff
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x40
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0
	bl	CalculateMonStats
	bl	CalculatePlayerPartyCount
	ldr	r0, .L72
	add	r4, r6, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r4, #0xc]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	ldrh	r0, [r4, #0xc]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	GetSetPokedexFlag
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, .L72+0x10
	cmp	r0, r1
	bne	.L60	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetMonData
	cmp	r0, #0x1
	bne	.L60	@cond_branch
	mov	r0, sl
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, #0x97
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L60	@cond_branch
	ldr	r2, .L72+0x14
	add	r0, r5, #0
	mov	r1, #0x2
	bl	SetMonData
.L60:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gEvolutionTable
	.word	gPlayerPartyCount
	.word	gPlayerParty
	.word	gSpeciesNames
	.word	0x12f
	.word	sUnknownShedinjaJpnString
.Lfe10:
	.size	 CreateShedinja,.Lfe10-CreateShedinja
	.align	2, 0
	.type	 Task_EvolutionScene,function
	.thumb_func
Task_EvolutionScene:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xffffffe8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r2, .L171
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	mov	r9, r0
	mov	r1, #0xc
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x10
	mov	r1, r9
	orr	r1, r1, r0
	mov	r9, r1
	ldr	r0, .L171+0x4
	ldrh	r1, [r0, #0x2c]
	add	r6, r2, #0
	add	r4, r0, #0
	cmp	r1, #0x2
	bne	.L75	@cond_branch
	mov	r2, #0x8
	ldrsh	r0, [r3, r2]
	cmp	r0, #0x8
	bne	.L75	@cond_branch
	ldrh	r1, [r3, #0x12]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L75	@cond_branch
	mov	r0, #0x10
	strh	r0, [r3, #0x8]
	ldr	r0, .L171+0x8
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r6
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L75	@cond_branch
	strh	r2, [r1, #0x18]
.L75:
	lsl	r1, r7, #0x2
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r3, #0x8
	ldrsh	r0, [r0, r3]
	mov	r8, r1
	cmp	r0, #0x15
	bls	.LCB1561
	bl	.L77	@far jump
.LCB1561:
	lsl	r0, r0, #0x2
	ldr	r1, .L171+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L172:
	.align	2, 0
.L171:
	.word	gTasks
	.word	gMain
	.word	gBattleCommunication
	.word	.L164
	.align	2, 0
	.align	2, 0
.L164:
	.word	.L78
	.word	.L79
	.word	.L81
	.word	.L83
	.word	.L85
	.word	.L87
	.word	.L89
	.word	.L91
	.word	.L93
	.word	.L96
	.word	.L97
	.word	.L99
	.word	.L101
	.word	.L103
	.word	.L105
	.word	.L113
	.word	.L117
	.word	.L119
	.word	.L121
	.word	.L123
	.word	.L125
	.word	.L127
.L78:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r2, .L173
	ldr	r0, .L173+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L173+0x8
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L166
.L174:
	.align	2, 0
.L173:
	.word	gSprites
	.word	gSharedMem+0x14800
	.word	gTasks
.L79:
	ldr	r0, .L175
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1630
	bl	.L77	@far jump
.LCB1630:
	ldr	r4, .L175+0x4
	ldr	r1, .L175+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r0, .L175+0xc
	mov	r1, #0xf
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L175+0x10
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L166
.L176:
	.align	2, 0
.L175:
	.word	gPaletteFade
	.word	gStringVar4
	.word	BattleText_StartEvo
	.word	gUnknown_03004210
	.word	gTasks
.L81:
	ldr	r0, .L177
	ldrh	r0, [r0, #0x16]
	b	.L167
.L178:
	.align	2, 0
.L177:
	.word	gUnknown_03004210
.L83:
	bl	IsCryFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1686
	bl	.L77	@far jump
.LCB1686:
	mov	r0, #0xbc
	lsl	r0, r0, #0x1
	bl	PlaySE
	ldr	r0, .L179
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L166
.L180:
	.align	2, 0
.L179:
	.word	gTasks
.L85:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.LCB1712
	bl	.L77	@far jump
.LCB1712:
	ldr	r0, .L181
	bl	PlayNewMapMusic
	ldr	r0, .L181+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	str	r4, [sp]
	mov	r0, #0x1c
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	bl	.L77	@ far jump
.L182:
	.align	2, 0
.L181:
	.word	0x179
	.word	gTasks
.L87:
	ldr	r0, .L183
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1749
	bl	.L77	@far jump
.LCB1749:
	mov	r0, #0x11
	bl	LaunchTask_PreEvoSparklesSet1
	ldr	r1, .L183+0x4
	strb	r0, [r1, #0x2]
	ldr	r0, .L183+0x8
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L166
.L184:
	.align	2, 0
.L183:
	.word	gPaletteFade
	.word	gBattleCommunication
	.word	gTasks
.L89:
	ldr	r4, .L185
	ldrb	r0, [r4, #0x2]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.LCB1784
	bl	.L77	@far jump
.LCB1784:
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	ldr	r1, .L185+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x3]
	bl	LaunchTask_PreEvoSparklesSet2
	strb	r0, [r4, #0x2]
	bl	.L77	@ far jump
.L186:
	.align	2, 0
.L185:
	.word	gBattleCommunication
	.word	gSharedMem+0x14800
.L91:
	ldr	r4, .L187
	ldrb	r0, [r4, #0x2]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.LCB1821
	bl	.L77	@far jump
.LCB1821:
	ldr	r1, .L187+0x4
	ldrb	r0, [r1]
	ldrb	r1, [r1, #0x1]
	bl	sub_8149E7C
	strb	r0, [r4, #0x2]
	mov	r0, r8
	add	r1, r0, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	b	.L166
.L188:
	.align	2, 0
.L187:
	.word	gBattleCommunication
	.word	gSharedMem+0x14800
.L93:
	ldr	r1, .L189
	ldrb	r0, [r1, #0x3]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x3]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1855
	bl	.L77	@far jump
.LCB1855:
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
	ldr	r0, .L189+0x4
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.LCB1870
	bl	.L77	@far jump
.LCB1870:
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	b	.L166
.L190:
	.align	2, 0
.L189:
	.word	gSharedMem+0x14800
	.word	gBattleCommunication
.L96:
	bl	LaunchTask_PostEvoSparklesSet1
	ldr	r1, .L191
	strb	r0, [r1, #0x2]
	ldr	r0, .L191+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L166
.L192:
	.align	2, 0
.L191:
	.word	gBattleCommunication
	.word	gTasks
.L97:
	ldr	r5, .L193
	ldrb	r0, [r5, #0x2]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.LCB1917
	bl	.L77	@far jump
.LCB1917:
	mov	r0, r8
	add	r4, r0, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r6
	ldrh	r0, [r4, #0x10]
	bl	LaunchTask_PostEvoSparklesSet2AndFlash
	strb	r0, [r5, #0x2]
	b	.L168
.L194:
	.align	2, 0
.L193:
	.word	gBattleCommunication
.L99:
	ldr	r0, .L195
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.LCB1949
	bl	.L77	@far jump
.LCB1949:
	mov	r0, #0x21
	bl	PlaySE
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	b	.L166
.L196:
	.align	2, 0
.L195:
	.word	gBattleCommunication
.L101:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1972
	bl	.L77	@far jump
.LCB1972:
	bl	m4aMPlayAllStop
	ldr	r0, .L197
	mov	r3, r8
	add	r4, r3, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r4, #0x10]
	mov	r1, #0x0
	bl	PlayCry1
	ldr	r0, .L197+0x4
	ldr	r1, .L197+0x8
	mov	r2, #0x60
	bl	memcpy
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1c
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L168
.L198:
	.align	2, 0
.L197:
	.word	gTasks
	.word	gPlttBufferUnfaded+0x40
	.word	0x2009000
.L103:
	bl	IsCryFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2014
	bl	.L77	@far jump
.LCB2014:
	ldr	r0, .L199
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2022
	bl	.L77	@far jump
.LCB2022:
	ldr	r4, .L199+0x4
	ldr	r1, .L199+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r0, .L199+0xc
	mov	r1, #0xf
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L199+0x10
	bl	PlayBGM
	ldr	r2, .L199+0x14
	mov	r0, r8
	add	r1, r0, r7
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	add	r2, r2, r1
	add	r2, r2, #0x10
	mov	r0, r9
	mov	r1, #0xb
	bl	SetMonData
	mov	r0, r9
	bl	CalculateMonStats
	ldrh	r1, [r4, #0xe]
	ldrh	r2, [r4, #0x10]
	mov	r0, r9
	bl	EvolutionRenameMon
	ldrh	r0, [r4, #0x10]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	ldrh	r0, [r4, #0x10]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	GetSetPokedexFlag
	mov	r0, #0xe
	bl	IncrementGameStat
	b	.L77
.L200:
	.align	2, 0
.L199:
	.word	gPaletteFade
	.word	gStringVar4
	.word	BattleText_FinishEvo
	.word	gUnknown_03004210
	.word	0x173
	.word	gTasks
.L105:
	ldr	r0, .L201
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.LCB2103
	b	.L77	@long jump
.LCB2103:
	mov	r1, r8
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r6
	ldrb	r1, [r5, #0x14]
	mov	r0, r9
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0
	beq	.L107	@cond_branch
	mov	r2, #0x1e
	ldrsh	r4, [r5, r2]
	cmp	r4, #0
	bne	.L107	@cond_branch
	bl	Overworld_PlaySpecialMapMusic
	ldrh	r1, [r5, #0x12]
	mov	r0, #0x80
	orr	r0, r0, r1
	strh	r0, [r5, #0x12]
	strh	r4, [r5, #0x14]
	strh	r4, [r5, #0x18]
	mov	r0, r9
	mov	r1, #0x2
	add	r2, sp, #0x4
	bl	GetMonData
	ldr	r0, .L201+0x4
	add	r1, sp, #0x4
	bl	StringCopy10
	ldr	r0, .L201+0x8
	cmp	r6, r0
	bne	.L108	@cond_branch
	mov	r0, #0x15
	strh	r0, [r5, #0x8]
	b	.L77
.L202:
	.align	2, 0
.L201:
	.word	gUnknown_03004210
	.word	gBattleTextBuff1
	.word	0xffff
.L108:
	ldr	r0, .L203
	cmp	r6, r0
	bne	.LCB2164
	b	.L77	@long jump
.LCB2164:
	mov	r0, #0x13
	strh	r0, [r5, #0x8]
	b	.L77
.L204:
	.align	2, 0
.L203:
	.word	0xfffe
.L107:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L205
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L166
.L206:
	.align	2, 0
.L205:
	.word	gTasks
.L113:
	ldr	r0, .L207
	ldrb	r1, [r0, #0x7]
	mov	r2, #0x80
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2210
	b	.L77	@long jump
.LCB2210:
	mov	r1, r8
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r4, r0, r6
	ldrh	r1, [r4, #0x12]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L115	@cond_branch
	bl	Overworld_PlaySpecialMapMusic
.L115:
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L116	@cond_branch
	ldrh	r0, [r4, #0xe]
	mov	r1, r9
	bl	CreateShedinja
.L116:
	add	r0, r7, #0
	bl	DestroyTask
	ldr	r0, .L207+0x4
	ldr	r0, [r0]
	bl	SetMainCallback2
	b	.L77
.L208:
	.align	2, 0
.L207:
	.word	gPaletteFade
	.word	gCB2_AfterEvolution
.L117:
	ldr	r0, .L209
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.LCB2266
	b	.L77	@long jump
.LCB2266:
	bl	m4aMPlayAllStop
	ldr	r0, .L209+0x4
	ldr	r1, .L209+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	b	.L166
.L210:
	.align	2, 0
.L209:
	.word	gBattleCommunication
	.word	0x6001c
	.word	0x7fff
.L119:
	ldr	r0, .L211
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
.L167:
	cmp	r0, #0
	beq	.LCB2301
	b	.L77	@long jump
.LCB2301:
	mov	r0, r8
	add	r4, r0, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r6
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x0
	bl	PlayCry1
.L168:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L77
.L212:
	.align	2, 0
.L211:
	.word	gPaletteFade
.L121:
	bl	IsCryFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2331
	b	.L77	@long jump
.LCB2331:
	ldr	r4, .L213
	ldr	r1, .L213+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r0, .L213+0x8
	mov	r1, #0xf
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L213+0xc
	mov	r2, r8
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x1e]
	b	.L169
.L214:
	.align	2, 0
.L213:
	.word	gStringVar4
	.word	BattleText_StopEvo
	.word	gUnknown_03004210
	.word	gTasks
.L123:
	ldr	r4, .L215
	ldrh	r0, [r4, #0x16]
	cmp	r0, #0
	beq	.LCB2371
	b	.L77	@long jump
.LCB2371:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2377
	b	.L77	@long jump
.LCB2377:
	bl	sub_8024CEC
	ldr	r0, .L215+0x4
	bl	PlayFanfare
	ldr	r0, .L215+0x8
	ldr	r0, [r0, #0xc]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r1, .L215+0xc
	mov	r0, #0xf
	str	r0, [sp]
	add	r0, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L215+0x10
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x40
	strh	r0, [r1, #0x14]
.L166:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L77
.L216:
	.align	2, 0
.L215:
	.word	gUnknown_03004210
	.word	0x16f
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L125:
	ldr	r0, .L217
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.LCB2425
	b	.L77	@long jump
.LCB2425:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2431
	b	.L77	@long jump
.LCB2431:
	ldr	r0, .L217+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x14]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB2444
	b	.L77	@long jump
.LCB2444:
	mov	r0, #0xe
	strh	r0, [r1, #0x8]
	b	.L77
.L218:
	.align	2, 0
.L217:
	.word	gUnknown_03004210
	.word	gTasks
.L127:
	mov	r3, r8
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0xb
	bls	.LCB2466
	b	.L77	@long jump
.LCB2466:
	lsl	r0, r0, #0x2
	ldr	r1, .L219
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L220:
	.align	2, 0
.L219:
	.word	.L162
	.align	2, 0
	.align	2, 0
.L162:
	.word	.L129
	.word	.L131
	.word	.L133
	.word	.L136
	.word	.L138
	.word	.L146
	.word	.L148
	.word	.L154
	.word	.L156
	.word	.L158
	.word	.L159
	.word	.L160
.L129:
	ldr	r4, .L221
	ldrh	r0, [r4, #0x16]
	cmp	r0, #0
	beq	.LCB2490
	b	.L77	@long jump
.LCB2490:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2496
	b	.L77	@long jump
.LCB2496:
	bl	sub_8024CEC
	ldr	r0, .L221+0x4
	ldr	r0, [r0, #0x10]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r1, .L221+0x8
	mov	r0, #0xf
	str	r0, [sp]
	add	r0, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L221+0xc
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	b	.L170
.L222:
	.align	2, 0
.L221:
	.word	gUnknown_03004210
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L131:
	ldr	r4, .L223
	ldrh	r0, [r4, #0x16]
	cmp	r0, #0
	beq	.LCB2536
	b	.L77	@long jump
.LCB2536:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2542
	b	.L77	@long jump
.LCB2542:
	ldr	r0, .L223+0x4
	ldr	r0, [r0, #0x14]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r1, .L223+0x8
	mov	r0, #0xf
	str	r0, [sp]
	add	r0, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L223+0xc
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	b	.L170
.L224:
	.align	2, 0
.L223:
	.word	gUnknown_03004210
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L133:
	ldr	r4, .L225
	ldrh	r0, [r4, #0x16]
	cmp	r0, #0
	beq	.LCB2581
	b	.L77	@long jump
.LCB2581:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L136	@cond_branch
	ldr	r0, .L225+0x4
	ldr	r0, [r0, #0x18]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r1, .L225+0x8
	mov	r0, #0xf
	str	r0, [sp]
	add	r0, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L225+0xc
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x5
	strh	r0, [r1, #0x1a]
	mov	r0, #0x9
	strh	r0, [r1, #0x1c]
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x18]
.L136:
	ldr	r0, .L225
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.LCB2620
	b	.L77	@long jump
.LCB2620:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2626
	b	.L77	@long jump
.LCB2626:
	bl	sub_8023A80
	ldr	r0, .L225+0xc
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r1, #0x18]
	ldr	r0, .L225+0x10
	strb	r2, [r0, #0x1]
	bl	sub_802BC6C
	b	.L77
.L226:
	.align	2, 0
.L225:
	.word	gUnknown_03004210
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
	.word	gBattleCommunication
.L138:
	ldr	r0, .L227
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L139	@cond_branch
	ldr	r4, .L227+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L139	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L139:
	ldr	r0, .L227
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L140	@cond_branch
	ldr	r4, .L227+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L140	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L140:
	ldr	r0, .L227
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L141	@cond_branch
	bl	sub_8023AD8
	ldr	r0, .L227+0x8
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L227+0xc
	ldr	r1, .L227+0x10
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L227+0x4
	ldrb	r2, [r0, #0x1]
	cmp	r2, #0
	beq	.L142	@cond_branch
	ldr	r0, .L227+0x14
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1c]
	strh	r0, [r1, #0x18]
	b	.L141
.L228:
	.align	2, 0
.L227:
	.word	gMain
	.word	gBattleCommunication
	.word	gBattleStringsTable
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gTasks
.L142:
	ldr	r0, .L229
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1a]
	strh	r0, [r1, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L141	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r2, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L141:
	ldr	r0, .L229+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2788
	b	.L77	@long jump
.LCB2788:
	bl	sub_8023AD8
	ldr	r0, .L229+0x8
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L229+0xc
	ldr	r1, .L229+0x10
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L229
	mov	r2, r8
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x1c]
	strh	r1, [r0, #0x18]
	b	.L77
.L230:
	.align	2, 0
.L229:
	.word	gTasks
	.word	gMain
	.word	gBattleStringsTable
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
.L146:
	ldr	r0, .L231
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2838
	b	.L77	@long jump
.LCB2838:
	ldr	r0, .L231+0x4
	mov	r3, r8
	add	r5, r3, r7
	lsl	r5, r5, #0x3
	add	r5, r5, r6
	ldrh	r1, [r5, #0x20]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L231+0x8
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L231+0xc
	ldr	r4, .L231+0x10
	ldrh	r4, [r4]
	str	r4, [sp]
	bl	sub_809D9F0
	ldrh	r0, [r5, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x18]
	b	.L77
.L232:
	.align	2, 0
.L231:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	gPlayerPartyCount
	.word	CB2_EvolutionSceneLoadGraphics
	.word	gMoveToLearn
.L148:
	ldr	r0, .L233
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2888
	b	.L77	@long jump
.LCB2888:
	ldr	r1, [r4, #0x4]
	ldr	r0, .L233+0x4
	cmp	r1, r0
	beq	.LCB2893
	b	.L77	@long jump
.LCB2893:
	bl	sub_809FA30
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x4
	bne	.L150	@cond_branch
	ldr	r0, .L233+0x8
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x9
	b	.L170
.L234:
	.align	2, 0
.L233:
	.word	gPaletteFade
	.word	CB2_EvolutionSceneUpdate
	.word	gTasks
.L150:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r9
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsHMMove2
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldr	r0, .L235
	ldr	r3, .L235+0x4
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L235+0x8
	ldr	r1, .L235+0xc
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L235+0x10
	mov	r2, r8
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xb
	strh	r1, [r0, #0x18]
	b	.L77
.L236:
	.align	2, 0
.L235:
	.word	gBattleStringsTable
	.word	0x4cc
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gTasks
.L152:
	ldr	r1, .L237
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	lsl	r4, r6, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r9
	add	r1, r4, #0
	bl	RemoveMonPPBonus
	ldr	r0, .L237+0x4
	ldrh	r1, [r0]
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonMoveSlot
	ldr	r0, .L237+0x8
	mov	r3, #0xcf
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L237+0xc
	ldr	r1, .L237+0x10
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L237+0x14
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	b	.L170
.L238:
	.align	2, 0
.L237:
	.word	gBattleTextBuff2
	.word	gMoveToLearn
	.word	gBattleStringsTable
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gTasks
.L154:
	ldr	r4, .L239
	ldrh	r0, [r4, #0x16]
	cmp	r0, #0
	beq	.LCB3045
	b	.L77	@long jump
.LCB3045:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3051
	b	.L77	@long jump
.LCB3051:
	ldr	r0, .L239+0x4
	ldr	r0, [r0, #0x1c]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r1, .L239+0x8
	mov	r0, #0xf
	str	r0, [sp]
	add	r0, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L239+0xc
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	b	.L170
.L240:
	.align	2, 0
.L239:
	.word	gUnknown_03004210
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L156:
	ldr	r4, .L241
	ldrh	r0, [r4, #0x16]
	cmp	r0, #0
	bne	.L77	@cond_branch
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L77	@cond_branch
	ldr	r0, .L241+0x4
	mov	r1, #0xd0
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r1, .L241+0x8
	mov	r0, #0xf
	str	r0, [sp]
	add	r0, r4, #0
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L241+0xc
	mov	r2, r8
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x13
	strh	r1, [r0, #0x8]
	b	.L77
.L242:
	.align	2, 0
.L241:
	.word	gUnknown_03004210
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L158:
	ldr	r0, .L243
	ldr	r0, [r0, #0x20]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L243+0x4
	ldr	r1, .L243+0x8
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L243+0xc
	mov	r3, r8
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0xa
	strh	r1, [r0, #0x1a]
	strh	r2, [r0, #0x1c]
	mov	r1, #0x3
	strh	r1, [r0, #0x18]
	b	.L77
.L244:
	.align	2, 0
.L243:
	.word	gBattleStringsTable
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gTasks
.L159:
	ldr	r0, .L245
	ldr	r0, [r0, #0x24]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L245+0x4
	ldr	r1, .L245+0x8
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L245+0xc
	mov	r2, r8
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
.L169:
	mov	r1, #0xe
	strh	r1, [r0, #0x8]
	b	.L77
.L246:
	.align	2, 0
.L245:
	.word	gBattleStringsTable
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gTasks
.L160:
	ldr	r0, .L247
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	bne	.L77	@cond_branch
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L77	@cond_branch
	ldr	r0, .L247+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x5
.L170:
	strh	r0, [r1, #0x18]
.L77:
	add	sp, sp, #0x18
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	gUnknown_03004210
	.word	gTasks
.Lfe11:
	.size	 Task_EvolutionScene,.Lfe11-Task_EvolutionScene
	.align	2, 0
	.type	 Task_TradeEvolutionScene,function
	.thumb_func
Task_TradeEvolutionScene:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xffffffe8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r2, .L334
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	mov	r8, r0
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	lsl	r0, r0, #0x10
	mov	r3, r8
	orr	r3, r3, r0
	mov	r8, r3
	mov	r3, #0x8
	ldrsh	r0, [r1, r3]
	add	r6, r2, #0
	cmp	r0, #0x11
	bls	.LCB3266
	bl	.L250	@far jump
.LCB3266:
	lsl	r0, r0, #0x2
	ldr	r1, .L334+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L335:
	.align	2, 0
.L334:
	.word	gTasks
	.word	.L327
	.align	2, 0
	.align	2, 0
.L327:
	.word	.L251
	.word	.L252
	.word	.L254
	.word	.L256
	.word	.L258
	.word	.L260
	.word	.L262
	.word	.L264
	.word	.L267
	.word	.L268
	.word	.L270
	.word	.L272
	.word	.L274
	.word	.L276
	.word	.L284
	.word	.L286
	.word	.L288
	.word	.L290
.L251:
	ldr	r4, .L336
	ldr	r1, .L336+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r0, .L336+0x8
	ldr	r1, [r0]
	add	r0, r1, #0x4
	add	r1, r1, #0x34
	ldrb	r2, [r1]
	mov	r1, #0xf
	str	r1, [sp]
	add	r1, r4, #0
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L336+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	b	.L329
.L337:
	.align	2, 0
.L336:
	.word	gStringVar4
	.word	BattleText_StartEvo
	.word	gUnknown_03004828
	.word	gTasks
.L252:
	ldr	r0, .L338
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB3326
	bl	.L250	@far jump
.LCB3326:
	lsl	r4, r7, #0x2
	add	r4, r4, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r6
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x0
	bl	PlayCry1
	b	.L330
.L339:
	.align	2, 0
.L338:
	.word	gUnknown_03004828
.L254:
	bl	IsCryFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3351
	bl	.L250	@far jump
.LCB3351:
	ldr	r0, .L340
	bl	m4aSongNumStop
	mov	r0, #0xbc
	lsl	r0, r0, #0x1
	bl	PlaySE
	ldr	r1, .L340+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	b	.L329
.L341:
	.align	2, 0
.L340:
	.word	0x179
	.word	gTasks
.L256:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.LCB3380
	bl	.L250	@far jump
.LCB3380:
	ldr	r0, .L342
	bl	PlayBGM
	ldr	r1, .L342+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	str	r5, [sp]
	mov	r0, #0x1c
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	bl	.L250	@ far jump
.L343:
	.align	2, 0
.L342:
	.word	0x179
	.word	gTasks
.L258:
	ldr	r0, .L344
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3416
	bl	.L250	@far jump
.LCB3416:
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0x9a
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	mov	r0, #0x11
	bl	LaunchTask_PreEvoSparklesSet1
	ldr	r1, .L344+0x4
	strb	r0, [r1, #0x2]
	ldr	r1, .L344+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	b	.L329
.L345:
	.align	2, 0
.L344:
	.word	gPaletteFade
	.word	gBattleCommunication
	.word	gTasks
.L260:
	ldr	r4, .L346
	ldrb	r0, [r4, #0x2]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.LCB3456
	bl	.L250	@far jump
.LCB3456:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	ldr	r1, .L346+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x3]
	bl	LaunchTask_PreEvoSparklesSet2
	strb	r0, [r4, #0x2]
	bl	.L250	@ far jump
.L347:
	.align	2, 0
.L346:
	.word	gBattleCommunication
	.word	gSharedMem+0x14800
.L262:
	ldr	r4, .L348
	ldrb	r0, [r4, #0x2]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.LCB3492
	bl	.L250	@far jump
.LCB3492:
	ldr	r1, .L348+0x4
	ldrb	r0, [r1]
	ldrb	r1, [r1, #0x1]
	bl	sub_8149E7C
	strb	r0, [r4, #0x2]
	b	.L331
.L349:
	.align	2, 0
.L348:
	.word	gBattleCommunication
	.word	gSharedMem+0x14800
.L264:
	ldr	r1, .L350
	ldrb	r0, [r1, #0x3]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x3]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3521
	bl	.L250	@far jump
.LCB3521:
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
	ldr	r0, .L350+0x4
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.LCB3536
	bl	.L250	@far jump
.LCB3536:
	b	.L331
.L351:
	.align	2, 0
.L350:
	.word	gSharedMem+0x14800
	.word	gBattleCommunication
.L267:
	bl	LaunchTask_PostEvoSparklesSet1
	ldr	r1, .L352
	strb	r0, [r1, #0x2]
	ldr	r1, .L352+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	b	.L329
.L353:
	.align	2, 0
.L352:
	.word	gBattleCommunication
	.word	gTasks
.L268:
	ldr	r5, .L354
	ldrb	r0, [r5, #0x2]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r6
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.LCB3577
	bl	.L250	@far jump
.LCB3577:
	lsl	r4, r7, #0x2
	add	r4, r4, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r6
	ldrh	r0, [r4, #0x10]
	bl	LaunchTask_PostEvoSparklesSet2AndFlash_Trade
	strb	r0, [r5, #0x2]
	b	.L330
.L355:
	.align	2, 0
.L354:
	.word	gBattleCommunication
.L270:
	ldr	r0, .L356
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.LCB3608
	bl	.L250	@far jump
.LCB3608:
	mov	r0, #0x21
	bl	PlaySE
.L331:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r6
.L329:
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	bl	.L250	@ far jump
.L357:
	.align	2, 0
.L356:
	.word	gBattleCommunication
.L272:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3635
	bl	.L250	@far jump
.LCB3635:
	ldr	r0, .L358
	lsl	r4, r7, #0x2
	add	r4, r4, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r4, #0x10]
	mov	r1, #0x0
	bl	PlayCry1
	ldr	r0, .L358+0x4
	ldr	r1, .L358+0x8
	mov	r2, #0x60
	bl	memcpy
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L330:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	bl	.L250	@ far jump
.L359:
	.align	2, 0
.L358:
	.word	gTasks
	.word	gPlttBufferUnfaded+0x40
	.word	0x2009000
.L274:
	bl	IsCryFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB3679
	bl	.L250	@far jump
.LCB3679:
	ldr	r0, .L360
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3687
	bl	.L250	@far jump
.LCB3687:
	ldr	r4, .L360+0x4
	ldr	r1, .L360+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r0, .L360+0xc
	ldr	r1, [r0]
	add	r0, r1, #0x4
	add	r1, r1, #0x34
	ldrb	r2, [r1]
	mov	r1, #0xf
	str	r1, [sp]
	add	r1, r4, #0
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L360+0x10
	bl	PlayFanfare
	ldr	r2, .L360+0x14
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	add	r2, r2, r1
	add	r2, r2, #0x10
	mov	r0, r8
	mov	r1, #0xb
	bl	SetMonData
	mov	r0, r8
	bl	CalculateMonStats
	ldrh	r1, [r4, #0xe]
	ldrh	r2, [r4, #0x10]
	mov	r0, r8
	bl	EvolutionRenameMon
	ldrh	r0, [r4, #0x10]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	ldrh	r0, [r4, #0x10]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	GetSetPokedexFlag
	mov	r0, #0xe
	bl	IncrementGameStat
	b	.L250
.L361:
	.align	2, 0
.L360:
	.word	gPaletteFade
	.word	gStringVar4
	.word	BattleText_FinishEvo
	.word	gUnknown_03004828
	.word	0x173
	.word	gTasks
.L276:
	ldr	r0, .L362
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB3772
	b	.L250	@long jump
.LCB3772:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB3778
	b	.L250	@long jump
.LCB3778:
	ldr	r1, .L362+0x4
	lsl	r4, r7, #0x2
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrb	r1, [r5, #0x14]
	mov	r0, r8
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r9, r4
	cmp	r6, #0
	beq	.L278	@cond_branch
	mov	r3, #0x1e
	ldrsh	r2, [r5, r3]
	cmp	r2, #0
	bne	.L278	@cond_branch
	ldrh	r1, [r5, #0x12]
	mov	r0, #0x80
	orr	r0, r0, r1
	strh	r0, [r5, #0x12]
	strh	r2, [r5, #0x14]
	strh	r2, [r5, #0x18]
	mov	r0, r8
	mov	r1, #0x2
	add	r2, sp, #0x4
	bl	GetMonData
	ldr	r0, .L362+0x8
	add	r1, sp, #0x4
	bl	StringCopy10
	ldr	r0, .L362+0xc
	cmp	r6, r0
	bne	.L279	@cond_branch
	mov	r0, #0x11
	strh	r0, [r5, #0x8]
	b	.L250
.L363:
	.align	2, 0
.L362:
	.word	gUnknown_03004828
	.word	gTasks
	.word	gBattleTextBuff1
	.word	0xffff
.L279:
	ldr	r0, .L364
	cmp	r6, r0
	bne	.LCB3839
	b	.L250	@long jump
.LCB3839:
	mov	r0, #0xf
	strh	r0, [r5, #0x8]
	b	.L250
.L365:
	.align	2, 0
.L364:
	.word	0xfffe
.L278:
	ldr	r0, .L366
	bl	PlayBGM
	ldr	r0, .L366+0x4
	ldr	r2, [r0]
	add	r0, r2, #0x4
	ldr	r1, .L366+0x8
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L366+0xc
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L332
.L367:
	.align	2, 0
.L366:
	.word	0x179
	.word	gUnknown_03004828
	.word	gOtherText_LinkStandby2
	.word	gTasks
.L284:
	ldr	r0, .L368
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB3893
	b	.L250	@long jump
.LCB3893:
	add	r0, r7, #0
	bl	DestroyTask
	ldr	r0, .L368+0x4
	ldr	r0, [r0]
	bl	SetMainCallback2
	b	.L250
.L369:
	.align	2, 0
.L368:
	.word	gUnknown_03004828
	.word	gCB2_AfterEvolution
.L286:
	ldr	r4, .L370
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB3917
	b	.L250	@long jump
.LCB3917:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3923
	b	.L250	@long jump
.LCB3923:
	bl	sub_8024CEC
	ldr	r0, .L370+0x4
	bl	PlayFanfare
	ldr	r0, .L370+0x8
	ldr	r0, [r0, #0xc]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r2, [r4]
	add	r0, r2, #0x4
	ldr	r1, .L370+0xc
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L370+0x10
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x40
	strh	r0, [r1, #0x14]
.L332:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L250
.L371:
	.align	2, 0
.L370:
	.word	gUnknown_03004828
	.word	0x16f
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L288:
	ldr	r0, .L372
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB3975
	b	.L250	@long jump
.LCB3975:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB3981
	b	.L250	@long jump
.LCB3981:
	ldr	r0, .L372+0x4
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x14]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB3993
	b	.L250	@long jump
.LCB3993:
	mov	r0, #0xd
	strh	r0, [r1, #0x8]
	b	.L250
.L373:
	.align	2, 0
.L372:
	.word	gUnknown_03004828
	.word	gTasks
.L290:
	lsl	r1, r7, #0x2
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	mov	r3, #0x18
	ldrsh	r0, [r0, r3]
	mov	r9, r1
	cmp	r0, #0xb
	bls	.LCB4015
	b	.L250	@long jump
.LCB4015:
	lsl	r0, r0, #0x2
	ldr	r1, .L374
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L375:
	.align	2, 0
.L374:
	.word	.L325
	.align	2, 0
	.align	2, 0
.L325:
	.word	.L292
	.word	.L294
	.word	.L296
	.word	.L299
	.word	.L301
	.word	.L309
	.word	.L311
	.word	.L317
	.word	.L319
	.word	.L321
	.word	.L322
	.word	.L323
.L292:
	ldr	r4, .L376
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB4040
	b	.L250	@long jump
.LCB4040:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4046
	b	.L250	@long jump
.LCB4046:
	bl	sub_8024CEC
	ldr	r0, .L376+0x4
	ldr	r0, [r0, #0x10]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r2, [r4]
	add	r0, r2, #0x4
	ldr	r1, .L376+0x8
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L376+0xc
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	b	.L333
.L377:
	.align	2, 0
.L376:
	.word	gUnknown_03004828
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L294:
	ldr	r4, .L378
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB4091
	b	.L250	@long jump
.LCB4091:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4097
	b	.L250	@long jump
.LCB4097:
	ldr	r0, .L378+0x4
	ldr	r0, [r0, #0x14]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r2, [r4]
	add	r0, r2, #0x4
	ldr	r1, .L378+0x8
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L378+0xc
	mov	r3, r9
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	b	.L333
.L379:
	.align	2, 0
.L378:
	.word	gUnknown_03004828
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L296:
	ldr	r4, .L380
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB4141
	b	.L250	@long jump
.LCB4141:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L299	@cond_branch
	ldr	r0, .L380+0x4
	ldr	r0, [r0, #0x18]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r2, [r4]
	add	r0, r2, #0x4
	ldr	r1, .L380+0x8
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L380+0xc
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x5
	strh	r0, [r1, #0x1a]
	mov	r0, #0x9
	strh	r0, [r1, #0x1c]
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x18]
.L299:
	ldr	r5, .L380
	ldr	r0, [r5]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB4185
	b	.L250	@long jump
.LCB4185:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.LCB4191
	b	.L250	@long jump
.LCB4191:
	ldr	r0, [r5]
	add	r0, r0, #0x4
	mov	r1, #0xd
	str	r1, [sp]
	mov	r1, #0x18
	mov	r2, #0x8
	mov	r3, #0x1d
	bl	DrawTextWindow
	ldr	r4, .L380+0x10
	strb	r6, [r4, #0x1]
	ldr	r2, [r5]
	add	r0, r2, #0x4
	ldr	r1, .L380+0x14
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	add	r2, r2, #0x80
	mov	r3, #0x9
	str	r3, [sp]
	mov	r3, #0x19
	bl	InitWindow
	ldr	r0, [r5]
	add	r0, r0, #0x4
	bl	sub_8002F44
	ldr	r1, .L380+0x18
	ldr	r3, .L380+0x1c
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0xc
	bl	sub_814A5C0
	bl	sub_81150D8
	ldr	r0, .L380+0xc
	mov	r3, r9
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r1, #0x18]
	strb	r2, [r4, #0x1]
	b	.L250
.L381:
	.align	2, 0
.L380:
	.word	gUnknown_03004828
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
	.word	gBattleCommunication
	.word	gOtherText_YesNoAndPlayer
	.word	0xffff
	.word	0x2d9f
.L301:
	ldr	r0, .L382
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L302	@cond_branch
	ldr	r4, .L382+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L302	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	EvoDummyFunc2
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	sub_81150D8
.L302:
	ldr	r0, .L382
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L303	@cond_branch
	ldr	r4, .L382+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L303	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	EvoDummyFunc2
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	sub_81150D8
.L303:
	ldr	r0, .L382
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L304	@cond_branch
	ldr	r4, .L382+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x4
	mov	r1, #0xd
	str	r1, [sp]
	mov	r1, #0x18
	mov	r2, #0x8
	mov	r3, #0x1d
	bl	ZeroFillWindowRect
	bl	DestroyMenuCursor
	ldr	r0, .L382+0xc
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r2, [r4]
	add	r0, r2, #0x4
	ldr	r1, .L382+0x10
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L382+0x4
	ldrb	r2, [r0, #0x1]
	cmp	r2, #0
	beq	.L305	@cond_branch
	ldr	r0, .L382+0x14
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1c]
	strh	r0, [r1, #0x18]
	b	.L304
.L383:
	.align	2, 0
.L382:
	.word	gMain
	.word	gBattleCommunication
	.word	gUnknown_03004828
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L305:
	ldr	r0, .L384
	mov	r3, r9
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1a]
	strh	r0, [r1, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L304	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r2, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L304:
	ldr	r0, .L384+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB4406
	b	.L250	@long jump
.LCB4406:
	ldr	r4, .L384+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x4
	mov	r1, #0xd
	str	r1, [sp]
	mov	r1, #0x18
	mov	r2, #0x8
	mov	r3, #0x1d
	bl	ZeroFillWindowRect
	bl	DestroyMenuCursor
	ldr	r0, .L384+0xc
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r2, [r4]
	add	r0, r2, #0x4
	ldr	r1, .L384+0x10
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L384
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x1c]
	strh	r1, [r0, #0x18]
	b	.L250
.L385:
	.align	2, 0
.L384:
	.word	gTasks
	.word	gMain
	.word	gUnknown_03004828
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
.L309:
	ldr	r0, .L386
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4469
	b	.L250	@long jump
.LCB4469:
	ldr	r0, .L386+0x4
	mov	r3, r9
	add	r5, r3, r7
	lsl	r5, r5, #0x3
	add	r5, r5, r6
	ldrh	r1, [r5, #0x20]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L386+0x8
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L386+0xc
	ldr	r4, .L386+0x10
	ldrh	r4, [r4]
	str	r4, [sp]
	bl	sub_809D9F0
	ldrh	r0, [r5, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x18]
	b	.L250
.L387:
	.align	2, 0
.L386:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	gPlayerPartyCount
	.word	CB2_TradeEvolutionSceneLoadGraphics
	.word	gMoveToLearn
.L311:
	ldr	r0, .L388
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4519
	b	.L250	@long jump
.LCB4519:
	ldr	r0, .L388+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L388+0x8
	cmp	r1, r0
	beq	.LCB4524
	b	.L250	@long jump
.LCB4524:
	bl	sub_809FA30
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x4
	bne	.L313	@cond_branch
	ldr	r0, .L388+0xc
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x9
	b	.L333
.L389:
	.align	2, 0
.L388:
	.word	gPaletteFade
	.word	gMain
	.word	CB2_TradeEvolutionSceneUpdate
	.word	gTasks
.L313:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsHMMove2
	cmp	r0, #0
	beq	.L315	@cond_branch
	ldr	r0, .L390
	ldr	r3, .L390+0x4
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L390+0x8
	ldr	r2, [r0]
	add	r0, r2, #0x4
	ldr	r1, .L390+0xc
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L390+0x10
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xb
	strh	r1, [r0, #0x18]
	b	.L250
.L391:
	.align	2, 0
.L390:
	.word	gBattleStringsTable
	.word	0x4cc
	.word	gUnknown_03004828
	.word	gDisplayedStringBattle
	.word	gTasks
.L315:
	ldr	r1, .L392
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	lsl	r4, r6, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	add	r1, r4, #0
	bl	RemoveMonPPBonus
	ldr	r0, .L392+0x4
	ldrh	r1, [r0]
	mov	r0, r8
	add	r2, r4, #0
	bl	SetMonMoveSlot
	ldr	r0, .L392+0x8
	mov	r3, #0xcf
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L392+0xc
	ldr	r2, [r0]
	add	r0, r2, #0x4
	ldr	r1, .L392+0x10
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L392+0x14
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	b	.L333
.L393:
	.align	2, 0
.L392:
	.word	gBattleTextBuff2
	.word	gMoveToLearn
	.word	gBattleStringsTable
	.word	gUnknown_03004828
	.word	gDisplayedStringBattle
	.word	gTasks
.L317:
	ldr	r4, .L394
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	beq	.LCB4686
	b	.L250	@long jump
.LCB4686:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4692
	b	.L250	@long jump
.LCB4692:
	ldr	r0, .L394+0x4
	ldr	r0, [r0, #0x1c]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r2, [r4]
	add	r0, r2, #0x4
	ldr	r1, .L394+0x8
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r0, .L394+0xc
	mov	r3, r9
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	add	r0, r0, #0x1
	b	.L333
.L395:
	.align	2, 0
.L394:
	.word	gUnknown_03004828
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L319:
	ldr	r4, .L396
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	bne	.L250	@cond_branch
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L250	@cond_branch
	ldr	r0, .L396+0x4
	mov	r1, #0xd0
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r2, [r4]
	add	r0, r2, #0x4
	ldr	r1, .L396+0x8
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r4, #0xf
	str	r4, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L396+0xc
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	b	.L250
.L397:
	.align	2, 0
.L396:
	.word	gUnknown_03004828
	.word	gBattleStringsTable
	.word	gDisplayedStringBattle
	.word	gTasks
.L321:
	ldr	r0, .L398
	ldr	r0, [r0, #0x20]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L398+0x4
	ldr	r2, [r0]
	add	r0, r2, #0x4
	ldr	r1, .L398+0x8
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L398+0xc
	mov	r3, r9
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0xa
	strh	r1, [r0, #0x1a]
	strh	r2, [r0, #0x1c]
	mov	r1, #0x3
	strh	r1, [r0, #0x18]
	b	.L250
.L399:
	.align	2, 0
.L398:
	.word	gBattleStringsTable
	.word	gUnknown_03004828
	.word	gDisplayedStringBattle
	.word	gTasks
.L322:
	ldr	r0, .L400
	ldr	r0, [r0, #0x24]
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r0, .L400+0x4
	ldr	r2, [r0]
	add	r0, r2, #0x4
	ldr	r1, .L400+0x8
	add	r2, r2, #0x34
	ldrb	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L400+0xc
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xd
	strh	r1, [r0, #0x8]
	b	.L250
.L401:
	.align	2, 0
.L400:
	.word	gBattleStringsTable
	.word	gUnknown_03004828
	.word	gDisplayedStringBattle
	.word	gTasks
.L323:
	ldr	r0, .L402
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0
	bne	.L250	@cond_branch
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L250	@cond_branch
	ldr	r0, .L402+0x4
	mov	r3, r9
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x5
.L333:
	strh	r0, [r1, #0x18]
.L250:
	add	sp, sp, #0x18
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L403:
	.align	2, 0
.L402:
	.word	gUnknown_03004828
	.word	gTasks
.Lfe12:
	.size	 Task_TradeEvolutionScene,.Lfe12-Task_TradeEvolutionScene
	.align	2, 0
	.globl	unref_sub_8113B50
	.type	 unref_sub_8113B50,function
	.thumb_func
unref_sub_8113B50:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x3C
    str r0, [sp]
    str r1, [sp, 0x4]
    movs r0, 0
    str r0, [sp, 0xC]
    movs r1, 0
    str r1, [sp, 0x10]
    movs r2, 0
    str r2, [sp, 0x8]
    ldr r3, _08113C60 @ =gSharedMem + 0x14800
    mov r12, r3
    ldr r4, _08113C64 @ =0x000018c4
    add r4, r12
    mov r10, r4
    ldr r5, _08113C68 @ =0x000020c4
    add r5, r12
    mov r8, r5
_08113B7C:
    adds r0, r3, 0
    adds r0, 0x84
    ldr r1, [sp, 0x8]
    adds r0, r1, r0
    strb r2, [r0]
    adds r0, r3, 0x4
    adds r0, r1, r0
    strb r2, [r0]
    ldr r4, _08113C6C @ =gSharedMem + 0x14844
    adds r0, r1, r4
    strb r2, [r0]
    movs r6, 0
    lsls r1, 5
    mov r9, r1
    ldr r5, [sp, 0x8]
    lsls r4, r5, 6
_08113B9C:
    mov r0, r9
    adds r1, r6, r0
    ldr r5, _08113C70 @ =gSharedMem + 0x158C4
    adds r0, r1, r5
    strb r2, [r0]
    mov r5, r10
    adds r0, r1, r5
    strb r2, [r0]
    mov r5, r8
    adds r0, r1, r5
    strb r2, [r0]
    ldr r5, _08113C74 @ =gSharedMem + 0x170C4
    adds r0, r1, r5
    strb r2, [r0]
    adds r7, r3, 0
    adds r7, 0xC4
    adds r0, r1, r7
    strb r2, [r0]
    ldr r5, _08113C78 @ =0x000008c4
    adds r0, r3, r5
    adds r0, r1, r0
    strb r2, [r0]
    ldr r5, _08113C7C @ =0x000030c4
    adds r0, r3, r5
    adds r0, r1, r0
    strb r2, [r0]
    ldr r5, _08113C80 @ =0x000038c4
    adds r0, r3, r5
    adds r1, r0
    strb r2, [r1]
    lsls r1, r6, 1
    adds r1, r4
    ldr r5, _08113C84 @ =0x000060c4
    adds r0, r3, r5
    adds r0, r1, r0
    strh r2, [r0]
    ldr r5, _08113C88 @ =0x000070c4
    adds r0, r3, r5
    adds r0, r1, r0
    strh r2, [r0]
    ldr r5, _08113C8C @ =0x000080c4
    adds r0, r3, r5
    adds r0, r1, r0
    strh r2, [r0]
    ldr r5, _08113C90 @ =0x000090c4
    adds r0, r3, r5
    adds r1, r0
    strh r2, [r1]
    adds r6, 0x1
    cmp r6, 0x1F
    ble _08113B9C
    ldr r0, [sp, 0x8]
    adds r0, 0x1
    str r0, [sp, 0x8]
    cmp r0, 0x3F
    ble _08113B7C
    ldr r1, _08113C94 @ =0x0000a0c4
    add r1, r12
    movs r0, 0x40
    strb r0, [r1]
    movs r1, 0
    mov r8, r1
    movs r2, 0
    str r2, [sp, 0x8]
    movs r3, 0x80
    lsls r3, 5
    adds r3, r7
    mov r12, r3
    movs r4, 0xC0
    lsls r4, 5
    adds r4, r7
    mov r9, r4
    movs r5, 0
    adds r4, r7, 0
    subs r4, 0xC0
_08113C32:
    movs r3, 0
    ldr r2, [sp]
    add r2, r8
    movs r6, 0
    ldr r0, [sp, 0x8]
    adds r0, 0x1
    str r0, [sp, 0x30]
    ldr r1, [sp, 0x8]
    lsls r1, 7
    mov r10, r1
    movs r7, 0x1
    negs r7, r7
_08113C4A:
    asrs r0, r6, 1
    lsls r0, 2
    add r0, r10
    ldr r1, _08113C98 @ =gSharedMem + 0x188C4
    adds r0, r1
    str r2, [r0]
    cmp r3, 0
    beq _08113C9C
    cmp r3, 0x1
    beq _08113CC6
    b _08113CF4
    .align 2, 0
_08113C60: .4byte gSharedMem + 0x14800
_08113C64: .4byte 0x000018c4
_08113C68: .4byte 0x000020c4
_08113C6C: .4byte gSharedMem + 0x14844
_08113C70: .4byte gSharedMem + 0x158C4
_08113C74: .4byte gSharedMem + 0x170C4
_08113C78: .4byte 0x000008c4
_08113C7C: .4byte 0x000030c4
_08113C80: .4byte 0x000038c4
_08113C84: .4byte 0x000060c4
_08113C88: .4byte 0x000070c4
_08113C8C: .4byte 0x000080c4
_08113C90: .4byte 0x000090c4
_08113C94: .4byte 0x0000a0c4
_08113C98: .4byte gSharedMem + 0x188C4
_08113C9C:
    movs r0, 0x1
    ands r0, r6
    cmp r0, 0
    beq _08113CAA
    cmp r0, 0x1
    beq _08113CB0
    b _08113CF4
_08113CAA:
    ldrb r1, [r2]
    movs r0, 0xF
    b _08113CB4
_08113CB0:
    ldrb r1, [r2]
    movs r0, 0xF0
_08113CB4:
    ands r0, r1
    cmp r0, 0
    beq _08113CF4
    ldrb r0, [r4]
    adds r0, r5
    add r0, r12
    strb r6, [r0]
    movs r3, 0x1
    b _08113CF4
_08113CC6:
    adds r0, r6, 0
    ands r0, r3
    cmp r0, 0
    beq _08113CD4
    cmp r0, 0x1
    beq _08113CDA
    b _08113CF4
_08113CD4:
    ldrb r1, [r2]
    movs r0, 0xF
    b _08113CDE
_08113CDA:
    ldrb r1, [r2]
    movs r0, 0xF0
_08113CDE:
    ands r0, r1
    cmp r0, 0
    bne _08113CF4
    ldrb r0, [r4]
    adds r0, r5
    add r0, r9
    strb r7, [r0]
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    movs r3, 0
_08113CF4:
    adds r0, r6, 0x1
    movs r1, 0x7
    ands r0, r1
    cmp r0, 0
    bne _08113D02
    adds r2, 0x1D
    b _08113D0C
_08113D02:
    movs r0, 0x1
    ands r0, r6
    cmp r0, 0
    beq _08113D0C
    adds r2, 0x1
_08113D0C:
    adds r7, 0x1
    adds r6, 0x1
    cmp r6, 0x3F
    ble _08113C4A
    cmp r3, 0
    beq _08113D26
    ldrb r0, [r4]
    adds r0, r5
    add r0, r9
    strb r6, [r0]
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
_08113D26:
    movs r0, 0x7
    ldr r2, [sp, 0x30]
    ands r2, r0
    cmp r2, 0
    bne _08113D36
    movs r3, 0xE4
    add r8, r3
    b _08113D3A
_08113D36:
    movs r0, 0x4
    add r8, r0
_08113D3A:
    adds r5, 0x20
    adds r4, 0x1
    ldr r1, [sp, 0x8]
    adds r1, 0x1
    str r1, [sp, 0x8]
    cmp r1, 0x3F
    bgt _08113D4A
    b _08113C32
_08113D4A:
    movs r2, 0
    mov r8, r2
    movs r3, 0
    str r3, [sp, 0x8]
    ldr r0, _08113D84 @ =gSharedMem + 0x14844
    movs r4, 0x82
    lsls r4, 6
    adds r4, r0
    mov r10, r4
    movs r5, 0xA2
    lsls r5, 6
    adds r7, r0, r5
    movs r5, 0
    adds r4, r0, 0
    movs r0, 0x1
    mov r9, r0
_08113D6A:
    movs r3, 0
    ldr r2, [sp, 0x4]
    add r2, r8
    movs r6, 0
    ldr r1, [sp, 0x8]
    adds r1, 0x1
    str r1, [sp, 0x30]
_08113D78:
    cmp r3, 0
    beq _08113D88
    cmp r3, 0x1
    beq _08113DB4
    b _08113DE4
    .align 2, 0
_08113D84: .4byte gSharedMem + 0x14844
_08113D88:
    adds r0, r6, 0
    mov r1, r9
    ands r0, r1
    cmp r0, 0
    beq _08113D98
    cmp r0, 0x1
    beq _08113D9E
    b _08113DE4
_08113D98:
    ldrb r1, [r2]
    movs r0, 0xF
    b _08113DA2
_08113D9E:
    ldrb r1, [r2]
    movs r0, 0xF0
_08113DA2:
    ands r0, r1
    cmp r0, 0
    beq _08113DE4
    ldrb r0, [r4]
    adds r0, r5
    add r0, r10
    strb r6, [r0]
    movs r3, 0x1
    b _08113DE4
_08113DB4:
    adds r0, r6, 0
    ands r0, r3
    cmp r0, 0
    beq _08113DC2
    cmp r0, 0x1
    beq _08113DC8
    b _08113DE4
_08113DC2:
    ldrb r1, [r2]
    movs r0, 0xF
    b _08113DCC
_08113DC8:
    ldrb r1, [r2]
    movs r0, 0xF0
_08113DCC:
    ands r0, r1
    cmp r0, 0
    bne _08113DE4
    ldrb r0, [r4]
    adds r0, r5
    adds r0, r7
    subs r1, r6, 0x1
    strb r1, [r0]
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    movs r3, 0
_08113DE4:
    adds r1, r6, 0x1
    movs r0, 0x7
    ands r0, r1
    cmp r0, 0
    bne _08113DF2
    adds r2, 0x1D
    b _08113DFC
_08113DF2:
    mov r0, r9
    ands r6, r0
    cmp r6, 0
    beq _08113DFC
    adds r2, 0x1
_08113DFC:
    adds r6, r1, 0
    cmp r6, 0x3F
    ble _08113D78
    cmp r3, 0
    beq _08113E14
    ldrb r0, [r4]
    adds r0, r5
    adds r0, r7
    strb r6, [r0]
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
_08113E14:
    movs r0, 0x7
    ldr r1, [sp, 0x30]
    ands r1, r0
    cmp r1, 0
    bne _08113E24
    movs r2, 0xE4
    add r8, r2
    b _08113E28
_08113E24:
    movs r3, 0x4
    add r8, r3
_08113E28:
    adds r5, 0x20
    adds r4, 0x1
    ldr r0, [sp, 0x8]
    adds r0, 0x1
    str r0, [sp, 0x8]
    cmp r0, 0x3F
    ble _08113D6A
    movs r1, 0
    str r1, [sp, 0x8]
_08113E3A:
    ldr r3, [sp, 0x8]
    ldr r4, _08113EBC @ =gSharedMem + 0x14804
    adds r2, r3, r4
    ldr r5, _08113EC0 @ =gSharedMem + 0x14844
    adds r1, r3, r5
    ldrb r0, [r2]
    adds r3, 0x1
    str r3, [sp, 0x30]
    ldrb r1, [r1]
    cmp r0, r1
    bcc _08113E52
    b _08113F9E
_08113E52:
    movs r0, 0
    str r0, [sp, 0xC]
    ldrb r2, [r2]
    cmp r0, r2
    bge _08113F54
    ldr r0, _08113EC4 @ =gSharedMem + 0x14800
    adds r0, 0x4
    ldr r1, [sp, 0x8]
    adds r0, r1, r0
    str r0, [sp, 0x18]
_08113E66:
    movs r2, 0x80
    lsls r2, 1
    str r2, [sp, 0x14]
    movs r6, 0
    ldr r3, [sp, 0x8]
    ldr r4, _08113EC0 @ =gSharedMem + 0x14844
    adds r0, r3, r4
    ldr r5, [sp, 0xC]
    adds r5, 0x1
    str r5, [sp, 0x34]
    ldrb r0, [r0]
    cmp r6, r0
    bge _08113F3E
    ldr r0, _08113EC4 @ =gSharedMem + 0x14800
    mov r10, r0
    lsls r0, r3, 5
    ldr r2, [sp, 0xC]
    adds r1, r2, r0
    mov r9, r0
    ldr r0, _08113EC4 @ =gSharedMem + 0x14800
    adds r0, 0xC4
    mov r3, r9
    adds r7, r3, r0
    mov r5, r9
    ldr r4, _08113EC4 @ =gSharedMem + 0x14800
    ldr r2, _08113EC8 @ =0x000010c4
    adds r0, r4, r2
    adds r1, r0
    mov r8, r1
    ldrb r3, [r1]
    str r3, [sp, 0x1C]
_08113EA4:
    ldr r0, _08113ECC @ =0x000020c4
    add r0, r10
    adds r0, r5, r0
    ldr r4, [sp, 0x1C]
    ldrb r1, [r0]
    cmp r4, r1
    bls _08113ED0
    mov r2, r8
    ldrb r1, [r2]
    ldrb r0, [r0]
    b _08113ED6
    .align 2, 0
_08113EBC: .4byte gSharedMem + 0x14804
_08113EC0: .4byte gSharedMem + 0x14844
_08113EC4: .4byte gSharedMem + 0x14800
_08113EC8: .4byte 0x000010c4
_08113ECC: .4byte 0x000020c4
_08113ED0:
    ldrb r1, [r0]
    mov r3, r8
    ldrb r0, [r3]
_08113ED6:
    subs r3, r1, r0
    ldr r1, [sp, 0xC]
    add r1, r9
    ldr r0, _08113EFC @ =0x000018c4
    add r0, r10
    adds r4, r1, r0
    ldr r0, _08113F00 @ =0x000028c4
    add r0, r10
    adds r2, r5, r0
    ldrb r0, [r4]
    ldr r1, _08113F04 @ =gSharedMem + 0x14800
    mov r12, r1
    ldrb r1, [r2]
    cmp r0, r1
    bls _08113F08
    adds r1, r0, 0
    ldrb r0, [r2]
    b _08113F0C
    .align 2, 0
_08113EFC: .4byte 0x000018c4
_08113F00: .4byte 0x000028c4
_08113F04: .4byte gSharedMem + 0x14800
_08113F08:
    ldrb r1, [r2]
    ldrb r0, [r4]
_08113F0C:
    subs r1, r0
    adds r3, r1
    ldr r2, [sp, 0x14]
    cmp r2, r3
    ble _08113F2C
    ldrb r0, [r7]
    cmp r0, 0
    bne _08113F2C
    ldr r0, _08114050 @ =0x000008c4
    add r0, r12
    adds r0, r5, r0
    ldrb r0, [r0]
    cmp r0, 0
    bne _08113F2C
    str r6, [sp, 0x10]
    str r3, [sp, 0x14]
_08113F2C:
    adds r7, 0x1
    adds r5, 0x1
    adds r6, 0x1
    ldr r3, [sp, 0x8]
    ldr r4, _08114054 @ =gSharedMem + 0x14844
    adds r0, r3, r4
    ldrb r0, [r0]
    cmp r6, r0
    blt _08113EA4
_08113F3E:
    ldr r0, [sp, 0xC]
    ldr r1, [sp, 0x10]
    ldr r2, [sp, 0x8]
    bl sub_81141F0
    ldr r5, [sp, 0x34]
    str r5, [sp, 0xC]
    ldr r0, [sp, 0x18]
    ldrb r0, [r0]
    cmp r5, r0
    blt _08113E66
_08113F54:
    movs r6, 0
    ldr r2, _08114058 @ =gSharedMem + 0x14800
    ldr r1, [sp, 0x8]
    ldr r3, _08114054 @ =gSharedMem + 0x14844
    adds r0, r1, r3
    adds r4, r2, 0
    mov r12, r4
    ldrb r0, [r0]
    cmp r6, r0
    bge _08113F9E
    mov r0, r12
    adds r0, 0x44
    adds r4, r1, r0
_08113F6E:
    ldr r5, [sp, 0x8]
    lsls r0, r5, 5
    adds r1, r6, r0
    adds r0, r2, 0
    adds r0, 0xC4
    adds r0, r1, r0
    ldrb r0, [r0]
    cmp r0, 0
    bne _08113F94
    ldr r3, _08114050 @ =0x000008c4
    adds r0, r2, r3
    adds r0, r1, r0
    ldrb r0, [r0]
    cmp r0, 0
    bne _08113F94
    adds r0, r6, 0
    adds r1, r5, 0
    bl sub_811430C
_08113F94:
    adds r6, 0x1
    ldr r2, _08114058 @ =gSharedMem + 0x14800
    ldrb r5, [r4]
    cmp r6, r5
    blt _08113F6E
_08113F9E:
    ldr r0, [sp, 0x8]
    ldr r1, _0811405C @ =gSharedMem + 0x14804
    adds r2, r0, r1
    ldr r3, _08114054 @ =gSharedMem + 0x14844
    adds r1, r0, r3
    ldrb r0, [r2]
    ldrb r1, [r1]
    cmp r0, r1
    bne _08113FCC
    movs r6, 0
    ldrb r4, [r2]
    cmp r6, r4
    bge _08113FCC
    adds r4, r2, 0
_08113FBA:
    adds r0, r6, 0
    adds r1, r6, 0
    ldr r2, [sp, 0x8]
    bl sub_81141F0
    adds r6, 0x1
    ldrb r5, [r4]
    cmp r6, r5
    blt _08113FBA
_08113FCC:
    ldr r0, [sp, 0x8]
    ldr r1, _0811405C @ =gSharedMem + 0x14804
    adds r2, r0, r1
    ldr r3, _08114054 @ =gSharedMem + 0x14844
    adds r1, r0, r3
    ldrb r0, [r2]
    ldr r4, _08114058 @ =gSharedMem + 0x14800
    ldrb r5, [r1]
    cmp r0, r5
    bhi _08113FE2
    b _081141C4
_08113FE2:
    movs r0, 0
    str r0, [sp, 0x10]
    ldrb r1, [r1]
    cmp r0, r1
    blt _08113FEE
    b _08114104
_08113FEE:
    str r2, [sp, 0x2C]
    ldr r1, [sp, 0x8]
    lsls r1, 5
    mov r9, r1
    adds r0, r4, 0
    adds r0, 0x44
    ldr r2, [sp, 0x8]
    adds r0, r2, r0
    str r0, [sp, 0x20]
    mov r3, r9
    str r3, [sp, 0x24]
_08114004:
    movs r4, 0x80
    lsls r4, 1
    str r4, [sp, 0x14]
    movs r6, 0
    ldr r5, [sp, 0x10]
    adds r5, 0x1
    str r5, [sp, 0x38]
    ldr r0, [sp, 0x2C]
    ldrb r0, [r0]
    cmp r6, r0
    bge _081140C4
    ldr r1, [sp, 0x10]
    ldr r2, [sp, 0x24]
    adds r1, r2
    mov r10, r1
    ldr r0, _08114058 @ =gSharedMem + 0x14800
    adds r0, 0xC4
    adds r2, r0
    mov r8, r2
    ldr r7, [sp, 0x24]
    ldr r3, _08114058 @ =gSharedMem + 0x14800
    ldr r4, _08114060 @ =0x000010c4
    adds r0, r3, r4
    adds r5, r7, r0
    ldr r0, _08114064 @ =gSharedMem + 0x168C4
    add r0, r10
    mov r12, r0
    ldrb r1, [r0]
    str r1, [sp, 0x28]
_0811403E:
    ldrb r0, [r5]
    ldr r2, [sp, 0x28]
    cmp r0, r2
    bls _08114068
    adds r1, r0, 0
    mov r3, r12
    ldrb r0, [r3]
    b _0811406E
    .align 2, 0
_08114050: .4byte 0x000008c4
_08114054: .4byte gSharedMem + 0x14844
_08114058: .4byte gSharedMem + 0x14800
_0811405C: .4byte gSharedMem + 0x14804
_08114060: .4byte 0x000010c4
_08114064: .4byte gSharedMem + 0x168C4
_08114068:
    mov r4, r12
    ldrb r1, [r4]
    ldrb r0, [r5]
_0811406E:
    subs r3, r1, r0
    ldr r1, _0811408C @ =gSharedMem + 0x14800
    ldr r2, _08114090 @ =0x000018c4
    adds r0, r1, r2
    adds r4, r7, r0
    ldr r2, _08114094 @ =gSharedMem + 0x170C4
    add r2, r10
    ldrb r0, [r4]
    ldrb r1, [r2]
    cmp r0, r1
    bls _08114098
    adds r1, r0, 0
    ldrb r0, [r2]
    b _0811409C
    .align 2, 0
_0811408C: .4byte gSharedMem + 0x14800
_08114090: .4byte 0x000018c4
_08114094: .4byte gSharedMem + 0x170C4
_08114098:
    ldrb r1, [r2]
    ldrb r0, [r4]
_0811409C:
    subs r1, r0
    adds r3, r1
    ldr r2, [sp, 0x14]
    cmp r2, r3
    ble _081140B2
    mov r4, r8
    ldrb r0, [r4]
    cmp r0, 0
    bne _081140B2
    str r6, [sp, 0xC]
    str r3, [sp, 0x14]
_081140B2:
    movs r0, 0x1
    add r8, r0
    adds r7, 0x1
    adds r5, 0x1
    adds r6, 0x1
    ldr r1, [sp, 0x2C]
    ldrb r1, [r1]
    cmp r6, r1
    blt _0811403E
_081140C4:
    ldr r3, [sp, 0xC]
    add r3, r9
    ldr r2, _08114164 @ =gSharedMem + 0x14800
    ldr r4, _08114168 @ =0x000030c4
    adds r1, r2, r4
    adds r1, r3, r1
    ldr r2, [sp, 0x10]
    add r2, r9
    ldr r5, _0811416C @ =gSharedMem + 0x168C4
    adds r0, r2, r5
    ldrb r0, [r0]
    strb r0, [r1]
    ldr r0, _08114164 @ =gSharedMem + 0x14800
    ldr r4, _08114170 @ =0x000038c4
    adds r1, r0, r4
    adds r1, r3, r1
    ldr r5, _08114174 @ =gSharedMem + 0x170C4
    adds r2, r5
    ldrb r0, [r2]
    strb r0, [r1]
    ldr r0, _08114164 @ =gSharedMem + 0x14800
    adds r0, 0xC4
    adds r3, r0
    movs r0, 0x1
    strb r0, [r3]
    ldr r0, [sp, 0x38]
    str r0, [sp, 0x10]
    ldr r1, [sp, 0x20]
    ldrb r1, [r1]
    cmp r0, r1
    bge _08114104
    b _08114004
_08114104:
    movs r6, 0
    ldr r4, _08114164 @ =gSharedMem + 0x14800
    ldr r2, [sp, 0x8]
    ldr r3, _08114178 @ =gSharedMem + 0x14804
    adds r0, r2, r3
    ldrb r0, [r0]
    cmp r6, r0
    bge _081141C4
    adds r7, r4, 0
    mov r9, r6
    movs r5, 0xC4
    adds r5, r7
    mov r8, r5
_0811411E:
    ldr r1, [sp, 0x8]
    lsls r0, r1, 5
    adds r2, r6, r0
    ldr r3, _0811417C @ =0x000020c4
    adds r0, r7, r3
    adds r0, r2
    mov r10, r0
    ldr r5, _08114168 @ =0x000030c4
    adds r0, r7, r5
    adds r0, r2, r0
    ldrb r0, [r0]
    mov r1, r10
    strb r0, [r1]
    ldr r3, _08114180 @ =0x000028c4
    adds r0, r7, r3
    adds r3, r2, r0
    ldr r5, _08114170 @ =0x000038c4
    adds r0, r7, r5
    adds r0, r2, r0
    ldrb r0, [r0]
    strb r0, [r3]
    mov r0, r8
    adds r1, r2, r0
    ldrb r0, [r1]
    cmp r0, 0
    beq _08114184
    mov r2, r9
    strb r2, [r1]
    adds r0, r6, 0
    adds r1, r6, 0
    ldr r2, [sp, 0x8]
    bl sub_81141F0
    b _081141B4
    .align 2, 0
_08114164: .4byte gSharedMem + 0x14800
_08114168: .4byte 0x000030c4
_0811416C: .4byte gSharedMem + 0x168C4
_08114170: .4byte 0x000038c4
_08114174: .4byte gSharedMem + 0x170C4
_08114178: .4byte gSharedMem + 0x14804
_0811417C: .4byte 0x000020c4
_08114180: .4byte 0x000028c4
_08114184:
    ldr r5, _081141E0 @ =0x000010c4
    adds r1, r4, r5
    adds r1, r2, r1
    ldr r5, _081141E4 @ =0x000018c4
    adds r0, r4, r5
    adds r0, r2, r0
    ldrb r0, [r0]
    ldrb r2, [r1]
    subs r0, r2
    lsrs r1, r0, 31
    adds r0, r1
    asrs r0, 1
    adds r2, r0
    strb r2, [r3]
    mov r0, r10
    strb r2, [r0]
    ldrb r0, [r3]
    subs r0, 0x1
    strb r0, [r3]
    adds r0, r6, 0
    adds r1, r6, 0
    ldr r2, [sp, 0x8]
    bl sub_81141F0
_081141B4:
    adds r6, 0x1
    ldr r4, _081141E8 @ =gSharedMem + 0x14800
    ldr r1, [sp, 0x8]
    ldr r2, _081141EC @ =gSharedMem + 0x14804
    adds r0, r1, r2
    ldrb r0, [r0]
    cmp r6, r0
    blt _0811411E
_081141C4:
    ldr r3, [sp, 0x30]
    str r3, [sp, 0x8]
    cmp r3, 0x3F
    bgt _081141CE
    b _08113E3A
_081141CE:
    add sp, 0x3C
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_081141E0: .4byte 0x000010c4
_081141E4: .4byte 0x000018c4
_081141E8: .4byte gSharedMem + 0x14800
_081141EC: .4byte gSharedMem + 0x14804
        .syntax divided
	.code	16
.Lfe13:
	.size	 unref_sub_8113B50,.Lfe13-unref_sub_8113B50
	.align	2, 0
	.globl	sub_81141F0
	.type	 sub_81141F0,function
	.thumb_func
sub_81141F0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r6, r0, #0
	mov	r8, r1
	mov	r9, r2
	ldr	r3, .L414
	lsl	r1, r2, #0x5
	mov	r0, r8
	add	r4, r0, r1
	ldr	r5, .L414+0x4
	add	r2, r3, r5
	add	r2, r4, r2
	add	r1, r6, r1
	ldr	r7, .L414+0x8
	add	r0, r3, r7
	add	r5, r1, r0
	ldrb	r0, [r5]
	strb	r0, [r2]
	ldr	r0, .L414+0xc
	add	r2, r3, r0
	add	r2, r4, r2
	ldr	r7, .L414+0x10
	add	r0, r3, r7
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	mov	r7, #0x0
	ldr	r1, .L414+0x14
	add	r0, r3, r1
	add	r2, r4, r0
	ldrb	r1, [r5]
	ldrb	r0, [r2]
	mov	ip, r3
	cmp	r1, r0
	bcs	.L406	@cond_branch
	mov	r0, ip
	add	r0, r0, #0xc4
	add	r0, r4, r0
	mov	r1, #0x4
	strb	r1, [r0]
	ldrb	r1, [r2]
	ldrb	r0, [r5]
	b	.L412
.L415:
	.align	2, 0
.L414:
	.word	gSharedMem+0x14800
	.word	0x30c4
	.word	0x10c4
	.word	0x38c4
	.word	0x18c4
	.word	0x20c4
.L406:
	cmp	r1, r0
	bls	.L407	@cond_branch
	mov	r0, ip
	add	r0, r0, #0xc4
	add	r0, r4, r0
	mov	r1, #0x1
	strb	r1, [r0]
	ldrb	r1, [r5]
	ldrb	r0, [r2]
.L412:
	sub	r7, r1, r0
.L407:
	mov	r5, r8
	lsl	r3, r5, #0x1
	mov	r0, r9
	lsl	r4, r0, #0x6
	add	r0, r3, r4
	ldr	r1, .L416
	add	r1, r1, ip
	add	r0, r0, r1
	lsl	r1, r7, #0x4
	strh	r1, [r0]
	mov	r7, #0x0
	mov	r1, r9
	lsl	r2, r1, #0x5
	add	r1, r6, r2
	ldr	r0, .L416+0x4
	add	r0, r0, ip
	add	r6, r1, r0
	add	r1, r5, r2
	ldr	r0, .L416+0x8
	add	r0, r0, ip
	add	r5, r1, r0
	ldrb	r2, [r6]
	ldrb	r0, [r5]
	cmp	r2, r0
	bcs	.L409	@cond_branch
	ldr	r0, .L416+0xc
	add	r0, r0, ip
	add	r0, r1, r0
	mov	r1, #0x3
	strb	r1, [r0]
	ldrb	r1, [r5]
	ldrb	r0, [r6]
	b	.L413
.L417:
	.align	2, 0
.L416:
	.word	0x80c4
	.word	0x18c4
	.word	0x28c4
	.word	0x8c4
.L409:
	cmp	r2, r0
	bls	.L410	@cond_branch
	ldr	r0, .L418
	add	r0, r0, ip
	add	r0, r1, r0
	mov	r1, #0x2
	strb	r1, [r0]
	ldrb	r1, [r6]
	ldrb	r0, [r5]
.L413:
	sub	r7, r1, r0
.L410:
	add	r0, r3, r4
	ldr	r1, .L418+0x4
	add	r1, r1, ip
	add	r0, r0, r1
	lsl	r1, r7, #0x4
	strh	r1, [r0]
	mov	r1, ip
	add	r1, r1, #0x84
	add	r1, r1, r9
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L419:
	.align	2, 0
.L418:
	.word	0x8c4
	.word	0x90c4
.Lfe14:
	.size	 sub_81141F0,.Lfe14-sub_81141F0
	.align	2, 0
	.globl	sub_811430C
	.type	 sub_811430C,function
	.thumb_func
sub_811430C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r5, .L421
	lsl	r4, r1, #0x5
	add	r4, r0, r4
	ldr	r2, .L421+0x4
	add	r2, r2, r5
	mov	sl, r2
	add	sl, sl, r4
	mov	r3, sl
	ldrb	r2, [r3]
	ldr	r6, .L421+0x8
	add	r6, r6, r5
	mov	r8, r6
	add	r8, r8, r4
	mov	r6, r8
	ldrb	r3, [r6]
	sub	r7, r2, r3
	ldr	r2, .L421+0xc
	add	r6, r5, r2
	add	r6, r4, r6
	ldr	r2, .L421+0x10
	add	r2, r2, r5
	mov	r9, r2
	add	r9, r9, r4
	lsr	r2, r7, #0x1f
	add	r2, r7, r2
	asr	r2, r2, #0x1
	add	r3, r3, r2
	mov	r2, r9
	strb	r3, [r2]
	strb	r3, [r6]
	add	r2, r5, #0
	add	r2, r2, #0xc4
	add	r2, r4, r2
	mov	r3, #0x5
	strb	r3, [r2]
	ldr	r3, .L421+0x14
	add	r2, r5, r3
	add	r4, r4, r2
	mov	r2, #0x7
	strb	r2, [r4]
	add	r3, r5, #0
	add	r3, r3, #0x84
	add	r3, r1, r3
	ldrb	r2, [r3]
	add	r2, r2, #0x1
	strb	r2, [r3]
	ldrb	r3, [r6]
	mov	r4, r8
	ldrb	r2, [r4]
	sub	r7, r3, r2
	lsl	r0, r0, #0x1
	lsl	r1, r1, #0x6
	add	r0, r0, r1
	ldr	r6, .L421+0x18
	add	r1, r5, r6
	add	r1, r0, r1
	lsl	r2, r7, #0x4
	strh	r2, [r1]
	mov	r1, sl
	ldrb	r2, [r1]
	mov	r3, r9
	ldrb	r1, [r3]
	sub	r7, r2, r1
	ldr	r4, .L421+0x1c
	add	r5, r5, r4
	add	r0, r0, r5
	lsl	r1, r7, #0x4
	strh	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	gSharedMem+0x14800
	.word	0x28c4
	.word	0x20c4
	.word	0x30c4
	.word	0x38c4
	.word	0x8c4
	.word	0x80c4
	.word	0x90c4
.Lfe15:
	.size	 sub_811430C,.Lfe15-sub_811430C
	.align	2, 0
	.globl	unref_sub_81143CC
	.type	 unref_sub_81143CC,function
	.thumb_func
unref_sub_81143CC:
	.syntax unified
            push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x14
    movs r0, 0x1
    str r0, [sp, 0x4]
    ldr r0, _08114408 @ =gSharedMem + 0x14800
    ldr r2, _0811440C @ =0x0000a0c4
    adds r1, r0, r2
    ldrb r3, [r1]
    adds r4, r0, 0
    cmp r3, 0
    beq _081143EE
    subs r0, r3, 0x1
    strb r0, [r1]
_081143EE:
    movs r5, 0
    str r5, [sp]
_081143F2:
    movs r3, 0
    adds r2, r4, 0
    adds r0, r4, 0
    adds r0, 0x84
    ldr r1, [sp]
    adds r0, r1, r0
    adds r1, 0x1
    str r1, [sp, 0x8]
    bl _08114D84
    .align 2, 0
_08114408: .4byte gSharedMem + 0x14800
_0811440C: .4byte 0x0000a0c4
_08114410:
    ldr r5, [sp]
    lsls r0, r5, 5
    adds r1, r3, r0
    adds r2, 0xC4
    adds r1, r2
    ldrb r2, [r1]
    mov r8, r0
    adds r0, r3, 0x1
    mov r10, r0
    cmp r2, 0xC
    bls _08114428
    b _081148D2
_08114428:
    lsls r0, r2, 2
    ldr r1, _08114434 @ =_08114438
    adds r0, r1
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_08114434: .4byte _08114438
    .align 2, 0
_08114438:
    .4byte _081148D2
    .4byte _0811446C
    .4byte _081144F0
    .4byte _0811457C
    .4byte _08114600
    .4byte _0811468C
    .4byte _081146C8
    .4byte _08114704
    .4byte _08114740
    .4byte _0811477C
    .4byte _081147D0
    .4byte _08114810
    .4byte _08114858
_0811446C:
    movs r1, 0
    str r1, [sp, 0x4]
    lsls r0, r3, 1
    ldr r2, [sp]
    lsls r1, r2, 6
    adds r0, r1
    ldr r5, _081144E0 @ =0x000060c4
    adds r2, r4, r5
    adds r2, r0, r2
    ldr r5, _081144E4 @ =0x000080c4
    adds r1, r4, r5
    adds r0, r1
    ldrh r1, [r0]
    ldrh r0, [r2]
    adds r1, r0
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r1
    lsrs r5, r0, 8
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r2]
    movs r6, 0
    adds r1, r3, 0x1
    mov r10, r1
    ldr r2, [sp, 0x4]
    cmp r2, r5
    blt _081144A6
    b _081148D2
_081144A6:
    mov r9, r4
    mov r4, r8
    adds r7, r3, r4
    ldr r0, _081144E8 @ =0x000030c4
    add r0, r9
    adds r4, r7, r0
    ldr r0, _081144EC @ =0x000020c4
    add r0, r9
    adds r2, r7, r0
_081144B8:
    ldrb r0, [r4]
    subs r0, 0x1
    strb r0, [r4]
    ldrb r1, [r4]
    ldr r0, [sp]
    str r2, [sp, 0xC]
    str r3, [sp, 0x10]
    bl sub_8114DB4
    ldrb r0, [r4]
    ldr r2, [sp, 0xC]
    ldr r3, [sp, 0x10]
    ldrb r1, [r2]
    cmp r0, r1
    bne _081144D8
    b _081148A0
_081144D8:
    adds r6, 0x1
    cmp r6, r5
    blt _081144B8
    b _081148D2
    .align 2, 0
_081144E0: .4byte 0x000060c4
_081144E4: .4byte 0x000080c4
_081144E8: .4byte 0x000030c4
_081144EC: .4byte 0x000020c4
_081144F0:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r4, _08114568 @ =gSharedMem + 0x14800
    lsls r0, r3, 1
    ldr r5, [sp]
    lsls r1, r5, 6
    adds r0, r1
    ldr r1, _0811456C @ =0x000060c4
    adds r2, r4, r1
    adds r2, r0, r2
    ldr r5, _08114570 @ =0x000080c4
    adds r1, r4, r5
    adds r0, r1
    ldrh r1, [r0]
    ldrh r0, [r2]
    adds r1, r0
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r1
    lsrs r5, r0, 8
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r2]
    movs r6, 0
    adds r1, r3, 0x1
    mov r10, r1
    ldr r2, [sp, 0x4]
    cmp r2, r5
    blt _0811452C
    b _081148D2
_0811452C:
    mov r9, r4
    mov r4, r8
    adds r7, r3, r4
    ldr r0, _08114574 @ =0x000030c4
    add r0, r9
    adds r4, r7, r0
    ldr r0, _08114578 @ =0x000020c4
    add r0, r9
    adds r2, r7, r0
_0811453E:
    ldrb r0, [r4]
    ldrb r1, [r2]
    cmp r0, r1
    bne _08114548
    b _081148B8
_08114548:
    adds r1, r0, 0
    ldr r0, [sp]
    str r2, [sp, 0xC]
    str r3, [sp, 0x10]
    bl sub_8114DF0
    ldrb r0, [r4]
    subs r0, 0x1
    strb r0, [r4]
    adds r6, 0x1
    ldr r2, [sp, 0xC]
    ldr r3, [sp, 0x10]
    cmp r6, r5
    blt _0811453E
    b _081148D2
    .align 2, 0
_08114568: .4byte gSharedMem + 0x14800
_0811456C: .4byte 0x000060c4
_08114570: .4byte 0x000080c4
_08114574: .4byte 0x000030c4
_08114578: .4byte 0x000020c4
_0811457C:
    movs r2, 0
    str r2, [sp, 0x4]
    lsls r0, r3, 1
    ldr r5, [sp]
    lsls r1, r5, 6
    adds r0, r1
    ldr r1, _081145F0 @ =0x000060c4
    adds r2, r4, r1
    adds r2, r0, r2
    ldr r5, _081145F4 @ =0x000080c4
    adds r1, r4, r5
    adds r0, r1
    ldrh r1, [r0]
    ldrh r0, [r2]
    adds r1, r0
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r1
    lsrs r5, r0, 8
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r2]
    movs r6, 0
    adds r1, r3, 0x1
    mov r10, r1
    ldr r2, [sp, 0x4]
    cmp r2, r5
    blt _081145B6
    b _081148D2
_081145B6:
    mov r9, r4
    mov r4, r8
    adds r7, r3, r4
    ldr r0, _081145F8 @ =0x000030c4
    add r0, r9
    adds r4, r7, r0
    ldr r0, _081145FC @ =0x000020c4
    add r0, r9
    adds r2, r7, r0
_081145C8:
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    ldrb r1, [r4]
    ldr r0, [sp]
    str r2, [sp, 0xC]
    str r3, [sp, 0x10]
    bl sub_8114DB4
    ldrb r0, [r4]
    ldr r2, [sp, 0xC]
    ldr r3, [sp, 0x10]
    ldrb r1, [r2]
    cmp r0, r1
    bne _081145E8
    b _081148AC
_081145E8:
    adds r6, 0x1
    cmp r6, r5
    blt _081145C8
    b _081148D2
    .align 2, 0
_081145F0: .4byte 0x000060c4
_081145F4: .4byte 0x000080c4
_081145F8: .4byte 0x000030c4
_081145FC: .4byte 0x000020c4
_08114600:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r4, _08114678 @ =gSharedMem + 0x14800
    lsls r0, r3, 1
    ldr r5, [sp]
    lsls r1, r5, 6
    adds r0, r1
    ldr r1, _0811467C @ =0x000060c4
    adds r2, r4, r1
    adds r2, r0, r2
    ldr r5, _08114680 @ =0x000080c4
    adds r1, r4, r5
    adds r0, r1
    ldrh r1, [r0]
    ldrh r0, [r2]
    adds r1, r0
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r1
    lsrs r5, r0, 8
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r2]
    movs r6, 0
    adds r1, r3, 0x1
    mov r10, r1
    ldr r2, [sp, 0x4]
    cmp r2, r5
    blt _0811463C
    b _081148D2
_0811463C:
    mov r9, r4
    mov r4, r8
    adds r7, r3, r4
    ldr r0, _08114684 @ =0x000030c4
    add r0, r9
    adds r4, r7, r0
    ldr r0, _08114688 @ =0x000020c4
    add r0, r9
    adds r2, r7, r0
_0811464E:
    ldrb r0, [r4]
    ldrb r1, [r2]
    cmp r0, r1
    bne _08114658
    b _081148B8
_08114658:
    adds r1, r0, 0
    ldr r0, [sp]
    str r2, [sp, 0xC]
    str r3, [sp, 0x10]
    bl sub_8114DF0
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    adds r6, 0x1
    ldr r2, [sp, 0xC]
    ldr r3, [sp, 0x10]
    cmp r6, r5
    blt _0811464E
    b _081148D2
    .align 2, 0
_08114678: .4byte gSharedMem + 0x14800
_0811467C: .4byte 0x000060c4
_08114680: .4byte 0x000080c4
_08114684: .4byte 0x000030c4
_08114688: .4byte 0x000020c4
_0811468C:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r5, _081146C0 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r4, r3, r0
    ldr r1, _081146C4 @ =0x000030c4
    adds r0, r5, r1
    adds r0, r4, r0
    ldrb r1, [r0]
    ldr r0, [sp]
    str r3, [sp, 0x10]
    bl sub_8114E48
    lsls r0, 24
    ldr r3, [sp, 0x10]
    adds r2, r3, 0x1
    mov r10, r2
    cmp r0, 0
    bne _081146B4
    b _081148D2
_081146B4:
    adds r0, r5, 0
    adds r0, 0xC4
    adds r0, r4, r0
    movs r1, 0x9
    strb r1, [r0]
    b _081148D2
    .align 2, 0
_081146C0: .4byte gSharedMem + 0x14800
_081146C4: .4byte 0x000030c4
_081146C8:
    movs r4, 0
    str r4, [sp, 0x4]
    ldr r5, _081146FC @ =gSharedMem + 0x14800
    mov r0, r8
    adds r4, r3, r0
    ldr r1, _08114700 @ =0x000030c4
    adds r0, r5, r1
    adds r0, r4, r0
    ldrb r1, [r0]
    ldr r0, [sp]
    str r3, [sp, 0x10]
    bl sub_8114E48
    lsls r0, 24
    ldr r3, [sp, 0x10]
    adds r2, r3, 0x1
    mov r10, r2
    cmp r0, 0
    bne _081146F0
    b _081148D2
_081146F0:
    adds r0, r5, 0
    adds r0, 0xC4
    adds r0, r4, r0
    movs r1, 0xA
    strb r1, [r0]
    b _081148D2
    .align 2, 0
_081146FC: .4byte gSharedMem + 0x14800
_08114700: .4byte 0x000030c4
_08114704:
    movs r4, 0
    str r4, [sp, 0x4]
    ldr r5, _08114738 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r4, r3, r0
    ldr r1, _0811473C @ =0x000030c4
    adds r0, r5, r1
    adds r0, r4, r0
    ldrb r1, [r0]
    ldr r0, [sp]
    str r3, [sp, 0x10]
    bl sub_8114E48
    lsls r0, 24
    ldr r3, [sp, 0x10]
    adds r2, r3, 0x1
    mov r10, r2
    cmp r0, 0
    bne _0811472C
    b _081148D2
_0811472C:
    adds r0, r5, 0
    adds r0, 0xC4
    adds r0, r4, r0
    movs r1, 0xB
    strb r1, [r0]
    b _081148D2
    .align 2, 0
_08114738: .4byte gSharedMem + 0x14800
_0811473C: .4byte 0x000030c4
_08114740:
    movs r4, 0
    str r4, [sp, 0x4]
    ldr r5, _08114774 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r4, r3, r0
    ldr r1, _08114778 @ =0x000030c4
    adds r0, r5, r1
    adds r0, r4, r0
    ldrb r1, [r0]
    ldr r0, [sp]
    str r3, [sp, 0x10]
    bl sub_8114E48
    lsls r0, 24
    ldr r3, [sp, 0x10]
    adds r2, r3, 0x1
    mov r10, r2
    cmp r0, 0
    bne _08114768
    b _081148D2
_08114768:
    adds r0, r5, 0
    adds r0, 0xC4
    adds r0, r4, r0
    movs r1, 0xC
    strb r1, [r0]
    b _081148D2
    .align 2, 0
_08114774: .4byte gSharedMem + 0x14800
_08114778: .4byte 0x000030c4
_0811477C:
    movs r4, 0
    str r4, [sp, 0x4]
    ldr r6, _081147B4 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r5, r3, r0
    ldr r1, _081147B8 @ =0x000030c4
    adds r4, r6, r1
    adds r4, r5, r4
    ldrb r1, [r4]
    ldr r0, [sp]
    str r3, [sp, 0x10]
    bl sub_8114DB4
    ldr r2, _081147BC @ =0x000020c4
    adds r0, r6, r2
    adds r0, r5, r0
    ldrb r1, [r4]
    ldr r3, [sp, 0x10]
    ldrb r0, [r0]
    cmp r1, r0
    bne _081147C0
    adds r0, r6, 0
    adds r0, 0xC4
    adds r0, r5, r0
    mov r4, sp
    ldrb r4, [r4, 0x4]
    strb r4, [r0]
    b _08114844
    .align 2, 0
_081147B4: .4byte gSharedMem + 0x14800
_081147B8: .4byte 0x000030c4
_081147BC: .4byte 0x000020c4
_081147C0:
    adds r0, r6, 0
    adds r0, 0xC4
    adds r0, r5, r0
    movs r1, 0x1
    strb r1, [r0]
    adds r0, r3, 0x1
    mov r10, r0
    b _081148D2
_081147D0:
    movs r1, 0
    str r1, [sp, 0x4]
    ldr r6, _08114804 @ =gSharedMem + 0x14800
    mov r2, r8
    adds r5, r3, r2
    ldr r0, _08114808 @ =0x000030c4
    adds r4, r6, r0
    adds r4, r5, r4
    ldrb r1, [r4]
    ldr r0, [sp]
    str r3, [sp, 0x10]
    bl sub_8114DF0
    ldr r1, _0811480C @ =0x000020c4
    adds r0, r6, r1
    adds r0, r5, r0
    ldrb r1, [r4]
    ldr r3, [sp, 0x10]
    ldrb r0, [r0]
    cmp r1, r0
    beq _08114882
    adds r0, r6, 0
    adds r0, 0xC4
    adds r0, r5, r0
    movs r1, 0x2
    b _08114842
    .align 2, 0
_08114804: .4byte gSharedMem + 0x14800
_08114808: .4byte 0x000030c4
_0811480C: .4byte 0x000020c4
_08114810:
    movs r0, 0
    str r0, [sp, 0x4]
    ldr r6, _0811484C @ =gSharedMem + 0x14800
    mov r1, r8
    adds r5, r3, r1
    ldr r2, _08114850 @ =0x000030c4
    adds r4, r6, r2
    adds r4, r5, r4
    ldrb r1, [r4]
    ldr r0, [sp]
    str r3, [sp, 0x10]
    bl sub_8114DB4
    ldr r1, _08114854 @ =0x000020c4
    adds r0, r6, r1
    adds r0, r5, r0
    ldrb r1, [r4]
    ldr r3, [sp, 0x10]
    ldrb r0, [r0]
    cmp r1, r0
    beq _08114882
    adds r0, r6, 0
    adds r0, 0xC4
    adds r0, r5, r0
    movs r1, 0x3
_08114842:
    strb r1, [r0]
_08114844:
    adds r5, r3, 0x1
    mov r10, r5
    b _081148D2
    .align 2, 0
_0811484C: .4byte gSharedMem + 0x14800
_08114850: .4byte 0x000030c4
_08114854: .4byte 0x000020c4
_08114858:
    movs r0, 0
    str r0, [sp, 0x4]
    ldr r6, _08114894 @ =gSharedMem + 0x14800
    mov r1, r8
    adds r5, r3, r1
    ldr r2, _08114898 @ =0x000030c4
    adds r4, r6, r2
    adds r4, r5, r4
    ldrb r1, [r4]
    ldr r0, [sp]
    str r3, [sp, 0x10]
    bl sub_8114DF0
    ldr r1, _0811489C @ =0x000020c4
    adds r0, r6, r1
    adds r0, r5, r0
    ldrb r1, [r4]
    ldr r3, [sp, 0x10]
    ldrb r0, [r0]
    cmp r1, r0
    bne _081148C4
_08114882:
    adds r0, r6, 0
    adds r0, 0xC4
    adds r0, r5, r0
    mov r2, sp
    ldrb r2, [r2, 0x4]
    strb r2, [r0]
    adds r4, r3, 0x1
    mov r10, r4
    b _081148D2
    .align 2, 0
_08114894: .4byte gSharedMem + 0x14800
_08114898: .4byte 0x000030c4
_0811489C: .4byte 0x000020c4
_081148A0:
    mov r0, r9
    adds r0, 0xC4
    adds r0, r7, r0
    movs r5, 0
    strb r5, [r0]
    b _081148D2
_081148AC:
    mov r0, r9
    adds r0, 0xC4
    adds r0, r7, r0
    movs r1, 0
    strb r1, [r0]
    b _081148D2
_081148B8:
    mov r0, r9
    adds r0, 0xC4
    adds r0, r7, r0
    movs r1, 0
    strb r1, [r0]
    b _081148D2
_081148C4:
    adds r0, r6, 0
    adds r0, 0xC4
    adds r0, r5, r0
    movs r1, 0x4
    strb r1, [r0]
    adds r2, r3, 0x1
    mov r10, r2
_081148D2:
    ldr r0, _081148F4 @ =gSharedMem + 0x14800
    mov r4, r8
    adds r1, r3, r4
    ldr r5, _081148F8 @ =0x000008c4
    adds r2, r0, r5
    adds r1, r2
    ldrb r1, [r1]
    adds r4, r0, 0
    cmp r1, 0xC
    bls _081148E8
    b _08114D76
_081148E8:
    lsls r0, r1, 2
    ldr r1, _081148FC @ =_08114900
    adds r0, r1
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_081148F4: .4byte gSharedMem + 0x14800
_081148F8: .4byte 0x000008c4
_081148FC: .4byte _08114900
    .align 2, 0
_08114900:
    .4byte _08114D76
    .4byte _08114934
    .4byte _081149B8
    .4byte _08114A3C
    .4byte _08114AC0
    .4byte _08114B44
    .4byte _08114B7C
    .4byte _08114BB4
    .4byte _08114BEC
    .4byte _08114C24
    .4byte _08114C78
    .4byte _08114CB8
    .4byte _08114CF8
_08114934:
    movs r0, 0
    str r0, [sp, 0x4]
    lsls r0, r3, 1
    ldr r2, [sp]
    lsls r1, r2, 6
    adds r0, r1
    ldr r5, _081149A8 @ =0x000070c4
    adds r2, r4, r5
    adds r2, r0, r2
    ldr r5, _081149AC @ =0x000090c4
    adds r1, r4, r5
    adds r0, r1
    ldrh r1, [r0]
    ldrh r0, [r2]
    adds r1, r0
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r1
    lsrs r5, r0, 8
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r2]
    movs r6, 0
    ldr r1, [sp, 0x4]
    cmp r1, r5
    blt _0811496A
    b _08114D76
_0811496A:
    mov r9, r4
    mov r2, r8
    adds r7, r3, r2
    ldr r0, _081149B0 @ =0x000038c4
    add r0, r9
    adds r4, r7, r0
    movs r3, 0
    ldr r0, _081149B4 @ =0x000028c4
    add r0, r9
    adds r2, r7, r0
_0811497E:
    ldrb r0, [r4]
    subs r0, 0x1
    strb r0, [r4]
    ldrb r1, [r4]
    ldr r0, [sp]
    str r2, [sp, 0xC]
    str r3, [sp, 0x10]
    bl sub_8114DB4
    ldrb r0, [r4]
    ldr r2, [sp, 0xC]
    ldr r3, [sp, 0x10]
    ldrb r1, [r2]
    cmp r0, r1
    bne _0811499E
    b _08114D4C
_0811499E:
    adds r6, 0x1
    cmp r6, r5
    blt _0811497E
    b _08114D76
    .align 2, 0
_081149A8: .4byte 0x000070c4
_081149AC: .4byte 0x000090c4
_081149B0: .4byte 0x000038c4
_081149B4: .4byte 0x000028c4
_081149B8:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r4, _08114A28 @ =gSharedMem + 0x14800
    lsls r0, r3, 1
    ldr r5, [sp]
    lsls r1, r5, 6
    adds r0, r1
    ldr r1, _08114A2C @ =0x000070c4
    adds r2, r4, r1
    adds r2, r0, r2
    ldr r5, _08114A30 @ =0x000090c4
    adds r1, r4, r5
    adds r0, r1
    ldrh r1, [r0]
    ldrh r0, [r2]
    adds r1, r0
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r1
    lsrs r5, r0, 8
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r2]
    movs r6, 0
    ldr r1, [sp, 0x4]
    cmp r1, r5
    blt _081149F0
    b _08114D76
_081149F0:
    mov r9, r4
    mov r2, r8
    adds r7, r3, r2
    ldr r0, _08114A34 @ =0x000038c4
    add r0, r9
    adds r4, r7, r0
    ldr r0, _08114A38 @ =0x000028c4
    add r0, r9
    adds r2, r7, r0
_08114A02:
    ldrb r0, [r4]
    ldrb r1, [r2]
    cmp r0, r1
    bne _08114A0C
    b _08114D3C
_08114A0C:
    adds r1, r0, 0
    ldr r0, [sp]
    str r2, [sp, 0xC]
    bl sub_8114DF0
    ldrb r0, [r4]
    subs r0, 0x1
    strb r0, [r4]
    adds r6, 0x1
    ldr r2, [sp, 0xC]
    cmp r6, r5
    blt _08114A02
    b _08114D76
    .align 2, 0
_08114A28: .4byte gSharedMem + 0x14800
_08114A2C: .4byte 0x000070c4
_08114A30: .4byte 0x000090c4
_08114A34: .4byte 0x000038c4
_08114A38: .4byte 0x000028c4
_08114A3C:
    movs r2, 0
    str r2, [sp, 0x4]
    lsls r0, r3, 1
    ldr r5, [sp]
    lsls r1, r5, 6
    adds r0, r1
    ldr r1, _08114AB0 @ =0x000070c4
    adds r2, r4, r1
    adds r2, r0, r2
    ldr r5, _08114AB4 @ =0x000090c4
    adds r1, r4, r5
    adds r0, r1
    ldrh r1, [r0]
    ldrh r0, [r2]
    adds r1, r0
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r1
    lsrs r5, r0, 8
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r2]
    movs r6, 0
    ldr r1, [sp, 0x4]
    cmp r1, r5
    blt _08114A72
    b _08114D76
_08114A72:
    mov r9, r4
    mov r2, r8
    adds r7, r3, r2
    ldr r0, _08114AB8 @ =0x000038c4
    add r0, r9
    adds r4, r7, r0
    movs r3, 0
    ldr r0, _08114ABC @ =0x000028c4
    add r0, r9
    adds r2, r7, r0
_08114A86:
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    ldrb r1, [r4]
    ldr r0, [sp]
    str r2, [sp, 0xC]
    str r3, [sp, 0x10]
    bl sub_8114DB4
    ldrb r0, [r4]
    ldr r2, [sp, 0xC]
    ldr r3, [sp, 0x10]
    ldrb r1, [r2]
    cmp r0, r1
    bne _08114AA6
    b _08114D4C
_08114AA6:
    adds r6, 0x1
    cmp r6, r5
    blt _08114A86
    b _08114D76
    .align 2, 0
_08114AB0: .4byte 0x000070c4
_08114AB4: .4byte 0x000090c4
_08114AB8: .4byte 0x000038c4
_08114ABC: .4byte 0x000028c4
_08114AC0:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r4, _08114B30 @ =gSharedMem + 0x14800
    lsls r0, r3, 1
    ldr r5, [sp]
    lsls r1, r5, 6
    adds r0, r1
    ldr r1, _08114B34 @ =0x000070c4
    adds r2, r4, r1
    adds r2, r0, r2
    ldr r5, _08114B38 @ =0x000090c4
    adds r1, r4, r5
    adds r0, r1
    ldrh r1, [r0]
    ldrh r0, [r2]
    adds r1, r0
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r1
    lsrs r5, r0, 8
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r2]
    movs r6, 0
    ldr r1, [sp, 0x4]
    cmp r1, r5
    blt _08114AF8
    b _08114D76
_08114AF8:
    mov r9, r4
    mov r2, r8
    adds r7, r3, r2
    ldr r0, _08114B3C @ =0x000038c4
    add r0, r9
    adds r4, r7, r0
    ldr r0, _08114B40 @ =0x000028c4
    add r0, r9
    adds r2, r7, r0
_08114B0A:
    ldrb r0, [r4]
    ldrb r1, [r2]
    cmp r0, r1
    bne _08114B14
    b _08114D5C
_08114B14:
    adds r1, r0, 0
    ldr r0, [sp]
    str r2, [sp, 0xC]
    bl sub_8114DF0
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    adds r6, 0x1
    ldr r2, [sp, 0xC]
    cmp r6, r5
    blt _08114B0A
    b _08114D76
    .align 2, 0
_08114B30: .4byte gSharedMem + 0x14800
_08114B34: .4byte 0x000070c4
_08114B38: .4byte 0x000090c4
_08114B3C: .4byte 0x000038c4
_08114B40: .4byte 0x000028c4
_08114B44:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r5, _08114B70 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r4, r3, r0
    ldr r1, _08114B74 @ =0x000038c4
    adds r0, r5, r1
    adds r0, r4, r0
    ldrb r1, [r0]
    ldr r0, [sp]
    bl sub_8114E48
    lsls r0, 24
    cmp r0, 0
    bne _08114B64
    b _08114D76
_08114B64:
    ldr r2, _08114B78 @ =0x000008c4
    adds r0, r5, r2
    adds r0, r4, r0
    movs r1, 0x9
    b _08114D74
    .align 2, 0
_08114B70: .4byte gSharedMem + 0x14800
_08114B74: .4byte 0x000038c4
_08114B78: .4byte 0x000008c4
_08114B7C:
    movs r4, 0
    str r4, [sp, 0x4]
    ldr r5, _08114BA8 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r4, r3, r0
    ldr r1, _08114BAC @ =0x000038c4
    adds r0, r5, r1
    adds r0, r4, r0
    ldrb r1, [r0]
    ldr r0, [sp]
    bl sub_8114E48
    lsls r0, 24
    cmp r0, 0
    bne _08114B9C
    b _08114D76
_08114B9C:
    ldr r2, _08114BB0 @ =0x000008c4
    adds r0, r5, r2
    adds r0, r4, r0
    movs r1, 0xA
    b _08114D74
    .align 2, 0
_08114BA8: .4byte gSharedMem + 0x14800
_08114BAC: .4byte 0x000038c4
_08114BB0: .4byte 0x000008c4
_08114BB4:
    movs r4, 0
    str r4, [sp, 0x4]
    ldr r5, _08114BE0 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r4, r3, r0
    ldr r1, _08114BE4 @ =0x000038c4
    adds r0, r5, r1
    adds r0, r4, r0
    ldrb r1, [r0]
    ldr r0, [sp]
    bl sub_8114E48
    lsls r0, 24
    cmp r0, 0
    bne _08114BD4
    b _08114D76
_08114BD4:
    ldr r2, _08114BE8 @ =0x000008c4
    adds r0, r5, r2
    adds r0, r4, r0
    movs r1, 0xB
    b _08114D74
    .align 2, 0
_08114BE0: .4byte gSharedMem + 0x14800
_08114BE4: .4byte 0x000038c4
_08114BE8: .4byte 0x000008c4
_08114BEC:
    movs r4, 0
    str r4, [sp, 0x4]
    ldr r5, _08114C18 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r4, r3, r0
    ldr r1, _08114C1C @ =0x000038c4
    adds r0, r5, r1
    adds r0, r4, r0
    ldrb r1, [r0]
    ldr r0, [sp]
    bl sub_8114E48
    lsls r0, 24
    cmp r0, 0
    bne _08114C0C
    b _08114D76
_08114C0C:
    ldr r2, _08114C20 @ =0x000008c4
    adds r0, r5, r2
    adds r0, r4, r0
    movs r1, 0xC
    b _08114D74
    .align 2, 0
_08114C18: .4byte gSharedMem + 0x14800
_08114C1C: .4byte 0x000038c4
_08114C20: .4byte 0x000008c4
_08114C24:
    movs r4, 0
    str r4, [sp, 0x4]
    ldr r6, _08114C58 @ =gSharedMem + 0x14800
    mov r0, r8
    adds r5, r3, r0
    ldr r1, _08114C5C @ =0x000038c4
    adds r4, r6, r1
    adds r4, r5, r4
    ldrb r1, [r4]
    ldr r0, [sp]
    bl sub_8114DB4
    ldr r2, _08114C60 @ =0x000028c4
    adds r0, r6, r2
    adds r0, r5, r0
    ldrb r1, [r4]
    ldrb r0, [r0]
    cmp r1, r0
    bne _08114C68
    ldr r4, _08114C64 @ =0x000008c4
    adds r0, r6, r4
    adds r0, r5, r0
    mov r5, sp
    ldrb r5, [r5, 0x4]
    strb r5, [r0]
    b _08114D76
    .align 2, 0
_08114C58: .4byte gSharedMem + 0x14800
_08114C5C: .4byte 0x000038c4
_08114C60: .4byte 0x000028c4
_08114C64: .4byte 0x000008c4
_08114C68:
    ldr r1, _08114C74 @ =0x000008c4
    adds r0, r6, r1
    adds r0, r5, r0
    movs r1, 0x1
    b _08114D74
    .align 2, 0
_08114C74: .4byte 0x000008c4
_08114C78:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r6, _08114CA8 @ =gSharedMem + 0x14800
    mov r4, r8
    adds r5, r3, r4
    ldr r0, _08114CAC @ =0x000038c4
    adds r4, r6, r0
    adds r4, r5, r4
    ldrb r1, [r4]
    ldr r0, [sp]
    bl sub_8114DF0
    ldr r1, _08114CB0 @ =0x000028c4
    adds r0, r6, r1
    adds r0, r5, r0
    ldrb r1, [r4]
    ldrb r0, [r0]
    cmp r1, r0
    beq _08114D1E
    ldr r1, _08114CB4 @ =0x000008c4
    adds r0, r6, r1
    adds r0, r5, r0
    movs r1, 0x2
    b _08114D74
    .align 2, 0
_08114CA8: .4byte gSharedMem + 0x14800
_08114CAC: .4byte 0x000038c4
_08114CB0: .4byte 0x000028c4
_08114CB4: .4byte 0x000008c4
_08114CB8:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r6, _08114CE8 @ =gSharedMem + 0x14800
    mov r4, r8
    adds r5, r3, r4
    ldr r0, _08114CEC @ =0x000038c4
    adds r4, r6, r0
    adds r4, r5, r4
    ldrb r1, [r4]
    ldr r0, [sp]
    bl sub_8114DB4
    ldr r1, _08114CF0 @ =0x000028c4
    adds r0, r6, r1
    adds r0, r5, r0
    ldrb r1, [r4]
    ldrb r0, [r0]
    cmp r1, r0
    beq _08114D1E
    ldr r1, _08114CF4 @ =0x000008c4
    adds r0, r6, r1
    adds r0, r5, r0
    movs r1, 0x3
    b _08114D74
    .align 2, 0
_08114CE8: .4byte gSharedMem + 0x14800
_08114CEC: .4byte 0x000038c4
_08114CF0: .4byte 0x000028c4
_08114CF4: .4byte 0x000008c4
_08114CF8:
    movs r2, 0
    str r2, [sp, 0x4]
    ldr r6, _08114D2C @ =gSharedMem + 0x14800
    mov r4, r8
    adds r5, r3, r4
    ldr r0, _08114D30 @ =0x000038c4
    adds r4, r6, r0
    adds r4, r5, r4
    ldrb r1, [r4]
    ldr r0, [sp]
    bl sub_8114DF0
    ldr r1, _08114D34 @ =0x000028c4
    adds r0, r6, r1
    adds r0, r5, r0
    ldrb r1, [r4]
    ldrb r0, [r0]
    cmp r1, r0
    bne _08114D6C
_08114D1E:
    ldr r2, _08114D38 @ =0x000008c4
    adds r0, r6, r2
    adds r0, r5, r0
    mov r4, sp
    ldrb r4, [r4, 0x4]
    strb r4, [r0]
    b _08114D76
    .align 2, 0
_08114D2C: .4byte gSharedMem + 0x14800
_08114D30: .4byte 0x000038c4
_08114D34: .4byte 0x000028c4
_08114D38: .4byte 0x000008c4
_08114D3C:
    ldr r0, _08114D48 @ =0x000008c4
    add r0, r9
    adds r0, r7, r0
    movs r1, 0
    b _08114D74
    .align 2, 0
_08114D48: .4byte 0x000008c4
_08114D4C:
    ldr r0, _08114D58 @ =0x000008c4
    add r0, r9
    adds r0, r7, r0
    strb r3, [r0]
    b _08114D76
    .align 2, 0
_08114D58: .4byte 0x000008c4
_08114D5C:
    ldr r0, _08114D68 @ =0x000008c4
    add r0, r9
    adds r0, r7, r0
    movs r1, 0
    b _08114D74
    .align 2, 0
_08114D68: .4byte 0x000008c4
_08114D6C:
    ldr r1, _08114DAC @ =0x000008c4
    adds r0, r6, r1
    adds r0, r5, r0
    movs r1, 0x4
_08114D74:
    strb r1, [r0]
_08114D76:
    mov r3, r10
    ldr r2, _08114DB0 @ =gSharedMem + 0x14800
    adds r0, r2, 0
    adds r0, 0x84
    ldr r4, [sp]
    adds r0, r4, r0
    adds r4, r2, 0
_08114D84:
    ldrb r0, [r0]
    cmp r3, r0
    bge _08114D8E
    bl _08114410
_08114D8E:
    ldr r5, [sp, 0x8]
    str r5, [sp]
    cmp r5, 0x3F
    bgt _08114D9A
    bl _081143F2
_08114D9A:
    ldr r0, [sp, 0x4]
    add sp, 0x14
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r1}
    bx r1
    .align 2, 0
_08114DAC: .4byte 0x000008c4
_08114DB0: .4byte gSharedMem + 0x14800
        .syntax divided
	.code	16
.Lfe16:
	.size	 unref_sub_81143CC,.Lfe16-unref_sub_81143CC
	.align	2, 0
	.globl	sub_8114DB4
	.type	 sub_8114DB4,function
	.thumb_func
sub_8114DB4:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldr	r2, .L428
	lsr	r1, r1, #0x19
	lsl	r1, r1, #0x2
	lsl	r0, r0, #0x7
	add	r1, r1, r0
	ldr	r0, .L428+0x4
	add	r2, r2, r0
	add	r1, r1, r2
	ldr	r2, [r1]
	mov	r0, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L425	@cond_branch
	ldrb	r0, [r2]
	mov	r1, #0xf0
	b	.L427
.L429:
	.align	2, 0
.L428:
	.word	gSharedMem+0x14800
	.word	0x40c4
.L425:
	ldrb	r0, [r2]
	mov	r1, #0xf
.L427:
	orr	r0, r0, r1
	strb	r0, [r2]
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 sub_8114DB4,.Lfe17-sub_8114DB4
	.align	2, 0
	.globl	sub_8114DF0
	.type	 sub_8114DF0,function
	.thumb_func
sub_8114DF0:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldr	r2, .L436
	lsr	r1, r1, #0x19
	lsl	r1, r1, #0x2
	lsl	r0, r0, #0x7
	add	r1, r1, r0
	ldr	r0, .L436+0x4
	add	r2, r2, r0
	add	r1, r1, r2
	ldr	r2, [r1]
	mov	r0, #0xc0
	lsl	r0, r0, #0x7
	add	r1, r2, r0
	mov	r0, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L431	@cond_branch
	ldrb	r1, [r1]
	mov	r0, #0xf0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L433	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0xf
	b	.L435
.L437:
	.align	2, 0
.L436:
	.word	gSharedMem+0x14800
	.word	0x40c4
.L431:
	ldrb	r1, [r1]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L433	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0xf0
.L435:
	and	r0, r0, r1
	strb	r0, [r2]
.L433:
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_8114DF0,.Lfe18-sub_8114DF0
	.align	2, 0
	.globl	sub_8114E48
	.type	 sub_8114E48,function
	.thumb_func
sub_8114E48:
	.syntax unified
        push {r4-r7,lr}
    adds r4, r0, 0
    lsls r1, 24
    lsrs r6, r1, 24
    ldr r1, _08114E6C @ =gSharedMem + 0x14800
    ldr r2, _08114E70 @ =0x0000a0c4
    adds r0, r1, r2
    ldrb r0, [r0]
    adds r5, r1, 0
    cmp r0, 0
    bne _08114E60
    b _08114F5E
_08114E60:
    movs r1, 0
    movs r3, 0
    cmp r4, 0
    bne _08114E74
    movs r1, 0x1
    b _08114EA6
    .align 2, 0
_08114E6C: .4byte gSharedMem + 0x14800
_08114E70: .4byte 0x0000a0c4
_08114E74:
    subs r0, r4, 0x1
    lsls r0, 5
    adds r2, r3, r0
    adds r0, r5, 0
    adds r0, 0xC4
    adds r0, r2, r0
    ldrb r0, [r0]
    cmp r0, 0
    bne _08114EA6
    ldr r7, _08114EC4 @ =0x000008c4
    adds r0, r5, r7
    adds r0, r2, r0
    ldrb r0, [r0]
    cmp r0, 0
    bne _08114EA6
    adds r3, 0x1
    cmp r3, 0x1F
    bgt _08114EA6
    cmp r4, 0
    bne _08114E74
    lsls r0, r1, 24
    movs r1, 0x80
    lsls r1, 17
    adds r0, r1
    lsrs r1, r0, 24
_08114EA6:
    cmp r3, 0x20
    bne _08114EB4
    lsls r0, r1, 24
    movs r2, 0x80
    lsls r2, 17
    adds r0, r2
    lsrs r1, r0, 24
_08114EB4:
    movs r3, 0
    cmp r4, 0x3F
    bne _08114EC8
    lsls r0, r1, 24
    movs r7, 0x80
    lsls r7, 17
    adds r0, r7
    b _08114EF8
    .align 2, 0
_08114EC4: .4byte 0x000008c4
_08114EC8:
    adds r0, r4, 0x1
    lsls r0, 5
    adds r2, r3, r0
    adds r0, r5, 0
    adds r0, 0xC4
    adds r0, r2, r0
    ldrb r0, [r0]
    cmp r0, 0
    bne _08114EFA
    ldr r7, _08114F64 @ =0x000008c4
    adds r0, r5, r7
    adds r0, r2, r0
    ldrb r0, [r0]
    cmp r0, 0
    bne _08114EFA
    adds r3, 0x1
    cmp r3, 0x1F
    bgt _08114EFA
    cmp r4, 0x3F
    bne _08114EC8
    lsls r0, r1, 24
    movs r1, 0x80
    lsls r1, 17
    adds r0, r1
_08114EF8:
    lsrs r1, r0, 24
_08114EFA:
    cmp r3, 0x20
    bne _08114F08
    lsls r0, r1, 24
    movs r2, 0x80
    lsls r2, 17
    adds r0, r2
    lsrs r1, r0, 24
_08114F08:
    cmp r1, 0x2
    beq _08114F5E
    subs r0, r6, 0x2
    lsls r0, 24
    lsrs r1, r0, 24
    cmp r0, 0
    bge _08114F18
    movs r1, 0
_08114F18:
    adds r0, r6, 0x2
    lsls r0, 24
    lsrs r2, r0, 24
    asrs r0, 24
    cmp r0, 0x3F
    ble _08114F26
    movs r2, 0x3F
_08114F26:
    lsls r1, 24
    asrs r3, r1, 24
    lsls r0, r2, 24
    asrs r2, r0, 24
    adds r6, r1, 0
    adds r7, r0, 0
    cmp r3, r2
    bge _08114F7C
    cmp r4, 0
    beq _08114F7C
    subs r0, r4, 0x1
    lsls r5, r0, 7
    ldr r0, _08114F68 @ =gSharedMem + 0x188C4
    mov r12, r0
_08114F42:
    asrs r0, r3, 1
    lsls r0, 2
    adds r0, r5
    add r0, r12
    ldr r1, [r0]
    movs r0, 0x1
    ands r0, r3
    cmp r0, 0
    beq _08114F6C
    ldrb r1, [r1]
    movs r0, 0xF0
_08114F58:
    ands r0, r1
    cmp r0, 0
    beq _08114F72
_08114F5E:
    movs r0, 0x1
    b _08114FCA
    .align 2, 0
_08114F64: .4byte 0x000008c4
_08114F68: .4byte gSharedMem + 0x188C4
_08114F6C:
    ldrb r1, [r1]
    movs r0, 0xF
    b _08114F58
_08114F72:
    adds r3, 0x1
    cmp r3, r2
    bge _08114F7C
    cmp r4, 0
    bne _08114F42
_08114F7C:
    asrs r3, r6, 24
    asrs r1, r7, 24
    cmp r3, r1
    bge _08114FC8
    cmp r4, 0x3F
    beq _08114FC8
    adds r0, r4, 0x1
    lsls r5, r0, 7
    ldr r6, _08114FB0 @ =gSharedMem + 0x188C4
    adds r2, r1, 0
_08114F90:
    asrs r0, r3, 1
    lsls r0, 2
    adds r0, r5
    adds r0, r6
    ldr r1, [r0]
    movs r0, 0x1
    ands r0, r3
    cmp r0, 0
    beq _08114FB4
    ldrb r1, [r1]
    movs r0, 0xF0
    ands r0, r1
    cmp r0, 0
    beq _08114FBE
    b _08114F5E
    .align 2, 0
_08114FB0: .4byte gSharedMem + 0x188C4
_08114FB4:
    ldrb r1, [r1]
    movs r0, 0xF
    ands r0, r1
    cmp r0, 0
    bne _08114F5E
_08114FBE:
    adds r3, 0x1
    cmp r3, r2
    bge _08114FC8
    cmp r4, 0x3F
    bne _08114F90
_08114FC8:
    movs r0, 0
_08114FCA:
    pop {r4-r7}
    pop {r1}
    bx r1
        .syntax divided
	.code	16
.Lfe19:
	.size	 sub_8114E48,.Lfe19-sub_8114E48
	.align	2, 0
	.type	 EvoDummyFunc,function
	.thumb_func
EvoDummyFunc:
	bx	lr
.Lfe20:
	.size	 EvoDummyFunc,.Lfe20-EvoDummyFunc
	.align	2, 0
	.type	 VBlankCB_EvolutionScene,function
	.thumb_func
VBlankCB_EvolutionScene:
	push	{lr}
	ldr	r1, .L441
	ldr	r2, .L441+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x8
	ldr	r0, .L441+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L441+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L441+0x10
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L441+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L441+0x18
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L441+0x1c
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L441+0x20
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L441+0x24
	ldrh	r0, [r0]
	strh	r0, [r1]
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	sub_8089668
	pop	{r0}
	bx	r0
.L442:
	.align	2, 0
.L441:
	.word	0x4000008
	.word	0x9803
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
.Lfe21:
	.size	 VBlankCB_EvolutionScene,.Lfe21-VBlankCB_EvolutionScene
	.align	2, 0
	.type	 VBlankCB_TradeEvolutionScene,function
	.thumb_func
VBlankCB_TradeEvolutionScene:
	push	{lr}
	ldr	r1, .L444
	ldr	r0, .L444+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L444+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L444+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L444+0x10
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L444+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L444+0x18
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L444+0x1c
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L444+0x20
	ldrh	r0, [r0]
	strh	r0, [r1]
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	sub_8089668
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	0x4000010
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
.Lfe22:
	.size	 VBlankCB_TradeEvolutionScene,.Lfe22-VBlankCB_TradeEvolutionScene
	.align	2, 0
	.type	 sub_81150D8,function
	.thumb_func
sub_81150D8:
	push	{lr}
	ldr	r0, .L447
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x1c
	mov	r0, #0x90
	lsl	r0, r0, #0x17
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	mov	r0, #0xc8
	bl	sub_814A880
	pop	{r0}
	bx	r0
.L448:
	.align	2, 0
.L447:
	.word	gBattleCommunication
.Lfe23:
	.size	 sub_81150D8,.Lfe23-sub_81150D8
	.align	2, 0
	.type	 EvoDummyFunc2,function
	.thumb_func
EvoDummyFunc2:
	bx	lr
.Lfe24:
	.size	 EvoDummyFunc2,.Lfe24-EvoDummyFunc2
	.comm	gCB2_AfterEvolution, 4	@ 4
.text
	.align	2, 0
