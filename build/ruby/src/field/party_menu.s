@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	TMHMMoves
	.section .rodata
	.align	1, 0
	.type	 TMHMMoves,object
TMHMMoves:
	.short	0x108
	.short	0x151
	.short	0x160
	.short	0x15b
	.short	0x2e
	.short	0x5c
	.short	0x102
	.short	0x153
	.short	0x14b
	.short	0xed
	.short	0xf1
	.short	0x10d
	.short	0x3a
	.short	0x3b
	.short	0x3f
	.short	0x71
	.short	0xb6
	.short	0xf0
	.short	0xca
	.short	0xdb
	.short	0xda
	.short	0x4c
	.short	0xe7
	.short	0x55
	.short	0x57
	.short	0x59
	.short	0xd8
	.short	0x5b
	.short	0x5e
	.short	0xf7
	.short	0x118
	.short	0x68
	.short	0x73
	.short	0x15f
	.short	0x35
	.short	0xbc
	.short	0xc9
	.short	0x7e
	.short	0x13d
	.short	0x14c
	.short	0x103
	.short	0x107
	.short	0x122
	.short	0x9c
	.short	0xd5
	.short	0xa8
	.short	0xd3
	.short	0x11d
	.short	0x121
	.short	0x13b
	.short	0xf
	.short	0x13
	.short	0x39
	.short	0x46
	.short	0x94
	.short	0xf9
	.short	0x7f
	.short	0x123
	.size	 TMHMMoves,116
	.4byte gTileBuffer

	.code	16
	.type	 MenuGfx_HoldIcons,object
MenuGfx_HoldIcons:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x50
	.byte	0x44
	.byte	0x44
	.byte	0x5
	.byte	0x50
	.byte	0x44
	.byte	0x44
	.byte	0xf5
	.byte	0x50
	.byte	0x44
	.byte	0x44
	.byte	0xf5
	.byte	0x70
	.byte	0x66
	.byte	0x66
	.byte	0xf7
	.byte	0x70
	.byte	0x66
	.byte	0x66
	.byte	0xf7
	.byte	0x50
	.byte	0x44
	.byte	0x44
	.byte	0xf5
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x10
	.byte	0x11
	.byte	0x11
	.byte	0x1
	.byte	0x30
	.byte	0x11
	.byte	0x11
	.byte	0xf3
	.byte	0x10
	.byte	0x13
	.byte	0x31
	.byte	0xf1
	.byte	0x20
	.byte	0x32
	.byte	0x23
	.byte	0xf2
	.byte	0x20
	.byte	0x22
	.byte	0x22
	.byte	0xf2
	.byte	0x0
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 MenuGfx_HoldIcons,64
	.align	1, 0
	.type	 MenuPal_HoldIcons,object
MenuPal_HoldIcons:
	.short	0x3727
	.short	0x7fff
	.short	0x7f5a
	.short	0x5a52
	.short	0x4fdf
	.short	0x3b7b
	.short	0x155e
	.short	0x2974
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x318c
	.size	 MenuPal_HoldIcons,32
	.align	2, 0
	.type	 HeldItemsSpriteSheet,object
	.size	 HeldItemsSpriteSheet,8
HeldItemsSpriteSheet:
	.word	MenuGfx_HoldIcons
	.short	0x40
	.short	0xd750
	.align	2, 0
	.type	 HeldItemsPalette,object
	.size	 HeldItemsPalette,8
HeldItemsPalette:
	.word	MenuPal_HoldIcons
	.short	0xd750
	.space	2
	.align	2, 0
	.type	 gOamData_83765EC,object
	.size	 gOamData_83765EC,8
gOamData_83765EC:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 gSpriteAnim_83765F4,object
gSpriteAnim_83765F4:
	.short	0x0
	.byte	0x1
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_83765F4,8
	.align	2, 0
	.type	 gSpriteAnim_83765FC,object
gSpriteAnim_83765FC:
	.short	0x1
	.byte	0x1
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_83765FC,8
	.align	2, 0
	.type	 gSpriteAnimTable_8376604,object
gSpriteAnimTable_8376604:
	.word	gSpriteAnim_83765F4
	.word	gSpriteAnim_83765FC
	.size	 gSpriteAnimTable_8376604,8
	.align	2, 0
	.type	 gSpriteTemplate_837660C,object
	.size	 gSpriteTemplate_837660C,24
gSpriteTemplate_837660C:
	.short	0xd750
	.short	0xd750
	.word	gOamData_83765EC
	.word	gSpriteAnimTable_8376604
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_UpdateHeldItemIconPosition
	.align	2, 0
	.type	 PartyMenuPromptTexts,object
PartyMenuPromptTexts:
	.word	OtherText_ChoosePoke
	.word	OtherText_MovePokeTo
	.word	OtherText_TeachWhat
	.word	OtherText_UseWhat
	.word	OtherText_GiveWhat
	.word	OtherText_DoWhat
	.word	OtherText_NothingToCut
	.word	OtherText_CantSurf
	.word	OtherText_AlreadySurfing
	.word	OtherText_CantUseThatHere
	.word	OtherText_RestoreWhatMove
	.word	OtherText_BoostPP
	.word	gOtherText_CancelWithTerminator
	.word	OtherText_DoWhatWithItem
	.word	OtherText_NoPokeForBattle
	.word	OtherText_ChoosePoke2
	.word	OtherText_NotEnoughHP
	.word	OtherText_ThreePokeNeeded
	.word	OtherText_PokeCantBeSame
	.word	OtherText_NoIdenticalHoldItems
	.word	OtherText_TeachWhichPoke
	.size	 PartyMenuPromptTexts,84
	.align	2, 0
	.type	 gUnknown_08376678,object
	.size	 gUnknown_08376678,192
gUnknown_08376678:
	.byte	0x10
	.byte	0x28
	.space	2
	.byte	0x68
	.byte	0x12
	.space	2
	.byte	0x68
	.byte	0x2a
	.space	2
	.byte	0x68
	.byte	0x42
	.space	2
	.byte	0x68
	.byte	0x5a
	.space	2
	.byte	0x68
	.byte	0x72
	.space	2
	.byte	0x10
	.byte	0x18
	.space	2
	.byte	0x10
	.byte	0x50
	.space	2
	.byte	0x68
	.byte	0x12
	.space	2
	.byte	0x68
	.byte	0x32
	.space	2
	.byte	0x68
	.byte	0x52
	.space	2
	.byte	0x68
	.byte	0x72
	.space	2
	.byte	0x10
	.byte	0x18
	.space	2
	.byte	0x10
	.byte	0x50
	.space	2
	.byte	0x68
	.byte	0x1a
	.space	2
	.byte	0x68
	.byte	0x32
	.space	2
	.byte	0x68
	.byte	0x52
	.space	2
	.byte	0x68
	.byte	0x6a
	.space	2
	.byte	0x10
	.byte	0x18
	.space	2
	.byte	0x68
	.byte	0x1a
	.space	2
	.byte	0x68
	.byte	0x32
	.space	2
	.byte	0x10
	.byte	0x50
	.space	2
	.byte	0x68
	.byte	0x52
	.space	2
	.byte	0x68
	.byte	0x6a
	.space	2
	.byte	0x5
	.byte	0x4
	.space	2
	.byte	0x10
	.byte	0x1
	.space	2
	.byte	0x10
	.byte	0x4
	.space	2
	.byte	0x10
	.byte	0x7
	.space	2
	.byte	0x10
	.byte	0xa
	.space	2
	.byte	0x10
	.byte	0xd
	.space	2
	.byte	0x5
	.byte	0x2
	.space	2
	.byte	0x5
	.byte	0x9
	.space	2
	.byte	0x10
	.byte	0x1
	.space	2
	.byte	0x10
	.byte	0x5
	.space	2
	.byte	0x10
	.byte	0x9
	.space	2
	.byte	0x10
	.byte	0xd
	.space	2
	.byte	0x5
	.byte	0x2
	.space	2
	.byte	0x5
	.byte	0x9
	.space	2
	.byte	0x10
	.byte	0x2
	.space	2
	.byte	0x10
	.byte	0x5
	.space	2
	.byte	0x10
	.byte	0x9
	.space	2
	.byte	0x10
	.byte	0xc
	.space	2
	.byte	0x5
	.byte	0x2
	.space	2
	.byte	0x10
	.byte	0x2
	.space	2
	.byte	0x10
	.byte	0x5
	.space	2
	.byte	0x5
	.byte	0x9
	.space	2
	.byte	0x10
	.byte	0x9
	.space	2
	.byte	0x10
	.byte	0xc
	.space	2
	.align	2, 0
	.type	 gUnknown_08376738,object
	.size	 gUnknown_08376738,288
gUnknown_08376738:
	.byte	0x6
	.byte	0x5
	.space	2
	.byte	0x11
	.byte	0x2
	.space	2
	.byte	0x11
	.byte	0x5
	.space	2
	.byte	0x11
	.byte	0x8
	.space	2
	.byte	0x11
	.byte	0xb
	.space	2
	.byte	0x11
	.byte	0xe
	.space	2
	.byte	0x6
	.byte	0x3
	.space	2
	.byte	0x6
	.byte	0xa
	.space	2
	.byte	0x11
	.byte	0x2
	.space	2
	.byte	0x11
	.byte	0x6
	.space	2
	.byte	0x11
	.byte	0xa
	.space	2
	.byte	0x11
	.byte	0xe
	.space	2
	.byte	0x6
	.byte	0x3
	.space	2
	.byte	0x6
	.byte	0xa
	.space	2
	.byte	0x11
	.byte	0x3
	.space	2
	.byte	0x11
	.byte	0x6
	.space	2
	.byte	0x11
	.byte	0xa
	.space	2
	.byte	0x11
	.byte	0xd
	.space	2
	.byte	0x6
	.byte	0x3
	.space	2
	.byte	0x11
	.byte	0x3
	.space	2
	.byte	0x11
	.byte	0x6
	.space	2
	.byte	0x6
	.byte	0xa
	.space	2
	.byte	0x11
	.byte	0xa
	.space	2
	.byte	0x11
	.byte	0xd
	.space	2
	.byte	0x3
	.byte	0x7
	.space	2
	.byte	0x16
	.byte	0x2
	.space	2
	.byte	0x16
	.byte	0x5
	.space	2
	.byte	0x16
	.byte	0x8
	.space	2
	.byte	0x16
	.byte	0xb
	.space	2
	.byte	0x16
	.byte	0xe
	.space	2
	.byte	0x3
	.byte	0x5
	.space	2
	.byte	0x3
	.byte	0xc
	.space	2
	.byte	0x16
	.byte	0x2
	.space	2
	.byte	0x16
	.byte	0x6
	.space	2
	.byte	0x16
	.byte	0xa
	.space	2
	.byte	0x16
	.byte	0xe
	.space	2
	.byte	0x3
	.byte	0x5
	.space	2
	.byte	0x3
	.byte	0xc
	.space	2
	.byte	0x16
	.byte	0x3
	.space	2
	.byte	0x16
	.byte	0x6
	.space	2
	.byte	0x16
	.byte	0xa
	.space	2
	.byte	0x16
	.byte	0xd
	.space	2
	.byte	0x3
	.byte	0x5
	.space	2
	.byte	0x16
	.byte	0x3
	.space	2
	.byte	0x16
	.byte	0x6
	.space	2
	.byte	0x3
	.byte	0xc
	.space	2
	.byte	0x16
	.byte	0xa
	.space	2
	.byte	0x16
	.byte	0xd
	.space	2
	.byte	0x7
	.byte	0x7
	.space	2
	.byte	0x1a
	.byte	0x2
	.space	2
	.byte	0x1a
	.byte	0x5
	.space	2
	.byte	0x1a
	.byte	0x8
	.space	2
	.byte	0x1a
	.byte	0xb
	.space	2
	.byte	0x1a
	.byte	0xe
	.space	2
	.byte	0x7
	.byte	0x5
	.space	2
	.byte	0x7
	.byte	0xc
	.space	2
	.byte	0x1a
	.byte	0x2
	.space	2
	.byte	0x1a
	.byte	0x6
	.space	2
	.byte	0x1a
	.byte	0xa
	.space	2
	.byte	0x1a
	.byte	0xe
	.space	2
	.byte	0x7
	.byte	0x5
	.space	2
	.byte	0x7
	.byte	0xc
	.space	2
	.byte	0x1a
	.byte	0x3
	.space	2
	.byte	0x1a
	.byte	0x6
	.space	2
	.byte	0x1a
	.byte	0xa
	.space	2
	.byte	0x1a
	.byte	0xd
	.space	2
	.byte	0x7
	.byte	0x5
	.space	2
	.byte	0x1a
	.byte	0x3
	.space	2
	.byte	0x1a
	.byte	0x6
	.space	2
	.byte	0x7
	.byte	0xc
	.space	2
	.byte	0x1a
	.byte	0xa
	.space	2
	.byte	0x1a
	.byte	0xd
	.space	2
	.align	2, 0
	.type	 gUnknown_08376858,object
	.size	 gUnknown_08376858,96
gUnknown_08376858:
	.word	0x600f1c8
	.word	0x600f0ae
	.word	0x600f16e
	.word	0x600f22e
	.word	0x600f2ee
	.word	0x600f3ae
	.word	0x600f148
	.word	0x600f308
	.word	0x600f0ae
	.word	0x600f1ae
	.word	0x600f2ae
	.word	0x600f3ae
	.word	0x600f148
	.word	0x600f308
	.word	0x600f0ee
	.word	0x600f1ae
	.word	0x600f2ae
	.word	0x600f36e
	.word	0x600f148
	.word	0x600f0ee
	.word	0x600f1ae
	.word	0x600f308
	.word	0x600f2ae
	.word	0x600f36e
	.align	2, 0
	.type	 gUnknown_083768B8,object
	.size	 gUnknown_083768B8,96
gUnknown_083768B8:
	.byte	0x8
	.byte	0x2c
	.space	2
	.byte	0x5c
	.byte	0x16
	.space	2
	.byte	0x5c
	.byte	0x2e
	.space	2
	.byte	0x5c
	.byte	0x46
	.space	2
	.byte	0x5c
	.byte	0x5e
	.space	2
	.byte	0x5c
	.byte	0x76
	.space	2
	.byte	0xc4
	.byte	0x88
	.space	2
	.byte	0xc4
	.byte	0x98
	.space	2
	.byte	0x8
	.byte	0x1c
	.space	2
	.byte	0x8
	.byte	0x54
	.space	2
	.byte	0x5c
	.byte	0x16
	.space	2
	.byte	0x5c
	.byte	0x36
	.space	2
	.byte	0x5c
	.byte	0x56
	.space	2
	.byte	0x5c
	.byte	0x76
	.space	2
	.byte	0xc4
	.byte	0x88
	.space	2
	.byte	0xc4
	.byte	0x98
	.space	2
	.byte	0x8
	.byte	0x1c
	.space	2
	.byte	0x8
	.byte	0x54
	.space	2
	.byte	0x5c
	.byte	0x1e
	.space	2
	.byte	0x5c
	.byte	0x36
	.space	2
	.byte	0x5c
	.byte	0x56
	.space	2
	.byte	0x5c
	.byte	0x6e
	.space	2
	.byte	0xc4
	.byte	0x88
	.space	2
	.byte	0xc4
	.byte	0x98
	.space	2
	.align	2, 0
	.type	 gUnknown_08376918,object
	.size	 gUnknown_08376918,48
gUnknown_08376918:
	.word	0x600f1c6
	.word	0x600f06c
	.word	0x600f12c
	.word	0x600f1ec
	.word	0x600f2ac
	.word	0x600f36c
	.word	0x600f148
	.word	0x600f308
	.word	0x600f0ae
	.word	0x600f1ae
	.word	0x600f2ae
	.word	0x600f3ae
	.align	2, 0
	.type	 gUnknown_08376948,object
	.size	 gUnknown_08376948,48
gUnknown_08376948:
	.byte	0x2
	.byte	0x4
	.byte	0xa
	.byte	0x9
	.byte	0x10
	.byte	0x1
	.byte	0x1d
	.byte	0x3
	.byte	0x10
	.byte	0x4
	.byte	0x1d
	.byte	0x6
	.byte	0x10
	.byte	0x7
	.byte	0x1d
	.byte	0x9
	.byte	0x10
	.byte	0xa
	.byte	0x1d
	.byte	0xc
	.byte	0x10
	.byte	0xd
	.byte	0x1d
	.byte	0xf
	.byte	0x2
	.byte	0x2
	.byte	0xa
	.byte	0x7
	.byte	0x2
	.byte	0x9
	.byte	0xa
	.byte	0xe
	.byte	0x10
	.byte	0x1
	.byte	0x1d
	.byte	0x3
	.byte	0x10
	.byte	0x5
	.byte	0x1d
	.byte	0x7
	.byte	0x10
	.byte	0x9
	.byte	0x1d
	.byte	0xb
	.byte	0x10
	.byte	0xd
	.byte	0x1d
	.byte	0xf
	.align	2, 0
	.type	 gUnknown_08376978,object
	.size	 gUnknown_08376978,48
gUnknown_08376978:
	.byte	0x2
	.byte	0x7
	.byte	0xa
	.byte	0x9
	.byte	0x15
	.byte	0x1
	.byte	0x1d
	.byte	0x3
	.byte	0x15
	.byte	0x4
	.byte	0x1d
	.byte	0x6
	.byte	0x15
	.byte	0x7
	.byte	0x1d
	.byte	0x9
	.byte	0x15
	.byte	0xa
	.byte	0x1d
	.byte	0xc
	.byte	0x15
	.byte	0xd
	.byte	0x1d
	.byte	0xf
	.byte	0x2
	.byte	0x2
	.byte	0xa
	.byte	0x7
	.byte	0x2
	.byte	0x9
	.byte	0xa
	.byte	0xe
	.byte	0x10
	.byte	0x1
	.byte	0x1d
	.byte	0x3
	.byte	0x10
	.byte	0x5
	.byte	0x1d
	.byte	0x7
	.byte	0x10
	.byte	0x9
	.byte	0x1d
	.byte	0xb
	.byte	0x10
	.byte	0xd
	.byte	0x1d
	.byte	0xf
	.type	 gUnknown_083769A8,object
gUnknown_083769A8:
	.byte	0x0
	.byte	0x3
	.byte	0xb
	.byte	0x1
	.byte	0xb
	.byte	0x4
	.byte	0xb
	.byte	0x7
	.byte	0xb
	.byte	0xa
	.byte	0xb
	.byte	0xd
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x8
	.byte	0xb
	.byte	0x1
	.byte	0xb
	.byte	0x5
	.byte	0xb
	.byte	0x9
	.byte	0xb
	.byte	0xd
	.size	 gUnknown_083769A8,24
	.type	 gUnknown_083769C0,object
gUnknown_083769C0:
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x8
	.byte	0xb
	.byte	0x2
	.byte	0xb
	.byte	0x5
	.byte	0xb
	.byte	0x9
	.byte	0xb
	.byte	0xc
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x8
	.byte	0xb
	.byte	0x2
	.byte	0xb
	.byte	0x5
	.byte	0xb
	.byte	0x9
	.byte	0xb
	.byte	0xc
	.size	 gUnknown_083769C0,24
	.type	 gUnknown_083769D8,object
gUnknown_083769D8:
	.byte	0x24
	.byte	0x25
	.byte	0x25
	.byte	0x25
	.byte	0x25
	.byte	0x25
	.byte	0x25
	.byte	0x25
	.byte	0x25
	.byte	0x27
	.byte	0x34
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x37
	.byte	0x34
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x37
	.byte	0x34
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x35
	.byte	0x37
	.byte	0x44
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x47
	.byte	0x44
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x45
	.byte	0x47
	.byte	0x54
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x57
	.size	 gUnknown_083769D8,70
	.type	 gUnknown_08376A25,object
gUnknown_08376A25:
	.byte	0x50
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x51
	.byte	0x53
	.byte	0x60
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x61
	.byte	0x63
	.byte	0x70
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x71
	.byte	0x73
	.size	 gUnknown_08376A25,54
	.type	 gUnknown_08376A5E,object
gUnknown_08376A5E:
	.byte	0x20
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x21
	.byte	0x23
	.byte	0x30
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x31
	.byte	0x33
	.byte	0x40
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x41
	.byte	0x43
	.size	 gUnknown_08376A5E,54
	.type	 gUnusedData_08376A97,object
gUnusedData_08376A97:
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0xf
	.byte	0x6
	.byte	0x5
	.byte	0x1
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0xf
	.byte	0x16
	.byte	0x15
	.byte	0x11
	.byte	0x17
	.byte	0x18
	.byte	0x19
	.byte	0xf
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0x5
	.byte	0xc
	.byte	0xf
	.byte	0xf
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0x15
	.byte	0x1c
	.byte	0xf
	.byte	0xf
	.byte	0xd
	.byte	0xb
	.byte	0x5
	.byte	0xc
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x1d
	.byte	0x1b
	.byte	0x15
	.byte	0x1c
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x6
	.byte	0x5
	.byte	0xb
	.byte	0x5
	.byte	0xc
	.byte	0xf
	.byte	0xf
	.byte	0x16
	.byte	0x15
	.byte	0x1b
	.byte	0x15
	.byte	0x1c
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x20
	.byte	0xc
	.byte	0x9
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x1f
	.byte	0x30
	.byte	0x1c
	.byte	0x19
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x25
	.byte	0xf
	.byte	0x22
	.byte	0x24
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x35
	.byte	0x41
	.byte	0x32
	.byte	0x34
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x26
	.byte	0xf
	.byte	0x23
	.byte	0xe
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0x36
	.byte	0x43
	.byte	0x33
	.byte	0x1e
	.byte	0xf
	.byte	0xf
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x3
	.byte	0x2a
	.byte	0xf
	.byte	0xf
	.byte	0x37
	.byte	0x38
	.byte	0x39
	.byte	0x13
	.byte	0x3a
	.byte	0xf
	.byte	0xf
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0xf
	.byte	0x37
	.byte	0x38
	.byte	0x39
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0xf
	.byte	0x2b
	.byte	0x2c
	.byte	0x2
	.byte	0x28
	.byte	0x29
	.byte	0x2d
	.byte	0x21
	.byte	0x3b
	.byte	0x3c
	.byte	0x12
	.byte	0x38
	.byte	0x39
	.byte	0x3d
	.byte	0x31
	.byte	0x2b
	.byte	0x2c
	.byte	0x2
	.byte	0x28
	.byte	0x29
	.byte	0x8
	.byte	0x9
	.byte	0x3b
	.byte	0x3c
	.byte	0x12
	.byte	0x38
	.byte	0x39
	.byte	0x18
	.byte	0x19
	.byte	0x2e
	.byte	0x2f
	.byte	0x2b
	.byte	0x2c
	.byte	0x2
	.byte	0x27
	.byte	0x2d
	.byte	0x3e
	.byte	0x3f
	.byte	0x3b
	.byte	0x3c
	.byte	0x12
	.byte	0x45
	.byte	0x3d
	.size	 gUnusedData_08376A97,186
	.align	2, 0
	.type	 gUnknown_08376B54,object
gUnknown_08376B54:
	.word	ItemUseMoveMenu_HandleMoveSelection
	.word	ItemUseMoveMenu_HandleCancel
	.size	 gUnknown_08376B54,8
	.align	1, 0
	.type	 PartyMonOAMSettings_LeftColumn,object
PartyMonOAMSettings_LeftColumn:
	.short	0x4000
	.short	0x4020
	.short	0xf400
	.short	0x4000
	.short	0x4040
	.short	0xf404
	.short	0x4008
	.short	0x4020
	.short	0xf408
	.short	0x4008
	.short	0x4040
	.short	0xf40c
	.short	0x4010
	.short	0x4020
	.short	0xf410
	.short	0x4020
	.short	0x4010
	.short	0xf418
	.short	0x4020
	.short	0x4030
	.short	0xf41c
	.short	0xffff
	.size	 PartyMonOAMSettings_LeftColumn,44
	.align	1, 0
	.type	 PartyMonOAMSettings_RightColumn,object
PartyMonOAMSettings_RightColumn:
	.short	0x4000
	.short	0x4020
	.short	0xf400
	.short	0x4000
	.short	0x4040
	.short	0xf404
	.short	0x4008
	.short	0x4020
	.short	0xf408
	.short	0x4008
	.short	0x4040
	.short	0xf40c
	.short	0x4010
	.short	0x4020
	.short	0xf410
	.short	0x4010
	.short	0x4050
	.short	0xf418
	.short	0x4010
	.short	0x4070
	.short	0xf41c
	.short	0xffff
	.size	 PartyMonOAMSettings_RightColumn,44
	.align	2, 0
	.type	 PartyMonTextSettings,object
	.size	 PartyMonTextSettings,192
PartyMonTextSettings:
	.byte	0x1
	.byte	0x4
	.space	2
	.word	PartyMonOAMSettings_LeftColumn
	.byte	0xc
	.byte	0x1
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0x4
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0x7
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0xa
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0xd
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0x1
	.byte	0x2
	.space	2
	.word	PartyMonOAMSettings_LeftColumn
	.byte	0x1
	.byte	0x9
	.space	2
	.word	PartyMonOAMSettings_LeftColumn
	.byte	0xc
	.byte	0x1
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0x5
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0x9
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0xd
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0x1
	.byte	0x2
	.space	2
	.word	PartyMonOAMSettings_LeftColumn
	.byte	0x1
	.byte	0x9
	.space	2
	.word	PartyMonOAMSettings_LeftColumn
	.byte	0xc
	.byte	0x2
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0x5
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0x9
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0xc
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0x1
	.byte	0x2
	.space	2
	.word	PartyMonOAMSettings_LeftColumn
	.byte	0xc
	.byte	0x2
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0x5
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0x1
	.byte	0x9
	.space	2
	.word	PartyMonOAMSettings_LeftColumn
	.byte	0xc
	.byte	0x9
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.byte	0xc
	.byte	0xc
	.space	2
	.word	PartyMonOAMSettings_RightColumn
	.align	2, 0
	.type	 PartyMenuHandlers,object
PartyMenuHandlers:
	.word	HandleDefaultPartyMenu
	.word	SetupDefaultPartyMenu
	.byte	0x0
	.space	3
	.word	HandleBattlePartyMenu
	.word	SetUpBattlePartyMenu
	.byte	0x0
	.space	3
	.word	HandleSelectPartyMenu
	.word	SetupContestPartyMenu
	.byte	0x0
	.space	3
	.word	HandleSelectPartyMenu
	.word	SetupDefaultPartyMenu
	.byte	0x0
	.space	3
	.word	HandleBattleTowerPartyMenu
	.word	SetupBattleTowerPartyMenu
	.byte	0x0
	.space	3
	.word	HandleLinkMultiBattlePartyMenu
	.word	SetupLinkMultiBattlePartyMenu
	.byte	0xff
	.space	3
	.word	HandleDaycarePartyMenu
	.word	SetupDefaultPartyMenu
	.byte	0xf
	.space	3
	.word	HandleMoveTutorPartyMenu
	.word	SetupMoveTutorPartyMenu
	.byte	0x0
	.space	3
	.size	 PartyMenuHandlers,96
	.align	1, 0
	.type	 gUnknown_08376CD4,object
gUnknown_08376CD4:
	.short	0x2a
	.short	0x2b
	.short	0x2c
	.short	0x2d
	.short	0x2e
	.short	0x2f
	.short	0x3a
	.short	0x3b
	.short	0x3c
	.short	0x3d
	.short	0x3e
	.short	0x3f
	.size	 gUnknown_08376CD4,24
	.align	1, 0
	.type	 gUnknown_08376CEC,object
gUnknown_08376CEC:
	.short	0x2a
	.short	0xb
	.short	0xc
	.short	0xd
	.short	0xe
	.short	0x2f
	.short	0x1a
	.short	0x1b
	.short	0x1c
	.short	0x1d
	.short	0x1e
	.short	0x1f
	.size	 gUnknown_08376CEC,24
	.align	2, 0
	.type	 StatNames,object
StatNames:
	.word	gOtherText_HP
	.word	gOtherText_Attack
	.word	gOtherText_Defense
	.word	gOtherText_SpAtk
	.word	gOtherText_SpDef
	.word	gOtherText_Speed
	.size	 StatNames,24
	.type	 StatDataTypes,object
StatDataTypes:
	.byte	0x3a
	.byte	0x3b
	.byte	0x3c
	.byte	0x3e
	.byte	0x3f
	.byte	0x3d
	.size	 StatDataTypes,6
.text
	.align	2, 0
	.globl	CB2_PartyMenuMain
	.type	 CB2_PartyMenuMain,function
	.thumb_func
CB2_PartyMenuMain:
	.syntax unified
    push {r4-r6,lr}
    sub sp, 0x4
    bl AnimateSprites
    bl BuildOamBuffer
    ldr r0, _0806AF2C @ =gPartyMenuType
    ldrb r1, [r0]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 4
    ldr r1, _0806AF30 @ =PartyMonTextSettings
    adds r5, r0, r1
    movs r6, 0
_0806AEF8:
    ldrb r0, [r5]
    lsls r0, 3
    ldrb r1, [r5, 0x1]
    lsls r1, 3
    ldr r2, [r5, 0x4]
    lsls r3, r6, 5
    movs r4, 0x80
    lsls r4, 2
    orrs r3, r4
    str r3, [sp]
    movs r3, 0
    bl DrawPartyMenuMonText
    adds r5, 0x8
    adds r6, 0x1
    cmp r6, 0x5
    ble _0806AEF8
    bl RunTasks
    bl UpdatePaletteFade
    add sp, 0x4
    pop {r4-r6}
    pop {r0}
    bx r0
    .align 2, 0
_0806AF2C: .4byte gPartyMenuType
_0806AF30: .4byte PartyMonTextSettings
    .syntax divided

	.code	16
.Lfe1:
	.size	 CB2_PartyMenuMain,.Lfe1-CB2_PartyMenuMain
	.align	2, 0
	.type	 VBlankCB_PartyMenu,function
	.thumb_func
VBlankCB_PartyMenu:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	ReDrawPartyMonBackgrounds
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 VBlankCB_PartyMenu,.Lfe2-VBlankCB_PartyMenu
	.align	2, 0
	.globl	SetPartyMenuSettings
	.type	 SetPartyMenuSettings,function
	.thumb_func
SetPartyMenuSettings:
	push	{r4, r5, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	cmp	r1, #0xff
	beq	.L5	@cond_branch
	ldr	r0, .L6
	strh	r1, [r0]
.L5:
	ldr	r0, .L6+0x4
	mov	r5, #0x96
	lsl	r5, r5, #0x2
	add	r1, r0, r5
	strb	r2, [r1]
	mov	r2, #0x97
	lsl	r2, r2, #0x2
	add	r1, r0, r2
	str	r4, [r1]
	add	r5, r5, #0x1
	add	r0, r0, r5
	strb	r3, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gBattleTypeFlags
	.word	gSharedMem+0x1b000
.Lfe3:
	.size	 SetPartyMenuSettings,.Lfe3-SetPartyMenuSettings
	.align	2, 0
	.globl	DoOpenPartyMenu
	.type	 DoOpenPartyMenu,function
	.thumb_func
DoOpenPartyMenu:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	SetPartyMenuSettings
	ldr	r0, .L9
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	CB2_InitPartyMenu
.Lfe4:
	.size	 DoOpenPartyMenu,.Lfe4-DoOpenPartyMenu
	.align	2, 0
	.globl	OpenPartyMenu
	.type	 OpenPartyMenu,function
	.thumb_func
OpenPartyMenu:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L12
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r2
	ldr	r2, [r3]
	ldrb	r3, [r3, #0x8]
	bl	DoOpenPartyMenu
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	PartyMenuHandlers
.Lfe5:
	.size	 OpenPartyMenu,.Lfe5-OpenPartyMenu
	.align	2, 0
	.type	 SetupDefaultPartyMenu,function
	.thumb_func
SetupDefaultPartyMenu:
	push	{r4, r5, lr}
	ldr	r1, .L37
	mov	r2, #0x99
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	add	r4, r1, #0
	cmp	r0, #0x9
	bls	.LCB151
	b	.L15	@long jump
.LCB151:
	lsl	r0, r0, #0x2
	ldr	r1, .L37+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L38:
	.align	2, 0
.L37:
	.word	gSharedMem+0x1b000
	.word	.L32
	.align	2, 0
	.align	2, 0
.L32:
	.word	.L16
	.word	.L19
	.word	.L20
	.word	.L21
	.word	.L24
	.word	.L25
	.word	.L26
	.word	.L27
	.word	.L28
	.word	.L29
.L16:
	ldr	r0, .L39
	add	r5, r4, r0
	mov	r1, #0x0
	ldrsh	r3, [r5, r1]
	ldr	r0, .L39+0x4
	ldrb	r0, [r0]
	cmp	r3, r0
	bge	.L17	@cond_branch
	mov	r2, #0x98
	lsl	r2, r2, #0x2
	add	r0, r4, r2
	ldrb	r0, [r0]
	ldrb	r1, [r5]
	mov	r2, #0x64
	mul	r2, r2, r3
	ldr	r3, .L39+0x8
	add	r2, r2, r3
	bl	TryCreatePartyMenuMonIcon
	b	.L30
.L40:
	.align	2, 0
.L39:
	.word	0x266
	.word	gPlayerPartyCount
	.word	gPlayerParty
.L17:
	mov	r0, #0x0
	strh	r0, [r5]
	mov	r0, #0x99
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L35
.L19:
	bl	LoadHeldItemIconGraphics
	b	.L36
.L20:
	mov	r1, #0x98
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldrb	r0, [r0]
	bl	CreateHeldItemIcons_806DC34
	mov	r2, #0x99
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L35
.L21:
	mov	r1, #0x98
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldrb	r0, [r0]
	ldr	r2, .L41
	add	r5, r4, r2
	ldrb	r1, [r5]
	bl	sub_806BD58
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L30	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5]
	mov	r0, #0x99
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L35
.L42:
	.align	2, 0
.L41:
	.word	0x266
.L24:
	bl	PartyMenuPrintMonsLevelOrStatus
	b	.L36
.L25:
	bl	PrintPartyMenuMonNicknames
	ldr	r1, .L43
	mov	r0, #0x99
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L35
.L44:
	.align	2, 0
.L43:
	.word	gSharedMem+0x1b000
.L26:
	bl	PartyMenuTryPrintMonsHP
	b	.L36
.L27:
	bl	nullsub_13
	ldr	r1, .L45
	mov	r0, #0x99
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L35
.L46:
	.align	2, 0
.L45:
	.word	gSharedMem+0x1b000
.L28:
	bl	PartyMenuDrawHPBars
.L36:
	ldr	r1, .L47
	mov	r2, #0x99
	lsl	r2, r2, #0x2
	add	r1, r1, r2
.L35:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L15
.L48:
	.align	2, 0
.L47:
	.word	gSharedMem+0x1b000
.L29:
	ldr	r0, .L49
	add	r5, r4, r0
	ldrb	r0, [r5]
	bl	DrawPartyMonBackground
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L30	@cond_branch
	mov	r1, #0x0
	strh	r1, [r5]
	mov	r2, #0x99
	lsl	r2, r2, #0x2
	add	r0, r4, r2
	strh	r1, [r0]
	mov	r0, #0x1
	b	.L34
.L50:
	.align	2, 0
.L49:
	.word	0x266
.L30:
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
.L15:
	mov	r0, #0x0
.L34:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 SetupDefaultPartyMenu,.Lfe6-SetupDefaultPartyMenu
	.align	2, 0
	.globl	InitPartyMenu
	.type	 InitPartyMenu,function
	.thumb_func
InitPartyMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff4
	ldr	r0, .L87
	ldr	r1, .L87+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x11
	bls	.LCB396
	b	.L52	@long jump
.LCB396:
	lsl	r0, r0, #0x2
	ldr	r1, .L87+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L88:
	.align	2, 0
.L87:
	.word	gMain
	.word	0x43c
	.word	.L82
	.align	2, 0
	.align	2, 0
.L82:
	.word	.L53
	.word	.L59
	.word	.L60
	.word	.L61
	.word	.L62
	.word	.L64
	.word	.L65
	.word	.L66
	.word	.L67
	.word	.L68
	.word	.L70
	.word	.L73
	.word	.L74
	.word	.L76
	.word	.L77
	.word	.L79
	.word	.L80
	.word	.L81
.L53:
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	mov	r4, #0xc0
	lsl	r4, r4, #0x9
	add	r2, sp, #0x8
	mov	r8, r2
	add	r2, sp, #0x4
	mov	r6, #0x0
	ldr	r1, .L89
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L89+0x4
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L56:
	strh	r6, [r2]
	add	r0, sp, #0x4
	str	r0, [r1]
	str	r3, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r3, r3, r5
	sub	r4, r4, r5
	cmp	r4, r5
	bhi	.L56	@cond_branch
	strh	r6, [r2]
	add	r2, sp, #0x4
	str	r2, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r4, #0x1
	mov	r3, ip
	orr	r0, r0, r3
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	ldr	r2, .L89
	mov	r1, r8
	str	r1, [r2]
	str	r0, [r2, #0x4]
	lsr	r0, r3, #0x2
	mov	r1, #0x85
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, sp, #0x4
	strh	r4, [r0]
	str	r0, [r2]
	str	r1, [r2, #0x4]
	lsr	r3, r3, #0x1
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	str	r3, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	ldr	r2, .L89+0x8
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r1, .L89+0xc
	ldr	r2, .L89+0x10
	add	r1, r1, r2
	b	.L85
.L90:
	.align	2, 0
.L89:
	.word	0x40000d4
	.word	0x81000800
	.word	gPaletteFade
	.word	gMain
	.word	0x43c
.L59:
	bl	remove_some_task
	b	.L86
.L60:
	bl	sub_806B4A8
	ldr	r1, .L91
	mov	r2, #0x99
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r3, .L91+0x4
	add	r0, r1, r3
	strh	r2, [r0]
	mov	r0, #0x9a
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	strh	r2, [r1]
	ldr	r1, .L91+0x8
	ldr	r2, .L91+0xc
	add	r1, r1, r2
	b	.L85
.L92:
	.align	2, 0
.L91:
	.word	gSharedMem+0x1b000
	.word	0x266
	.word	gMain
	.word	0x43c
.L61:
	bl	ResetSpriteData
	b	.L86
.L62:
	ldr	r0, .L93
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L63	@cond_branch
	cmp	r0, #0x5
	beq	.L63	@cond_branch
	bl	ResetTasks
.L63:
	ldr	r1, .L93+0x4
	ldr	r2, .L93+0x8
	add	r1, r1, r2
	b	.L85
.L94:
	.align	2, 0
.L93:
	.word	gSharedMem+0x1b000
	.word	gMain
	.word	0x43c
.L64:
	bl	FreeAllSpritePalettes
	b	.L86
.L65:
	ldr	r4, .L95
	mov	r1, #0x97
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	CreateTask
	mov	r2, #0x98
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	strb	r0, [r1]
	b	.L86
.L96:
	.align	2, 0
.L95:
	.word	gSharedMem+0x1b000
.L66:
	ldr	r0, .L97
	bl	SetUpWindowConfig
	ldr	r1, .L97+0x4
	ldr	r0, .L97+0x8
	add	r1, r1, r0
	b	.L85
.L98:
	.align	2, 0
.L97:
	.word	gWindowConfig_81E6C90
	.word	gMain
	.word	0x43c
.L67:
	ldr	r4, .L99
	ldr	r1, .L99+0x4
	add	r0, r4, #0
	bl	InitWindowFromConfig
	add	r0, r4, #0
	mov	r1, #0x1
	bl	MultistepInitWindowTileData
	ldr	r1, .L99+0x8
	ldr	r2, .L99+0xc
	add	r1, r1, r2
	b	.L85
.L100:
	.align	2, 0
.L99:
	.word	gUnknown_03004210
	.word	gWindowConfig_81E6C90
	.word	gMain
	.word	0x43c
.L68:
	bl	MultistepLoadFont
	cmp	r0, #0
	bne	.LCB680
	b	.L52	@long jump
.LCB680:
	ldr	r0, .L101
	mov	r3, #0x99
	lsl	r3, r3, #0x2
	add	r0, r0, r3
	mov	r1, #0x1
	strh	r1, [r0]
	ldr	r1, .L101+0x4
	ldr	r0, .L101+0x8
	add	r1, r1, r0
	b	.L85
.L102:
	.align	2, 0
.L101:
	.word	gSharedMem+0x1b000
	.word	gMain
	.word	0x43c
.L70:
	ldr	r0, .L103
	mov	r1, #0x99
	lsl	r1, r1, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4]
	bl	LoadPartyMenuGraphics
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L71	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4]
	ldr	r1, .L103+0x4
	ldr	r2, .L103+0x8
	add	r1, r1, r2
	b	.L85
.L104:
	.align	2, 0
.L103:
	.word	gSharedMem+0x1b000
	.word	gMain
	.word	0x43c
.L71:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L52
.L73:
	bl	sub_809D51C
	b	.L86
.L74:
	ldr	r2, .L105
	ldr	r0, .L105+0x4
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r0, [r0]
	bl	_call_via_r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L52	@cond_branch
	ldr	r1, .L105+0x8
	ldr	r2, .L105+0xc
	add	r1, r1, r2
	b	.L85
.L106:
	.align	2, 0
.L105:
	.word	PartyMenuHandlers
	.word	gSharedMem+0x1b000
	.word	gMain
	.word	0x43c
.L76:
	ldr	r0, .L107
	bl	MultistepInitMenuWindowBegin
	b	.L86
.L108:
	.align	2, 0
.L107:
	.word	gWindowConfig_81E6CC8
.L77:
	bl	MultistepInitMenuWindowContinue
	cmp	r0, #0
	beq	.L52	@cond_branch
	ldr	r1, .L109
	ldr	r0, .L109+0x4
	add	r1, r1, r0
	b	.L85
.L110:
	.align	2, 0
.L109:
	.word	gMain
	.word	0x43c
.L79:
	ldr	r0, .L111
	ldr	r1, .L111+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	PrintPartyMenuPromptText
	ldr	r1, .L111+0x8
	ldr	r2, .L111+0xc
	add	r1, r1, r2
	b	.L85
.L112:
	.align	2, 0
.L111:
	.word	gSharedMem+0x1b000
	.word	0x259
	.word	gMain
	.word	0x43c
.L80:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r2, .L113
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
.L86:
	ldr	r1, .L113+0x4
	ldr	r3, .L113+0x8
	add	r1, r1, r3
.L85:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L52
.L114:
	.align	2, 0
.L113:
	.word	gPaletteFade
	.word	gMain
	.word	0x43c
.L81:
	ldr	r0, .L115
	bl	SetVBlankCallback
	mov	r0, #0x1
	b	.L84
.L116:
	.align	2, 0
.L115:
	.word	VBlankCB_PartyMenu
.L52:
	mov	r0, #0x0
.L84:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 InitPartyMenu,.Lfe7-InitPartyMenu
	.align	2, 0
	.type	 CB2_InitPartyMenu,function
	.thumb_func
CB2_InitPartyMenu:
	push	{lr}
	b	.L118
.L120:
	bl	sub_80F9344
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L117	@cond_branch
.L118:
	bl	InitPartyMenu
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L120	@cond_branch
	ldr	r1, .L124
	mov	r2, #0x96
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L123	@cond_branch
	add	r2, r2, #0x8
	add	r0, r1, r2
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ChangePartyMenuSelection
.L123:
	ldr	r0, .L124+0x4
	bl	SetMainCallback2
.L117:
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gSharedMem+0x1b000
	.word	CB2_PartyMenuMain
.Lfe8:
	.size	 CB2_InitPartyMenu,.Lfe8-CB2_InitPartyMenu
	.align	2, 0
	.type	 sub_806B4A8,function
	.thumb_func
sub_806B4A8:
	push	{lr}
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xfa
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x8
	ldr	r2, .L127
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r2, .L127+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r2, .L127+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r2, .L127+0xc
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L127+0x10
	mov	r1, #0x0
	strh	r1, [r0]
	sub	r0, r0, #0x40
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	ldr	r2, .L127+0x14
	strh	r1, [r2]
	ldr	r1, .L127+0x18
	add	r0, r1, #0
	strh	r0, [r2]
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	0x1e05
	.word	0x703
	.word	0xf08
	.word	0x602
	.word	0x4000050
	.word	0x400001e
	.word	0xffff
.Lfe9:
	.size	 sub_806B4A8,.Lfe9-sub_806B4A8
	.align	2, 0
	.globl	IsLinkDoubleBattle
	.type	 IsLinkDoubleBattle,function
	.thumb_func
IsLinkDoubleBattle:
	push	{lr}
	ldr	r0, .L133
	ldrh	r1, [r0]
	mov	r0, #0x4b
	and	r0, r0, r1
	cmp	r0, #0x4b
	beq	.L130	@cond_branch
	mov	r0, #0x0
	b	.L132
.L134:
	.align	2, 0
.L133:
	.word	gBattleTypeFlags
.L130:
	mov	r0, #0x1
.L132:
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 IsLinkDoubleBattle,.Lfe10-IsLinkDoubleBattle
	.align	2, 0
	.type	 ReDrawPartyMonBackgrounds,function
	.thumb_func
ReDrawPartyMonBackgrounds:
	push	{r4, lr}
	ldr	r0, .L138
	ldr	r1, .L138+0x4
	add	r4, r0, r1
	ldrb	r3, [r4]
	cmp	r3, #0
	beq	.L136	@cond_branch
	ldr	r1, .L138+0x8
	ldr	r2, .L138+0xc
	ldr	r0, .L138+0x10
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L138+0x14
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	cmp	r3, #0x2
	bne	.L136	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
.L136:
	pop	{r4}
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	gSharedMem+0x1b000
	.word	0x261
	.word	gBGTilemapBuffers+0x1000
	.word	0x6003000
	.word	0x40000d4
	.word	0x80000400
.Lfe11:
	.size	 ReDrawPartyMonBackgrounds,.Lfe11-ReDrawPartyMonBackgrounds
	.align	2, 0
	.globl	DrawPartyMonBackground
	.type	 DrawPartyMonBackground,function
	.thumb_func
DrawPartyMonBackground:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L141	@cond_branch
	ldr	r0, .L211
	strb	r2, [r0]
	b	.L142
.L212:
	.align	2, 0
.L211:
	.word	gPartyMenuType
.L141:
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L143	@cond_branch
	ldr	r1, .L213
	mov	r0, #0x2
	b	.L205
.L214:
	.align	2, 0
.L213:
	.word	gPartyMenuType
.L143:
	ldr	r1, .L215
	mov	r0, #0x1
.L205:
	strb	r0, [r1]
	add	r0, r1, #0
.L142:
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L215+0x4
	add	r4, r1, r0
	cmp	r5, #0x8
	bls	.LCB1169
	b	.L145	@long jump
.LCB1169:
	lsl	r0, r5, #0x2
	ldr	r1, .L215+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L216:
	.align	2, 0
.L215:
	.word	gPartyMenuType
	.word	gUnknown_083769A8
	.word	.L202
	.align	2, 0
	.align	2, 0
.L202:
	.word	.L146
	.word	.L147
	.word	.L148
	.word	.L155
	.word	.L166
	.word	.L177
	.word	.L188
	.word	.L199
	.word	.L201
.L146:
	ldr	r0, .L217
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r1, #0x0
	bl	memset
	b	.L145
.L218:
	.align	2, 0
.L217:
	.word	gBGTilemapBuffers+0x1000
.L147:
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x1]
	mov	r2, #0x3
	bl	sub_806B9A4
	add	r0, r4, #0
	mov	r1, #0x0
	b	.L206
.L148:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L149	@cond_branch
	ldr	r0, .L219
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L150	@cond_branch
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0x2
	mov	r1, #0x1
	b	.L206
.L220:
	.align	2, 0
.L219:
	.word	gPlayerPartyCount
.L150:
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	b	.L207
.L149:
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L153	@cond_branch
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	mov	r2, #0x4
	bl	sub_806B9A4
	add	r0, r4, #0x2
	mov	r1, #0x1
	mov	r2, #0x4
	b	.L208
.L153:
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r4, #0x3]
	mov	r2, #0x3
	bl	sub_806B9A4
	add	r0, r4, #0x2
	mov	r1, #0x1
	b	.L206
.L155:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L156	@cond_branch
	ldr	r0, .L221
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bls	.L157	@cond_branch
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0x4
	mov	r1, #0x2
	b	.L206
.L222:
	.align	2, 0
.L221:
	.word	gPlayerPartyCount
.L157:
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	b	.L207
.L156:
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L160	@cond_branch
	ldr	r0, .L223
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L161	@cond_branch
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0x4
	mov	r1, #0x2
	b	.L206
.L224:
	.align	2, 0
.L223:
	.word	gPlayerParty+0xc8
.L161:
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	b	.L207
.L160:
	ldr	r0, .L225
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bls	.L164	@cond_branch
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0x4
	mov	r1, #0x2
	b	.L206
.L226:
	.align	2, 0
.L225:
	.word	gPlayerPartyCount
.L164:
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	b	.L207
.L166:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L167	@cond_branch
	ldr	r0, .L227
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bls	.L168	@cond_branch
	ldrb	r0, [r4, #0x6]
	ldrb	r1, [r4, #0x7]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0x6
	mov	r1, #0x3
	b	.L206
.L228:
	.align	2, 0
.L227:
	.word	gPlayerPartyCount
.L168:
	ldrb	r0, [r4, #0x6]
	ldrb	r1, [r4, #0x7]
	b	.L207
.L167:
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L171	@cond_branch
	ldr	r0, .L229
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L172	@cond_branch
	ldrb	r0, [r4, #0x6]
	ldrb	r1, [r4, #0x7]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0x6
	mov	r1, #0x3
	b	.L206
.L230:
	.align	2, 0
.L229:
	.word	gPlayerParty+0x12c
.L172:
	ldrb	r0, [r4, #0x6]
	ldrb	r1, [r4, #0x7]
	b	.L207
.L171:
	ldr	r0, .L231
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bls	.L175	@cond_branch
	ldrb	r0, [r4, #0x6]
	ldrb	r1, [r4, #0x7]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0x6
	mov	r1, #0x3
	b	.L206
.L232:
	.align	2, 0
.L231:
	.word	gPlayerPartyCount
.L175:
	ldrb	r0, [r4, #0x6]
	ldrb	r1, [r4, #0x7]
	b	.L207
.L177:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L178	@cond_branch
	ldr	r0, .L233
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bls	.L179	@cond_branch
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0
	add	r0, r0, #0x8
	mov	r1, #0x4
	b	.L206
.L234:
	.align	2, 0
.L233:
	.word	gPlayerPartyCount
.L179:
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	b	.L207
.L178:
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L182	@cond_branch
	ldr	r0, .L235
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	mov	r2, #0x0
	mov	r3, #0x4
	bl	sub_806BA94
	add	r0, r4, #0
	add	r0, r0, #0x8
	mov	r1, #0x4
	mov	r2, #0x4
	b	.L208
.L236:
	.align	2, 0
.L235:
	.word	gPlayerParty+0x190
.L183:
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	b	.L209
.L182:
	ldr	r0, .L237
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bls	.L186	@cond_branch
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0
	add	r0, r0, #0x8
	mov	r1, #0x4
	b	.L206
.L238:
	.align	2, 0
.L237:
	.word	gPlayerPartyCount
.L186:
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	b	.L207
.L188:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L189	@cond_branch
	ldr	r0, .L239
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bhi	.L210	@cond_branch
	b	.L197
.L240:
	.align	2, 0
.L239:
	.word	gPlayerPartyCount
.L189:
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L193	@cond_branch
	ldr	r0, .L241
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L194	@cond_branch
	ldrb	r0, [r4, #0xa]
	ldrb	r1, [r4, #0xb]
	mov	r2, #0x0
	mov	r3, #0x4
	bl	sub_806BA94
	add	r0, r4, #0
	add	r0, r0, #0xa
	mov	r1, #0x5
	mov	r2, #0x4
	b	.L208
.L242:
	.align	2, 0
.L241:
	.word	gPlayerParty+0x1f4
.L194:
	ldrb	r0, [r4, #0xa]
	ldrb	r1, [r4, #0xb]
.L209:
	mov	r2, #0x1
	mov	r3, #0x4
	bl	sub_806BA94
	b	.L145
.L193:
	ldr	r0, .L243
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bls	.L197	@cond_branch
.L210:
	ldrb	r0, [r4, #0xa]
	ldrb	r1, [r4, #0xb]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	sub_806BA94
	add	r0, r4, #0
	add	r0, r0, #0xa
	mov	r1, #0x5
.L206:
	mov	r2, #0x3
.L208:
	mov	r3, #0x0
	bl	sub_806BF24
	b	.L145
.L244:
	.align	2, 0
.L243:
	.word	gPlayerPartyCount
.L197:
	ldrb	r0, [r4, #0xa]
	ldrb	r1, [r4, #0xb]
.L207:
	mov	r2, #0x1
	mov	r3, #0x3
	bl	sub_806BA94
	b	.L145
.L199:
	ldr	r0, .L245
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L200	@cond_branch
	mov	r0, #0x1
	bl	sub_806BB9C
.L200:
	mov	r0, #0x1
	bl	sub_806BBEC
	b	.L145
.L246:
	.align	2, 0
.L245:
	.word	gSharedMem+0x1b000
.L201:
	ldr	r0, .L247
	ldr	r1, .L247+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	mov	r0, #0x1
	b	.L204
.L248:
	.align	2, 0
.L247:
	.word	gSharedMem+0x1b000
	.word	0x261
.L145:
	mov	r0, #0x0
.L204:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 DrawPartyMonBackground,.Lfe12-DrawPartyMonBackground
	.align	2, 0
	.globl	sub_806B908
	.type	 sub_806B908,function
	.thumb_func
sub_806B908:
	.syntax unified
    push {r4,r5,lr}
    ldr r0, _0806B948 @ =gBGTilemapBuffers + 0x1000
    movs r2, 0x80
    lsls r2, 4
    movs r1, 0
    bl memset
    ldr r1, _0806B94C @ =gPartyMenuType
    movs r0, 0x3
    strb r0, [r1]
    ldr r0, _0806B950 @ =gUnknown_083769A8
    adds r4, r0, 0
    adds r4, 0x24
    ldr r5, _0806B954 @ =gPlayerParty + 1 * 0x64
    ldrb r0, [r4]
    ldrb r1, [r4, 0x1]
    movs r2, 0x3
    bl sub_806B9A4
    adds r0, r5, 0
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _0806B958
    ldrb r0, [r4, 0x4]
    ldrb r1, [r4, 0x5]
    movs r2, 0
    movs r3, 0x3
    bl sub_806BA94
    b _0806B964
    .align 2, 0
_0806B948: .4byte gBGTilemapBuffers + 0x1000
_0806B94C: .4byte gPartyMenuType
_0806B950: .4byte gUnknown_083769A8
_0806B954: .4byte gPlayerParty + 1 * 0x64
_0806B958:
    ldrb r0, [r4, 0x4]
    ldrb r1, [r4, 0x5]
    movs r2, 0x1
    movs r3, 0x3
    bl sub_806BA94
_0806B964:
    adds r0, r5, 0
    adds r0, 0x64
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _0806B980
    ldrb r0, [r4, 0x6]
    ldrb r1, [r4, 0x7]
    movs r2, 0
    movs r3, 0x3
    bl sub_806BA94
    b _0806B98C
_0806B980:
    ldrb r0, [r4, 0x6]
    ldrb r1, [r4, 0x7]
    movs r2, 0x1
    movs r3, 0x3
    bl sub_806BA94
_0806B98C:
    ldr r0, _0806B99C @ =gSharedMem + 0x1B000
    ldr r1, _0806B9A0 @ =0x00000261
    adds r0, r1
    movs r1, 0x2
    strb r1, [r0]
    pop {r4,r5}
    pop {r0}
    bx r0
    .align 2, 0
_0806B99C: .4byte gSharedMem + 0x1B000
_0806B9A0: .4byte 0x00000261
    .syntax divided

	.code	16
.Lfe13:
	.size	 sub_806B908,.Lfe13-sub_806B908
	.align	2, 0
	.type	 sub_806B9A4,function
	.thumb_func
sub_806B9A4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp]
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x10
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	lsl	r0, r0, #0x10
	mov	ip, r0
	asr	r0, r0, #0x10
	mov	sl, r0
	ldr	r4, .L264
	mov	r9, r4
.L254:
	mov	r3, #0x0
	add	r7, r1, #0x1
	mov	r0, sl
	cmp	r0, #0x1f
	bgt	.L253	@cond_branch
	mov	r4, ip
	asr	r2, r4, #0x10
	lsl	r0, r1, #0x5
	ldr	r4, [sp, #0x4]
	add	r6, r4, r0
	ldr	r0, .L264+0x4
	mov	r8, r0
	ldr	r4, [sp]
	lsl	r5, r4, #0xc
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r4, r0, #0x1
.L259:
	add	r0, r2, r3
	cmp	r0, #0
	blt	.L258	@cond_branch
	add	r0, r6, r0
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	add	r1, r4, r3
	add	r1, r1, r9
	ldrb	r1, [r1]
	orr	r1, r1, r5
	strh	r1, [r0]
.L258:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x9
	bhi	.L253	@cond_branch
	add	r0, r2, r3
	cmp	r0, #0x1f
	ble	.L259	@cond_branch
.L253:
	lsl	r0, r7, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x6
	bls	.L254	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	gUnknown_083769D8
	.word	gBGTilemapBuffers+0x1000
.Lfe14:
	.size	 sub_806B9A4,.Lfe14-sub_806B9A4
	.align	2, 0
	.globl	sub_806BA34
	.type	 sub_806BA34,function
	.thumb_func
sub_806BA34:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x10
	mov	r8, r1
	mov	r1, #0x0
	lsl	r7, r0, #0x10
	asr	r0, r7, #0x10
	mov	ip, r0
.L270:
	mov	r2, #0x0
	add	r4, r1, #0x1
	mov	r5, ip
	cmp	r5, #0x1f
	bgt	.L269	@cond_branch
	asr	r3, r7, #0x10
	lsl	r0, r1, #0x5
	mov	r5, r8
	add	r1, r5, r0
	ldr	r6, .L280
	mov	r5, #0x0
.L275:
	add	r0, r3, r2
	cmp	r0, #0
	blt	.L274	@cond_branch
	add	r0, r1, r0
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r5, [r0]
.L274:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x9
	bhi	.L269	@cond_branch
	add	r0, r3, r2
	cmp	r0, #0x1f
	ble	.L275	@cond_branch
.L269:
	lsl	r0, r4, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x6
	bls	.L270	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	gBGTilemapBuffers+0x1000
.Lfe15:
	.size	 sub_806BA34,.Lfe15-sub_806BA34
	.align	2, 0
	.type	 sub_806BA94,function
	.thumb_func
sub_806BA94:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	lsl	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp]
	ldr	r1, .L296
	mov	r9, r1
	cmp	r2, #0
	bne	.L283	@cond_branch
	ldr	r1, .L296+0x4
	mov	r9, r1
.L283:
	lsl	r0, r0, #0x15
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x4]
	mov	r1, #0x0
	lsl	r4, r4, #0x10
	mov	ip, r4
	asr	r4, r4, #0x10
	mov	sl, r4
.L287:
	mov	r2, #0x0
	add	r7, r1, #0x1
	mov	r0, sl
	cmp	r0, #0x1f
	bgt	.L286	@cond_branch
	mov	r4, ip
	asr	r3, r4, #0x10
	lsl	r0, r1, #0x5
	ldr	r4, [sp, #0x4]
	add	r6, r4, r0
	ldr	r0, .L296+0x8
	mov	r8, r0
	ldr	r4, [sp]
	lsl	r5, r4, #0xc
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r4, r0, #0x1
.L291:
	add	r0, r3, r2
	cmp	r0, #0
	blt	.L293	@cond_branch
	add	r0, r6, r0
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	add	r1, r4, r2
	add	r1, r1, r9
	ldrb	r1, [r1]
	orr	r1, r1, r5
	strh	r1, [r0]
.L293:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x11
	bhi	.L286	@cond_branch
	add	r0, r3, r2
	cmp	r0, #0x1f
	ble	.L291	@cond_branch
.L286:
	lsl	r0, r7, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bls	.L287	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L297:
	.align	2, 0
.L296:
	.word	gUnknown_08376A5E
	.word	gUnknown_08376A25
	.word	gBGTilemapBuffers+0x1000
.Lfe16:
	.size	 sub_806BA94,.Lfe16-sub_806BA94
	.align	2, 0
	.globl	sub_806BB3C
	.type	 sub_806BB3C,function
	.thumb_func
sub_806BB3C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r1, r1, #0x15
	lsr	r1, r1, #0x10
	mov	r8, r1
	mov	r1, #0x0
	lsl	r7, r0, #0x10
	asr	r0, r7, #0x10
	mov	ip, r0
.L302:
	mov	r2, #0x0
	add	r4, r1, #0x1
	mov	r5, ip
	cmp	r5, #0x1f
	bgt	.L301	@cond_branch
	asr	r3, r7, #0x10
	lsl	r0, r1, #0x5
	mov	r5, r8
	add	r1, r5, r0
	ldr	r6, .L312
	mov	r5, #0x0
.L307:
	add	r0, r3, r2
	cmp	r0, #0
	blt	.L306	@cond_branch
	add	r0, r1, r0
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r5, [r0]
.L306:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x11
	bhi	.L301	@cond_branch
	add	r0, r3, r2
	cmp	r0, #0x1f
	ble	.L307	@cond_branch
.L301:
	lsl	r0, r4, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bls	.L302	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gBGTilemapBuffers+0x1000
.Lfe17:
	.size	 sub_806BB3C,.Lfe17-sub_806BB3C
	.align	2, 0
	.type	 sub_806BB9C,function
	.thumb_func
sub_806BB9C:
	push	{r4, lr}
	add	sp, sp, #0xffffffe8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L320
	mov	r0, sp
	mov	r2, #0x18
	bl	memcpy
	ldr	r3, .L320+0x4
	mov	r2, #0x0
	lsl	r4, r4, #0xc
.L318:
	lsl	r0, r2, #0x1
	add	r1, r0, r3
	add	r0, r0, sp
	ldrh	r0, [r0]
	add	r0, r0, r4
	strh	r0, [r1]
	add	r1, r1, #0x40
	add	r0, r2, #0x6
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	add	r0, r0, r4
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L318	@cond_branch
	add	sp, sp, #0x18
	pop	{r4}
	pop	{r0}
	bx	r0
.L321:
	.align	2, 0
.L320:
	.word	gUnknown_08376CD4
	.word	0x6003c30
.Lfe18:
	.size	 sub_806BB9C,.Lfe18-sub_806BB9C
	.align	2, 0
	.type	 sub_806BBEC,function
	.thumb_func
sub_806BBEC:
	push	{r4, lr}
	add	sp, sp, #0xffffffe8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L328
	mov	r0, sp
	mov	r2, #0x18
	bl	memcpy
	ldr	r3, .L328+0x4
	mov	r2, #0x0
	lsl	r4, r4, #0xc
.L326:
	lsl	r0, r2, #0x1
	add	r1, r0, r3
	add	r0, r0, sp
	ldrh	r0, [r0]
	add	r0, r0, r4
	strh	r0, [r1]
	add	r1, r1, #0x40
	add	r0, r2, #0x6
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	add	r0, r0, r4
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L326	@cond_branch
	add	sp, sp, #0x18
	pop	{r4}
	pop	{r0}
	bx	r0
.L329:
	.align	2, 0
.L328:
	.word	gUnknown_08376CEC
	.word	0x6003cb0
.Lfe19:
	.size	 sub_806BBEC,.Lfe19-sub_806BBEC
	.align	2, 0
	.globl	sub_806BC3C
	.type	 sub_806BC3C,function
	.thumb_func
sub_806BC3C:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L336
	bl	IsDoubleBattle
	lsl	r4, r4, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r4, r1
	add	r4, r4, r6
	ldr	r7, [r4]
	mov	r6, #0x0
	add	r0, r5, #0
	mov	r1, #0x7
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x13
	ldr	r5, .L336+0x4
	mov	r0, #0x86
	lsl	r0, r0, #0x1
	add	r3, r0, #0
.L334:
	add	r1, r6, r4
	lsl	r2, r6, #0x1
	add	r2, r2, r7
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	add	r0, r3, r0
	strh	r0, [r2]
	add	r2, r2, #0x40
	add	r1, r1, #0x20
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r1, [r1]
	add	r0, r3, r1
	strh	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x6
	bls	.L334	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L337:
	.align	2, 0
.L336:
	.word	gUnknown_08376918
	.word	gUnknown_08E9A300
.Lfe20:
	.size	 sub_806BC3C,.Lfe20-sub_806BC3C
	.align	2, 0
	.globl	unref_sub_806BCB8
	.type	 unref_sub_806BCB8,function
	.thumb_func
unref_sub_806BCB8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L344
	ldrb	r1, [r0]
	cmp	r4, r1
	bcs	.L340	@cond_branch
	add	r6, r0, #0
.L342:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_806BC3C
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	cmp	r4, r0
	bcc	.L342	@cond_branch
.L340:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L345:
	.align	2, 0
.L344:
	.word	gPlayerPartyCount
.Lfe21:
	.size	 unref_sub_806BCB8,.Lfe21-unref_sub_806BCB8
	.align	2, 0
	.globl	sub_806BCE8
	.type	 sub_806BCE8,function
	.thumb_func
sub_806BCE8:
	push	{r4, r5, lr}
	mov	r5, #0x0
	b	.L359
.L350:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L360
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L351	@cond_branch
	add	r0, r4, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L353	@cond_branch
	cmp	r0, #0xfe
	beq	.L354	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x46
	bl	sub_806BC3C
	b	.L349
.L361:
	.align	2, 0
.L360:
	.word	gPlayerParty
.L353:
	add	r0, r5, #0
	mov	r1, #0x54
	bl	sub_806BC3C
	b	.L349
.L354:
	add	r0, r5, #0
	mov	r1, #0x62
	bl	sub_806BC3C
	b	.L349
.L351:
	add	r0, r5, #0
	mov	r1, #0x46
	bl	sub_806BC3C
.L349:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L359:
	ldr	r0, .L362
	ldrb	r0, [r0]
	cmp	r5, r0
	bcc	.L350	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	gPlayerPartyCount
.Lfe22:
	.size	 sub_806BCE8,.Lfe22-sub_806BCE8
	.align	2, 0
	.globl	sub_806BD58
	.type	 sub_806BD58,function
	.thumb_func
sub_806BD58:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L365
	bl	CreateInvisibleSpriteWithCallback
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	sub_806CA18
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L366:
	.align	2, 0
.L365:
	.word	SpriteCallbackDummy
.Lfe23:
	.size	 sub_806BD58,.Lfe23-sub_806BD58
	.align	2, 0
	.globl	HandleDefaultPartyMenuInput
	.type	 HandleDefaultPartyMenuInput,function
	.thumb_func
HandleDefaultPartyMenuInput:
	.syntax unified
    push {r4,r5,lr}
    lsls r0, 24
    lsrs r5, r0, 24
    movs r4, 0
    ldr r0, _0806BD9C @ =gMain
    ldrh r0, [r0, 0x30]
    cmp r0, 0x20
    beq _0806BDB2
    cmp r0, 0x20
    bgt _0806BDA0
    cmp r0, 0x10
    beq _0806BDB6
    b _0806BDB8
    .align 2, 0
_0806BD9C: .4byte gMain
_0806BDA0:
    cmp r0, 0x40
    beq _0806BDAA
    cmp r0, 0x80
    beq _0806BDAE
    b _0806BDB8
_0806BDAA:
    movs r4, 0xFF
    b _0806BDB8
_0806BDAE:
    movs r4, 0x1
    b _0806BDB8
_0806BDB2:
    movs r4, 0xFE
    b _0806BDB8
_0806BDB6:
    movs r4, 0x2
_0806BDB8:
    lsls r0, r4, 24
    cmp r0, 0
    bne _0806BDDC
    bl sub_80F92BC
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    beq _0806BDD0
    cmp r0, 0x2
    beq _0806BDD4
    b _0806BDD6
_0806BDD0:
    movs r4, 0xFF
    b _0806BDD6
_0806BDD4:
    movs r4, 0x1
_0806BDD6:
    lsls r0, r4, 24
    cmp r0, 0
    beq _0806BDF0
_0806BDDC:
    asrs r1, r0, 24
    adds r0, r5, 0
    bl ChangePartyMenuSelection
    ldr r0, _0806BDEC @ =gMain
    ldrh r0, [r0, 0x30]
    b _0806BE2C
    .align 2, 0
_0806BDEC: .4byte gMain
_0806BDF0:
    ldr r0, _0806BE1C @ =gMain
    ldrh r1, [r0, 0x2E]
    movs r0, 0x1
    ands r0, r1
    cmp r0, 0
    beq _0806BE24
    ldr r4, _0806BE20 @ =gSprites
    adds r0, r5, 0
    bl sub_806CA00
    lsls r0, 24
    lsrs r0, 24
    lsls r1, r0, 4
    adds r1, r0
    lsls r1, 2
    adds r1, r4
    movs r2, 0x2E
    ldrsh r0, [r1, r2]
    cmp r0, 0x7
    bne _0806BE24
    movs r0, 0x2
    b _0806BE2C
    .align 2, 0
_0806BE1C: .4byte gMain
_0806BE20: .4byte gSprites
_0806BE24:
    ldr r0, _0806BE34 @ =gMain
    ldrh r1, [r0, 0x2E]
    movs r0, 0x3
    ands r0, r1
_0806BE2C:
    pop {r4,r5}
    pop {r1}
    bx r1
    .align 2, 0
_0806BE34: .4byte gMain
    .syntax divided

	.code	16
.Lfe24:
	.size	 HandleDefaultPartyMenuInput,.Lfe24-HandleDefaultPartyMenuInput
	.align	2, 0
	.globl	HandleBattleTowerPartyMenuInput
	.type	 HandleBattleTowerPartyMenuInput,function
	.thumb_func
HandleBattleTowerPartyMenuInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L392
	ldrh	r1, [r0, #0x30]
	add	r6, r0, #0
	cmp	r1, #0x20
	beq	.L372	@cond_branch
	cmp	r1, #0x20
	bgt	.L376	@cond_branch
	cmp	r1, #0x10
	beq	.L373	@cond_branch
	b	.L369
.L393:
	.align	2, 0
.L392:
	.word	gMain
.L376:
	cmp	r1, #0x40
	beq	.L370	@cond_branch
	cmp	r1, #0x80
	beq	.L371	@cond_branch
	b	.L369
.L370:
	mov	r4, #0xff
	b	.L377
.L371:
	mov	r4, #0x1
	b	.L377
.L372:
	mov	r4, #0xfe
	b	.L377
.L373:
	mov	r4, #0x2
.L369:
	cmp	r4, #0
	bne	.L377	@cond_branch
	bl	sub_80F92BC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L379	@cond_branch
	cmp	r0, #0x2
	beq	.L380	@cond_branch
	b	.L390
.L379:
	mov	r4, #0xff
	b	.L390
.L380:
	mov	r4, #0x1
.L390:
	ldr	r6, .L394
.L377:
	ldrh	r2, [r6, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L383	@cond_branch
	add	r0, r5, #0
	bl	SelectBattleTowerOKButton
	mov	r0, #0x8
	b	.L389
.L395:
	.align	2, 0
.L394:
	.word	gMain
.L383:
	lsl	r0, r4, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L385	@cond_branch
	add	r0, r5, #0
	bl	ChangeBattleTowerPartyMenuSelection
	ldrh	r0, [r6, #0x30]
	b	.L391
.L385:
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L384	@cond_branch
	ldr	r4, .L396
	add	r0, r5, #0
	bl	sub_806CA00
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x7
	bne	.L384	@cond_branch
	mov	r0, #0x2
	b	.L389
.L397:
	.align	2, 0
.L396:
	.word	gSprites
.L384:
	ldr	r0, .L398
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
.L391:
.L389:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L399:
	.align	2, 0
.L398:
	.word	gMain
.Lfe25:
	.size	 HandleBattleTowerPartyMenuInput,.Lfe25-HandleBattleTowerPartyMenuInput
	.align	2, 0
	.globl	task_pc_turn_off
	.type	 task_pc_turn_off,function
	.thumb_func
task_pc_turn_off:
	push	{lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L401	@cond_branch
	ldrb	r1, [r2, #0x1]
	mov	r2, #0x0
	bl	sub_806BA94
	b	.L402
.L401:
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	add	r2, r3, #0
	bl	sub_806B9A4
.L402:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 task_pc_turn_off,.Lfe26-task_pc_turn_off
	.align	2, 0
	.type	 sub_806BF24,function
	.thumb_func
sub_806BF24:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L406
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L404	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L404	@cond_branch
	mov	r4, #0x5
.L404:
	cmp	r6, #0x1
	bne	.L405	@cond_branch
	add	r0, r4, #0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L405:
	add	r0, r7, #0
	add	r1, r4, #0
	bl	task_pc_turn_off
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L407:
	.align	2, 0
.L406:
	.word	gPlayerParty
.Lfe27:
	.size	 sub_806BF24,.Lfe27-sub_806BF24
	.align	2, 0
	.globl	ChangePartyMenuSelection
	.type	 ChangePartyMenuSelection,function
	.thumb_func
ChangePartyMenuSelection:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	sub_806CA00
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L428
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r9
	add	r1, r5, #0
	mov	r2, #0x0
	bl	UpdateMonIconFrame_806DA44
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB2894
	b	.L409	@long jump
.LCB2894:
	cmp	r5, #0
	beq	.L411	@cond_branch
	cmp	r5, #0x2
	beq	.L411	@cond_branch
	cmp	r5, #0x3
	bne	.L410	@cond_branch
.L411:
	lsl	r0, r5, #0x1
	ldr	r1, .L428+0x4
	add	r0, r0, r1
	add	r1, r5, #0
	mov	r2, #0x3
	mov	r3, #0x0
	bl	sub_806BF24
.L410:
	cmp	r5, #0x1
	beq	.L413	@cond_branch
	cmp	r5, #0x4
	beq	.L413	@cond_branch
	cmp	r5, #0x5
	bne	.L412	@cond_branch
.L413:
	lsl	r0, r5, #0x1
	ldr	r1, .L428+0x4
	add	r0, r0, r1
	add	r1, r5, #0
	mov	r2, #0x4
	mov	r3, #0x0
	bl	sub_806BF24
.L412:
	cmp	r5, #0x7
	bne	.L414	@cond_branch
	mov	r0, #0x1
	bl	sub_806BBEC
.L414:
	lsl	r2, r4, #0x18
	asr	r2, r2, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	ChangeLinkDoubleBattlePartyMenuSelection
	ldr	r2, .L428
	lsl	r1, r6, #0x4
	add	r0, r1, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x2e
	ldrsh	r0, [r0, r2]
	mov	r8, r1
	cmp	r0, #0
	beq	.L416	@cond_branch
	cmp	r0, #0x2
	beq	.L416	@cond_branch
	cmp	r0, #0x3
	bne	.L415	@cond_branch
.L416:
	ldr	r0, .L428
	mov	r4, r8
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r7, #0x2e
	ldrsh	r0, [r1, r7]
	lsl	r0, r0, #0x1
	ldr	r2, .L428+0x4
	add	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x3
	mov	r3, #0x1
	bl	sub_806BF24
.L415:
	ldr	r1, .L428
	mov	r2, r8
	add	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r4, #0x2e
	ldrsh	r0, [r0, r4]
	cmp	r0, #0x1
	beq	.L418	@cond_branch
	cmp	r0, #0x4
	beq	.L418	@cond_branch
	cmp	r0, #0x5
	bne	.L417	@cond_branch
.L418:
	ldr	r0, .L428
	mov	r7, r8
	add	r1, r7, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	lsl	r0, r0, #0x1
	ldr	r2, .L428+0x4
	add	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x4
	mov	r3, #0x1
	bl	sub_806BF24
.L417:
	ldr	r7, .L428
	mov	r4, r8
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r7
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bne	.L419	@cond_branch
	mov	r0, #0x2
	bl	sub_806BBEC
.L419:
	ldr	r0, .L428+0x8
	ldr	r2, .L428+0xc
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0]
	ldr	r1, .L428+0x10
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x40
	ldrb	r0, [r0]
	strh	r0, [r4, #0x20]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x41
	ldrb	r0, [r0]
	strh	r0, [r4, #0x22]
	add	r0, r7, #0
	b	.L420
.L429:
	.align	2, 0
.L428:
	.word	gSprites
	.word	gUnknown_083769C0
	.word	gSharedMem+0x1b000
	.word	0x261
	.word	gUnknown_083768B8
.L409:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r5, #0x5
	bhi	.L421	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	lsl	r1, r5, #0x1
	add	r0, r0, r1
	ldr	r1, .L430
	add	r0, r0, r1
	add	r1, r5, #0
	mov	r2, #0x3
	mov	r3, #0x0
	bl	sub_806BF24
	b	.L422
.L431:
	.align	2, 0
.L430:
	.word	gUnknown_083769A8
.L421:
	mov	r0, #0x1
	bl	sub_806BBEC
.L422:
	cmp	r7, #0
	bne	.L423	@cond_branch
	lsl	r2, r4, #0x18
	asr	r2, r2, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	ChangeDefaultPartyMenuSelection
	b	.L424
.L423:
	lsl	r2, r4, #0x18
	asr	r2, r2, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	ChangeDoubleBattlePartyMenuSelection
.L424:
	ldr	r1, .L432
	lsl	r2, r6, #0x4
	add	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrh	r3, [r1, #0x2e]
	mov	r4, #0x2e
	ldrsh	r0, [r1, r4]
	mov	r8, r2
	cmp	r0, #0x5
	bgt	.L425	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	mov	r2, #0x2e
	ldrsh	r1, [r1, r2]
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r1, .L432+0x4
	add	r0, r0, r1
	lsl	r1, r3, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x3
	mov	r3, #0x1
	bl	sub_806BF24
	b	.L426
.L433:
	.align	2, 0
.L432:
	.word	gSprites
	.word	gUnknown_083769A8
.L425:
	mov	r0, #0x2
	bl	sub_806BBEC
.L426:
	ldr	r0, .L434
	ldr	r4, .L434+0x4
	add	r0, r0, r4
	mov	r1, #0x2
	strb	r1, [r0]
	ldr	r4, .L434+0x8
	mov	r0, r8
	add	r1, r0, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r3, .L434+0xc
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	lsl	r0, r0, #0x2
	lsl	r2, r7, #0x5
	add	r0, r0, r2
	add	r0, r0, r3
	ldrb	r0, [r0]
	strh	r0, [r1, #0x20]
	mov	r7, #0x2e
	ldrsh	r0, [r1, r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	strh	r0, [r1, #0x22]
	add	r0, r4, #0
.L420:
	mov	r1, r8
	add	r4, r1, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	mov	r2, #0x1
	bl	UpdateMonIconFrame_806DA44
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r5, r0
	beq	.L427	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L427:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	gSharedMem+0x1b000
	.word	0x261
	.word	gSprites
	.word	gUnknown_083768B8
.Lfe28:
	.size	 ChangePartyMenuSelection,.Lfe28-ChangePartyMenuSelection
	.align	2, 0
	.type	 ChangeDefaultPartyMenuSelection,function
	.thumb_func
ChangeDefaultPartyMenuSelection:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	add	r2, r2, r0
	asr	r0, r2, #0x18
	cmp	r0, #0x4
	bls	.LCB3252
	b	.L437	@long jump
.LCB3252:
	lsl	r0, r0, #0x2
	ldr	r1, .L459
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L460:
	.align	2, 0
.L459:
	.word	.L454
	.align	2, 0
	.align	2, 0
.L454:
	.word	.L452
	.word	.L439
	.word	.L438
	.word	.L444
	.word	.L449
.L438:
	ldr	r0, .L461
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	b	.L437
.L462:
	.align	2, 0
.L461:
	.word	gSprites
.L439:
	cmp	r3, #0
	beq	.L457	@cond_branch
	cmp	r3, #0x7
	bne	.L447	@cond_branch
	ldr	r2, .L463
	lsl	r3, r4, #0x4
	add	r1, r3, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, .L463+0x4
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	b	.L458
.L464:
	.align	2, 0
.L463:
	.word	gSprites
	.word	gPlayerPartyCount
.L444:
	ldr	r0, .L465
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r3, r0
	bne	.L445	@cond_branch
.L457:
	ldr	r2, .L465+0x4
	lsl	r3, r4, #0x4
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x7
	strh	r1, [r0, #0x2e]
	b	.L446
.L466:
	.align	2, 0
.L465:
	.word	gPlayerPartyCount
	.word	gSprites
.L445:
	cmp	r3, #0x7
	bne	.L447	@cond_branch
	ldr	r2, .L467
	lsl	r3, r4, #0x4
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	b	.L446
.L468:
	.align	2, 0
.L467:
	.word	gSprites
.L447:
	ldr	r2, .L469
	lsl	r3, r4, #0x4
	add	r1, r3, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	ldrh	r5, [r1, #0x2e]
	add	r0, r0, r5
.L458:
	strh	r0, [r1, #0x2e]
.L446:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	b	.L437
.L470:
	.align	2, 0
.L469:
	.word	gSprites
.L449:
	ldr	r0, .L471
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L437	@cond_branch
	cmp	r3, #0
	bne	.L437	@cond_branch
	ldr	r0, .L471+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r2, #0x30
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L451	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1, #0x30]
.L451:
	ldrh	r0, [r1, #0x30]
	strh	r0, [r1, #0x2e]
	b	.L437
.L472:
	.align	2, 0
.L471:
	.word	gPlayerPartyCount
	.word	gSprites
.L452:
	sub	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L437	@cond_branch
	ldr	r0, .L473
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	strh	r3, [r1, #0x30]
.L437:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L474:
	.align	2, 0
.L473:
	.word	gSprites
.Lfe29:
	.size	 ChangeDefaultPartyMenuSelection,.Lfe29-ChangeDefaultPartyMenuSelection
	.align	2, 0
	.type	 ChangeDoubleBattlePartyMenuSelection,function
	.thumb_func
ChangeDoubleBattlePartyMenuSelection:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	add	r2, r2, r0
	asr	r0, r2, #0x18
	cmp	r0, #0x4
	bls	.LCB3491
	b	.L476	@long jump
.LCB3491:
	lsl	r0, r0, #0x2
	ldr	r1, .L508
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L509:
	.align	2, 0
.L508:
	.word	.L502
	.align	2, 0
	.align	2, 0
.L502:
	.word	.L498
	.word	.L483
	.word	.L477
	.word	.L478
	.word	.L488
.L477:
	ldr	r0, .L510
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	b	.L476
.L511:
	.align	2, 0
.L510:
	.word	gSprites
.L478:
	cmp	r3, #0x7
	bne	.L479	@cond_branch
	ldr	r2, .L512
	lsl	r3, r4, #0x4
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	b	.L485
.L513:
	.align	2, 0
.L512:
	.word	gSprites
.L479:
	ldr	r0, .L514
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r3, r0
	beq	.L507	@cond_branch
	b	.L486
.L515:
	.align	2, 0
.L514:
	.word	gPlayerPartyCount
.L483:
	cmp	r3, #0
	bne	.L484	@cond_branch
.L507:
	ldr	r2, .L516
	lsl	r3, r4, #0x4
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x7
	strh	r1, [r0, #0x2e]
	b	.L485
.L517:
	.align	2, 0
.L516:
	.word	gSprites
.L484:
	cmp	r3, #0x7
	bne	.L486	@cond_branch
	ldr	r2, .L518
	lsl	r3, r4, #0x4
	add	r1, r3, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, .L518+0x4
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	b	.L504
.L519:
	.align	2, 0
.L518:
	.word	gSprites
	.word	gPlayerPartyCount
.L486:
	ldr	r2, .L520
	lsl	r3, r4, #0x4
	add	r1, r3, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	ldrh	r5, [r1, #0x2e]
	add	r0, r0, r5
.L504:
	strh	r0, [r1, #0x2e]
.L485:
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	b	.L476
.L521:
	.align	2, 0
.L520:
	.word	gSprites
.L488:
	cmp	r3, #0
	bne	.L489	@cond_branch
	ldr	r0, .L522
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bls	.L476	@cond_branch
	ldr	r0, .L522+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x30]
	sub	r0, r2, #0x2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bls	.L505	@cond_branch
	mov	r0, #0x2
	strh	r0, [r1, #0x2e]
	b	.L476
.L523:
	.align	2, 0
.L522:
	.word	gPlayerPartyCount
	.word	gSprites
.L489:
	cmp	r3, #0x1
	bne	.L476	@cond_branch
	ldr	r0, .L524
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bls	.L476	@cond_branch
	ldr	r0, .L524+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x30]
	sub	r0, r2, #0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L496	@cond_branch
.L505:
	strh	r2, [r1, #0x2e]
	b	.L476
.L525:
	.align	2, 0
.L524:
	.word	gPlayerPartyCount
	.word	gSprites
.L496:
	mov	r0, #0x4
	strh	r0, [r1, #0x2e]
	b	.L476
.L498:
	sub	r0, r3, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L499	@cond_branch
	ldr	r0, .L526
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	b	.L506
.L527:
	.align	2, 0
.L526:
	.word	gSprites
.L499:
	sub	r0, r3, #0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L476	@cond_branch
	ldr	r0, .L528
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
.L506:
	strh	r0, [r1, #0x2e]
	strh	r3, [r1, #0x30]
.L476:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L529:
	.align	2, 0
.L528:
	.word	gSprites
.Lfe30:
	.size	 ChangeDoubleBattlePartyMenuSelection,.Lfe30-ChangeDoubleBattlePartyMenuSelection
	.align	2, 0
	.type	 ChangeLinkDoubleBattlePartyMenuSelection,function
	.thumb_func
ChangeLinkDoubleBattlePartyMenuSelection:
	.syntax unified
    push {r4-r6,lr}
    lsls r0, 24
    lsrs r5, r0, 24
    lsls r1, 24
    lsrs r4, r1, 24
    lsls r2, 24
    movs r0, 0x80
    lsls r0, 18
    adds r2, r0
    asrs r0, r2, 24
    cmp r0, 0x4
    bls _0806C4AA
    b _0806C64E
_0806C4AA:
    lsls r0, 2
    ldr r1, _0806C4B4 @ =_0806C4B8
    adds r0, r1
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_0806C4B4: .4byte _0806C4B8
    .align 2, 0
_0806C4B8:
    .4byte _0806C618
    .4byte _0806C524
    .4byte _0806C4CC
    .4byte _0806C4E0
    .4byte _0806C57C
_0806C4CC:
    ldr r0, _0806C4DC @ =gSprites
    lsls r1, r5, 4
    adds r1, r5
    lsls r1, 2
    adds r1, r0
    movs r0, 0
    strh r0, [r1, 0x30]
    b _0806C64E
    .align 2, 0
_0806C4DC: .4byte gSprites
_0806C4E0:
    cmp r4, 0x7
    bne _0806C4FC
    ldr r2, _0806C4F8 @ =gSprites
    lsls r3, r5, 4
    adds r0, r3, r5
    lsls r0, 2
    adds r0, r2
    movs r1, 0
    strh r1, [r0, 0x2E]
    adds r1, r2, 0
    adds r6, r3, 0
    b _0806C566
    .align 2, 0
_0806C4F8: .4byte gSprites
_0806C4FC:
    lsls r6, r5, 4
    b _0806C518
_0806C500:
    adds r0, r4, 0x1
    lsls r0, 24
    lsrs r4, r0, 24
    movs r0, 0x64
    muls r0, r4
    ldr r1, _0806C520 @ =gPlayerParty
    adds r0, r1
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    bne _0806C528
_0806C518:
    cmp r4, 0x5
    bne _0806C500
    b _0806C558
    .align 2, 0
_0806C520: .4byte gPlayerParty
_0806C524:
    lsls r6, r5, 4
    b _0806C554
_0806C528:
    ldr r1, _0806C534 @ =gSprites
    adds r0, r6, r5
    lsls r0, 2
    adds r0, r1
    strh r4, [r0, 0x2E]
    b _0806C566
    .align 2, 0
_0806C534: .4byte gSprites
_0806C538:
    subs r0, r4, 0x1
    lsls r0, 24
    lsrs r4, r0, 24
    cmp r4, 0x6
    beq _0806C554
    movs r0, 0x64
    muls r0, r4
    ldr r1, _0806C574 @ =gPlayerParty
    adds r0, r1
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    bne _0806C528
_0806C554:
    cmp r4, 0
    bne _0806C538
_0806C558:
    ldr r0, _0806C578 @ =gSprites
    adds r1, r6, r5
    lsls r1, 2
    adds r1, r0
    movs r2, 0x7
    strh r2, [r1, 0x2E]
    adds r1, r0, 0
_0806C566:
    adds r0, r6, r5
    lsls r0, 2
    adds r0, r1
    movs r1, 0
    strh r1, [r0, 0x30]
    b _0806C64E
    .align 2, 0
_0806C574: .4byte gPlayerParty
_0806C578: .4byte gSprites
_0806C57C:
    cmp r4, 0
    bne _0806C5C8
    ldr r0, _0806C5AC @ =gSprites
    lsls r1, r5, 4
    adds r1, r5
    lsls r1, 2
    adds r4, r1, r0
    ldrh r1, [r4, 0x30]
    subs r0, r1, 0x2
    lsls r0, 16
    lsrs r0, 16
    cmp r0, 0x1
    bls _0806C5E2
    ldr r5, _0806C5B0 @ =gPlayerParty + 2 * 0x64
    adds r0, r5, 0
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _0806C5B4
    movs r0, 0x2
    strh r0, [r4, 0x2E]
    b _0806C64E
    .align 2, 0
_0806C5AC: .4byte gSprites
_0806C5B0: .4byte gPlayerParty + 2 * 0x64
_0806C5B4:
    adds r0, r5, 0
    adds r0, 0x64
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _0806C64E
    movs r0, 0x3
    strh r0, [r4, 0x2E]
    b _0806C64E
_0806C5C8:
    cmp r4, 0x1
    bne _0806C64E
    ldr r0, _0806C5E8 @ =gSprites
    lsls r1, r5, 4
    adds r1, r5
    lsls r1, 2
    adds r4, r1, r0
    ldrh r1, [r4, 0x30]
    subs r0, r1, 0x4
    lsls r0, 16
    lsrs r0, 16
    cmp r0, 0x1
    bhi _0806C5EC
_0806C5E2:
    strh r1, [r4, 0x2E]
    b _0806C64E
    .align 2, 0
_0806C5E8: .4byte gSprites
_0806C5EC:
    ldr r5, _0806C600 @ =gPlayerParty + 4 * 0x64
    adds r0, r5, 0
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _0806C604
    movs r0, 0x4
    strh r0, [r4, 0x2E]
    b _0806C64E
    .align 2, 0
_0806C600: .4byte gPlayerParty + 4 * 0x64
_0806C604:
    adds r0, r5, 0
    adds r0, 0x64
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _0806C64E
    movs r0, 0x5
    strh r0, [r4, 0x2E]
    b _0806C64E
_0806C618:
    subs r0, r4, 0x2
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    bhi _0806C634
    ldr r0, _0806C630 @ =gSprites
    lsls r1, r5, 4
    adds r1, r5
    lsls r1, 2
    adds r1, r0
    movs r0, 0
    b _0806C64A
    .align 2, 0
_0806C630: .4byte gSprites
_0806C634:
    subs r0, r4, 0x4
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    bhi _0806C64E
    ldr r0, _0806C654 @ =gSprites
    lsls r1, r5, 4
    adds r1, r5
    lsls r1, 2
    adds r1, r0
    movs r0, 0x1
_0806C64A:
    strh r0, [r1, 0x2E]
    strh r4, [r1, 0x30]
_0806C64E:
    pop {r4-r6}
    pop {r0}
    bx r0
    .align 2, 0
_0806C654: .4byte gSprites
    .syntax divided

	.code	16
.Lfe31:
	.size	 ChangeLinkDoubleBattlePartyMenuSelection,.Lfe31-ChangeLinkDoubleBattlePartyMenuSelection
	.align	2, 0
	.globl	ChangeBattleTowerPartyMenuSelection
	.type	 ChangeBattleTowerPartyMenuSelection,function
	.thumb_func
ChangeBattleTowerPartyMenuSelection:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	sub_806CA00
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L564
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, r8
	add	r1, r6, #0
	mov	r2, #0x0
	bl	UpdateMonIconFrame_806DA44
	cmp	r6, #0x5
	bhi	.L532	@cond_branch
	lsl	r0, r6, #0x1
	ldr	r1, .L564+0x4
	add	r0, r0, r1
	add	r1, r6, #0
	mov	r2, #0x3
	mov	r3, #0x0
	bl	sub_806BF24
	b	.L533
.L565:
	.align	2, 0
.L564:
	.word	gSprites
	.word	gUnknown_083769A8
.L532:
	cmp	r6, #0x6
	bne	.L534	@cond_branch
	mov	r0, #0x1
	bl	sub_806BB9C
	b	.L533
.L534:
	mov	r0, #0x1
	bl	sub_806BBEC
.L533:
	lsl	r1, r4, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r0, r1, r2
	asr	r0, r0, #0x18
	lsl	r4, r5, #0x4
	add	r7, r1, #0
	cmp	r0, #0x4
	bls	.LCB3861
	b	.L536	@long jump
.LCB3861:
	lsl	r0, r0, #0x2
	ldr	r1, .L566
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L567:
	.align	2, 0
.L566:
	.word	.L553
	.align	2, 0
	.align	2, 0
.L553:
	.word	.L551
	.word	.L538
	.word	.L537
	.word	.L543
	.word	.L548
.L537:
	ldr	r1, .L568
	lsl	r2, r5, #0x4
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	add	r4, r2, #0
	b	.L536
.L569:
	.align	2, 0
.L568:
	.word	gSprites
.L538:
	cmp	r6, #0
	bne	.L539	@cond_branch
	ldr	r2, .L570
	lsl	r3, r5, #0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x7
	strh	r1, [r0, #0x2e]
	b	.L562
.L571:
	.align	2, 0
.L570:
	.word	gSprites
.L539:
	cmp	r6, #0x6
	bne	.L546	@cond_branch
	ldr	r2, .L572
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, .L572+0x4
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	b	.L563
.L573:
	.align	2, 0
.L572:
	.word	gSprites
	.word	gPlayerPartyCount
.L543:
	ldr	r0, .L574
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r6, r0
	bne	.L544	@cond_branch
	ldr	r2, .L574+0x4
	lsl	r3, r5, #0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x6
	strh	r1, [r0, #0x2e]
	b	.L562
.L575:
	.align	2, 0
.L574:
	.word	gPlayerPartyCount
	.word	gSprites
.L544:
	cmp	r6, #0x7
	bne	.L546	@cond_branch
	ldr	r2, .L576
	lsl	r3, r5, #0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	b	.L562
.L577:
	.align	2, 0
.L576:
	.word	gSprites
.L546:
	ldr	r2, .L578
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	asr	r0, r7, #0x18
	ldrh	r4, [r1, #0x2e]
	add	r0, r0, r4
.L563:
	strh	r0, [r1, #0x2e]
.L562:
	add	r4, r3, #0
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	b	.L536
.L579:
	.align	2, 0
.L578:
	.word	gSprites
.L548:
	ldr	r0, .L580
	ldrb	r0, [r0]
	lsl	r4, r5, #0x4
	cmp	r0, #0x1
	bls	.L536	@cond_branch
	cmp	r6, #0
	bne	.L536	@cond_branch
	ldr	r0, .L580+0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r2, #0x30
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L550	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1, #0x30]
.L550:
	ldrh	r0, [r1, #0x30]
	strh	r0, [r1, #0x2e]
	b	.L536
.L581:
	.align	2, 0
.L580:
	.word	gPlayerPartyCount
	.word	gSprites
.L551:
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r5, #0x4
	cmp	r0, #0x4
	bhi	.L536	@cond_branch
	ldr	r0, .L582
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	strh	r6, [r1, #0x30]
.L536:
	ldr	r1, .L582
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, .L582+0x4
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2, #0x20]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	strh	r0, [r2, #0x22]
	ldrh	r3, [r2, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x5
	bgt	.L555	@cond_branch
	lsl	r0, r0, #0x1
	ldr	r1, .L582+0x8
	add	r0, r0, r1
	lsl	r1, r3, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x3
	mov	r3, #0x1
	bl	sub_806BF24
	b	.L556
.L583:
	.align	2, 0
.L582:
	.word	gSprites
	.word	gUnknown_083768B8
	.word	gUnknown_083769A8
.L555:
	cmp	r0, #0x6
	bne	.L557	@cond_branch
	mov	r0, #0x2
	bl	sub_806BB9C
	b	.L556
.L557:
	mov	r0, #0x2
	bl	sub_806BBEC
.L556:
	ldr	r0, .L584
	ldr	r2, .L584+0x4
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0]
	ldr	r0, .L584+0x8
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	mov	r2, #0x1
	bl	UpdateMonIconFrame_806DA44
	mov	r3, #0x2e
	ldrsh	r0, [r4, r3]
	cmp	r6, r0
	beq	.L559	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L559:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L585:
	.align	2, 0
.L584:
	.word	gSharedMem+0x1b000
	.word	0x261
	.word	gSprites
.Lfe32:
	.size	 ChangeBattleTowerPartyMenuSelection,.Lfe32-ChangeBattleTowerPartyMenuSelection
	.align	2, 0
	.globl	SelectBattleTowerOKButton
	.type	 SelectBattleTowerOKButton,function
	.thumb_func
SelectBattleTowerOKButton:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	bl	sub_806CA00
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L590
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	beq	.L587	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	UpdateMonIconFrame_806DA44
	cmp	r4, #0x5
	bhi	.L588	@cond_branch
	lsl	r0, r4, #0x1
	ldr	r1, .L590+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	mov	r2, #0x3
	mov	r3, #0x0
	bl	sub_806BF24
	b	.L589
.L591:
	.align	2, 0
.L590:
	.word	gSprites
	.word	gUnknown_083769A8
.L588:
	mov	r0, #0x1
	bl	sub_806BBEC
.L589:
	ldr	r1, .L592
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	mov	r1, #0x6
	strh	r1, [r0, #0x2e]
	ldr	r2, .L592+0x4
	ldrb	r1, [r2, #0x18]
	strh	r1, [r0, #0x20]
	ldrb	r1, [r2, #0x19]
	strh	r1, [r0, #0x22]
	mov	r0, #0x2
	bl	sub_806BB9C
	ldr	r0, .L592+0x8
	ldr	r1, .L592+0xc
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	mov	r0, #0x5
	bl	PlaySE
.L587:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L593:
	.align	2, 0
.L592:
	.word	gSprites
	.word	gUnknown_083768B8
	.word	gSharedMem+0x1b000
	.word	0x261
.Lfe33:
	.size	 SelectBattleTowerOKButton,.Lfe33-SelectBattleTowerOKButton
	.align	2, 0
	.globl	sub_806C92C
	.type	 sub_806C92C,function
	.thumb_func
sub_806C92C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L606
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrh	r0, [r1, #0x30]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L595	@cond_branch
	cmp	r6, #0
	bne	.L596	@cond_branch
	cmp	r4, #0
	bne	.L600	@cond_branch
	mov	r4, #0x1
	b	.L600
.L607:
	.align	2, 0
.L606:
	.word	gSprites
.L596:
	cmp	r4, #0
	beq	.L600	@cond_branch
	b	.L605
.L595:
	cmp	r6, #0x1
	bhi	.L601	@cond_branch
	cmp	r4, #0x1
	bhi	.L600	@cond_branch
	mov	r4, #0x2
	b	.L600
.L601:
	cmp	r4, #0x1
	bls	.L600	@cond_branch
.L605:
	mov	r4, #0x0
.L600:
	ldr	r1, .L608
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r4, [r0, #0x30]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L609:
	.align	2, 0
.L608:
	.word	gSprites
.Lfe34:
	.size	 sub_806C92C,.Lfe34-sub_806C92C
	.align	2, 0
	.globl	sub_806C994
	.type	 sub_806C994,function
	.thumb_func
sub_806C994:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_806CA00
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L611
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	strh	r4, [r1, #0x2e]
	bl	sub_806C92C
	pop	{r4}
	pop	{r0}
	bx	r0
.L612:
	.align	2, 0
.L611:
	.word	gSprites
.Lfe35:
	.size	 sub_806C994,.Lfe35-sub_806C994
	.align	2, 0
	.globl	sub_806C9C4
	.type	 sub_806C9C4,function
	.thumb_func
sub_806C9C4:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_806CA00
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L614
	lsl	r2, r4, #0x4
	add	r2, r2, r4
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r1, #0x20]
	strh	r0, [r2, #0x20]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r2, #0x22]
	ldrh	r0, [r1, #0x2e]
	strh	r0, [r2, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.L615:
	.align	2, 0
.L614:
	.word	gSprites
.Lfe36:
	.size	 sub_806C9C4,.Lfe36-sub_806C9C4
	.align	2, 0
	.type	 sub_806CA00,function
	.thumb_func
sub_806CA00:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L617
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1, #0xe]
	lsr	r0, r0, #0x8
	bx	lr
.L618:
	.align	2, 0
.L617:
	.word	gTasks
.Lfe37:
	.size	 sub_806CA00,.Lfe37-sub_806CA00
	.align	2, 0
	.type	 sub_806CA18,function
	.thumb_func
sub_806CA18:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	ldr	r3, .L620
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	ldrb	r0, [r2, #0xe]
	lsr	r1, r1, #0x10
	orr	r0, r0, r1
	strh	r0, [r2, #0xe]
	bx	lr
.L621:
	.align	2, 0
.L620:
	.word	gTasks
.Lfe38:
	.size	 sub_806CA18,.Lfe38-sub_806CA18
	.align	2, 0
	.globl	sub_806CA38
	.type	 sub_806CA38,function
	.thumb_func
sub_806CA38:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_806CA00
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L623
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L624:
	.align	2, 0
.L623:
	.word	gSprites
.Lfe39:
	.size	 sub_806CA38,.Lfe39-sub_806CA38
	.align	2, 0
	.globl	SetupDefaultPartyMenuSwitchPokemon
	.type	 SetupDefaultPartyMenuSwitchPokemon,function
	.thumb_func
SetupDefaultPartyMenuSwitchPokemon:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L626
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L626+0x4
	str	r1, [r0]
	ldr	r5, .L626+0x8
	strb	r4, [r5]
	ldr	r0, .L626+0xc
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L626+0x10
	bl	CreateInvisibleSpriteWithCallback
	strb	r0, [r5, #0x1]
	ldrb	r1, [r5, #0x1]
	add	r0, r4, #0
	bl	sub_806C9C4
	add	r0, r4, #0
	bl	sub_806CA00
	strb	r0, [r5, #0x2]
	ldr	r1, .L626+0x14
	add	r0, r5, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	PrintPartyMenuPromptText
	ldr	r2, .L626+0x18
	ldrb	r0, [r5, #0x1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	lsl	r0, r0, #0x1
	ldr	r2, .L626+0x1c
	add	r0, r0, r2
	ldrh	r1, [r1, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x6
	mov	r3, #0x0
	bl	sub_806BF24
	ldr	r0, .L626+0x20
	add	r5, r5, r0
	mov	r0, #0x2
	strb	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L627:
	.align	2, 0
.L626:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1000
	.word	HandlePartyMenuSwitchPokemonInput
	.word	SpriteCallbackDummy
	.word	0x1a272
	.word	gSprites
	.word	gUnknown_083769A8
	.word	0x1a261
.Lfe40:
	.size	 SetupDefaultPartyMenuSwitchPokemon,.Lfe40-SetupDefaultPartyMenuSwitchPokemon
	.align	2, 0
	.globl	ChangePartyMenuSwitchPokemonSelection
	.type	 ChangePartyMenuSwitchPokemonSelection,function
	.thumb_func
ChangePartyMenuSwitchPokemonSelection:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L631
	ldrb	r3, [r4, #0x1]
	lsl	r2, r3, #0x4
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	ldr	r3, .L631+0x4
	add	r5, r2, r3
	ldrb	r2, [r4, #0x2]
	lsl	r4, r2, #0x4
	add	r4, r4, r2
	lsl	r4, r4, #0x2
	add	r4, r4, r3
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	bl	ChangePartyMenuSelection
	ldrh	r2, [r5, #0x2e]
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	mov	r3, #0x2e
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	beq	.L629	@cond_branch
	add	r0, r1, #0
	lsl	r0, r0, #0x1
	ldr	r1, .L631+0x8
	add	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x6
	mov	r3, #0x1
	bl	sub_806BF24
	b	.L630
.L632:
	.align	2, 0
.L631:
	.word	gSharedMem+0x1000
	.word	gSprites
	.word	gUnknown_083769A8
.L629:
	mov	r3, #0x2e
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x1
	ldr	r1, .L633
	add	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x6
	mov	r3, #0x0
	bl	sub_806BF24
.L630:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L634:
	.align	2, 0
.L633:
	.word	gUnknown_083769A8
.Lfe41:
	.size	 ChangePartyMenuSwitchPokemonSelection,.Lfe41-ChangePartyMenuSwitchPokemonSelection
	.align	2, 0
	.globl	HandlePartyMenuSwitchPokemonInput
	.type	 HandlePartyMenuSwitchPokemonInput,function
	.thumb_func
HandlePartyMenuSwitchPokemonInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L647
	ldrh	r0, [r0, #0x30]
	cmp	r0, #0x20
	beq	.L639	@cond_branch
	cmp	r0, #0x20
	bgt	.L643	@cond_branch
	cmp	r0, #0x10
	beq	.L640	@cond_branch
	b	.L636
.L648:
	.align	2, 0
.L647:
	.word	gMain
.L643:
	cmp	r0, #0x40
	beq	.L637	@cond_branch
	cmp	r0, #0x80
	beq	.L638	@cond_branch
	b	.L636
.L637:
	ldr	r0, .L649
	ldrb	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	bl	ChangePartyMenuSwitchPokemonSelection
	b	.L636
.L650:
	.align	2, 0
.L649:
	.word	gSharedMem+0x1000
.L638:
	ldr	r0, .L651
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	ChangePartyMenuSwitchPokemonSelection
	b	.L636
.L652:
	.align	2, 0
.L651:
	.word	gSharedMem+0x1000
.L639:
	ldr	r0, .L653
	ldrb	r0, [r0]
	mov	r1, #0x2
	neg	r1, r1
	bl	ChangePartyMenuSwitchPokemonSelection
	b	.L636
.L654:
	.align	2, 0
.L653:
	.word	gSharedMem+0x1000
.L640:
	ldr	r0, .L655
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	ChangePartyMenuSwitchPokemonSelection
.L636:
	ldr	r0, .L655+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L644	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L655+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L655
	ldr	r1, [r1, #0xc]
	str	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	b	.L645
.L656:
	.align	2, 0
.L655:
	.word	gSharedMem+0x1000
	.word	gMain
	.word	gTasks
.L644:
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L645	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	sub_806CD44
.L645:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 HandlePartyMenuSwitchPokemonInput,.Lfe42-HandlePartyMenuSwitchPokemonInput
	.align	2, 0
	.globl	sub_806CC2C
	.type	 sub_806CC2C,function
	.thumb_func
sub_806CC2C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L658
	ldrb	r1, [r5, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L658+0x4
	add	r0, r0, r1
	bl	DestroySprite
	mov	r0, #0x0
	mov	r1, #0x0
	bl	PrintPartyMenuPromptText
	ldr	r0, .L658+0x8
	add	r1, r5, r0
	mov	r0, #0x2
	strb	r0, [r1]
	ldrb	r0, [r5]
	bl	SwitchTaskToFollowupFunc
	add	r0, r4, #0
	bl	DestroyTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gSharedMem+0x1000
	.word	gSprites
	.word	0x1a261
.Lfe43:
	.size	 sub_806CC2C,.Lfe43-sub_806CC2C
	.align	2, 0
	.globl	sub_806CC74
	.type	 sub_806CC74,function
	.thumb_func
sub_806CC74:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L661
	mov	r8, r0
	ldr	r6, .L661+0x4
	ldrb	r0, [r6, #0x2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	lsl	r0, r0, #0x1
	ldr	r5, .L661+0x8
	add	r0, r0, r5
	ldrh	r1, [r1, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x3
	mov	r3, #0x1
	bl	sub_806BF24
	ldrb	r0, [r6, #0x1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r1, [r1, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x3
	mov	r3, #0x0
	bl	sub_806BF24
	add	r0, r4, #0
	bl	sub_806CC2C
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L662:
	.align	2, 0
.L661:
	.word	gSprites
	.word	gSharedMem+0x1000
	.word	gUnknown_083769A8
.Lfe44:
	.size	 sub_806CC74,.Lfe44-sub_806CC74
	.align	2, 0
	.globl	sub_806CCE4
	.type	 sub_806CCE4,function
	.thumb_func
sub_806CCE4:
	push	{r4, r5, lr}
	ldr	r3, .L666
	ldr	r2, .L666+0x4
	ldrb	r1, [r2, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r1, [r2, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r4, #0x5
	bhi	.L664	@cond_branch
	lsl	r0, r4, #0x1
	ldr	r1, .L666+0x8
	add	r0, r0, r1
	add	r1, r4, #0
	mov	r2, #0x3
	mov	r3, #0x0
	bl	sub_806BF24
.L664:
	cmp	r5, #0x5
	bhi	.L665	@cond_branch
	lsl	r0, r5, #0x1
	ldr	r1, .L666+0x8
	add	r0, r0, r1
	add	r1, r5, #0
	mov	r2, #0x3
	mov	r3, #0x1
	bl	sub_806BF24
.L665:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L667:
	.align	2, 0
.L666:
	.word	gSprites
	.word	gSharedMem+0x1000
	.word	gUnknown_083769A8
.Lfe45:
	.size	 sub_806CCE4,.Lfe45-sub_806CCE4
	.align	2, 0
	.globl	sub_806CD44
	.type	 sub_806CD44,function
	.thumb_func
sub_806CD44:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_806CCE4
	add	r0, r4, #0
	bl	sub_806CC2C
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 sub_806CD44,.Lfe46-sub_806CD44
	.align	2, 0
	.globl	sub_806CD5C
	.type	 sub_806CD5C,function
	.thumb_func
sub_806CD5C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L678
	ldr	r6, .L678+0x4
	ldrb	r1, [r6, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r9, r5
	ldrb	r1, [r6, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r7, r4, #0
	cmp	r5, r4
	beq	.L671	@cond_branch
	cmp	r5, #0x7
	beq	.L671	@cond_branch
	cmp	r4, #0x7
	bne	.L670	@cond_branch
.L671:
	mov	r0, r8
	bl	sub_806CD44
	b	.L672
.L679:
	.align	2, 0
.L678:
	.word	gSprites
	.word	gSharedMem+0x1000
.L670:
	add	r0, r5, #0
	bl	sub_806D5B8
	add	r0, r4, #0
	bl	sub_806D5B8
	cmp	r5, r4
	bls	.L673	@cond_branch
	strb	r4, [r6, #0x5]
	strb	r5, [r6, #0x6]
	b	.L674
.L673:
	mov	r0, r9
	strb	r0, [r6, #0x5]
	strb	r7, [r6, #0x6]
.L674:
	ldr	r4, .L680
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x5]
	bl	GetMonIconSpriteId
	strb	r0, [r4, #0x3]
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x6]
	bl	GetMonIconSpriteId
	strb	r0, [r4, #0x4]
	ldrb	r3, [r4, #0x5]
	cmp	r3, #0
	bne	.L675	@cond_branch
	ldr	r2, .L680+0x4
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L680+0x8
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L680+0xc
	strh	r1, [r0, #0x32]
	strh	r3, [r4, #0x8]
	mov	r0, #0xb
	strh	r0, [r4, #0xa]
	ldr	r1, .L680+0x10
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L680+0x14
	b	.L677
.L681:
	.align	2, 0
.L680:
	.word	gSharedMem+0x1000
	.word	gSprites
	.word	0xfff8
	.word	0xff58
	.word	gTasks
	.word	sub_806D014
.L675:
	ldr	r2, .L682
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x8
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0xa8
	strh	r1, [r0, #0x32]
	mov	r0, #0xb
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	ldr	r1, .L682+0x4
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L682+0x8
.L677:
	str	r1, [r0]
	ldr	r0, .L682+0xc
	add	r1, r4, r0
	mov	r0, #0x1
	strb	r0, [r1]
	add	r6, r2, #0
	ldr	r4, .L682+0x10
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r6, #0
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r2, .L682+0x14
	str	r2, [r0]
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x8
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0xa8
	strh	r1, [r0, #0x32]
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	str	r2, [r0]
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	add	r0, r0, r6
	ldr	r1, [r1]
	bl	_call_via_r1
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r0, r5
	add	r0, r0, r6
	ldr	r1, [r5]
	bl	_call_via_r1
.L672:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	gSprites
	.word	gTasks
	.word	sub_806D118
	.word	0x1a261
	.word	gSharedMem+0x1000
	.word	SpriteCB_sub_806D37C
.Lfe47:
	.size	 sub_806CD5C,.Lfe47-sub_806CD5C
	.align	2, 0
	.globl	SwapValues_s16
	.type	 SwapValues_s16,function
	.thumb_func
SwapValues_s16:
	ldrh	r3, [r0]
	ldrh	r2, [r1]
	strh	r2, [r0]
	strh	r3, [r1]
	bx	lr
.Lfe48:
	.size	 SwapValues_s16,.Lfe48-SwapValues_s16
	.align	2, 0
	.globl	sub_806CF04
	.type	 sub_806CF04,function
	.thumb_func
sub_806CF04:
	.syntax unified
    push {r4,r5,lr}
    ldr r4, _0806CF94 @ =gSharedMem + 0x1000
    ldrb r1, [r4, 0x3]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    ldr r5, _0806CF98 @ =gSprites + 0x20
    adds r0, r5
    ldrb r2, [r4, 0x4]
    lsls r1, r2, 4
    adds r1, r2
    lsls r1, 2
    adds r1, r5
    bl SwapValues_s16
    ldrb r1, [r4, 0x3]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r3, r5, 0x2
    adds r0, r3
    ldrb r2, [r4, 0x4]
    lsls r1, r2, 4
    adds r1, r2
    lsls r1, 2
    adds r1, r3
    bl SwapValues_s16
    ldrb r1, [r4, 0x3]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r3, r5, 0x4
    adds r0, r3
    ldrb r2, [r4, 0x4]
    lsls r1, r2, 4
    adds r1, r2
    lsls r1, 2
    adds r1, r3
    bl SwapValues_s16
    ldrb r1, [r4, 0x3]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r3, r5, 0
    adds r3, 0xE
    adds r0, r3
    ldrb r2, [r4, 0x4]
    lsls r1, r2, 4
    adds r1, r2
    lsls r1, 2
    adds r1, r3
    bl SwapValues_s16
    ldrb r1, [r4, 0x3]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    subs r5, 0x4
    adds r0, r5
    ldr r2, _0806CF9C @ =SpriteCB_sub_806D37C
    str r2, [r0]
    ldrb r1, [r4, 0x4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r5
    str r2, [r0]
    pop {r4,r5}
    pop {r0}
    bx r0
    .align 2, 0
_0806CF94: .4byte gSharedMem + 0x1000
_0806CF98: .4byte gSprites + 0x20
_0806CF9C: .4byte SpriteCB_sub_806D37C
    .syntax divided

	.code	16
.Lfe49:
	.size	 sub_806CF04,.Lfe49-sub_806CF04
	.align	2, 0
	.globl	sub_806CFA0
	.type	 sub_806CFA0,function
	.thumb_func
sub_806CFA0:
	push	{r4, r5, r6, lr}
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L690
	ldrb	r1, [r5, #0x6]
	sub	r1, r1, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	mov	r1, #0x3
	bl	sub_806BA34
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	add	r1, r6, #0
	bl	sub_806BB3C
	cmp	r4, #0
	bne	.L687	@cond_branch
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	b	.L689
.L691:
	.align	2, 0
.L690:
	.word	gSharedMem+0x1000
.L687:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x1
.L689:
	strh	r0, [r5, #0xa]
	ldr	r4, .L692
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	mov	r2, #0xa
	bl	sub_806B9A4
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0xa
	bl	sub_806BA94
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L693:
	.align	2, 0
.L692:
	.word	gSharedMem+0x1000
.Lfe50:
	.size	 sub_806CFA0,.Lfe50-sub_806CFA0
	.align	2, 0
	.type	 sub_806D014,function
	.thumb_func
sub_806D014:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_806CFA0
	ldr	r2, .L696
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	mov	r0, #0xd
	neg	r0, r0
	cmp	r1, r0
	bge	.L695	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x20
	ble	.L695	@cond_branch
	bl	sub_806CF04
	ldr	r0, .L696+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L696+0x8
	str	r0, [r1]
.L695:
	pop	{r4}
	pop	{r0}
	bx	r0
.L697:
	.align	2, 0
.L696:
	.word	gSharedMem+0x1000
	.word	gTasks
	.word	sub_806D05C
.Lfe51:
	.size	 sub_806D014,.Lfe51-sub_806D014
	.align	2, 0
	.type	 sub_806D05C,function
	.thumb_func
sub_806D05C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806CFA0
	ldr	r0, .L700
	ldr	r1, [r0, #0x8]
	mov	r0, #0xb0
	lsl	r0, r0, #0xc
	cmp	r1, r0
	bne	.L699	@cond_branch
	ldr	r0, .L700+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L700+0x8
	str	r0, [r1]
.L699:
	pop	{r4}
	pop	{r0}
	bx	r0
.L701:
	.align	2, 0
.L700:
	.word	gSharedMem+0x1000
	.word	gTasks
	.word	sub_806D198
.Lfe52:
	.size	 sub_806D05C,.Lfe52-sub_806D05C
	.align	2, 0
	.globl	sub_806D098
	.type	 sub_806D098,function
	.thumb_func
sub_806D098:
	push	{r4, r5, r6, r7, lr}
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L706
	ldrb	r1, [r5, #0x5]
	sub	r1, r1, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r1, [r5, #0x6]
	sub	r1, r1, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	add	r1, r7, #0
	bl	sub_806BB3C
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	add	r1, r6, #0
	bl	sub_806BB3C
	cmp	r4, #0
	bne	.L703	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	b	.L705
.L707:
	.align	2, 0
.L706:
	.word	gSharedMem+0x1000
.L703:
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x1
.L705:
	strh	r0, [r5, #0xa]
	ldr	r4, .L708
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	add	r1, r7, #0
	mov	r2, #0x0
	mov	r3, #0xa
	bl	sub_806BA94
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0xa
	bl	sub_806BA94
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L709:
	.align	2, 0
.L708:
	.word	gSharedMem+0x1000
.Lfe53:
	.size	 sub_806D098,.Lfe53-sub_806D098
	.align	2, 0
	.type	 sub_806D118,function
	.thumb_func
sub_806D118:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_806D098
	ldr	r1, .L712
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x20
	ble	.L711	@cond_branch
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x20
	ble	.L711	@cond_branch
	bl	sub_806CF04
	ldr	r0, .L712+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L712+0x8
	str	r0, [r1]
.L711:
	pop	{r4}
	pop	{r0}
	bx	r0
.L713:
	.align	2, 0
.L712:
	.word	gSharedMem+0x1000
	.word	gTasks
	.word	sub_806D15C
.Lfe54:
	.size	 sub_806D118,.Lfe54-sub_806D118
	.align	2, 0
	.type	 sub_806D15C,function
	.thumb_func
sub_806D15C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806D098
	ldr	r0, .L716
	ldr	r1, [r0, #0x8]
	ldr	r0, .L716+0x4
	cmp	r1, r0
	bne	.L715	@cond_branch
	ldr	r0, .L716+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L716+0xc
	str	r0, [r1]
.L715:
	pop	{r4}
	pop	{r0}
	bx	r0
.L717:
	.align	2, 0
.L716:
	.word	gSharedMem+0x1000
	.word	0xb000b
	.word	gTasks
	.word	sub_806D198
.Lfe55:
	.size	 sub_806D15C,.Lfe55-sub_806D15C
	.align	2, 0
	.type	 sub_806D198,function
	.thumb_func
sub_806D198:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r4, .L719
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x5]
	ldrb	r2, [r4, #0x4]
	bl	SetMonIconSpriteId
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x6]
	ldrb	r2, [r4, #0x3]
	bl	SetMonIconSpriteId
	bl	IsDoubleBattle
	ldr	r5, .L719+0x4
	ldrb	r1, [r4, #0x3]
	lsl	r3, r1, #0x4
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldr	r6, .L719+0x8
	ldrb	r2, [r4, #0x6]
	lsl	r2, r2, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r2, r1
	add	r2, r2, r6
	ldrb	r0, [r2]
	mov	r1, #0x0
	mov	r8, r1
	strh	r0, [r3, #0x20]
	bl	IsDoubleBattle
	ldrb	r1, [r4, #0x3]
	lsl	r3, r1, #0x4
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrb	r2, [r4, #0x6]
	lsl	r2, r2, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r2, r1
	add	r2, r2, r6
	ldrb	r0, [r2, #0x1]
	strh	r0, [r3, #0x22]
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x24]
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x26]
	ldrb	r1, [r4, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0x1c
	add	r1, r1, r5
	mov	r9, r1
	add	r0, r0, r9
	ldr	r7, .L719+0xc
	str	r7, [r0]
	bl	IsDoubleBattle
	ldrb	r1, [r4, #0x4]
	lsl	r3, r1, #0x4
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrb	r2, [r4, #0x5]
	lsl	r2, r2, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r2, r1
	add	r2, r2, r6
	ldrb	r0, [r2]
	strh	r0, [r3, #0x20]
	bl	IsDoubleBattle
	ldrb	r1, [r4, #0x4]
	lsl	r3, r1, #0x4
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r5
	ldrb	r2, [r4, #0x5]
	lsl	r2, r2, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r2, r1
	add	r2, r2, r6
	ldrb	r0, [r2, #0x1]
	strh	r0, [r3, #0x22]
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x24]
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x26]
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	str	r7, [r0]
	ldrb	r0, [r4]
	ldrb	r2, [r4, #0x2]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	GetMonIconSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldr	r0, .L719+0x10
	str	r0, [r1]
	ldrb	r0, [r4, #0x5]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L719+0x14
	add	r0, r0, r5
	ldrb	r1, [r4, #0x6]
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	SwapPokemon
	ldrb	r0, [r4, #0x5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	PartyMenuPrintMonLevelOrStatus
	ldrb	r0, [r4, #0x5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	TryPrintPartyMenuMonNickname
	ldrb	r0, [r4, #0x5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	PartyMenuTryPrintHP
	ldrb	r0, [r4, #0x5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	nullsub_12
	ldrb	r0, [r4, #0x6]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	PartyMenuPrintMonLevelOrStatus
	ldrb	r0, [r4, #0x6]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	TryPrintPartyMenuMonNickname
	ldrb	r0, [r4, #0x6]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	PartyMenuTryPrintHP
	ldrb	r0, [r4, #0x6]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	bl	nullsub_12
	bl	PartyMenuDrawHPBars
	mov	r0, sl
	bl	sub_806CC74
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L720:
	.align	2, 0
.L719:
	.word	gSharedMem+0x1000
	.word	gSprites
	.word	gUnknown_08376678
	.word	UpdateMonIconFrame_806DA38
	.word	UpdateMonIconFrame_806DA0C
	.word	gPlayerParty
.Lfe56:
	.size	 sub_806D198,.Lfe56-sub_806D198
	.align	2, 0
	.type	 SpriteCB_sub_806D37C,function
	.thumb_func
SpriteCB_sub_806D37C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateMonIconFrame
	ldrh	r2, [r4, #0x24]
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	mov	r3, #0x32
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bne	.L722	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	mov	r1, #0x0
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x32]
	ldr	r0, .L724
	str	r0, [r4, #0x1c]
	b	.L723
.L725:
	.align	2, 0
.L724:
	.word	UpdateMonIconFrame_806DA38
.L722:
	ldrh	r0, [r4, #0x2e]
	add	r0, r2, r0
	strh	r0, [r4, #0x24]
.L723:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 SpriteCB_sub_806D37C,.Lfe57-SpriteCB_sub_806D37C
	.align	2, 0
	.globl	sub_806D3B4
	.type	 sub_806D3B4,function
	.thumb_func
sub_806D3B4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r8, r2
	ldr	r6, .L731
	ldr	r1, .L731+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	ldrb	r1, [r6, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r6, #0x3]
	bl	sub_806BA34
	ldrh	r0, [r5, #0x8]
	ldrb	r1, [r6, #0x8]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r6, #0x9]
	bl	sub_806BB3C
	ldrh	r0, [r5, #0x8]
	ldrb	r1, [r6, #0xa]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r6, #0xb]
	bl	sub_806BB3C
	ldrh	r1, [r5, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x8]
	ldrb	r0, [r6, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r6, #0x3]
	mov	r2, #0x4
	bl	sub_806B9A4
	cmp	r4, #0
	beq	.L727	@cond_branch
	ldrh	r0, [r5, #0x8]
	ldrb	r1, [r6, #0x8]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r6, #0x9]
	mov	r2, #0x0
	mov	r3, #0x4
	bl	sub_806BA94
	b	.L728
.L732:
	.align	2, 0
.L731:
	.word	gUnknown_083769C0
	.word	gTasks
.L727:
	ldrh	r0, [r5, #0x8]
	ldrb	r1, [r6, #0x8]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r6, #0x9]
	mov	r2, #0x1
	mov	r3, #0x4
	bl	sub_806BA94
.L728:
	mov	r0, r8
	cmp	r0, #0
	beq	.L729	@cond_branch
	ldr	r1, .L733
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	ldrb	r1, [r6, #0xa]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r6, #0xb]
	mov	r2, #0x0
	mov	r3, #0x4
	bl	sub_806BA94
	b	.L730
.L734:
	.align	2, 0
.L733:
	.word	gTasks
.L729:
	ldr	r1, .L735
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	ldrb	r1, [r6, #0xa]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r6, #0xb]
	mov	r2, #0x1
	mov	r3, #0x4
	bl	sub_806BA94
.L730:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L736:
	.align	2, 0
.L735:
	.word	gTasks
.Lfe58:
	.size	 sub_806D3B4,.Lfe58-sub_806D3B4
	.align	2, 0
	.globl	sub_806D4AC
	.type	 sub_806D4AC,function
	.thumb_func
sub_806D4AC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r1, #0
	beq	.L738	@cond_branch
	add	r1, r2, #0x3
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	GetMonIconSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L739
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r4, r1, r2
	ldr	r0, .L739+0x4
	strh	r0, [r4, #0x2e]
	ldr	r3, .L739+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	mov	r3, #0x8
	ldrsh	r0, [r0, r3]
	lsl	r0, r0, #0x3
	neg	r0, r0
	strh	r0, [r4, #0x32]
	add	r2, r2, #0x1c
	add	r1, r1, r2
	ldr	r0, .L739+0xc
	str	r0, [r1]
.L738:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L740:
	.align	2, 0
.L739:
	.word	gSprites
	.word	0xfff8
	.word	gTasks
	.word	SpriteCB_sub_806D37C
.Lfe59:
	.size	 sub_806D4AC,.Lfe59-sub_806D4AC
	.align	2, 0
	.globl	sub_806D50C
	.type	 sub_806D50C,function
	.thumb_func
sub_806D50C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	GetMonIconSpriteId
	ldr	r2, .L742
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0xf0
	strh	r0, [r1, #0x20]
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	gSprites
.Lfe60:
	.size	 sub_806D50C,.Lfe60-sub_806D50C
	.align	2, 0
	.globl	PrintPartyMenuPromptText
	.type	 PrintPartyMenuPromptText,function
	.thumb_func
PrintPartyMenuPromptText:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	cmp	r4, #0xff
	beq	.L745	@cond_branch
	cmp	r0, #0x5
	bhi	.L746	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L756
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L757:
	.align	2, 0
.L756:
	.word	.L753
	.align	2, 0
	.align	2, 0
.L753:
	.word	.L747
	.word	.L748
	.word	.L749
	.word	.L750
	.word	.L751
	.word	.L752
.L747:
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x17
	b	.L755
.L748:
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x13
	b	.L755
.L749:
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x16
	b	.L755
.L750:
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x12
	b	.L755
.L751:
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x14
.L755:
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	b	.L746
.L752:
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x11
	mov	r3, #0x13
	bl	MenuDrawTextWindow
.L746:
	mov	r0, #0x1
	bl	SetCustomFont
	ldr	r0, .L758
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, #0x1
	mov	r2, #0x11
	bl	MenuPrint
	mov	r0, #0x0
	bl	SetCustomFont
.L745:
	pop	{r4}
	pop	{r0}
	bx	r0
.L759:
	.align	2, 0
.L758:
	.word	PartyMenuPromptTexts
.Lfe61:
	.size	 PrintPartyMenuPromptText,.Lfe61-PrintPartyMenuPromptText
	.align	2, 0
	.globl	sub_806D5A4
	.type	 sub_806D5A4,function
	.thumb_func
sub_806D5A4:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 sub_806D5A4,.Lfe62-sub_806D5A4
	.align	2, 0
	.type	 sub_806D5B8,function
	.thumb_func
sub_806D5B8:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #0xfffffff8
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L762
	bl	IsDoubleBattle
	lsl	r4, r5, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r4, r1
	add	r1, r1, r6
	ldrb	r1, [r1]
	mov	sl, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r4, r1
	add	r1, r1, r6
	ldrb	r1, [r1, #0x1]
	mov	r9, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r4, r1
	add	r1, r1, r6
	ldrb	r1, [r1, #0x2]
	mov	r8, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r4, r1
	add	r4, r4, r6
	ldrb	r1, [r4, #0x3]
	ldr	r0, .L762+0x4
	str	r1, [sp]
	mov	r1, sl
	mov	r2, r9
	mov	r3, r8
	bl	ZeroFillWindowRect
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	lsl	r5, r5, #0xa
	ldr	r0, .L762+0x8
	add	r5, r5, r0
	ldr	r2, .L762+0xc
	add	r0, sp, #0x4
	add	r1, r5, #0
	bl	CpuFastSet
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L763:
	.align	2, 0
.L762:
	.word	gUnknown_08376948
	.word	gUnknown_03004210
	.word	0x6014000
	.word	0x1000100
.Lfe63:
	.size	 sub_806D5B8,.Lfe63-sub_806D5B8
	.align	2, 0
	.globl	sub_806D668
	.type	 sub_806D668,function
	.thumb_func
sub_806D668:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #0xfffffff8
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L765
	bl	IsDoubleBattle
	lsl	r4, r5, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r4, r1
	add	r1, r1, r6
	ldrb	r1, [r1]
	mov	sl, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r4, r1
	add	r1, r1, r6
	ldrb	r1, [r1, #0x1]
	mov	r9, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r4, r1
	add	r1, r1, r6
	ldrb	r1, [r1, #0x2]
	mov	r8, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r4, r1
	add	r4, r4, r6
	ldrb	r1, [r4, #0x3]
	ldr	r0, .L765+0x4
	str	r1, [sp]
	mov	r1, sl
	mov	r2, r9
	mov	r3, r8
	bl	ZeroFillWindowRect
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	lsl	r5, r5, #0xa
	ldr	r0, .L765+0x8
	add	r5, r5, r0
	ldr	r2, .L765+0xc
	add	r0, sp, #0x4
	add	r1, r5, #0
	bl	CpuFastSet
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L766:
	.align	2, 0
.L765:
	.word	gUnknown_08376978
	.word	gUnknown_03004210
	.word	0x6014300
	.word	0x1000040
.Lfe64:
	.size	 sub_806D668,.Lfe64-sub_806D668
	.align	2, 0
	.type	 LoadPartyMenuGraphics,function
	.thumb_func
LoadPartyMenuGraphics:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L783
	mov	r0, sp
	strh	r1, [r0]
	mov	r5, #0x0
	cmp	r4, #0x1
	bhi	.L768	@cond_branch
	ldr	r0, .L783+0x4
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	bl	LZDecompressVram
.L768:
	cmp	r4, #0x2
	beq	.L770	@cond_branch
	cmp	r4, #0
	bne	.L769	@cond_branch
.L770:
	ldr	r0, .L783+0x8
	ldr	r1, .L783+0xc
	bl	LZDecompressVram
.L769:
	cmp	r4, #0x3
	beq	.L772	@cond_branch
	cmp	r4, #0
	bne	.L771	@cond_branch
.L772:
	ldr	r0, .L783+0x10
	mov	r2, #0xb0
	lsl	r2, r2, #0x1
	mov	r1, #0x0
	bl	LoadCompressedPalette
.L771:
	cmp	r4, #0x4
	beq	.L774	@cond_branch
	cmp	r4, #0
	bne	.L773	@cond_branch
.L774:
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r0, .L783+0x14
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
.L773:
	cmp	r4, #0x5
	beq	.L776	@cond_branch
	cmp	r4, #0
	bne	.L775	@cond_branch
.L776:
	ldr	r0, .L783+0x18
	ldr	r1, .L783+0x1c
	bl	LZDecompressVram
.L775:
	cmp	r4, #0x6
	beq	.L778	@cond_branch
	cmp	r4, #0
	bne	.L777	@cond_branch
.L778:
	ldr	r0, .L783+0x20
	ldr	r1, .L783+0x24
	bl	LZDecompressVram
.L777:
	cmp	r4, #0x7
	beq	.L780	@cond_branch
	cmp	r4, #0
	bne	.L779	@cond_branch
.L780:
	ldr	r0, .L783+0x28
	ldr	r1, .L783+0x2c
	bl	LZDecompressVram
.L779:
	cmp	r4, #0x8
	beq	.L782	@cond_branch
	cmp	r4, #0
	bne	.L781	@cond_branch
.L782:
	ldr	r0, .L783+0x30
	mov	r1, #0xb0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	mov	r5, #0x1
.L781:
	add	r0, r5, #0
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L784:
	.align	2, 0
.L783:
	.word	0x7fff
	.word	gPartyMenuMisc_Gfx
	.word	gPartyMenuMisc_Tilemap
	.word	0x6003800
	.word	gPartyMenuMisc_Pal
	.word	gFontDefaultPalette
	.word	gPartyMenuHpBar_Gfx
	.word	0x6006000
	.word	gPartyMenuOrderText_Gfx
	.word	0x6006180
	.word	gStatusGfx_Icons
	.word	0x6007180
	.word	gStatusPal_Icons
.Lfe65:
	.size	 LoadPartyMenuGraphics,.Lfe65-LoadPartyMenuGraphics
	.align	2, 0
	.globl	SetMonIconAnimByHP
	.type	 SetMonIconAnimByHP,function
	.thumb_func
SetMonIconAnimByHP:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r5, r1, #0x10
	asr	r1, r1, #0x10
	lsr	r4, r2, #0x10
	asr	r2, r2, #0x10
	add	r0, r1, #0
	add	r1, r2, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	cmp	r5, r4
	beq	.L786	@cond_branch
	mov	r2, #0x1
	cmp	r0, #0x3
	beq	.L786	@cond_branch
	mov	r2, #0x2
	cmp	r0, #0x2
	beq	.L786	@cond_branch
	mov	r2, #0x4
	cmp	r0, #0x1
	bne	.L786	@cond_branch
	mov	r2, #0x3
.L786:
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L793
	add	r0, r0, r1
	add	r1, r2, #0
	bl	sub_809D824
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L794:
	.align	2, 0
.L793:
	.word	gSprites
.Lfe66:
	.size	 SetMonIconAnimByHP,.Lfe66-SetMonIconAnimByHP
	.align	2, 0
	.globl	SetMonIconAnim
	.type	 SetMonIconAnim,function
	.thumb_func
SetMonIconAnim:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r6, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	SetMonIconAnimByHP
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 SetMonIconAnim,.Lfe67-SetMonIconAnim
	.align	2, 0
	.globl	CreatePartyMenuMonIcon
	.type	 CreatePartyMenuMonIcon,function
	.thumb_func
CreatePartyMenuMonIcon:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #0xfffffff8
	mov	r8, r0
	add	r6, r1, #0
	mov	r9, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L797
	lsl	r1, r6, #0x2
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldrb	r5, [r1]
	ldrb	r1, [r1, #0x1]
	mov	sl, r1
	mov	r0, r9
	mov	r1, #0x41
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, r9
	mov	r1, #0x0
	bl	GetMonData
	ldr	r1, .L797+0x4
	add	r5, r5, #0x8
	mov	r2, #0x5
	str	r2, [sp]
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	add	r2, r5, #0
	mov	r3, sl
	bl	CreateMonIcon
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	add	r1, r6, #0
	add	r2, r4, #0
	bl	SetMonIconSpriteId
	add	r0, r4, #0
	mov	r1, r9
	bl	SetMonIconAnim
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L798:
	.align	2, 0
.L797:
	.word	gUnknown_08376678
	.word	sub_809D62C
.Lfe68:
	.size	 CreatePartyMenuMonIcon,.Lfe68-CreatePartyMenuMonIcon
	.align	2, 0
	.globl	TryCreatePartyMenuMonIcon
	.type	 TryCreatePartyMenuMonIcon,function
	.thumb_func
TryCreatePartyMenuMonIcon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r8, r6
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r7, r5, #0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L800	@cond_branch
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L801	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	mov	r2, #0x2
	add	r3, r4, #0
	bl	CreatePartyMenuMonIcon
	b	.L800
.L801:
	bl	IsDoubleBattle
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r8
	add	r1, r7, #0
	add	r3, r4, #0
	bl	CreatePartyMenuMonIcon
.L800:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 TryCreatePartyMenuMonIcon,.Lfe69-TryCreatePartyMenuMonIcon
	.align	2, 0
	.globl	unref_sub_806D964
	.type	 unref_sub_806D964,function
	.thumb_func
unref_sub_806D964:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	b	.L809
.L807:
	mov	r0, #0x64
	mov	r2, r4
	mul	r2, r2, r0
	ldr	r0, .L810
	add	r2, r2, r0
	add	r0, r5, #0
	add	r1, r4, #0
	bl	TryCreatePartyMenuMonIcon
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L809:
	ldr	r0, .L810+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L807	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L811:
	.align	2, 0
.L810:
	.word	gPlayerParty
	.word	gPlayerPartyCount
.Lfe70:
	.size	 unref_sub_806D964,.Lfe70-unref_sub_806D964
	.align	2, 0
	.globl	CreateMonIcon_LinkMultiBattle
	.type	 CreateMonIcon_LinkMultiBattle,function
	.thumb_func
CreateMonIcon_LinkMultiBattle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	add	r6, r0, #0
	add	r5, r1, #0
	mov	r8, r3
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L813
	lsl	r1, r5, #0x2
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldrb	r2, [r1]
	ldrb	r3, [r1, #0x1]
	mov	r1, r8
	ldrh	r0, [r1]
	ldr	r1, .L813+0x4
	mov	r4, #0x5
	str	r4, [sp]
	mov	r7, r8
	ldr	r4, [r7, #0x18]
	str	r4, [sp, #0x4]
	bl	CreateMonIcon
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	SetMonIconSpriteId
	ldrh	r1, [r7, #0x10]
	ldrh	r2, [r7, #0x12]
	add	r0, r4, #0
	bl	SetMonIconAnimByHP
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L814:
	.align	2, 0
.L813:
	.word	gUnknown_08376678
	.word	sub_809D62C
.Lfe71:
	.size	 CreateMonIcon_LinkMultiBattle,.Lfe71-CreateMonIcon_LinkMultiBattle
	.align	2, 0
	.type	 UpdateMonIconFrame_806DA0C,function
	.thumb_func
UpdateMonIconFrame_806DA0C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateMonIconFrame
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L816	@cond_branch
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L817	@cond_branch
	ldr	r0, .L819
	strh	r0, [r4, #0x26]
	b	.L816
.L820:
	.align	2, 0
.L819:
	.word	0xfffd
.L817:
	strh	r1, [r4, #0x26]
.L816:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 UpdateMonIconFrame_806DA0C,.Lfe72-UpdateMonIconFrame_806DA0C
	.align	2, 0
	.type	 UpdateMonIconFrame_806DA38,function
	.thumb_func
UpdateMonIconFrame_806DA38:
	push	{lr}
	bl	UpdateMonIconFrame
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 UpdateMonIconFrame_806DA38,.Lfe73-UpdateMonIconFrame_806DA38
	.align	2, 0
	.type	 UpdateMonIconFrame_806DA44,function
	.thumb_func
UpdateMonIconFrame_806DA44:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r1, #0x5
	bhi	.L823	@cond_branch
	bl	GetMonIconSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L827
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r2, r1, #0x2
	add	r1, r2, r3
	mov	r0, #0x0
	strh	r0, [r1, #0x26]
	strh	r0, [r1, #0x2e]
	cmp	r4, #0
	bne	.L824	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, .L827+0x4
	b	.L826
.L828:
	.align	2, 0
.L827:
	.word	gSprites
	.word	UpdateMonIconFrame_806DA38
.L824:
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, .L829
.L826:
	str	r1, [r0]
.L823:
	pop	{r4}
	pop	{r0}
	bx	r0
.L830:
	.align	2, 0
.L829:
	.word	UpdateMonIconFrame_806DA0C
.Lfe74:
	.size	 UpdateMonIconFrame_806DA44,.Lfe74-UpdateMonIconFrame_806DA44
	.align	2, 0
	.globl	LoadHeldItemIconGraphics
	.type	 LoadHeldItemIconGraphics,function
	.thumb_func
LoadHeldItemIconGraphics:
	push	{lr}
	ldr	r0, .L832
	bl	LoadSpriteSheet
	ldr	r0, .L832+0x4
	bl	LoadSpritePalette
	pop	{r0}
	bx	r0
.L833:
	.align	2, 0
.L832:
	.word	HeldItemsSpriteSheet
	.word	HeldItemsPalette
.Lfe75:
	.size	 LoadHeldItemIconGraphics,.Lfe75-LoadHeldItemIconGraphics
	.align	2, 0
	.globl	SpriteCB_HeldItemIcon
	.type	 SpriteCB_HeldItemIcon,function
	.thumb_func
SpriteCB_HeldItemIcon:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L837
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L835	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L836
.L838:
	.align	2, 0
.L837:
	.word	gSprites
.L835:
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x26]
	ldrh	r2, [r2, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
.L836:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 SpriteCB_HeldItemIcon,.Lfe76-SpriteCB_HeldItemIcon
	.align	2, 0
	.globl	CreateHeldItemIcon
	.type	 CreateHeldItemIcon,function
	.thumb_func
CreateHeldItemIcon:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	r6, r0, #0
	mov	r9, r1
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L840
	mov	r8, r0
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x43
	ldrb	r3, [r0]
	ldr	r0, .L840+0x4
	sub	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0xfa
	mov	r2, #0xaa
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	mov	r0, r8
	add	r5, r4, r0
	mov	r0, #0x4
	strh	r0, [r5, #0x24]
	mov	r0, #0xa
	strh	r0, [r5, #0x26]
	mov	r0, #0x1c
	add	r8, r8, r0
	add	r4, r4, r8
	ldr	r0, .L840+0x8
	str	r0, [r4]
	strh	r6, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, r9
	bl	StartSpriteAnim
	ldr	r1, [r4]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L841:
	.align	2, 0
.L840:
	.word	gSprites
	.word	gSpriteTemplate_837660C
	.word	SpriteCB_HeldItemIcon
.Lfe77:
	.size	 CreateHeldItemIcon,.Lfe77-CreateHeldItemIcon
	.align	2, 0
	.globl	CreateHeldItemIcons
	.type	 CreateHeldItemIcons,function
	.thumb_func
CreateHeldItemIcons:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r2, #0
	beq	.L844	@cond_branch
	cmp	r2, #0x1
	beq	.L850	@cond_branch
	b	.L843
.L844:
	mov	r5, #0x0
	ldrb	r0, [r6]
	cmp	r5, r0
	bcs	.L843	@cond_branch
.L847:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L859
	add	r0, r0, r1
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L848	@cond_branch
	add	r0, r7, r5
	ldrb	r4, [r0]
	add	r0, r1, #0
	bl	ItemIsMail
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	CreateHeldItemIcon
.L848:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrb	r0, [r6]
	cmp	r5, r0
	bcc	.L847	@cond_branch
	b	.L843
.L860:
	.align	2, 0
.L859:
	.word	gPlayerParty
.L850:
	mov	r5, #0x0
	b	.L858
.L853:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L861
	add	r0, r0, r1
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L854	@cond_branch
	add	r0, r5, r7
	ldrb	r4, [r0, #0x6]
	add	r0, r1, #0
	bl	ItemIsMail
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	CreateHeldItemIcon
.L854:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L858:
	ldrb	r0, [r6, #0x1]
	cmp	r5, r0
	bcc	.L853	@cond_branch
.L843:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L862:
	.align	2, 0
.L861:
	.word	gEnemyParty
.Lfe78:
	.size	 CreateHeldItemIcons,.Lfe78-CreateHeldItemIcons
	.align	2, 0
	.globl	CreateHeldItemIcons_806DC34
	.type	 CreateHeldItemIcons_806DC34,function
	.thumb_func
CreateHeldItemIcons_806DC34:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r7, #0x0
	ldr	r0, .L870
	mov	r9, r0
	mov	r1, #0x1c
	add	r1, r1, r9
	mov	sl, r1
.L867:
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r1, .L870+0x4
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L866	@cond_branch
	mov	r0, r8
	add	r1, r7, #0
	bl	GetMonIconSpriteId
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L870+0x8
	mov	r1, #0xfa
	mov	r2, #0xaa
	mov	r3, #0x4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	mov	r1, r9
	add	r6, r4, r1
	mov	r1, #0x4
	strh	r1, [r6, #0x24]
	mov	r1, #0xa
	strh	r1, [r6, #0x26]
	strh	r5, [r6, #0x3c]
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	strh	r0, [r1, #0x3c]
	mov	r0, r8
	add	r1, r7, #0
	bl	SetHeldItemIconVisibility
	add	r4, r4, sl
	ldr	r1, [r4]
	add	r0, r6, #0
	bl	_call_via_r1
.L866:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x5
	bls	.L867	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L871:
	.align	2, 0
.L870:
	.word	gSprites
	.word	gPlayerParty
	.word	gSpriteTemplate_837660C
.Lfe79:
	.size	 CreateHeldItemIcons_806DC34,.Lfe79-CreateHeldItemIcons_806DC34
	.align	2, 0
	.globl	CreateHeldItemIcon_806DCD4
	.type	 CreateHeldItemIcon_806DCD4,function
	.thumb_func
CreateHeldItemIcon_806DCD4:
	.syntax unified
    push {r4-r7,lr}
    lsls r0, 24
    lsrs r0, 24
    lsls r1, 24
    lsrs r1, 24
    lsls r2, 16
    lsrs r7, r2, 16
    bl GetMonIconSpriteId
    adds r4, r0, 0
    lsls r4, 24
    lsrs r4, 24
    ldr r0, _0806DD2C @ =gSpriteTemplate_837660C
    movs r1, 0xFA
    movs r2, 0xAA
    movs r3, 0x4
    bl CreateSprite
    lsls r0, 24
    lsrs r6, r0, 24
    ldr r1, _0806DD30 @ =gSprites
    lsls r0, r6, 4
    adds r0, r6
    lsls r0, 2
    adds r5, r0, r1
    movs r0, 0x4
    strh r0, [r5, 0x24]
    movs r0, 0xA
    strh r0, [r5, 0x26]
    strh r4, [r5, 0x3C]
    lsls r0, r4, 4
    adds r0, r4
    lsls r0, 2
    adds r0, r1
    strh r6, [r0, 0x3C]
    cmp r7, 0
    bne _0806DD34
    adds r0, r5, 0
    adds r0, 0x3E
    ldrb r1, [r0]
    movs r2, 0x4
    orrs r1, r2
    strb r1, [r0]
    b _0806DD5C
    .align 2, 0
_0806DD2C: .4byte gSpriteTemplate_837660C
_0806DD30: .4byte gSprites
_0806DD34:
    adds r0, r7, 0
    bl ItemIsMail
    lsls r0, 24
    cmp r0, 0
    beq _0806DD46
    adds r0, r5, 0
    movs r1, 0x1
    b _0806DD4A
_0806DD46:
    adds r0, r5, 0
    movs r1, 0
_0806DD4A:
    bl StartSpriteAnim
    adds r2, r5, 0
    adds r2, 0x3E
    ldrb r1, [r2]
    movs r0, 0x5
    negs r0, r0
    ands r0, r1
    strb r0, [r2]
_0806DD5C:
    ldr r2, _0806DD78 @ =gSprites
    lsls r0, r6, 4
    adds r0, r6
    lsls r0, 2
    adds r1, r2, 0
    adds r1, 0x1C
    adds r1, r0, r1
    adds r0, r2
    ldr r1, [r1]
    bl _call_via_r1
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_0806DD78: .4byte gSprites
    .syntax divided

	.code	16
.Lfe80:
	.size	 CreateHeldItemIcon_806DCD4,.Lfe80-CreateHeldItemIcon_806DCD4
	.align	2, 0
	.type	 SpriteCB_UpdateHeldItemIconPosition,function
	.thumb_func
SpriteCB_UpdateHeldItemIconPosition:
	ldrh	r2, [r0, #0x3c]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L874
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r2, [r1, #0x24]
	ldrh	r3, [r1, #0x20]
	add	r2, r2, r3
	strh	r2, [r0, #0x20]
	ldrh	r1, [r1, #0x22]
	strh	r1, [r0, #0x22]
	bx	lr
.L875:
	.align	2, 0
.L874:
	.word	gSprites
.Lfe81:
	.size	 SpriteCB_UpdateHeldItemIconPosition,.Lfe81-SpriteCB_UpdateHeldItemIconPosition
	.align	2, 0
	.type	 GetMonIconSpriteId,function
	.thumb_func
GetMonIconSpriteId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	cmp	r0, #0x5
	bhi	.L884	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L889
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L890:
	.align	2, 0
.L889:
	.word	.L885
	.align	2, 0
	.align	2, 0
.L885:
	.word	.L884
	.word	.L878
	.word	.L879
	.word	.L880
	.word	.L881
	.word	.L882
.L878:
	ldr	r0, .L891
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x8]
	b	.L887
.L892:
	.align	2, 0
.L891:
	.word	gTasks
.L879:
	ldr	r0, .L893
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xa]
	b	.L888
.L894:
	.align	2, 0
.L893:
	.word	gTasks
.L880:
	ldr	r0, .L895
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	b	.L887
.L896:
	.align	2, 0
.L895:
	.word	gTasks
.L881:
	ldr	r0, .L897
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	b	.L888
.L898:
	.align	2, 0
.L897:
	.word	gTasks
.L882:
	ldr	r0, .L899
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0xc]
	b	.L887
.L900:
	.align	2, 0
.L899:
	.word	gTasks
.L884:
	ldr	r0, .L901
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
.L888:
	lsr	r0, r0, #0x8
.L887:
	pop	{r1}
	bx	r1
.L902:
	.align	2, 0
.L901:
	.word	gTasks
.Lfe82:
	.size	 GetMonIconSpriteId,.Lfe82-GetMonIconSpriteId
	.align	2, 0
	.globl	SetMonIconSpriteId
	.type	 SetMonIconSpriteId,function
	.thumb_func
SetMonIconSpriteId:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r0, #0x5
	bhi	.L904	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L913
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L914:
	.align	2, 0
.L913:
	.word	.L911
	.align	2, 0
	.align	2, 0
.L911:
	.word	.L905
	.word	.L906
	.word	.L907
	.word	.L908
	.word	.L909
	.word	.L910
.L905:
	ldr	r1, .L915
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	lsl	r2, r4, #0x8
	orr	r1, r1, r2
	strh	r1, [r0, #0x8]
	b	.L904
.L916:
	.align	2, 0
.L915:
	.word	gTasks
.L906:
	ldr	r0, .L917
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0x8]
	ldr	r0, .L917+0x4
	and	r0, r0, r2
	orr	r0, r0, r4
	strh	r0, [r1, #0x8]
	b	.L904
.L918:
	.align	2, 0
.L917:
	.word	gTasks
	.word	0xffffff00
.L907:
	ldr	r1, .L919
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xa]
	lsl	r2, r4, #0x8
	orr	r1, r1, r2
	strh	r1, [r0, #0xa]
	b	.L904
.L920:
	.align	2, 0
.L919:
	.word	gTasks
.L908:
	ldr	r0, .L921
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xa]
	ldr	r0, .L921+0x4
	and	r0, r0, r2
	orr	r0, r0, r4
	strh	r0, [r1, #0xa]
	b	.L904
.L922:
	.align	2, 0
.L921:
	.word	gTasks
	.word	0xffffff00
.L909:
	ldr	r1, .L923
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	lsl	r2, r4, #0x8
	orr	r1, r1, r2
	strh	r1, [r0, #0xc]
	b	.L904
.L924:
	.align	2, 0
.L923:
	.word	gTasks
.L910:
	ldr	r0, .L925
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r2, [r1, #0xc]
	ldr	r0, .L925+0x4
	and	r0, r0, r2
	orr	r0, r0, r4
	strh	r0, [r1, #0xc]
.L904:
	pop	{r4}
	pop	{r0}
	bx	r0
.L926:
	.align	2, 0
.L925:
	.word	gTasks
	.word	0xffffff00
.Lfe83:
	.size	 SetMonIconSpriteId,.Lfe83-SetMonIconSpriteId
	.align	2, 0
	.globl	GetMonHeldItemIconSpriteId
	.type	 GetMonHeldItemIconSpriteId,function
	.thumb_func
GetMonHeldItemIconSpriteId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	GetMonIconSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L928
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L929:
	.align	2, 0
.L928:
	.word	gSprites
.Lfe84:
	.size	 GetMonHeldItemIconSpriteId,.Lfe84-GetMonHeldItemIconSpriteId
	.align	2, 0
	.globl	SetHeldItemIconVisibility
	.type	 SetHeldItemIconVisibility,function
	.thumb_func
SetHeldItemIconVisibility:
	.syntax unified
    push {r4-r6,lr}
    adds r4, r1, 0
    lsls r0, 24
    lsrs r0, 24
    lsls r4, 24
    lsrs r4, 24
    adds r1, r4, 0
    bl GetMonHeldItemIconSpriteId
    lsls r0, 24
    lsrs r5, r0, 24
    adds r6, r5, 0
    movs r0, 0x64
    adds r1, r4, 0
    muls r1, r0
    ldr r0, _0806DFA4 @ =gPlayerParty
    adds r4, r1, r0
    adds r0, r4, 0
    movs r1, 0xC
    bl GetMonData
    cmp r0, 0
    bne _0806DFAC
    ldr r1, _0806DFA8 @ =gSprites
    lsls r0, r5, 4
    adds r0, r5
    lsls r0, 2
    adds r0, r1
    adds r0, 0x3E
    ldrb r1, [r0]
    movs r2, 0x4
    orrs r1, r2
    strb r1, [r0]
    b _0806DFF6
    .align 2, 0
_0806DFA4: .4byte gPlayerParty
_0806DFA8: .4byte gSprites
_0806DFAC:
    adds r0, r4, 0
    movs r1, 0xC
    bl GetMonData
    lsls r0, 16
    lsrs r0, 16
    bl ItemIsMail
    lsls r0, 24
    cmp r0, 0
    beq _0806DFD8
    lsls r4, r5, 4
    adds r4, r5
    lsls r4, 2
    ldr r0, _0806DFD4 @ =gSprites
    adds r4, r0
    adds r0, r4, 0
    movs r1, 0x1
    b _0806DFE6
    .align 2, 0
_0806DFD4: .4byte gSprites
_0806DFD8:
    lsls r4, r6, 4
    adds r4, r6
    lsls r4, 2
    ldr r0, _0806DFFC @ =gSprites
    adds r4, r0
    adds r0, r4, 0
    movs r1, 0
_0806DFE6:
    bl StartSpriteAnim
    adds r4, 0x3E
    ldrb r1, [r4]
    movs r0, 0x5
    negs r0, r0
    ands r0, r1
    strb r0, [r4]
_0806DFF6:
    pop {r4-r6}
    pop {r0}
    bx r0
    .align 2, 0
_0806DFFC: .4byte gSprites
    .syntax divided

	.code	16
.Lfe85:
	.size	 SetHeldItemIconVisibility,.Lfe85-SetHeldItemIconVisibility
	.align	2, 0
	.globl	PartyMenuDoPrintMonNickname
	.type	 PartyMenuDoPrintMonNickname,function
	.thumb_func
PartyMenuDoPrintMonNickname:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r5, .L932
	ldr	r2, .L932+0x4
	mov	r0, sp
	add	r1, r5, #0
	bl	CpuFastSet
	ldr	r0, .L932+0x8
	add	r1, r5, #0
	add	r2, r6, #0
	bl	sub_8004E3C
	lsl	r4, r4, #0xa
	ldr	r0, .L932+0xc
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x80
	bl	CpuFastSet
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L933:
	.align	2, 0
.L932:
	.word	gTileBuffer
	.word	0x1000100
	.word	gWindowConfig_81E6CAC
	.word	0x6014000
.Lfe86:
	.size	 PartyMenuDoPrintMonNickname,.Lfe86-PartyMenuDoPrintMonNickname
	.align	2, 0
	.globl	PrintPartyMenuMonNickname
	.type	 PrintPartyMenuMonNickname,function
	.thumb_func
PrintPartyMenuMonNickname:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff4
	add	r4, r0, #0
	add	r5, r1, #0
	add	r0, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, sp
	bl	GetMonNickname
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, sp
	bl	PartyMenuDoPrintMonNickname
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 PrintPartyMenuMonNickname,.Lfe87-PrintPartyMenuMonNickname
	.align	2, 0
	.type	 TryPrintPartyMenuMonNickname,function
	.thumb_func
TryPrintPartyMenuMonNickname:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L936	@cond_branch
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L937	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	PrintPartyMenuMonNickname
	b	.L936
.L937:
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	add	r2, r4, #0
	bl	PrintPartyMenuMonNickname
.L936:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 TryPrintPartyMenuMonNickname,.Lfe88-TryPrintPartyMenuMonNickname
	.align	2, 0
	.globl	PrintPartyMenuMonNicknames
	.type	 PrintPartyMenuMonNicknames,function
	.thumb_func
PrintPartyMenuMonNicknames:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	mov	r6, #0x64
	ldr	r5, .L945
.L943:
	mov	r1, r4
	mul	r1, r1, r6
	add	r1, r1, r5
	add	r0, r4, #0
	bl	TryPrintPartyMenuMonNickname
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L943	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L946:
	.align	2, 0
.L945:
	.word	gPlayerParty
.Lfe89:
	.size	 PrintPartyMenuMonNicknames,.Lfe89-PrintPartyMenuMonNicknames
	.align	2, 0
	.globl	GetMonNickname
	.type	 GetMonNickname,function
	.thumb_func
GetMonNickname:
	push	{r4, lr}
	add	r4, r1, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	GetMonData
	add	r0, r4, #0
	bl	StringGetEnd10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 GetMonNickname,.Lfe90-GetMonNickname
	.align	2, 0
	.globl	PartyMenuPutStatusTilemap
	.type	 PartyMenuPutStatusTilemap,function
	.thumb_func
PartyMenuPutStatusTilemap:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r4, .L954
	lsr	r0, r0, #0x16
	lsl	r3, r1, #0x1
	add	r3, r3, r1
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	add	r0, r0, r4
	ldrb	r1, [r0]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r0, #0x1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x13
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldr	r0, .L954+0x4
	add	r4, r1, r0
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x18
	mov	r3, #0x0
	mov	r0, #0xc6
	lsl	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L954+0x8
	add	r5, r0, #0
.L952:
	lsl	r0, r3, #0x1
	add	r0, r0, r4
	add	r1, r2, r3
	orr	r1, r1, r5
	strh	r1, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L952	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L955:
	.align	2, 0
.L954:
	.word	gUnknown_08376738
	.word	0x600f000
	.word	0xffffb000
.Lfe91:
	.size	 PartyMenuPutStatusTilemap,.Lfe91-PartyMenuPutStatusTilemap
	.align	2, 0
	.type	 PartyMenuClearLevelStatusTilemap,function
	.thumb_func
PartyMenuClearLevelStatusTilemap:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L957	@cond_branch
	mov	r3, #0x2
	b	.L958
.L957:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L958:
	ldr	r1, .L964
	lsl	r2, r4, #0x2
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r1
	ldrb	r1, [r2]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r2, #0x1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x13
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldr	r0, .L964+0x4
	add	r1, r1, r0
	mov	r3, #0x0
	mov	r2, #0x0
.L962:
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L962	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L965:
	.align	2, 0
.L964:
	.word	gUnknown_08376738
	.word	0x600f000
.Lfe92:
	.size	 PartyMenuClearLevelStatusTilemap,.Lfe92-PartyMenuClearLevelStatusTilemap
	.align	2, 0
	.type	 PartyMenuWriteTilemap,function
	.thumb_func
PartyMenuWriteTilemap:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x13
	add	r1, r1, r2
	lsl	r1, r1, #0x1
	ldr	r2, .L967
	add	r1, r1, r2
	mov	r2, #0x86
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	strh	r0, [r1]
	bx	lr
.L968:
	.align	2, 0
.L967:
	.word	0x600f000
.Lfe93:
	.size	 PartyMenuWriteTilemap,.Lfe93-PartyMenuWriteTilemap
	.align	2, 0
	.globl	PartyMenuDoPrintLevel
	.type	 PartyMenuDoPrintLevel,function
	.thumb_func
PartyMenuDoPrintLevel:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r3, .L970
	lsl	r2, r4, #0x2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r3
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x40
	bl	PartyMenuWriteTilemap
	ldr	r6, .L970+0x4
	mov	r0, #0xfc
	strb	r0, [r6]
	mov	r0, #0x12
	strb	r0, [r6, #0x1]
	mov	r0, #0x8
	strb	r0, [r6, #0x2]
	add	r0, r6, #0x3
	add	r1, r5, #0
	bl	ConvertIntToDecimalString
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r5, .L970+0x8
	ldr	r2, .L970+0xc
	mov	r0, sp
	add	r1, r5, #0
	bl	CpuFastSet
	ldr	r0, .L970+0x10
	ldr	r2, .L970+0x14
	add	r1, r5, r2
	add	r2, r6, #0
	bl	sub_8004E3C
	lsl	r4, r4, #0xa
	ldr	r0, .L970+0x18
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x20
	bl	CpuFastSet
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L971:
	.align	2, 0
.L970:
	.word	gUnknown_08376738
	.word	gStringVar1
	.word	gUnknown_02039460
	.word	0x1000020
	.word	gWindowConfig_81E6CAC
	.word	0xffffff00
	.word	0x6014200
.Lfe94:
	.size	 PartyMenuDoPrintLevel,.Lfe94-PartyMenuDoPrintLevel
	.align	2, 0
	.globl	PartyMenuPrintLevel
	.type	 PartyMenuPrintLevel,function
	.thumb_func
PartyMenuPrintLevel:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r0, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0x38
	bl	GetMonData
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	bl	PartyMenuDoPrintLevel
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 PartyMenuPrintLevel,.Lfe95-PartyMenuPrintLevel
	.align	2, 0
	.globl	PartyMenuPrintMonLevelOrStatus
	.type	 PartyMenuPrintMonLevelOrStatus,function
	.thumb_func
PartyMenuPrintMonLevelOrStatus:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L974	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L974	@cond_branch
	add	r0, r5, #0
	bl	GetMonStatusAndPokerus
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L975	@cond_branch
	mov	r6, #0x2
	b	.L976
.L975:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L976:
	cmp	r4, #0
	beq	.L977	@cond_branch
	cmp	r4, #0x6
	beq	.L977	@cond_branch
	sub	r2, r4, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r7, #0
	add	r1, r6, #0
	bl	PartyMenuPutStatusTilemap
	b	.L978
.L977:
	add	r0, r7, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	PartyMenuPrintLevel
.L978:
	add	r0, r7, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	PartyMenuPrintGenderIcon
.L974:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 PartyMenuPrintMonLevelOrStatus,.Lfe96-PartyMenuPrintMonLevelOrStatus
	.align	2, 0
	.globl	PartyMenuPrintMonsLevelOrStatus
	.type	 PartyMenuPrintMonsLevelOrStatus,function
	.thumb_func
PartyMenuPrintMonsLevelOrStatus:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	mov	r6, #0x64
	ldr	r5, .L985
.L983:
	mov	r1, r4
	mul	r1, r1, r6
	add	r1, r1, r5
	add	r0, r4, #0
	bl	PartyMenuPrintMonLevelOrStatus
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L983	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L986:
	.align	2, 0
.L985:
	.word	gPlayerParty
.Lfe97:
	.size	 PartyMenuPrintMonsLevelOrStatus,.Lfe97-PartyMenuPrintMonsLevelOrStatus
	.align	2, 0
	.globl	PartyMenuDoPrintGenderIcon
	.type	 PartyMenuDoPrintGenderIcon,function
	.thumb_func
PartyMenuDoPrintGenderIcon:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, [sp, #0x14]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	add	r1, r4, #0
	bl	ShouldHideGenderIcon
	cmp	r0, #0
	bne	.L988	@cond_branch
	ldr	r2, .L994
	lsl	r1, r6, #0x2
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x3
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r7, #0
	beq	.L990	@cond_branch
	cmp	r7, #0xfe
	beq	.L991	@cond_branch
	b	.L988
.L995:
	.align	2, 0
.L994:
	.word	gUnknown_08376738
.L990:
	mov	r0, #0x42
	add	r1, r3, #0
	bl	PartyMenuWriteTilemap
	b	.L988
.L991:
	mov	r0, #0x44
	add	r1, r3, #0
	bl	PartyMenuWriteTilemap
.L988:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe98:
	.size	 PartyMenuDoPrintGenderIcon,.Lfe98-PartyMenuDoPrintGenderIcon
	.align	2, 0
	.globl	PartyMenuPrintGenderIcon
	.type	 PartyMenuPrintGenderIcon,function
	.thumb_func
PartyMenuPrintGenderIcon:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	mov	r8, r0
	add	r6, r1, #0
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L997
	mov	r9, r0
	add	r0, r5, #0
	mov	r1, r9
	bl	GetMonNickname
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	GetMonGender
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	str	r0, [sp]
	add	r0, r4, #0
	add	r2, r6, #0
	mov	r3, r8
	bl	PartyMenuDoPrintGenderIcon
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L998:
	.align	2, 0
.L997:
	.word	gStringVar1
.Lfe99:
	.size	 PartyMenuPrintGenderIcon,.Lfe99-PartyMenuPrintGenderIcon
	.align	2, 0
	.globl	PartyMenuDoPrintHP
	.type	 PartyMenuDoPrintHP,function
	.thumb_func
PartyMenuDoPrintHP:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r1, r2, #0
	add	r5, r3, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r2, .L1000
	add	r0, r2, #0
	mov	r2, #0x18
	mov	r3, #0x1
	bl	sub_8003504
	add	r2, r0, #0
	mov	r0, #0xba
	strb	r0, [r2]
	add	r2, r2, #0x1
	add	r0, r2, #0
	add	r1, r5, #0
	mov	r2, #0x18
	mov	r3, #0x1
	bl	sub_8003504
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r5, .L1000+0x4
	ldr	r2, .L1000+0x8
	mov	r0, sp
	add	r1, r5, #0
	bl	CpuFastSet
	ldr	r0, .L1000+0xc
	ldr	r2, .L1000+0x10
	add	r1, r5, r2
	ldr	r2, .L1000
	bl	sub_8004E3C
	lsl	r4, r4, #0xa
	ldr	r0, .L1000+0x14
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x40
	bl	CpuFastSet
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1001:
	.align	2, 0
.L1000:
	.word	gStringVar1
	.word	gUnknown_02039460
	.word	0x1000040
	.word	gWindowConfig_81E6CAC
	.word	0xffffff00
	.word	0x6014300
.Lfe100:
	.size	 PartyMenuDoPrintHP,.Lfe100-PartyMenuDoPrintHP
	.align	2, 0
	.globl	PartyMenuPrintHP
	.type	 PartyMenuPrintHP,function
	.thumb_func
PartyMenuPrintHP:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, r8
	mov	r1, #0x3a
	bl	GetMonData
	add	r3, r0, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	PartyMenuDoPrintHP
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 PartyMenuPrintHP,.Lfe101-PartyMenuPrintHP
	.align	2, 0
	.type	 PartyMenuTryPrintHP,function
	.thumb_func
PartyMenuTryPrintHP:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1004	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1004	@cond_branch
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1005	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	PartyMenuPrintHP
	b	.L1004
.L1005:
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	add	r2, r4, #0
	bl	PartyMenuPrintHP
.L1004:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe102:
	.size	 PartyMenuTryPrintHP,.Lfe102-PartyMenuTryPrintHP
	.align	2, 0
	.globl	PartyMenuTryPrintMonsHP
	.type	 PartyMenuTryPrintMonsHP,function
	.thumb_func
PartyMenuTryPrintMonsHP:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	mov	r6, #0x64
	ldr	r5, .L1013
.L1011:
	mov	r1, r4
	mul	r1, r1, r6
	add	r1, r1, r5
	add	r0, r4, #0
	bl	PartyMenuTryPrintHP
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L1011	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1014:
	.align	2, 0
.L1013:
	.word	gPlayerParty
.Lfe103:
	.size	 PartyMenuTryPrintMonsHP,.Lfe103-PartyMenuTryPrintMonsHP
	.align	2, 0
	.globl	unref_sub_806E564
	.type	 unref_sub_806E564,function
	.thumb_func
unref_sub_806E564:
	bx	lr
.Lfe104:
	.size	 unref_sub_806E564,.Lfe104-unref_sub_806E564
	.align	2, 0
	.globl	unref_sub_806E568
	.type	 unref_sub_806E568,function
	.thumb_func
unref_sub_806E568:
	bx	lr
.Lfe105:
	.size	 unref_sub_806E568,.Lfe105-unref_sub_806E568
	.align	2, 0
	.type	 nullsub_12,function
	.thumb_func
nullsub_12:
	bx	lr
.Lfe106:
	.size	 nullsub_12,.Lfe106-nullsub_12
	.align	2, 0
	.globl	nullsub_13
	.type	 nullsub_13,function
	.thumb_func
nullsub_13:
	bx	lr
.Lfe107:
	.size	 nullsub_13,.Lfe107-nullsub_13
	.align	2, 0
	.globl	PartyMenuDoDrawHPBar
	.type	 PartyMenuDoDrawHPBar,function
	.thumb_func
PartyMenuDoDrawHPBar:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xffffffe8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r0, .L1023
	str	r0, [sp, #0x14]
	str	r3, [sp]
	str	r2, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	add	r0, r2, #0
	add	r1, r3, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r3, #0
	cmp	r3, #0x2
	bls	.L1020	@cond_branch
	mov	r2, sp
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
.L1020:
	cmp	r3, #0x2
	bne	.L1021	@cond_branch
	mov	r2, sp
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x5
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
.L1021:
	cmp	r4, #0x1
	bhi	.L1022	@cond_branch
	mov	r2, sp
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x6
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
.L1022:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x10]
	ldr	r2, .L1023+0x4
	lsl	r1, r6, #0x2
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r2
	ldr	r4, [r1]
	add	r1, sp, #0x14
	mov	r0, sp
	add	r2, r4, #0
	mov	r3, #0x0
	bl	sub_80460C8
	sub	r4, r4, #0x4
	ldr	r1, .L1023+0x8
	add	r0, r1, #0
	strh	r0, [r4]
	add	r1, r1, #0x1
	add	r0, r1, #0
	strh	r0, [r4, #0x2]
	add	r1, r1, #0x1
	add	r0, r1, #0
	strh	r0, [r4, #0x10]
	add	sp, sp, #0x18
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1024:
	.align	2, 0
.L1023:
	.word	0xffff8000
	.word	gUnknown_08376858
	.word	0x3109
.Lfe108:
	.size	 PartyMenuDoDrawHPBar,.Lfe108-PartyMenuDoDrawHPBar
	.align	2, 0
	.globl	PartyMenuDrawHPBar
	.type	 PartyMenuDrawHPBar,function
	.thumb_func
PartyMenuDrawHPBar:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, r8
	mov	r1, #0x3a
	bl	GetMonData
	add	r3, r0, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	PartyMenuDoDrawHPBar
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe109:
	.size	 PartyMenuDrawHPBar,.Lfe109-PartyMenuDrawHPBar
	.align	2, 0
	.globl	PartyMenuTryDrawHPBar
	.type	 PartyMenuTryDrawHPBar,function
	.thumb_func
PartyMenuTryDrawHPBar:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1027	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1027	@cond_branch
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1028	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	add	r2, r4, #0
	bl	PartyMenuDrawHPBar
	b	.L1027
.L1028:
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	add	r2, r4, #0
	bl	PartyMenuDrawHPBar
.L1027:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 PartyMenuTryDrawHPBar,.Lfe110-PartyMenuTryDrawHPBar
	.align	2, 0
	.globl	PartyMenuDrawHPBars
	.type	 PartyMenuDrawHPBars,function
	.thumb_func
PartyMenuDrawHPBars:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	mov	r6, #0x64
	ldr	r5, .L1036
.L1034:
	mov	r1, r4
	mul	r1, r1, r6
	add	r1, r1, r5
	add	r0, r4, #0
	bl	PartyMenuTryDrawHPBar
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L1034	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1037:
	.align	2, 0
.L1036:
	.word	gPlayerParty
.Lfe111:
	.size	 PartyMenuDrawHPBars,.Lfe111-PartyMenuDrawHPBars
	.align	2, 0
	.globl	SwapPokemon
	.type	 SwapPokemon,function
	.thumb_func
SwapPokemon:
	push	{r4, r5, lr}
	add	sp, sp, #0xffffff9c
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r0, sp
	add	r1, r4, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	add	r0, r5, #0
	mov	r1, sp
	mov	r2, #0x64
	bl	memcpy
	add	sp, sp, #0x64
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 SwapPokemon,.Lfe112-SwapPokemon
	.align	2, 0
	.globl	SetPartyPopupMenuOffsets
	.type	 SetPartyPopupMenuOffsets,function
	.thumb_func
SetPartyPopupMenuOffsets:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x15
	add	r0, r0, r3
	ldrb	r4, [r0]
	lsl	r4, r4, #0x19
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	add	r4, r4, r3
	lsr	r4, r4, #0x18
	ldrb	r0, [r0, #0x1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x1e
	sub	r3, r3, r0
	strb	r3, [r1]
	mov	r0, #0x14
	sub	r0, r0, r4
	strb	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe113:
	.size	 SetPartyPopupMenuOffsets,.Lfe113-SetPartyPopupMenuOffsets
	.align	2, 0
	.globl	ShowPartyPopupMenu
	.type	 ShowPartyPopupMenu,function
	.thumb_func
ShowPartyPopupMenu:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffff4
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r9, r2
	add	r6, r3, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, #0x9
	add	r0, r0, sp
	mov	r8, r0
	add	r0, r5, #0
	add	r1, sp, #0x8
	mov	r2, r8
	add	r3, r4, #0
	bl	SetPartyPopupMenuOffsets
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r5, r5, #0x3
	add	r5, r5, r4
	ldrb	r2, [r5, #0x1]
	ldrb	r3, [r5]
	mov	r4, r9
	str	r4, [sp]
	ldr	r4, [r5, #0x4]
	str	r4, [sp, #0x4]
	bl	sub_8089C50
	add	r0, sp, #0x8
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	ldrb	r2, [r0]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r5]
	str	r6, [sp]
	ldrb	r0, [r5, #0x1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	bl	InitMenu
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 ShowPartyPopupMenu,.Lfe114-ShowPartyPopupMenu
	.align	2, 0
	.globl	ClosePartyPopupMenu
	.type	 ClosePartyPopupMenu,function
	.thumb_func
ClosePartyPopupMenu:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, sp
	add	r5, r5, #0x1
	add	r0, r4, #0
	mov	r1, sp
	add	r2, r5, #0
	add	r3, r6, #0
	bl	SetPartyPopupMenuOffsets
	mov	r0, sp
	ldrb	r0, [r0]
	ldrb	r1, [r5]
	lsl	r4, r4, #0x3
	add	r4, r4, r6
	ldrb	r2, [r4, #0x1]
	add	r2, r0, r2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrb	r3, [r4]
	lsl	r3, r3, #0x1
	add	r3, r1, r3
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	MenuZeroFillWindowRect
	bl	HandleDestroyMenuCursors
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 ClosePartyPopupMenu,.Lfe115-ClosePartyPopupMenu
	.align	2, 0
	.globl	PartyMenuGetPopupMenuFunc
	.type	 PartyMenuGetPopupMenuFunc,function
	.thumb_func
PartyMenuGetPopupMenuFunc:
	lsl	r0, r0, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsr	r0, r0, #0x15
	add	r0, r0, r1
	ldr	r0, [r0, #0x4]
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r0, [r0, #0x4]
	bx	lr
.Lfe116:
	.size	 PartyMenuGetPopupMenuFunc,.Lfe116-PartyMenuGetPopupMenuFunc
	.align	2, 0
	.globl	sub_806E834
	.type	 sub_806E834,function
	.thumb_func
sub_806E834:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L1044
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x3
	mov	r1, #0xe
	mov	r2, #0x1a
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	add	r0, r5, #0
	mov	r1, #0x4
	mov	r2, #0xf
	bl	MenuPrintMessage
	ldr	r0, .L1044+0x4
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1044+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1045:
	.align	2, 0
.L1044:
	.word	gUnknown_0202E8F6
	.word	sub_806E884
	.word	gTasks
.Lfe117:
	.size	 sub_806E834,.Lfe117-sub_806E834
	.align	2, 0
	.type	 sub_806E884,function
	.thumb_func
sub_806E884:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1047	@cond_branch
	ldr	r1, .L1049
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1049+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1048	@cond_branch
	mov	r0, #0x3
	mov	r1, #0xe
	mov	r2, #0x1a
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
.L1048:
	add	r0, r5, #0
	bl	DestroyTask
.L1047:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1050:
	.align	2, 0
.L1049:
	.word	gUnknown_0202E8F6
	.word	gTasks
.Lfe118:
	.size	 sub_806E884,.Lfe118-sub_806E884
	.align	2, 0
	.globl	sub_806E8D0
	.type	 sub_806E8D0,function
	.thumb_func
sub_806E8D0:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r4, .L1052
	str	r2, [r4, #0x10]
	strb	r0, [r4, #0x4]
	bl	sub_806CA38
	strb	r0, [r4, #0x5]
	strh	r5, [r4, #0x6]
	ldrb	r1, [r4, #0x5]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1052+0x4
	add	r0, r0, r1
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1053:
	.align	2, 0
.L1052:
	.word	gSharedMem+0x1c000
	.word	gPlayerParty
.Lfe119:
	.size	 sub_806E8D0,.Lfe119-sub_806E8D0
	.align	2, 0
	.globl	PartyMenuUpdateMonHeldItem
	.type	 PartyMenuUpdateMonHeldItem,function
	.thumb_func
PartyMenuUpdateMonHeldItem:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r0, r4, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1055	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GiveMailToMon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L1056	@cond_branch
	mov	r0, #0x1
	b	.L1058
.L1056:
	ldr	r1, .L1060
	mov	r0, #0x2
	b	.L1059
.L1061:
	.align	2, 0
.L1060:
	.word	gUnknown_0202E8F4
.L1055:
	ldr	r1, .L1062
	mov	r0, #0x1
.L1059:
	strb	r0, [r1]
	mov	r0, sp
	strb	r4, [r0]
	mov	r1, sp
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x1]
	add	r0, r5, #0
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	mov	r0, #0x0
.L1058:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1063:
	.align	2, 0
.L1062:
	.word	gUnknown_0202E8F4
.Lfe120:
	.size	 PartyMenuUpdateMonHeldItem,.Lfe120-PartyMenuUpdateMonHeldItem
	.align	2, 0
	.globl	PartyMenuTryGiveMonHeldItem
	.type	 PartyMenuTryGiveMonHeldItem,function
	.thumb_func
PartyMenuTryGiveMonHeldItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r9, r5
	ldr	r2, .L1072
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r6, r1, r2
	ldr	r1, .L1072+0x4
	str	r1, [r6]
	add	r1, r5, #0
	mov	r2, r8
	bl	sub_806E8D0
	ldr	r4, .L1072+0x8
	ldr	r0, [r4]
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r7, r2, #0
	ldr	r1, .L1072+0xc
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1072+0x10
	mov	sl, r0
	mov	r0, #0x0
	mov	r1, sl
	strh	r0, [r1]
	cmp	r2, #0
	beq	.L1065	@cond_branch
	add	r0, r2, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1066	@cond_branch
	ldr	r0, .L1072+0x14
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1072+0x18
	mov	r1, #0x5
	bl	CreateTask
	b	.L1069
.L1073:
	.align	2, 0
.L1072:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1c000
	.word	gUnknown_0202E8F4
	.word	gUnknown_0202E8F8
	.word	gOtherText_MailMustBeRemoved
	.word	party_menu_link_mon_held_item_object
.L1066:
	ldr	r0, [r4]
	ldr	r1, .L1074
	bl	GetMonNickname
	ldr	r1, .L1074+0x4
	add	r0, r7, #0
	bl	CopyItemName
	ldr	r4, .L1074+0x8
	ldr	r1, .L1074+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1074+0x10
	mov	r1, #0x5
	bl	CreateTask
	add	r0, r5, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1069	@cond_branch
	mov	r0, sl
	strh	r7, [r0]
	b	.L1069
.L1075:
	.align	2, 0
.L1074:
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gOtherText_AlreadyHolding
	.word	Task_ConfirmGiveHeldItem
.L1065:
	ldr	r0, [r4]
	add	r1, r5, #0
	bl	PartyMenuUpdateMonHeldItem
	add	r0, r5, #0
	mov	r1, #0x1
	bl	RemoveBagItem
	add	r0, r5, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1070	@cond_branch
	mov	r1, r8
	str	r1, [r6]
	b	.L1069
.L1070:
	ldrb	r0, [r4, #0x5]
	mov	r1, r9
	mov	r2, #0x1
	bl	DisplayGiveHeldItemMessage
	ldr	r0, .L1076
	mov	r1, #0x5
	bl	CreateTask
.L1069:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1077:
	.align	2, 0
.L1076:
	.word	party_menu_link_mon_held_item_object
.Lfe121:
	.size	 PartyMenuTryGiveMonHeldItem,.Lfe121-PartyMenuTryGiveMonHeldItem
	.align	2, 0
	.globl	party_menu_link_mon_held_item_object
	.type	 party_menu_link_mon_held_item_object,function
	.thumb_func
party_menu_link_mon_held_item_object:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1080
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1079	@cond_branch
	ldr	r4, .L1080+0x4
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	bl	SetHeldItemIconVisibility
	ldr	r2, .L1080+0x8
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, [r4, #0x10]
	str	r1, [r0]
	add	r0, r5, #0
	bl	DestroyTask
.L1079:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1081:
	.align	2, 0
.L1080:
	.word	gUnknown_0202E8F6
	.word	gSharedMem+0x1c000
	.word	gTasks
.Lfe122:
	.size	 party_menu_link_mon_held_item_object,.Lfe122-party_menu_link_mon_held_item_object
	.align	2, 0
	.globl	PartyMenuTryGiveMonHeldItem_806EACC
	.type	 PartyMenuTryGiveMonHeldItem_806EACC,function
	.thumb_func
PartyMenuTryGiveMonHeldItem_806EACC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L1083	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldr	r4, .L1091
	ldr	r0, [r4]
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r4, #0x6]
	mov	r1, #0x1
	bl	RemoveBagItem
	add	r0, r5, #0
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1084	@cond_branch
	ldr	r0, [r4]
	ldrh	r1, [r4, #0x6]
	bl	PartyMenuUpdateMonHeldItem
	ldrh	r0, [r4, #0x6]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1085	@cond_branch
	ldrb	r0, [r4, #0x5]
	add	r1, r5, #0
	mov	r2, #0x1
	bl	DisplayTakeHeldItemMessage
	b	.L1088
.L1092:
	.align	2, 0
.L1091:
	.word	gSharedMem+0x1c000
.L1085:
	ldrh	r0, [r4, #0x6]
	ldr	r1, .L1093
	bl	CopyItemName
	ldr	r4, .L1093+0x4
	ldr	r1, .L1093+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	b	.L1088
.L1094:
	.align	2, 0
.L1093:
	.word	gStringVar1
	.word	gStringVar4
	.word	gOtherText_TakenAndReplaced
.L1084:
	ldr	r0, .L1095
	mov	r1, #0x0
	bl	sub_806E834
	ldrh	r0, [r4, #0x6]
	mov	r1, #0x1
	bl	AddBagItem
	b	.L1088
.L1096:
	.align	2, 0
.L1095:
	.word	gOtherText_BagFullCannotRemoveItem
.L1083:
	cmp	r1, #0x1
	beq	.L1089	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1082	@cond_branch
.L1089:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1090	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L1090:
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
.L1088:
	ldr	r0, .L1097
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1097+0x4
	str	r0, [r1]
.L1082:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1098:
	.align	2, 0
.L1097:
	.word	gTasks
	.word	party_menu_link_mon_held_item_object
.Lfe123:
	.size	 PartyMenuTryGiveMonHeldItem_806EACC,.Lfe123-PartyMenuTryGiveMonHeldItem_806EACC
	.align	2, 0
	.globl	Task_ConfirmGiveHeldItem
	.type	 Task_ConfirmGiveHeldItem,function
	.thumb_func
Task_ConfirmGiveHeldItem:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1101
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1100	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r0, .L1101+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1101+0x8
	str	r0, [r1]
.L1100:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1102:
	.align	2, 0
.L1101:
	.word	gUnknown_0202E8F6
	.word	gTasks
	.word	PartyMenuTryGiveMonHeldItem_806EACC
.Lfe124:
	.size	 Task_ConfirmGiveHeldItem,.Lfe124-Task_ConfirmGiveHeldItem
	.align	2, 0
	.globl	DisplayGiveHeldItemMessage
	.type	 DisplayGiveHeldItemMessage,function
	.thumb_func
DisplayGiveHeldItemMessage:
	push	{r4, r5, lr}
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1104
	add	r0, r0, r1
	ldr	r1, .L1104+0x4
	bl	GetMonNickname
	ldr	r1, .L1104+0x8
	add	r0, r4, #0
	bl	CopyItemName
	ldr	r4, .L1104+0xc
	ldr	r1, .L1104+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_806E834
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1105:
	.align	2, 0
.L1104:
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gOtherText_WasGivenToHold
.Lfe125:
	.size	 DisplayGiveHeldItemMessage,.Lfe125-DisplayGiveHeldItemMessage
	.align	2, 0
	.globl	PartyMenuTryGiveMonMail
	.type	 PartyMenuTryGiveMonMail,function
	.thumb_func
PartyMenuTryGiveMonMail:
	push	{r4, r5, lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1109
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldr	r3, .L1109+0x4
	str	r3, [r1]
	mov	r1, #0x0
	bl	sub_806E8D0
	ldr	r5, .L1109+0x8
	ldr	r0, [r5]
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	ldr	r2, .L1109+0xc
	mov	r1, #0x0
	strb	r1, [r2]
	mov	r1, #0xf8
	lsl	r1, r1, #0x6
	add	r2, r5, r1
	ldrb	r1, [r2]
	add	r1, r1, #0x6
	ldrb	r2, [r2, #0x2]
	add	r1, r1, r2
	lsl	r2, r1, #0x3
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	ldr	r1, .L1109+0x10
	add	r4, r2, r1
	cmp	r0, #0
	beq	.L1107	@cond_branch
	ldr	r0, .L1109+0x14
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1109+0x18
	mov	r1, #0x5
	bl	CreateTask
	b	.L1108
.L1110:
	.align	2, 0
.L1109:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1c000
	.word	gUnknown_0202E8F4
	.word	gSaveBlock1+0x2b4c
	.word	gOtherText_PokeHoldingItemCantMail
	.word	party_menu_link_mon_held_item_object
.L1107:
	ldr	r0, [r5]
	add	r1, r4, #0
	bl	GiveMailToMon2
	add	r0, r4, #0
	bl	ClearMailStruct
	ldr	r0, .L1111
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1111+0x4
	mov	r1, #0x5
	bl	CreateTask
.L1108:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1112:
	.align	2, 0
.L1111:
	.word	gOtherText_MailTransferredMailbox
	.word	party_menu_link_mon_held_item_object
.Lfe126:
	.size	 PartyMenuTryGiveMonMail,.Lfe126-PartyMenuTryGiveMonMail
	.align	2, 0
	.globl	PartyMenuTryGiveMonHeldItem_806ECE8
	.type	 PartyMenuTryGiveMonHeldItem_806ECE8,function
	.thumb_func
PartyMenuTryGiveMonHeldItem_806ECE8:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1119
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldr	r3, .L1119+0x4
	str	r3, [r1]
	mov	r1, #0x0
	bl	sub_806E8D0
	ldr	r5, .L1119+0x8
	ldr	r0, [r5]
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r6, r4, #0
	cmp	r4, #0
	bne	.L1114	@cond_branch
	ldr	r4, .L1119+0xc
	ldr	r1, .L1119+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_806E834
	ldr	r0, .L1119+0x14
	mov	r1, #0x5
	bl	CreateTask
	b	.L1115
.L1120:
	.align	2, 0
.L1119:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1c000
	.word	gStringVar4
	.word	gOtherText_NotHoldingAnything
	.word	party_menu_link_mon_held_item_object
.L1114:
	mov	r0, sp
	mov	r1, #0x0
	strb	r1, [r0]
	strb	r1, [r0, #0x1]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1116	@cond_branch
	add	r0, r4, #0
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1117	@cond_branch
	ldr	r0, [r5]
	bl	TakeMailFromMon
.L1117:
	ldrb	r0, [r5, #0x5]
	add	r1, r6, #0
	mov	r2, #0x0
	bl	DisplayTakeHeldItemMessage
	ldr	r0, [r5]
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	b	.L1118
.L1116:
	ldr	r0, .L1121
	mov	r1, #0x0
	bl	sub_806E834
.L1118:
	ldr	r0, .L1121+0x4
	mov	r1, #0x5
	bl	CreateTask
.L1115:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1122:
	.align	2, 0
.L1121:
	.word	gOtherText_BagFullCannotRemoveItem
	.word	party_menu_link_mon_held_item_object
.Lfe127:
	.size	 PartyMenuTryGiveMonHeldItem_806ECE8,.Lfe127-PartyMenuTryGiveMonHeldItem_806ECE8
	.align	2, 0
	.globl	DisplayTakeHeldItemMessage
	.type	 DisplayTakeHeldItemMessage,function
	.thumb_func
DisplayTakeHeldItemMessage:
	push	{r4, r5, lr}
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1124
	add	r0, r0, r1
	ldr	r1, .L1124+0x4
	bl	GetMonNickname
	ldr	r1, .L1124+0x8
	add	r0, r4, #0
	bl	CopyItemName
	ldr	r4, .L1124+0xc
	ldr	r1, .L1124+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_806E834
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1125:
	.align	2, 0
.L1124:
	.word	gPlayerParty
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gOtherText_ReceivedTheThingFrom
.Lfe128:
	.size	 DisplayTakeHeldItemMessage,.Lfe128-DisplayTakeHeldItemMessage
	.align	2, 0
	.globl	DoTakeMail
	.type	 DoTakeMail,function
	.thumb_func
DoTakeMail:
	push	{r4, lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1127
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldr	r3, .L1127+0x4
	str	r3, [r1]
	mov	r1, #0x0
	bl	sub_806E8D0
	ldr	r4, .L1127+0x8
	ldr	r0, [r4]
	mov	r1, #0xc
	bl	GetMonData
	strh	r0, [r4, #0x6]
	ldr	r0, .L1127+0xc
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1127+0x10
	mov	r1, #0x5
	bl	CreateTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1c000
	.word	gOtherText_SendRemovedMailPrompt
	.word	Task_ConfirmTakeHeldMail
.Lfe129:
	.size	 DoTakeMail,.Lfe129-DoTakeMail
	.align	2, 0
	.globl	Task_LoseMailMessage
	.type	 Task_LoseMailMessage,function
	.thumb_func
Task_LoseMailMessage:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L1130	@cond_branch
	ldr	r5, .L1137
	ldrh	r0, [r5, #0x6]
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1131	@cond_branch
	ldr	r0, [r5]
	bl	TakeMailFromMon
	ldr	r0, .L1137+0x4
	mov	r1, #0x0
	bl	sub_806E834
	b	.L1132
.L1138:
	.align	2, 0
.L1137:
	.word	gSharedMem+0x1c000
	.word	gOtherText_MailTaken
.L1131:
	ldr	r0, .L1139
	mov	r1, #0x0
	bl	sub_806E834
.L1132:
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	b	.L1136
.L1140:
	.align	2, 0
.L1139:
	.word	gOtherText_BagFullCannotRemoveItem
.L1130:
	cmp	r1, #0x1
	beq	.L1134	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1129	@cond_branch
.L1134:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1135	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L1135:
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	mov	r0, #0x0
	mov	r1, #0xe
	mov	r2, #0x1d
	mov	r3, #0x13
.L1136:
	bl	MenuZeroFillWindowRect
	ldr	r0, .L1141
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1141+0x4
	str	r0, [r1]
.L1129:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1142:
	.align	2, 0
.L1141:
	.word	gTasks
	.word	party_menu_link_mon_held_item_object
.Lfe130:
	.size	 Task_LoseMailMessage,.Lfe130-Task_LoseMailMessage
	.align	2, 0
	.globl	Task_ConfirmLoseMailMessage
	.type	 Task_ConfirmLoseMailMessage,function
	.thumb_func
Task_ConfirmLoseMailMessage:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1145
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1144	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r0, .L1145+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1145+0x8
	str	r0, [r1]
.L1144:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1146:
	.align	2, 0
.L1145:
	.word	gUnknown_0202E8F6
	.word	gTasks
	.word	Task_LoseMailMessage
.Lfe131:
	.size	 Task_ConfirmLoseMailMessage,.Lfe131-Task_ConfirmLoseMailMessage
	.align	2, 0
	.globl	Task_TakeHeldMail
	.type	 Task_TakeHeldMail,function
	.thumb_func
Task_TakeHeldMail:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L1148	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldr	r0, .L1154
	ldr	r0, [r0]
	bl	TakeMailFromMon2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1149	@cond_branch
	ldr	r0, .L1154+0x4
	mov	r1, #0x0
	bl	sub_806E834
	b	.L1150
.L1155:
	.align	2, 0
.L1154:
	.word	gSharedMem+0x1c000
	.word	gOtherText_MailWasSent
.L1149:
	ldr	r0, .L1156
	mov	r1, #0x0
	bl	sub_806E834
.L1150:
	ldr	r0, .L1156+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1156+0x8
	str	r0, [r1]
	b	.L1147
.L1157:
	.align	2, 0
.L1156:
	.word	gOtherText_MailboxIsFull
	.word	gTasks
	.word	party_menu_link_mon_held_item_object
.L1148:
	cmp	r1, #0x1
	beq	.L1152	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1147	@cond_branch
.L1152:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1153	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L1153:
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldr	r0, .L1158
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1158+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1158+0x8
	str	r1, [r0]
.L1147:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1159:
	.align	2, 0
.L1158:
	.word	gOtherText_MailRemovedMessageLost
	.word	gTasks
	.word	Task_ConfirmLoseMailMessage
.Lfe132:
	.size	 Task_TakeHeldMail,.Lfe132-Task_TakeHeldMail
	.align	2, 0
	.globl	Task_ConfirmTakeHeldMail
	.type	 Task_ConfirmTakeHeldMail,function
	.thumb_func
Task_ConfirmTakeHeldMail:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1162
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1161	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r0, .L1162+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1162+0x8
	str	r0, [r1]
.L1161:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1163:
	.align	2, 0
.L1162:
	.word	gUnknown_0202E8F6
	.word	gTasks
	.word	Task_TakeHeldMail
.Lfe133:
	.size	 Task_ConfirmTakeHeldMail,.Lfe133-Task_ConfirmTakeHeldMail
	.align	2, 0
	.globl	ItemIdToBattleMoveId
	.type	 ItemIdToBattleMoveId,function
	.thumb_func
ItemIdToBattleMoveId:
	lsl	r0, r0, #0x10
	ldr	r1, .L1165
	add	r0, r0, r1
	ldr	r1, .L1165+0x4
	lsr	r0, r0, #0xf
	add	r0, r0, r1
	ldrh	r0, [r0]
	bx	lr
.L1166:
	.align	2, 0
.L1165:
	.word	0xfedf0000
	.word	TMHMMoves
.Lfe134:
	.size	 ItemIdToBattleMoveId,.Lfe134-ItemIdToBattleMoveId
	.align	2, 0
	.globl	pokemon_has_move
	.type	 pokemon_has_move,function
	.thumb_func
pokemon_has_move:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r4, #0x0
.L1171:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	bl	GetMonData
	cmp	r0, r5
	bne	.L1170	@cond_branch
	mov	r0, #0x1
	b	.L1174
.L1170:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L1171	@cond_branch
	mov	r0, #0x0
.L1174:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe135:
	.size	 pokemon_has_move,.Lfe135-pokemon_has_move
	.align	2, 0
	.globl	TeachMonTMMove
	.type	 TeachMonTMMove,function
	.thumb_func
TeachMonTMMove:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L1176
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1176+0x4
	str	r1, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	sub_806E8D0
	ldr	r0, .L1176+0x8
	mov	r1, #0x5
	bl	CreateTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1177:
	.align	2, 0
.L1176:
	.word	gTasks
	.word	TaskDummy
	.word	Task_TeamMonTMMove
.Lfe136:
	.size	 TeachMonTMMove,.Lfe136-TeachMonTMMove
	.align	2, 0
	.globl	Task_TeamMonTMMove
	.type	 Task_TeamMonTMMove,function
	.thumb_func
Task_TeamMonTMMove:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r7, r6, #0
	ldr	r5, .L1186
	ldr	r0, [r5]
	ldr	r1, .L1186+0x4
	bl	GetMonNickname
	ldrh	r0, [r5, #0x6]
	bl	ItemIdToBattleMoveId
	mov	r4, #0x0
	strh	r0, [r5, #0x8]
	ldr	r0, .L1186+0x8
	ldrh	r2, [r5, #0x8]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L1186+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r1, .L1186+0x10
	add	r0, r5, r1
	strh	r4, [r0]
	ldr	r0, [r5]
	ldrh	r1, [r5, #0x8]
	bl	pokemon_has_move
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1179	@cond_branch
	ldr	r4, .L1186+0x14
	ldr	r1, .L1186+0x18
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1186+0x1c
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1186+0x20
	b	.L1185
.L1187:
	.align	2, 0
.L1186:
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	0xfffff282
	.word	gStringVar4
	.word	gOtherText_AlreadyKnows
	.word	gTasks
	.word	party_menu_link_mon_held_item_object
.L1179:
	ldr	r0, [r5]
	ldrb	r1, [r5, #0x6]
	sub	r1, r1, #0x21
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	CanMonLearnTMHM
	cmp	r0, #0
	bne	.L1181	@cond_branch
	ldr	r4, .L1188
	ldr	r1, .L1188+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1188+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1188+0xc
	b	.L1185
.L1189:
	.align	2, 0
.L1188:
	.word	gStringVar4
	.word	gOtherText_NotCompatible
	.word	gTasks
	.word	party_menu_link_mon_held_item_object
.L1181:
	ldr	r0, [r5]
	ldrh	r1, [r5, #0x8]
	bl	GiveMoveToMon
	lsl	r0, r0, #0x10
	ldr	r1, .L1190
	cmp	r0, r1
	beq	.L1183	@cond_branch
	add	r0, r6, #0
	bl	Task_TeamMonTMMove2
	b	.L1180
.L1191:
	.align	2, 0
.L1190:
	.word	0xffff0000
.L1183:
	ldr	r4, .L1192
	ldr	r1, .L1192+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1192+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1192+0xc
.L1185:
	str	r1, [r0]
.L1180:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1193:
	.align	2, 0
.L1192:
	.word	gStringVar4
	.word	gOtherText_WantsToLearn
	.word	gTasks
	.word	sub_806F358
.Lfe137:
	.size	 Task_TeamMonTMMove,.Lfe137-Task_TeamMonTMMove
	.align	2, 0
	.globl	Task_TeamMonTMMove2
	.type	 Task_TeamMonTMMove2,function
	.thumb_func
Task_TeamMonTMMove2:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1196
	ldr	r5, .L1196+0x4
	ldrh	r2, [r5, #0x8]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L1196+0x8
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1196+0xc
	ldr	r1, .L1196+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, [r5]
	mov	r1, #0x4
	bl	AdjustFriendship
	ldr	r1, .L1196+0x14
	add	r0, r5, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1195	@cond_branch
	ldrh	r1, [r5, #0x6]
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bhi	.L1195	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x1
	bl	RemoveBagItem
.L1195:
	ldr	r0, .L1196+0x18
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1196+0x1c
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1197:
	.align	2, 0
.L1196:
	.word	gStringVar2
	.word	gSharedMem+0x1c000
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_LearnedMove
	.word	0xfffff282
	.word	gTasks
	.word	Task_TeamMonTMMove3
.Lfe138:
	.size	 Task_TeamMonTMMove2,.Lfe138-Task_TeamMonTMMove2
	.align	2, 0
	.globl	Task_TeamMonTMMove3
	.type	 Task_TeamMonTMMove3,function
	.thumb_func
Task_TeamMonTMMove3:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1200
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1199	@cond_branch
	ldr	r0, .L1200+0x4
	bl	PlayFanfare
	ldr	r1, .L1200+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1200+0xc
	str	r1, [r0]
.L1199:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1201:
	.align	2, 0
.L1200:
	.word	gUnknown_0202E8F6
	.word	0x16f
	.word	gTasks
	.word	Task_TeamMonTMMove4
.Lfe139:
	.size	 Task_TeamMonTMMove3,.Lfe139-Task_TeamMonTMMove3
	.align	2, 0
	.globl	Task_TeamMonTMMove4
	.type	 Task_TeamMonTMMove4,function
	.thumb_func
Task_TeamMonTMMove4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1203	@cond_branch
	ldr	r0, .L1208
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1205	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1203	@cond_branch
.L1205:
	ldr	r4, .L1208+0x4
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	bl	SetHeldItemIconVisibility
	ldr	r1, .L1208+0x8
	add	r0, r4, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L1206	@cond_branch
	add	r0, r5, #0
	bl	TeachMonMoveInPartyMenu
	b	.L1203
.L1209:
	.align	2, 0
.L1208:
	.word	gMain
	.word	gSharedMem+0x1c000
	.word	0xfffff282
.L1206:
	ldr	r2, .L1210
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, [r4, #0x10]
	str	r1, [r0]
	add	r0, r6, #0
	bl	DestroyTask
.L1203:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1211:
	.align	2, 0
.L1210:
	.word	gTasks
.Lfe140:
	.size	 Task_TeamMonTMMove4,.Lfe140-Task_TeamMonTMMove4
	.align	2, 0
	.globl	sub_806F2FC
	.type	 sub_806F2FC,function
	.thumb_func
sub_806F2FC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	ldr	r0, .L1216
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1213	@cond_branch
	ldr	r4, .L1216+0x4
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	bl	SetHeldItemIconVisibility
	ldr	r1, .L1216+0x8
	add	r0, r4, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L1214	@cond_branch
	add	r0, r5, #0
	bl	TeachMonMoveInPartyMenu
	b	.L1213
.L1217:
	.align	2, 0
.L1216:
	.word	gUnknown_0202E8F6
	.word	gSharedMem+0x1c000
	.word	0xfffff282
.L1214:
	ldr	r2, .L1218
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, [r4, #0x10]
	str	r1, [r0]
	add	r0, r6, #0
	bl	DestroyTask
.L1213:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1219:
	.align	2, 0
.L1218:
	.word	gTasks
.Lfe141:
	.size	 sub_806F2FC,.Lfe141-sub_806F2FC
	.align	2, 0
	.globl	sub_806F358
	.type	 sub_806F358,function
	.thumb_func
sub_806F358:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1222
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1221	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r0, .L1222+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1222+0x8
	str	r0, [r1]
.L1221:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1223:
	.align	2, 0
.L1222:
	.word	gUnknown_0202E8F6
	.word	gTasks
	.word	sub_806F390
.Lfe142:
	.size	 sub_806F358,.Lfe142-sub_806F358
	.align	2, 0
	.globl	sub_806F390
	.type	 sub_806F390,function
	.thumb_func
sub_806F390:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L1225	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldr	r0, .L1229
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1229+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1229+0x8
	str	r1, [r0]
	b	.L1224
.L1230:
	.align	2, 0
.L1229:
	.word	gOtherText_WhichMoveToForget2
	.word	gTasks
	.word	sub_806F44C
.L1225:
	cmp	r1, #0x1
	beq	.L1227	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1224	@cond_branch
.L1227:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1228	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L1228:
	add	r0, r5, #0
	bl	StopTryingToTeachMove_806F614
.L1224:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe143:
	.size	 sub_806F390,.Lfe143-sub_806F390
	.align	2, 0
	.globl	sub_806F3FC
	.type	 sub_806F3FC,function
	.thumb_func
sub_806F3FC:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1233
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1232	@cond_branch
	ldr	r0, .L1233+0x4
	ldr	r4, .L1233+0x8
	ldrb	r1, [r4, #0x5]
	ldr	r2, .L1233+0xc
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L1233+0x10
	ldrh	r4, [r4, #0x8]
	str	r4, [sp]
	bl	sub_809D9F0
	add	r0, r5, #0
	bl	DestroyTask
.L1232:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1234:
	.align	2, 0
.L1233:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	gSharedMem+0x1c000
	.word	gPlayerPartyCount
	.word	sub_808B564
.Lfe144:
	.size	 sub_806F3FC,.Lfe144-sub_806F3FC
	.align	2, 0
	.globl	sub_806F44C
	.type	 sub_806F44C,function
	.thumb_func
sub_806F44C:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1237
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L1236	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1237+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1237+0x8
	str	r1, [r0]
.L1236:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1238:
	.align	2, 0
.L1237:
	.word	gUnknown_0202E8F6
	.word	gTasks
	.word	sub_806F3FC
.Lfe145:
	.size	 sub_806F44C,.Lfe145-sub_806F44C
	.align	2, 0
	.globl	TaughtMove
	.type	 TaughtMove,function
	.thumb_func
TaughtMove:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L1241
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1240	@cond_branch
	ldr	r1, .L1241+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1241+0x8
	str	r1, [r0]
	ldr	r0, .L1241+0xc
	ldrh	r1, [r0]
	ldr	r2, .L1241+0x10
	add	r0, r3, #0
	bl	sub_806E8D0
	bl	sub_809FA30
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r5, .L1241+0x14
	ldr	r0, [r5]
	add	r1, r1, #0xd
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, [r5]
	ldr	r1, .L1241+0x18
	bl	GetMonNickname
	ldr	r0, .L1241+0x1c
	lsl	r1, r4, #0x4
	sub	r1, r1, r4
	ldr	r2, .L1241+0x20
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1241+0x24
	ldr	r1, .L1241+0x28
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1241+0x2c
	mov	r1, #0x5
	bl	CreateTask
.L1240:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1242:
	.align	2, 0
.L1241:
	.word	gPaletteFade
	.word	gTasks
	.word	TaskDummy
	.word	gScriptItemId
	.word	sub_808B508
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_ForgetMove123_2
	.word	TMMoveUpdateMoveSlot
.Lfe146:
	.size	 TaughtMove,.Lfe146-TaughtMove
	.align	2, 0
	.globl	TMMoveUpdateMoveSlot
	.type	 TMMoveUpdateMoveSlot,function
	.thumb_func
TMMoveUpdateMoveSlot:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1245
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1244	@cond_branch
	ldr	r4, .L1245+0x4
	ldr	r5, [r4]
	bl	sub_809FA30
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	RemoveMonPPBonus
	ldr	r5, [r4]
	ldrh	r4, [r4, #0x8]
	bl	sub_809FA30
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	SetMonMoveSlot
	add	r0, r6, #0
	bl	Task_TeamMonTMMove2
.L1244:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1246:
	.align	2, 0
.L1245:
	.word	gUnknown_0202E8F6
	.word	gSharedMem+0x1c000
.Lfe147:
	.size	 TMMoveUpdateMoveSlot,.Lfe147-TMMoveUpdateMoveSlot
	.align	2, 0
	.globl	StopTryingToTeachMove_806F588
	.type	 StopTryingToTeachMove_806F588,function
	.thumb_func
StopTryingToTeachMove_806F588:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L1249
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1248	@cond_branch
	ldr	r1, .L1249+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1249+0x8
	str	r1, [r0]
	ldr	r0, .L1249+0xc
	ldrh	r1, [r0]
	ldr	r2, .L1249+0x10
	add	r0, r3, #0
	bl	sub_806E8D0
	ldr	r0, .L1249+0x14
	ldr	r1, .L1249+0x18
	ldrh	r2, [r1, #0x8]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L1249+0x1c
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1249+0x20
	ldr	r1, .L1249+0x24
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1249+0x28
	mov	r1, #0x5
	bl	CreateTask
.L1248:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1250:
	.align	2, 0
.L1249:
	.word	gPaletteFade
	.word	gTasks
	.word	TaskDummy
	.word	gScriptItemId
	.word	sub_808B508
	.word	gStringVar2
	.word	gSharedMem+0x1c000
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_StopTryingTo
	.word	StopTryingToTeachMove_806F67C
.Lfe148:
	.size	 StopTryingToTeachMove_806F588,.Lfe148-StopTryingToTeachMove_806F588
	.align	2, 0
	.globl	StopTryingToTeachMove_806F614
	.type	 StopTryingToTeachMove_806F614,function
	.thumb_func
StopTryingToTeachMove_806F614:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldr	r0, .L1252
	ldr	r1, .L1252+0x4
	ldrh	r2, [r1, #0x8]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L1252+0x8
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1252+0xc
	ldr	r1, .L1252+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1252+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1252+0x18
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1253:
	.align	2, 0
.L1252:
	.word	gStringVar2
	.word	gSharedMem+0x1c000
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_StopTryingTo
	.word	gTasks
	.word	StopTryingToTeachMove_806F67C
.Lfe149:
	.size	 StopTryingToTeachMove_806F614,.Lfe149-StopTryingToTeachMove_806F614
	.align	2, 0
	.globl	StopTryingToTeachMove_806F67C
	.type	 StopTryingToTeachMove_806F67C,function
	.thumb_func
StopTryingToTeachMove_806F67C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1256
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1255	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r0, .L1256+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1256+0x8
	str	r0, [r1]
.L1255:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1257:
	.align	2, 0
.L1256:
	.word	gUnknown_0202E8F6
	.word	gTasks
	.word	StopTryingToTeachMove_806F6B4
.Lfe150:
	.size	 StopTryingToTeachMove_806F67C,.Lfe150-StopTryingToTeachMove_806F67C
	.align	2, 0
	.globl	StopTryingToTeachMove_806F6B4
	.type	 StopTryingToTeachMove_806F6B4,function
	.thumb_func
StopTryingToTeachMove_806F6B4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L1259	@cond_branch
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldr	r4, .L1264
	ldr	r0, [r4]
	ldr	r1, .L1264+0x4
	bl	GetMonNickname
	ldr	r0, .L1264+0x8
	ldrh	r2, [r4, #0x8]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L1264+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1264+0x10
	ldr	r1, .L1264+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1264+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1264+0x1c
	b	.L1263
.L1265:
	.align	2, 0
.L1264:
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_DidNotLearnMove2
	.word	gTasks
	.word	sub_806F2FC
.L1259:
	cmp	r1, #0x1
	beq	.L1261	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1258	@cond_branch
.L1261:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1262	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L1262:
	mov	r0, #0x16
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldr	r4, .L1266
	ldr	r0, [r4]
	ldr	r1, .L1266+0x4
	bl	GetMonNickname
	ldr	r0, .L1266+0x8
	ldrh	r2, [r4, #0x8]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L1266+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1266+0x10
	ldr	r1, .L1266+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1266+0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1266+0x1c
.L1263:
	str	r1, [r0]
.L1258:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1267:
	.align	2, 0
.L1266:
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_WantsToLearn
	.word	gTasks
	.word	sub_806F358
.Lfe151:
	.size	 StopTryingToTeachMove_806F6B4,.Lfe151-StopTryingToTeachMove_806F6B4
	.align	2, 0
	.globl	IsHMMove
	.type	 IsHMMove,function
	.thumb_func
IsHMMove:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x0
	ldr	r3, .L1276
.L1272:
	add	r0, r1, #0
	add	r0, r0, #0x32
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L1271	@cond_branch
	mov	r0, #0x1
	b	.L1275
.L1277:
	.align	2, 0
.L1276:
	.word	TMHMMoves
.L1271:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x7
	bls	.L1272	@cond_branch
	mov	r0, #0x0
.L1275:
	pop	{r1}
	bx	r1
.Lfe152:
	.size	 IsHMMove,.Lfe152-IsHMMove
	.align	2, 0
	.globl	sub_806F7E8
	.type	 sub_806F7E8,function
	.thumb_func
sub_806F7E8:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x3
	ldr	r0, .L1282
	add	r3, r3, r0
	mov	r0, #0x14
	ldrsh	r1, [r3, r0]
	str	r1, [r5]
	mov	r4, #0x16
	ldrsh	r0, [r3, r4]
	str	r0, [r5, #0x4]
	mov	r4, #0x18
	ldrsh	r0, [r3, r4]
	lsl	r2, r2, #0x18
	asr	r2, r2, #0x18
	mul	r0, r0, r2
	str	r0, [r5, #0x8]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	str	r0, [r5, #0x10]
	ldr	r6, .L1282+0x4
	ldr	r2, .L1282+0x8
	add	r0, r6, r2
	mov	r4, #0x0
	ldrsh	r0, [r0, r4]
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	cmp	r2, #0x2
	bls	.L1279	@cond_branch
	ldrb	r0, [r5, #0xc]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r5, #0xc]
.L1279:
	cmp	r2, #0x2
	bne	.L1280	@cond_branch
	ldrb	r0, [r5, #0xc]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x5
	orr	r1, r1, r0
	strb	r1, [r5, #0xc]
.L1280:
	cmp	r3, #0x1
	bhi	.L1281	@cond_branch
	ldrb	r0, [r5, #0xc]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x6
	orr	r1, r1, r0
	strb	r1, [r5, #0xc]
.L1281:
	ldr	r4, .L1282+0xc
	bl	IsDoubleBattle
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r1, r6, r2
	ldrb	r2, [r1, #0x5]
	lsl	r2, r2, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r2, r1
	add	r2, r2, r4
	ldr	r2, [r2]
	ldr	r4, .L1282+0x10
	add	r1, r6, r4
	add	r0, r5, #0
	mov	r3, #0x0
	bl	sub_80460C8
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1283:
	.align	2, 0
.L1282:
	.word	gTasks+0x8
	.word	gSharedMem+0x1b000
	.word	0x282
	.word	gUnknown_08376858
	.word	0x100c
.Lfe153:
	.size	 sub_806F7E8,.Lfe153-sub_806F7E8
	.align	2, 0
	.globl	sub_806F8AC
	.type	 sub_806F8AC,function
	.thumb_func
sub_806F8AC:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffe8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x1
	neg	r4, r4
	add	r0, r6, #0
	mov	r1, sp
	add	r2, r4, #0
	bl	sub_806F7E8
	ldr	r1, .L1292
	ldr	r2, .L1292+0x4
	add	r5, r1, r2
	strh	r0, [r5]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r4
	beq	.LCB11955
	b	.L1285	@long jump
.LCB11955:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	mov	r0, #0x0
	str	r0, [r1, #0xc]
	ldr	r0, [sp, #0x8]
	neg	r3, r0
	ldr	r2, [sp, #0x4]
	add	r0, r3, r2
	ldr	r1, [sp]
	cmp	r0, r1
	ble	.L1286	@cond_branch
	sub	r1, r1, r2
	add	r0, sp, #0x14
	strh	r1, [r0]
	b	.L1291
.L1293:
	.align	2, 0
.L1292:
	.word	gSharedMem+0x1b000
	.word	0x282
.L1286:
	add	r0, sp, #0x14
	strh	r3, [r0]
.L1291:
	add	r5, r0, #0
	ldr	r1, .L1294
	ldrh	r0, [r5]
	neg	r0, r0
	str	r0, [r1]
	ldr	r0, .L1294+0x4
	ldr	r0, [r0]
	ldr	r1, .L1294+0x8
	bl	GetMonNickname
	ldr	r0, .L1294+0xc
	ldrh	r1, [r5]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r2, .L1294+0x10
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x24
	ldrsh	r0, [r0, r2]
	add	r7, r1, #0
	cmp	r0, #0
	bne	.L1288	@cond_branch
	ldr	r0, .L1294+0x14
	ldr	r1, .L1294+0x18
	bl	StringExpandPlaceholders
	b	.L1289
.L1295:
	.align	2, 0
.L1294:
	.word	gBattleMoveDamage
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar2
	.word	gTasks
	.word	gStringVar4
	.word	gOtherText_HPRestoredBy
.L1288:
	ldr	r0, .L1296
	ldr	r1, .L1296+0x4
	bl	StringExpandPlaceholders
.L1289:
	ldr	r4, .L1296+0x8
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x5]
	bl	GetMonIconSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	bl	SetMonIconAnim
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r1, .L1296+0xc
	add	r0, r0, r1
	mov	r1, #0x7
	bl	task_pc_turn_off
	ldr	r0, .L1296+0x10
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	ldr	r0, .L1296
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, [sp, #0x4]
	ldrh	r0, [r5]
	add	r0, r0, r1
	strh	r0, [r5]
	ldr	r0, [r4]
	mov	r1, #0x39
	add	r2, r5, #0
	bl	SetMonData
	ldrh	r0, [r4, #0x6]
	mov	r1, #0x1
	bl	RemoveBagItem
	bl	sub_8032638
	ldr	r1, .L1296+0x14
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1296+0x18
	str	r1, [r0]
	b	.L1290
.L1297:
	.align	2, 0
.L1296:
	.word	gStringVar4
	.word	gOtherText_RegainedHealth
	.word	gSharedMem+0x1c000
	.word	gUnknown_083769A8
	.word	0xfffff261
	.word	gTasks
	.word	sub_806FB44
.L1285:
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r0, r1, r2
	ldrb	r4, [r0, #0x5]
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r5]
	ldr	r3, [sp]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	add	r0, r4, #0
	bl	PartyMenuDoPrintHP
.L1290:
	add	sp, sp, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe154:
	.size	 sub_806F8AC,.Lfe154-sub_806F8AC
	.align	2, 0
	.globl	sub_806FA18
	.type	 sub_806FA18,function
	.thumb_func
sub_806FA18:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffec
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, sp
	mov	r2, #0x1
	bl	sub_806F7E8
	ldr	r6, .L1301
	ldr	r1, .L1301+0x4
	add	r7, r6, r1
	strh	r0, [r7]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L1299	@cond_branch
	mov	r0, #0x1
	bl	PlaySE
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	add	r4, r6, r0
	mov	r0, #0x0
	str	r0, [r4, #0xc]
	ldr	r2, .L1301+0x8
	lsl	r3, r5, #0x2
	add	r3, r3, r5
	lsl	r3, r3, #0x3
	add	r5, r3, r2
	ldrh	r0, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r0, r0, r1
	strh	r0, [r5, #0x1e]
	ldr	r0, [r4]
	add	r2, r2, r3
	add	r2, r2, #0x1e
	mov	r1, #0x39
	bl	SetMonData
	ldrb	r0, [r4, #0x4]
	ldr	r1, .L1301+0xc
	add	r6, r6, r1
	ldrb	r1, [r6, #0x1]
	bl	GetMonIconSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r4]
	bl	SetMonIconAnim
	ldr	r2, .L1301+0x10
	ldrb	r1, [r6, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strb	r0, [r4, #0x5]
	ldrb	r1, [r4, #0x5]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1301+0x14
	add	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r5, #0x1c]
	ldr	r0, [r4]
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5, #0x1e]
	ldr	r0, .L1301+0x18
	str	r0, [r4, #0xc]
	ldr	r0, [r4, #0x10]
	str	r0, [r4, #0x14]
	ldr	r0, .L1301+0x1c
	str	r0, [r5]
	ldrh	r0, [r5, #0x1e]
	strh	r0, [r7]
	b	.L1300
.L1302:
	.align	2, 0
.L1301:
	.word	gSharedMem+0x1b000
	.word	0x282
	.word	gTasks
	.word	0xfffe6000
	.word	gSprites
	.word	gPlayerParty
	.word	0xffff8000
	.word	sub_806F8AC
.L1299:
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	add	r0, r6, r1
	ldrb	r4, [r0, #0x5]
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrh	r2, [r7]
	ldr	r3, [sp]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	add	r0, r4, #0
	bl	PartyMenuDoPrintHP
.L1300:
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe155:
	.size	 sub_806FA18,.Lfe155-sub_806FA18
	.align	2, 0
	.globl	sub_806FB0C
	.type	 sub_806FB0C,function
	.thumb_func
sub_806FB0C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1305
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1304	@cond_branch
	ldr	r3, .L1305+0x4
	ldr	r2, .L1305+0x8
	ldrb	r1, [r2, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r1, [r2, #0x10]
	str	r1, [r0]
	add	r0, r4, #0
	bl	DestroyTask
.L1304:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1306:
	.align	2, 0
.L1305:
	.word	gUnknown_0202E8F6
	.word	gTasks
	.word	gSharedMem+0x1c000
.Lfe156:
	.size	 sub_806FB0C,.Lfe156-sub_806FB0C
	.align	2, 0
	.globl	sub_806FB44
	.type	 sub_806FB44,function
	.thumb_func
sub_806FB44:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1309
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1308	@cond_branch
	ldr	r3, .L1309+0x4
	ldr	r2, .L1309+0x8
	ldrb	r1, [r2, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r1, [r2, #0x14]
	str	r1, [r0]
	add	r0, r4, #0
	bl	DestroyTask
.L1308:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1310:
	.align	2, 0
.L1309:
	.word	gUnknown_0202E8F6
	.word	gTasks
	.word	gSharedMem+0x1c000
.Lfe157:
	.size	 sub_806FB44,.Lfe157-sub_806FB44
	.align	2, 0
	.globl	IsHPRecoveryItem
	.type	 IsHPRecoveryItem,function
	.thumb_func
IsHPRecoveryItem:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1312	@cond_branch
	ldr	r0, .L1317
	b	.L1313
.L1318:
	.align	2, 0
.L1317:
	.word	gSaveBlock1+0x3676
.L1312:
	ldr	r1, .L1319
	sub	r0, r0, #0xd
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
.L1313:
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1314	@cond_branch
	mov	r0, #0x0
	b	.L1316
.L1320:
	.align	2, 0
.L1319:
	.word	gItemEffectTable
.L1314:
	mov	r0, #0x1
.L1316:
	pop	{r1}
	bx	r1
.Lfe158:
	.size	 IsHPRecoveryItem,.Lfe158-IsHPRecoveryItem
	.align	2, 0
	.globl	PartyMenuUpdateLevelOrStatus
	.type	 PartyMenuUpdateLevelOrStatus,function
	.thumb_func
PartyMenuUpdateLevelOrStatus:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PartyMenuClearLevelStatusTilemap
	add	r0, r4, #0
	add	r1, r5, #0
	bl	PartyMenuPrintMonLevelOrStatus
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe159:
	.size	 PartyMenuUpdateLevelOrStatus,.Lfe159-PartyMenuUpdateLevelOrStatus
	.align	2, 0
	.globl	GetMedicineItemEffectMessage
	.type	 GetMedicineItemEffectMessage,function
	.thumb_func
GetMedicineItemEffectMessage:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetItemEffectType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x3
	cmp	r0, #0x12
	bls	.LCB12458
	b	.L1341	@long jump
.LCB12458:
	lsl	r0, r0, #0x2
	ldr	r1, .L1344
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1345:
	.align	2, 0
.L1344:
	.word	.L1342
	.align	2, 0
	.align	2, 0
.L1342:
	.word	.L1324
	.word	.L1325
	.word	.L1326
	.word	.L1327
	.word	.L1328
	.word	.L1329
	.word	.L1330
	.word	.L1341
	.word	.L1331
	.word	.L1333
	.word	.L1332
	.word	.L1336
	.word	.L1337
	.word	.L1335
	.word	.L1334
	.word	.L1341
	.word	.L1339
	.word	.L1339
	.word	.L1340
.L1324:
	ldr	r0, .L1346
	ldr	r1, .L1346+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1347:
	.align	2, 0
.L1346:
	.word	gStringVar4
	.word	gOtherText_CuredPoisoning
.L1325:
	ldr	r0, .L1348
	ldr	r1, .L1348+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1349:
	.align	2, 0
.L1348:
	.word	gStringVar4
	.word	gOtherText_WokeUp
.L1326:
	ldr	r0, .L1350
	ldr	r1, .L1350+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1351:
	.align	2, 0
.L1350:
	.word	gStringVar4
	.word	gOtherText_BurnHealed
.L1327:
	ldr	r0, .L1352
	ldr	r1, .L1352+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1353:
	.align	2, 0
.L1352:
	.word	gStringVar4
	.word	gOtherText_ThawedOut
.L1328:
	ldr	r0, .L1354
	ldr	r1, .L1354+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1355:
	.align	2, 0
.L1354:
	.word	gStringVar4
	.word	gOtherText_CuredParalysis
.L1329:
	ldr	r0, .L1356
	ldr	r1, .L1356+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1357:
	.align	2, 0
.L1356:
	.word	gStringVar4
	.word	gOtherText_SnapConfusion
.L1330:
	ldr	r0, .L1358
	ldr	r1, .L1358+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1359:
	.align	2, 0
.L1358:
	.word	gStringVar4
	.word	gOtherText_GotOverLove
.L1331:
	ldr	r0, .L1360
	ldr	r1, .L1360+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1361:
	.align	2, 0
.L1360:
	.word	gStringVar4
	.word	gOtherText_BecameHealthy
.L1332:
	ldr	r0, .L1362
	ldr	r1, .L1362+0x4
	b	.L1343
.L1363:
	.align	2, 0
.L1362:
	.word	gStringVar2
	.word	gOtherText_Hp2
.L1333:
	ldr	r0, .L1364
	ldr	r1, .L1364+0x4
	b	.L1343
.L1365:
	.align	2, 0
.L1364:
	.word	gStringVar2
	.word	gOtherText_Attack
.L1334:
	ldr	r0, .L1366
	ldr	r1, .L1366+0x4
	b	.L1343
.L1367:
	.align	2, 0
.L1366:
	.word	gStringVar2
	.word	gOtherText_Defense
.L1335:
	ldr	r0, .L1368
	ldr	r1, .L1368+0x4
	b	.L1343
.L1369:
	.align	2, 0
.L1368:
	.word	gStringVar2
	.word	gOtherText_Speed
.L1336:
	ldr	r0, .L1370
	ldr	r1, .L1370+0x4
	b	.L1343
.L1371:
	.align	2, 0
.L1370:
	.word	gStringVar2
	.word	gOtherText_SpAtk2
.L1337:
	ldr	r0, .L1372
	ldr	r1, .L1372+0x4
.L1343:
	bl	StringCopy
	ldr	r0, .L1372+0x8
	ldr	r1, .L1372+0xc
	bl	StringExpandPlaceholders
	b	.L1323
.L1373:
	.align	2, 0
.L1372:
	.word	gStringVar2
	.word	gOtherText_SpDef2
	.word	gStringVar4
	.word	gOtherText_WasRaised
.L1339:
	ldr	r0, .L1374
	ldr	r1, .L1374+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1375:
	.align	2, 0
.L1374:
	.word	gStringVar4
	.word	gOtherText_PPIncreased
.L1340:
	ldr	r0, .L1376
	ldr	r1, .L1376+0x4
	bl	StringExpandPlaceholders
	b	.L1323
.L1377:
	.align	2, 0
.L1376:
	.word	gStringVar4
	.word	gOtherText_PPRestored
.L1341:
	ldr	r0, .L1378
	ldr	r1, .L1378+0x4
	bl	StringExpandPlaceholders
.L1323:
	pop	{r0}
	bx	r0
.L1379:
	.align	2, 0
.L1378:
	.word	gStringVar4
	.word	gOtherText_WontHaveAnyEffect
.Lfe160:
	.size	 GetMedicineItemEffectMessage,.Lfe160-GetMedicineItemEffectMessage
	.align	2, 0
	.globl	IsMedicineIneffective
	.type	 IsMedicineIneffective,function
	.thumb_func
IsMedicineIneffective:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	GetItemEffectType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xd
	bne	.L1381	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, .L1384
	cmp	r0, r1
	bne	.L1381	@cond_branch
	mov	r0, #0x1
	b	.L1383
.L1385:
	.align	2, 0
.L1384:
	.word	0x12f
.L1381:
	mov	r0, #0x0
.L1383:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe161:
	.size	 IsMedicineIneffective,.Lfe161-IsMedicineIneffective
	.align	2, 0
	.globl	ExecuteTableBasedItemEffect__
	.type	 ExecuteTableBasedItemEffect__,function
	.thumb_func
ExecuteTableBasedItemEffect__:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r0, .L1392
	ldr	r1, .L1392+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1387	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r3
	ldr	r1, .L1392+0x8
	add	r0, r0, r1
	add	r1, r5, #0
	add	r2, r3, #0
	b	.L1391
.L1393:
	.align	2, 0
.L1392:
	.word	gMain
	.word	0x43d
	.word	gPlayerParty
.L1387:
	mov	r0, #0x64
	mov	r4, r3
	mul	r4, r4, r0
	ldr	r0, .L1394
	add	r4, r4, r0
	add	r0, r3, #0
	bl	sub_8094C20
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
.L1391:
	add	r3, r6, #0
	bl	ExecuteTableBasedItemEffect_
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1395:
	.align	2, 0
.L1394:
	.word	gPlayerParty
.Lfe162:
	.size	 ExecuteTableBasedItemEffect__,.Lfe162-ExecuteTableBasedItemEffect__
	.align	2, 0
	.globl	UseMedicine
	.type	 UseMedicine,function
	.thumb_func
UseMedicine:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r0, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L1413
	mov	sl, r1
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, sl
	ldr	r0, .L1413+0x4
	str	r0, [r1]
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	sub_806E8D0
	ldr	r5, .L1413+0x8
	ldr	r0, [r5]
	add	r1, r6, #0
	bl	IsMedicineIneffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1397	@cond_branch
	add	r0, r6, #0
	bl	IsHPRecoveryItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r2, r7, #0x2
	mov	r8, r2
	cmp	r0, #0x1
	bne	.L1398	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x3a
	bl	GetMonData
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	mov	r2, sl
	add	r4, r1, r2
	strh	r0, [r4, #0x1c]
	ldr	r0, [r5]
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r4, #0x1e]
	mov	r3, #0x1c
	ldrsh	r1, [r4, r3]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	bne	.L1398	@cond_branch
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, r9
	strh	r1, [r4, #0x1c]
	strh	r1, [r4, #0x1e]
.L1398:
	ldr	r0, .L1413+0x8
	ldrb	r0, [r0, #0x5]
	add	r1, r6, #0
	mov	r2, #0x0
	bl	ExecuteTableBasedItemEffect__
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L1400
.L1414:
	.align	2, 0
.L1413:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1c000
.L1397:
	mov	r0, #0x1
	lsl	r2, r7, #0x2
	mov	r8, r2
.L1400:
	cmp	r0, #0
	beq	.L1401	@cond_branch
	ldr	r1, .L1415
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1415+0x4
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1415+0x8
	mov	r3, r8
	add	r0, r3, r7
	b	.L1412
.L1416:
	.align	2, 0
.L1415:
	.word	gUnknown_0202E8F4
	.word	gOtherText_WontHaveAnyEffect
	.word	gTasks
.L1401:
	ldr	r1, .L1417
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r6, #0
	bl	IsBlueYellowRedFlute
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1403	@cond_branch
	mov	r0, #0x1
	bl	PlaySE
	b	.L1404
.L1418:
	.align	2, 0
.L1417:
	.word	gUnknown_0202E8F4
.L1403:
	mov	r0, #0x75
	bl	PlaySE
.L1404:
	ldr	r4, .L1419
	ldr	r0, [r4]
	bl	GetMonStatusAndPokerus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L1406	@cond_branch
	cmp	r0, #0
	bne	.L1405	@cond_branch
.L1406:
	ldr	r0, [r4]
	ldrb	r1, [r4, #0x5]
	bl	PartyMenuUpdateLevelOrStatus
.L1405:
	mov	r0, r9
	cmp	r0, #0x1
	bne	.L1407	@cond_branch
	ldr	r4, .L1419
	ldr	r0, [r4]
	mov	r1, #0x39
	bl	GetMonData
	ldr	r2, .L1419+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r2, r1, r2
	ldrh	r1, [r2, #0x1e]
	sub	r0, r0, r1
	strh	r0, [r2, #0x20]
	ldr	r0, .L1419+0x8
	str	r0, [r4, #0xc]
	mov	r1, #0x1e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L1408	@cond_branch
	mov	r3, r9
	strh	r3, [r2, #0x24]
	b	.L1409
.L1420:
	.align	2, 0
.L1419:
	.word	gSharedMem+0x1c000
	.word	gTasks
	.word	0xffff8000
.L1408:
	mov	r0, #0x0
	strh	r0, [r2, #0x24]
.L1409:
	ldr	r2, .L1421
	ldr	r0, [r2, #0x10]
	str	r0, [r2, #0x14]
	ldr	r1, .L1421+0x4
	mov	r3, r8
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1421+0x8
	str	r1, [r0]
	ldrh	r0, [r0, #0x1e]
	ldr	r1, .L1421+0xc
	add	r2, r2, r1
	strh	r0, [r2]
	b	.L1402
.L1422:
	.align	2, 0
.L1421:
	.word	gSharedMem+0x1c000
	.word	gTasks
	.word	sub_806F8AC
	.word	0xfffff282
.L1407:
	ldr	r4, .L1423
	ldr	r0, [r4]
	ldr	r1, .L1423+0x4
	bl	GetMonNickname
	add	r0, r6, #0
	bl	IsBlueYellowRedFlute
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1411	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x1
	bl	RemoveBagItem
.L1411:
	add	r0, r6, #0
	bl	GetMedicineItemEffectMessage
	ldrb	r0, [r4, #0x5]
	ldr	r1, [r4]
	bl	TryPrintPartyMenuMonNickname
	ldr	r0, .L1423+0x8
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1423+0xc
	mov	r2, r8
	add	r0, r2, r7
.L1412:
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1423+0x10
	str	r1, [r0]
.L1402:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1424:
	.align	2, 0
.L1423:
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar4
	.word	gTasks
	.word	sub_806FB0C
.Lfe163:
	.size	 UseMedicine,.Lfe163-UseMedicine
	.align	2, 0
	.globl	IsBlueYellowRedFlute
	.type	 IsBlueYellowRedFlute,function
	.thumb_func
IsBlueYellowRedFlute:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x27
	beq	.L1427	@cond_branch
	cmp	r0, #0x29
	beq	.L1427	@cond_branch
	cmp	r0, #0x28
	bne	.L1426	@cond_branch
.L1427:
	mov	r0, #0x1
	b	.L1429
.L1426:
	mov	r0, #0x0
.L1429:
	pop	{r1}
	bx	r1
.Lfe164:
	.size	 IsBlueYellowRedFlute,.Lfe164-IsBlueYellowRedFlute
	.align	2, 0
	.globl	sub_8070048
	.type	 sub_8070048,function
	.thumb_func
sub_8070048:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1431
	str	r2, [r3, #0x10]
	mov	r4, #0x0
	strb	r0, [r3, #0x4]
	mov	r2, #0x0
	strh	r1, [r3, #0x6]
	strb	r2, [r3, #0x5]
	ldr	r1, .L1431+0x4
	str	r1, [r3, #0x14]
	ldr	r2, .L1431+0x8
	add	r1, r3, r2
	strh	r4, [r1]
	ldr	r1, .L1431+0xc
	add	r3, r3, r1
	strh	r4, [r3]
	bl	sub_8070088
	pop	{r4}
	pop	{r0}
	bx	r0
.L1432:
	.align	2, 0
.L1431:
	.word	gSharedMem+0x1c000
	.word	sub_80701DC
	.word	0xfffff27e
	.word	0xfffff280
.Lfe165:
	.size	 sub_8070048,.Lfe165-sub_8070048
	.align	2, 0
	.globl	sub_8070088
	.type	 sub_8070088,function
	.thumb_func
sub_8070088:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1439
	mov	sl, r1
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r2, sl
	add	r7, r1, r2
	ldr	r5, .L1439+0x4
	str	r5, [r7]
	ldr	r4, .L1439+0x8
	ldrb	r0, [r4, #0x5]
	mov	r1, #0x64
	mov	r9, r1
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r1, .L1439+0xc
	mov	r8, r1
	add	r0, r0, r8
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1438	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	str	r0, [sp]
	mov	r0, sl
	add	r0, r0, #0x8
	ldr	r2, [sp]
	add	r6, r2, r0
	ldrb	r0, [r4, #0x5]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	str	r0, [r4]
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r6, #0x14]
	ldr	r0, [r4]
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r6, #0x16]
	ldrb	r0, [r4, #0x5]
	ldrh	r1, [r4, #0x6]
	mov	r2, #0x0
	bl	ExecuteTableBasedItemEffect__
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1436	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L1438:
	ldr	r0, .L1439+0x10
	str	r0, [r7]
	b	.L1435
.L1440:
	.align	2, 0
.L1439:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1c000
	.word	gPlayerParty
	.word	sub_80701DC
.L1436:
	ldr	r1, .L1441
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x3
	mov	r1, #0xe
	mov	r2, #0x1a
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	mov	r0, #0x1
	bl	PlaySE
	ldr	r0, [r4]
	ldrb	r1, [r4, #0x5]
	bl	PartyMenuUpdateLevelOrStatus
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r1, .L1441+0x4
	add	r0, r0, r1
	mov	r1, #0x9
	bl	task_pc_turn_off
	ldr	r2, .L1441+0x8
	add	r1, r4, r2
	mov	r0, #0x2
	strb	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x39
	bl	GetMonData
	ldrh	r1, [r6, #0x16]
	sub	r0, r0, r1
	strh	r0, [r6, #0x18]
	mov	r0, #0x1
	strh	r0, [r6, #0x1c]
	ldr	r1, .L1441+0xc
	add	r0, r4, r1
	mov	r1, #0x1
	strh	r1, [r0]
	ldr	r2, .L1441+0x10
	add	r0, r4, r2
	strh	r1, [r0]
	ldrh	r1, [r6, #0x16]
	add	r2, r2, #0x2
	add	r0, r4, r2
	strh	r1, [r0]
	ldr	r0, .L1441+0x14
	str	r0, [r4, #0xc]
	ldr	r1, [sp]
	add	r1, r1, sl
	ldr	r0, .L1441+0x18
	str	r0, [r1]
.L1435:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1442:
	.align	2, 0
.L1441:
	.word	gUnknown_0202E8F4
	.word	gUnknown_083769A8
	.word	0xfffff261
	.word	0xfffff27e
	.word	0xfffff280
	.word	0xffff8000
	.word	sub_806F8AC
.Lfe166:
	.size	 sub_8070088,.Lfe166-sub_8070088
	.align	2, 0
	.globl	sub_80701DC
	.type	 sub_80701DC,function
	.thumb_func
sub_80701DC:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L1450
	ldr	r0, .L1450+0x4
	add	r7, r6, r0
	mov	r1, #0x0
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x1
	bne	.L1444	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	add	r4, r6, r0
	ldrh	r0, [r4, #0x6]
	mov	r1, #0x1
	bl	AddBagItem
	ldrb	r1, [r4, #0x5]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1450+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1445	@cond_branch
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r1, .L1450+0xc
	add	r0, r0, r1
	mov	r1, #0x3
	bl	task_pc_turn_off
	ldr	r0, .L1450+0x10
	add	r1, r6, r0
	mov	r0, #0x2
	strb	r0, [r1]
.L1445:
	mov	r0, #0x0
	strh	r0, [r7]
.L1444:
	ldr	r4, .L1450+0x14
	ldrb	r0, [r4, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L1446	@cond_branch
	ldr	r1, .L1450+0x18
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1450+0x1c
	add	r0, r4, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1447	@cond_branch
	ldr	r1, .L1450+0x20
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1450+0x24
	str	r1, [r0]
	ldr	r0, .L1450+0x28
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1450+0x2c
	mov	r1, #0x8
	bl	CreateTask
	b	.L1448
.L1451:
	.align	2, 0
.L1450:
	.word	gSharedMem+0x1b000
	.word	0x27e
	.word	gPlayerParty
	.word	gUnknown_083769A8
	.word	0x261
	.word	gSharedMem+0x1c000
	.word	gUnknown_0202E8F4
	.word	0xfffff280
	.word	gTasks
	.word	TaskDummy
	.word	gOtherText_WontHaveAnyEffect
	.word	sub_806FB0C
.L1447:
	ldrh	r0, [r4, #0x6]
	mov	r1, #0x1
	bl	RemoveBagItem
	ldr	r1, .L1452
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, [r4, #0x10]
	str	r1, [r0]
.L1448:
	ldr	r1, .L1452+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L1449
.L1453:
	.align	2, 0
.L1452:
	.word	gTasks
	.word	gLastFieldPokeMenuOpened
.L1446:
	add	r0, r5, #0
	bl	sub_8070088
.L1449:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe167:
	.size	 sub_80701DC,.Lfe167-sub_80701DC
	.align	2, 0
	.globl	CreateItemUseMoveMenu
	.type	 CreateItemUseMoveMenu,function
	.thumb_func
CreateItemUseMoveMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r6, #0x0
	mov	r0, #0x13
	mov	r1, #0xa
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	mov	r5, #0x0
	mov	r0, #0x64
	mov	r7, r4
	mul	r7, r7, r0
	ldr	r0, .L1461
	mov	r8, r0
.L1458:
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, r8
	add	r0, r7, r2
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r4, #0x4
	sub	r0, r0, r4
	ldr	r1, .L1461+0x4
	add	r0, r0, r1
	lsl	r2, r5, #0x19
	mov	r1, #0xb0
	lsl	r1, r1, #0x14
	add	r2, r2, r1
	lsr	r2, r2, #0x18
	mov	r1, #0x15
	bl	MenuPrint
	cmp	r4, #0
	beq	.L1457	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1457:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1458	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x9
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x14
	mov	r2, #0xb
	add	r3, r6, #0
	bl	InitMenu
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1462:
	.align	2, 0
.L1461:
	.word	gPlayerParty
	.word	gMoveNames
.Lfe168:
	.size	 CreateItemUseMoveMenu,.Lfe168-CreateItemUseMoveMenu
	.align	2, 0
	.globl	Task_HandleItemUseMoveMenuInput
	.type	 Task_HandleItemUseMoveMenuInput,function
	.thumb_func
Task_HandleItemUseMoveMenuInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r4, r2, #0
	ldr	r0, .L1471
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1464	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	bl	MoveMenuCursor
	b	.L1465
.L1472:
	.align	2, 0
.L1471:
	.word	gMain
.L1464:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1466	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	MoveMenuCursor
	b	.L1465
.L1466:
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1468	@cond_branch
	ldr	r0, .L1473
	ldr	r1, [r0]
	add	r0, r2, #0
	bl	_call_via_r1
	b	.L1465
.L1474:
	.align	2, 0
.L1473:
	.word	gUnknown_08376B54
.L1468:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1465	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1475
	ldr	r1, [r0, #0x4]
	add	r0, r4, #0
	bl	_call_via_r1
.L1465:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1476:
	.align	2, 0
.L1475:
	.word	gUnknown_08376B54
.Lfe169:
	.size	 Task_HandleItemUseMoveMenuInput,.Lfe169-Task_HandleItemUseMoveMenuInput
	.align	2, 0
	.globl	DoPPRecoveryItemEffect
	.type	 DoPPRecoveryItemEffect,function
	.thumb_func
DoPPRecoveryItemEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	cmp	r5, #0xaf
	bne	.L1478	@cond_branch
	ldr	r0, .L1483
	b	.L1482
.L1484:
	.align	2, 0
.L1483:
	.word	gSaveBlock1+0x3676
.L1478:
	ldr	r1, .L1485
	add	r0, r5, #0
	sub	r0, r0, #0xd
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
.L1482:
	mov	r8, r0
	ldr	r7, .L1485+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r7
	ldr	r0, .L1485+0x8
	str	r0, [r1]
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	mov	r2, r9
	bl	sub_806E8D0
	mov	r0, r8
	ldrb	r1, [r0, #0x4]
	mov	r0, #0x10
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L1480	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	strh	r1, [r0, #0x1e]
	add	r0, r4, #0
	bl	DoRecoverPP
	b	.L1481
.L1486:
	.align	2, 0
.L1485:
	.word	gItemEffectTable
	.word	gTasks
	.word	TaskDummy
.L1480:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0xa
	mov	r1, #0x3
	bl	PrintPartyMenuPromptText
	ldr	r0, .L1487
	ldrb	r0, [r0, #0x5]
	bl	CreateItemUseMoveMenu
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldr	r1, .L1487+0x4
	str	r1, [r0]
	ldr	r1, .L1487+0x8
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
.L1481:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1488:
	.align	2, 0
.L1487:
	.word	gSharedMem+0x1c000
	.word	Task_HandleItemUseMoveMenuInput
	.word	gMain
.Lfe170:
	.size	 DoPPRecoveryItemEffect,.Lfe170-DoPPRecoveryItemEffect
	.align	2, 0
	.type	 ItemUseMoveMenu_HandleMoveSelection,function
	.thumb_func
ItemUseMoveMenu_HandleMoveSelection:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	HandleDestroyMenuCursors
	mov	r0, #0x13
	mov	r1, #0xa
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	bl	sub_806D5A4
	bl	GetMenuCursorPos
	ldr	r2, .L1490
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x1e]
	add	r0, r4, #0
	bl	DoRecoverPP
	pop	{r4}
	pop	{r0}
	bx	r0
.L1491:
	.align	2, 0
.L1490:
	.word	gTasks
.Lfe171:
	.size	 ItemUseMoveMenu_HandleMoveSelection,.Lfe171-ItemUseMoveMenu_HandleMoveSelection
	.align	2, 0
	.type	 ItemUseMoveMenu_HandleCancel,function
	.thumb_func
ItemUseMoveMenu_HandleCancel:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	HandleDestroyMenuCursors
	mov	r0, #0x13
	mov	r1, #0xa
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	ldr	r0, .L1496
	ldr	r1, .L1496+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1493	@cond_branch
	ldr	r2, .L1496+0x8
	ldr	r0, .L1496+0xc
	ldrb	r1, [r0, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1496+0x10
	b	.L1495
.L1497:
	.align	2, 0
.L1496:
	.word	gMain
	.word	0x43d
	.word	gTasks
	.word	gSharedMem+0x1c000
	.word	HandleBattlePartyMenu
.L1493:
	ldr	r2, .L1498
	ldr	r0, .L1498+0x4
	ldrb	r1, [r0, #0x4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1498+0x8
.L1495:
	str	r1, [r0]
	mov	r0, #0x3
	mov	r1, #0x0
	bl	PrintPartyMenuPromptText
	add	r0, r4, #0
	bl	DestroyTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L1499:
	.align	2, 0
.L1498:
	.word	gTasks
	.word	gSharedMem+0x1c000
	.word	sub_808B0C0
.Lfe172:
	.size	 ItemUseMoveMenu_HandleCancel,.Lfe172-ItemUseMoveMenu_HandleCancel
	.align	2, 0
	.globl	DoRecoverPP
	.type	 DoRecoverPP,function
	.thumb_func
DoRecoverPP:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r6, .L1503
	ldrb	r0, [r6, #0x5]
	ldrh	r1, [r6, #0x6]
	ldr	r3, .L1503+0x4
	lsl	r2, r5, #0x2
	add	r2, r2, r5
	lsl	r2, r2, #0x3
	add	r7, r2, r3
	ldrb	r2, [r7, #0x1e]
	bl	ExecuteTableBasedItemEffect__
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1501	@cond_branch
	ldr	r0, .L1503+0x8
	strb	r4, [r0]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1503+0xc
	mov	r1, #0x1
	bl	sub_806E834
	b	.L1502
.L1504:
	.align	2, 0
.L1503:
	.word	gSharedMem+0x1c000
	.word	gTasks
	.word	gUnknown_0202E8F4
	.word	gOtherText_WontHaveAnyEffect
.L1501:
	ldr	r1, .L1505
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x1
	bl	PlaySE
	ldrh	r0, [r6, #0x6]
	mov	r1, #0x1
	bl	RemoveBagItem
	ldr	r0, [r6]
	mov	r2, #0x1e
	ldrsh	r1, [r7, r2]
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L1505+0x4
	lsl	r1, r4, #0x4
	sub	r1, r1, r4
	ldr	r2, .L1505+0x8
	add	r1, r1, r2
	bl	StringCopy
	ldrh	r0, [r6, #0x6]
	bl	GetMedicineItemEffectMessage
	ldr	r0, .L1505+0xc
	mov	r1, #0x1
	bl	sub_806E834
.L1502:
	ldr	r0, .L1505+0x10
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1505+0x14
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1506:
	.align	2, 0
.L1505:
	.word	gUnknown_0202E8F4
	.word	gStringVar1
	.word	gMoveNames
	.word	gStringVar4
	.word	gTasks
	.word	sub_806FB0C
.Lfe173:
	.size	 DoRecoverPP,.Lfe173-DoRecoverPP
	.align	2, 0
	.globl	DoPPUpItemEffect
	.type	 DoPPUpItemEffect,function
	.thumb_func
DoPPUpItemEffect:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L1508
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x3
	add	r3, r3, r4
	ldr	r4, .L1508+0x4
	str	r4, [r3]
	bl	sub_806E8D0
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0xb
	mov	r1, #0x3
	bl	PrintPartyMenuPromptText
	ldr	r0, .L1508+0x8
	ldrb	r0, [r0, #0x5]
	bl	CreateItemUseMoveMenu
	ldr	r0, .L1508+0xc
	mov	r1, #0x5
	bl	CreateTask
	ldr	r1, .L1508+0x10
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1509:
	.align	2, 0
.L1508:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1c000
	.word	Task_HandleItemUseMoveMenuInput
	.word	gMain
.Lfe174:
	.size	 DoPPUpItemEffect,.Lfe174-DoPPUpItemEffect
	.align	2, 0
	.globl	DoRareCandyItemEffect
	.type	 DoRareCandyItemEffect,function
	.thumb_func
DoRareCandyItemEffect:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r3, .L1520
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldr	r3, .L1520+0x4
	str	r3, [r1]
	add	r1, r6, #0
	bl	sub_806E8D0
	ldr	r5, .L1520+0x8
	ldr	r0, [r5]
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x64
	beq	.L1511	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L1520+0xc
	add	r7, r5, r0
.L1515:
	ldr	r0, [r5]
	ldr	r1, .L1520+0x10
	add	r1, r4, r1
	ldrb	r1, [r1]
	bl	GetMonData
	lsl	r1, r4, #0x1
	add	r1, r7, r1
	strh	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L1515	@cond_branch
	ldr	r0, .L1520+0x8
	ldrb	r0, [r0, #0x5]
	add	r1, r6, #0
	mov	r2, #0x0
	bl	ExecuteTableBasedItemEffect__
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L1517
.L1521:
	.align	2, 0
.L1520:
	.word	gTasks
	.word	TaskDummy
	.word	gSharedMem+0x1c000
	.word	0xfffff264
	.word	StatDataTypes
.L1511:
	mov	r0, #0x1
.L1517:
	cmp	r0, #0
	beq	.L1518	@cond_branch
	ldr	r1, .L1522
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1522+0x4
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1522+0x8
	mov	r1, #0x5
	bl	CreateTask
	b	.L1519
.L1523:
	.align	2, 0
.L1522:
	.word	gUnknown_0202E8F4
	.word	gOtherText_WontHaveAnyEffect
	.word	sub_806FB0C
.L1518:
	ldr	r1, .L1524
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x0
	bl	PlayFanfareByFanfareNum
	ldr	r4, .L1524+0x4
	ldrb	r0, [r4, #0x5]
	ldr	r1, [r4]
	bl	RedrawPokemonInfoInMenu
	add	r0, r6, #0
	mov	r1, #0x1
	bl	RemoveBagItem
	ldr	r0, [r4]
	ldr	r1, .L1524+0x8
	bl	GetMonNickname
	ldr	r0, [r4]
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L1524+0xc
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L1524+0x10
	ldr	r1, .L1524+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1524+0x18
	mov	r1, #0x5
	bl	CreateTask
.L1519:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1525:
	.align	2, 0
.L1524:
	.word	gUnknown_0202E8F4
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gOtherText_ElevatedTo
	.word	Task_RareCandy1
.Lfe175:
	.size	 DoRareCandyItemEffect,.Lfe175-DoRareCandyItemEffect
	.align	2, 0
	.globl	Task_RareCandy1
	.type	 Task_RareCandy1,function
	.thumb_func
Task_RareCandy1:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	bl	WaitFanfare
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1527	@cond_branch
	ldr	r0, .L1530
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1527	@cond_branch
	ldr	r0, .L1530+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1529	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1527	@cond_branch
.L1529:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	PrintStatGrowthsInLevelUpWindow
	ldr	r0, .L1530+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1530+0xc
	str	r0, [r1]
.L1527:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1531:
	.align	2, 0
.L1530:
	.word	gUnknown_0202E8F6
	.word	gMain
	.word	gTasks
	.word	Task_RareCandy2
.Lfe176:
	.size	 Task_RareCandy1,.Lfe176-Task_RareCandy1
	.align	2, 0
	.globl	Task_RareCandy2
	.type	 Task_RareCandy2,function
	.thumb_func
Task_RareCandy2:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1535
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1534	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1533	@cond_branch
.L1534:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	PrintNewStatsInLevelUpWindow
	ldr	r0, .L1535+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1535+0x8
	str	r0, [r1]
.L1533:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1536:
	.align	2, 0
.L1535:
	.word	gMain
	.word	gTasks
	.word	Task_RareCandy3
.Lfe177:
	.size	 Task_RareCandy2,.Lfe177-Task_RareCandy2
	.align	2, 0
	.globl	PrintStatGrowthsInLevelUpWindow
	.type	 PrintStatGrowthsInLevelUpWindow,function
	.thumb_func
PrintStatGrowthsInLevelUpWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0xb
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x7
	bl	MenuDrawTextWindow
	mov	r7, #0x0
	ldr	r0, .L1545
	mov	sl, r0
.L1541:
	ldr	r1, .L1545+0x4
	ldr	r0, [r1]
	ldr	r1, .L1545+0x8
	add	r1, r7, r1
	ldrb	r1, [r1]
	bl	GetMonData
	add	r1, r7, #0x6
	lsl	r1, r1, #0x1
	ldr	r2, .L1545+0xc
	add	r1, r1, r2
	strh	r0, [r1]
	lsl	r4, r7, #0x1
	add	r2, r4, r2
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r2]
	add	r0, r7, #0
	mov	r1, #0x3
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, #0xb
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	add	r0, r7, #0
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L1545+0x10
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r6, #0x1
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x18
	mov	r2, r9
	lsl	r5, r2, #0x3
	add	r2, r5, #0
	mov	r3, #0x1
	bl	MenuPrint_PixelCoords
	mov	r8, r4
	cmp	r7, #0x2
	bne	.L1542	@cond_branch
	add	r4, r6, #0x6
	lsl	r1, r4, #0x3
	add	r1, r1, #0x6
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L1545+0x14
	add	r2, r5, #0
	mov	r3, #0x0
	bl	MenuPrint_PixelCoords
	b	.L1543
.L1546:
	.align	2, 0
.L1545:
	.word	gStringVar1
	.word	gSharedMem+0x1c000
	.word	StatDataTypes
	.word	gSharedMem+0x1b264
	.word	StatNames
	.word	gOtherText_TallPlusAndRightArrow
.L1542:
	add	r4, r6, #0x6
	lsl	r1, r4, #0x3
	add	r1, r1, #0x6
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L1547
	add	r2, r5, #0
	mov	r3, #0x1
	bl	MenuPrint_PixelCoords
.L1543:
	mov	r0, #0xfc
	mov	r1, sl
	strb	r0, [r1]
	mov	r0, #0x14
	strb	r0, [r1, #0x1]
	mov	r0, #0x6
	strb	r0, [r1, #0x2]
	ldr	r0, .L1547+0x4
	add	r0, r0, r8
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r0, sl
	add	r0, r0, #0x3
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	lsl	r1, r4, #0x1b
	mov	r0, #0xc0
	lsl	r0, r0, #0x14
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	mov	r0, r9
	lsl	r2, r0, #0x3
	mov	r0, sl
	mov	r3, #0x0
	bl	MenuPrint_PixelCoords
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x5
	bls	.L1541	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1548:
	.align	2, 0
.L1547:
	.word	gOtherText_TallPlusAndRightArrow
	.word	gSharedMem+0x1b264
.Lfe178:
	.size	 PrintStatGrowthsInLevelUpWindow,.Lfe178-PrintStatGrowthsInLevelUpWindow
	.align	2, 0
	.globl	PrintNewStatsInLevelUpWindow
	.type	 PrintNewStatsInLevelUpWindow,function
	.thumb_func
PrintNewStatsInLevelUpWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r7, #0x0
	ldr	r0, .L1555
	mov	r9, r0
	ldr	r1, .L1555+0x4
	add	r1, r1, r9
	mov	sl, r1
	ldr	r0, .L1555+0x8
	mov	r8, r0
.L1553:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, .L1555+0xc
	add	r1, r7, r1
	ldrb	r1, [r1]
	bl	GetMonData
	add	r6, r7, #0x6
	lsl	r6, r6, #0x1
	add	r6, r6, sl
	strh	r0, [r6]
	add	r0, r7, #0
	mov	r1, #0x3
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x3
	add	r4, r4, r0
	add	r4, r4, #0xb
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	mov	r1, #0x3
	bl	__umodsi3
	add	r5, r0, #0
	lsl	r5, r5, #0x1
	add	r5, r5, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0xfc
	mov	r1, r8
	strb	r0, [r1]
	mov	r0, #0x14
	strb	r0, [r1, #0x1]
	mov	r0, #0x6
	strb	r0, [r1, #0x2]
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	mov	r0, r8
	add	r0, r0, #0x3
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r4, r4, #0x6
	lsl	r4, r4, #0x3
	add	r4, r4, #0x6
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x3
	mov	r0, r8
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x0
	bl	MenuPrint_PixelCoords
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x5
	bls	.L1553	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1556:
	.align	2, 0
.L1555:
	.word	gSharedMem+0x1c000
	.word	0xfffff264
	.word	gStringVar1
	.word	StatDataTypes
.Lfe179:
	.size	 PrintNewStatsInLevelUpWindow,.Lfe179-PrintNewStatsInLevelUpWindow
	.align	2, 0
	.globl	RedrawPokemonInfoInMenu
	.type	 RedrawPokemonInfoInMenu,function
	.thumb_func
RedrawPokemonInfoInMenu:
	push	{r4, r5, r6, r7, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r6, #0
	bl	GetMonStatusAndPokerus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1559	@cond_branch
	cmp	r0, #0x6
	bne	.L1558	@cond_branch
.L1559:
	add	r0, r6, #0
	add	r1, r7, #0
	bl	PartyMenuUpdateLevelOrStatus
.L1558:
	bl	IsDoubleBattle
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r6, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r3, r0, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	add	r0, r7, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	PartyMenuDoPrintHP
	add	r0, r7, #0
	add	r1, r6, #0
	bl	PartyMenuTryDrawHPBar
	ldr	r4, .L1560
	ldrb	r0, [r4, #0x4]
	add	r1, r7, #0
	bl	GetMonIconSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r6, #0
	bl	SetMonIconAnim
	bl	IsDoubleBattle
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	lsl	r1, r7, #0x1
	add	r0, r0, r1
	ldr	r1, .L1560+0x4
	add	r0, r0, r1
	mov	r1, #0x7
	bl	task_pc_turn_off
	ldr	r0, .L1560+0x8
	add	r4, r4, r0
	mov	r0, #0x2
	strb	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1561:
	.align	2, 0
.L1560:
	.word	gSharedMem+0x1c000
	.word	gUnknown_083769A8
	.word	0xfffff261
.Lfe180:
	.size	 RedrawPokemonInfoInMenu,.Lfe180-RedrawPokemonInfoInMenu
	.align	2, 0
	.globl	Task_RareCandy3
	.type	 Task_RareCandy3,function
	.thumb_func
Task_RareCandy3:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	bl	WaitFanfare
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB14806
	b	.L1563	@long jump
.LCB14806:
	ldr	r0, .L1576
	ldrh	r1, [r0, #0x2e]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1565	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14822
	b	.L1563	@long jump
.LCB14822:
.L1565:
	mov	r0, #0xb
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x7
	bl	MenuZeroFillWindowRect
	ldr	r7, .L1576+0x4
	ldr	r0, [r7]
	mov	r1, #0x1
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, .L1576+0x8
	add	r0, r7, r1
	strh	r5, [r0]
	ldr	r0, .L1576+0xc
	cmp	r4, r0
	beq	.L1571	@cond_branch
	cmp	r4, r0
	bgt	.L1574	@cond_branch
	cmp	r4, #0
	beq	.L1567	@cond_branch
	b	.L1572
.L1577:
	.align	2, 0
.L1576:
	.word	gMain
	.word	gSharedMem+0x1c000
	.word	0xfffff282
	.word	0xfffe
.L1574:
	ldr	r0, .L1578
	cmp	r4, r0
	beq	.L1570	@cond_branch
	b	.L1572
.L1579:
	.align	2, 0
.L1578:
	.word	0xffff
.L1567:
	ldr	r0, [r7]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetEvolutionTargetSpecies
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0
	beq	.L1568	@cond_branch
	ldr	r1, .L1580
	ldr	r0, .L1580+0x4
	str	r0, [r1]
	ldr	r0, [r7]
	ldrb	r3, [r7, #0x5]
	add	r1, r2, #0
	mov	r2, #0x1
	bl	BeginEvolutionScene
	add	r0, r6, #0
	bl	DestroyTask
	b	.L1563
.L1581:
	.align	2, 0
.L1580:
	.word	gCB2_AfterEvolution
	.word	sub_80A53F8
.L1568:
	add	r0, r6, #0
	bl	sub_8070D90
	b	.L1563
.L1570:
	ldr	r0, [r7]
	ldr	r1, .L1582
	bl	GetMonNickname
	ldr	r0, .L1582+0x4
	ldr	r5, .L1582+0x8
	ldrh	r2, [r5]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L1582+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1582+0x10
	ldr	r1, .L1582+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldrh	r0, [r5]
	strh	r0, [r7, #0x8]
	ldr	r1, .L1582+0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1582+0x1c
	b	.L1575
.L1583:
	.align	2, 0
.L1582:
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveToLearn
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_WantsToLearn
	.word	gTasks
	.word	sub_806F358
.L1571:
	ldr	r0, .L1584
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1584+0x4
	str	r0, [r1]
	b	.L1563
.L1585:
	.align	2, 0
.L1584:
	.word	gTasks
	.word	TeachMonMoveInPartyMenu
.L1572:
	ldr	r0, .L1586
	ldr	r0, [r0]
	ldr	r1, .L1586+0x4
	bl	GetMonNickname
	ldr	r0, .L1586+0x8
	lsl	r1, r4, #0x4
	sub	r1, r1, r4
	ldr	r2, .L1586+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1586+0x10
	ldr	r1, .L1586+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1586+0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1586+0x1c
.L1575:
	str	r1, [r0]
.L1563:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1587:
	.align	2, 0
.L1586:
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_LearnedMove
	.word	gTasks
	.word	Task_TeamMonTMMove3
.Lfe181:
	.size	 Task_RareCandy3,.Lfe181-Task_RareCandy3
	.align	2, 0
	.globl	TeachMonMoveInPartyMenu
	.type	 TeachMonMoveInPartyMenu,function
	.thumb_func
TeachMonMoveInPartyMenu:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r7, .L1599
	ldr	r0, [r7]
	mov	r1, #0x0
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L1599+0x4
	cmp	r4, r0
	beq	.L1594	@cond_branch
	cmp	r4, r0
	bgt	.L1597	@cond_branch
	cmp	r4, #0
	beq	.L1590	@cond_branch
	b	.L1595
.L1600:
	.align	2, 0
.L1599:
	.word	gSharedMem+0x1c000
	.word	0xfffe
.L1597:
	ldr	r0, .L1601
	cmp	r4, r0
	beq	.L1593	@cond_branch
	b	.L1595
.L1602:
	.align	2, 0
.L1601:
	.word	0xffff
.L1590:
	ldr	r0, [r7]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetEvolutionTargetSpecies
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0
	beq	.L1591	@cond_branch
	ldr	r1, .L1603
	ldr	r0, .L1603+0x4
	str	r0, [r1]
	ldr	r0, [r7]
	ldrb	r3, [r7, #0x5]
	add	r1, r2, #0
	mov	r2, #0x1
	bl	BeginEvolutionScene
	add	r0, r6, #0
	bl	DestroyTask
	b	.L1589
.L1604:
	.align	2, 0
.L1603:
	.word	gCB2_AfterEvolution
	.word	sub_80A53F8
.L1591:
	add	r0, r6, #0
	bl	sub_8070D90
	b	.L1589
.L1593:
	ldr	r0, [r7]
	ldr	r1, .L1605
	bl	GetMonNickname
	ldr	r0, .L1605+0x4
	ldr	r5, .L1605+0x8
	ldrh	r2, [r5]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L1605+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1605+0x10
	ldr	r1, .L1605+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldrh	r0, [r5]
	strh	r0, [r7, #0x8]
	ldr	r1, .L1605+0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1605+0x1c
	b	.L1598
.L1606:
	.align	2, 0
.L1605:
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveToLearn
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_WantsToLearn
	.word	gTasks
	.word	sub_806F358
.L1594:
	add	r0, r6, #0
	bl	TeachMonMoveInPartyMenu
	b	.L1589
.L1595:
	ldr	r0, .L1607
	ldr	r0, [r0]
	ldr	r1, .L1607+0x4
	bl	GetMonNickname
	ldr	r0, .L1607+0x8
	lsl	r1, r4, #0x4
	sub	r1, r1, r4
	ldr	r2, .L1607+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L1607+0x10
	ldr	r1, .L1607+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r1, .L1607+0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1607+0x1c
.L1598:
	str	r1, [r0]
.L1589:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1608:
	.align	2, 0
.L1607:
	.word	gSharedMem+0x1c000
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gOtherText_LearnedMove
	.word	gTasks
	.word	Task_TeamMonTMMove3
.Lfe182:
	.size	 TeachMonMoveInPartyMenu,.Lfe182-TeachMonMoveInPartyMenu
	.align	2, 0
	.type	 sub_8070D90,function
	.thumb_func
sub_8070D90:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L1610
	ldr	r3, .L1610+0x4
	ldrb	r2, [r3, #0x4]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldr	r2, [r3, #0x10]
	str	r2, [r1]
	bl	DestroyTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L1611:
	.align	2, 0
.L1610:
	.word	gTasks
	.word	gSharedMem+0x1c000
.Lfe183:
	.size	 sub_8070D90,.Lfe183-sub_8070D90
	.align	2, 0
	.globl	DoEvolutionStoneItemEffect
	.type	 DoEvolutionStoneItemEffect,function
	.thumb_func
DoEvolutionStoneItemEffect:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L1615
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1615+0x4
	str	r1, [r0]
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	sub_806E8D0
	ldr	r1, .L1615+0x8
	ldr	r0, .L1615+0xc
	str	r0, [r1]
	ldr	r0, .L1615+0x10
	ldrb	r0, [r0, #0x5]
	add	r1, r6, #0
	mov	r2, #0x0
	bl	ExecuteTableBasedItemEffect__
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1613	@cond_branch
	ldr	r1, .L1615+0x14
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1615+0x18
	mov	r1, #0x1
	bl	sub_806E834
	ldr	r0, .L1615+0x1c
	mov	r1, #0x5
	bl	CreateTask
	b	.L1614
.L1616:
	.align	2, 0
.L1615:
	.word	gTasks
	.word	TaskDummy
	.word	gCB2_AfterEvolution
	.word	sub_80A53F8
	.word	gSharedMem+0x1c000
	.word	gUnknown_0202E8F4
	.word	gOtherText_WontHaveAnyEffect
	.word	sub_806FB0C
.L1613:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	RemoveBagItem
.L1614:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe184:
	.size	 DoEvolutionStoneItemEffect,.Lfe184-DoEvolutionStoneItemEffect
	.align	2, 0
	.globl	GetItemEffectType
	.type	 GetItemEffectType,function
	.thumb_func
GetItemEffectType:
	.syntax unified
    push {r4,r5,lr}
    lsls r0, 16
    lsrs r0, 16
    cmp r0, 0xAF
    bne _08070E5C
    ldr r4, _08070E58 @ =gSaveBlock1 + 0x3676
    b _08070E66
    .align 2, 0
_08070E58: .4byte gSaveBlock1 + 0x3676
_08070E5C:
    ldr r1, _08070E8C @ =gItemEffectTable
    subs r0, 0xD
    lsls r0, 2
    adds r0, r1
    ldr r4, [r0]
_08070E66:
    ldrb r1, [r4]
    movs r5, 0x3F
    adds r0, r5, 0
    ands r0, r1
    cmp r0, 0
    bne _08070E88
    ldrb r0, [r4, 0x1]
    cmp r0, 0
    bne _08070E88
    ldrb r0, [r4, 0x2]
    cmp r0, 0
    bne _08070E88
    ldrb r3, [r4, 0x3]
    movs r0, 0x80
    ands r0, r3
    cmp r0, 0
    beq _08070E90
_08070E88:
    movs r0, 0
    b _08070F8A
    .align 2, 0
_08070E8C: .4byte gItemEffectTable
_08070E90:
    movs r2, 0x40
    adds r0, r2, 0
    ands r0, r1
    cmp r0, 0
    beq _08070E9E
    movs r0, 0xA
    b _08070F8A
_08070E9E:
    adds r0, r2, 0
    ands r0, r3
    cmp r0, 0
    beq _08070EAA
    movs r0, 0x1
    b _08070F8A
_08070EAA:
    adds r2, r5, 0
    ands r2, r3
    cmp r2, 0
    bne _08070EB8
    lsrs r0, r1, 7
    cmp r0, 0
    beq _08070EFA
_08070EB8:
    cmp r2, 0x20
    bne _08070EC0
    movs r0, 0x4
    b _08070F8A
_08070EC0:
    cmp r2, 0x10
    bne _08070EC8
    movs r0, 0x3
    b _08070F8A
_08070EC8:
    cmp r2, 0x8
    bne _08070ED0
    movs r0, 0x5
    b _08070F8A
_08070ED0:
    cmp r2, 0x4
    bne _08070ED8
    movs r0, 0x6
    b _08070F8A
_08070ED8:
    cmp r2, 0x2
    bne _08070EE0
    movs r0, 0x7
    b _08070F8A
_08070EE0:
    cmp r2, 0x1
    bne _08070EE8
    movs r0, 0x8
    b _08070F8A
_08070EE8:
    lsrs r0, r1, 7
    cmp r0, 0
    beq _08070EF6
    cmp r2, 0
    bne _08070EF6
    movs r0, 0x9
    b _08070F8A
_08070EF6:
    movs r0, 0xB
    b _08070F8A
_08070EFA:
    ldrb r1, [r4, 0x4]
    movs r0, 0x44
    ands r0, r1
    adds r2, r1, 0
    cmp r0, 0
    beq _08070F0A
    movs r0, 0x2
    b _08070F8A
_08070F0A:
    movs r5, 0x2
    adds r0, r5, 0
    ands r0, r2
    cmp r0, 0
    beq _08070F18
    movs r0, 0xC
    b _08070F8A
_08070F18:
    movs r3, 0x1
    adds r0, r3, 0
    ands r0, r2
    cmp r0, 0
    beq _08070F26
    movs r0, 0xD
    b _08070F8A
_08070F26:
    ldrb r1, [r4, 0x5]
    movs r0, 0x8
    ands r0, r1
    cmp r0, 0
    beq _08070F34
    movs r0, 0xE
    b _08070F8A
_08070F34:
    movs r0, 0x4
    ands r0, r1
    cmp r0, 0
    beq _08070F40
    movs r0, 0xF
    b _08070F8A
_08070F40:
    adds r0, r5, 0
    ands r0, r1
    cmp r0, 0
    beq _08070F4C
    movs r0, 0x10
    b _08070F8A
_08070F4C:
    adds r0, r3, 0
    ands r0, r1
    cmp r0, 0
    beq _08070F58
    movs r0, 0x11
    b _08070F8A
_08070F58:
    movs r0, 0x80
    ands r0, r2
    cmp r0, 0
    beq _08070F64
    movs r0, 0x12
    b _08070F8A
_08070F64:
    movs r0, 0x20
    ands r0, r2
    cmp r0, 0
    beq _08070F70
    movs r0, 0x13
    b _08070F8A
_08070F70:
    movs r0, 0x10
    ands r0, r1
    cmp r0, 0
    beq _08070F7C
    movs r0, 0x14
    b _08070F8A
_08070F7C:
    movs r0, 0x18
    ands r0, r2
    cmp r0, 0
    bne _08070F88
    movs r0, 0x16
    b _08070F8A
_08070F88:
    movs r0, 0x15
_08070F8A:
    pop {r4,r5}
    pop {r1}
    bx r1
    .syntax divided

	.code	16
.Lfe185:
	.size	 GetItemEffectType,.Lfe185-GetItemEffectType
	.align	2, 0
	.globl	unref_sub_8070F90
	.type	 unref_sub_8070F90,function
	.thumb_func
unref_sub_8070F90:
	push	{lr}
	ldr	r0, .L1619
	bl	FlagSet
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	bl	FlagSet
	ldr	r0, .L1619+0x4
	bl	FlagSet
	pop	{r0}
	bx	r0
.L1620:
	.align	2, 0
.L1619:
	.word	0x801
	.word	0x802
.Lfe186:
	.size	 unref_sub_8070F90,.Lfe186-unref_sub_8070F90
.text
	.align	2, 0
