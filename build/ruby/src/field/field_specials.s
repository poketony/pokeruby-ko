@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBikeCyclingChallenge
	.section ewram_data,"aw"
	.type	 gBikeCyclingChallenge,object
	.size	 gBikeCyclingChallenge,1
gBikeCyclingChallenge:
	.byte	0x0
	.globl	gBikeCollisions
	.type	 gBikeCollisions,object
	.size	 gBikeCollisions,1
gBikeCollisions:
	.byte	0x0
	.globl	gBikeCyclingTimer
	.align	2, 0
	.type	 gBikeCyclingTimer,object
	.size	 gBikeCyclingTimer,4
gBikeCyclingTimer:
	.word	0x0
	.globl	gUnknown_02039258
	.type	 gUnknown_02039258,object
	.size	 gUnknown_02039258,1
gUnknown_02039258:
	.byte	0x0
	.globl	gUnknown_02039259
	.type	 gUnknown_02039259,object
	.size	 gUnknown_02039259,1
gUnknown_02039259:
	.byte	0x0
	.globl	gUnknown_0203925A
	.type	 gUnknown_0203925A,object
	.size	 gUnknown_0203925A,1
gUnknown_0203925A:
	.byte	0x0
	.globl	gUnknown_0203925B
	.type	 gUnknown_0203925B,object
	.size	 gUnknown_0203925B,1
gUnknown_0203925B:
	.byte	0x0
	.globl	gUnknown_0203925C
	.type	 gUnknown_0203925C,object
	.size	 gUnknown_0203925C,1
gUnknown_0203925C:
	.byte	0x0
.text
	.align	2, 0
	.globl	ScrSpecial_ShowDiploma
	.type	 ScrSpecial_ShowDiploma,function
	.thumb_func
ScrSpecial_ShowDiploma:
	push	{lr}
	ldr	r0, .L3
	bl	SetMainCallback2
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	CB2_ShowDiploma
.Lfe1:
	.size	 ScrSpecial_ShowDiploma,.Lfe1-ScrSpecial_ShowDiploma
	.align	2, 0
	.globl	ScrSpecial_ViewWallClock
	.type	 ScrSpecial_ViewWallClock,function
	.thumb_func
ScrSpecial_ViewWallClock:
	push	{lr}
	ldr	r0, .L6
	ldr	r1, .L6+0x4
	str	r1, [r0, #0x8]
	ldr	r0, .L6+0x8
	bl	SetMainCallback2
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gMain
	.word	c2_exit_to_overworld_2_switch
	.word	CB2_ViewWallClock
.Lfe2:
	.size	 ScrSpecial_ViewWallClock,.Lfe2-ScrSpecial_ViewWallClock
	.align	2, 0
	.globl	ResetCyclingRoadChallengeData
	.type	 ResetCyclingRoadChallengeData,function
	.thumb_func
ResetCyclingRoadChallengeData:
	ldr	r0, .L9
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L9+0x4
	strb	r1, [r0]
	ldr	r1, .L9+0x8
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L10:
	.align	2, 0
.L9:
	.word	gBikeCyclingChallenge
	.word	gBikeCollisions
	.word	gBikeCyclingTimer
.Lfe3:
	.size	 ResetCyclingRoadChallengeData,.Lfe3-ResetCyclingRoadChallengeData
	.align	2, 0
	.globl	ScrSpecial_BeginCyclingRoadChallenge
	.type	 ScrSpecial_BeginCyclingRoadChallenge,function
	.thumb_func
ScrSpecial_BeginCyclingRoadChallenge:
	ldr	r1, .L12
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L12+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L12+0x8
	ldr	r0, .L12+0xc
	ldr	r0, [r0, #0x20]
	str	r0, [r1]
	bx	lr
.L13:
	.align	2, 0
.L12:
	.word	gBikeCyclingChallenge
	.word	gBikeCollisions
	.word	gBikeCyclingTimer
	.word	gMain
.Lfe4:
	.size	 ScrSpecial_BeginCyclingRoadChallenge,.Lfe4-ScrSpecial_BeginCyclingRoadChallenge
	.align	2, 0
	.globl	GetPlayerAvatarBike
	.type	 GetPlayerAvatarBike,function
	.thumb_func
GetPlayerAvatarBike:
	push	{lr}
	mov	r0, #0x4
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L15	@cond_branch
	mov	r0, #0x1
	b	.L17
.L15:
	mov	r0, #0x2
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L16	@cond_branch
	mov	r0, #0x0
	b	.L17
.L16:
	mov	r0, #0x2
.L17:
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetPlayerAvatarBike,.Lfe5-GetPlayerAvatarBike
	.align	2, 0
	.type	 DetermineCyclingRoadResults,function
	.thumb_func
DetermineCyclingRoadResults:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r6, #0x63
	bhi	.L19	@cond_branch
	ldr	r4, .L42
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L42+0x4
	add	r0, r4, #0
	bl	StringAppend
	b	.L20
.L43:
	.align	2, 0
.L42:
	.word	gStringVar1
	.word	gOtherText_Times
.L19:
	ldr	r0, .L44
	ldr	r1, .L44+0x4
	bl	StringCopy
.L20:
	ldr	r0, .L44+0x8
	cmp	r7, r0
	bhi	.L21	@cond_branch
	ldr	r4, .L44+0xc
	add	r0, r7, #0
	mov	r1, #0x3c
	bl	__udivsi3
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r0, #0xad
	strb	r0, [r4, #0x2]
	add	r5, r4, #0x3
	add	r0, r7, #0
	mov	r1, #0x3c
	bl	__umodsi3
	mov	r1, #0x64
	mul	r0, r0, r1
	mov	r1, #0x3c
	bl	__udivsi3
	add	r1, r0, #0
	add	r0, r5, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L44+0x10
	add	r0, r4, #0
	bl	StringAppend
	b	.L22
.L45:
	.align	2, 0
.L44:
	.word	gStringVar1
	.word	gOtherText_99Times
	.word	0xe0f
	.word	gStringVar2
	.word	gOtherText_Seconds
.L21:
	ldr	r0, .L46
	ldr	r1, .L46+0x4
	bl	StringCopy
.L22:
	mov	r4, #0x0
	cmp	r6, #0
	bne	.L23	@cond_branch
	mov	r4, #0x5
	b	.L24
.L47:
	.align	2, 0
.L46:
	.word	gStringVar2
	.word	gOtherText_1Minute
.L23:
	cmp	r6, #0x3
	bhi	.L25	@cond_branch
	mov	r4, #0x4
	b	.L24
.L25:
	cmp	r6, #0x9
	bhi	.L27	@cond_branch
	mov	r4, #0x3
	b	.L24
.L27:
	cmp	r6, #0x13
	bhi	.L29	@cond_branch
	mov	r4, #0x2
	b	.L24
.L29:
	cmp	r6, #0x63
	bhi	.L24	@cond_branch
	mov	r4, #0x1
.L24:
	add	r0, r7, #0
	mov	r1, #0x3c
	bl	__udivsi3
	cmp	r0, #0xa
	bhi	.L32	@cond_branch
	add	r0, r4, #0x5
	b	.L41
.L32:
	cmp	r0, #0xf
	bhi	.L34	@cond_branch
	add	r0, r4, #0x4
	b	.L41
.L34:
	cmp	r0, #0x14
	bhi	.L36	@cond_branch
	add	r0, r4, #0x3
	b	.L41
.L36:
	cmp	r0, #0x28
	bhi	.L38	@cond_branch
	add	r0, r4, #0x2
	b	.L41
.L38:
	cmp	r0, #0x3b
	bhi	.L33	@cond_branch
	add	r0, r4, #0x1
.L41:
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L33:
	ldr	r0, .L48
	strh	r4, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gScriptResult
.Lfe6:
	.size	 DetermineCyclingRoadResults,.Lfe6-DetermineCyclingRoadResults
	.align	2, 0
	.globl	FinishCyclingRoadChallenge
	.type	 FinishCyclingRoadChallenge,function
	.thumb_func
FinishCyclingRoadChallenge:
	push	{r4, r5, lr}
	ldr	r0, .L51
	ldr	r1, .L51+0x4
	ldr	r4, [r0, #0x20]
	ldr	r0, [r1]
	sub	r4, r4, r0
	ldr	r5, .L51+0x8
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	DetermineCyclingRoadResults
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	RecordCyclingRoadResults
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gMain
	.word	gBikeCyclingTimer
	.word	gBikeCollisions
.Lfe7:
	.size	 FinishCyclingRoadChallenge,.Lfe7-FinishCyclingRoadChallenge
	.align	2, 0
	.type	 RecordCyclingRoadResults,function
	.thumb_func
RecordCyclingRoadResults:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	ldr	r6, .L56
	add	r0, r6, #0
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r7, .L56+0x4
	add	r0, r7, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	add	r4, r4, r0
	cmp	r4, r5
	bhi	.L55	@cond_branch
	cmp	r4, #0
	bne	.L54	@cond_branch
.L55:
	lsl	r1, r5, #0x10
	lsr	r1, r1, #0x10
	add	r0, r6, #0
	bl	VarSet
	lsr	r1, r5, #0x10
	add	r0, r7, #0
	bl	VarSet
	ldr	r0, .L56+0x8
	mov	r1, r8
	bl	VarSet
.L54:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	0x4028
	.word	0x4029
	.word	0x4027
.Lfe8:
	.size	 RecordCyclingRoadResults,.Lfe8-RecordCyclingRoadResults
	.align	2, 0
	.globl	GetRecordedCyclingRoadResults
	.type	 GetRecordedCyclingRoadResults,function
	.thumb_func
GetRecordedCyclingRoadResults:
	push	{r4, lr}
	ldr	r0, .L61
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L61+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	add	r4, r4, r0
	cmp	r4, #0
	beq	.L59	@cond_branch
	ldr	r0, .L61+0x8
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	DetermineCyclingRoadResults
	mov	r0, #0x1
	b	.L60
.L62:
	.align	2, 0
.L61:
	.word	0x4028
	.word	0x4029
	.word	0x4027
.L59:
	mov	r0, #0x0
.L60:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 GetRecordedCyclingRoadResults,.Lfe9-GetRecordedCyclingRoadResults
	.align	2, 0
	.globl	UpdateCyclingRoadState
	.type	 UpdateCyclingRoadState,function
	.thumb_func
UpdateCyclingRoadState:
	push	{r4, lr}
	ldr	r0, .L67
	ldrh	r1, [r0]
	ldr	r0, .L67+0x4
	cmp	r1, r0
	beq	.L63	@cond_branch
	ldr	r4, .L67+0x8
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	beq	.L66	@cond_branch
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L63	@cond_branch
.L66:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	VarSet
	mov	r0, #0x0
	bl	Overworld_SetSavedMusic
.L63:
	pop	{r4}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gUnknown_020297F0
	.word	0xc1d
	.word	0x40a9
.Lfe10:
	.size	 UpdateCyclingRoadState,.Lfe10-UpdateCyclingRoadState
	.align	2, 0
	.globl	SetSSTidalFlag
	.type	 SetSSTidalFlag,function
	.thumb_func
SetSSTidalFlag:
	push	{lr}
	ldr	r0, .L70
	bl	FlagSet
	ldr	r0, .L70+0x4
	bl	GetVarPointer
	mov	r1, #0x0
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	0x82d
	.word	0x404a
.Lfe11:
	.size	 SetSSTidalFlag,.Lfe11-SetSSTidalFlag
	.align	2, 0
	.globl	ResetSSTidalFlag
	.type	 ResetSSTidalFlag,function
	.thumb_func
ResetSSTidalFlag:
	push	{lr}
	ldr	r0, .L73
	bl	FlagClear
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	0x82d
.Lfe12:
	.size	 ResetSSTidalFlag,.Lfe12-ResetSSTidalFlag
	.align	2, 0
	.globl	CountSSTidalStep
	.type	 CountSSTidalStep,function
	.thumb_func
CountSSTidalStep:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L79
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L77	@cond_branch
	ldr	r0, .L79+0x4
	bl	GetVarPointer
	ldrh	r1, [r0]
	add	r1, r4, r1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xcc
	bhi	.L76	@cond_branch
.L77:
	mov	r0, #0x0
	b	.L78
.L80:
	.align	2, 0
.L79:
	.word	0x82d
	.word	0x404a
.L76:
	mov	r0, #0x1
.L78:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 CountSSTidalStep,.Lfe13-CountSSTidalStep
	.align	2, 0
	.globl	GetSSTidalLocation
	.type	 GetSSTidalLocation,function
	.thumb_func
GetSSTidalLocation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	add	r5, r1, #0
	add	r6, r2, #0
	add	r7, r3, #0
	ldr	r0, .L106
	bl	GetVarPointer
	add	r4, r0, #0
	ldr	r0, .L106+0x4
	bl	GetVarPointer
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x9
	bhi	.L82	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L106+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L107:
	.align	2, 0
.L106:
	.word	0x404a
	.word	0x40b4
	.word	.L101
	.align	2, 0
	.align	2, 0
.L101:
	.word	.L84
	.word	.L91
	.word	.L86
	.word	.L88
	.word	.L88
	.word	.L90
	.word	.L96
	.word	.L84
	.word	.L86
	.word	.L90
.L84:
	mov	r0, #0x1
	b	.L103
.L86:
	mov	r0, #0x4
	b	.L103
.L88:
	mov	r0, #0x2
	b	.L103
.L90:
	mov	r0, #0x3
	b	.L103
.L91:
	ldrh	r0, [r4]
	cmp	r0, #0x3b
	bhi	.L92	@cond_branch
	mov	r0, #0x31
	strb	r0, [r5]
	ldrh	r0, [r4]
	add	r0, r0, #0x13
	b	.L104
.L92:
	cmp	r0, #0x8b
	bhi	.L94	@cond_branch
	mov	r0, #0x30
	strb	r0, [r5]
	ldrh	r0, [r4]
	sub	r0, r0, #0x3c
	b	.L104
.L94:
	mov	r0, #0x2f
	strb	r0, [r5]
	ldrh	r0, [r4]
	sub	r0, r0, #0x8c
	b	.L104
.L96:
	ldrh	r0, [r4]
	cmp	r0, #0x41
	bhi	.L97	@cond_branch
	mov	r0, #0x2f
	strb	r0, [r5]
	ldrh	r1, [r4]
	mov	r0, #0x41
	b	.L105
.L97:
	cmp	r0, #0x91
	bhi	.L99	@cond_branch
	mov	r0, #0x30
	strb	r0, [r5]
	ldrh	r1, [r4]
	mov	r0, #0x91
	b	.L105
.L99:
	mov	r0, #0x31
	strb	r0, [r5]
	ldrh	r1, [r4]
	mov	r0, #0xe0
.L105:
	sub	r0, r0, r1
.L104:
	strh	r0, [r6]
.L82:
	mov	r0, #0x0
	mov	r1, r8
	strb	r0, [r1]
	mov	r0, #0x14
	strh	r0, [r7]
	mov	r0, #0x0
.L103:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 GetSSTidalLocation,.Lfe14-GetSSTidalLocation
	.align	2, 0
	.globl	GetLinkPartnerNames
	.type	 GetLinkPartnerNames,function
	.thumb_func
GetLinkPartnerNames:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	bl	sub_8008218
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	sub_800820C
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L110	@cond_branch
	ldr	r0, .L115
	mov	r8, r0
.L112:
	cmp	r7, r4
	beq	.L111	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	lsl	r1, r4, #0x3
	sub	r1, r1, r4
	lsl	r1, r1, #0x2
	ldr	r2, .L115+0x4
	add	r1, r1, r2
	bl	StringCopy
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L111:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L112	@cond_branch
.L110:
	add	r0, r5, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L116:
	.align	2, 0
.L115:
	.word	gUnknown_083D1464
	.word	gLinkPlayers+0x8
.Lfe15:
	.size	 GetLinkPartnerNames,.Lfe15-GetLinkPartnerNames
	.globl	gUnknown_083F8358
	.section .rodata
	.type	 gUnknown_083F8358,object
	.size	 gUnknown_083F8358,4
gUnknown_083F8358:
	.byte	0x7
	.byte	0x9
	.byte	0x8
	.byte	0xa
	.globl	gUnknown_083F835C
	.type	 gUnknown_083F835C,object
	.size	 gUnknown_083F835C,8
gUnknown_083F835C:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0xffffffff
	.byte	0xffffffff
	.byte	0x0
.text
	.align	2, 0
	.globl	SpawnBerryBlenderLinkPlayerSprites
	.type	 SpawnBerryBlenderLinkPlayerSprites,function
	.thumb_func
SpawnBerryBlenderLinkPlayerSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffec
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r9, r0
	mov	r8, r0
	ldr	r1, .L136
	add	r0, sp, #0x8
	mov	r2, #0x4
	bl	memcpy
	add	r4, sp, #0xc
	ldr	r1, .L136+0x4
	add	r0, r4, #0
	mov	r2, #0x8
	bl	memcpy
	bl	sub_8008218
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	bl	player_get_direction_lower_nybble
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x2
	beq	.L120	@cond_branch
	cmp	r0, #0x2
	bgt	.L125	@cond_branch
	cmp	r0, #0x1
	beq	.L122	@cond_branch
	b	.L118
.L137:
	.align	2, 0
.L136:
	.word	gUnknown_083F8358
	.word	gUnknown_083F835C
.L125:
	cmp	r1, #0x3
	beq	.L119	@cond_branch
	cmp	r1, #0x4
	beq	.L121	@cond_branch
	b	.L118
.L119:
	mov	r7, #0x2
	ldr	r1, .L138
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	b	.L133
.L139:
	.align	2, 0
.L138:
	.word	gSaveBlock1
.L120:
	mov	r7, #0x1
	ldr	r0, .L140
	ldrh	r1, [r0]
	mov	r9, r1
	ldrh	r0, [r0, #0x2]
	sub	r0, r0, #0x1
	b	.L134
.L141:
	.align	2, 0
.L140:
	.word	gSaveBlock1
.L121:
	ldr	r1, .L142
	ldrh	r0, [r1]
	add	r0, r0, #0x1
.L133:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldrh	r1, [r1, #0x2]
	mov	r8, r1
	b	.L118
.L143:
	.align	2, 0
.L142:
	.word	gSaveBlock1
.L122:
	mov	r7, #0x3
	ldr	r0, .L144
	ldrh	r4, [r0]
	mov	r9, r4
	ldrh	r0, [r0, #0x2]
	add	r0, r0, #0x1
.L134:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L118:
	mov	r6, #0x0
	b	.L135
.L145:
	.align	2, 0
.L144:
	.word	gSaveBlock1
.L129:
	cmp	sl, r6
	beq	.L128	@cond_branch
	ldr	r1, .L146
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x13]
	mov	r0, #0x0
	bl	GetRivalAvatarGraphicsIdByStateIdAndGender
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	add	r1, r1, r7
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	mov	r2, #0xf0
	sub	r2, r2, r6
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r5, r7, #0x1
	mov	r3, sp
	add	r3, r3, r5
	add	r3, r3, #0xc
	ldrb	r3, [r3, #0]
	lsl	r3, r3, #24
	asr	r3, r3, #24
	mov	ip, r3
	mov	r4, r9
	lsl	r3, r4, #0x10
	asr	r3, r3, #0x10
	add	r3, r3, ip
	add	r3, r3, #0x7
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	mov	r4, sp
	add	r4, r4, #0xd
	add	r4, r4, r5
	ldrb	r4, [r4, #0]
	lsl	r4, r4, #24
	asr	r4, r4, #24
	mov	ip, r4
	mov	r5, r8
	lsl	r4, r5, #0x10
	asr	r4, r4, #0x10
	add	r4, r4, ip
	add	r4, r4, #0x7
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	str	r4, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	bl	SpawnSpecialFieldObjectParametrized
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x4
	bne	.L128	@cond_branch
	mov	r7, #0x0
.L128:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L135:
	ldr	r0, .L146+0x4
	ldrh	r0, [r0]
	cmp	r6, r0
	bcc	.L129	@cond_branch
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L147:
	.align	2, 0
.L146:
	.word	gLinkPlayers
	.word	gSpecialVar_0x8004
.Lfe16:
	.size	 SpawnBerryBlenderLinkPlayerSprites,.Lfe16-SpawnBerryBlenderLinkPlayerSprites
	.globl	gUnknown_083F8364
	.section .rodata
	.align	2, 0
	.type	 gUnknown_083F8364,object
	.size	 gUnknown_083F8364,12
gUnknown_083F8364:
	.byte	0x7
	.byte	0x10
	.space	2
	.byte	0xf
	.byte	0x12
	.space	2
	.byte	0xb
	.byte	0x16
	.space	2
.text
	.align	2, 0
	.globl	MauvilleGymSpecial1
	.type	 MauvilleGymSpecial1,function
	.thumb_func
MauvilleGymSpecial1:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L156
.L152:
	ldr	r0, .L156+0x4
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L153	@cond_branch
	lsl	r1, r4, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1]
	ldrb	r1, [r1, #0x1]
	ldr	r2, .L156+0x8
	bl	MapGridSetMetatileIdAt
	b	.L151
.L157:
	.align	2, 0
.L156:
	.word	gUnknown_083F8364
	.word	gSpecialVar_0x8004
	.word	0x206
.L153:
	lsl	r1, r4, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1]
	ldrb	r1, [r1, #0x1]
	ldr	r2, .L158
	bl	MapGridSetMetatileIdAt
.L151:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L152	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	0x205
.Lfe17:
	.size	 MauvilleGymSpecial1,.Lfe17-MauvilleGymSpecial1
	.align	2, 0
	.globl	MauvilleGymSpecial2
	.type	 MauvilleGymSpecial2,function
	.thumb_func
MauvilleGymSpecial2:
	push	{r4, r5, r6, lr}
	mov	r5, #0xc
.L164:
	mov	r4, #0x7
	add	r6, r5, #0x1
.L168:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L202
	add	r0, r0, r1
	cmp	r0, #0x37
	bls	.LCB1156
	b	.L167	@long jump
.LCB1156:
	lsl	r0, r0, #0x2
	ldr	r1, .L202+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L203:
	.align	2, 0
.L202:
	.word	0xfffffde6
	.word	.L197
	.align	2, 0
	.align	2, 0
.L197:
	.word	.L191
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L170
	.word	.L171
	.word	.L178
	.word	.L179
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L172
	.word	.L173
	.word	.L180
	.word	.L181
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L174
	.word	.L175
	.word	.L182
	.word	.L183
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L176
	.word	.L177
	.word	.L184
	.word	.L185
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L186
	.word	.L188
	.word	.L190
	.word	.L194
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L187
	.word	.L189
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L167
	.word	.L196
	.word	.L195
.L170:
	mov	r2, #0x8c
	lsl	r2, r2, #0x2
	b	.L201
.L171:
	ldr	r2, .L204
	b	.L201
.L205:
	.align	2, 0
.L204:
	.word	0x231
.L172:
	mov	r2, #0x8e
	lsl	r2, r2, #0x2
	b	.L201
.L173:
	ldr	r2, .L206
	b	.L201
.L207:
	.align	2, 0
.L206:
	.word	0x239
.L174:
	mov	r2, #0x88
	lsl	r2, r2, #0x2
	b	.L201
.L175:
	ldr	r2, .L208
	b	.L201
.L209:
	.align	2, 0
.L208:
	.word	0x221
.L176:
	ldr	r2, .L210
	b	.L201
.L211:
	.align	2, 0
.L210:
	.word	0xe28
.L177:
	ldr	r2, .L212
	b	.L201
.L213:
	.align	2, 0
.L212:
	.word	0xe29
.L178:
	ldr	r2, .L214
	b	.L201
.L215:
	.align	2, 0
.L214:
	.word	0x232
.L179:
	ldr	r2, .L216
	b	.L201
.L217:
	.align	2, 0
.L216:
	.word	0x233
.L180:
	ldr	r2, .L218
	b	.L201
.L219:
	.align	2, 0
.L218:
	.word	0x23a
.L181:
	ldr	r2, .L220
	b	.L201
.L221:
	.align	2, 0
.L220:
	.word	0x23b
.L182:
	ldr	r2, .L222
	b	.L201
.L223:
	.align	2, 0
.L222:
	.word	0x222
.L183:
	ldr	r2, .L224
	b	.L201
.L225:
	.align	2, 0
.L224:
	.word	0x223
.L184:
	ldr	r2, .L226
	b	.L201
.L227:
	.align	2, 0
.L226:
	.word	0xe2a
.L185:
	ldr	r2, .L228
	b	.L201
.L229:
	.align	2, 0
.L228:
	.word	0xe2b
.L186:
	ldr	r2, .L230
	b	.L201
.L231:
	.align	2, 0
.L230:
	.word	0xe42
.L187:
	ldr	r2, .L232
	b	.L201
.L233:
	.align	2, 0
.L232:
	.word	0x21a
.L188:
	ldr	r2, .L234
	b	.L201
.L235:
	.align	2, 0
.L234:
	.word	0xe43
.L189:
	ldr	r2, .L236
	b	.L201
.L237:
	.align	2, 0
.L236:
	.word	0x21a
.L190:
	mov	r2, #0xe4
	lsl	r2, r2, #0x4
	b	.L201
.L191:
	sub	r1, r5, #0x1
	add	r0, r4, #0
	bl	MapGridGetMetatileIdAt
	mov	r1, #0x90
	lsl	r1, r1, #0x2
	cmp	r0, r1
	bne	.L192	@cond_branch
	ldr	r2, .L238
	b	.L201
.L239:
	.align	2, 0
.L238:
	.word	0xe48
.L192:
	ldr	r2, .L240
	b	.L201
.L241:
	.align	2, 0
.L240:
	.word	0xe49
.L194:
	ldr	r2, .L242
	b	.L201
.L243:
	.align	2, 0
.L242:
	.word	0xe41
.L195:
	mov	r2, #0xe5
	lsl	r2, r2, #0x4
.L201:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
	b	.L167
.L196:
	ldr	r2, .L244
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
.L167:
	add	r4, r4, #0x1
	cmp	r4, #0xf
	bgt	.LCB1452
	b	.L168	@long jump
.LCB1452:
	add	r5, r6, #0
	cmp	r5, #0x17
	bgt	.LCB1458
	b	.L164	@long jump
.LCB1458:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L245:
	.align	2, 0
.L244:
	.word	0x251
.Lfe18:
	.size	 MauvilleGymSpecial2,.Lfe18-MauvilleGymSpecial2
	.align	2, 0
	.globl	MauvilleGymSpecial3
	.type	 MauvilleGymSpecial3,function
	.thumb_func
MauvilleGymSpecial3:
	push	{r4, r5, r6, lr}
	ldr	r4, .L279
	mov	r5, #0x2
.L250:
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x1]
	ldr	r2, .L279+0x4
	bl	MapGridSetMetatileIdAt
	add	r4, r4, #0x4
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L250	@cond_branch
	mov	r5, #0xc
.L255:
	mov	r4, #0x7
	add	r6, r5, #0x1
.L259:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L279+0x8
	add	r0, r0, r1
	cmp	r0, #0x30
	bls	.LCB1518
	b	.L258	@long jump
.LCB1518:
	lsl	r0, r0, #0x2
	ldr	r1, .L279+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L280:
	.align	2, 0
.L279:
	.word	gUnknown_083F8364
	.word	0x206
	.word	0xfffffde0
	.word	.L274
	.align	2, 0
	.align	2, 0
.L274:
	.word	.L261
	.word	.L262
	.word	.L265
	.word	.L266
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L263
	.word	.L264
	.word	.L267
	.word	.L268
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L269
	.word	.L270
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L272
	.word	.L272
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L258
	.word	.L273
.L261:
	mov	r2, #0x8c
	lsl	r2, r2, #0x2
	b	.L278
.L262:
	ldr	r2, .L281
	b	.L278
.L282:
	.align	2, 0
.L281:
	.word	0x231
.L263:
	mov	r2, #0x8e
	lsl	r2, r2, #0x2
	b	.L278
.L264:
	ldr	r2, .L283
	b	.L278
.L284:
	.align	2, 0
.L283:
	.word	0x239
.L265:
	ldr	r2, .L285
	b	.L278
.L286:
	.align	2, 0
.L285:
	.word	0x232
.L266:
	ldr	r2, .L287
	b	.L278
.L288:
	.align	2, 0
.L287:
	.word	0x233
.L267:
	ldr	r2, .L289
	b	.L278
.L290:
	.align	2, 0
.L289:
	.word	0x23a
.L268:
	ldr	r2, .L291
	b	.L278
.L292:
	.align	2, 0
.L291:
	.word	0x23b
.L269:
	ldr	r2, .L293
	b	.L278
.L294:
	.align	2, 0
.L293:
	.word	0xe42
.L270:
	ldr	r2, .L295
	b	.L278
.L296:
	.align	2, 0
.L295:
	.word	0xe43
.L272:
	ldr	r2, .L297
.L278:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
	b	.L258
.L298:
	.align	2, 0
.L297:
	.word	0x21a
.L273:
	ldr	r2, .L299
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
.L258:
	add	r4, r4, #0x1
	cmp	r4, #0xf
	bgt	.LCB1666
	b	.L259	@long jump
.LCB1666:
	add	r5, r6, #0
	cmp	r5, #0x17
	bgt	.LCB1672
	b	.L255	@long jump
.LCB1672:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	0x251
.Lfe19:
	.size	 MauvilleGymSpecial3,.Lfe19-MauvilleGymSpecial3
	.globl	gUnknown_083F8370
	.section .rodata
	.type	 gUnknown_083F8370,object
gUnknown_083F8370:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.size	 gUnknown_083F8370,5
	.globl	gUnknown_083F8376
	.align	1, 0
	.type	 gUnknown_083F8376,object
gUnknown_083F8376:
	.short	0x218
	.short	0x219
	.short	0x21a
	.short	0x21b
	.short	0x21c
	.size	 gUnknown_083F8376,10
.text
	.align	2, 0
	.globl	PetalburgGymSpecial1
	.type	 PetalburgGymSpecial1,function
	.thumb_func
PetalburgGymSpecial1:
	push	{lr}
	ldr	r0, .L302
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L302+0x4
	strb	r1, [r0]
	mov	r0, #0x2c
	bl	PlaySE
	ldr	r0, .L302+0x8
	mov	r1, #0x8
	bl	CreateTask
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gUnknown_02039258
	.word	gUnknown_02039259
	.word	Task_PetalburgGym
.Lfe20:
	.size	 PetalburgGymSpecial1,.Lfe20-PetalburgGymSpecial1
	.align	2, 0
	.type	 Task_PetalburgGym,function
	.thumb_func
Task_PetalburgGym:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L308
	ldr	r5, .L308+0x4
	ldrb	r1, [r5]
	add	r0, r1, r0
	ldr	r4, .L308+0x8
	ldrb	r2, [r4]
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L305	@cond_branch
	ldr	r0, .L308+0xc
	ldrb	r0, [r0]
	ldr	r2, .L308+0x10
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	PetalburgGymFunc
	mov	r0, #0x0
	strb	r0, [r4]
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bne	.L307	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
	b	.L307
.L309:
	.align	2, 0
.L308:
	.word	gUnknown_083F8370
	.word	gUnknown_02039259
	.word	gUnknown_02039258
	.word	gSpecialVar_0x8004
	.word	gUnknown_083F8376
.L305:
	add	r0, r2, #0x1
	strb	r0, [r4]
.L307:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 Task_PetalburgGym,.Lfe21-Task_PetalburgGym
	.align	2, 0
	.type	 PetalburgGymFunc,function
	.thumb_func
PetalburgGymFunc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	mov	r7, #0x0
	sub	r0, r0, #0x1
	cmp	r0, #0x7
	bhi	.L311	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L329
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L330:
	.align	2, 0
.L329:
	.word	.L320
	.align	2, 0
	.align	2, 0
.L320:
	.word	.L312
	.word	.L313
	.word	.L314
	.word	.L315
	.word	.L316
	.word	.L317
	.word	.L318
	.word	.L319
.L312:
	mov	r7, #0x2
	mov	r1, sp
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x7
	strh	r0, [r1, #0x2]
	add	r1, sp, #0x8
	mov	r0, #0x68
	b	.L327
.L313:
	mov	r7, #0x2
	mov	r1, sp
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x7
	strh	r0, [r1, #0x2]
	add	r1, sp, #0x8
	mov	r0, #0x4e
	b	.L327
.L314:
	mov	r7, #0x2
	mov	r1, sp
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x7
	strh	r0, [r1, #0x2]
	add	r1, sp, #0x8
	mov	r0, #0x5b
	b	.L327
.L315:
	mov	r7, #0x1
	mov	r1, sp
	mov	r0, #0x7
	strh	r0, [r1]
	add	r1, sp, #0x8
	mov	r0, #0x27
	b	.L328
.L316:
	mov	r7, #0x2
	mov	r1, sp
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x7
	strh	r0, [r1, #0x2]
	add	r1, sp, #0x8
	mov	r0, #0x34
.L327:
	strh	r0, [r1]
	strh	r0, [r1, #0x2]
	b	.L311
.L317:
	mov	r7, #0x1
	mov	r0, sp
	strh	r7, [r0]
	add	r1, sp, #0x8
	mov	r0, #0x41
	b	.L328
.L318:
	mov	r7, #0x1
	mov	r1, sp
	mov	r0, #0x7
	strh	r0, [r1]
	add	r1, sp, #0x8
	mov	r0, #0xd
	b	.L328
.L319:
	mov	r7, #0x1
	mov	r0, sp
	strh	r7, [r0]
	add	r1, sp, #0x8
	mov	r0, #0x1a
.L328:
	strh	r0, [r1]
.L311:
	mov	r6, #0x0
	cmp	r6, r7
	bcs	.L323	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	add	r0, r1, #0
	add	r1, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	mov	r9, r1
	add	r1, r2, #0
	add	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	mov	r8, r1
.L325:
	lsl	r1, r6, #0x1
	mov	r3, sp
	add	r5, r3, r1
	ldrh	r0, [r5]
	add	r0, r0, #0x7
	add	r4, sp, #0x8
	add	r4, r4, r1
	ldrh	r1, [r4]
	add	r1, r1, #0x7
	mov	r3, r9
	lsr	r2, r3, #0x10
	bl	MapGridSetMetatileIdAt
	ldrh	r0, [r5]
	add	r0, r0, #0x7
	ldrh	r1, [r4]
	add	r1, r1, #0x8
	mov	r3, r8
	lsr	r2, r3, #0x10
	bl	MapGridSetMetatileIdAt
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, r7
	bcc	.L325	@cond_branch
.L323:
	bl	DrawWholeMapView
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 PetalburgGymFunc,.Lfe22-PetalburgGymFunc
	.align	2, 0
	.globl	PetalburgGymSpecial2
	.type	 PetalburgGymSpecial2,function
	.thumb_func
PetalburgGymSpecial2:
	push	{lr}
	ldr	r0, .L332
	ldrb	r0, [r0]
	ldr	r1, .L332+0x4
	ldrh	r1, [r1, #0x8]
	bl	PetalburgGymFunc
	pop	{r0}
	bx	r0
.L333:
	.align	2, 0
.L332:
	.word	gSpecialVar_0x8004
	.word	gUnknown_083F8376
.Lfe23:
	.size	 PetalburgGymSpecial2,.Lfe23-PetalburgGymSpecial2
	.align	2, 0
	.globl	ShowFieldMessageStringVar4
	.type	 ShowFieldMessageStringVar4,function
	.thumb_func
ShowFieldMessageStringVar4:
	push	{lr}
	ldr	r0, .L335
	bl	ShowFieldMessage
	pop	{r0}
	bx	r0
.L336:
	.align	2, 0
.L335:
	.word	gStringVar4
.Lfe24:
	.size	 ShowFieldMessageStringVar4,.Lfe24-ShowFieldMessageStringVar4
	.align	2, 0
	.globl	StorePlayerCoordsInVars
	.type	 StorePlayerCoordsInVars,function
	.thumb_func
StorePlayerCoordsInVars:
	ldr	r1, .L338
	ldr	r2, .L338+0x4
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldr	r1, .L338+0x8
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1]
	bx	lr
.L339:
	.align	2, 0
.L338:
	.word	gSpecialVar_0x8004
	.word	gSaveBlock1
	.word	gSpecialVar_0x8005
.Lfe25:
	.size	 StorePlayerCoordsInVars,.Lfe25-StorePlayerCoordsInVars
	.align	2, 0
	.globl	GetPlayerTrainerIdOnesDigit
	.type	 GetPlayerTrainerIdOnesDigit,function
	.thumb_func
GetPlayerTrainerIdOnesDigit:
	push	{lr}
	ldr	r0, .L341
	ldrb	r1, [r0, #0xb]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0, #0xa]
	orr	r0, r0, r1
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L342:
	.align	2, 0
.L341:
	.word	gSaveBlock2
.Lfe26:
	.size	 GetPlayerTrainerIdOnesDigit,.Lfe26-GetPlayerTrainerIdOnesDigit
	.align	2, 0
	.globl	GetPlayerBigGuyGirlString
	.type	 GetPlayerBigGuyGirlString,function
	.thumb_func
GetPlayerBigGuyGirlString:
	push	{lr}
	ldr	r0, .L346
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L344	@cond_branch
	ldr	r0, .L346+0x4
	ldr	r1, .L346+0x8
	bl	StringCopy
	b	.L345
.L347:
	.align	2, 0
.L346:
	.word	gSaveBlock2
	.word	gStringVar1
	.word	gOtherText_BigGuy
.L344:
	ldr	r0, .L348
	ldr	r1, .L348+0x4
	bl	StringCopy
.L345:
	pop	{r0}
	bx	r0
.L349:
	.align	2, 0
.L348:
	.word	gStringVar1
	.word	gOtherText_BigGirl
.Lfe27:
	.size	 GetPlayerBigGuyGirlString,.Lfe27-GetPlayerBigGuyGirlString
	.align	2, 0
	.globl	GetRivalSonDaughterString
	.type	 GetRivalSonDaughterString,function
	.thumb_func
GetRivalSonDaughterString:
	push	{lr}
	ldr	r0, .L353
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L351	@cond_branch
	ldr	r0, .L353+0x4
	ldr	r1, .L353+0x8
	bl	StringCopy
	b	.L352
.L354:
	.align	2, 0
.L353:
	.word	gSaveBlock2
	.word	gStringVar1
	.word	gOtherText_Daughter
.L351:
	ldr	r0, .L355
	ldr	r1, .L355+0x4
	bl	StringCopy
.L352:
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	gStringVar1
	.word	gOtherText_Son
.Lfe28:
	.size	 GetRivalSonDaughterString,.Lfe28-GetRivalSonDaughterString
	.align	2, 0
	.globl	sub_810E300
	.type	 sub_810E300,function
	.thumb_func
sub_810E300:
	ldr	r0, .L358
	ldrb	r0, [r0]
	bx	lr
.L359:
	.align	2, 0
.L358:
	.word	gBattleOutcome
.Lfe29:
	.size	 sub_810E300,.Lfe29-sub_810E300
	.align	2, 0
	.globl	CableCarWarp
	.type	 CableCarWarp,function
	.thumb_func
CableCarWarp:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L363
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L361	@cond_branch
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x4
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r3, #0x6
	bl	Overworld_SetWarpDestination
	b	.L362
.L364:
	.align	2, 0
.L363:
	.word	gSpecialVar_0x8004
.L361:
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x4
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x1
	mov	r3, #0x6
	bl	Overworld_SetWarpDestination
.L362:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 CableCarWarp,.Lfe30-CableCarWarp
	.align	2, 0
	.globl	SetFlagInVar
	.type	 SetFlagInVar,function
	.thumb_func
SetFlagInVar:
	push	{lr}
	ldr	r0, .L366
	ldrh	r0, [r0]
	bl	FlagSet
	pop	{r0}
	bx	r0
.L367:
	.align	2, 0
.L366:
	.word	gSpecialVar_0x8004
.Lfe31:
	.size	 SetFlagInVar,.Lfe31-SetFlagInVar
	.align	2, 0
	.globl	GetWeekCount
	.type	 GetWeekCount,function
	.thumb_func
GetWeekCount:
	push	{lr}
	ldr	r0, .L370
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x7
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L370+0x4
	cmp	r0, r1
	bls	.L369	@cond_branch
	add	r0, r1, #0
.L369:
	pop	{r1}
	bx	r1
.L371:
	.align	2, 0
.L370:
	.word	gLocalTime
	.word	0x270f
.Lfe32:
	.size	 GetWeekCount,.Lfe32-GetWeekCount
	.align	2, 0
	.globl	GetLeadMonFriendshipScore
	.type	 GetLeadMonFriendshipScore,function
	.thumb_func
GetLeadMonFriendshipScore:
	push	{r4, lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r1, r1, r0
	ldr	r0, .L380
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0xff
	bne	.L373	@cond_branch
	mov	r0, #0x6
	b	.L379
.L381:
	.align	2, 0
.L380:
	.word	gPlayerParty
.L373:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L374	@cond_branch
	mov	r0, #0x5
	b	.L379
.L374:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0x95
	bls	.L375	@cond_branch
	mov	r0, #0x4
	b	.L379
.L375:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0x63
	bls	.L376	@cond_branch
	mov	r0, #0x3
	b	.L379
.L376:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0x31
	bls	.L377	@cond_branch
	mov	r0, #0x2
	b	.L379
.L377:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0
	bne	.L378	@cond_branch
	mov	r0, #0x0
	b	.L379
.L378:
	mov	r0, #0x1
.L379:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 GetLeadMonFriendshipScore,.Lfe33-GetLeadMonFriendshipScore
	.align	2, 0
	.globl	CB2_FieldShowRegionMap
	.type	 CB2_FieldShowRegionMap,function
	.thumb_func
CB2_FieldShowRegionMap:
	push	{lr}
	ldr	r0, .L383
	bl	FieldInitRegionMap
	pop	{r0}
	bx	r0
.L384:
	.align	2, 0
.L383:
	.word	c2_exit_to_overworld_1_continue_scripts_restart_music
.Lfe34:
	.size	 CB2_FieldShowRegionMap,.Lfe34-CB2_FieldShowRegionMap
	.align	2, 0
	.globl	FieldShowRegionMap
	.type	 FieldShowRegionMap,function
	.thumb_func
FieldShowRegionMap:
	push	{lr}
	ldr	r0, .L386
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L387:
	.align	2, 0
.L386:
	.word	CB2_FieldShowRegionMap
.Lfe35:
	.size	 FieldShowRegionMap,.Lfe35-FieldShowRegionMap
	.align	2, 0
	.globl	DoPCTurnOnEffect
	.type	 DoPCTurnOnEffect,function
	.thumb_func
DoPCTurnOnEffect:
	push	{r4, lr}
	ldr	r4, .L390
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L389	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L390+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r2, [r1, #0xc]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x10]
.L389:
	pop	{r4}
	pop	{r0}
	bx	r0
.L391:
	.align	2, 0
.L390:
	.word	Task_PCTurnOnEffect
	.word	gTasks
.Lfe36:
	.size	 DoPCTurnOnEffect,.Lfe36-DoPCTurnOnEffect
	.align	2, 0
	.type	 Task_PCTurnOnEffect,function
	.thumb_func
Task_PCTurnOnEffect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L394
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L393	@cond_branch
	add	r0, r1, #0
	bl	PCTurnOffEffect_0
.L393:
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	gTasks
.Lfe37:
	.size	 Task_PCTurnOnEffect,.Lfe37-Task_PCTurnOnEffect
	.align	2, 0
	.type	 PCTurnOffEffect_0,function
	.thumb_func
PCTurnOffEffect_0:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bne	.L397	@cond_branch
	strh	r5, [r4, #0xe]
	bl	player_get_direction_lower_nybble
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x3
	beq	.L400	@cond_branch
	cmp	r0, #0x3
	bgt	.L404	@cond_branch
	cmp	r0, #0x2
	beq	.L399	@cond_branch
	b	.L398
.L404:
	cmp	r1, #0x4
	beq	.L401	@cond_branch
	b	.L398
.L399:
	mov	r6, #0x0
	b	.L406
.L400:
	mov	r6, #0xff
	b	.L406
.L401:
	mov	r6, #0x1
.L406:
	mov	r5, #0xff
.L398:
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	lsl	r2, r5, #0x18
	asr	r2, r2, #0x18
	bl	PCTurnOffEffect_1
	bl	DrawWholeMapView
	ldrh	r0, [r4, #0x10]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L397	@cond_branch
	ldrb	r0, [r4, #0xa]
	bl	DestroyTask
.L397:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 PCTurnOffEffect_0,.Lfe38-PCTurnOffEffect_0
	.align	2, 0
	.type	 PCTurnOffEffect_1,function
	.thumb_func
PCTurnOffEffect_1:
	push	{r4, r5, lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r3, #0x0
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L408	@cond_branch
	ldr	r0, .L420
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L409	@cond_branch
	mov	r3, #0x4
	b	.L414
.L421:
	.align	2, 0
.L420:
	.word	gSpecialVar_0x8004
.L409:
	cmp	r0, #0x1
	bne	.L411	@cond_branch
	ldr	r3, .L422
	b	.L414
.L423:
	.align	2, 0
.L422:
	.word	0x25a
.L411:
	cmp	r0, #0x2
	bne	.L414	@cond_branch
	ldr	r3, .L424
	b	.L414
.L425:
	.align	2, 0
.L424:
	.word	0x259
.L408:
	ldr	r0, .L426
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L415	@cond_branch
	mov	r3, #0x5
	b	.L414
.L427:
	.align	2, 0
.L426:
	.word	gSpecialVar_0x8004
.L415:
	cmp	r0, #0x1
	bne	.L417	@cond_branch
	ldr	r3, .L428
	b	.L414
.L429:
	.align	2, 0
.L428:
	.word	0x27f
.L417:
	cmp	r0, #0x2
	bne	.L414	@cond_branch
	ldr	r3, .L430
.L414:
	ldr	r2, .L430+0x4
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r0, r1
	add	r0, r0, #0x7
	mov	r5, #0x2
	ldrsh	r1, [r2, r5]
	lsl	r2, r4, #0x18
	asr	r2, r2, #0x18
	add	r1, r1, r2
	add	r1, r1, #0x7
	mov	r4, #0xc0
	lsl	r4, r4, #0x4
	add	r2, r4, #0
	orr	r3, r3, r2
	add	r2, r3, #0
	bl	MapGridSetMetatileIdAt
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L431:
	.align	2, 0
.L430:
	.word	0x27e
	.word	gSaveBlock1
.Lfe39:
	.size	 PCTurnOffEffect_1,.Lfe39-PCTurnOffEffect_1
	.align	2, 0
	.globl	DoPCTurnOffEffect
	.type	 DoPCTurnOffEffect,function
	.thumb_func
DoPCTurnOffEffect:
	push	{lr}
	bl	PCTurnOffEffect
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 DoPCTurnOffEffect,.Lfe40-DoPCTurnOffEffect
	.align	2, 0
	.type	 PCTurnOffEffect,function
	.thumb_func
PCTurnOffEffect:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r4, #0x0
	bl	player_get_direction_lower_nybble
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x3
	beq	.L436	@cond_branch
	cmp	r0, #0x3
	bgt	.L440	@cond_branch
	cmp	r0, #0x2
	beq	.L435	@cond_branch
	b	.L434
.L440:
	cmp	r1, #0x4
	beq	.L437	@cond_branch
	b	.L434
.L435:
	mov	r6, #0x0
	b	.L446
.L436:
	mov	r6, #0xff
	b	.L446
.L437:
	mov	r6, #0x1
.L446:
	mov	r5, #0xff
.L434:
	ldr	r0, .L447
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L441	@cond_branch
	mov	r4, #0x4
	b	.L442
.L448:
	.align	2, 0
.L447:
	.word	gSpecialVar_0x8004
.L441:
	cmp	r0, #0x1
	bne	.L443	@cond_branch
	ldr	r4, .L449
	b	.L442
.L450:
	.align	2, 0
.L449:
	.word	0x25a
.L443:
	cmp	r0, #0x2
	bne	.L442	@cond_branch
	ldr	r4, .L451
.L442:
	ldr	r2, .L451+0x4
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	add	r0, r0, r1
	add	r0, r0, #0x7
	mov	r3, #0x2
	ldrsh	r1, [r2, r3]
	lsl	r2, r5, #0x18
	asr	r2, r2, #0x18
	add	r1, r1, r2
	add	r1, r1, #0x7
	mov	r3, #0xc0
	lsl	r3, r3, #0x4
	add	r2, r3, #0
	orr	r4, r4, r2
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	bl	DrawWholeMapView
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	0x259
	.word	gSaveBlock1
.Lfe41:
	.size	 PCTurnOffEffect,.Lfe41-PCTurnOffEffect
	.align	2, 0
	.globl	DoLotteryCornerComputerEffect
	.type	 DoLotteryCornerComputerEffect,function
	.thumb_func
DoLotteryCornerComputerEffect:
	push	{r4, lr}
	ldr	r4, .L455
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L454	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L455+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r2, [r1, #0xc]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x10]
.L454:
	pop	{r4}
	pop	{r0}
	bx	r0
.L456:
	.align	2, 0
.L455:
	.word	Task_LotteryCornerComputerEffect
	.word	gTasks
.Lfe42:
	.size	 DoLotteryCornerComputerEffect,.Lfe42-DoLotteryCornerComputerEffect
	.align	2, 0
	.type	 Task_LotteryCornerComputerEffect,function
	.thumb_func
Task_LotteryCornerComputerEffect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L459
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L458	@cond_branch
	add	r0, r1, #0
	bl	LotteryCornerComputerEffect
.L458:
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	gTasks
.Lfe43:
	.size	 Task_LotteryCornerComputerEffect,.Lfe43-Task_LotteryCornerComputerEffect
	.align	2, 0
	.type	 LotteryCornerComputerEffect,function
	.thumb_func
LotteryCornerComputerEffect:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bne	.L462	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L463	@cond_branch
	ldr	r2, .L466
	mov	r0, #0x12
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L466+0x4
	mov	r0, #0x12
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	b	.L464
.L467:
	.align	2, 0
.L466:
	.word	0xe9d
	.word	0xea5
.L463:
	ldr	r2, .L468
	mov	r0, #0x12
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	mov	r2, #0xe6
	lsl	r2, r2, #0x4
	mov	r0, #0x12
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
.L464:
	bl	DrawWholeMapView
	ldrh	r0, [r4, #0x10]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L462	@cond_branch
	ldrb	r0, [r4, #0xa]
	bl	DestroyTask
.L462:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	pop	{r4}
	pop	{r0}
	bx	r0
.L469:
	.align	2, 0
.L468:
	.word	0xe58
.Lfe44:
	.size	 LotteryCornerComputerEffect,.Lfe44-LotteryCornerComputerEffect
	.align	2, 0
	.globl	EndLotteryCornerComputerEffect
	.type	 EndLotteryCornerComputerEffect,function
	.thumb_func
EndLotteryCornerComputerEffect:
	push	{lr}
	ldr	r2, .L471
	mov	r0, #0x12
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L471+0x4
	mov	r0, #0x12
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	bl	DrawWholeMapView
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	0xe9d
	.word	0xea5
.Lfe45:
	.size	 EndLotteryCornerComputerEffect,.Lfe45-EndLotteryCornerComputerEffect
	.globl	gUnknown_083F8380
	.section .rodata
	.align	2, 0
	.type	 gUnknown_083F8380,object
gUnknown_083F8380:
	.word	OtherText_1F
	.word	OtherText_2F
	.word	OtherText_3F
	.word	OtherText_4F
	.word	OtherText_5F
	.word	OtherText_6F
	.word	OtherText_7F
	.word	OtherText_8F
	.word	OtherText_9F
	.word	OtherText_10F
	.word	OtherText_11F
	.word	OtherText_B1F
	.word	OtherText_B2F
	.word	OtherText_B3F
	.word	OtherText_B4F
	.word	OtherText_Rooftop
	.size	 gUnknown_083F8380,64
.text
	.align	2, 0
	.globl	SetDepartmentStoreFloorVar
	.type	 SetDepartmentStoreFloorVar,function
	.thumb_func
SetDepartmentStoreFloorVar:
	push	{lr}
	ldr	r0, .L483
	ldrb	r0, [r0, #0x15]
	sub	r0, r0, #0x11
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x5
	bhi	.L481	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L483+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L484:
	.align	2, 0
.L483:
	.word	gSaveBlock1
	.word	.L482
	.align	2, 0
	.align	2, 0
.L482:
	.word	.L481
	.word	.L476
	.word	.L477
	.word	.L478
	.word	.L479
	.word	.L480
.L476:
	mov	r1, #0x1
	b	.L474
.L477:
	mov	r1, #0x2
	b	.L474
.L478:
	mov	r1, #0x3
	b	.L474
.L479:
	mov	r1, #0x4
	b	.L474
.L480:
	mov	r1, #0xf
	b	.L474
.L481:
	mov	r1, #0x0
.L474:
	ldr	r0, .L485
	bl	VarSet
	pop	{r0}
	bx	r0
.L486:
	.align	2, 0
.L485:
	.word	0x4043
.Lfe46:
	.size	 SetDepartmentStoreFloorVar,.Lfe46-SetDepartmentStoreFloorVar
	.align	2, 0
	.globl	ScriptAddElevatorMenuItem
	.type	 ScriptAddElevatorMenuItem,function
	.thumb_func
ScriptAddElevatorMenuItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	ip, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	ldr	r0, .L494
	ldrh	r1, [r0]
	add	r2, r0, #0
	ldr	r3, .L494+0x4
	cmp	r1, #0
	bne	.L488	@cond_branch
	mov	r1, #0x0
	add	r5, r3, #0
	mov	r4, #0x10
.L492:
	lsl	r0, r1, #0x2
	add	r0, r0, r5
	strb	r4, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x13
	bls	.L492	@cond_branch
.L488:
	ldrh	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strb	r6, [r0]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strb	r7, [r0, #0x1]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strb	r1, [r0, #0x2]
	ldrh	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, r8
	strb	r1, [r0, #0x3]
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L495:
	.align	2, 0
.L494:
	.word	gSpecialVar_0x8004
	.word	gUnknown_03000760
.Lfe47:
	.size	 ScriptAddElevatorMenuItem,.Lfe47-ScriptAddElevatorMenuItem
	.align	2, 0
	.globl	ScriptShowElevatorMenu
	.type	 ScriptShowElevatorMenu,function
	.thumb_func
ScriptShowElevatorMenu:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L501
	strb	r4, [r5]
	ldr	r0, .L501+0x4
	strb	r4, [r0]
	mov	r0, #0x10
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	ScriptAddElevatorMenuItem
	ldr	r2, .L501+0x8
	ldrb	r0, [r2]
	cmp	r0, #0x10
	beq	.L498	@cond_branch
	add	r1, r5, #0
.L499:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x10
	bne	.L499	@cond_branch
.L498:
	bl	sub_810E874
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L502:
	.align	2, 0
.L501:
	.word	gUnknown_0203925A
	.word	gUnknown_0203925B
	.word	gUnknown_03000760
.Lfe48:
	.size	 ScriptShowElevatorMenu,.Lfe48-ScriptShowElevatorMenu
	.align	2, 0
	.type	 sub_810E874,function
	.thumb_func
sub_810E874:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	bl	ScriptContext2_Enable
	ldr	r4, .L512
	ldrb	r0, [r4]
	cmp	r0, #0x5
	bls	.L504	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x8
	mov	r3, #0xb
	bl	MenuDrawTextWindow
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x7
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x5
	bl	InitMenu
	ldr	r0, .L512+0x4
	strb	r4, [r0]
	bl	sub_80F944C
	bl	LoadScrollIndicatorPalette
	bl	sub_810ECD4
	b	.L505
.L513:
	.align	2, 0
.L512:
	.word	gUnknown_0203925A
	.word	gUnknown_0203925C
.L504:
	ldrb	r3, [r4]
	lsl	r3, r3, #0x1
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	MenuDrawTextWindow
	ldrb	r3, [r4]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x7
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x1
	bl	InitMenu
.L505:
	mov	r4, #0x0
	ldr	r1, .L514
	ldrb	r0, [r1]
	cmp	r0, #0x10
	beq	.L507	@cond_branch
	ldr	r6, .L514+0x4
	add	r5, r1, #0
.L509:
	lsl	r0, r4, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	lsl	r2, r4, #0x1
	add	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x1
	bl	MenuPrint
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bhi	.L507	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0x10
	bne	.L509	@cond_branch
.L507:
	bl	sub_810E944
	ldr	r0, .L514+0x8
	mov	r1, #0x8
	bl	CreateTask
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	gUnknown_03000760
	.word	gUnknown_083F8380
	.word	sub_810E984
.Lfe49:
	.size	 sub_810E874,.Lfe49-sub_810E874
	.align	2, 0
	.globl	sub_810E944
	.type	 sub_810E944,function
	.thumb_func
sub_810E944:
	push	{lr}
	mov	r0, #0x14
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x5
	bl	MenuDrawTextWindow
	ldr	r0, .L517
	mov	r1, #0x15
	mov	r2, #0x1
	mov	r3, #0x40
	bl	sub_8072BD8
	ldr	r1, .L517+0x4
	ldr	r0, .L517+0x8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x15
	mov	r2, #0x3
	mov	r3, #0x40
	bl	sub_8072BD8
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	gOtherText_NowOn
	.word	gUnknown_083F8380
	.word	gSpecialVar_0x8005
.Lfe50:
	.size	 sub_810E944,.Lfe50-sub_810E944
	.align	2, 0
	.globl	sub_810E984
	.type	 sub_810E984,function
	.thumb_func
sub_810E984:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L527
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0x40
	bne	.L520	@cond_branch
	ldr	r1, .L527+0x4
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L520	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
	neg	r0, r0
	bl	MoveMenuCursorNoWrap
	add	r0, r4, #0
	mov	r1, #0x40
	bl	sub_810EAC8
.L520:
	ldr	r0, .L527
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0x80
	bne	.L521	@cond_branch
	ldr	r2, .L527+0x4
	ldrb	r1, [r2]
	ldr	r0, .L527+0x8
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L521	@cond_branch
	add	r0, r1, #0x1
	strb	r0, [r2]
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
	bl	MoveMenuCursorNoWrap
	add	r0, r4, #0
	mov	r1, #0x80
	bl	sub_810EAC8
.L521:
	ldr	r0, .L527
	ldrh	r2, [r0, #0x2e]
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L522	@cond_branch
	ldr	r1, .L527+0xc
	ldr	r4, .L527+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x1
	ldrsb	r1, [r0, r1]
	mov	r2, #0x2
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x2
	str	r0, [sp]
	str	r5, [sp, #0x4]
	mov	r0, #0x0
	bl	saved_warp2_set_2
	ldr	r1, .L527+0x10
	ldrh	r0, [r1]
	ldrb	r2, [r4]
	cmp	r0, r2
	bne	.L523	@cond_branch
	ldr	r1, .L527+0x14
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0xc
	bl	MenuZeroFillWindowRect
	add	r0, r6, #0
	bl	sub_810EC9C
	b	.L525
.L528:
	.align	2, 0
.L527:
	.word	gMain
	.word	gUnknown_0203925B
	.word	gUnknown_0203925A
	.word	gUnknown_03000760
	.word	gSpecialVar_0x8005
	.word	gScriptResult
.L523:
	ldr	r0, .L529
	strh	r5, [r0]
	ldrb	r0, [r4]
	strh	r0, [r1]
	bl	sub_810EBEC
	ldr	r0, .L529+0x4
	ldrb	r0, [r0]
	ldr	r2, .L529+0x8
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	mov	r3, #0x1
	bl	FieldObjectTurnByLocalIdAndMap
	bl	sub_810EEDC
	bl	MenuZeroFillScreen
	add	r0, r6, #0
	bl	DestroyTask
	b	.L525
.L530:
	.align	2, 0
.L529:
	.word	gScriptResult
	.word	gScriptLastTalked
	.word	gSaveBlock1
.L522:
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L525	@cond_branch
	ldr	r0, .L531
	strh	r1, [r0]
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_810EEDC
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0xc
	bl	MenuZeroFillWindowRect
	add	r0, r6, #0
	bl	sub_810EC9C
.L525:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	gScriptResult
.Lfe51:
	.size	 sub_810E984,.Lfe51-sub_810E984
	.align	2, 0
	.globl	sub_810EAC8
	.type	 sub_810EAC8,function
	.thumb_func
sub_810EAC8:
	.syntax unified
	push {r4-r7,lr}
	mov r7, r8
	push {r7}
	lsls r0, 24
	lsrs r2, r0, 24
	adds r5, r2, 0
	lsls r1, 24
	lsrs r1, 24
	adds r3, r1, 0
	movs r7, 0
	movs r4, 0
	ldr r0, _0810EAEC @ =gUnknown_0203925A
	ldrb r0, [r0]
	cmp r0, 0x4
	bhi _0810EAF0
	movs r0, 0
	b _0810EB78
	.align 2, 0
_0810EAEC: .4byte gUnknown_0203925A
_0810EAF0:
	cmp r1, 0x40
	bne _0810EB04
	cmp r2, 0
	bne _0810EB18
	ldr r0, _0810EB00 @ =gUnknown_0203925B
	ldrb r4, [r0]
	movs r7, 0x1
	b _0810EB1C
	.align 2, 0
_0810EB00: .4byte gUnknown_0203925B
_0810EB04:
	cmp r3, 0x80
	bne _0810EB18
	cmp r5, 0x4
	bne _0810EB18
	ldr r0, _0810EB84 @ =gUnknown_0203925B
	ldrb r0, [r0]
	subs r0, 0x4
	lsls r0, 24
	lsrs r4, r0, 24
	movs r7, 0x1
_0810EB18:
	cmp r7, 0
	beq _0810EB76
_0810EB1C:
	adds r0, r4, 0
	movs r1, 0x5
	bl sub_810EB90
	movs r0, 0x2
	movs r1, 0x1
	movs r2, 0x7
	movs r3, 0xA
	bl MenuFillWindowRectWithBlankTile
	movs r5, 0
	ldr r2, _0810EB88 @ =gUnknown_03000760
	lsls r1, r4, 2
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, 0x10
	beq _0810EB76
	ldr r0, _0810EB8C @ =gUnknown_083F8380
	mov r8, r0
	adds r6, r2, 0
_0810EB44:
	adds r0, r1, r6
	ldrb r0, [r0]
	lsls r0, 2
	add r0, r8
	ldr r0, [r0]
	lsls r2, r5, 1
	adds r2, 0x1
	lsls r2, 24
	lsrs r2, 24
	movs r1, 0x1
	bl MenuPrint
	adds r0, r4, 0x1
	lsls r0, 24
	lsrs r4, r0, 24
	adds r0, r5, 0x1
	lsls r0, 24
	lsrs r5, r0, 24
	cmp r5, 0x4
	bhi _0810EB76
	lsls r1, r4, 2
	adds r0, r1, r6
	ldrb r0, [r0]
	cmp r0, 0x10
	bne _0810EB44
_0810EB76:
	adds r0, r7, 0
_0810EB78:
	pop {r3}
	mov r8, r3
	pop {r4-r7}
	pop {r1}
	bx r1
	.align 2, 0
_0810EB84: .4byte gUnknown_0203925B
_0810EB88: .4byte gUnknown_03000760
_0810EB8C: .4byte gUnknown_083F8380
.syntax divided

	.code	16
.Lfe52:
	.size	 sub_810EAC8,.Lfe52-sub_810EAC8
	.align	2, 0
	.globl	sub_810EB90
	.type	 sub_810EB90,function
	.thumb_func
sub_810EB90:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	cmp	r4, #0
	bne	.L535	@cond_branch
	ldr	r0, .L540
	ldrb	r1, [r0]
	mov	r2, #0x2
	eor	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
	b	.L536
.L541:
	.align	2, 0
.L540:
	.word	gUnknown_0203925C
.L535:
	bl	sub_810ECB0
.L536:
	add	r1, r4, r5
	ldr	r0, .L542
	ldrb	r0, [r0]
	cmp	r1, r0
	bge	.L537	@cond_branch
	bl	sub_810ECD4
	b	.L538
.L543:
	.align	2, 0
.L542:
	.word	gUnknown_0203925A
.L537:
	cmp	r1, r0
	bne	.L538	@cond_branch
	ldr	r0, .L544
	ldrb	r1, [r0]
	mov	r2, #0x1
	eor	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
.L538:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L545:
	.align	2, 0
.L544:
	.word	gUnknown_0203925C
.Lfe53:
	.size	 sub_810EB90,.Lfe53-sub_810EB90
	.align	2, 0
	.globl	sub_810EBEC
	.type	 sub_810EBEC,function
	.thumb_func
sub_810EBEC:
	push	{lr}
	ldr	r0, .L547
	mov	r1, #0x9
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L547+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	mov	r2, #0x1
	strh	r2, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r0, [r1, #0xc]
	strh	r0, [r1, #0xe]
	strh	r2, [r1, #0x10]
	mov	r0, #0x3
	strh	r0, [r1, #0x12]
	mov	r0, #0x0
	bl	SetCameraPanningCallback
	bl	sub_810ECFC
	mov	r0, #0x59
	bl	PlaySE
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	sub_810EC34
	.word	gTasks
.Lfe54:
	.size	 sub_810EBEC,.Lfe54-sub_810EBEC
	.align	2, 0
	.globl	sub_810EC34
	.type	 sub_810EC34,function
	.thumb_func
sub_810EC34:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L553
	add	r4, r0, r1
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L550	@cond_branch
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L550	@cond_branch
	ldrh	r0, [r4, #0x10]
	neg	r0, r0
	strh	r0, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mov	r0, #0x0
	bl	SetCameraPanning
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x17
	bne	.L550	@cond_branch
	mov	r0, #0x49
	bl	PlaySE
	add	r0, r5, #0
	bl	sub_810EC9C
	bl	InstallCameraPanAheadCallback
.L550:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L554:
	.align	2, 0
.L553:
	.word	gTasks
.Lfe55:
	.size	 sub_810EC34,.Lfe55-sub_810EC34
	.align	2, 0
	.globl	sub_810EC9C
	.type	 sub_810EC9C,function
	.thumb_func
sub_810EC9C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	bl	EnableBothScriptContexts
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 sub_810EC9C,.Lfe56-sub_810EC9C
	.align	2, 0
	.globl	sub_810ECB0
	.type	 sub_810ECB0,function
	.thumb_func
sub_810ECB0:
	push	{lr}
	ldr	r2, .L558
	ldrb	r1, [r2]
	lsr	r0, r1, #0x1
	cmp	r0, #0x1
	beq	.L557	@cond_branch
	mov	r0, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	mov	r1, #0x24
	mov	r2, #0x8
	bl	CreateVerticalScrollIndicators
.L557:
	pop	{r0}
	bx	r0
.L559:
	.align	2, 0
.L558:
	.word	gUnknown_0203925C
.Lfe57:
	.size	 sub_810ECB0,.Lfe57-sub_810ECB0
	.align	2, 0
	.globl	sub_810ECD4
	.type	 sub_810ECD4,function
	.thumb_func
sub_810ECD4:
	push	{lr}
	ldr	r2, .L562
	ldrb	r1, [r2]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L561	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	mov	r1, #0x24
	mov	r2, #0x48
	bl	CreateVerticalScrollIndicators
.L561:
	pop	{r0}
	bx	r0
.L563:
	.align	2, 0
.L562:
	.word	gUnknown_0203925C
.Lfe58:
	.size	 sub_810ECD4,.Lfe58-sub_810ECD4
	.align	2, 0
	.globl	sub_810ECFC
	.type	 sub_810ECFC,function
	.thumb_func
sub_810ECFC:
	push	{r4, lr}
	ldr	r4, .L566
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L565	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L566+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r2, [r1, #0xc]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x10]
.L565:
	pop	{r4}
	pop	{r0}
	bx	r0
.L567:
	.align	2, 0
.L566:
	.word	sub_810ED40
	.word	gTasks
.Lfe59:
	.size	 sub_810ECFC,.Lfe59-sub_810ECFC
	.align	2, 0
	.globl	sub_810ED40
	.type	 sub_810ED40,function
	.thumb_func
sub_810ED40:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L569
	add	r0, r0, r1
	bl	sub_810ED60
	pop	{r0}
	bx	r0
.L570:
	.align	2, 0
.L569:
	.word	gTasks
.Lfe60:
	.size	 sub_810ED40,.Lfe60-sub_810ED40
	.align	2, 0
	.globl	sub_810ED60
	.type	 sub_810ED60,function
	.thumb_func
sub_810ED60:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x8
	beq	.LCB3947
	b	.L572	@long jump
.LCB3947:
	mov	r0, #0x0
	strh	r0, [r5, #0xe]
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L573	@cond_branch
	ldr	r2, .L576
	mov	r0, #0x7
	mov	r1, #0x7
	bl	MapGridSetMetatileIdAt
	ldr	r4, .L576+0x4
	mov	r0, #0x8
	mov	r1, #0x7
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	mov	r0, #0x9
	mov	r1, #0x7
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L576+0x8
	mov	r0, #0xa
	mov	r1, #0x7
	bl	MapGridSetMetatileIdAt
	mov	r2, #0xe7
	lsl	r2, r2, #0x4
	mov	r0, #0x7
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	add	r4, r4, #0x8
	mov	r0, #0x8
	mov	r1, #0x8
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	mov	r0, #0x9
	mov	r1, #0x8
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L576+0xc
	mov	r0, #0xa
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L576+0x10
	mov	r0, #0x7
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	add	r4, r4, #0x8
	mov	r0, #0x8
	mov	r1, #0x9
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	mov	r0, #0x9
	mov	r1, #0x9
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L576+0x14
	mov	r0, #0xa
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	b	.L574
.L577:
	.align	2, 0
.L576:
	.word	0xe68
	.word	0xe69
	.word	0xe6a
	.word	0xe72
	.word	0xe78
	.word	0xe7a
.L573:
	ldr	r2, .L578
	mov	r0, #0x7
	mov	r1, #0x7
	bl	MapGridSetMetatileIdAt
	ldr	r4, .L578+0x4
	mov	r0, #0x8
	mov	r1, #0x7
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	mov	r0, #0x9
	mov	r1, #0x7
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L578+0x8
	mov	r0, #0xa
	mov	r1, #0x7
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L578+0xc
	mov	r0, #0x7
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	add	r4, r4, #0x8
	mov	r0, #0x8
	mov	r1, #0x8
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	mov	r0, #0x9
	mov	r1, #0x8
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L578+0x10
	mov	r0, #0xa
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L578+0x14
	mov	r0, #0x7
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	add	r4, r4, #0x8
	mov	r0, #0x8
	mov	r1, #0x9
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	mov	r0, #0x9
	mov	r1, #0x9
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L578+0x18
	mov	r0, #0xa
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
.L574:
	bl	DrawWholeMapView
	ldrh	r0, [r5, #0x10]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r5, #0x10]
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bne	.L572	@cond_branch
	ldrb	r0, [r5, #0xa]
	bl	DestroyTask
.L572:
	ldrh	r0, [r5, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L579:
	.align	2, 0
.L578:
	.word	0xe6b
	.word	0xe6c
	.word	0xe6d
	.word	0xe73
	.word	0xe75
	.word	0xe7b
	.word	0xe7d
.Lfe61:
	.size	 sub_810ED60,.Lfe61-sub_810ED60
	.align	2, 0
	.globl	sub_810EEDC
	.type	 sub_810EEDC,function
	.thumb_func
sub_810EEDC:
	push	{r4, lr}
	ldr	r4, .L583
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L581	@cond_branch
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
.L581:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	cmp	r0, #0x1
	bne	.L582	@cond_branch
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
.L582:
	bl	BuyMenuFreeMemory
	pop	{r4}
	pop	{r0}
	bx	r0
.L584:
	.align	2, 0
.L583:
	.word	gUnknown_0203925C
.Lfe62:
	.size	 sub_810EEDC,.Lfe62-sub_810EEDC
	.align	2, 0
	.globl	SetTrickHouseEndRoomFlag
	.type	 SetTrickHouseEndRoomFlag,function
	.thumb_func
SetTrickHouseEndRoomFlag:
	push	{lr}
	ldr	r1, .L586
	ldr	r0, .L586+0x4
	strh	r0, [r1]
	bl	FlagSet
	pop	{r0}
	bx	r0
.L587:
	.align	2, 0
.L586:
	.word	gSpecialVar_0x8004
	.word	0x259
.Lfe63:
	.size	 SetTrickHouseEndRoomFlag,.Lfe63-SetTrickHouseEndRoomFlag
	.align	2, 0
	.globl	ResetTrickHouseEndRoomFlag
	.type	 ResetTrickHouseEndRoomFlag,function
	.thumb_func
ResetTrickHouseEndRoomFlag:
	push	{lr}
	ldr	r1, .L589
	ldr	r0, .L589+0x4
	strh	r0, [r1]
	bl	FlagClear
	pop	{r0}
	bx	r0
.L590:
	.align	2, 0
.L589:
	.word	gSpecialVar_0x8004
	.word	0x259
.Lfe64:
	.size	 ResetTrickHouseEndRoomFlag,.Lfe64-ResetTrickHouseEndRoomFlag
	.align	2, 0
	.globl	CheckLeadMonCool
	.type	 CheckLeadMonCool,function
	.thumb_func
CheckLeadMonCool:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L594
	add	r0, r0, r1
	mov	r1, #0x16
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L592	@cond_branch
	mov	r0, #0x1
	b	.L593
.L595:
	.align	2, 0
.L594:
	.word	gPlayerParty
.L592:
	mov	r0, #0x0
.L593:
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 CheckLeadMonCool,.Lfe65-CheckLeadMonCool
	.align	2, 0
	.globl	CheckLeadMonBeauty
	.type	 CheckLeadMonBeauty,function
	.thumb_func
CheckLeadMonBeauty:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L599
	add	r0, r0, r1
	mov	r1, #0x17
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L597	@cond_branch
	mov	r0, #0x1
	b	.L598
.L600:
	.align	2, 0
.L599:
	.word	gPlayerParty
.L597:
	mov	r0, #0x0
.L598:
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 CheckLeadMonBeauty,.Lfe66-CheckLeadMonBeauty
	.align	2, 0
	.globl	CheckLeadMonCute
	.type	 CheckLeadMonCute,function
	.thumb_func
CheckLeadMonCute:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L604
	add	r0, r0, r1
	mov	r1, #0x18
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L602	@cond_branch
	mov	r0, #0x1
	b	.L603
.L605:
	.align	2, 0
.L604:
	.word	gPlayerParty
.L602:
	mov	r0, #0x0
.L603:
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 CheckLeadMonCute,.Lfe67-CheckLeadMonCute
	.align	2, 0
	.globl	CheckLeadMonSmart
	.type	 CheckLeadMonSmart,function
	.thumb_func
CheckLeadMonSmart:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L609
	add	r0, r0, r1
	mov	r1, #0x21
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L607	@cond_branch
	mov	r0, #0x1
	b	.L608
.L610:
	.align	2, 0
.L609:
	.word	gPlayerParty
.L607:
	mov	r0, #0x0
.L608:
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 CheckLeadMonSmart,.Lfe68-CheckLeadMonSmart
	.align	2, 0
	.globl	CheckLeadMonTough
	.type	 CheckLeadMonTough,function
	.thumb_func
CheckLeadMonTough:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L614
	add	r0, r0, r1
	mov	r1, #0x2f
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L612	@cond_branch
	mov	r0, #0x1
	b	.L613
.L615:
	.align	2, 0
.L614:
	.word	gPlayerParty
.L612:
	mov	r0, #0x0
.L613:
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 CheckLeadMonTough,.Lfe69-CheckLeadMonTough
	.align	2, 0
	.globl	IsGrassTypeInParty
	.type	 IsGrassTypeInParty,function
	.thumb_func
IsGrassTypeInParty:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r6, .L626
.L620:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L626+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L619	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L619	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0xc
	beq	.L623	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0xc
	bne	.L619	@cond_branch
.L623:
	ldr	r1, .L626+0x8
	mov	r0, #0x1
	b	.L625
.L627:
	.align	2, 0
.L626:
	.word	gBaseStats
	.word	gPlayerParty
	.word	gScriptResult
.L619:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L620	@cond_branch
	ldr	r1, .L628
	mov	r0, #0x0
.L625:
	strh	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L629:
	.align	2, 0
.L628:
	.word	gScriptResult
.Lfe70:
	.size	 IsGrassTypeInParty,.Lfe70-IsGrassTypeInParty
	.globl	gUnknown_083F83C0
	.section .rodata
	.align	2, 0
	.type	 gUnknown_083F83C0,object
gUnknown_083F83C0:
	.word	OtherText_BlueFlute
	.word	OtherText_YellowFlute
	.word	OtherText_RedFlute
	.word	OtherText_WhiteFlute
	.word	OtherText_BlackFlute
	.word	OtherText_PrettyChair
	.word	OtherText_PrettyDesk
	.word	gOtherText_CancelNoTerminator
	.size	 gUnknown_083F83C0,32
.text
	.align	2, 0
	.globl	ShowGlassWorkshopMenu
	.type	 ShowGlassWorkshopMenu,function
	.thumb_func
ShowGlassWorkshopMenu:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	bl	ScriptContext2_Enable
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xa
	mov	r3, #0xb
	bl	MenuDrawTextWindow
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x9
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x5
	bl	InitMenu
	ldr	r0, .L636
	strb	r4, [r0]
	bl	sub_80F944C
	bl	LoadScrollIndicatorPalette
	bl	sub_810F2B4
	ldr	r5, .L636+0x4
.L634:
	lsl	r0, r4, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	lsl	r2, r4, #0x1
	add	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x1
	bl	MenuPrint
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L634	@cond_branch
	ldr	r1, .L636+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L636+0xc
	mov	r0, #0x8
	strb	r0, [r1]
	ldr	r0, .L636+0x10
	mov	r1, #0x8
	bl	CreateTask
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L637:
	.align	2, 0
.L636:
	.word	gUnknown_0203925C
	.word	gUnknown_083F83C0
	.word	gUnknown_0203925B
	.word	gUnknown_0203925A
	.word	sub_810F118
.Lfe71:
	.size	 ShowGlassWorkshopMenu,.Lfe71-ShowGlassWorkshopMenu
	.align	2, 0
	.globl	sub_810F118
	.type	 sub_810F118,function
	.thumb_func
sub_810F118:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L643
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0x40
	bne	.L639	@cond_branch
	ldr	r1, .L643+0x4
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L639	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
	neg	r0, r0
	bl	MoveMenuCursorNoWrap
	add	r0, r4, #0
	mov	r1, #0x40
	bl	sub_810F1F4
.L639:
	ldr	r0, .L643
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0x80
	bne	.L640	@cond_branch
	ldr	r2, .L643+0x4
	ldrb	r1, [r2]
	ldr	r0, .L643+0x8
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L640	@cond_branch
	add	r0, r1, #0x1
	strb	r0, [r2]
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
	bl	MoveMenuCursorNoWrap
	add	r0, r4, #0
	mov	r1, #0x80
	bl	sub_810F1F4
.L640:
	ldr	r4, .L643
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L641	@cond_branch
	bl	HandleDestroyMenuCursors
	ldr	r0, .L643+0xc
	ldr	r1, .L643+0x4
	ldrb	r1, [r1]
	strh	r1, [r0]
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_810EEDC
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0xc
	bl	MenuZeroFillWindowRect
	add	r0, r5, #0
	bl	sub_810EC9C
.L641:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L642	@cond_branch
	bl	HandleDestroyMenuCursors
	ldr	r1, .L643+0xc
	mov	r0, #0x7f
	strh	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_810EEDC
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0xc
	bl	MenuZeroFillWindowRect
	add	r0, r5, #0
	bl	sub_810EC9C
.L642:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	gMain
	.word	gUnknown_0203925B
	.word	gUnknown_0203925A
	.word	gScriptResult
.Lfe72:
	.size	 sub_810F118,.Lfe72-sub_810F118
	.align	2, 0
	.globl	sub_810F1F4
	.type	 sub_810F1F4,function
	.thumb_func
sub_810F1F4:
	.syntax unified
	push {r4-r7,lr}
	lsls r0, 24
	lsrs r2, r0, 24
	adds r5, r2, 0
	lsls r1, 24
	lsrs r1, 24
	adds r3, r1, 0
	movs r6, 0
	movs r4, 0
	ldr r0, _0810F214 @ =gUnknown_0203925A
	ldrb r0, [r0]
	cmp r0, 0x4
	bhi _0810F218
	movs r0, 0
	b _0810F282
	.align 2, 0
_0810F214: .4byte gUnknown_0203925A
_0810F218:
	cmp r1, 0x40
	bne _0810F22C
	cmp r2, 0
	bne _0810F240
	ldr r0, _0810F228 @ =gUnknown_0203925B
	ldrb r4, [r0]
	movs r6, 0x1
	b _0810F244
	.align 2, 0
_0810F228: .4byte gUnknown_0203925B
_0810F22C:
	cmp r3, 0x80
	bne _0810F240
	cmp r5, 0x4
	bne _0810F240
	ldr r0, _0810F288 @ =gUnknown_0203925B
	ldrb r0, [r0]
	subs r0, 0x4
	lsls r0, 24
	lsrs r4, r0, 24
	movs r6, 0x1
_0810F240:
	cmp r6, 0
	beq _0810F280
_0810F244:
	adds r0, r4, 0
	movs r1, 0x5
	bl GlassWorkshopUpdateScrollIndicators
	movs r0, 0x2
	movs r1, 0x1
	movs r2, 0x9
	movs r3, 0xA
	bl MenuFillWindowRectWithBlankTile
	movs r5, 0
	ldr r7, _0810F28C @ =gUnknown_083F83C0
_0810F25C:
	lsls r0, r4, 2
	adds r0, r7
	ldr r0, [r0]
	lsls r2, r5, 1
	adds r2, 0x1
	lsls r2, 24
	lsrs r2, 24
	movs r1, 0x1
	bl MenuPrint
	adds r0, r4, 0x1
	lsls r0, 24
	lsrs r4, r0, 24
	adds r0, r5, 0x1
	lsls r0, 24
	lsrs r5, r0, 24
	cmp r5, 0x4
	bls _0810F25C
_0810F280:
	adds r0, r6, 0
_0810F282:
	pop {r4-r7}
	pop {r1}
	bx r1
	.align 2, 0
_0810F288: .4byte gUnknown_0203925B
_0810F28C: .4byte gUnknown_083F83C0
.syntax divided

	.code	16
.Lfe73:
	.size	 sub_810F1F4,.Lfe73-sub_810F1F4
	.align	2, 0
	.globl	sub_810F290
	.type	 sub_810F290,function
	.thumb_func
sub_810F290:
	push	{lr}
	ldr	r2, .L648
	ldrb	r1, [r2]
	lsr	r0, r1, #0x1
	cmp	r0, #0x1
	beq	.L647	@cond_branch
	mov	r0, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	mov	r1, #0x2c
	mov	r2, #0x8
	bl	CreateVerticalScrollIndicators
.L647:
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	gUnknown_0203925C
.Lfe74:
	.size	 sub_810F290,.Lfe74-sub_810F290
	.align	2, 0
	.globl	sub_810F2B4
	.type	 sub_810F2B4,function
	.thumb_func
sub_810F2B4:
	push	{lr}
	ldr	r2, .L652
	ldrb	r1, [r2]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L651	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	mov	r1, #0x2c
	mov	r2, #0x58
	bl	CreateVerticalScrollIndicators
.L651:
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gUnknown_0203925C
.Lfe75:
	.size	 sub_810F2B4,.Lfe75-sub_810F2B4
	.align	2, 0
	.globl	GlassWorkshopUpdateScrollIndicators
	.type	 GlassWorkshopUpdateScrollIndicators,function
	.thumb_func
GlassWorkshopUpdateScrollIndicators:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	cmp	r4, #0
	bne	.L655	@cond_branch
	ldr	r0, .L660
	ldrb	r1, [r0]
	mov	r2, #0x2
	eor	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
	b	.L656
.L661:
	.align	2, 0
.L660:
	.word	gUnknown_0203925C
.L655:
	bl	sub_810F290
.L656:
	add	r1, r4, r5
	ldr	r0, .L662
	ldrb	r0, [r0]
	cmp	r1, r0
	bge	.L657	@cond_branch
	bl	sub_810F2B4
	b	.L658
.L663:
	.align	2, 0
.L662:
	.word	gUnknown_0203925A
.L657:
	cmp	r1, r0
	bne	.L658	@cond_branch
	ldr	r0, .L664
	ldrb	r1, [r0]
	mov	r2, #0x1
	eor	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
.L658:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L665:
	.align	2, 0
.L664:
	.word	gUnknown_0203925C
.Lfe76:
	.size	 GlassWorkshopUpdateScrollIndicators,.Lfe76-GlassWorkshopUpdateScrollIndicators
	.align	2, 0
	.globl	SpawnCameraDummy
	.type	 SpawnCameraDummy,function
	.thumb_func
SpawnCameraDummy:
	push	{lr}
	add	sp, sp, #0xfffffff8
	ldr	r0, .L667
	ldrh	r3, [r0]
	add	r3, r3, #0x7
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	ldrh	r0, [r0, #0x2]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp]
	mov	r0, #0x3
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	mov	r1, #0x8
	mov	r2, #0x7f
	bl	SpawnSpecialFieldObjectParametrized
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L667+0x4
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r1, #0x4]
	bl	CameraObjectSetFollowedObjectId
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	gSaveBlock1
	.word	gMapObjects
.Lfe77:
	.size	 SpawnCameraDummy,.Lfe77-SpawnCameraDummy
	.align	2, 0
	.globl	RemoveCameraDummy
	.type	 RemoveCameraDummy,function
	.thumb_func
RemoveCameraDummy:
	push	{lr}
	bl	GetPlayerAvatarObjectId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CameraObjectSetFollowedObjectId
	ldr	r0, .L670
	ldrb	r1, [r0, #0x5]
	ldrb	r2, [r0, #0x4]
	mov	r0, #0x7f
	bl	RemoveFieldObjectByLocalIdAndMap
	pop	{r0}
	bx	r0
.L671:
	.align	2, 0
.L670:
	.word	gSaveBlock1
.Lfe78:
	.size	 RemoveCameraDummy,.Lfe78-RemoveCameraDummy
	.align	2, 0
	.globl	GetPokeblockNameByMonNature
	.type	 GetPokeblockNameByMonNature,function
	.thumb_func
GetPokeblockNameByMonNature:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L673
	add	r0, r0, r1
	bl	GetNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L673+0x4
	bl	sub_810CB68
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L674:
	.align	2, 0
.L673:
	.word	gPlayerParty
	.word	gStringVar1
.Lfe79:
	.size	 GetPokeblockNameByMonNature,.Lfe79-GetPokeblockNameByMonNature
	.align	2, 0
	.globl	GetSecretBaseNearbyMapName
	.type	 GetSecretBaseNearbyMapName,function
	.thumb_func
GetSecretBaseNearbyMapName:
	push	{r4, lr}
	ldr	r4, .L676
	ldr	r0, .L676+0x4
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	GetMapSectionName
	pop	{r4}
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	gStringVar1
	.word	0x4026
.Lfe80:
	.size	 GetSecretBaseNearbyMapName,.Lfe80-GetSecretBaseNearbyMapName
	.align	2, 0
	.globl	sub_810F404
	.type	 sub_810F404,function
	.thumb_func
sub_810F404:
	push	{lr}
	mov	r0, #0x20
	bl	GetGameStat
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe81:
	.size	 sub_810F404,.Lfe81-sub_810F404
	.align	2, 0
	.globl	sub_810F414
	.type	 sub_810F414,function
	.thumb_func
sub_810F414:
	push	{lr}
	ldr	r0, .L680
	bl	SetEReaderTrainerName
	pop	{r0}
	bx	r0
.L681:
	.align	2, 0
.L680:
	.word	gStringVar1
.Lfe82:
	.size	 sub_810F414,.Lfe82-sub_810F414
	.globl	gUnknown_083F83E0
	.section .rodata
	.type	 gUnknown_083F83E0,object
gUnknown_083F83E0:
	.byte	0xc
	.byte	0x2
	.byte	0x4
	.byte	0x5
	.byte	0x1
	.byte	0x8
	.byte	0x7
	.byte	0xb
	.byte	0x3
	.byte	0xa
	.byte	0x9
	.byte	0x6
	.size	 gUnknown_083F83E0,12
	.globl	gUnknown_083F83EC
	.type	 gUnknown_083F83EC,object
gUnknown_083F83EC:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.size	 gUnknown_083F83EC,12
	.globl	gUnknown_083F83F8
	.type	 gUnknown_083F83F8,object
gUnknown_083F83F8:
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
	.size	 gUnknown_083F83F8,12
.text
	.align	2, 0
	.globl	sub_810F424
	.type	 sub_810F424,function
	.thumb_func
sub_810F424:
	push	{r4, r5, lr}
	ldr	r2, .L687
	ldr	r1, .L687+0x4
	add	r0, r2, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x19
	ldr	r0, .L687+0x8
	add	r2, r2, r0
	lsr	r1, r1, #0x19
	ldrh	r2, [r2]
	add	r1, r1, r2
	ldr	r2, .L687+0xc
	ldr	r0, .L687+0x10
	ldrh	r0, [r0]
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r5, r1, r0
	mov	r0, #0x2
	bl	GetPriceReduction
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L683	@cond_branch
	ldr	r4, .L687+0x14
	b	.L686
.L688:
	.align	2, 0
.L687:
	.word	gSaveBlock1
	.word	0x2dd4
	.word	0x2dd6
	.word	gUnknown_083F83E0
	.word	gSpecialVar_0x8004
	.word	gUnknown_083F83EC
.L683:
	ldr	r4, .L689
.L686:
	add	r0, r5, #0
	mov	r1, #0xc
	bl	__umodsi3
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L690:
	.align	2, 0
.L689:
	.word	gUnknown_083F83F8
.Lfe83:
	.size	 sub_810F424,.Lfe83-sub_810F424
	.align	2, 0
	.globl	sub_810F488
	.type	 sub_810F488,function
	.thumb_func
sub_810F488:
	push	{lr}
	ldr	r1, .L694
	ldr	r0, .L694+0x4
	strh	r0, [r1]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L692	@cond_branch
	mov	r0, #0x1
	b	.L693
.L695:
	.align	2, 0
.L694:
	.word	gSpecialVar_0x8004
	.word	0x277
.L692:
	mov	r0, #0x0
.L693:
	pop	{r1}
	bx	r1
.Lfe84:
	.size	 sub_810F488,.Lfe84-sub_810F488
	.align	2, 0
	.globl	sub_810F4B0
	.type	 sub_810F4B0,function
	.thumb_func
sub_810F4B0:
	push	{lr}
	ldr	r1, .L699
	mov	r0, #0x9e
	lsl	r0, r0, #0x2
	strh	r0, [r1]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L697	@cond_branch
	mov	r0, #0x1
	b	.L698
.L700:
	.align	2, 0
.L699:
	.word	gSpecialVar_0x8004
.L697:
	mov	r0, #0x0
.L698:
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 sub_810F4B0,.Lfe85-sub_810F4B0
	.align	2, 0
	.globl	sub_810F4D4
	.type	 sub_810F4D4,function
	.thumb_func
sub_810F4D4:
	push	{lr}
	ldr	r1, .L704
	ldr	r0, .L704+0x4
	strh	r0, [r1]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L702	@cond_branch
	mov	r0, #0x1
	b	.L703
.L705:
	.align	2, 0
.L704:
	.word	gSpecialVar_0x8004
	.word	0x279
.L702:
	mov	r0, #0x0
.L703:
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 sub_810F4D4,.Lfe86-sub_810F4D4
	.align	2, 0
	.globl	sub_810F4FC
	.type	 sub_810F4FC,function
	.thumb_func
sub_810F4FC:
	push	{lr}
	ldr	r1, .L709
	ldr	r0, .L709+0x4
	strh	r0, [r1]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L707	@cond_branch
	mov	r0, #0x1
	b	.L708
.L710:
	.align	2, 0
.L709:
	.word	gSpecialVar_0x8004
	.word	0x27a
.L707:
	mov	r0, #0x0
.L708:
	pop	{r1}
	bx	r1
.Lfe87:
	.size	 sub_810F4FC,.Lfe87-sub_810F4FC
	.align	2, 0
	.globl	LeadMonHasEffortRibbon
	.type	 LeadMonHasEffortRibbon,function
	.thumb_func
LeadMonHasEffortRibbon:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L712
	add	r0, r0, r1
	mov	r1, #0x47
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L713:
	.align	2, 0
.L712:
	.word	gPlayerParty
.Lfe88:
	.size	 LeadMonHasEffortRibbon,.Lfe88-LeadMonHasEffortRibbon
	.align	2, 0
	.globl	GivLeadMonEffortRibbon
	.type	 GivLeadMonEffortRibbon,function
	.thumb_func
GivLeadMonEffortRibbon:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x2a
	bl	IncrementGameStat
	ldr	r0, .L715
	bl	FlagSet
	mov	r1, #0x1
	mov	r0, sp
	strb	r1, [r0]
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L715+0x4
	add	r0, r0, r1
	mov	r1, #0x47
	mov	r2, sp
	bl	SetMonData
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L716:
	.align	2, 0
.L715:
	.word	0x83b
	.word	gPlayerParty
.Lfe89:
	.size	 GivLeadMonEffortRibbon,.Lfe89-GivLeadMonEffortRibbon
	.align	2, 0
	.globl	ScrSpecial_AreLeadMonEVsMaxedOut
	.type	 ScrSpecial_AreLeadMonEVsMaxedOut,function
	.thumb_func
ScrSpecial_AreLeadMonEVsMaxedOut:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L720
	add	r0, r0, r1
	bl	GetMonEVCount
	lsl	r0, r0, #0x10
	ldr	r1, .L720+0x4
	cmp	r0, r1
	bhi	.L718	@cond_branch
	mov	r0, #0x0
	b	.L719
.L721:
	.align	2, 0
.L720:
	.word	gPlayerParty
	.word	0x1fd0000
.L718:
	mov	r0, #0x1
.L719:
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 ScrSpecial_AreLeadMonEVsMaxedOut,.Lfe90-ScrSpecial_AreLeadMonEVsMaxedOut
	.align	2, 0
	.globl	sub_810F5BC
	.type	 sub_810F5BC,function
	.thumb_func
sub_810F5BC:
	push	{lr}
	mov	r0, #0xc7
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L723	@cond_branch
	ldr	r0, .L729
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x83
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L723	@cond_branch
	sub	r0, r0, #0x75
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L724	@cond_branch
	ldr	r0, .L729+0x4
	mov	r1, #0x4
	b	.L728
.L730:
	.align	2, 0
.L729:
	.word	gSaveBlock1
	.word	0x409a
.L724:
	mov	r0, #0xe9
	lsl	r0, r0, #0x2
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L723	@cond_branch
	ldr	r0, .L731
	mov	r1, #0x5
.L728:
	bl	VarSet
	mov	r0, #0x1
	b	.L727
.L732:
	.align	2, 0
.L731:
	.word	0x409a
.L723:
	mov	r0, #0x0
.L727:
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 sub_810F5BC,.Lfe91-sub_810F5BC
	.align	2, 0
	.globl	SetShoalItemFlag
	.type	 SetShoalItemFlag,function
	.thumb_func
SetShoalItemFlag:
	push	{lr}
	ldr	r0, .L734
	bl	FlagSet
	pop	{r0}
	bx	r0
.L735:
	.align	2, 0
.L734:
	.word	0x85f
.Lfe92:
	.size	 SetShoalItemFlag,.Lfe92-SetShoalItemFlag
	.align	2, 0
	.globl	PutZigzagoonInPlayerParty
	.type	 PutZigzagoonInPlayerParty,function
	.thumb_func
PutZigzagoonInPlayerParty:
	push	{r4, r5, lr}
	add	sp, sp, #0xffffffec
	ldr	r5, .L737
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r5, #0
	mov	r2, #0x7
	mov	r3, #0x20
	bl	CreateMon
	mov	r1, #0x1
	add	r0, sp, #0x10
	strh	r1, [r0]
	add	r0, r5, #0
	mov	r1, #0x2e
	add	r2, sp, #0x10
	bl	SetMonData
	add	r1, sp, #0x10
	mov	r0, #0x21
	strh	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0xd
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, sp, #0x10
	strh	r4, [r0]
	add	r0, r5, #0
	mov	r1, #0xe
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, r5, #0
	mov	r1, #0xf
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, r5, #0
	mov	r1, #0x10
	add	r2, sp, #0x10
	bl	SetMonData
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L738:
	.align	2, 0
.L737:
	.word	gPlayerParty
.Lfe93:
	.size	 PutZigzagoonInPlayerParty,.Lfe93-PutZigzagoonInPlayerParty
	.align	2, 0
	.globl	IsStarterInParty
	.type	 IsStarterInParty,function
	.thumb_func
IsStarterInParty:
	push	{r4, r5, r6, lr}
	ldr	r0, .L747
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetStarterPokemon
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L741	@cond_branch
.L743:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L747+0x4
	add	r0, r0, r1
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, r6
	bne	.L742	@cond_branch
	mov	r0, #0x1
	b	.L746
.L748:
	.align	2, 0
.L747:
	.word	0x4023
	.word	gPlayerParty
.L742:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L743	@cond_branch
.L741:
	mov	r0, #0x0
.L746:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe94:
	.size	 IsStarterInParty,.Lfe94-IsStarterInParty
	.align	2, 0
	.globl	CheckFreePokemonStorageSpace
	.type	 CheckFreePokemonStorageSpace,function
	.thumb_func
CheckFreePokemonStorageSpace:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
.L753:
	mov	r4, #0x0
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r6, r0, #0x5
.L757:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	ldr	r1, .L762
	add	r0, r0, r1
	add	r0, r6, r0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetBoxMonData
	cmp	r0, #0
	bne	.L756	@cond_branch
	mov	r0, #0x1
	b	.L761
.L763:
	.align	2, 0
.L762:
	.word	gPokemonStorage+0x4
.L756:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1d
	bls	.L757	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xd
	bls	.L753	@cond_branch
	mov	r0, #0x0
.L761:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe95:
	.size	 CheckFreePokemonStorageSpace,.Lfe95-CheckFreePokemonStorageSpace
	.align	2, 0
	.globl	IsPokerusInParty
	.type	 IsPokerusInParty,function
	.thumb_func
IsPokerusInParty:
	push	{lr}
	ldr	r0, .L767
	mov	r1, #0x3f
	bl	CheckPartyPokerus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L765	@cond_branch
	mov	r0, #0x1
	b	.L766
.L768:
	.align	2, 0
.L767:
	.word	gPlayerParty
.L765:
	mov	r0, #0x0
.L766:
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 IsPokerusInParty,.Lfe96-IsPokerusInParty
	.align	2, 0
	.globl	sub_810F758
	.type	 sub_810F758,function
	.thumb_func
sub_810F758:
	push	{lr}
	ldr	r0, .L770
	mov	r1, #0x9
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L770+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L770+0x8
	ldrh	r2, [r0]
	mov	r0, #0x0
	strh	r2, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r0, [r1, #0xc]
	strh	r0, [r1, #0xe]
	ldr	r0, .L770+0xc
	ldrh	r0, [r0]
	strh	r0, [r1, #0x10]
	mov	r0, #0x5
	strh	r0, [r1, #0x12]
	mov	r0, #0x0
	bl	SetCameraPanningCallback
	mov	r0, #0xd6
	bl	PlaySE
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	sub_810F7A8
	.word	gTasks
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8004
.Lfe97:
	.size	 sub_810F758,.Lfe97-sub_810F758
	.align	2, 0
	.type	 sub_810F7A8,function
	.thumb_func
sub_810F7A8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L776
	add	r4, r0, r1
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L773	@cond_branch
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L773	@cond_branch
	ldrh	r0, [r4, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0x10]
	neg	r0, r0
	strh	r0, [r4, #0x10]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	bl	SetCameraPanning
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8
	bne	.L773	@cond_branch
	add	r0, r5, #0
	bl	sub_810F814
	bl	InstallCameraPanAheadCallback
.L773:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L777:
	.align	2, 0
.L776:
	.word	gTasks
.Lfe98:
	.size	 sub_810F7A8,.Lfe98-sub_810F7A8
	.align	2, 0
	.type	 sub_810F814,function
	.thumb_func
sub_810F814:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	bl	EnableBothScriptContexts
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 sub_810F814,.Lfe99-sub_810F814
	.align	2, 0
	.globl	sub_810F828
	.type	 sub_810F828,function
	.thumb_func
sub_810F828:
	push	{lr}
	mov	r0, #0xae
	lsl	r0, r0, #0x2
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe100:
	.size	 sub_810F828,.Lfe100-sub_810F828
	.align	2, 0
	.globl	SetRoute119Weather
	.type	 SetRoute119Weather,function
	.thumb_func
SetRoute119Weather:
	push	{lr}
	bl	get_map_type_from_warp0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	is_map_type_1_2_3_5_or_6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L781	@cond_branch
	mov	r0, #0x14
	bl	SetSav1Weather
.L781:
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 SetRoute119Weather,.Lfe101-SetRoute119Weather
	.align	2, 0
	.globl	SetRoute123Weather
	.type	 SetRoute123Weather,function
	.thumb_func
SetRoute123Weather:
	push	{lr}
	bl	get_map_type_from_warp0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	is_map_type_1_2_3_5_or_6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L783	@cond_branch
	mov	r0, #0x15
	bl	SetSav1Weather
.L783:
	pop	{r0}
	bx	r0
.Lfe102:
	.size	 SetRoute123Weather,.Lfe102-SetRoute123Weather
	.align	2, 0
	.globl	GetLeadMonIndex
	.type	 GetLeadMonIndex,function
	.thumb_func
GetLeadMonIndex:
	push	{r4, r5, r6, lr}
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	cmp	r5, r6
	bcs	.L786	@cond_branch
.L788:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L792
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L787	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0
	beq	.L787	@cond_branch
	add	r0, r5, #0
	b	.L791
.L793:
	.align	2, 0
.L792:
	.word	gPlayerParty
.L787:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r6
	bcc	.L788	@cond_branch
.L786:
	mov	r0, #0x0
.L791:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe103:
	.size	 GetLeadMonIndex,.Lfe103-GetLeadMonIndex
	.align	2, 0
	.globl	ScriptGetPartyMonSpecies
	.type	 ScriptGetPartyMonSpecies,function
	.thumb_func
ScriptGetPartyMonSpecies:
	push	{lr}
	ldr	r0, .L795
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L795+0x4
	add	r0, r0, r1
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L796:
	.align	2, 0
.L795:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
.Lfe104:
	.size	 ScriptGetPartyMonSpecies,.Lfe104-ScriptGetPartyMonSpecies
	.align	2, 0
	.globl	sub_810F8FC
	.type	 sub_810F8FC,function
	.thumb_func
sub_810F8FC:
	push	{lr}
	mov	r0, #0x6
	bl	sub_805ADDC
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 sub_810F8FC,.Lfe105-sub_810F8FC
	.align	2, 0
	.globl	sub_810F908
	.type	 sub_810F908,function
	.thumb_func
sub_810F908:
	push	{r4, lr}
	ldr	r0, .L803
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r3, r0, #0
	ldr	r2, .L803+0x4
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	sub	r0, r0, r3
	cmp	r0, #0x6
	ble	.L799	@cond_branch
	mov	r0, #0x0
	b	.L802
.L804:
	.align	2, 0
.L803:
	.word	0x40c2
	.word	gLocalTime
.L799:
	ldrh	r1, [r2]
	mov	r4, #0x0
	ldrsh	r0, [r2, r4]
	cmp	r0, #0
	blt	.L800	@cond_branch
	sub	r1, r1, r3
	mov	r0, #0x7
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L802
.L800:
	mov	r0, #0x8
.L802:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe106:
	.size	 sub_810F908,.Lfe106-sub_810F908
	.align	2, 0
	.globl	sub_810F950
	.type	 sub_810F950,function
	.thumb_func
sub_810F950:
	push	{r4, lr}
	ldr	r0, .L806
	ldr	r4, .L806+0x4
	ldrh	r1, [r4]
	bl	VarSet
	ldrh	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L807:
	.align	2, 0
.L806:
	.word	0x40c2
	.word	gLocalTime
.Lfe107:
	.size	 sub_810F950,.Lfe107-sub_810F950
	.align	2, 0
	.globl	sub_810F96C
	.type	 sub_810F96C,function
	.thumb_func
sub_810F96C:
	push	{r4, lr}
	ldr	r0, .L811
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L811+0x4
	add	r0, r0, r1
	ldr	r4, .L811+0x8
	mov	r1, #0x7
	add	r2, r4, #0
	bl	GetMonData
	ldr	r0, .L811+0xc
	add	r1, r4, #0
	bl	StringCompareWithoutExtCtrlCodes
	cmp	r0, #0
	beq	.L809	@cond_branch
	mov	r0, #0x1
	b	.L810
.L812:
	.align	2, 0
.L811:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
	.word	gStringVar1
	.word	gSaveBlock2
.L809:
	mov	r0, #0x0
.L810:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe108:
	.size	 sub_810F96C,.Lfe108-sub_810F96C
	.align	2, 0
	.globl	sub_810F9AC
	.type	 sub_810F9AC,function
	.thumb_func
sub_810F9AC:
	push	{r4, r5, lr}
	ldr	r2, .L823
	ldrh	r1, [r2]
	ldr	r0, .L823+0x4
	cmp	r1, r0
	bls	.L814	@cond_branch
	mov	r0, #0x0
	bl	sub_80BF088
	b	.L815
.L824:
	.align	2, 0
.L823:
	.word	gScriptResult
	.word	0x270f
.L814:
	ldr	r0, .L825
	cmp	r1, r0
	bls	.L816	@cond_branch
	ldr	r4, .L825+0x4
	mov	r0, #0xa1
	strb	r0, [r4]
	add	r4, r4, #0x1
	b	.L822
.L826:
	.align	2, 0
.L825:
	.word	0x3e7
	.word	gStringVar1
.L816:
	cmp	r1, #0x63
	bls	.L818	@cond_branch
	ldr	r4, .L827
	mov	r0, #0xa1
	strb	r0, [r4]
	strb	r0, [r4, #0x1]
	add	r4, r4, #0x2
	b	.L822
.L828:
	.align	2, 0
.L827:
	.word	gStringVar1
.L818:
	cmp	r1, #0x9
	bls	.L820	@cond_branch
	ldr	r4, .L829
	mov	r0, #0xa1
	strb	r0, [r4]
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	add	r4, r4, #0x3
.L822:
	ldrh	r5, [r2]
	add	r0, r5, #0
	bl	sub_80BF0B8
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	ConvertIntToDecimalStringN
	b	.L815
.L830:
	.align	2, 0
.L829:
	.word	gStringVar1
.L820:
	ldr	r4, .L831
	mov	r0, #0xa1
	strb	r0, [r4]
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	add	r4, r4, #0x4
	ldrh	r5, [r2]
	add	r0, r5, #0
	bl	sub_80BF0B8
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	ConvertIntToDecimalStringN
.L815:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L832:
	.align	2, 0
.L831:
	.word	gStringVar1
.Lfe109:
	.size	 sub_810F9AC,.Lfe109-sub_810F9AC
	.globl	gUnknown_083F8404
	.section .rodata
	.type	 gUnknown_083F8404,object
gUnknown_083F8404:
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.size	 gUnknown_083F8404,4
	.globl	gUnknown_083F8408
	.type	 gUnknown_083F8408,object
gUnknown_083F8408:
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.size	 gUnknown_083F8408,8
	.globl	gUnknown_083F8410
	.type	 gUnknown_083F8410,object
gUnknown_083F8410:
	.byte	0x8
	.byte	0xd
	.byte	0xe
	.byte	0xb
	.byte	0xa
	.byte	0xc
	.byte	0xf
	.byte	0x9
	.size	 gUnknown_083F8410,8
.text
	.align	2, 0
	.globl	ResetFanClub
	.type	 ResetFanClub,function
	.thumb_func
ResetFanClub:
	ldr	r0, .L834
	ldr	r2, .L834+0x4
	add	r1, r0, r2
	mov	r2, #0x0
	strh	r2, [r1]
	ldr	r1, .L834+0x8
	add	r0, r0, r1
	strh	r2, [r0]
	bx	lr
.L835:
	.align	2, 0
.L834:
	.word	gSaveBlock1
	.word	0x13c2
	.word	0x13c4
.Lfe110:
	.size	 ResetFanClub,.Lfe110-ResetFanClub
	.align	2, 0
	.globl	sub_810FA74
	.type	 sub_810FA74,function
	.thumb_func
sub_810FA74:
	push	{lr}
	bl	sub_810FF30
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L837	@cond_branch
	bl	sub_810FCE8
	ldr	r0, .L838
	ldr	r1, .L838+0x4
	ldrh	r1, [r1, #0xe]
	ldr	r2, .L838+0x8
	add	r0, r0, r2
	strh	r1, [r0]
.L837:
	pop	{r0}
	bx	r0
.L839:
	.align	2, 0
.L838:
	.word	gSaveBlock1
	.word	gSaveBlock2
	.word	0x13c4
.Lfe111:
	.size	 sub_810FA74,.Lfe111-sub_810FA74
	.align	2, 0
	.globl	sub_810FAA0
	.type	 sub_810FAA0,function
	.thumb_func
sub_810FAA0:
	push	{r4, lr}
	ldr	r4, .L842
	ldr	r1, .L842+0x4
	add	r0, r4, r1
	ldrh	r0, [r0]
	lsr	r0, r0, #0x7
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L841	@cond_branch
	bl	sub_810FF48
	bl	sub_810FD80
	ldr	r0, .L842+0x8
	ldrh	r1, [r0, #0xe]
	ldr	r2, .L842+0xc
	add	r0, r4, r2
	strh	r1, [r0]
	ldr	r0, .L842+0x10
	bl	FlagClear
	ldr	r0, .L842+0x14
	bl	FlagClear
	ldr	r0, .L842+0x18
	bl	FlagClear
	mov	r0, #0xc6
	lsl	r0, r0, #0x2
	bl	FlagClear
	ldr	r0, .L842+0x1c
	mov	r1, #0x1
	bl	VarSet
.L841:
	pop	{r4}
	pop	{r0}
	bx	r0
.L843:
	.align	2, 0
.L842:
	.word	gSaveBlock1
	.word	0x13c2
	.word	gSaveBlock2
	.word	0x13c4
	.word	0x315
	.word	0x316
	.word	0x317
	.word	0x4095
.Lfe112:
	.size	 sub_810FAA0,.Lfe112-sub_810FAA0
	.align	2, 0
	.globl	sub_810FB10
	.type	 sub_810FB10,function
	.thumb_func
sub_810FB10:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L851
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L845	@cond_branch
	ldr	r0, .L851+0x4
	ldr	r1, .L851+0x8
	add	r4, r0, r1
	ldrh	r2, [r4]
	mov	r1, #0x7f
	and	r1, r1, r2
	ldr	r0, .L851+0xc
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r1, r1, r0
	cmp	r1, #0x13
	ble	.L846	@cond_branch
	bl	sub_810FCB0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bhi	.L847	@cond_branch
	bl	sub_810FB9C
	ldrh	r1, [r4]
	ldr	r0, .L851+0x10
	and	r0, r0, r1
	b	.L850
.L852:
	.align	2, 0
.L851:
	.word	0x4095
	.word	gSaveBlock1
	.word	0x13c2
	.word	gUnknown_083F8404
	.word	0xff80
.L847:
	ldrh	r0, [r4]
	ldr	r1, .L853
	and	r1, r1, r0
	mov	r0, #0x14
	orr	r1, r1, r0
	strh	r1, [r4]
	b	.L845
.L854:
	.align	2, 0
.L853:
	.word	0xff80
.L846:
	add	r0, r2, r0
.L850:
	strh	r0, [r4]
.L845:
	ldr	r0, .L855
	ldr	r1, .L855+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x7f
	and	r0, r0, r1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L856:
	.align	2, 0
.L855:
	.word	gSaveBlock1
	.word	0x13c2
.Lfe113:
	.size	 sub_810FB10,.Lfe113-sub_810FB10
	.align	2, 0
	.globl	sub_810FB9C
	.type	 sub_810FB9C,function
	.thumb_func
sub_810FB9C:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	mov	r3, #0x0
	mov	r5, #0x0
	ldr	r7, .L867
	mov	r6, #0x1
.L861:
	ldrh	r1, [r7]
	ldr	r0, .L867+0x4
	add	r0, r5, r0
	ldrb	r4, [r0]
	asr	r1, r1, r4
	and	r1, r1, r6
	cmp	r1, #0
	bne	.L860	@cond_branch
	add	r3, r5, #0
	str	r3, [sp]
	bl	Random
	add	r1, r6, #0
	and	r1, r1, r0
	ldr	r3, [sp]
	cmp	r1, #0
	beq	.L860	@cond_branch
	add	r0, r6, #0
	lsl	r0, r0, r4
	ldrh	r1, [r7]
	orr	r0, r0, r1
	strh	r0, [r7]
	b	.L866
.L868:
	.align	2, 0
.L867:
	.word	gSaveBlock1+0x13c2
	.word	gUnknown_083F8408
.L860:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L861	@cond_branch
	ldr	r2, .L869
	ldr	r0, .L869+0x4
	add	r2, r2, r0
	ldr	r1, .L869+0x8
	add	r1, r3, r1
	mov	r0, #0x1
	ldrb	r1, [r1]
	lsl	r0, r0, r1
	ldrh	r1, [r2]
	orr	r0, r0, r1
	strh	r0, [r2]
.L866:
	add	r0, r3, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L870:
	.align	2, 0
.L869:
	.word	gSaveBlock1
	.word	0x13c2
	.word	gUnknown_083F8408
.Lfe114:
	.size	 sub_810FB9C,.Lfe114-sub_810FB9C
	.align	2, 0
	.globl	sub_810FC18
	.type	 sub_810FC18,function
	.thumb_func
sub_810FC18:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	mov	r8, r0
	bl	sub_810FCB0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L872	@cond_branch
	mov	r0, #0x0
	b	.L881
.L882:
	lsl	r4, r4, r6
	ldrh	r0, [r2]
	eor	r4, r4, r0
	strh	r4, [r2]
	b	.L880
.L872:
	mov	r5, #0x0
	ldr	r2, .L883
	mov	r4, #0x1
.L876:
	ldrh	r1, [r2]
	ldr	r7, .L883+0x4
	add	r0, r5, r7
	ldrb	r6, [r0]
	asr	r1, r1, r6
	and	r1, r1, r4
	cmp	r1, #0
	beq	.L875	@cond_branch
	mov	r8, r5
	str	r2, [sp]
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	ldr	r2, [sp]
	cmp	r1, #0
	bne	.L882	@cond_branch
.L875:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L876	@cond_branch
	ldr	r0, .L883+0x8
	ldr	r1, .L883+0xc
	add	r4, r0, r1
	ldrh	r1, [r4]
	mov	r2, r8
	add	r0, r2, r7
	ldrb	r2, [r0]
	add	r0, r1, #0
	asr	r0, r0, r2
	mov	r3, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L880	@cond_branch
	add	r0, r3, #0
	lsl	r0, r0, r2
	eor	r1, r1, r0
	strh	r1, [r4]
.L880:
	mov	r0, r8
.L881:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L884:
	.align	2, 0
.L883:
	.word	gSaveBlock1+0x13c2
	.word	gUnknown_083F8410
	.word	gSaveBlock1
	.word	0x13c2
.Lfe115:
	.size	 sub_810FC18,.Lfe115-sub_810FC18
	.align	2, 0
	.globl	sub_810FCB0
	.type	 sub_810FCB0,function
	.thumb_func
sub_810FCB0:
	push	{r4, r5, lr}
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r0, .L892
	ldrh	r4, [r0]
	mov	r5, #0x1
.L889:
	add	r1, r2, #0
	add	r1, r1, #0x8
	add	r0, r4, #0
	asr	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L888	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L888:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L889	@cond_branch
	add	r0, r3, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L893:
	.align	2, 0
.L892:
	.word	gSaveBlock1+0x13c2
.Lfe116:
	.size	 sub_810FCB0,.Lfe116-sub_810FCB0
	.align	2, 0
	.globl	sub_810FCE8
	.type	 sub_810FCE8,function
	.thumb_func
sub_810FCE8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r5, #0x0
	ldr	r2, .L905
	ldrh	r1, [r2, #0xe]
	ldr	r0, .L905+0x4
	cmp	r1, r0
	bhi	.L894	@cond_branch
	ldr	r7, .L905+0x8
	add	r6, r2, #0
	ldr	r0, .L905+0xc
	add	r0, r0, r7
	mov	r8, r0
	b	.L898
.L906:
	.align	2, 0
.L905:
	.word	gSaveBlock2
	.word	0x3e6
	.word	gSaveBlock1
	.word	0x13c4
.L901:
	ldrh	r1, [r6, #0xe]
	ldr	r0, .L907
	add	r4, r7, r0
	ldrh	r0, [r4]
	sub	r1, r1, r0
	cmp	r1, #0xb
	ble	.L894	@cond_branch
	bl	sub_810FC18
	ldrh	r0, [r4]
	add	r0, r0, #0xc
	strh	r0, [r4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L898:
	bl	sub_810FCB0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bhi	.L899	@cond_branch
	ldrh	r0, [r6, #0xe]
	mov	r1, r8
	strh	r0, [r1]
	b	.L894
.L908:
	.align	2, 0
.L907:
	.word	0x13c4
.L899:
	cmp	r5, #0x8
	bne	.L901	@cond_branch
.L894:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 sub_810FCE8,.Lfe117-sub_810FCE8
	.align	2, 0
	.globl	sub_810FD60
	.type	 sub_810FD60,function
	.thumb_func
sub_810FD60:
	ldr	r0, .L910
	ldr	r1, .L910+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, .L910+0x8
	ldrh	r1, [r1]
	asr	r0, r0, r1
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L911:
	.align	2, 0
.L910:
	.word	gSaveBlock1
	.word	0x13c2
	.word	gSpecialVar_0x8004
.Lfe118:
	.size	 sub_810FD60,.Lfe118-sub_810FD60
	.align	2, 0
	.globl	sub_810FD80
	.type	 sub_810FD80,function
	.thumb_func
sub_810FD80:
	ldr	r2, .L913
	ldr	r0, .L913+0x4
	add	r2, r2, r0
	ldrh	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	add	r0, r3, #0
	orr	r0, r0, r1
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r3, #0
	orr	r0, r0, r1
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	bx	lr
.L914:
	.align	2, 0
.L913:
	.word	gSaveBlock1
	.word	0x13c2
.Lfe119:
	.size	 sub_810FD80,.Lfe119-sub_810FD80
	.align	2, 0
	.globl	sub_810FDAC
	.type	 sub_810FDAC,function
	.thumb_func
sub_810FDAC:
	push	{lr}
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r0, .L927
	ldrh	r0, [r0]
	sub	r0, r0, #0x8
	cmp	r0, #0x7
	bhi	.L916	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L927+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L928:
	.align	2, 0
.L927:
	.word	gSpecialVar_0x8004
	.word	.L925
	.align	2, 0
	.align	2, 0
.L925:
	.word	.L916
	.word	.L916
	.word	.L919
	.word	.L920
	.word	.L921
	.word	.L922
	.word	.L923
	.word	.L916
.L919:
	mov	r3, #0x0
	mov	r2, #0x3
	b	.L916
.L920:
	mov	r3, #0x0
	mov	r2, #0x1
	b	.L916
.L921:
	mov	r3, #0x1
	mov	r2, #0x0
	b	.L916
.L922:
	mov	r3, #0x0
	mov	r2, #0x4
	b	.L916
.L923:
	mov	r3, #0x1
	mov	r2, #0x5
.L916:
	ldr	r0, .L929
	add	r1, r3, #0
	bl	sub_810FE1C
	pop	{r0}
	bx	r0
.L930:
	.align	2, 0
.L929:
	.word	gSaveBlock1+0x30b8
.Lfe120:
	.size	 sub_810FDAC,.Lfe120-sub_810FDAC
	.align	2, 0
	.globl	sub_810FE1C
	.type	 sub_810FE1C,function
	.thumb_func
sub_810FE1C:
	push	{r4, lr}
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsr	r1, r1, #0x14
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L932	@cond_branch
	cmp	r2, #0x5
	bhi	.L940	@cond_branch
	lsl	r0, r2, #0x2
	ldr	r1, .L944
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L945:
	.align	2, 0
.L944:
	.word	.L941
	.align	2, 0
	.align	2, 0
.L941:
	.word	.L940
	.word	.L935
	.word	.L936
	.word	.L937
	.word	.L938
	.word	.L939
.L935:
	ldr	r0, .L946
	ldr	r1, .L946+0x4
	bl	StringCopy
	b	.L942
.L947:
	.align	2, 0
.L946:
	.word	gStringVar1
	.word	gOtherText_Steven
.L936:
	ldr	r0, .L948
	ldr	r1, .L948+0x4
	bl	StringCopy
	b	.L942
.L949:
	.align	2, 0
.L948:
	.word	gStringVar1
	.word	gOtherText_Brawly
.L937:
	ldr	r0, .L950
	ldr	r1, .L950+0x4
	bl	StringCopy
	b	.L942
.L951:
	.align	2, 0
.L950:
	.word	gStringVar1
	.word	gOtherText_Winona
.L938:
	ldr	r0, .L952
	ldr	r1, .L952+0x4
	bl	StringCopy
	b	.L942
.L953:
	.align	2, 0
.L952:
	.word	gStringVar1
	.word	gOtherText_Phoebe
.L939:
	ldr	r0, .L954
	ldr	r1, .L954+0x4
	bl	StringCopy
	b	.L942
.L955:
	.align	2, 0
.L954:
	.word	gStringVar1
	.word	gOtherText_Glacia
.L940:
	ldr	r0, .L956
	ldr	r1, .L956+0x4
	bl	StringCopy
	b	.L942
.L957:
	.align	2, 0
.L956:
	.word	gStringVar1
	.word	gOtherText_Wallace
.L932:
	ldr	r4, .L958
	add	r0, r4, #0
	mov	r2, #0x7
	bl	StringCopyN
	mov	r0, #0xff
	strb	r0, [r4, #0x7]
	ldrb	r0, [r4]
	cmp	r0, #0xfc
	bne	.L942	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x15
	bne	.L942	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ConvertInternationalString
.L942:
	pop	{r4}
	pop	{r0}
	bx	r0
.L959:
	.align	2, 0
.L958:
	.word	gStringVar1
.Lfe121:
	.size	 sub_810FE1C,.Lfe121-sub_810FE1C
	.align	2, 0
	.globl	sub_810FEFC
	.type	 sub_810FEFC,function
	.thumb_func
sub_810FEFC:
	push	{lr}
	ldr	r0, .L964
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L961	@cond_branch
	bl	sub_810FA74
	ldr	r0, .L964+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L962	@cond_branch
	bl	sub_810FB9C
	b	.L961
.L965:
	.align	2, 0
.L964:
	.word	0x4095
	.word	gBattleOutcome
.L962:
	bl	sub_810FC18
.L961:
	pop	{r0}
	bx	r0
.Lfe122:
	.size	 sub_810FEFC,.Lfe122-sub_810FEFC
	.align	2, 0
	.globl	sub_810FF30
	.type	 sub_810FF30,function
	.thumb_func
sub_810FF30:
	ldr	r0, .L967
	ldr	r1, .L967+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsr	r0, r0, #0x7
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L968:
	.align	2, 0
.L967:
	.word	gSaveBlock1
	.word	0x13c2
.Lfe123:
	.size	 sub_810FF30,.Lfe123-sub_810FF30
	.align	2, 0
	.globl	sub_810FF48
	.type	 sub_810FF48,function
	.thumb_func
sub_810FF48:
	ldr	r0, .L970
	ldr	r1, .L970+0x4
	add	r0, r0, r1
	ldrh	r2, [r0]
	mov	r1, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
	bx	lr
.L971:
	.align	2, 0
.L970:
	.word	gSaveBlock1
	.word	0x13c2
.Lfe124:
	.size	 sub_810FF48,.Lfe124-sub_810FF48
	.align	2, 0
	.globl	sub_810FF60
	.type	 sub_810FF60,function
	.thumb_func
sub_810FF60:
	push	{lr}
	ldr	r0, .L973
	ldrb	r0, [r0]
	bl	sub_810FB10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L974:
	.align	2, 0
.L973:
	.word	gSpecialVar_0x8004
.Lfe125:
	.size	 sub_810FF60,.Lfe125-sub_810FF60

	.lcomm	gUnknown_03000760,80
.text
	.align	2, 0
