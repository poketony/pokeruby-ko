@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 gSaveFailedType,object
	.size	 gSaveFailedType,2
gSaveFailedType:
	.short	0x0
	.align	1, 0
	.type	 gSaveFailedClockInfo,object
	.size	 gSaveFailedClockInfo,18
gSaveFailedClockInfo:
	.short	0x0
	.space	16
	.section .rodata
	.align	2, 0
	.type	 sClockOamData,object
	.size	 sClockOamData,8
sClockOamData:
	.byte	0xa0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.type	 sClockFrames,object
	.size	 sClockFrames,24
sClockFrames:
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x5
	.byte	0x1
	.byte	0x1
	.byte	0x9
	.byte	0x1
	.byte	0x0
	.byte	0x5
	.byte	0x1
	.byte	0x0
	.type	 gSaveFailedClockPal,object
gSaveFailedClockPal:
	.byte	0x2c
	.byte	0x2e
	.byte	0x0
	.byte	0x0
	.byte	0xe7
	.byte	0x1c
	.byte	0xef
	.byte	0x3d
	.byte	0xf7
	.byte	0x5e
	.byte	0xff
	.byte	0x7f
	.byte	0x1f
	.byte	0x15
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 gSaveFailedClockPal,32
	.type	 gSaveFailedClockGfx,object
gSaveFailedClockGfx:
	.byte	0x10
	.byte	0x80
	.byte	0x1
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x0
	.byte	0x2
	.byte	0x44
	.byte	0x0
	.byte	0x2
	.byte	0x55
	.byte	0x2
	.byte	0x0
	.byte	0x42
	.byte	0x55
	.byte	0x65
	.byte	0x20
	.byte	0x54
	.byte	0x30
	.byte	0x3
	.byte	0x42
	.byte	0x65
	.byte	0x55
	.byte	0x30
	.byte	0x3
	.byte	0x0
	.byte	0x1c
	.byte	0x0
	.byte	0x44
	.byte	0x0
	.byte	0x4
	.byte	0x55
	.byte	0x0
	.byte	0x4
	.byte	0x12
	.byte	0x56
	.byte	0x55
	.byte	0x24
	.byte	0x0
	.byte	0x3
	.byte	0x45
	.byte	0x2
	.byte	0x30
	.byte	0x3
	.byte	0x55
	.byte	0x6e
	.byte	0x24
	.byte	0x10
	.byte	0x3
	.byte	0x40
	.byte	0x27
	.byte	0x55
	.byte	0x0
	.byte	0x33
	.byte	0x20
	.byte	0x3
	.byte	0x0
	.byte	0x43
	.byte	0x55
	.byte	0xfc
	.byte	0x20
	.byte	0x4b
	.byte	0x10
	.byte	0x53
	.byte	0x0
	.byte	0x4
	.byte	0x10
	.byte	0x23
	.byte	0x0
	.byte	0x1e
	.byte	0x0
	.byte	0x3
	.byte	0x45
	.byte	0x2
	.byte	0xbf
	.byte	0x30
	.byte	0x3
	.byte	0x24
	.byte	0x20
	.byte	0x4b
	.byte	0x10
	.byte	0x53
	.byte	0x10
	.byte	0x5b
	.byte	0xc0
	.byte	0x7f
	.byte	0x60
	.byte	0x47
	.byte	0x10
	.byte	0x53
	.byte	0xc2
	.byte	0xd0
	.byte	0x7f
	.byte	0x20
	.byte	0x3b
	.byte	0x66
	.byte	0x45
	.byte	0x2
	.byte	0x65
	.byte	0x0
	.byte	0x3
	.byte	0x66
	.byte	0xbf
	.byte	0x0
	.byte	0x8c
	.byte	0x66
	.byte	0xf0
	.byte	0x7f
	.byte	0xf0
	.byte	0x7f
	.byte	0xf0
	.byte	0x7f
	.byte	0xf0
	.byte	0x7f
	.byte	0xf0
	.byte	0x7f
	.byte	0xf0
	.byte	0x7f
	.byte	0xe7
	.byte	0x50
	.byte	0x7f
	.byte	0x60
	.byte	0x47
	.byte	0x0
	.byte	0x7f
	.byte	0x66
	.byte	0x56
	.byte	0xf0
	.byte	0x7f
	.byte	0xc0
	.byte	0x7f
	.byte	0x10
	.byte	0x23
	.byte	0xc0
	.byte	0xf0
	.byte	0x7f
	.byte	0x70
	.byte	0x7f
	.byte	0x0
	.byte	0x0
	.size	 gSaveFailedClockGfx,144
.text
	.align	2, 0
	.globl	DoSaveFailedScreen
	.type	 DoSaveFailedScreen,function
	.thumb_func
DoSaveFailedScreen:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L3
	bl	SetMainCallback2
	ldr	r0, .L3+0x4
	strh	r4, [r0]
	ldr	r1, .L3+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	CB2_SaveFailedScreen
	.word	gSaveFailedType
	.word	gSaveFailedClockInfo
.Lfe1:
	.size	 DoSaveFailedScreen,.Lfe1-DoSaveFailedScreen
	.align	2, 0
	.type	 VBlankCB,function
	.thumb_func
VBlankCB:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 VBlankCB,.Lfe2-VBlankCB
	.align	2, 0
	.type	 CB2_SaveFailedScreen,function
	.thumb_func
CB2_SaveFailedScreen:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff4
	ldr	r0, .L13
	ldr	r1, .L13+0x4
	add	r7, r0, r1
	ldrb	r0, [r7]
	cmp	r0, #0
	beq	.L9	@cond_branch
	cmp	r0, #0x1
	bne	.LCB55
	b	.L10	@long jump
.LCB55:
.L9:
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	mov	r9, r0
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r6, .L13+0x8
	strh	r1, [r6]
	add	r0, r0, #0xc
	mov	r8, r0
	strh	r1, [r0]
	sub	r0, r0, #0x2
	strh	r1, [r0]
	ldr	r5, .L13+0xc
	strh	r1, [r5]
	add	r0, r0, #0x12
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	sub	r0, r0, #0x6
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	sub	r0, r0, #0x6
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	sub	r0, r0, #0x6
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, sp, #0x4
	strh	r1, [r0]
	ldr	r2, .L13+0x10
	str	r0, [r2]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	str	r1, [r2, #0x4]
	ldr	r0, .L13+0x14
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0x8]
	add	r0, sp, #0x8
	str	r0, [r2]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	str	r0, [r2, #0x4]
	ldr	r0, .L13+0x18
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	add	r0, sp, #0x4
	strh	r4, [r0]
	str	r0, [r2]
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	str	r0, [r2, #0x4]
	ldr	r0, .L13+0x1c
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	ldr	r0, .L13+0x20
	bl	LZ77UnCompVram
	ldr	r0, .L13+0x24
	ldr	r1, .L13+0x28
	bl	LZ77UnCompVram
	ldr	r0, .L13+0x2c
	ldr	r1, .L13+0x30
	bl	LZ77UnCompVram
	ldr	r0, .L13+0x34
	ldr	r1, .L13+0x38
	bl	LZ77UnCompVram
	bl	ResetSpriteData
	bl	ResetTasks
	bl	ResetPaletteFade
	ldr	r0, .L13+0x3c
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadPalette
	ldr	r0, .L13+0x40
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L13+0x44
	bl	SetUpWindowConfig
	ldr	r0, .L13+0x48
	bl	InitMenuWindow
	mov	r0, #0xd
	mov	r1, #0x8
	mov	r2, #0x10
	mov	r3, #0xb
	bl	MenuDrawTextWindow
	mov	r0, #0x1
	mov	r1, #0xc
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	ldr	r0, .L13+0x4c
	mov	r1, #0x2
	mov	r2, #0xd
	bl	MenuPrint
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r3, .L13+0x50
	ldrh	r2, [r3]
	strh	r4, [r3]
	ldr	r4, .L13+0x54
	ldrh	r0, [r4]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r4]
	strh	r2, [r3]
	ldr	r2, .L13+0x58
	ldrh	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L13+0x5c
	bl	SetVBlankCallback
	ldr	r1, .L13+0x60
	add	r0, r1, #0
	strh	r0, [r6]
	ldr	r1, .L13+0x64
	add	r0, r1, #0
	mov	r1, r8
	strh	r0, [r1]
	ldr	r1, .L13+0x68
	add	r0, r1, #0
	strh	r0, [r5]
	mov	r1, #0xea
	lsl	r1, r1, #0x5
	add	r0, r1, #0
	mov	r1, r9
	strh	r0, [r1]
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
	b	.L7
.L14:
	.align	2, 0
.L13:
	.word	gMain
	.word	0x43c
	.word	0x400000e
	.word	0x4000008
	.word	0x40000d4
	.word	0x8100c000
	.word	0x85000100
	.word	0x81000200
	.word	gBirchHelpGfx
	.word	gBirchBagTilemap
	.word	0x6003000
	.word	gBirchGrassTilemap
	.word	0x6003800
	.word	gSaveFailedClockGfx
	.word	0x6010020
	.word	gBirchBagGrassPal
	.word	gSaveFailedClockPal
	.word	gWindowConfig_81E6C3C
	.word	gWindowConfig_81E6CE4
	.word	gSystemText_SaveFailedBackupCheck
	.word	0x4000208
	.word	0x4000200
	.word	0x4000004
	.word	VBlankCB
	.word	0x703
	.word	0x602
	.word	0x1f08
.L10:
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r0, .L15
	bl	SetMainCallback2
	ldr	r0, .L15+0x4
	bl	SetVBlankCallback
.L7:
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	CB2_WipeSave
	.word	VBlankCB_UpdateClockGraphics
.Lfe3:
	.size	 CB2_SaveFailedScreen,.Lfe3-CB2_SaveFailedScreen
	.align	2, 0
	.type	 CB2_WipeSave,function
	.thumb_func
CB2_WipeSave:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r0, .L30
	mov	r1, #0x1
	strh	r1, [r0]
	ldr	r1, .L30+0x4
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L19	@cond_branch
	add	r5, r1, #0
.L20:
	ldr	r0, [r5]
	bl	WipeSectors
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L29	@cond_branch
	mov	r0, #0x1
	mov	r1, #0xc
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	ldr	r0, .L30+0x8
	mov	r1, #0x2
	mov	r2, #0xd
	bl	MenuPrint
	ldr	r0, .L30+0xc
	ldrb	r0, [r0]
	bl	HandleSavingData
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L23	@cond_branch
	ldr	r0, .L30+0x10
	mov	r1, #0x2
	mov	r2, #0xd
	bl	MenuPrint
.L23:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L19	@cond_branch
	cmp	r4, #0x2
	bls	.L20	@cond_branch
.L19:
	cmp	r4, #0x3
	bne	.L25	@cond_branch
	mov	r0, #0x1
	mov	r1, #0xc
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	ldr	r0, .L30+0x14
	mov	r1, #0x2
	mov	r2, #0xd
	bl	MenuPrint
	ldr	r0, .L30+0x18
	bl	SetMainCallback2
	b	.L26
.L31:
	.align	2, 0
.L30:
	.word	gSaveFailedClockInfo
	.word	gDamagedSaveSectors
	.word	gSystemText_CheckCompleteSaveAttempt
	.word	gSaveFailedType
	.word	gSystemText_SaveFailedBackupCheck
	.word	gSystemText_BackupDamagedGameContinue
	.word	CB2_FadeAndReturnToTitleScreen
.L25:
	mov	r0, #0x1
	mov	r1, #0xc
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	ldr	r0, .L32
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L27	@cond_branch
	ldr	r0, .L32+0x4
	mov	r1, #0x2
	mov	r2, #0xd
	bl	MenuPrint
	b	.L26
.L33:
	.align	2, 0
.L32:
	.word	gGameContinueCallback
	.word	gSystemText_SaveCompletedGameEnd
.L29:
	mov	r0, #0x1
	mov	r1, #0xc
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	ldr	r0, .L34
	mov	r1, #0x2
	mov	r2, #0xd
	bl	MenuPrint
	ldr	r0, .L34+0x4
	bl	SetMainCallback2
	b	.L17
.L35:
	.align	2, 0
.L34:
	.word	gSystemText_BackupDamagedGameContinue
	.word	CB2_GameplayCannotBeContinued
.L27:
	ldr	r0, .L36
	mov	r1, #0x2
	mov	r2, #0xd
	bl	MenuPrint
.L26:
	ldr	r0, .L36+0x4
	bl	SetMainCallback2
.L17:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gSystemText_SaveCompletedPressA
	.word	CB2_FadeAndReturnToTitleScreen
.Lfe4:
	.size	 CB2_WipeSave,.Lfe4-CB2_WipeSave
	.align	2, 0
	.type	 CB2_GameplayCannotBeContinued,function
	.thumb_func
CB2_GameplayCannotBeContinued:
	push	{lr}
	ldr	r1, .L40
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L40+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L39	@cond_branch
	mov	r0, #0x1
	mov	r1, #0xc
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	ldr	r0, .L40+0x8
	mov	r1, #0x2
	mov	r2, #0xd
	bl	MenuPrint
	ldr	r0, .L40+0xc
	bl	SetVBlankCallback
	ldr	r0, .L40+0x10
	bl	SetMainCallback2
.L39:
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	gSaveFailedClockInfo
	.word	gMain
	.word	gSystemText_GameplayEnded
	.word	VBlankCB
	.word	CB2_FadeAndReturnToTitleScreen
.Lfe5:
	.size	 CB2_GameplayCannotBeContinued,.Lfe5-CB2_GameplayCannotBeContinued
	.align	2, 0
	.type	 CB2_FadeAndReturnToTitleScreen,function
	.thumb_func
CB2_FadeAndReturnToTitleScreen:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L44
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r0, .L44+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r2, [sp]
	mov	r1, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L44+0x8
	bl	SetVBlankCallback
	ldr	r0, .L44+0xc
	bl	SetMainCallback2
.L43:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gSaveFailedClockInfo
	.word	gMain
	.word	VBlankCB
	.word	CB2_ReturnToTitleScreen
.Lfe6:
	.size	 CB2_FadeAndReturnToTitleScreen,.Lfe6-CB2_FadeAndReturnToTitleScreen
	.align	2, 0
	.type	 CB2_ReturnToTitleScreen,function
	.thumb_func
CB2_ReturnToTitleScreen:
	push	{r4, r5, lr}
	bl	UpdatePaletteFade
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L47	@cond_branch
	ldr	r5, .L50
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L48	@cond_branch
	bl	DoSoftReset
	b	.L47
.L51:
	.align	2, 0
.L50:
	.word	gGameContinueCallback
.L48:
	bl	SetMainCallback2
	str	r4, [r5]
.L47:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 CB2_ReturnToTitleScreen,.Lfe7-CB2_ReturnToTitleScreen
	.align	2, 0
	.type	 VBlankCB_UpdateClockGraphics,function
	.thumb_func
VBlankCB_UpdateClockGraphics:
	push	{r4, r5, lr}
	ldr	r0, .L56
	mov	ip, r0
	ldr	r0, [r0, #0x24]
	lsr	r4, r0, #0x3
	mov	r0, #0x7
	and	r4, r4, r0
	ldr	r0, .L56+0x4
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	mov	r2, ip
	str	r0, [r2, #0x3c]
	str	r1, [r2, #0x40]
	ldrh	r1, [r2, #0x3e]
	ldr	r0, .L56+0x8
	and	r0, r0, r1
	mov	r1, #0x70
	orr	r0, r0, r1
	strh	r0, [r2, #0x3e]
	mov	r1, ip
	add	r1, r1, #0x3c
	mov	r0, #0x48
	strb	r0, [r1]
	ldr	r0, .L56+0xc
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L53	@cond_branch
	ldr	r3, .L56+0x10
	lsl	r2, r4, #0x1
	add	r2, r2, r4
	add	r0, r2, r3
	mov	r4, ip
	add	r4, r4, #0x40
	ldrb	r5, [r0]
	ldrh	r1, [r4]
	ldr	r0, .L56+0x14
	and	r0, r0, r1
	orr	r0, r0, r5
	strh	r0, [r4]
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r3, r3, #0x1
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x3
	orr	r1, r1, r0
	mov	r3, ip
	add	r3, r3, #0x3f
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L54
.L57:
	.align	2, 0
.L56:
	.word	gMain
	.word	sClockOamData
	.word	0xfffffe00
	.word	gSaveFailedClockInfo
	.word	sClockFrames
	.word	0xfffffc00
.L53:
	mov	r2, ip
	add	r2, r2, #0x40
	ldrh	r1, [r2]
	ldr	r0, .L58
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
.L54:
	ldr	r0, .L58+0x4
	mov	r1, #0xe0
	lsl	r1, r1, #0x13
	mov	r2, #0x1
	bl	CpuFastSet
	ldr	r1, .L58+0x8
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L55	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x2]
.L55:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	0xfffffc00
	.word	gMain+0x3c
	.word	gSaveFailedClockInfo
.Lfe8:
	.size	 VBlankCB_UpdateClockGraphics,.Lfe8-VBlankCB_UpdateClockGraphics
	.align	2, 0
	.type	 VerifySectorWipe,function
	.thumb_func
VerifySectorWipe:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L68
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	mov	r1, #0x0
	add	r2, r4, #0
	bl	ReadFlash
	mov	r1, #0x0
	ldr	r2, .L68+0x4
.L64:
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L63	@cond_branch
	mov	r0, #0x1
	b	.L67
.L69:
	.align	2, 0
.L68:
	.word	gSharedMem
	.word	0x3ff
.L63:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r4, r4, #0x4
	cmp	r1, r2
	bls	.L64	@cond_branch
	mov	r0, #0x0
.L67:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 VerifySectorWipe,.Lfe9-VerifySectorWipe
	.align	2, 0
	.type	 WipeSector,function
	.thumb_func
WipeSector:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, #0x0
	ldr	r1, .L82
	mov	r8, r1
	ldr	r7, .L82+0x4
.L74:
	mov	r4, #0x0
	add	r5, r0, #0x1
.L79:
	ldr	r3, [r7]
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	_call_via_r3
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r8
	bls	.L79	@cond_branch
	add	r0, r6, #0
	bl	VerifySectorWipe
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	lsl	r0, r5, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, #0
	beq	.L72	@cond_branch
	cmp	r0, #0x81
	bls	.L74	@cond_branch
.L72:
	add	r0, r1, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L83:
	.align	2, 0
.L82:
	.word	0xfff
	.word	ProgramFlashByte
.Lfe10:
	.size	 WipeSector,.Lfe10-WipeSector
	.align	2, 0
	.type	 WipeSectors,function
	.thumb_func
WipeSectors:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r6, #0x0
.L88:
	mov	r4, #0x1
	lsl	r4, r4, r6
	add	r0, r5, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L87	@cond_branch
	add	r0, r6, #0
	bl	WipeSector
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L87	@cond_branch
	bic	r5, r5, r4
.L87:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x1f
	bls	.L88	@cond_branch
	cmp	r5, #0
	beq	.L91	@cond_branch
	mov	r0, #0x1
	b	.L93
.L91:
	mov	r0, #0x0
.L93:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 WipeSectors,.Lfe11-WipeSectors
.text
	.align	2, 0
