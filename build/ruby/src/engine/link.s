@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gLinkTestDebugValuesEnabled
	.section ewram_data,"aw"
	.type	 gLinkTestDebugValuesEnabled,object
	.size	 gLinkTestDebugValuesEnabled,1
gLinkTestDebugValuesEnabled:
	.byte	0x0
	.globl	gLinkTestDummyBool
	.type	 gLinkTestDummyBool,object
	.size	 gLinkTestDummyBool,1
gLinkTestDummyBool:
	.byte	0x0
	.globl	gFiller_20238B8
	.align	2, 0
	.type	 gFiller_20238B8,object
	.size	 gFiller_20238B8,4
gFiller_20238B8:
	.word	0x0
	.globl	dword_20238BC
	.align	2, 0
	.type	 dword_20238BC,object
	.size	 dword_20238BC,4
dword_20238BC:
	.word	0x0
	.globl	gLinkOpen
	.type	 gLinkOpen,object
	.size	 gLinkOpen,1
gLinkOpen:
	.byte	0x0
	.section .rodata
	.align	1, 0
	.type	 sLinkTestDigitPalette,object
sLinkTestDigitPalette:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x7fe0
	.size	 sLinkTestDigitPalette,32
	.align	2, 0
	.type	 sLinkTestDigitTiles,object
sLinkTestDigitTiles:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0xe000
	.word	0xefe00
	.word	0xefefe0
	.word	0xefe0efe
	.word	0xefe0efe
	.word	0xefefe0
	.word	0xefe00
	.word	0xe000
	.word	0xe0000
	.word	0xefe000
	.word	0xefe000
	.word	0xefe000
	.word	0xefe000
	.word	0xefe000
	.word	0xefe000
	.word	0xe0000
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xefeeee0
	.word	0xefe000
	.word	0xefe00
	.word	0xeeefe0
	.word	0xefffffe
	.word	0xeeeee0
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xefeeee0
	.word	0xefffe00
	.word	0xefeee00
	.word	0xefeeee0
	.word	0xefffffe
	.word	0xeeeee0
	.word	0xe00e0
	.word	0xefeefe
	.word	0xefeefe
	.word	0xefeefe
	.word	0xefffffe
	.word	0xefeee0
	.word	0xefe000
	.word	0xe0000
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xeeeefe
	.word	0xefffffe
	.word	0xefeeee0
	.word	0xefeeee0
	.word	0xefffffe
	.word	0xeeeee0
	.word	0xe0
	.word	0xefe
	.word	0xeeeefe
	.word	0xefffffe
	.word	0xefeeefe
	.word	0xefeeefe
	.word	0xefffffe
	.word	0xeeeee0
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xefeeefe
	.word	0xefe0efe
	.word	0xefe00e0
	.word	0xefe0000
	.word	0xefe0000
	.word	0xe00000
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xefeeefe
	.word	0xefffffe
	.word	0xefeeefe
	.word	0xefeeefe
	.word	0xefffffe
	.word	0xeeeee0
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xefeeefe
	.word	0xefeeefe
	.word	0xefffffe
	.word	0xefeeee0
	.word	0xefe0000
	.word	0xee0000
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xefeeefe
	.word	0xefffffe
	.word	0xefeeefe
	.word	0xefe0efe
	.word	0xefe0efe
	.word	0xee0ee0
	.word	0xeee0
	.word	0xefffe
	.word	0xeefefe
	.word	0xefffffe
	.word	0xefeeefe
	.word	0xefeeefe
	.word	0xefffffe
	.word	0xeeeee0
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xeeeefe
	.word	0xefe
	.word	0xefe
	.word	0xeeeefe
	.word	0xefffffe
	.word	0xeeeee0
	.word	0xeee0
	.word	0xefffe
	.word	0xefeefe
	.word	0xefe0efe
	.word	0xefe0efe
	.word	0xefeefe
	.word	0xefffe
	.word	0xeee0
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xeeeefe
	.word	0xefffffe
	.word	0xeeeefe
	.word	0xeeeefe
	.word	0xefffffe
	.word	0xeeeee0
	.word	0xeeeee0
	.word	0xefffffe
	.word	0xeeeefe
	.word	0xefffffe
	.word	0xeeeefe
	.word	0xefe
	.word	0xefe
	.word	0xe0
	.size	 sLinkTestDigitTiles,544
	.type	 sDebugMessages,object
	.size	 sDebugMessages,84
sDebugMessages:
	.byte	0xe
	.byte	0x12
	.byte	0x40
	.byte	0x8
	.byte	0x0
	.byte	0x11
	.byte	0x35
	.byte	0x3
	.byte	0x44
	.byte	0xd
	.byte	0xff
	.space	1
	.byte	0xe
	.byte	0x12
	.byte	0x40
	.byte	0x8
	.byte	0x0
	.byte	0x44
	.byte	0x7
	.byte	0x1f
	.byte	0xe
	.byte	0x2e
	.byte	0xff
	.space	1
	.byte	0x6
	.byte	0x8
	.byte	0x16
	.byte	0x2e
	.byte	0x0
	.byte	0x11
	.byte	0x35
	.byte	0x3
	.byte	0x44
	.byte	0xd
	.byte	0xff
	.space	1
	.byte	0x6
	.byte	0x8
	.byte	0x16
	.byte	0x2e
	.byte	0x0
	.byte	0x44
	.byte	0x7
	.byte	0x1f
	.byte	0xc
	.byte	0x10
	.byte	0xff
	.space	1
	.byte	0x6
	.byte	0x8
	.byte	0x16
	.byte	0x2e
	.byte	0x0
	.byte	0x44
	.byte	0x7
	.byte	0x1f
	.byte	0xe
	.byte	0x2e
	.byte	0xff
	.space	1
	.byte	0x6
	.byte	0x8
	.byte	0x16
	.byte	0x2e
	.byte	0x0
	.byte	0x2d
	.byte	0x0
	.byte	0x6
	.byte	0x8
	.byte	0x16
	.byte	0x2e
	.byte	0xff
	.byte	0x6
	.byte	0x8
	.byte	0x16
	.byte	0x2e
	.byte	0x0
	.byte	0x1a
	.byte	0x0
	.byte	0xc
	.byte	0x50
	.byte	0x4b
	.byte	0x2
	.byte	0xff
	.type	 sColorCodes,object
sColorCodes:
	.byte	0xfc
	.byte	0x2
	.byte	0x0
	.byte	0xfc
	.byte	0x1
	.byte	0xf
	.byte	0xff
	.size	 sColorCodes,7
	.globl	sBlockRequestLookupTable
	.align	2, 0
	.type	 sBlockRequestLookupTable,object
	.size	 sBlockRequestLookupTable,40
sBlockRequestLookupTable:
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0x64
	.word	gBlockSendBuffer
	.word	0xdc
	.word	gBlockSendBuffer
	.word	0x28
	.type	 sTestString,object
sTestString:
	.byte	0x63
	.byte	0x5d
	.byte	0x64
	.byte	0x15
	.byte	0xff
	.size	 sTestString,5
	.align	2, 0
	.type	 sMagic,object
	.size	 sMagic,15
sMagic:
	.ascii	"GameFreak inc.\000"
	.align	2, 0
	.type	 sEmptyString,object
sEmptyString:
	.byte	0xff
	.size	 sEmptyString,1
.text
	.align	2, 0
	.globl	Task_DestroySelf
	.type	 Task_DestroySelf,function
	.thumb_func
Task_DestroySelf:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 Task_DestroySelf,.Lfe1-Task_DestroySelf
	.align	2, 0
	.type	 InitLinkTestBG,function
	.thumb_func
InitLinkTestBG:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r8, r5
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	ldr	r0, .L12
	lsl	r1, r4, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r2, .L12+0x4
	ldr	r0, .L12+0x8
	str	r0, [r2]
	lsl	r0, r7, #0xe
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	str	r0, [r2, #0x4]
	ldr	r0, .L12+0xc
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	ldr	r0, .L12+0x10
	str	r6, [r0]
	str	r4, [r0, #0x4]
	cmp	r5, #0x2
	beq	.L6	@cond_branch
	cmp	r5, #0x2
	bgt	.L10	@cond_branch
	cmp	r5, #0x1
	beq	.L5	@cond_branch
	b	.L4
.L13:
	.align	2, 0
.L12:
	.word	sLinkTestDigitPalette
	.word	0x40000d4
	.word	sLinkTestDigitTiles
	.word	0x80000110
	.word	gLinkTestBGInfo
.L10:
	mov	r0, r8
	cmp	r0, #0x3
	beq	.L7	@cond_branch
	b	.L4
.L5:
	ldr	r2, .L14
	b	.L11
.L15:
	.align	2, 0
.L14:
	.word	0x400000a
.L6:
	ldr	r2, .L16
	b	.L11
.L17:
	.align	2, 0
.L16:
	.word	0x400000c
.L7:
	ldr	r2, .L18
.L11:
	lsl	r0, r6, #0x8
	mov	r1, #0x1
	orr	r0, r0, r1
	lsl	r1, r7, #0x2
	orr	r0, r0, r1
	strh	r0, [r2]
.L4:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	0x400000e
.Lfe2:
	.size	 InitLinkTestBG,.Lfe2-InitLinkTestBG
	.align	2, 0
	.globl	InitLinkTestBG_Unused
	.type	 InitLinkTestBG_Unused,function
	.thumb_func
InitLinkTestBG_Unused:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r5, r1, #0
	add	r4, r2, #0
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L21
	mov	r2, r8
	lsl	r1, r2, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r2, .L21+0x4
	ldr	r0, .L21+0x8
	str	r0, [r2]
	lsl	r0, r6, #0xe
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	str	r0, [r2, #0x4]
	ldr	r0, .L21+0xc
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	ldr	r0, .L21+0x10
	str	r4, [r0]
	mov	r1, r8
	str	r1, [r0, #0x4]
	ldr	r0, .L21+0x14
	lsl	r5, r5, #0x2
	add	r5, r5, r0
	ldr	r0, [r5]
	lsl	r4, r4, #0x8
	lsl	r6, r6, #0x2
	orr	r4, r4, r6
	strh	r4, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	sLinkTestDigitPalette
	.word	0x40000d4
	.word	sLinkTestDigitTiles
	.word	0x80000110
	.word	gLinkTestBGInfo
	.word	gBGControlRegs
.Lfe3:
	.size	 InitLinkTestBG_Unused,.Lfe3-InitLinkTestBG_Unused
	.align	2, 0
	.globl	LinkTestScreen
	.type	 LinkTestScreen,function
	.thumb_func
LinkTestScreen:
	push	{r4, r5, r6, lr}
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	ldr	r0, .L29
	bl	SetVBlankCallback
	ldr	r4, .L29+0x4
	add	r0, r4, #0
	bl	SetUpWindowConfig
	add	r0, r4, #0
	bl	InitMenuWindow
	bl	ResetBlockSend
	ldr	r1, .L29+0x8
	ldr	r2, .L29+0xc
	add	r0, r2, #0
	strh	r0, [r1]
	bl	OpenLink
	ldr	r0, .L29+0x10
	ldrh	r0, [r0, #0x20]
	bl	SeedRng
	mov	r4, #0x0
	ldr	r6, .L29+0x14
	mov	r5, #0xff
.L27:
	bl	Random
	add	r1, r4, r6
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	and	r0, r0, r5
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L27	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x4
	mov	r3, #0x0
	bl	InitLinkTestBG
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xaa
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L29+0x18
	mov	r1, #0x0
	bl	CreateTask
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	ldr	r1, .L29+0x1c
	mov	r0, #0x0
	str	r0, [r1]
	bl	InitLocalLinkPlayer
	ldr	r0, .L29+0x20
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L29+0x24
	bl	SetMainCallback2
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	VBlankCB_LinkTest
	.word	gWindowConfig_81E6CE4
	.word	gLinkType
	.word	0x1111
	.word	gMain
	.word	gSaveBlock2+0xa
	.word	Task_DestroySelf
	.word	sDummy3
	.word	Task_PrintTestData
	.word	CB2_LinkTest
.Lfe4:
	.size	 LinkTestScreen,.Lfe4-LinkTestScreen
	.align	2, 0
	.globl	sub_8007270
	.type	 sub_8007270,function
	.thumb_func
sub_8007270:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L32
	strh	r0, [r1, #0x18]
	bx	lr
.L33:
	.align	2, 0
.L32:
	.word	localLinkPlayer
.Lfe5:
	.size	 sub_8007270,.Lfe5-sub_8007270
	.align	2, 0
	.type	 InitLocalLinkPlayer,function
	.thumb_func
InitLocalLinkPlayer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r3, .L40
	ldr	r2, .L40+0x4
	ldrb	r1, [r2, #0xa]
	ldrb	r0, [r2, #0xb]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0xc]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0xd]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3, #0x4]
	mov	r4, #0x0
	add	r6, r2, #0
	ldr	r7, .L40+0x8
	ldr	r0, .L40+0xc
	mov	ip, r0
	ldr	r1, .L40+0x10
	mov	r8, r1
	add	r5, r3, #0
	add	r5, r5, #0x8
.L38:
	add	r0, r4, r5
	add	r1, r4, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0xa
	ble	.L38	@cond_branch
	ldrb	r0, [r6, #0x8]
	mov	r2, #0x0
	strb	r0, [r3, #0x13]
	ldrh	r0, [r7]
	str	r0, [r3, #0x14]
	mov	r4, ip
	ldrb	r0, [r4]
	strh	r0, [r3, #0x1a]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r4, #0x80
	lsl	r4, r4, #0x7
	add	r1, r4, #0
	add	r0, r0, r1
	strh	r0, [r3]
	strh	r2, [r3, #0x2]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	localLinkPlayer
	.word	gSaveBlock2
	.word	gLinkType
	.word	gGameLanguage
	.word	gGameVersion
.Lfe6:
	.size	 InitLocalLinkPlayer,.Lfe6-InitLocalLinkPlayer
	.align	2, 0
	.type	 VBlankCB_LinkTest,function
	.thumb_func
VBlankCB_LinkTest:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 VBlankCB_LinkTest,.Lfe7-VBlankCB_LinkTest
	.align	2, 0
	.type	 InitLink,function
	.thumb_func
InitLink:
	push	{lr}
	ldr	r3, .L49
	ldr	r1, .L49+0x4
	ldr	r2, .L49+0x8
	add	r0, r1, #0
	add	r0, r0, #0xe
.L47:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L47	@cond_branch
	mov	r0, #0x1
	strb	r0, [r3]
	bl	EnableSerial
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gLinkOpen
	.word	gSendCmd
	.word	0xefff
.Lfe8:
	.size	 InitLink,.Lfe8-InitLink
	.align	2, 0
	.type	 Task_TriggerHandshake,function
	.thumb_func
Task_TriggerHandshake:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L53
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L52	@cond_branch
	ldr	r1, .L53+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r2, #0
	bl	DestroyTask
.L52:
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gTasks
	.word	gShouldAdvanceLinkState
.Lfe9:
	.size	 Task_TriggerHandshake,.Lfe9-Task_TriggerHandshake
	.align	2, 0
	.globl	OpenLink
	.type	 OpenLink,function
	.thumb_func
OpenLink:
	push	{r4, r5, r6, lr}
	bl	ResetSerial
	bl	InitLink
	ldr	r1, .L61
	ldr	r0, .L61+0x4
	str	r0, [r1]
	ldr	r0, .L61+0x8
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L61+0xc
	strb	r1, [r0]
	ldr	r0, .L61+0x10
	strb	r1, [r0]
	bl	ResetBlockReceivedFlags
	ldr	r0, .L61+0x14
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L61+0x18
	strb	r1, [r0]
	ldr	r0, .L61+0x1c
	strb	r1, [r0]
	ldr	r0, .L61+0x20
	strb	r1, [r0]
	ldr	r6, .L61+0x24
	mov	r2, #0x0
	mov	r5, #0x1
	ldr	r4, .L61+0x28
	ldr	r3, .L61+0x2c
.L59:
	add	r0, r1, r6
	strb	r5, [r0]
	add	r0, r1, r4
	strb	r2, [r0]
	add	r0, r1, r3
	strb	r2, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L59	@cond_branch
	ldr	r0, .L61+0x30
	mov	r1, #0x2
	bl	CreateTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gLinkCallback
	.word	LinkCB_RequestPlayerDataExchange
	.word	gLinkVSyncDisabled
	.word	gLinkErrorOccurred
	.word	gSuppressLinkErrorMessage
	.word	sDummy1
	.word	byte_3002A68
	.word	gLinkDummyBool
	.word	gReceivedRemoteLinkPlayers
	.word	gLinkPlayerPending
	.word	u8_array_3002B78
	.word	u8_array_3002B70
	.word	Task_TriggerHandshake
.Lfe10:
	.size	 OpenLink,.Lfe10-OpenLink
	.align	2, 0
	.globl	CloseLink
	.type	 CloseLink,function
	.thumb_func
CloseLink:
	push	{lr}
	ldr	r0, .L64
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L64+0x4
	strb	r1, [r0]
	bl	DisableSerial
	pop	{r0}
	bx	r0
.L65:
	.align	2, 0
.L64:
	.word	gReceivedRemoteLinkPlayers
	.word	gLinkOpen
.Lfe11:
	.size	 CloseLink,.Lfe11-CloseLink
	.align	2, 0
	.type	 TestBlockTransfer,function
	.thumb_func
TestBlockTransfer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r5, .L82
	ldr	r4, .L82+0x4
	ldrb	r0, [r5]
	ldrh	r1, [r4]
	cmp	r0, r1
	beq	.L67	@cond_branch
	ldrh	r0, [r4]
	mov	r1, #0x2
	mov	r2, #0x3
	mov	r3, #0x2
	bl	PrintHex
	ldrh	r0, [r4]
	strb	r0, [r5]
.L67:
	mov	r5, #0x0
	ldr	r7, .L82+0x8
.L71:
	ldr	r0, .L82+0xc
	add	r6, r5, r0
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r4, r0, r7
	ldrb	r0, [r6]
	ldrh	r1, [r4]
	cmp	r0, r1
	beq	.L70	@cond_branch
	ldrh	r0, [r4]
	add	r2, r5, #0x4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x2
	mov	r3, #0x2
	bl	PrintHex
	ldrh	r0, [r4]
	strb	r0, [r6]
.L70:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L71	@cond_branch
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0xf
	bne	.L74	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L82+0x8
	mov	r9, r0
	ldr	r1, .L82+0x10
	mov	r8, r1
.L78:
	add	r0, r7, #0
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L77	@cond_branch
	lsl	r0, r5, #0x8
	ldr	r1, .L82+0x14
	add	r0, r0, r1
	lsl	r4, r5, #0x1
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrh	r1, [r1, #0x2]
	bl	LinkTestCalcBlockChecksum
	ldr	r1, .L82+0x18
	add	r4, r4, r1
	mov	r6, #0x0
	strh	r0, [r4]
	add	r0, r5, #0
	bl	ResetBlockReceivedFlag
	ldrh	r0, [r4]
	cmp	r0, r8
	beq	.L77	@cond_branch
	ldr	r0, .L82+0x1c
	strb	r6, [r0]
	ldr	r0, .L82+0x20
	strb	r6, [r0]
.L77:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L78	@cond_branch
.L74:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	sLinkTestLastBlockSendPos
	.word	sBlockSend
	.word	sBlockRecv
	.word	sLinkTestLastBlockRecvPos
	.word	0x342
	.word	gBlockRecvBuffer
	.word	gLinkTestBlockChecksums
	.word	gLinkTestDebugValuesEnabled
	.word	gLinkTestDummyBool
.Lfe12:
	.size	 TestBlockTransfer,.Lfe12-TestBlockTransfer
	.align	2, 0
	.type	 LinkTestProcessKeyInput,function
	.thumb_func
LinkTestProcessKeyInput:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	ldr	r4, .L93
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L85	@cond_branch
	ldr	r1, .L93+0x4
	mov	r0, #0x1
	strb	r0, [r1]
.L85:
	ldrh	r1, [r4, #0x2c]
	mov	r5, #0x2
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L86	@cond_branch
	ldr	r0, .L93+0x8
	ldr	r1, .L93+0xc
	bl	InitBlockSend
.L86:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L87	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L87:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	mov	r0, #0x1
	bl	SetSuppressLinkErrorMessage
.L88:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L89	@cond_branch
	mov	r0, #0x1
	bl	TrySavingData
.L89:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L90	@cond_branch
	bl	sub_800832C
.L90:
	ldr	r0, .L93+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L91	@cond_branch
	ldr	r2, [r4, #0x20]
	ldr	r0, .L93+0x14
	ldrb	r1, [r0]
	ldr	r0, .L93+0x18
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L92	@cond_branch
	mov	r0, #0x10
	orr	r1, r1, r0
.L92:
	add	r0, r2, #0
	bl	SetLinkDebugValues
.L91:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gMain
	.word	gShouldAdvanceLinkState
	.word	gSharedMem+0x4000
	.word	0x2004
	.word	gLinkTestDebugValuesEnabled
	.word	gLinkVSyncDisabled
	.word	gLinkCallback
.Lfe13:
	.size	 LinkTestProcessKeyInput,.Lfe13-LinkTestProcessKeyInput
	.align	2, 0
	.type	 CB2_LinkTest,function
	.thumb_func
CB2_LinkTest:
	push	{lr}
	bl	LinkTestProcessKeyInput
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	TestBlockTransfer
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CB2_LinkTest,.Lfe14-CB2_LinkTest
	.align	2, 0
	.globl	LinkMain2
	.type	 LinkMain2,function
	.thumb_func
LinkMain2:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L106
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L97	@cond_branch
	mov	r0, #0x0
	b	.L105
.L107:
	.align	2, 0
.L106:
	.word	gLinkOpen
.L97:
	mov	r1, #0x0
	ldr	r5, .L108
	ldr	r3, .L108+0x4
	mov	r2, #0x0
.L101:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x7
	bls	.L101	@cond_branch
	ldrh	r0, [r4]
	strh	r0, [r5]
	ldr	r0, .L108+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L103	@cond_branch
	ldr	r0, .L108+0xc
	ldr	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	bl	ProcessRecvCmds
	ldr	r0, .L108+0x10
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L104	@cond_branch
	bl	_call_via_r0
.L104:
	bl	CheckErrorStatus
.L103:
	ldr	r0, .L108+0x8
	ldrh	r0, [r0]
.L105:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L109:
	.align	2, 0
.L108:
	.word	gLinkHeldKeys
	.word	gSendCmd
	.word	gLinkStatus
	.word	0x4000128
	.word	gLinkCallback
.Lfe15:
	.size	 LinkMain2,.Lfe15-LinkMain2
	.align	2, 0
	.type	 HandleReceiveRemoteLinkPlayer,function
	.thumb_func
HandleReceiveRemoteLinkPlayer:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	ldr	r1, .L117
	add	r0, r0, r1
	strb	r5, [r0]
	mov	r4, #0x0
	add	r6, r1, #0
	b	.L111
.L118:
	.align	2, 0
.L117:
	.word	gLinkPlayerPending
.L114:
	add	r0, r4, r6
	ldrb	r0, [r0]
	add	r5, r5, r0
	add	r4, r4, #0x1
.L111:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L114	@cond_branch
	cmp	r5, #0
	bne	.L116	@cond_branch
	ldr	r1, .L119
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L116	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1]
.L116:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	gReceivedRemoteLinkPlayers
.Lfe16:
	.size	 HandleReceiveRemoteLinkPlayer,.Lfe16-HandleReceiveRemoteLinkPlayer
	.align	2, 0
	.type	 ProcessRecvCmds,function
	.thumb_func
ProcessRecvCmds:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r7, #0x0
	ldr	r0, .L166
	mov	r8, r0
.L125:
	ldr	r0, .L166+0x4
	lsl	r4, r7, #0x1
	add	r2, r4, r0
	mov	r1, #0x0
	strh	r1, [r2]
	mov	r3, r8
	add	r1, r4, r3
	ldrh	r0, [r1]
	mov	r9, r4
	add	r5, r7, #0x1
	str	r5, [sp]
	cmp	r0, #0
	bne	.LCB1072
	b	.L124	@long jump
.LCB1072:
	ldrh	r1, [r1]
	ldr	r0, .L166+0x8
	cmp	r1, r0
	bne	.LCB1077
	b	.L152	@long jump
.LCB1077:
	cmp	r1, r0
	bgt	.L160	@cond_branch
	ldr	r0, .L166+0xc
	cmp	r1, r0
	bne	.LCB1082
	b	.L157	@long jump
.LCB1082:
	cmp	r1, r0
	bgt	.L161	@cond_branch
	ldr	r0, .L166+0x10
	cmp	r1, r0
	beq	.L128	@cond_branch
	ldr	r0, .L166+0x14
	cmp	r1, r0
	bne	.LCB1090
	b	.L153	@long jump
.LCB1090:
	b	.L124
.L167:
	.align	2, 0
.L166:
	.word	gRecvCmds
	.word	word_3002910
	.word	0x5fff
	.word	0x4444
	.word	0x2222
	.word	0x2ffe
.L161:
	ldr	r0, .L168
	cmp	r1, r0
	beq	.L130	@cond_branch
	add	r0, r0, #0x11
	cmp	r1, r0
	beq	.L131	@cond_branch
	b	.L124
.L169:
	.align	2, 0
.L168:
	.word	0x5555
.L160:
	ldr	r0, .L170
	cmp	r1, r0
	bne	.LCB1124
	b	.L155	@long jump
.LCB1124:
	cmp	r1, r0
	bgt	.L162	@cond_branch
	ldr	r0, .L170+0x4
	cmp	r1, r0
	beq	.L133	@cond_branch
	ldr	r0, .L170+0x8
	cmp	r1, r0
	bne	.LCB1132
	b	.L154	@long jump
.LCB1132:
	b	.L124
.L171:
	.align	2, 0
.L170:
	.word	0xaaab
	.word	0x8888
	.word	0xaaaa
.L162:
	ldr	r0, .L172
	cmp	r1, r0
	bne	.LCB1147
	b	.L157	@long jump
.LCB1147:
	cmp	r1, r0
	bgt	.L163	@cond_branch
	ldr	r0, .L172+0x4
	cmp	r1, r0
	beq	.L132	@cond_branch
	b	.L124
.L173:
	.align	2, 0
.L172:
	.word	0xcafe
	.word	0xbbbb
.L163:
	ldr	r0, .L174
	cmp	r1, r0
	bne	.LCB1166
	b	.L156	@long jump
.LCB1166:
	b	.L124
.L175:
	.align	2, 0
.L174:
	.word	0xcccc
.L128:
	bl	InitLocalLinkPlayer
	ldr	r0, .L176
	add	r2, r0, #0
	add	r2, r2, #0x10
	ldr	r1, .L176+0x4
	ldmia	r1!, {r3, r4, r6}
	stmia	r2!, {r3, r4, r6}
	ldmia	r1!, {r3, r5, r6}
	stmia	r2!, {r3, r5, r6}
	ldr	r1, [r1]
	str	r1, [r2]
	ldr	r4, .L176+0x8
	add	r2, r0, #0
	add	r1, r4, #0
	ldmia	r1!, {r3, r5, r6}
	stmia	r2!, {r3, r5, r6}
	ldrh	r3, [r1]
	strh	r3, [r2]
	ldrb	r1, [r1, #0x2]
	strb	r1, [r2, #0x2]
	add	r1, r0, #0
	add	r1, r1, #0x2c
	ldmia	r4!, {r2, r5, r6}
	stmia	r1!, {r2, r5, r6}
	ldrh	r2, [r4]
	strh	r2, [r1]
	ldrb	r2, [r4, #0x2]
	strb	r2, [r1, #0x2]
	mov	r1, #0x3c
	bl	InitBlockSend
	b	.L124
.L177:
	.align	2, 0
.L176:
	.word	localLinkPlayerBlock
	.word	localLinkPlayer
	.word	sMagic
.L130:
.L131:
	ldr	r1, .L178
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L124
.L179:
	.align	2, 0
.L178:
	.word	byte_3002A68
.L132:
	add	r1, r4, r7
	lsl	r1, r1, #0x2
	ldr	r3, .L180
	add	r1, r1, r3
	mov	r5, #0x0
	strh	r5, [r1]
	mov	r0, r8
	add	r0, r0, #0x8
	add	r0, r4, r0
	ldrh	r0, [r0]
	strh	r0, [r1, #0x2]
	mov	r0, r8
	add	r0, r0, #0x10
	add	r0, r4, r0
	ldrh	r0, [r0]
	strb	r0, [r1, #0x9]
	b	.L124
.L181:
	.align	2, 0
.L180:
	.word	sBlockRecv
.L133:
	add	r0, r4, r7
	lsl	r0, r0, #0x2
	ldr	r6, .L182
	add	r3, r0, r6
	ldrh	r1, [r3, #0x2]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r2, r6, #0
	mov	sl, r2
	cmp	r1, r0
	bls	.L134	@cond_branch
	ldr	r6, .L182+0x4
	mov	r2, #0x0
	ldr	r5, .L182+0x8
.L138:
	ldrh	r1, [r3]
	lsr	r1, r1, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	add	r2, r2, #0x1
	lsl	r0, r2, #0x3
	add	r0, r4, r0
	add	r0, r0, r5
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	cmp	r2, #0x6
	bls	.L138	@cond_branch
	b	.L140
.L183:
	.align	2, 0
.L182:
	.word	sBlockRecv
	.word	gSharedMem
	.word	gRecvCmds
.L134:
	mov	r2, #0x0
	ldr	r5, .L184
	mov	ip, r5
	add	r5, r4, #0
	add	r4, r3, #0
	ldr	r6, .L184+0x4
	lsl	r3, r7, #0x8
.L144:
	ldrh	r1, [r4]
	lsr	r1, r1, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	add	r1, r1, ip
	add	r2, r2, #0x1
	lsl	r0, r2, #0x3
	add	r0, r5, r0
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	cmp	r2, #0x6
	bls	.L144	@cond_branch
.L140:
	mov	r6, r9
	add	r1, r6, r7
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	ldrh	r0, [r1]
	add	r0, r0, #0xe
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	bcc	.L124	@cond_branch
	ldr	r0, .L184+0x8
	add	r0, r7, r0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L147	@cond_branch
	lsl	r1, r7, #0x8
	ldr	r0, .L184
	add	r5, r1, r0
	lsl	r4, r7, #0x3
	sub	r1, r4, r7
	lsl	r1, r1, #0x2
	ldr	r0, .L184+0xc
	add	r1, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0x10
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r6, .L184+0x10
	add	r0, r5, #0
	add	r1, r6, #0
	bl	strcmp
	cmp	r0, #0
	bne	.L149	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x2c
	add	r1, r6, #0
	bl	strcmp
	cmp	r0, #0
	beq	.L148	@cond_branch
.L149:
	ldr	r0, .L184+0x14
	bl	SetMainCallback2
	b	.L150
.L185:
	.align	2, 0
.L184:
	.word	gBlockRecvBuffer
	.word	gRecvCmds
	.word	gLinkPlayerPending
	.word	gLinkPlayers
	.word	sMagic
	.word	CB2_LinkError
.L148:
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	HandleReceiveRemoteLinkPlayer
.L150:
	sub	r2, r4, r7
	lsl	r2, r2, #0x2
	ldr	r1, .L186
	add	r0, r2, r1
	add	r1, r1, r2
	ldrb	r1, [r1, #0x12]
	bl	ConvertInternationalString
	b	.L124
.L187:
	.align	2, 0
.L186:
	.word	gLinkPlayers+0x8
.L147:
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	SetBlockReceivedFlag
	b	.L124
.L152:
	ldr	r0, .L188
	b	.L165
.L189:
	.align	2, 0
.L188:
	.word	u8_array_3002B78
.L153:
	ldr	r0, .L190
.L165:
	add	r0, r7, r0
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L124
.L191:
	.align	2, 0
.L190:
	.word	u8_array_3002B70
.L154:
	bl	sub_8007E24
	b	.L124
.L155:
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	add	r1, r1, #0x8
	add	r1, r4, r1
	ldrh	r1, [r1]
	bl	Blender_SetBankBerryData
	b	.L124
.L156:
	ldr	r3, .L192
	mov	r0, r8
	add	r0, r0, #0x8
	add	r0, r4, r0
	ldrh	r2, [r0]
	lsl	r2, r2, #0x3
	add	r0, r2, r3
	ldr	r1, [r0]
	add	r3, r3, #0x4
	add	r2, r2, r3
	ldrh	r2, [r2]
	mov	r0, #0x0
	bl	SendBlock
	b	.L124
.L193:
	.align	2, 0
.L192:
	.word	sBlockRequestLookupTable
.L157:
	mov	r0, r8
	add	r0, r0, #0x8
	add	r0, r4, r0
	ldrh	r0, [r0]
	strh	r0, [r2]
.L124:
	ldr	r1, [sp]
	lsl	r0, r1, #0x10
	lsr	r7, r0, #0x10
	cmp	r7, #0x3
	bhi	.LCB1566
	b	.L125	@long jump
.LCB1566:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 ProcessRecvCmds,.Lfe17-ProcessRecvCmds
	.align	2, 0
	.type	 BuildSendCmd,function
	.thumb_func
BuildSendCmd:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L226
	cmp	r2, r0
	beq	.L201	@cond_branch
	cmp	r2, r0
	bgt	.L218	@cond_branch
	ldr	r0, .L226+0x4
	cmp	r2, r0
	beq	.L198	@cond_branch
	cmp	r2, r0
	bgt	.L219	@cond_branch
	ldr	r0, .L226+0x8
	cmp	r2, r0
	beq	.L196	@cond_branch
	ldr	r0, .L226+0xc
	b	.L225
.L227:
	.align	2, 0
.L226:
	.word	0x6666
	.word	0x4444
	.word	0x2222
	.word	0x2ffe
.L219:
	ldr	r0, .L228
	cmp	r2, r0
	bne	.LCB1612
	b	.L212	@long jump
.LCB1612:
	cmp	r2, r0
	bgt	.L220	@cond_branch
	sub	r0, r0, #0x11
	b	.L225
.L229:
	.align	2, 0
.L228:
	.word	0x5566
.L220:
	ldr	r0, .L230
.L225:
	cmp	r2, r0
	bne	.LCB1628
	b	.L212	@long jump
.LCB1628:
	b	.L195
.L231:
	.align	2, 0
.L230:
	.word	0x5fff
.L218:
	ldr	r0, .L232
	cmp	r2, r0
	beq	.L210	@cond_branch
	cmp	r2, r0
	bgt	.L221	@cond_branch
	ldr	r0, .L232+0x4
	cmp	r2, r0
	beq	.L202	@cond_branch
	ldr	r0, .L232+0x8
	b	.L225
.L233:
	.align	2, 0
.L232:
	.word	0xaaab
	.word	0x7777
	.word	0xaaaa
.L221:
	ldr	r0, .L234
	cmp	r2, r0
	beq	.L213	@cond_branch
	cmp	r2, r0
	bgt	.L222	@cond_branch
	ldr	r0, .L234+0x4
	cmp	r2, r0
	beq	.L208	@cond_branch
	b	.L195
.L235:
	.align	2, 0
.L234:
	.word	0xcafe
	.word	0xbbbb
.L222:
	ldr	r0, .L236
	cmp	r2, r0
	beq	.L211	@cond_branch
	b	.L195
.L237:
	.align	2, 0
.L236:
	.word	0xcccc
.L196:
	ldr	r0, .L238
	strh	r2, [r0]
	ldr	r1, .L238+0x4
	ldrh	r1, [r1]
	b	.L223
.L239:
	.align	2, 0
.L238:
	.word	gSendCmd
	.word	gLinkType
.L198:
	ldr	r0, .L240
	strh	r2, [r0]
	ldr	r1, .L240+0x4
	ldrh	r1, [r1, #0x2c]
	b	.L223
.L241:
	.align	2, 0
.L240:
	.word	gSendCmd
	.word	gMain
.L201:
	ldr	r0, .L242
	mov	r1, #0x0
	b	.L224
.L243:
	.align	2, 0
.L242:
	.word	gSendCmd
.L202:
	ldr	r0, .L244
	strh	r2, [r0]
	mov	r1, #0x0
	add	r3, r0, #0
	mov	r2, #0xee
.L206:
	add	r1, r1, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x4
	bls	.L206	@cond_branch
	b	.L195
.L245:
	.align	2, 0
.L244:
	.word	gSendCmd
.L208:
	ldr	r1, .L246
	strh	r2, [r1]
	ldr	r2, .L246+0x4
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0x2]
	ldrb	r0, [r2, #0x9]
	add	r0, r0, #0x80
	strh	r0, [r1, #0x4]
	b	.L195
.L247:
	.align	2, 0
.L246:
	.word	gSendCmd
	.word	sBlockSend
.L210:
	ldr	r0, .L248
	strh	r2, [r0]
	ldr	r1, .L248+0x4
	ldrh	r1, [r1]
	b	.L223
.L249:
	.align	2, 0
.L248:
	.word	gSendCmd
	.word	gScriptItemId
.L211:
	ldr	r0, .L250
	strh	r2, [r0]
	ldr	r1, .L250+0x4
	ldrb	r1, [r1]
	b	.L223
.L251:
	.align	2, 0
.L250:
	.word	gSendCmd
	.word	gBlockRequestType
.L212:
	ldr	r0, .L252
	strh	r2, [r0]
	b	.L195
.L253:
	.align	2, 0
.L252:
	.word	gSendCmd
.L213:
	ldr	r0, .L254
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L195	@cond_branch
	ldr	r0, .L254+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L195	@cond_branch
	ldr	r0, .L254+0x8
.L224:
	strh	r2, [r0]
.L223:
	strh	r1, [r0, #0x2]
.L195:
	pop	{r0}
	bx	r0
.L255:
	.align	2, 0
.L254:
	.word	word_3004858
	.word	gLinkTransferringData
	.word	gSendCmd
.Lfe18:
	.size	 BuildSendCmd,.Lfe18-BuildSendCmd
	.align	2, 0
	.globl	sub_8007B14
	.type	 sub_8007B14,function
	.thumb_func
sub_8007B14:
	ldr	r1, .L257
	ldr	r0, .L257+0x4
	str	r0, [r1]
	bx	lr
.L258:
	.align	2, 0
.L257:
	.word	gLinkCallback
	.word	sub_8007B44
.Lfe19:
	.size	 sub_8007B14,.Lfe19-sub_8007B14
	.align	2, 0
	.globl	sub_8007B24
	.type	 sub_8007B24,function
	.thumb_func
sub_8007B24:
	push	{lr}
	ldr	r0, .L263
	ldr	r1, [r0]
	ldr	r0, .L263+0x4
	cmp	r1, r0
	beq	.L260	@cond_branch
	mov	r0, #0x0
	b	.L262
.L264:
	.align	2, 0
.L263:
	.word	gLinkCallback
	.word	sub_8007B44
.L260:
	mov	r0, #0x1
.L262:
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 sub_8007B24,.Lfe20-sub_8007B24
	.align	2, 0
	.type	 sub_8007B44,function
	.thumb_func
sub_8007B44:
	push	{lr}
	ldr	r0, .L267
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L266	@cond_branch
	ldr	r0, .L267+0x4
	bl	BuildSendCmd
.L266:
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	gReceivedRemoteLinkPlayers
	.word	0xcafe
.Lfe21:
	.size	 sub_8007B44,.Lfe21-sub_8007B44
	.align	2, 0
	.globl	ClearLinkCallback
	.type	 ClearLinkCallback,function
	.thumb_func
ClearLinkCallback:
	ldr	r1, .L270
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L271:
	.align	2, 0
.L270:
	.word	gLinkCallback
.Lfe22:
	.size	 ClearLinkCallback,.Lfe22-ClearLinkCallback
	.align	2, 0
	.globl	ClearLinkCallback_2
	.type	 ClearLinkCallback_2,function
	.thumb_func
ClearLinkCallback_2:
	ldr	r1, .L273
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L274:
	.align	2, 0
.L273:
	.word	gLinkCallback
.Lfe23:
	.size	 ClearLinkCallback_2,.Lfe23-ClearLinkCallback_2
	.align	2, 0
	.globl	GetLinkPlayerCount
	.type	 GetLinkPlayerCount,function
	.thumb_func
GetLinkPlayerCount:
	ldr	r0, .L276
	ldr	r0, [r0]
	mov	r1, #0x1c
	and	r0, r0, r1
	lsr	r0, r0, #0x2
	bx	lr
.L277:
	.align	2, 0
.L276:
	.word	gLinkStatus
.Lfe24:
	.size	 GetLinkPlayerCount,.Lfe24-GetLinkPlayerCount
	.align	2, 0
	.globl	OpenLinkTimed
	.type	 OpenLinkTimed,function
	.thumb_func
OpenLinkTimed:
	push	{lr}
	ldr	r0, .L279
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L279+0x4
	strh	r1, [r0]
	bl	OpenLink
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	sPlayerDataExchangeStatus
	.word	gLinkTimeOutCounter
.Lfe25:
	.size	 OpenLinkTimed,.Lfe25-OpenLinkTimed
	.align	2, 0
	.globl	GetLinkPlayerDataExchangeStatusTimed
	.type	 GetLinkPlayerDataExchangeStatusTimed,function
	.thumb_func
GetLinkPlayerDataExchangeStatusTimed:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	ldr	r0, .L294
	ldrb	r4, [r0]
	cmp	r4, #0x1
	bne	.L282	@cond_branch
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L283	@cond_branch
	ldr	r0, .L294+0x4
	strb	r4, [r0]
	bl	CloseLink
.L283:
	mov	r6, #0x0
	ldr	r4, .L294+0x8
	mov	r5, #0x0
	b	.L284
.L295:
	.align	2, 0
.L294:
	.word	gReceivedRemoteLinkPlayers
	.word	gLinkErrorOccurred
	.word	gLinkPlayers
.L286:
	add	r0, r4, #0
	add	r0, r0, #0x14
	add	r0, r5, r0
	ldr	r1, [r0]
	ldr	r0, [r4, #0x14]
	cmp	r1, r0
	bne	.L287	@cond_branch
	add	r7, r7, #0x1
.L287:
	add	r5, r5, #0x1c
	add	r6, r6, #0x1
.L284:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	blt	.L286	@cond_branch
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r7, r0
	bne	.L289	@cond_branch
	ldr	r1, .L296
	mov	r0, #0x1
	b	.L293
.L297:
	.align	2, 0
.L296:
	.word	sPlayerDataExchangeStatus
.L289:
	ldr	r1, .L298
	mov	r0, #0x3
.L293:
	str	r0, [r1]
	add	r2, r1, #0
	b	.L291
.L299:
	.align	2, 0
.L298:
	.word	sPlayerDataExchangeStatus
.L282:
	ldr	r0, .L300
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	mov	r0, #0x96
	lsl	r0, r0, #0x12
	ldr	r2, .L300+0x4
	cmp	r1, r0
	bls	.L291	@cond_branch
	mov	r0, #0x2
	str	r0, [r2]
.L291:
	ldrb	r0, [r2]
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L301:
	.align	2, 0
.L300:
	.word	gLinkTimeOutCounter
	.word	sPlayerDataExchangeStatus
.Lfe26:
	.size	 GetLinkPlayerDataExchangeStatusTimed,.Lfe26-GetLinkPlayerDataExchangeStatusTimed
	.align	2, 0
	.globl	IsLinkPlayerDataExchangeComplete
	.type	 IsLinkPlayerDataExchangeComplete,function
	.thumb_func
IsLinkPlayerDataExchangeComplete:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	mov	r4, #0x0
	ldr	r5, .L311
	b	.L303
.L312:
	.align	2, 0
.L311:
	.word	gLinkPlayers
.L306:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x14
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r5, #0x14]
	cmp	r1, r0
	bne	.L305	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L305:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L303:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L306	@cond_branch
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bne	.L309	@cond_branch
	mov	r2, #0x1
	ldr	r0, .L313
	str	r2, [r0]
	b	.L310
.L314:
	.align	2, 0
.L313:
	.word	sPlayerDataExchangeStatus
.L309:
	mov	r2, #0x0
	ldr	r1, .L315
	mov	r0, #0x3
	str	r0, [r1]
.L310:
	add	r0, r2, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L316:
	.align	2, 0
.L315:
	.word	sPlayerDataExchangeStatus
.Lfe27:
	.size	 IsLinkPlayerDataExchangeComplete,.Lfe27-IsLinkPlayerDataExchangeComplete
	.align	2, 0
	.globl	GetLinkPlayerTrainerId
	.type	 GetLinkPlayerTrainerId,function
	.thumb_func
GetLinkPlayerTrainerId:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L318
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r0, [r1]
	bx	lr
.L319:
	.align	2, 0
.L318:
	.word	gLinkPlayers
.Lfe28:
	.size	 GetLinkPlayerTrainerId,.Lfe28-GetLinkPlayerTrainerId
	.align	2, 0
	.globl	ResetLinkPlayers
	.type	 ResetLinkPlayers,function
	.thumb_func
ResetLinkPlayers:
	push	{r4, r5, lr}
	ldr	r5, .L326
	mov	r4, #0x3
.L324:
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x1c
	bl	memset
	add	r5, r5, #0x1c
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L324	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	gLinkPlayers
.Lfe29:
	.size	 ResetLinkPlayers,.Lfe29-ResetLinkPlayers
	.align	2, 0
	.type	 ResetBlockSend,function
	.thumb_func
ResetBlockSend:
	ldr	r1, .L329
	mov	r0, #0x0
	strb	r0, [r1, #0x8]
	strh	r0, [r1]
	strh	r0, [r1, #0x2]
	str	r0, [r1, #0x4]
	bx	lr
.L330:
	.align	2, 0
.L329:
	.word	sBlockSend
.Lfe30:
	.size	 ResetBlockSend,.Lfe30-ResetBlockSend
	.align	2, 0
	.type	 InitBlockSend,function
	.thumb_func
InitBlockSend:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	add	r6, r1, #0
	ldr	r4, .L338
	ldrb	r5, [r4, #0x8]
	cmp	r5, #0
	beq	.L332	@cond_branch
	mov	r0, #0x0
	b	.L337
.L339:
	.align	2, 0
.L338:
	.word	sBlockSend
.L332:
	bl	GetMultiplayerId
	strb	r0, [r4, #0x9]
	mov	r0, #0x1
	strb	r0, [r4, #0x8]
	strh	r6, [r4, #0x2]
	strh	r5, [r4]
	add	r0, r0, #0xff
	cmp	r6, r0
	bls	.L334	@cond_branch
	str	r7, [r4, #0x4]
	b	.L335
.L334:
	ldr	r5, .L340
	cmp	r7, r5
	beq	.L336	@cond_branch
	add	r0, r5, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	memcpy
.L336:
	str	r5, [r4, #0x4]
.L335:
	ldr	r0, .L340+0x4
	bl	BuildSendCmd
	ldr	r1, .L340+0x8
	ldr	r0, .L340+0xc
	str	r0, [r1]
	ldr	r1, .L340+0x10
	mov	r0, #0x0
	str	r0, [r1]
	mov	r0, #0x1
.L337:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L341:
	.align	2, 0
.L340:
	.word	gBlockSendBuffer
	.word	0xbbbb
	.word	gLinkCallback
	.word	LinkCB_BlockSendBegin
	.word	sBlockSendDelayCounter
.Lfe31:
	.size	 InitBlockSend,.Lfe31-InitBlockSend
	.align	2, 0
	.type	 LinkCB_BlockSendBegin,function
	.thumb_func
LinkCB_BlockSendBegin:
	push	{lr}
	ldr	r1, .L344
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0x2
	bls	.L343	@cond_branch
	ldr	r1, .L344+0x4
	ldr	r0, .L344+0x8
	str	r0, [r1]
.L343:
	pop	{r0}
	bx	r0
.L345:
	.align	2, 0
.L344:
	.word	sBlockSendDelayCounter
	.word	gLinkCallback
	.word	LinkCB_BlockSend
.Lfe32:
	.size	 LinkCB_BlockSendBegin,.Lfe32-LinkCB_BlockSendBegin
	.align	2, 0
	.type	 LinkCB_BlockSend,function
	.thumb_func
LinkCB_BlockSend:
	push	{r4, r5, r6, lr}
	ldr	r0, .L353
	ldr	r5, [r0, #0x4]
	ldr	r2, .L353+0x4
	ldr	r1, .L353+0x8
	strh	r1, [r2]
	mov	r3, #0x0
	add	r4, r0, #0
	add	r6, r4, #0
	add	r2, r2, #0x2
.L350:
	lsl	r0, r3, #0x1
	ldrh	r1, [r6]
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0]
	orr	r0, r0, r1
	strh	r0, [r2]
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x6
	ble	.L350	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, #0xe
	strh	r0, [r4]
	ldrh	r1, [r4, #0x2]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L352	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x8]
	ldr	r1, .L353+0xc
	ldr	r0, .L353+0x10
	str	r0, [r1]
.L352:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L354:
	.align	2, 0
.L353:
	.word	sBlockSend
	.word	gSendCmd
	.word	0x8888
	.word	gLinkCallback
	.word	LinkCB_BlockSendEnd
.Lfe33:
	.size	 LinkCB_BlockSend,.Lfe33-LinkCB_BlockSend
	.align	2, 0
	.type	 LinkCB_BlockSendEnd,function
	.thumb_func
LinkCB_BlockSendEnd:
	ldr	r1, .L356
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L357:
	.align	2, 0
.L356:
	.word	gLinkCallback
.Lfe34:
	.size	 LinkCB_BlockSendEnd,.Lfe34-LinkCB_BlockSendEnd
	.align	2, 0
	.type	 sub_8007E04,function
	.thumb_func
sub_8007E04:
	push	{lr}
	bl	GetMultiplayerId
	ldr	r0, .L359
	bl	BuildSendCmd
	ldr	r1, .L359+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	0x4444
	.word	dword_20238BC
.Lfe35:
	.size	 sub_8007E04,.Lfe35-sub_8007E04
	.align	2, 0
	.globl	sub_8007E24
	.type	 sub_8007E24,function
	.thumb_func
sub_8007E24:
	ldr	r1, .L362
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r1, .L362+0x4
	ldr	r0, .L362+0x8
	str	r0, [r1]
	bx	lr
.L363:
	.align	2, 0
.L362:
	.word	dword_20238BC
	.word	gLinkCallback
	.word	sub_8007E04
.Lfe36:
	.size	 sub_8007E24,.Lfe36-sub_8007E24
	.align	2, 0
	.globl	sub_8007E40
	.type	 sub_8007E40,function
	.thumb_func
sub_8007E40:
	ldr	r0, .L365
	ldr	r0, [r0]
	bx	lr
.L366:
	.align	2, 0
.L365:
	.word	dword_20238BC
.Lfe37:
	.size	 sub_8007E40,.Lfe37-sub_8007E40
	.align	2, 0
	.globl	sub_8007E4C
	.type	 sub_8007E4C,function
	.thumb_func
sub_8007E4C:
	push	{lr}
	ldr	r0, .L368
	bl	BuildSendCmd
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	0xaaaa
.Lfe38:
	.size	 sub_8007E4C,.Lfe38-sub_8007E4C
	.align	2, 0
	.globl	GetMultiplayerId
	.type	 GetMultiplayerId,function
	.thumb_func
GetMultiplayerId:
	ldr	r0, .L371
	ldr	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1e
	bx	lr
.L372:
	.align	2, 0
.L371:
	.word	0x4000128
.Lfe39:
	.size	 GetMultiplayerId,.Lfe39-GetMultiplayerId
	.align	2, 0
	.globl	bitmask_all_link_players_but_self
	.type	 bitmask_all_link_players_but_self,function
	.thumb_func
bitmask_all_link_players_but_self:
	push	{lr}
	bl	GetMultiplayerId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	lsl	r0, r0, r1
	mov	r1, #0xf
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 bitmask_all_link_players_but_self,.Lfe40-bitmask_all_link_players_but_self
	.align	2, 0
	.globl	SendBlock
	.type	 SendBlock,function
	.thumb_func
SendBlock:
	push	{lr}
	add	r0, r1, #0
	lsl	r1, r2, #0x10
	lsr	r1, r1, #0x10
	bl	InitBlockSend
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 SendBlock,.Lfe41-SendBlock
	.align	2, 0
	.globl	sub_8007E9C
	.type	 sub_8007E9C,function
	.thumb_func
sub_8007E9C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L379
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L376	@cond_branch
	mov	r0, #0x0
	b	.L378
.L380:
	.align	2, 0
.L379:
	.word	gLinkCallback
.L376:
	ldr	r0, .L381
	strb	r1, [r0]
	ldr	r0, .L381+0x4
	bl	BuildSendCmd
	mov	r0, #0x1
.L378:
	pop	{r1}
	bx	r1
.L382:
	.align	2, 0
.L381:
	.word	gBlockRequestType
	.word	0xcccc
.Lfe42:
	.size	 sub_8007E9C,.Lfe42-sub_8007E9C
	.align	2, 0
	.globl	sub_8007ECC
	.type	 sub_8007ECC,function
	.thumb_func
sub_8007ECC:
	push	{lr}
	mov	r1, #0x0
	ldr	r0, .L385
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L384	@cond_branch
	mov	r1, #0x1
.L384:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L386:
	.align	2, 0
.L385:
	.word	gLinkCallback
.Lfe43:
	.size	 sub_8007ECC,.Lfe43-sub_8007ECC
	.align	2, 0
	.globl	GetBlockReceivedStatus
	.type	 GetBlockReceivedStatus,function
	.thumb_func
GetBlockReceivedStatus:
	ldr	r2, .L388
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x3
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x1
	orr	r0, r0, r1
	ldrb	r1, [r2]
	orr	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L389:
	.align	2, 0
.L388:
	.word	gBlockReceived
.Lfe44:
	.size	 GetBlockReceivedStatus,.Lfe44-GetBlockReceivedStatus
	.align	2, 0
	.type	 SetBlockReceivedFlag,function
	.thumb_func
SetBlockReceivedFlag:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L391
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L392:
	.align	2, 0
.L391:
	.word	gBlockReceived
.Lfe45:
	.size	 SetBlockReceivedFlag,.Lfe45-SetBlockReceivedFlag
	.align	2, 0
	.globl	ResetBlockReceivedFlags
	.type	 ResetBlockReceivedFlags,function
	.thumb_func
ResetBlockReceivedFlags:
	push	{lr}
	ldr	r1, .L399
	mov	r2, #0x0
	add	r0, r1, #0x3
.L397:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L397	@cond_branch
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	gBlockReceived
.Lfe46:
	.size	 ResetBlockReceivedFlags,.Lfe46-ResetBlockReceivedFlags
	.align	2, 0
	.globl	ResetBlockReceivedFlag
	.type	 ResetBlockReceivedFlag,function
	.thumb_func
ResetBlockReceivedFlag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L403
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L402	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L402:
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	gBlockReceived
.Lfe47:
	.size	 ResetBlockReceivedFlag,.Lfe47-ResetBlockReceivedFlag
	.align	2, 0
	.globl	sub_8007F4C
	.type	 sub_8007F4C,function
	.thumb_func
sub_8007F4C:
	push	{lr}
	ldr	r0, .L407
	ldr	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L406	@cond_branch
	mov	r0, #0x1c
	and	r1, r1, r0
	cmp	r1, #0x4
	bls	.L406	@cond_branch
	ldr	r1, .L407+0x4
	mov	r0, #0x1
	strb	r0, [r1]
.L406:
	pop	{r0}
	bx	r0
.L408:
	.align	2, 0
.L407:
	.word	gLinkStatus
	.word	gShouldAdvanceLinkState
.Lfe48:
	.size	 sub_8007F4C,.Lfe48-sub_8007F4C
	.align	2, 0
	.type	 LinkTestCalcBlockChecksum,function
	.thumb_func
LinkTestCalcBlockChecksum:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	mov	r3, #0x0
	mov	r2, #0x0
	lsr	r1, r1, #0x11
	cmp	r3, r1
	bcs	.L411	@cond_branch
.L413:
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	add	r0, r3, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r1
	bcc	.L413	@cond_branch
.L411:
	add	r0, r3, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 LinkTestCalcBlockChecksum,.Lfe49-LinkTestCalcBlockChecksum
	.align	2, 0
	.type	 PrintHexDigit,function
	.thumb_func
PrintHexDigit:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	ldr	r4, .L416
	ldr	r3, [r4]
	lsl	r3, r3, #0xb
	mov	r5, #0xc0
	lsl	r5, r5, #0x13
	add	r3, r3, r5
	lsr	r2, r2, #0x13
	add	r2, r2, r1
	lsl	r2, r2, #0x1
	add	r2, r2, r3
	ldr	r1, [r4, #0x4]
	lsl	r1, r1, #0xc
	add	r0, r0, #0x1
	orr	r1, r1, r0
	strh	r1, [r2]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L417:
	.align	2, 0
.L416:
	.word	gLinkTestBGInfo
.Lfe50:
	.size	 PrintHexDigit,.Lfe50-PrintHexDigit
	.align	2, 0
	.type	 PrintHex,function
	.thumb_func
PrintHex:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff0
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r4, #0x0
	cmp	r4, r3
	bge	.L420	@cond_branch
	mov	r2, #0xf
.L422:
	mov	r0, sp
	add	r1, r0, r4
	add	r0, r5, #0
	and	r0, r0, r2
	strb	r0, [r1]
	lsr	r5, r5, #0x4
	add	r4, r4, #0x1
	cmp	r4, r3
	blt	.L422	@cond_branch
.L420:
	sub	r4, r3, #0x1
	cmp	r4, #0
	blt	.L425	@cond_branch
.L427:
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r0, [r0]
	add	r1, r6, #0
	add	r2, r7, #0
	bl	PrintHexDigit
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L427	@cond_branch
.L425:
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 PrintHex,.Lfe51-PrintHex
	.align	2, 0
	.type	 LinkCB_RequestPlayerDataExchange,function
	.thumb_func
LinkCB_RequestPlayerDataExchange:
	push	{lr}
	ldr	r0, .L431
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L430	@cond_branch
	ldr	r0, .L431+0x4
	bl	BuildSendCmd
.L430:
	ldr	r1, .L431+0x8
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L432:
	.align	2, 0
.L431:
	.word	gLinkStatus
	.word	0x2222
	.word	gLinkCallback
.Lfe52:
	.size	 LinkCB_RequestPlayerDataExchange,.Lfe52-LinkCB_RequestPlayerDataExchange
	.align	2, 0
	.type	 Task_PrintTestData,function
	.thumb_func
Task_PrintTestData:
	push	{r4, r5, r6, lr}
	ldr	r0, .L439
	ldrb	r0, [r0]
	mov	r1, #0x2
	mov	r2, #0x1
	mov	r3, #0x2
	bl	PrintHex
	ldr	r4, .L439+0x4
	ldr	r0, [r4]
	mov	r1, #0xf
	mov	r2, #0x1
	mov	r3, #0x8
	bl	PrintHex
	ldr	r0, .L439+0x8
	ldrb	r0, [r0, #0x1]
	mov	r1, #0x2
	mov	r2, #0xa
	mov	r3, #0x2
	bl	PrintHex
	ldr	r0, [r4]
	mov	r1, #0x1c
	and	r0, r0, r1
	lsr	r0, r0, #0x2
	mov	r1, #0xf
	mov	r2, #0xa
	mov	r3, #0x2
	bl	PrintHex
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xf
	mov	r2, #0xc
	mov	r3, #0x2
	bl	PrintHex
	ldr	r0, .L439+0xc
	ldrb	r0, [r0]
	mov	r1, #0x19
	mov	r2, #0x1
	mov	r3, #0x2
	bl	PrintHex
	ldr	r0, .L439+0x10
	ldrb	r0, [r0]
	mov	r1, #0x19
	mov	r2, #0x2
	mov	r3, #0x2
	bl	PrintHex
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xf
	mov	r2, #0x5
	mov	r3, #0x2
	bl	PrintHex
	ldr	r0, .L439+0x14
	ldr	r0, [r0]
	mov	r1, #0x2
	mov	r2, #0xc
	mov	r3, #0x8
	bl	PrintHex
	ldr	r0, .L439+0x18
	ldr	r0, [r0]
	mov	r1, #0x2
	mov	r2, #0xd
	mov	r3, #0x8
	bl	PrintHex
	bl	GetSioMultiSI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x19
	mov	r2, #0x5
	mov	r3, #0x1
	bl	PrintHex
	bl	IsSioMultiMaster
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x19
	mov	r2, #0x6
	mov	r3, #0x1
	bl	PrintHex
	bl	IsLinkConnectionEstablished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x19
	mov	r2, #0x7
	mov	r3, #0x1
	bl	PrintHex
	bl	HasLinkErrorOccurred
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x19
	mov	r2, #0x8
	mov	r3, #0x1
	bl	PrintHex
	mov	r6, #0x0
	mov	r5, #0x80
	lsl	r5, r5, #0x13
	ldr	r4, .L439+0x1c
.L437:
	ldrh	r0, [r4]
	lsr	r2, r5, #0x18
	mov	r1, #0xa
	mov	r3, #0x4
	bl	PrintHex
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r5, r5, r0
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L437	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L440:
	.align	2, 0
.L439:
	.word	gShouldAdvanceLinkState
	.word	gLinkStatus
	.word	gLink
	.word	gLastSendQueueCount
	.word	gLastRecvQueueCount
	.word	gLinkDebugValue1
	.word	gLinkDebugValue2
	.word	gLinkTestBlockChecksums
.Lfe53:
	.size	 Task_PrintTestData,.Lfe53-Task_PrintTestData
	.align	2, 0
	.globl	SetLinkDebugValues
	.type	 SetLinkDebugValues,function
	.thumb_func
SetLinkDebugValues:
	ldr	r2, .L442
	str	r0, [r2]
	ldr	r0, .L442+0x4
	str	r1, [r0]
	bx	lr
.L443:
	.align	2, 0
.L442:
	.word	gLinkDebugValue1
	.word	gLinkDebugValue2
.Lfe54:
	.size	 SetLinkDebugValues,.Lfe54-SetLinkDebugValues
	.align	2, 0
	.globl	sub_8008198
	.type	 sub_8008198,function
	.thumb_func
sub_8008198:
	push	{r4, lr}
	mov	r1, #0x0
	mov	r2, #0x0
	ldr	r0, .L450
	ldrb	r0, [r0]
	cmp	r1, r0
	bge	.L446	@cond_branch
	mov	r4, #0x1
	add	r3, r0, #0
.L448:
	add	r0, r4, #0
	lsl	r0, r0, r2
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r1, r0, #0x18
	add	r2, r2, #0x1
	cmp	r2, r3
	blt	.L448	@cond_branch
.L446:
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L451:
	.align	2, 0
.L450:
	.word	gSavedLinkPlayerCount
.Lfe55:
	.size	 sub_8008198,.Lfe55-sub_8008198
	.align	2, 0
	.globl	sub_80081C8
	.type	 sub_80081C8,function
	.thumb_func
sub_80081C8:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L458
	strb	r0, [r1]
	bl	GetMultiplayerId
	ldr	r1, .L458+0x4
	strb	r0, [r1]
	ldr	r4, .L458+0x8
	ldr	r3, .L458+0xc
	mov	r2, #0x3
.L456:
	add	r0, r3, #0
	add	r1, r4, #0
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r4, r4, #0x1c
	add	r3, r3, #0x1c
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L456	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	gSavedLinkPlayerCount
	.word	gSavedMultiplayerId
	.word	gLinkPlayers
	.word	gSavedLinkPlayers
.Lfe56:
	.size	 sub_80081C8,.Lfe56-sub_80081C8
	.align	2, 0
	.globl	sub_800820C
	.type	 sub_800820C,function
	.thumb_func
sub_800820C:
	ldr	r0, .L461
	ldrb	r0, [r0]
	bx	lr
.L462:
	.align	2, 0
.L461:
	.word	gSavedLinkPlayerCount
.Lfe57:
	.size	 sub_800820C,.Lfe57-sub_800820C
	.align	2, 0
	.globl	sub_8008218
	.type	 sub_8008218,function
	.thumb_func
sub_8008218:
	ldr	r0, .L464
	ldrb	r0, [r0]
	bx	lr
.L465:
	.align	2, 0
.L464:
	.word	gSavedMultiplayerId
.Lfe58:
	.size	 sub_8008218,.Lfe58-sub_8008218
	.align	2, 0
	.globl	sub_8008224
	.type	 sub_8008224,function
	.thumb_func
sub_8008224:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r0, .L476
	ldrb	r2, [r0]
	add	r6, r0, #0
	cmp	r5, r2
	bge	.L468	@cond_branch
	ldr	r1, .L476+0x4
	ldr	r0, .L476+0x8
	add	r4, r0, #0x4
	add	r3, r1, #0x4
.L470:
	ldr	r1, [r3]
	ldr	r0, [r4]
	cmp	r1, r0
	bne	.L469	@cond_branch
	add	r5, r5, #0x1
.L469:
	add	r4, r4, #0x1c
	add	r3, r3, #0x1c
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L470	@cond_branch
.L468:
	ldrb	r6, [r6]
	cmp	r5, r6
	beq	.L473	@cond_branch
	mov	r0, #0x0
	b	.L475
.L477:
	.align	2, 0
.L476:
	.word	gSavedLinkPlayerCount
	.word	gLinkPlayers
	.word	gSavedLinkPlayers
.L473:
	mov	r0, #0x1
.L475:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 sub_8008224,.Lfe59-sub_8008224
	.align	2, 0
	.globl	sub_800826C
	.type	 sub_800826C,function
	.thumb_func
sub_800826C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	ldr	r0, .L486
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L480	@cond_branch
	ldr	r6, .L486+0x4
	ldr	r5, .L486+0x8
	mov	r0, #0x8
	add	r0, r0, r6
	mov	r8, r0
	add	r7, r5, #0
	add	r7, r7, #0x8
.L482:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r2, r0, #0x2
	add	r1, r6, #0x4
	add	r1, r2, r1
	add	r0, r5, #0x4
	add	r0, r2, r0
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L484	@cond_branch
	mov	r1, r8
	add	r0, r2, r1
	add	r1, r2, r7
	bl	StringCompareWithoutExtCtrlCodes
	cmp	r0, #0
	beq	.L481	@cond_branch
.L484:
	ldr	r1, .L486+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	bl	CloseLink
	ldr	r0, .L486+0x10
	bl	SetMainCallback2
.L481:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L486
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L482	@cond_branch
.L480:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L487:
	.align	2, 0
.L486:
	.word	gSavedLinkPlayerCount
	.word	gSavedLinkPlayers
	.word	gLinkPlayers
	.word	gLinkErrorOccurred
	.word	CB2_LinkError
.Lfe60:
	.size	 sub_800826C,.Lfe60-sub_800826C
	.align	2, 0
	.globl	sub_80082EC
	.type	 sub_80082EC,function
	.thumb_func
sub_80082EC:
	ldr	r0, .L489
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L489+0x4
	strb	r1, [r0]
	bx	lr
.L490:
	.align	2, 0
.L489:
	.word	gSavedLinkPlayerCount
	.word	gSavedMultiplayerId
.Lfe61:
	.size	 sub_80082EC,.Lfe61-sub_80082EC
	.align	2, 0
	.globl	GetLinkPlayerCount_2
	.type	 GetLinkPlayerCount_2,function
	.thumb_func
GetLinkPlayerCount_2:
	ldr	r0, .L492
	ldr	r0, [r0]
	mov	r1, #0x1c
	and	r0, r0, r1
	lsr	r0, r0, #0x2
	bx	lr
.L493:
	.align	2, 0
.L492:
	.word	gLinkStatus
.Lfe62:
	.size	 GetLinkPlayerCount_2,.Lfe62-GetLinkPlayerCount_2
	.align	2, 0
	.globl	IsLinkMaster
	.type	 IsLinkMaster,function
	.thumb_func
IsLinkMaster:
	ldr	r0, .L495
	ldr	r0, [r0]
	lsr	r0, r0, #0x5
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L496:
	.align	2, 0
.L495:
	.word	gLinkStatus
.Lfe63:
	.size	 IsLinkMaster,.Lfe63-IsLinkMaster
	.align	2, 0
	.globl	GetDummy2
	.type	 GetDummy2,function
	.thumb_func
GetDummy2:
	ldr	r0, .L498
	ldrb	r0, [r0]
	bx	lr
.L499:
	.align	2, 0
.L498:
	.word	sDummy2
.Lfe64:
	.size	 GetDummy2,.Lfe64-GetDummy2
	.align	2, 0
	.globl	sub_800832C
	.type	 sub_800832C,function
	.thumb_func
sub_800832C:
	push	{lr}
	ldr	r2, .L502
	ldr	r1, [r2]
	cmp	r1, #0
	bne	.L501	@cond_branch
	ldr	r0, .L502+0x4
	str	r0, [r2]
	ldr	r0, .L502+0x8
	strb	r1, [r0]
.L501:
	pop	{r0}
	bx	r0
.L503:
	.align	2, 0
.L502:
	.word	gLinkCallback
	.word	sub_8008350
	.word	gLinkDummyBool
.Lfe65:
	.size	 sub_800832C,.Lfe65-sub_800832C
	.align	2, 0
	.type	 sub_8008350,function
	.thumb_func
sub_8008350:
	push	{lr}
	ldr	r0, .L506
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L505	@cond_branch
	ldr	r0, .L506+0x4
	bl	BuildSendCmd
	ldr	r1, .L506+0x8
	ldr	r0, .L506+0xc
	str	r0, [r1]
.L505:
	pop	{r0}
	bx	r0
.L507:
	.align	2, 0
.L506:
	.word	gLastRecvQueueCount
	.word	0x5fff
	.word	gLinkCallback
	.word	sub_800837C
.Lfe66:
	.size	 sub_8008350,.Lfe66-sub_8008350
	.align	2, 0
	.type	 sub_800837C,function
	.thumb_func
sub_800837C:
	push	{r4, lr}
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0x0
	mov	r1, #0x0
	cmp	r3, r2
	bge	.L510	@cond_branch
	ldr	r4, .L516
.L512:
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L511	@cond_branch
	add	r3, r3, #0x1
.L511:
	add	r1, r1, #0x1
	cmp	r1, r2
	blt	.L512	@cond_branch
.L510:
	cmp	r3, r2
	bne	.L515	@cond_branch
	ldr	r2, .L516+0x4
	ldrh	r1, [r2]
	ldr	r0, .L516+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L516+0xc
	mov	r4, #0x1
	strb	r4, [r0]
	bl	CloseLink
	ldr	r1, .L516+0x10
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L516+0x14
	strb	r4, [r0]
.L515:
	pop	{r4}
	pop	{r0}
	bx	r0
.L517:
	.align	2, 0
.L516:
	.word	u8_array_3002B78
	.word	gBattleTypeFlags
	.word	0xffdf
	.word	gLinkVSyncDisabled
	.word	gLinkCallback
	.word	gLinkDummyBool
.Lfe67:
	.size	 sub_800837C,.Lfe67-sub_800837C
	.align	2, 0
	.type	 sub_80083E0,function
	.thumb_func
sub_80083E0:
	push	{r4, r5, lr}
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0x0
	cmp	r1, r3
	bge	.L520	@cond_branch
	ldr	r5, .L529
	ldr	r4, .L529+0x4
.L522:
	ldrh	r0, [r4, #0x1a]
	cmp	r0, #0x1
	beq	.L528	@cond_branch
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L521	@cond_branch
.L528:
	add	r1, r1, #0x1
.L521:
	add	r4, r4, #0x1c
	add	r2, r2, #0x1
	cmp	r2, r3
	blt	.L522	@cond_branch
.L520:
	cmp	r1, r3
	bne	.L527	@cond_branch
	ldr	r2, .L529+0x8
	ldrh	r1, [r2]
	ldr	r0, .L529+0xc
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L529+0x10
	mov	r4, #0x1
	strb	r4, [r0]
	bl	CloseLink
	ldr	r1, .L529+0x14
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L529+0x18
	strb	r4, [r0]
.L527:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	u8_array_3002B78
	.word	gLinkPlayers
	.word	gBattleTypeFlags
	.word	0xffdf
	.word	gLinkVSyncDisabled
	.word	gLinkCallback
	.word	gLinkDummyBool
.Lfe68:
	.size	 sub_80083E0,.Lfe68-sub_80083E0
	.align	2, 0
	.type	 sub_8008454,function
	.thumb_func
sub_8008454:
	push	{lr}
	ldr	r0, .L533
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L532	@cond_branch
	ldr	r0, .L533+0x4
	bl	BuildSendCmd
	ldr	r1, .L533+0x8
	ldr	r0, .L533+0xc
	str	r0, [r1]
.L532:
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gLastRecvQueueCount
	.word	0x5fff
	.word	gLinkCallback
	.word	sub_80083E0
.Lfe69:
	.size	 sub_8008454,.Lfe69-sub_8008454
	.align	2, 0
	.globl	sub_8008480
	.type	 sub_8008480,function
	.thumb_func
sub_8008480:
	push	{lr}
	ldr	r2, .L537
	ldr	r1, [r2]
	cmp	r1, #0
	bne	.L536	@cond_branch
	ldr	r0, .L537+0x4
	str	r0, [r2]
	ldr	r0, .L537+0x8
	strb	r1, [r0]
.L536:
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	gLinkCallback
	.word	sub_8008454
	.word	gLinkDummyBool
.Lfe70:
	.size	 sub_8008480,.Lfe70-sub_8008480
	.align	2, 0
	.globl	sub_80084A4
	.type	 sub_80084A4,function
	.thumb_func
sub_80084A4:
	push	{lr}
	ldr	r1, .L541
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L540	@cond_branch
	ldr	r0, .L541+0x4
	str	r0, [r1]
.L540:
	ldr	r1, .L541+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L542:
	.align	2, 0
.L541:
	.word	gLinkCallback
	.word	sub_80084C8
	.word	gLinkDummyBool
.Lfe71:
	.size	 sub_80084A4,.Lfe71-sub_80084A4
	.align	2, 0
	.type	 sub_80084C8,function
	.thumb_func
sub_80084C8:
	push	{lr}
	ldr	r0, .L545
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L544	@cond_branch
	ldr	r0, .L545+0x4
	bl	BuildSendCmd
	ldr	r1, .L545+0x8
	ldr	r0, .L545+0xc
	str	r0, [r1]
.L544:
	pop	{r0}
	bx	r0
.L546:
	.align	2, 0
.L545:
	.word	gLastRecvQueueCount
	.word	0x2ffe
	.word	gLinkCallback
	.word	sub_80084F4
.Lfe72:
	.size	 sub_80084C8,.Lfe72-sub_80084C8
	.align	2, 0
	.type	 sub_80084F4,function
	.thumb_func
sub_80084F4:
	push	{r4, lr}
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r2
	bcs	.L549	@cond_branch
	ldr	r3, .L559
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L549	@cond_branch
.L550:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L549	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L550	@cond_branch
.L549:
	cmp	r1, r2
	bne	.L553	@cond_branch
	mov	r1, #0x0
	ldr	r4, .L559+0x4
	ldr	r3, .L559
	mov	r2, #0x0
.L557:
	add	r0, r1, r3
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L557	@cond_branch
	mov	r0, #0x0
	str	r0, [r4]
.L553:
	pop	{r4}
	pop	{r0}
	bx	r0
.L560:
	.align	2, 0
.L559:
	.word	u8_array_3002B70
	.word	gLinkCallback
.Lfe73:
	.size	 sub_80084F4,.Lfe73-sub_80084F4
	.align	2, 0
	.type	 CheckErrorStatus,function
	.thumb_func
CheckErrorStatus:
	push	{lr}
	ldr	r0, .L565
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L562	@cond_branch
	ldr	r0, .L565+0x4
	ldr	r1, [r0]
	mov	r0, #0xfe
	lsl	r0, r0, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L562	@cond_branch
	ldr	r0, .L565+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L564	@cond_branch
	ldr	r0, .L565+0xc
	str	r1, [r0]
	ldr	r1, .L565+0x10
	ldr	r0, .L565+0x14
	ldrb	r0, [r0]
	str	r0, [r1]
	ldr	r1, .L565+0x18
	ldr	r0, .L565+0x1c
	ldrb	r0, [r0]
	str	r0, [r1]
	ldr	r0, .L565+0x20
	bl	SetMainCallback2
.L564:
	ldr	r1, .L565+0x24
	mov	r0, #0x1
	strb	r0, [r1]
	bl	CloseLink
.L562:
	pop	{r0}
	bx	r0
.L566:
	.align	2, 0
.L565:
	.word	gLinkOpen
	.word	gLinkStatus
	.word	gSuppressLinkErrorMessage
	.word	sErrorLinkStatus
	.word	sErrorLastRecvQueueCount
	.word	gLastRecvQueueCount
	.word	sErrorLastSendQueueCount
	.word	gLastSendQueueCount
	.word	CB2_LinkError
	.word	gLinkErrorOccurred
.Lfe74:
	.size	 CheckErrorStatus,.Lfe74-CheckErrorStatus
	.align	2, 0
	.globl	CB2_LinkError
	.type	 CB2_LinkError,function
	.thumb_func
CB2_LinkError:
	push	{r4, lr}
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetPaletteFadeControl
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	bl	ResetTasks
	ldr	r0, .L568
	bl	SetVBlankCallback
	ldr	r4, .L568+0x4
	add	r0, r4, #0
	bl	SetUpWindowConfig
	add	r0, r4, #0
	bl	InitMenuWindow
	bl	MenuZeroFillScreen
	ldr	r0, .L568+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	sub	r0, r0, #0x40
	strh	r1, [r0]
	sub	r0, r0, #0x2
	strh	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x13
	mov	r3, #0xa0
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r2]
	ldr	r0, .L568+0xc
	strb	r1, [r0]
	ldr	r0, .L568+0x10
	mov	r1, #0x0
	bl	CreateTask
	bl	StopMapMusic
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	ldr	r0, .L568+0x14
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L569:
	.align	2, 0
.L568:
	.word	VBlankCB_LinkTest
	.word	gWindowConfig_81E7198
	.word	0x4000052
	.word	gSoftResetDisabled
	.word	Task_DestroySelf
	.word	CB2_PrintErrorMessage
.Lfe75:
	.size	 CB2_LinkError,.Lfe75-CB2_LinkError
	.align	2, 0
	.type	 CB2_PrintErrorMessage,function
	.thumb_func
CB2_PrintErrorMessage:
	push	{lr}
	add	sp, sp, #0xffffffc0
	ldr	r0, .L580
	ldr	r1, .L580+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1e
	beq	.L574	@cond_branch
	cmp	r0, #0x1e
	bgt	.L578	@cond_branch
	cmp	r0, #0
	beq	.L572	@cond_branch
	b	.L571
.L581:
	.align	2, 0
.L580:
	.word	gMain
	.word	0x43c
.L578:
	cmp	r0, #0x3c
	beq	.L574	@cond_branch
	cmp	r0, #0x5a
	beq	.L575	@cond_branch
	b	.L571
.L572:
	ldr	r0, .L582
	mov	r1, #0x14
	mov	r2, #0x38
	mov	r3, #0x1
	bl	MenuPrint_PixelCoords
	b	.L571
.L583:
	.align	2, 0
.L582:
	.word	gMultiText_LinkError
.L574:
	mov	r0, #0x16
	bl	PlaySE
	b	.L571
.L575:
	mov	r0, #0x16
	bl	PlaySE
.L571:
	ldr	r0, .L584
	ldr	r2, .L584+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xc8
	beq	.L579	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L579:
	add	sp, sp, #0x40
	pop	{r0}
	bx	r0
.L585:
	.align	2, 0
.L584:
	.word	gMain
	.word	0x43c
.Lfe76:
	.size	 CB2_PrintErrorMessage,.Lfe76-CB2_PrintErrorMessage
	.align	2, 0
	.globl	GetSioMultiSI
	.type	 GetSioMultiSI,function
	.thumb_func
GetSioMultiSI:
	ldr	r0, .L587
	ldrh	r0, [r0]
	lsr	r0, r0, #0x2
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L588:
	.align	2, 0
.L587:
	.word	0x4000128
.Lfe77:
	.size	 GetSioMultiSI,.Lfe77-GetSioMultiSI
	.align	2, 0
	.type	 IsSioMultiMaster,function
	.thumb_func
IsSioMultiMaster:
	push	{lr}
	mov	r3, #0x0
	ldr	r2, .L591
	ldrh	r1, [r2]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L590	@cond_branch
	ldrh	r1, [r2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L590	@cond_branch
	mov	r3, #0x1
.L590:
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L592:
	.align	2, 0
.L591:
	.word	0x4000128
.Lfe78:
	.size	 IsSioMultiMaster,.Lfe78-IsSioMultiMaster
	.align	2, 0
	.globl	IsLinkConnectionEstablished
	.type	 IsLinkConnectionEstablished,function
	.thumb_func
IsLinkConnectionEstablished:
	ldr	r0, .L594
	ldr	r0, [r0]
	lsr	r0, r0, #0x6
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L595:
	.align	2, 0
.L594:
	.word	gLinkStatus
.Lfe79:
	.size	 IsLinkConnectionEstablished,.Lfe79-IsLinkConnectionEstablished
	.align	2, 0
	.globl	SetSuppressLinkErrorMessage
	.type	 SetSuppressLinkErrorMessage,function
	.thumb_func
SetSuppressLinkErrorMessage:
	ldr	r1, .L597
	strb	r0, [r1]
	bx	lr
.L598:
	.align	2, 0
.L597:
	.word	gSuppressLinkErrorMessage
.Lfe80:
	.size	 SetSuppressLinkErrorMessage,.Lfe80-SetSuppressLinkErrorMessage
	.align	2, 0
	.globl	HasLinkErrorOccurred
	.type	 HasLinkErrorOccurred,function
	.thumb_func
HasLinkErrorOccurred:
	ldr	r0, .L600
	ldrb	r0, [r0]
	bx	lr
.L601:
	.align	2, 0
.L600:
	.word	gLinkErrorOccurred
.Lfe81:
	.size	 HasLinkErrorOccurred,.Lfe81-HasLinkErrorOccurred
	.align	2, 0
	.type	 DisableSerial,function
	.thumb_func
DisableSerial:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L603
	ldr	r2, .L603+0x4
	ldrh	r5, [r2]
	strh	r5, [r0]
	mov	r4, #0x0
	strh	r4, [r2]
	ldr	r3, .L603+0x8
	ldrh	r1, [r3]
	ldr	r0, .L603+0xc
	and	r0, r0, r1
	strh	r0, [r3]
	strh	r5, [r2]
	ldr	r0, .L603+0x10
	strh	r4, [r0]
	sub	r0, r0, #0x1a
	strh	r4, [r0]
	ldr	r1, .L603+0x14
	mov	r0, #0xc0
	strh	r0, [r1]
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L603+0x18
	ldr	r2, .L603+0x1c
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L604:
	.align	2, 0
.L603:
	.word	gLinkSavedIme
	.word	0x4000208
	.word	0x4000200
	.word	0xff3f
	.word	0x4000128
	.word	0x4000202
	.word	gLink
	.word	0x50003f0
.Lfe82:
	.size	 DisableSerial,.Lfe82-DisableSerial
	.align	2, 0
	.type	 EnableSerial,function
	.thumb_func
EnableSerial:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L606
	ldr	r3, .L606+0x4
	ldrh	r2, [r3]
	mov	r4, #0x0
	strh	r4, [r3]
	ldr	r5, .L606+0x8
	ldrh	r1, [r5]
	ldr	r0, .L606+0xc
	and	r0, r0, r1
	strh	r0, [r5]
	strh	r2, [r3]
	ldr	r0, .L606+0x10
	strh	r4, [r0]
	ldr	r2, .L606+0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	add	r0, r1, #0
	strh	r0, [r2]
	ldrh	r0, [r2]
	ldr	r7, .L606+0x18
	add	r1, r7, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r2, [r3]
	strh	r2, [r6]
	strh	r4, [r3]
	ldrh	r0, [r5]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r5]
	strh	r2, [r3]
	ldr	r0, .L606+0x1c
	strh	r4, [r0]
	mov	r5, #0x0
	str	r5, [sp]
	ldr	r1, .L606+0x20
	ldr	r2, .L606+0x24
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L606+0x28
	strb	r4, [r0]
	ldr	r0, .L606+0x2c
	strh	r5, [r0]
	ldr	r0, .L606+0x30
	strh	r5, [r0]
	ldr	r0, .L606+0x34
	strb	r4, [r0]
	ldr	r0, .L606+0x38
	strb	r4, [r0]
	ldr	r0, .L606+0x3c
	strb	r4, [r0]
	ldr	r0, .L606+0x40
	strb	r4, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L607:
	.align	2, 0
.L606:
	.word	gLinkSavedIme
	.word	0x4000208
	.word	0x4000200
	.word	0xff3f
	.word	0x4000134
	.word	0x4000128
	.word	0x4003
	.word	0x400012a
	.word	gLink
	.word	0x50003f0
	.word	sNumVBlanksWithoutSerialIntr
	.word	sSendNonzeroCheck
	.word	sRecvNonzeroCheck
	.word	sChecksumAvailable
	.word	sHandshakePlayerCount
	.word	gLastSendQueueCount
	.word	gLastRecvQueueCount
.Lfe83:
	.size	 EnableSerial,.Lfe83-EnableSerial
	.align	2, 0
	.globl	ResetSerial
	.type	 ResetSerial,function
	.thumb_func
ResetSerial:
	push	{lr}
	bl	EnableSerial
	bl	DisableSerial
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 ResetSerial,.Lfe84-ResetSerial
	.align	2, 0
	.globl	LinkMain1
	.type	 LinkMain1,function
	.thumb_func
LinkMain1:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r0, .L632
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x4
	bhi	.L610	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L632+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L633:
	.align	2, 0
.L632:
	.word	gLink
	.word	.L623
	.align	2, 0
	.align	2, 0
.L623:
	.word	.L611
	.word	.L612
	.word	.L614
	.word	.L621
	.word	.L622
.L611:
	bl	DisableSerial
	ldr	r1, .L634
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	b	.L610
.L635:
	.align	2, 0
.L634:
	.word	gLink
.L612:
	ldrb	r0, [r4]
	cmp	r0, #0x1
	bne	.L610	@cond_branch
	bl	EnableSerial
	ldr	r1, .L636
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	b	.L610
.L637:
	.align	2, 0
.L636:
	.word	gLink
.L614:
	ldrb	r1, [r4]
	cmp	r1, #0x1
	beq	.L616	@cond_branch
	cmp	r1, #0x2
	beq	.L618	@cond_branch
	bl	CheckMasterOrSlave
	b	.L610
.L616:
	ldr	r2, .L638
	ldrb	r0, [r2]
	cmp	r0, #0x8
	bne	.L610	@cond_branch
	ldrb	r0, [r2, #0x3]
	cmp	r0, #0x1
	bls	.L610	@cond_branch
	strb	r1, [r2, #0xe]
	b	.L610
.L639:
	.align	2, 0
.L638:
	.word	gLink
.L618:
	ldr	r0, .L640
	mov	r1, #0x0
	strb	r1, [r0, #0x1]
	ldr	r0, .L640+0x4
	strh	r1, [r0]
	b	.L610
.L641:
	.align	2, 0
.L640:
	.word	gLink
	.word	0x400012a
.L621:
	bl	InitTimer
	ldr	r1, .L642
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
.L622:
	add	r0, r5, #0
	bl	EnqueueSendCmd
	add	r0, r6, #0
	bl	DequeueRecvCmds
.L610:
	mov	r0, #0x0
	strb	r0, [r4]
	ldr	r1, .L642
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x2
	orr	r2, r2, r0
	ldrb	r0, [r1]
	cmp	r0, #0x8
	bne	.L625	@cond_branch
	mov	r0, #0x20
	orr	r2, r2, r0
.L625:
	ldrb	r0, [r1, #0xc]
	lsl	r3, r0, #0x8
	ldrb	r0, [r1, #0xf]
	lsl	r4, r0, #0x9
	ldrb	r0, [r1, #0x10]
	lsl	r5, r0, #0xc
	ldrb	r0, [r1, #0x11]
	lsl	r6, r0, #0xd
	ldrb	r0, [r1, #0x12]
	lsl	r7, r0, #0xe
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x4
	bne	.L626	@cond_branch
	mov	r0, #0x40
	orr	r0, r0, r3
	orr	r0, r0, r2
	b	.L631
.L643:
	.align	2, 0
.L642:
	.word	gLink
.L626:
	add	r0, r2, #0
	orr	r0, r0, r3
.L631:
	orr	r0, r0, r4
	orr	r0, r0, r5
	orr	r0, r0, r6
	orr	r0, r0, r7
	add	r2, r0, #0
	ldrb	r3, [r1, #0x13]
	cmp	r3, #0x1
	bne	.L628	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	orr	r2, r2, r0
.L628:
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0x3
	bls	.L629	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	orr	r2, r2, r0
.L629:
	add	r1, r2, #0
	cmp	r3, #0x2
	bne	.L630	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	orr	r1, r1, r0
.L630:
	add	r0, r1, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 LinkMain1,.Lfe85-LinkMain1
	.align	2, 0
	.type	 CheckMasterOrSlave,function
	.thumb_func
CheckMasterOrSlave:
	push	{lr}
	ldr	r0, .L647
	ldr	r1, [r0]
	mov	r0, #0xc
	and	r1, r1, r0
	ldr	r2, .L647+0x4
	cmp	r1, #0x8
	bne	.L645	@cond_branch
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L645	@cond_branch
	strb	r1, [r2]
	b	.L646
.L648:
	.align	2, 0
.L647:
	.word	0x4000128
	.word	gLink
.L645:
	mov	r0, #0x0
	strb	r0, [r2]
.L646:
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 CheckMasterOrSlave,.Lfe86-CheckMasterOrSlave
	.align	2, 0
	.type	 InitTimer,function
	.thumb_func
InitTimer:
	push	{r4, lr}
	ldr	r0, .L651
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L650	@cond_branch
	ldr	r1, .L651+0x4
	ldr	r2, .L651+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0x41
	strh	r0, [r1]
	ldr	r0, .L651+0xc
	ldr	r2, .L651+0x10
	ldrh	r4, [r2]
	strh	r4, [r0]
	mov	r0, #0x0
	strh	r0, [r2]
	ldr	r3, .L651+0x14
	ldrh	r0, [r3]
	mov	r1, #0x40
	orr	r0, r0, r1
	strh	r0, [r3]
	strh	r4, [r2]
.L650:
	pop	{r4}
	pop	{r0}
	bx	r0
.L652:
	.align	2, 0
.L651:
	.word	gLink
	.word	0x400010c
	.word	0xff3b
	.word	gLinkSavedIme
	.word	0x4000208
	.word	0x4000200
.Lfe87:
	.size	 InitTimer,.Lfe87-InitTimer
	.align	2, 0
	.type	 EnqueueSendCmd,function
	.thumb_func
EnqueueSendCmd:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r3, r0, #0
	ldr	r2, .L663
	ldr	r1, .L663+0x4
	ldrh	r0, [r1]
	strh	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L663+0x8
	ldr	r4, .L663+0xc
	add	r0, r1, r4
	ldrb	r4, [r0]
	add	r6, r1, #0
	cmp	r4, #0x31
	bhi	.L654	@cond_branch
	mov	r1, #0xce
	lsl	r1, r1, #0x2
	add	r0, r6, r1
	ldrb	r0, [r0]
	add	r0, r4, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x31
	bls	.L655	@cond_branch
	sub	r0, r0, #0x32
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L655:
	mov	r2, #0x0
	ldr	r4, .L663+0x10
	mov	r9, r4
	ldr	r1, .L663+0x14
	mov	sl, r1
	lsl	r5, r0, #0x1
	mov	r0, #0x18
	add	r0, r0, r6
	mov	r8, r0
	mov	ip, r2
	mov	r7, #0x64
.L659:
	ldrh	r0, [r4]
	ldrh	r1, [r3]
	orr	r0, r0, r1
	strh	r0, [r4]
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r5, r0
	add	r0, r0, r8
	strh	r1, [r0]
	mov	r1, ip
	strh	r1, [r3]
	add	r3, r3, #0x2
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L659	@cond_branch
	b	.L661
.L664:
	.align	2, 0
.L663:
	.word	gLinkSavedIme
	.word	0x4000208
	.word	gLink
	.word	0x339
	.word	sSendNonzeroCheck
	.word	gLastSendQueueCount
.L654:
	mov	r0, #0x1
	strb	r0, [r6, #0x12]
	ldr	r2, .L665
	mov	r9, r2
	ldr	r4, .L665+0x4
	mov	sl, r4
.L661:
	mov	r1, r9
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L662	@cond_branch
	ldr	r2, .L665+0x8
	add	r0, r6, r2
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strb	r1, [r0]
	mov	r4, r9
	strh	r2, [r4]
.L662:
	ldr	r1, .L665+0xc
	ldr	r2, .L665+0x10
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldr	r4, .L665+0x8
	add	r0, r6, r4
	ldrb	r0, [r0]
	mov	r1, sl
	strb	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L666:
	.align	2, 0
.L665:
	.word	sSendNonzeroCheck
	.word	gLastSendQueueCount
	.word	0x339
	.word	0x4000208
	.word	gLinkSavedIme
.Lfe88:
	.size	 EnqueueSendCmd,.Lfe88-EnqueueSendCmd
	.align	2, 0
	.type	 DequeueRecvCmds,function
	.thumb_func
DequeueRecvCmds:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	ip, r0
	ldr	r2, .L691
	ldr	r1, .L691+0x4
	ldrh	r0, [r1]
	strh	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L691+0x8
	ldr	r3, .L691+0xc
	add	r0, r1, r3
	ldrb	r0, [r0]
	add	r7, r1, #0
	cmp	r0, #0
	bne	.L668	@cond_branch
	mov	r3, #0x0
	mov	r8, r7
	ldrb	r6, [r7, #0x3]
.L672:
	mov	r2, #0x0
	add	r5, r3, #0x1
	cmp	r2, r6
	bcs	.L671	@cond_branch
	lsl	r0, r3, #0x3
	mov	r1, ip
	add	r3, r0, r1
	mov	r4, #0x0
	mov	r0, r8
	ldrb	r1, [r0, #0x3]
.L676:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	strh	r4, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r1
	bcc	.L676	@cond_branch
.L671:
	lsl	r0, r5, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x7
	bls	.L672	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7, #0xc]
	b	.L679
.L692:
	.align	2, 0
.L691:
	.word	gLinkSavedIme
	.word	0x4000208
	.word	gLink
	.word	0xfbd
.L668:
	mov	r3, #0x0
	ldrb	r1, [r7, #0x3]
	mov	r9, r1
	mov	r2, #0xcf
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	mov	r8, r2
	mov	sl, r7
.L683:
	mov	r2, #0x0
	add	r5, r3, #0x1
	cmp	r2, r9
	bcs	.L682	@cond_branch
	lsl	r0, r3, #0x3
	mov	r1, ip
	add	r6, r0, r1
	ldr	r0, .L693
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	mov	r0, sl
	ldrb	r4, [r0, #0x3]
	mov	r0, #0x64
	mul	r0, r0, r3
	add	r3, r1, r0
.L687:
	lsl	r0, r2, #0x1
	add	r1, r0, r6
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x5
	add	r0, r3, r0
	add	r0, r0, r8
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L687	@cond_branch
.L682:
	lsl	r0, r5, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x7
	bls	.L683	@cond_branch
	add	r2, r7, #0
	ldr	r3, .L693+0x4
	add	r1, r2, r3
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r0, .L693+0x8
	add	r2, r2, r0
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x31
	bls	.L690	@cond_branch
	strb	r3, [r2]
.L690:
	strb	r3, [r7, #0xc]
.L679:
	ldr	r1, .L693+0xc
	ldr	r2, .L693+0x10
	ldrh	r0, [r2]
	strh	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L694:
	.align	2, 0
.L693:
	.word	gLink+0xfbc
	.word	0xfbd
	.word	0xfbc
	.word	0x4000208
	.word	gLinkSavedIme
.Lfe89:
	.size	 DequeueRecvCmds,.Lfe89-DequeueRecvCmds
	.align	2, 0
	.globl	LinkVSync
	.type	 LinkVSync,function
	.thumb_func
LinkVSync:
	push	{r4, lr}
	ldr	r3, .L712
	ldrb	r4, [r3]
	cmp	r4, #0
	beq	.L696	@cond_branch
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0x2
	beq	.L702	@cond_branch
	cmp	r0, #0x4
	bne	.L695	@cond_branch
	mov	r0, #0xd
	ldrsb	r0, [r3, r0]
	cmp	r0, #0x8
	bgt	.L700	@cond_branch
	ldrb	r0, [r3, #0x10]
	cmp	r0, #0x1
	beq	.L702	@cond_branch
	mov	r0, #0x1
	strb	r0, [r3, #0x13]
	b	.L695
.L713:
	.align	2, 0
.L712:
	.word	gLink
.L700:
	ldrb	r0, [r3, #0x13]
	cmp	r0, #0x1
	beq	.L695	@cond_branch
	mov	r0, #0x0
	strb	r0, [r3, #0xd]
.L702:
	bl	StartTransfer
	b	.L695
.L696:
	ldrb	r2, [r3, #0x1]
	cmp	r2, #0x4
	beq	.L708	@cond_branch
	cmp	r2, #0x2
	bne	.L695	@cond_branch
.L708:
	ldr	r1, .L714
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xa
	bls	.L695	@cond_branch
	cmp	r2, #0x4
	bne	.L710	@cond_branch
	mov	r0, #0x2
	strb	r0, [r3, #0x13]
.L710:
	cmp	r2, #0x2
	bne	.L695	@cond_branch
	strb	r4, [r3, #0x3]
	strb	r4, [r3, #0xf]
.L695:
	pop	{r4}
	pop	{r0}
	bx	r0
.L715:
	.align	2, 0
.L714:
	.word	sNumVBlanksWithoutSerialIntr
.Lfe90:
	.size	 LinkVSync,.Lfe90-LinkVSync
	.align	2, 0
	.globl	Timer3Intr
	.type	 Timer3Intr,function
	.thumb_func
Timer3Intr:
	push	{lr}
	bl	StopTimer
	bl	StartTransfer
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 Timer3Intr,.Lfe91-Timer3Intr
	.align	2, 0
	.globl	SerialCB
	.type	 SerialCB,function
	.thumb_func
SerialCB:
	push	{r4, lr}
	ldr	r4, .L727
	ldr	r0, .L727+0x4
	ldr	r1, [r0]
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1e
	strb	r0, [r4, #0x2]
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x2
	beq	.L720	@cond_branch
	cmp	r0, #0x4
	bne	.L718	@cond_branch
	lsl	r0, r1, #0x19
	lsr	r0, r0, #0x1f
	strb	r0, [r4, #0x10]
	bl	DoRecv
	bl	DoSend
	bl	SendRecvDone
	b	.L718
.L728:
	.align	2, 0
.L727:
	.word	gLink
	.word	0x4000128
.L720:
	bl	DoHandshake
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L718	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L722	@cond_branch
	mov	r0, #0x3
	strb	r0, [r4, #0x1]
	mov	r0, #0x8
	strb	r0, [r4, #0xd]
	b	.L718
.L722:
	mov	r0, #0x4
	strb	r0, [r4, #0x1]
.L718:
	ldr	r3, .L729
	ldrb	r0, [r3, #0xd]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r3, #0xd]
	ldr	r1, .L729+0x4
	strb	r2, [r1]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x8
	bne	.L726	@cond_branch
	ldr	r0, .L729+0x8
	ldr	r2, .L729+0xc
	add	r1, r3, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
.L726:
	pop	{r4}
	pop	{r0}
	bx	r0
.L730:
	.align	2, 0
.L729:
	.word	gLink
	.word	sNumVBlanksWithoutSerialIntr
	.word	gLastRecvQueueCount
	.word	0xfbd
.Lfe92:
	.size	 SerialCB,.Lfe92-SerialCB
	.align	2, 0
	.type	 StartTransfer,function
	.thumb_func
StartTransfer:
	ldr	r0, .L732
	ldrh	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
	bx	lr
.L733:
	.align	2, 0
.L732:
	.word	0x4000128
.Lfe93:
	.size	 StartTransfer,.Lfe93-StartTransfer
	.align	2, 0
	.type	 DoHandshake,function
	.thumb_func
DoHandshake:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r5, #0x0
	ldr	r6, .L753
	ldr	r0, .L753+0x4
	ldrb	r1, [r0, #0xe]
	add	r7, r0, #0
	cmp	r1, #0x1
	bne	.L735	@cond_branch
	ldr	r1, .L753+0x8
	ldr	r2, .L753+0xc
	b	.L751
.L754:
	.align	2, 0
.L753:
	.word	0xffff
	.word	gLink
	.word	0x400012a
	.word	0x8fff
.L735:
	ldr	r1, .L755
	ldr	r2, .L755+0x4
.L751:
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r2, .L755+0x8
	ldr	r3, .L755+0xc
	ldr	r0, [r3]		@ created by thumb_load_double_from_address
	ldr	r1, [r3, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [r3]
	str	r1, [r3, #0x4]
	strb	r0, [r2, #0xa]
	mov	r4, #0x0
	ldr	r0, .L755+0x10
	mov	r9, r0
	mov	r8, r2
	ldr	r2, .L755+0x14
	ldr	r1, .L755+0x18
	mov	ip, r1
.L740:
	lsl	r0, r4, #0x1
	add	r0, r0, r8
	ldrh	r3, [r0]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	ldr	r1, .L755+0x4
	cmp	r0, r1
	beq	.L742	@cond_branch
	add	r0, r3, #0
	cmp	r0, r2
	bne	.L741	@cond_branch
.L742:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r3, #0
	cmp	r6, r0
	bls	.L739	@cond_branch
	cmp	r0, #0
	beq	.L739	@cond_branch
	add	r6, r3, #0
	b	.L739
.L756:
	.align	2, 0
.L755:
	.word	0x400012a
	.word	0xb9a0
	.word	gLink+0x4
	.word	0x4000120
	.word	sHandshakePlayerCount
	.word	0x8fff
	.word	0xffff
.L741:
	cmp	r0, ip
	beq	.L738	@cond_branch
	mov	r5, #0x0
	b	.L738
.L739:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L740	@cond_branch
.L738:
	strb	r5, [r7, #0x3]
	add	r0, r5, #0
	cmp	r0, #0x1
	bls	.L748	@cond_branch
	mov	r2, r9
	ldrb	r2, [r2]
	cmp	r0, r2
	bne	.L747	@cond_branch
	ldrh	r1, [r7, #0x4]
	ldr	r0, .L757
	cmp	r1, r0
	bne	.L747	@cond_branch
	mov	r0, #0x1
	b	.L750
.L758:
	.align	2, 0
.L757:
	.word	0x8fff
.L747:
	ldrb	r0, [r7, #0x3]
	cmp	r0, #0x1
	bls	.L748	@cond_branch
	mov	r0, #0x3
	and	r6, r6, r0
	add	r0, r6, #0x1
	b	.L752
.L748:
	mov	r0, #0x0
.L752:
	strb	r0, [r7, #0xf]
	ldrb	r0, [r7, #0x3]
	mov	r1, r9
	strb	r0, [r1]
	mov	r0, #0x0
.L750:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe94:
	.size	 DoHandshake,.Lfe94-DoHandshake
	.align	2, 0
	.type	 DoRecv,function
	.thumb_func
DoRecv:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	ldr	r0, .L777
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, .L777+0x4
	ldrb	r1, [r0, #0x16]
	add	r6, r0, #0
	cmp	r1, #0
	bne	.L760	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L777+0x8
	ldrb	r0, [r6, #0x3]
	cmp	r4, r0
	bcs	.L762	@cond_branch
	add	r5, r6, #0
	ldrh	r1, [r6, #0x14]
	add	r3, r7, #0
	add	r2, r6, #0
.L764:
	lsl	r0, r4, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L763	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L763	@cond_branch
	mov	r0, #0x1
	strb	r0, [r5, #0x11]
.L763:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r2, #0x3]
	cmp	r4, r0
	bcc	.L764	@cond_branch
.L762:
	mov	r0, #0x0
	strh	r0, [r6, #0x14]
	mov	r0, #0x1
	strb	r0, [r7]
	b	.L767
.L778:
	.align	2, 0
.L777:
	.word	0x4000120
	.word	gLink
	.word	sChecksumAvailable
.L760:
	ldr	r2, .L779
	add	r1, r6, r2
	add	r2, r2, #0x1
	add	r0, r6, r2
	ldrb	r2, [r0]
	ldrb	r1, [r1]
	add	r0, r2, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x31
	bls	.L768	@cond_branch
	sub	r0, r0, #0x32
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L768:
	cmp	r2, #0x31
	bhi	.L769	@cond_branch
	mov	r4, #0x0
	ldrb	r1, [r6, #0x3]
	cmp	r4, r1
	bcs	.L775	@cond_branch
	add	r5, r6, #0
	ldr	r7, .L779+0x4
	lsl	r0, r0, #0x1
	mov	ip, r0
	mov	r2, #0xcf
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	mov	r8, r2
.L773:
	lsl	r1, r4, #0x1
	mov	r2, sp
	add	r0, r2, r1
	ldrh	r3, [r0]
	ldrh	r2, [r5, #0x14]
	add	r0, r3, r2
	strh	r0, [r5, #0x14]
	ldrh	r0, [r7]
	orr	r0, r0, r3
	strh	r0, [r7]
	ldrb	r2, [r5, #0x17]
	mov	r0, #0x64
	mul	r0, r0, r2
	add	r0, r0, ip
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	add	r0, r0, r8
	strh	r3, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5, #0x3]
	cmp	r4, r0
	bcc	.L773	@cond_branch
	b	.L775
.L780:
	.align	2, 0
.L779:
	.word	0xfbc
	.word	sRecvNonzeroCheck
.L769:
	mov	r0, #0x2
	strb	r0, [r6, #0x12]
.L775:
	ldrb	r0, [r6, #0x17]
	add	r0, r0, #0x1
	strb	r0, [r6, #0x17]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x8
	bne	.L767	@cond_branch
	ldr	r2, .L781
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L767	@cond_branch
	ldr	r1, .L781+0x4
	add	r0, r6, r1
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r2]
.L767:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	sRecvNonzeroCheck
	.word	0xfbd
.Lfe95:
	.size	 DoRecv,.Lfe95-DoRecv
	.align	2, 0
	.type	 DoSend,function
	.thumb_func
DoSend:
	push	{r4, lr}
	ldr	r0, .L793
	ldrb	r1, [r0, #0x16]
	add	r4, r0, #0
	cmp	r1, #0x8
	bne	.L784	@cond_branch
	ldr	r1, .L793+0x4
	ldrh	r0, [r4, #0x14]
	strh	r0, [r1]
	ldr	r1, .L793+0x8
	ldrb	r2, [r1]
	cmp	r2, #0
	bne	.L785	@cond_branch
	ldr	r0, .L793+0xc
	add	r1, r4, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0xce
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x31
	bls	.L788	@cond_branch
	strb	r2, [r1]
	b	.L788
.L794:
	.align	2, 0
.L793:
	.word	gLink
	.word	0x400012a
	.word	sSendBufferEmpty
	.word	0x339
.L785:
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L788
.L784:
	ldr	r1, .L795
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L792	@cond_branch
	ldr	r2, .L795+0x4
	add	r0, r4, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L789	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1]
.L789:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L790	@cond_branch
.L792:
	ldr	r1, .L795+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L791
.L796:
	.align	2, 0
.L795:
	.word	sSendBufferEmpty
	.word	0x339
	.word	0x400012a
.L790:
	ldr	r3, .L797
	mov	r1, #0xce
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldrb	r2, [r4, #0x16]
	mov	r1, #0x64
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3]
.L791:
	ldrb	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x16]
.L788:
	pop	{r4}
	pop	{r0}
	bx	r0
.L798:
	.align	2, 0
.L797:
	.word	0x400012a
.Lfe96:
	.size	 DoSend,.Lfe96-DoSend
	.align	2, 0
	.type	 StopTimer,function
	.thumb_func
StopTimer:
	push	{lr}
	ldr	r0, .L801
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L800	@cond_branch
	ldr	r2, .L801+0x4
	ldrh	r1, [r2]
	ldr	r0, .L801+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L801+0xc
	ldr	r2, .L801+0x10
	add	r0, r2, #0
	strh	r0, [r1]
.L800:
	pop	{r0}
	bx	r0
.L802:
	.align	2, 0
.L801:
	.word	gLink
	.word	0x400010e
	.word	0xff7f
	.word	0x400010c
	.word	0xff3b
.Lfe97:
	.size	 StopTimer,.Lfe97-StopTimer
	.align	2, 0
	.type	 SendRecvDone,function
	.thumb_func
SendRecvDone:
	push	{lr}
	ldr	r1, .L807
	ldrb	r0, [r1, #0x17]
	cmp	r0, #0x8
	bne	.L804	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x16]
	strb	r0, [r1, #0x17]
	b	.L805
.L808:
	.align	2, 0
.L807:
	.word	gLink
.L804:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L805	@cond_branch
	ldr	r0, .L809
	ldrh	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
.L805:
	pop	{r0}
	bx	r0
.L810:
	.align	2, 0
.L809:
	.word	0x400010e
.Lfe98:
	.size	 SendRecvDone,.Lfe98-SendRecvDone
	.align	2, 0
	.globl	ResetSendBuffer
	.type	 ResetSendBuffer,function
	.thumb_func
ResetSendBuffer:
	push	{r4, r5, r6, lr}
	ldr	r1, .L822
	ldr	r2, .L822+0x4
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r2, [r0]
	mov	r3, #0xce
	lsl	r3, r3, #0x2
	add	r0, r1, r3
	strb	r2, [r0]
	mov	r0, #0x0
	mov	r6, #0x64
	add	r5, r1, #0
	add	r5, r5, #0x18
	ldr	r4, .L822+0x8
.L815:
	mov	r2, #0x0
	add	r1, r0, #0x1
	mov	r3, r0
	mul	r3, r3, r6
.L819:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	add	r0, r0, r5
	strh	r4, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x31
	bls	.L819	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x7
	bls	.L815	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L823:
	.align	2, 0
.L822:
	.word	gLink
	.word	0x339
	.word	0xefff
.Lfe99:
	.size	 ResetSendBuffer,.Lfe99-ResetSendBuffer
	.align	2, 0
	.globl	ResetRecvBuffer
	.type	 ResetRecvBuffer,function
	.thumb_func
ResetRecvBuffer:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L840
	ldr	r2, .L840+0x4
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r3, .L840+0x8
	add	r0, r1, r3
	strb	r2, [r0]
	mov	r0, #0x64
	mov	ip, r0
	mov	r3, #0xcf
	lsl	r3, r3, #0x2
	add	r7, r1, r3
	ldr	r6, .L840+0xc
.L828:
	mov	r3, #0x0
	lsl	r0, r2, #0x1
	add	r5, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	lsl	r4, r0, #0x5
.L832:
	mov	r2, #0x0
	add	r1, r3, #0x1
	mov	r0, ip
	mul	r0, r0, r3
	add	r3, r0, #0
.L836:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	add	r0, r0, r4
	add	r0, r0, r7
	strh	r6, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x31
	bls	.L836	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x7
	bls	.L832	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L828	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L841:
	.align	2, 0
.L840:
	.word	gLink
	.word	0xfbd
	.word	0xfbc
	.word	0xefff
.Lfe100:
	.size	 ResetRecvBuffer,.Lfe100-ResetRecvBuffer
	.comm	gLink, 4032	@ 4032
	.comm	gRecvCmds, 64	@ 64
	.comm	gBlockSendBuffer, 256	@ 256
	.comm	gLinkType, 4	@ 2
	.comm	gLinkStatus, 4	@ 4
	.comm	gBlockRecvBuffer, 1024	@ 1024
	.comm	gSendCmd, 16	@ 16
	.comm	gShouldAdvanceLinkState, 4	@ 1
	.comm	gLinkPlayers, 112	@ 112
	.comm	word_3002910, 8	@ 8
	.comm	gReceivedRemoteLinkPlayers, 4	@ 1

	.lcomm	sBlockSend,12

	.lcomm	sBlockRecv,48

	.lcomm	sBlockSendDelayCounter,4

	.lcomm	sDummy1,4

	.lcomm	sDummy2,1

	.lcomm	sPlayerDataExchangeStatus,4

	.lcomm	sErrorLinkStatus,4

	.lcomm	sErrorLastRecvQueueCount,4

	.lcomm	sErrorLastSendQueueCount,4

	.lcomm	sDummy3,4

	.lcomm	sLinkTestLastBlockSendPos,1

	.lcomm	sLinkTestLastBlockRecvPos,4

	.lcomm	sNumVBlanksWithoutSerialIntr,1

	.lcomm	sSendBufferEmpty,1

	.lcomm	sSendNonzeroCheck,2

	.lcomm	sRecvNonzeroCheck,2

	.lcomm	sChecksumAvailable,1

	.lcomm	sHandshakePlayerCount,1
	.comm	gLinkDebugValue1, 4	@ 4
	.comm	localLinkPlayerBlock, 60	@ 60
	.comm	gLinkErrorOccurred, 4	@ 1
	.comm	gLinkDebugValue2, 4	@ 4
	.comm	gLinkPlayerPending, 4	@ 4
	.comm	gBlockReceived, 4	@ 4
	.comm	gLinkHeldKeys, 4	@ 2
	.comm	gLinkTimeOutCounter, 4	@ 2
	.comm	localLinkPlayer, 28	@ 28
	.comm	gLinkDummyBool, 4	@ 1
	.comm	byte_3002A68, 4	@ 1
	.comm	u8_array_3002B70, 4	@ 4
	.comm	u8_array_3002B78, 4	@ 4
	.comm	gSuppressLinkErrorMessage, 4	@ 1
	.comm	gSavedLinkPlayerCount, 4	@ 1
	.comm	gSavedMultiplayerId, 4	@ 1
	.comm	gLinkTestBGInfo, 16	@ 16
	.comm	gLinkCallback, 4	@ 4
	.comm	gSavedLinkPlayers, 112	@ 112
	.comm	gLinkTestBlockChecksums, 8	@ 8
	.comm	gBlockRequestType, 4	@ 1
	.comm	gLastSendQueueCount, 4	@ 1
	.comm	gLastRecvQueueCount, 4	@ 1
	.comm	gLinkSavedIme, 4	@ 2
.text
	.align	2, 0
