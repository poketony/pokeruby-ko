@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	sub_80EBA5C
	.type	 sub_80EBA5C,function
	.thumb_func
sub_80EBA5C:
	push	{lr}
	ldr	r0, .L26
	ldr	r2, .L26+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xe
	bhi	.L4	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L26+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L27:
	.align	2, 0
.L26:
	.word	gMain
	.word	0x43c
	.word	.L24
	.align	2, 0
	.align	2, 0
.L24:
	.word	.L5
	.word	.L7
	.word	.L8
	.word	.L9
	.word	.L10
	.word	.L11
	.word	.L12
	.word	.L13
	.word	.L14
	.word	.L16
	.word	.L17
	.word	.L19
	.word	.L20
	.word	.L22
	.word	.L23
.L4:
	mov	r0, #0x0
	strb	r0, [r1]
.L5:
	bl	is_c1_link_related_active
	ldr	r3, .L28
	ldr	r2, .L28+0x4
	add	r1, r3, r2
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L3	@cond_branch
	ldr	r1, .L28+0x8
	add	r0, r3, r1
	strb	r2, [r0]
	ldr	r1, .L28+0xc
	ldr	r2, .L28+0x10
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L28+0x14
	bl	SetMainCallback2
	b	.L3
.L29:
	.align	2, 0
.L28:
	.word	gSharedMem
	.word	0x6dac
	.word	0x6dab
	.word	gMain
	.word	0x43c
	.word	sub_80EBBE8
.L7:
	mov	r0, #0x0
	bl	SetVBlankCallback
	b	.L3
.L8:
	bl	ResetPaletteFade
	b	.L3
.L9:
	bl	ResetSpriteData
	b	.L3
.L10:
	bl	FreeAllSpritePalettes
	b	.L3
.L11:
	bl	ResetTasks
	b	.L3
.L12:
	bl	remove_some_task
	b	.L3
.L13:
	bl	sub_80F1A90
	ldr	r1, .L30
	ldr	r0, .L30+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L14:
	bl	sub_80F1AC4
	b	.L25
.L31:
	.align	2, 0
.L30:
	.word	gMain
	.word	0x43c
.L16:
	bl	sub_80F2688
	ldr	r1, .L32
	ldr	r2, .L32+0x4
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L17:
	bl	sub_80F26BC
	b	.L25
.L33:
	.align	2, 0
.L32:
	.word	gMain
	.word	0x43c
.L19:
	bl	sub_80F36F0
	ldr	r1, .L34
	ldr	r0, .L34+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L20:
	bl	sub_80F3724
.L25:
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2	@cond_branch
	b	.L3
.L35:
	.align	2, 0
.L34:
	.word	gMain
	.word	0x43c
.L22:
	bl	sub_80EBC10
	ldr	r0, .L36
	bl	sub_80EBDBC
	b	.L3
.L37:
	.align	2, 0
.L36:
	.word	sub_80EBDD8
.L23:
	ldr	r0, .L38
	ldr	r1, .L38+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x6e
	bl	PlaySE
	ldr	r0, .L38+0x8
	bl	SetMainCallback2
	ldr	r0, .L38+0xc
	bl	SetVBlankCallback
	bl	sub_80F1A74
.L3:
	ldr	r1, .L38+0x10
	ldr	r2, .L38+0x14
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L2:
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gSharedMem
	.word	0x6dab
	.word	sub_80EBD90
	.word	sub_80EBD18
	.word	gMain
	.word	0x43c
.Lfe1:
	.size	 sub_80EBA5C,.Lfe1-sub_80EBA5C
	.align	2, 0
	.globl	sub_80EBBE8
	.type	 sub_80EBBE8,function
	.thumb_func
sub_80EBBE8:
	push	{r4, lr}
	ldr	r0, .L47
	ldr	r2, .L47+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L41	@cond_branch
	add	r4, r1, #0
.L42:
	bl	sub_80EBA5C
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L42	@cond_branch
.L41:
	pop	{r4}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	gSharedMem
	.word	0x6dab
.Lfe2:
	.size	 sub_80EBBE8,.Lfe2-sub_80EBBE8
	.align	2, 0
	.globl	sub_80EBC10
	.type	 sub_80EBC10,function
	.thumb_func
sub_80EBC10:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L55
	mov	r0, #0x14
	strh	r0, [r1]
	bl	CalculatePlayerPartyCount
	ldr	r2, .L55+0x4
	ldr	r1, .L55+0x8
	add	r3, r2, r1
	mov	r1, #0x0
	strb	r0, [r3]
	ldr	r3, .L55+0xc
	add	r0, r2, r3
	strb	r1, [r0]
	ldr	r3, .L55+0x10
	add	r0, r2, r3
	strb	r1, [r0]
	ldr	r3, .L55+0x14
	add	r0, r2, r3
	str	r1, [r0]
	ldr	r3, .L55+0x18
	add	r0, r2, r3
	str	r1, [r0]
	mov	r3, #0x0
	ldr	r0, .L55+0x1c
	add	r7, r2, r0
	mov	ip, r2
	mov	r6, #0x0
	ldr	r5, .L55+0x20
	mov	r4, #0x9b
.L53:
	add	r0, r3, r7
	strb	r6, [r0]
	lsl	r1, r3, #0x2
	add	r1, r1, r2
	add	r0, r1, r5
	strh	r4, [r0]
	ldr	r0, .L55+0x24
	add	r1, r1, r0
	mov	r0, #0x5b
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bls	.L53	@cond_branch
	ldr	r1, .L55+0x28
	add	r1, r1, ip
	mov	r0, #0x0
	strb	r0, [r1]
	bl	sub_80EBCA8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gKeyRepeatStartDelay
	.word	gSharedMem
	.word	0x8828
	.word	0x6ddc
	.word	0x9344
	.word	0x8768
	.word	0xced0
	.word	0x8fff
	.word	0x9040
	.word	0x9042
	.word	0x6e95
.Lfe3:
	.size	 sub_80EBC10,.Lfe3-sub_80EBC10
	.align	2, 0
	.type	 sub_80EBCA8,function
	.thumb_func
sub_80EBCA8:
	push	{r4, lr}
	ldr	r4, .L60
	ldr	r0, .L60+0x4
	add	r1, r4, r0
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L60+0x8
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	ldr	r0, .L60+0xc
	add	r1, r4, r0
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r0, .L60+0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L58	@cond_branch
	ldr	r0, .L60+0x14
	add	r1, r4, r0
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L59
.L61:
	.align	2, 0
.L60:
	.word	gSharedMem
	.word	0x6db2
	.word	0x6db3
	.word	0x6db4
	.word	0x83b
	.word	0x6db5
.L58:
	ldr	r1, .L62
	add	r0, r4, r1
	strb	r2, [r0]
.L59:
	ldr	r0, .L62+0x4
	ldr	r1, .L62+0x8
	add	r0, r0, r1
	mov	r1, #0x5
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	0x6db5
	.word	gSharedMem
	.word	0x6db6
.Lfe4:
	.size	 sub_80EBCA8,.Lfe4-sub_80EBCA8
	.align	2, 0
	.globl	sub_80EBD18
	.type	 sub_80EBD18,function
	.thumb_func
sub_80EBD18:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	sub_80F1FF0
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 sub_80EBD18,.Lfe5-sub_80EBD18
	.align	2, 0
	.globl	sub_80EBD30
	.type	 sub_80EBD30,function
	.thumb_func
sub_80EBD30:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	UpdateRegionMapVideoRegs
	bl	sub_80EFE7C
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_80EBD30,.Lfe6-sub_80EBD30
	.align	2, 0
	.globl	sub_80EBD4C
	.type	 sub_80EBD4C,function
	.thumb_func
sub_80EBD4C:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	sub_80F5BF0
	bl	sub_8089668
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_80EBD4C,.Lfe7-sub_80EBD4C
	.align	2, 0
	.globl	sub_80EBD68
	.type	 sub_80EBD68,function
	.thumb_func
sub_80EBD68:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	sub_80F6F64
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_80EBD68,.Lfe8-sub_80EBD68
	.align	2, 0
	.globl	sub_80EBD80
	.type	 sub_80EBD80,function
	.thumb_func
sub_80EBD80:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_80EBD80,.Lfe9-sub_80EBD80
	.align	2, 0
	.globl	sub_80EBD90
	.type	 sub_80EBD90,function
	.thumb_func
sub_80EBD90:
	push	{lr}
	ldr	r0, .L70
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	RunTasks
	bl	UpdatePaletteFade
	bl	sub_80F19FC
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gSharedMem
.Lfe10:
	.size	 sub_80EBD90,.Lfe10-sub_80EBD90
	.align	2, 0
	.globl	sub_80EBDBC
	.type	 sub_80EBDBC,function
	.thumb_func
sub_80EBDBC:
	ldr	r2, .L73
	mov	r3, #0xc0
	lsl	r3, r3, #0x2
	add	r1, r2, r3
	str	r0, [r1]
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r2, r0
	mov	r0, #0x0
	strh	r0, [r1]
	bx	lr
.L74:
	.align	2, 0
.L73:
	.word	gSharedMem
.Lfe11:
	.size	 sub_80EBDBC,.Lfe11-sub_80EBDBC
	.align	2, 0
	.globl	sub_80EBDD8
	.type	 sub_80EBDD8,function
	.thumb_func
sub_80EBDD8:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L106
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0x11
	bls	.LCB564
	b	.L75	@long jump
.LCB564:
	lsl	r0, r0, #0x2
	ldr	r1, .L106+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L107:
	.align	2, 0
.L106:
	.word	gSharedMem
	.word	.L102
	.align	2, 0
	.align	2, 0
.L102:
	.word	.L77
	.word	.L78
	.word	.L79
	.word	.L81
	.word	.L82
	.word	.L83
	.word	.L85
	.word	.L86
	.word	.L88
	.word	.L89
	.word	.L91
	.word	.L92
	.word	.L93
	.word	.L94
	.word	.L96
	.word	.L97
	.word	.L99
	.word	.L100
.L77:
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L108
	ldr	r3, .L108+0x4
	add	r0, r1, r3
	ldrb	r2, [r0]
	sub	r3, r3, #0x2f
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r0, .L108+0x8
	add	r2, r1, r0
	mov	r0, #0x5
	strb	r0, [r2]
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L104
.L109:
	.align	2, 0
.L108:
	.word	gSharedMem
	.word	0x6ddc
	.word	0x6dae
.L78:
	bl	sub_80F3FF0
	ldr	r1, .L110
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L79:
	bl	sub_80F4024
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB634
	b	.L75	@long jump
.LCB634:
	ldr	r1, .L110
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L104
.L111:
	.align	2, 0
.L110:
	.word	gSharedMem
.L81:
	bl	sub_80F2598
	ldr	r1, .L112
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L104
.L113:
	.align	2, 0
.L112:
	.word	gSharedMem
.L82:
	bl	sub_80EEE20
	ldr	r1, .L114
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L83:
	bl	sub_80EEE54
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB679
	b	.L75	@long jump
.LCB679:
	bl	sub_80EEE08
	ldr	r1, .L114
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L104
.L115:
	.align	2, 0
.L114:
	.word	gSharedMem
.L85:
	mov	r0, #0x0
	bl	sub_80EF248
	ldr	r1, .L116
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L86:
	mov	r0, #0x0
	bl	sub_80EF284
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB712
	b	.L75	@long jump
.LCB712:
	b	.L105
.L117:
	.align	2, 0
.L116:
	.word	gSharedMem
.L88:
	mov	r0, #0x0
	bl	sub_80F1B8C
	ldr	r1, .L118
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L89:
	mov	r0, #0x0
	bl	sub_80F1BC8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L75	@cond_branch
	ldr	r1, .L118
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L104
.L119:
	.align	2, 0
.L118:
	.word	gSharedMem
.L91:
	ldr	r0, .L120
	bl	SetVBlankCallback
	b	.L105
.L121:
	.align	2, 0
.L120:
	.word	sub_80EBD18
.L92:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L122
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L104
.L123:
	.align	2, 0
.L122:
	.word	gSharedMem
.L93:
	mov	r0, #0x0
	bl	sub_80EED2C
	ldr	r1, .L124
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L104
.L125:
	.align	2, 0
.L124:
	.word	gSharedMem
.L94:
	ldr	r0, .L126
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L75	@cond_branch
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r2, r3
	b	.L104
.L127:
	.align	2, 0
.L126:
	.word	gPaletteFade
.L96:
	mov	r0, #0x0
	bl	sub_80F2C80
	ldr	r1, .L128
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L97:
	mov	r0, #0x0
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L75	@cond_branch
	ldr	r1, .L128
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L104
.L129:
	.align	2, 0
.L128:
	.word	gSharedMem
.L99:
	bl	sub_80F1DF0
.L105:
	ldr	r1, .L130
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
.L104:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L75
.L131:
	.align	2, 0
.L130:
	.word	gSharedMem
.L100:
	bl	sub_80F1E50
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L75	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_80EF428
	ldr	r0, .L132
	bl	sub_80EBDBC
.L75:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	sub_80EC268
.Lfe12:
	.size	 sub_80EBDD8,.Lfe12-sub_80EBDD8
	.align	2, 0
	.globl	sub_80EC00C
	.type	 sub_80EC00C,function
	.thumb_func
sub_80EC00C:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L161
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0xd
	bls	.LCB922
	b	.L134	@long jump
.LCB922:
	lsl	r0, r0, #0x2
	ldr	r1, .L161+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L162:
	.align	2, 0
.L161:
	.word	gSharedMem
	.word	.L157
	.align	2, 0
	.align	2, 0
.L157:
	.word	.L136
	.word	.L138
	.word	.L139
	.word	.L141
	.word	.L142
	.word	.L144
	.word	.L146
	.word	.L147
	.word	.L148
	.word	.L150
	.word	.L151
	.word	.L152
	.word	.L154
	.word	.L155
.L136:
	bl	sub_80EEF78
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB947
	b	.L134	@long jump
.LCB947:
	ldr	r0, .L163
	bl	SetVBlankCallback
	bl	sub_80EED1C
	ldr	r4, .L163+0x4
	ldr	r1, .L163+0x8
	add	r0, r4, r1
	ldrb	r1, [r0]
	ldr	r2, .L163+0xc
	add	r0, r4, r2
	strb	r1, [r0]
	ldr	r0, .L163+0x10
	add	r1, r4, r0
	mov	r0, #0x5
	strb	r0, [r1]
	bl	sub_80EEE08
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r4, r4, r1
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L134
.L164:
	.align	2, 0
.L163:
	.word	sub_80EBD80
	.word	gSharedMem
	.word	0x6ddc
	.word	0x6dad
	.word	0x6dae
.L138:
	mov	r0, #0x0
	bl	sub_80EF248
	ldr	r1, .L165
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L139:
	mov	r0, #0x0
	bl	sub_80EF284
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1005
	b	.L134	@long jump
.LCB1005:
	ldr	r1, .L165
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L159
.L166:
	.align	2, 0
.L165:
	.word	gSharedMem
.L141:
	mov	r0, #0x0
	bl	sub_80F1B8C
	ldr	r1, .L167
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L142:
	mov	r0, #0x0
	bl	sub_80F1BC8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1037
	b	.L134	@long jump
.LCB1037:
	ldr	r1, .L167
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L159
.L168:
	.align	2, 0
.L167:
	.word	gSharedMem
.L144:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L134	@cond_branch
	b	.L160
.L146:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L169
	bl	SetVBlankCallback
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L159
.L170:
	.align	2, 0
.L169:
	.word	sub_80EBD18
.L147:
	mov	r0, #0x0
	bl	sub_80EED2C
	ldr	r1, .L171
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L159
.L172:
	.align	2, 0
.L171:
	.word	gSharedMem
.L148:
	ldr	r0, .L173
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L134	@cond_branch
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L159
.L174:
	.align	2, 0
.L173:
	.word	gPaletteFade
.L150:
	bl	sub_80F2598
	ldr	r1, .L175
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L159
.L176:
	.align	2, 0
.L175:
	.word	gSharedMem
.L151:
	mov	r0, #0x0
	bl	sub_80F2C80
	ldr	r1, .L177
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L152:
	mov	r0, #0x0
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L134	@cond_branch
	ldr	r1, .L177
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L159
.L178:
	.align	2, 0
.L177:
	.word	gSharedMem
.L154:
	bl	sub_80F1DF0
.L160:
	ldr	r1, .L179
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
.L159:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L134
.L180:
	.align	2, 0
.L179:
	.word	gSharedMem
.L155:
	bl	sub_80F1E50
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L134	@cond_branch
	ldr	r0, .L181
	ldr	r1, .L181+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	sub_80EF428
	ldr	r0, .L181+0x8
	bl	sub_80EBDBC
.L134:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L182:
	.align	2, 0
.L181:
	.word	gSharedMem
	.word	0x6dad
	.word	sub_80EC268
.Lfe13:
	.size	 sub_80EC00C,.Lfe13-sub_80EC00C
	.align	2, 0
	.globl	sub_80EC210
	.type	 sub_80EC210,function
	.thumb_func
sub_80EC210:
	push	{r4, r5, lr}
	ldr	r5, .L190
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r4, r5, r0
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L185	@cond_branch
	cmp	r0, #0x1
	beq	.L186	@cond_branch
	b	.L183
.L191:
	.align	2, 0
.L190:
	.word	gSharedMem
.L185:
	mov	r0, #0x1
	bl	sub_80F2D04
	ldr	r1, .L192
	add	r0, r5, r1
	ldrb	r1, [r0]
	mov	r0, #0x0
	mov	r2, #0x0
	bl	sub_80EE9C0
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L183
.L193:
	.align	2, 0
.L192:
	.word	0x6ddc
.L186:
	bl	sub_80EEA0C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L183	@cond_branch
	ldr	r0, .L194
	bl	sub_80EBDBC
.L183:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	sub_80EC268
.Lfe14:
	.size	 sub_80EC210,.Lfe14-sub_80EC210
	.align	2, 0
	.type	 sub_80EC268,function
	.thumb_func
sub_80EC268:
	push	{r4, r5, r6, lr}
	ldr	r4, .L232
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r6, r4, r0
	ldrh	r0, [r6]
	cmp	r0, #0x3
	bne	.LCB1310
	b	.L214	@long jump
.LCB1310:
	cmp	r0, #0x3
	bgt	.L229	@cond_branch
	cmp	r0, #0x1
	bne	.LCB1314
	b	.L212	@long jump
.LCB1314:
	cmp	r0, #0x1
	ble	.LCB1316
	b	.L213	@long jump
.LCB1316:
	cmp	r0, #0
	beq	.L198	@cond_branch
	b	.L196
.L233:
	.align	2, 0
.L232:
	.word	gSharedMem
.L229:
	cmp	r0, #0x6
	bne	.LCB1329
	b	.L220	@long jump
.LCB1329:
	cmp	r0, #0x6
	bgt	.L230	@cond_branch
	cmp	r0, #0x4
	bne	.LCB1333
	b	.L216	@long jump
.LCB1333:
	b	.L196
.L230:
	cmp	r0, #0xff
	bne	.LCB1338
	b	.L223	@long jump
.LCB1338:
	b	.L196
.L198:
	bl	sub_80EEC10
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L199	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L234
	add	r0, r4, r1
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	sub_80EF428
	bl	sub_80EED9C
	b	.L196
.L235:
	.align	2, 0
.L234:
	.word	0x6dad
.L199:
	ldr	r0, .L236
	ldrh	r1, [r0, #0x2e]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L201	@cond_branch
	ldr	r2, .L236+0x4
	add	r0, r4, r2
	ldrb	r1, [r0]
	add	r2, r2, #0x2f
	add	r0, r4, r2
	strb	r1, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	sub	r2, r2, #0x2a
	add	r1, r4, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x4
	bls	.LCB1398
	b	.L196	@long jump
.LCB1398:
	lsl	r0, r0, #0x2
	ldr	r1, .L236+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L237:
	.align	2, 0
.L236:
	.word	gMain
	.word	0x6dad
	.word	.L208
	.align	2, 0
	.align	2, 0
.L208:
	.word	.L203
	.word	.L204
	.word	.L207
	.word	.L206
	.word	.L205
.L203:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L238
	bl	sub_80EBDBC
	b	.L196
.L239:
	.align	2, 0
.L238:
	.word	sub_80EC4A0
.L204:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L240
	bl	sub_80EBDBC
	b	.L196
.L241:
	.align	2, 0
.L240:
	.word	sub_80EC81C
.L205:
	ldr	r0, .L242
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0]
	b	.L196
.L243:
	.align	2, 0
.L242:
	.word	gSharedMem
.L206:
	ldr	r0, .L244
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0]
	b	.L196
.L245:
	.align	2, 0
.L244:
	.word	gSharedMem
.L207:
	ldr	r0, .L246
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strh	r1, [r0]
	b	.L196
.L247:
	.align	2, 0
.L246:
	.word	gSharedMem
.L201:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1500
	b	.L196	@long jump
.LCB1500:
	strh	r2, [r6]
	b	.L196
.L212:
	bl	sub_80F208C
	ldr	r0, .L248
	bl	sub_80EBDBC
	b	.L196
.L249:
	.align	2, 0
.L248:
	.word	sub_80EE96C
.L213:
	bl	sub_80F6208
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
.L214:
	bl	sub_80F6250
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L196	@cond_branch
	ldr	r1, .L250
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L196
.L251:
	.align	2, 0
.L250:
	.word	gSharedMem
.L216:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L196	@cond_branch
	ldr	r1, .L252
	add	r0, r4, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L218	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L252+0x4
	bl	sub_80EBDBC
	b	.L196
.L253:
	.align	2, 0
.L252:
	.word	0x8fe8
	.word	sub_80EDB88
.L218:
	mov	r0, #0x20
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x5
	b	.L231
.L220:
	bl	sub_80F6C20
	ldr	r2, .L254
	add	r0, r4, r2
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L221	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L254+0x4
	bl	sub_80EBDBC
	b	.L196
.L255:
	.align	2, 0
.L254:
	.word	0xd158
	.word	sub_80EE3D8
.L221:
	mov	r0, #0x20
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x6
.L231:
	bl	sub_80EF428
	mov	r0, #0xff
	strh	r0, [r6]
	b	.L196
.L223:
	bl	sub_80EEC10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L224	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L256
	add	r0, r4, r1
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	sub_80EF428
	mov	r0, #0x0
	strh	r0, [r6]
	bl	sub_80EED9C
	b	.L196
.L257:
	.align	2, 0
.L256:
	.word	0x6dad
.L224:
	ldr	r0, .L258
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L196	@cond_branch
	ldr	r2, .L258+0x4
	add	r0, r4, r2
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	sub_80EF428
	strh	r5, [r6]
.L196:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L259:
	.align	2, 0
.L258:
	.word	gMain
	.word	0x6dad
.Lfe15:
	.size	 sub_80EC268,.Lfe15-sub_80EC268
	.align	2, 0
	.type	 sub_80EC4A0,function
	.thumb_func
sub_80EC4A0:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L290
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0xe
	bls	.LCB1692
	b	.L260	@long jump
.LCB1692:
	lsl	r0, r0, #0x2
	ldr	r1, .L290+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L291:
	.align	2, 0
.L290:
	.word	gSharedMem
	.word	.L286
	.align	2, 0
	.align	2, 0
.L286:
	.word	.L262
	.word	.L263
	.word	.L267
	.word	.L269
	.word	.L271
	.word	.L272
	.word	.L273
	.word	.L274
	.word	.L276
	.word	.L277
	.word	.L279
	.word	.L280
	.word	.L282
	.word	.L283
	.word	.L284
.L262:
	bl	sub_80F1E84
	mov	r0, #0x0
	bl	sub_80F2D04
	b	.L288
.L263:
	bl	sub_80F1F10
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1724
	b	.L260	@long jump
.LCB1724:
	ldr	r0, .L292
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x8
	and	r0, r0, r1
	mov	r1, #0x8
	cmp	r0, #0
	beq	.L265	@cond_branch
	mov	r1, #0x7
.L265:
	add	r0, r1, #0
	bl	sub_80EEFBC
	ldr	r1, .L292+0x4
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L289
.L293:
	.align	2, 0
.L292:
	.word	gSaveBlock2
	.word	gSharedMem
.L267:
	bl	sub_80EEF34
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB1762
	b	.L260	@long jump
.LCB1762:
	ldr	r4, .L294
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L289
.L295:
	.align	2, 0
.L294:
	.word	gSharedMem
.L269:
	ldr	r0, .L296
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L260	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80EED0C
	b	.L288
.L297:
	.align	2, 0
.L296:
	.word	gPaletteFade
.L271:
	bl	sub_80F2620
	ldr	r1, .L298
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L289
.L299:
	.align	2, 0
.L298:
	.word	gSharedMem
.L272:
	bl	sub_80EF814
	b	.L288
.L273:
	bl	sub_80EF840
	ldr	r1, .L300
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L274:
	bl	sub_80EF874
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L260	@cond_branch
	b	.L288
.L301:
	.align	2, 0
.L300:
	.word	gSharedMem
.L276:
	mov	r0, #0x4
	bl	sub_80F2C80
	ldr	r1, .L302
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L277:
	mov	r0, #0x4
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L260	@cond_branch
	b	.L288
.L303:
	.align	2, 0
.L302:
	.word	gSharedMem
.L279:
	bl	sub_80F2DD8
	ldr	r0, .L304
	bl	SetVBlankCallback
	ldr	r1, .L304+0x4
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L289
.L305:
	.align	2, 0
.L304:
	.word	sub_80EBD30
	.word	gSharedMem
.L280:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L260	@cond_branch
	b	.L288
.L282:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L289
.L283:
	mov	r0, #0x1
	bl	sub_80EED2C
.L288:
	ldr	r1, .L306
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
.L289:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L260
.L307:
	.align	2, 0
.L306:
	.word	gSharedMem
.L284:
	ldr	r0, .L308
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L260	@cond_branch
	ldr	r0, .L308+0x4
	bl	sub_80EBDBC
.L260:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gPaletteFade
	.word	sub_80EC67C
.Lfe16:
	.size	 sub_80EC4A0,.Lfe16-sub_80EC4A0
	.align	2, 0
	.type	 sub_80EC67C,function
	.thumb_func
sub_80EC67C:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L337
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x5
	bls	.LCB1997
	b	.L310	@long jump
.LCB1997:
	lsl	r0, r0, #0x2
	ldr	r1, .L337+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L338:
	.align	2, 0
.L337:
	.word	gSharedMem
	.word	.L333
	.align	2, 0
	.align	2, 0
.L333:
	.word	.L312
	.word	.L321
	.word	.L324
	.word	.L327
	.word	.L329
	.word	.L330
.L312:
	bl	sub_80FAB60
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L315	@cond_branch
	cmp	r0, #0x3
	bgt	.L320	@cond_branch
	cmp	r0, #0x1
	beq	.L314	@cond_branch
	b	.L310
.L320:
	cmp	r0, #0x4
	beq	.L316	@cond_branch
	cmp	r0, #0x5
	beq	.L317	@cond_branch
	b	.L310
.L314:
	bl	sub_80EED9C
	b	.L310
.L315:
	bl	sub_80EF9F8
	b	.L310
.L316:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L339
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0]
	b	.L310
.L340:
	.align	2, 0
.L339:
	.word	gSharedMem
.L317:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L341
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	mov	r1, #0x4
	strh	r1, [r0]
	b	.L310
.L342:
	.align	2, 0
.L341:
	.word	gSharedMem
.L321:
	ldr	r1, .L343
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L322	@cond_branch
	bl	sub_80FAEC4
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L335
.L344:
	.align	2, 0
.L343:
	.word	0x6e90
.L322:
	mov	r0, #0x1
	bl	sub_80EFBDC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L310	@cond_branch
	bl	sub_80FAEC4
	b	.L336
.L324:
	bl	sub_80FAFC0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L310	@cond_branch
	ldr	r5, .L345
	ldr	r1, .L345+0x4
	add	r0, r5, r1
	ldrb	r4, [r0]
	cmp	r4, #0
	bne	.L326	@cond_branch
	bl	sub_80EFBB0
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r5, r2
	strh	r4, [r0]
	b	.L310
.L346:
	.align	2, 0
.L345:
	.word	gSharedMem
	.word	0x6e90
.L326:
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r5, r0
	b	.L335
.L327:
	mov	r0, #0x0
	bl	sub_80EFBDC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L310	@cond_branch
	bl	sub_80EFBB0
	ldr	r0, .L347
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strh	r4, [r0]
	b	.L310
.L348:
	.align	2, 0
.L347:
	.word	gSharedMem
.L329:
	mov	r2, #0xc2
	lsl	r2, r2, #0x2
	add	r0, r4, r2
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L336:
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
.L335:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L310
.L330:
	ldr	r0, .L349
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L310	@cond_branch
	bl	sub_80F2DF4
	mov	r0, #0x4
	bl	sub_80F2D04
	ldr	r3, .L349+0x4
	mov	r2, #0x0
	ldr	r0, .L349+0x8
	ldr	r1, .L349+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L332	@cond_branch
	mov	r2, #0x1
.L332:
	lsl	r2, r2, #0x3
	ldrb	r1, [r3, #0x15]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x15]
	ldr	r0, .L349+0x10
	bl	sub_80EBDBC
.L310:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	gPaletteFade
	.word	gSaveBlock2
	.word	gSharedMem
	.word	0x6e90
	.word	sub_80EC00C
.Lfe17:
	.size	 sub_80EC67C,.Lfe17-sub_80EC67C
	.align	2, 0
	.type	 sub_80EC81C,function
	.thumb_func
sub_80EC81C:
	push	{r4, lr}
	ldr	r0, .L358
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L353	@cond_branch
	cmp	r0, #0x1
	beq	.L354	@cond_branch
	b	.L351
.L359:
	.align	2, 0
.L358:
	.word	gSharedMem
.L353:
	mov	r0, #0x0
	bl	sub_80F2D04
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x1
	bl	sub_80EE9C0
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L351
.L354:
	bl	sub_80EEA0C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L351	@cond_branch
	ldr	r0, .L360
	bl	sub_80EBDBC
.L351:
	pop	{r4}
	pop	{r0}
	bx	r0
.L361:
	.align	2, 0
.L360:
	.word	sub_80EC86C
.Lfe18:
	.size	 sub_80EC81C,.Lfe18-sub_80EC81C
	.align	2, 0
	.type	 sub_80EC86C,function
	.thumb_func
sub_80EC86C:
	push	{r4, r5, r6, lr}
	ldr	r4, .L380
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r5, r4, r0
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L364	@cond_branch
	cmp	r0, #0x1
	beq	.L376	@cond_branch
	b	.L362
.L381:
	.align	2, 0
.L380:
	.word	gSharedMem
.L364:
	bl	sub_80EEC90
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L365	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L382
	add	r0, r4, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	bl	sub_80EF428
	bl	sub_80EED9C
	b	.L362
.L383:
	.align	2, 0
.L382:
	.word	0x6dad
.L365:
	ldr	r0, .L384
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L366	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L384+0x4
	add	r0, r4, r2
	ldrb	r1, [r0]
	add	r2, r2, #0x43
	add	r0, r4, r2
	strb	r1, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x1
	beq	.L369	@cond_branch
	cmp	r0, #0x1
	bgt	.L373	@cond_branch
	cmp	r0, #0
	beq	.L368	@cond_branch
	b	.L362
.L385:
	.align	2, 0
.L384:
	.word	gMain
	.word	0x6dad
.L373:
	cmp	r0, #0x2
	beq	.L370	@cond_branch
	b	.L362
.L368:
	ldr	r0, .L386
	bl	sub_80EBDBC
	b	.L362
.L387:
	.align	2, 0
.L386:
	.word	sub_80ED620
.L369:
	ldr	r0, .L388
	bl	sub_80EBDBC
	b	.L362
.L389:
	.align	2, 0
.L388:
	.word	sub_80EC960
.L370:
	ldr	r0, .L390
	bl	sub_80EBDBC
	b	.L362
.L391:
	.align	2, 0
.L390:
	.word	sub_80EC210
.L366:
	mov	r6, #0x2
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L362	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L392
	add	r0, r4, r1
	strb	r6, [r0]
	ldr	r2, .L392+0x4
	add	r0, r4, r2
	strb	r6, [r0]
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	b	.L362
.L393:
	.align	2, 0
.L392:
	.word	0x6df0
	.word	0x6dad
.L376:
	bl	sub_80F1E6C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L362	@cond_branch
	ldr	r0, .L394
	bl	sub_80EBDBC
.L362:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	sub_80EC210
.Lfe19:
	.size	 sub_80EC86C,.Lfe19-sub_80EC86C
	.align	2, 0
	.type	 sub_80EC960,function
	.thumb_func
sub_80EC960:
	push	{r4, lr}
	ldr	r0, .L403
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L398	@cond_branch
	cmp	r0, #0x1
	beq	.L399	@cond_branch
	b	.L396
.L404:
	.align	2, 0
.L403:
	.word	gSharedMem
.L398:
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x5
	bl	sub_80EE9C0
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L396
.L399:
	bl	sub_80EEA0C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L396	@cond_branch
	ldr	r0, .L405
	bl	sub_80EBDBC
.L396:
	pop	{r4}
	pop	{r0}
	bx	r0
.L406:
	.align	2, 0
.L405:
	.word	sub_80ECC08
.Lfe20:
	.size	 sub_80EC960,.Lfe20-sub_80EC960
	.align	2, 0
	.globl	sub_80EC9A8
	.type	 sub_80EC9A8,function
	.thumb_func
sub_80EC9A8:
	push	{r4, r5, lr}
	ldr	r5, .L414
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r4, r5, r0
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L409	@cond_branch
	cmp	r0, #0x1
	beq	.L410	@cond_branch
	b	.L407
.L415:
	.align	2, 0
.L414:
	.word	gSharedMem
.L409:
	mov	r0, #0x5
	bl	sub_80F2D04
	ldr	r1, .L416
	add	r0, r5, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0xc
	bl	sub_80EE9C0
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L407
.L417:
	.align	2, 0
.L416:
	.word	0x6df0
.L410:
	bl	sub_80EEA0C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L407	@cond_branch
	ldr	r0, .L418
	bl	sub_80EBDBC
	ldr	r1, .L418+0x4
	add	r0, r5, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	bl	sub_80EF428
.L407:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L419:
	.align	2, 0
.L418:
	.word	sub_80EC86C
	.word	0x6dad
.Lfe21:
	.size	 sub_80EC9A8,.Lfe21-sub_80EC9A8
	.align	2, 0
	.globl	sub_80ECA10
	.type	 sub_80ECA10,function
	.thumb_func
sub_80ECA10:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L447
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0xd
	bls	.LCB2658
	b	.L420	@long jump
.LCB2658:
	lsl	r0, r0, #0x2
	ldr	r1, .L447+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L448:
	.align	2, 0
.L447:
	.word	gSharedMem
	.word	.L443
	.align	2, 0
	.align	2, 0
.L443:
	.word	.L422
	.word	.L424
	.word	.L425
	.word	.L427
	.word	.L428
	.word	.L430
	.word	.L432
	.word	.L433
	.word	.L434
	.word	.L435
	.word	.L437
	.word	.L438
	.word	.L440
	.word	.L441
.L422:
	bl	sub_80EEF78
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2683
	b	.L420	@long jump
.LCB2683:
	ldr	r0, .L449
	bl	SetVBlankCallback
	bl	sub_80EED1C
	ldr	r4, .L449+0x4
	ldr	r1, .L449+0x8
	add	r0, r4, r1
	ldrb	r1, [r0]
	ldr	r2, .L449+0xc
	add	r0, r4, r2
	strb	r1, [r0]
	ldr	r0, .L449+0x10
	add	r1, r4, r0
	mov	r0, #0x3
	strb	r0, [r1]
	bl	sub_80EEE08
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r4, r4, r1
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L420
.L450:
	.align	2, 0
.L449:
	.word	sub_80EBD80
	.word	gSharedMem
	.word	0x6df0
	.word	0x6dad
	.word	0x6dae
.L424:
	mov	r0, #0x1
	bl	sub_80EF248
	ldr	r1, .L451
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L425:
	mov	r0, #0x1
	bl	sub_80EF284
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2740
	b	.L420	@long jump
.LCB2740:
	ldr	r1, .L451
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L445
.L452:
	.align	2, 0
.L451:
	.word	gSharedMem
.L427:
	mov	r0, #0x1
	bl	sub_80F1B8C
	ldr	r1, .L453
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L428:
	mov	r0, #0x1
	bl	sub_80F1BC8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L420	@cond_branch
	ldr	r1, .L453
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L445
.L454:
	.align	2, 0
.L453:
	.word	gSharedMem
.L430:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L420	@cond_branch
	b	.L446
.L432:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L455
	bl	SetVBlankCallback
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L445
.L456:
	.align	2, 0
.L455:
	.word	sub_80EBD18
.L433:
	mov	r0, #0x0
	bl	sub_80EED2C
	ldr	r1, .L457
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L445
.L458:
	.align	2, 0
.L457:
	.word	gSharedMem
.L434:
	bl	sub_80F2598
	b	.L446
.L435:
	ldr	r0, .L459
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L420	@cond_branch
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L445
.L460:
	.align	2, 0
.L459:
	.word	gPaletteFade
.L437:
	mov	r0, #0x1
	bl	sub_80F2C80
	ldr	r1, .L461
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L438:
	mov	r0, #0x1
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L420	@cond_branch
	ldr	r1, .L461
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L445
.L462:
	.align	2, 0
.L461:
	.word	gSharedMem
.L440:
	bl	sub_80F1DF0
.L446:
	ldr	r1, .L463
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
.L445:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L420
.L464:
	.align	2, 0
.L463:
	.word	gSharedMem
.L441:
	bl	sub_80F1E50
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L420	@cond_branch
	ldr	r0, .L465
	ldr	r1, .L465+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	bl	sub_80EF428
	ldr	r0, .L465+0x8
	bl	sub_80EBDBC
.L420:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L466:
	.align	2, 0
.L465:
	.word	gSharedMem
	.word	0x6dad
	.word	sub_80EC86C
.Lfe22:
	.size	 sub_80ECA10,.Lfe22-sub_80ECA10
	.align	2, 0
	.type	 sub_80ECC08,function
	.thumb_func
sub_80ECC08:
	push	{r4, r5, lr}
	ldr	r4, .L487
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r5, r4, r0
	ldrh	r0, [r5]
	cmp	r0, #0
	beq	.L469	@cond_branch
	cmp	r0, #0x1
	bne	.LCB2968
	b	.L483	@long jump
.LCB2968:
	b	.L467
.L488:
	.align	2, 0
.L487:
	.word	gSharedMem
.L469:
	bl	sub_80EEC90
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L470	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L489
	add	r0, r4, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	bl	sub_80EF428
	bl	sub_80EED9C
	b	.L467
.L490:
	.align	2, 0
.L489:
	.word	0x6dad
.L470:
	ldr	r0, .L491
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3013
	b	.L471	@long jump
.LCB3013:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L491+0x4
	add	r0, r4, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x5
	bhi	.L472	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L491+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L492:
	.align	2, 0
.L491:
	.word	gMain
	.word	0x6dad
	.word	.L479
	.align	2, 0
	.align	2, 0
.L479:
	.word	.L473
	.word	.L474
	.word	.L475
	.word	.L476
	.word	.L477
	.word	.L478
.L473:
	ldr	r0, .L493
	ldr	r3, .L493+0x4
	add	r0, r0, r3
	mov	r1, #0x16
	strb	r1, [r0]
	b	.L472
.L494:
	.align	2, 0
.L493:
	.word	gSharedMem
	.word	0x87d8
.L474:
	ldr	r0, .L495
	ldr	r1, .L495+0x4
	add	r0, r0, r1
	mov	r1, #0x17
	strb	r1, [r0]
	b	.L472
.L496:
	.align	2, 0
.L495:
	.word	gSharedMem
	.word	0x87d8
.L475:
	ldr	r0, .L497
	ldr	r2, .L497+0x4
	add	r0, r0, r2
	mov	r1, #0x18
	strb	r1, [r0]
	b	.L472
.L498:
	.align	2, 0
.L497:
	.word	gSharedMem
	.word	0x87d8
.L476:
	ldr	r0, .L499
	ldr	r3, .L499+0x4
	add	r0, r0, r3
	mov	r1, #0x21
	strb	r1, [r0]
	b	.L472
.L500:
	.align	2, 0
.L499:
	.word	gSharedMem
	.word	0x87d8
.L477:
	ldr	r0, .L501
	ldr	r1, .L501+0x4
	add	r0, r0, r1
	mov	r1, #0x2f
	strb	r1, [r0]
	b	.L472
.L502:
	.align	2, 0
.L501:
	.word	gSharedMem
	.word	0x87d8
.L478:
	ldr	r0, .L503
	bl	sub_80EBDBC
	b	.L467
.L504:
	.align	2, 0
.L503:
	.word	sub_80EC9A8
.L472:
	ldr	r1, .L505
	ldr	r2, .L505+0x4
	add	r0, r1, r2
	ldrb	r2, [r0]
	ldr	r3, .L505+0x8
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r0, .L505+0xc
	add	r1, r1, r0
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L505+0x10
	bl	sub_80EBDBC
	b	.L467
.L506:
	.align	2, 0
.L505:
	.word	gSharedMem
	.word	0x6dad
	.word	0x6dfc
	.word	0x76aa
	.word	sub_80ED01C
.L471:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L467	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L507
	add	r1, r4, r2
	mov	r0, #0x5
	strb	r0, [r1]
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	b	.L467
.L508:
	.align	2, 0
.L507:
	.word	0x6dad
.L483:
	bl	sub_80F1E6C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L467	@cond_branch
	ldr	r0, .L509
	bl	sub_80EBDBC
.L467:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L510:
	.align	2, 0
.L509:
	.word	sub_80EC9A8
.Lfe23:
	.size	 sub_80ECC08,.Lfe23-sub_80ECC08
	.align	2, 0
	.globl	sub_80ECD80
	.type	 sub_80ECD80,function
	.thumb_func
sub_80ECD80:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L547
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x14
	bls	.LCB3227
	b	.L511	@long jump
.LCB3227:
	lsl	r0, r0, #0x2
	ldr	r1, .L547+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L548:
	.align	2, 0
.L547:
	.word	gSharedMem
	.word	.L543
	.align	2, 0
	.align	2, 0
.L543:
	.word	.L513
	.word	.L514
	.word	.L516
	.word	.L518
	.word	.L519
	.word	.L520
	.word	.L521
	.word	.L522
	.word	.L523
	.word	.L525
	.word	.L526
	.word	.L528
	.word	.L530
	.word	.L531
	.word	.L532
	.word	.L533
	.word	.L535
	.word	.L536
	.word	.L538
	.word	.L539
	.word	.L541
.L513:
	mov	r3, #0xc2
	lsl	r3, r3, #0x2
	add	r0, r4, r3
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L545
.L514:
	ldr	r0, .L549
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3276
	b	.L511	@long jump
.LCB3276:
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L545
.L550:
	.align	2, 0
.L549:
	.word	gPaletteFade
.L516:
	bl	sub_80EEF78
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3296
	b	.L511	@long jump
.LCB3296:
	ldr	r0, .L551
	bl	SetVBlankCallback
	b	.L546
.L552:
	.align	2, 0
.L551:
	.word	sub_80EBD80
.L518:
	bl	sub_80EED1C
	bl	sub_80F3130
	ldr	r1, .L553
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L545
.L554:
	.align	2, 0
.L553:
	.word	gSharedMem
.L519:
	mov	r0, #0x1
	bl	sub_80F2D6C
	ldr	r1, .L555
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L545
.L556:
	.align	2, 0
.L555:
	.word	gSharedMem
.L520:
	mov	r0, #0x5
	bl	sub_80F2D6C
	b	.L546
.L521:
	ldr	r1, .L557
	add	r0, r4, r1
	ldrb	r1, [r0]
	ldr	r2, .L557+0x4
	add	r0, r4, r2
	strb	r1, [r0]
	ldr	r3, .L557+0x8
	add	r1, r4, r3
	mov	r0, #0x6
	strb	r0, [r1]
	bl	sub_80EEE08
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L545
.L558:
	.align	2, 0
.L557:
	.word	0x6dfc
	.word	0x6dad
	.word	0x6dae
.L522:
	mov	r0, #0x2
	bl	sub_80EF248
	ldr	r1, .L559
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L523:
	mov	r0, #0x2
	bl	sub_80EF284
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3395
	b	.L511	@long jump
.LCB3395:
	b	.L546
.L560:
	.align	2, 0
.L559:
	.word	gSharedMem
.L525:
	mov	r0, #0x2
	bl	sub_80F1B8C
	ldr	r1, .L561
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L526:
	mov	r0, #0x2
	bl	sub_80F1BC8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3423
	b	.L511	@long jump
.LCB3423:
	ldr	r1, .L561
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L545
.L562:
	.align	2, 0
.L561:
	.word	gSharedMem
.L528:
	bl	sub_8055870
	cmp	r0, #0
	beq	.LCB3441
	b	.L511	@long jump
.LCB3441:
	b	.L546
.L530:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L563
	bl	SetVBlankCallback
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L545
.L564:
	.align	2, 0
.L563:
	.word	sub_80EBD18
.L531:
	mov	r0, #0x0
	bl	sub_80EED2C
	b	.L546
.L532:
	bl	sub_80F2598
	ldr	r1, .L565
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L545
.L566:
	.align	2, 0
.L565:
	.word	gSharedMem
.L533:
	ldr	r0, .L567
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L511	@cond_branch
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L545
.L568:
	.align	2, 0
.L567:
	.word	gPaletteFade
.L535:
	mov	r0, #0x1
	bl	sub_80F2C80
	ldr	r1, .L569
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L536:
	mov	r0, #0x1
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L511	@cond_branch
	ldr	r0, .L569
	ldr	r3, .L569+0x4
	add	r1, r0, r3
	strh	r2, [r1]
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	b	.L511
.L570:
	.align	2, 0
.L569:
	.word	gSharedMem
	.word	0x306
.L538:
	mov	r0, #0x5
	bl	sub_80F2C80
	ldr	r1, .L571
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L539:
	mov	r0, #0x5
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L511	@cond_branch
	bl	sub_80F1DF0
.L546:
	ldr	r1, .L571
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
.L545:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L511
.L572:
	.align	2, 0
.L571:
	.word	gSharedMem
.L541:
	bl	sub_80F1E50
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L511	@cond_branch
	ldr	r0, .L573
	ldr	r1, .L573+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	bl	sub_80EF428
	ldr	r0, .L573+0x8
	bl	sub_80EBDBC
.L511:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L574:
	.align	2, 0
.L573:
	.word	gSharedMem
	.word	0x6dad
	.word	sub_80ECC08
.Lfe24:
	.size	 sub_80ECD80,.Lfe24-sub_80ECD80
	.align	2, 0
	.type	 sub_80ED01C,function
	.thumb_func
sub_80ED01C:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L611
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x13
	bls	.LCB3649
	b	.L575	@long jump
.LCB3649:
	lsl	r0, r0, #0x2
	ldr	r1, .L611+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L612:
	.align	2, 0
.L611:
	.word	gSharedMem
	.word	.L608
	.align	2, 0
	.align	2, 0
.L608:
	.word	.L577
	.word	.L578
	.word	.L580
	.word	.L582
	.word	.L584
	.word	.L585
	.word	.L586
	.word	.L588
	.word	.L590
	.word	.L592
	.word	.L593
	.word	.L595
	.word	.L596
	.word	.L598
	.word	.L599
	.word	.L600
	.word	.L602
	.word	.L603
	.word	.L605
	.word	.L606
.L577:
	bl	sub_80F1E84
	mov	r0, #0x1
	bl	sub_80F2D04
	mov	r0, #0x5
	bl	sub_80F2D04
	ldr	r1, .L613
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	b	.L610
.L614:
	.align	2, 0
.L613:
	.word	gSharedMem
.L578:
	bl	sub_80F1F10
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3693
	b	.L575	@long jump
.LCB3693:
	mov	r0, #0x0
	bl	sub_80EEFBC
	ldr	r1, .L615
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L610
.L616:
	.align	2, 0
.L615:
	.word	gSharedMem
.L580:
	bl	sub_80EEF34
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB3718
	b	.L575	@long jump
.LCB3718:
	ldr	r4, .L617
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L610
.L618:
	.align	2, 0
.L617:
	.word	gSharedMem
.L582:
	ldr	r0, .L619
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3753
	b	.L575	@long jump
.LCB3753:
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80EED0C
	bl	sub_80EF814
	ldr	r1, .L619+0x4
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	b	.L610
.L620:
	.align	2, 0
.L619:
	.word	gPaletteFade
	.word	gSharedMem
.L584:
	bl	sub_80F2620
	ldr	r1, .L621
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L610
.L622:
	.align	2, 0
.L621:
	.word	gSharedMem
.L585:
	bl	sub_80F4D44
	ldr	r1, .L623
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L586:
	bl	sub_80F4D88
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L587	@cond_branch
	ldr	r1, .L623
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	ldrh	r0, [r1]
	add	r0, r0, #0x2
	strh	r0, [r1]
	b	.L575
.L624:
	.align	2, 0
.L623:
	.word	gSharedMem
.L587:
	ldr	r1, .L625
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L610
.L626:
	.align	2, 0
.L625:
	.word	gSharedMem
.L588:
	bl	sub_8055870
	cmp	r0, #0
	beq	.LCB3839
	b	.L575	@long jump
.LCB3839:
	ldr	r1, .L627
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	b	.L575
.L628:
	.align	2, 0
.L627:
	.word	gSharedMem
.L590:
	bl	sub_8055870
	cmp	r0, #0
	beq	.LCB3860
	b	.L575	@long jump
.LCB3860:
	ldr	r1, .L629
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	b	.L610
.L630:
	.align	2, 0
.L629:
	.word	gSharedMem
.L592:
	mov	r0, #0x0
	bl	sub_80F0264
	ldr	r1, .L631
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L593:
	bl	sub_80F02A0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3891
	b	.L575	@long jump
.LCB3891:
	ldr	r1, .L631
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L610
.L632:
	.align	2, 0
.L631:
	.word	gSharedMem
.L595:
	mov	r0, #0x0
	bl	sub_80F3008
	ldr	r1, .L633
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	b	.L610
.L634:
	.align	2, 0
.L633:
	.word	gSharedMem
.L596:
	bl	sub_8055870
	cmp	r0, #0
	beq	.LCB3925
	b	.L575	@long jump
.LCB3925:
	ldr	r1, .L635
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L610
.L636:
	.align	2, 0
.L635:
	.word	gSharedMem
.L598:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L637
	bl	SetVBlankCallback
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L610
.L638:
	.align	2, 0
.L637:
	.word	sub_80EBD18
.L599:
	mov	r0, #0x4
	bl	sub_80EED2C
	ldr	r1, .L639
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r1, r3
	b	.L610
.L640:
	.align	2, 0
.L639:
	.word	gSharedMem
.L600:
	ldr	r0, .L641
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L575	@cond_branch
	ldr	r2, .L641+0x4
	add	r0, r4, r2
	strh	r1, [r0]
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r1, r4, r3
.L610:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L575
.L642:
	.align	2, 0
.L641:
	.word	gPaletteFade
	.word	0x306
.L602:
	mov	r0, #0x1
	bl	sub_80F2C80
	ldr	r1, .L643
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L603:
	mov	r0, #0x1
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L575	@cond_branch
	ldr	r0, .L643
	ldr	r3, .L643+0x4
	add	r1, r0, r3
	strh	r2, [r1]
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	b	.L575
.L644:
	.align	2, 0
.L643:
	.word	gSharedMem
	.word	0x306
.L605:
	ldr	r4, .L645
	ldr	r2, .L645+0x4
	add	r0, r4, r2
	ldrb	r0, [r0]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80F2C80
	mov	r3, #0xc1
	lsl	r3, r3, #0x2
	add	r4, r4, r3
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
.L606:
	ldr	r0, .L645
	ldr	r1, .L645+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L575	@cond_branch
	ldr	r0, .L645+0x8
	bl	sub_80EBDBC
.L575:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L646:
	.align	2, 0
.L645:
	.word	gSharedMem
	.word	0x6dfc
	.word	sub_80ED31C
.Lfe25:
	.size	 sub_80ED01C,.Lfe25-sub_80ED01C
	.align	2, 0
	.type	 sub_80ED31C,function
	.thumb_func
sub_80ED31C:
	push	{r4, lr}
	ldr	r0, .L667
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4]
	cmp	r0, #0x1
	beq	.L658	@cond_branch
	cmp	r0, #0x1
	bgt	.L664	@cond_branch
	cmp	r0, #0
	beq	.L649	@cond_branch
	b	.L647
.L668:
	.align	2, 0
.L667:
	.word	gSharedMem
.L664:
	cmp	r0, #0x2
	beq	.L660	@cond_branch
	b	.L647
.L649:
	bl	sub_80F5DD4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L651	@cond_branch
	cmp	r0, #0x2
	beq	.L652	@cond_branch
	ldr	r0, .L669
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L654	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L669+0x4
	bl	sub_80EBDBC
	b	.L647
.L670:
	.align	2, 0
.L669:
	.word	gMain
	.word	sub_80ED4D8
.L651:
	mov	r0, #0x5
	bl	PlaySE
	bl	ShowMapNamePopUpWindow
	b	.L647
.L652:
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L666
.L654:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L647	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L671
	bl	sub_80EBDBC
	b	.L647
.L672:
	.align	2, 0
.L671:
	.word	sub_80ECD80
.L658:
	bl	sub_80F0718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L647	@cond_branch
	bl	ShowMapNamePopUpWindow
	bl	sub_80F3264
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L666
.L660:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L647	@cond_branch
.L666:
	strh	r0, [r4]
.L647:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_80ED31C,.Lfe26-sub_80ED31C
	.align	2, 0
	.globl	sub_80ED3D0
	.type	 sub_80ED3D0,function
	.thumb_func
sub_80ED3D0:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L691
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0x8
	bhi	.L673	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L691+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L692:
	.align	2, 0
.L691:
	.word	gSharedMem
	.word	.L687
	.align	2, 0
	.align	2, 0
.L687:
	.word	.L675
	.word	.L676
	.word	.L677
	.word	.L678
	.word	.L679
	.word	.L681
	.word	.L683
	.word	.L684
	.word	.L685
.L675:
	mov	r0, #0x0
	bl	SetVBlankCallback
	b	.L689
.L676:
	bl	sub_80EED0C
	bl	sub_80F6134
	b	.L689
.L677:
	mov	r0, #0x0
	bl	sub_80EEFBC
	b	.L689
.L678:
	mov	r0, #0x0
	bl	sub_80F0264
	ldr	r1, .L693
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L679:
	bl	sub_80F02A0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L673	@cond_branch
	b	.L689
.L694:
	.align	2, 0
.L693:
	.word	gSharedMem
.L681:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L673	@cond_branch
	b	.L689
.L683:
	mov	r0, #0x0
	bl	sub_80F3008
	ldr	r4, .L695
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L695+0x4
	bl	SetVBlankCallback
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L690
.L696:
	.align	2, 0
.L695:
	.word	gSharedMem
	.word	sub_80EBD18
.L684:
	mov	r0, #0x4
	bl	sub_80EED2C
.L689:
	ldr	r1, .L697
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
.L690:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L673
.L698:
	.align	2, 0
.L697:
	.word	gSharedMem
.L685:
	ldr	r0, .L699
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L673	@cond_branch
	ldr	r0, .L699+0x4
	bl	sub_80EBDBC
.L673:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	gPaletteFade
	.word	sub_80ED31C
.Lfe27:
	.size	 sub_80ED3D0,.Lfe27-sub_80ED3D0
	.align	2, 0
	.type	 sub_80ED4D8,function
	.thumb_func
sub_80ED4D8:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L720
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x8
	bls	.LCB4421
	b	.L701	@long jump
.LCB4421:
	lsl	r0, r0, #0x2
	ldr	r1, .L720+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L721:
	.align	2, 0
.L720:
	.word	gSharedMem
	.word	.L716
	.align	2, 0
	.align	2, 0
.L716:
	.word	.L703
	.word	.L704
	.word	.L706
	.word	.L708
	.word	.L709
	.word	.L710
	.word	.L712
	.word	.L713
	.word	.L714
.L703:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L718
.L704:
	ldr	r0, .L722
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L701	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80EED0C
	bl	sub_80F3130
	b	.L719
.L723:
	.align	2, 0
.L722:
	.word	gPaletteFade
.L706:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L701	@cond_branch
	ldr	r1, .L724
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L718
.L725:
	.align	2, 0
.L724:
	.word	gSharedMem
.L708:
	bl	sub_80F4CF0
	b	.L719
.L709:
	bl	sub_80EFF34
	ldr	r1, .L726
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L710:
	bl	sub_80EFF68
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L701	@cond_branch
	b	.L719
.L727:
	.align	2, 0
.L726:
	.word	gSharedMem
.L712:
	bl	sub_80F35B4
	mov	r0, #0x2
	bl	sub_80EEFBC
	ldr	r4, .L728
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L728+0x4
	bl	SetVBlankCallback
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L718
.L729:
	.align	2, 0
.L728:
	.word	gSharedMem
	.word	sub_80EBD4C
.L713:
	mov	r0, #0x2
	bl	sub_80EED2C
.L719:
	ldr	r1, .L730
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
.L718:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L701
.L731:
	.align	2, 0
.L730:
	.word	gSharedMem
.L714:
	ldr	r0, .L732
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L701	@cond_branch
	ldr	r0, .L732+0x4
	bl	sub_80EBDBC
.L701:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L733:
	.align	2, 0
.L732:
	.word	gPaletteFade
	.word	sub_80ED858
.Lfe28:
	.size	 sub_80ED4D8,.Lfe28-sub_80ED4D8
	.align	2, 0
	.type	 sub_80ED620,function
	.thumb_func
sub_80ED620:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L768
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x10
	bls	.LCB4630
	b	.L734	@long jump
.LCB4630:
	lsl	r0, r0, #0x2
	ldr	r1, .L768+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L769:
	.align	2, 0
.L768:
	.word	gSharedMem
	.word	.L762
	.align	2, 0
	.align	2, 0
.L762:
	.word	.L736
	.word	.L737
	.word	.L739
	.word	.L741
	.word	.L743
	.word	.L744
	.word	.L745
	.word	.L746
	.word	.L748
	.word	.L750
	.word	.L752
	.word	.L753
	.word	.L754
	.word	.L756
	.word	.L757
	.word	.L759
	.word	.L760
.L736:
	bl	sub_80F1E84
	mov	r0, #0x1
	bl	sub_80F2D04
	ldr	r1, .L770
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L764
.L771:
	.align	2, 0
.L770:
	.word	gSharedMem
.L737:
	bl	sub_80F1F10
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4672
	b	.L734	@long jump
.LCB4672:
	mov	r0, #0x1
	bl	sub_80EEFBC
	b	.L765
.L739:
	bl	sub_80EEF34
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB4684
	b	.L734	@long jump
.LCB4684:
	ldr	r4, .L772
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L764
.L773:
	.align	2, 0
.L772:
	.word	gSharedMem
.L741:
	ldr	r0, .L774
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.LCB4720
	b	.L734	@long jump
.LCB4720:
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80EED0C
	bl	sub_80EF814
	ldr	r0, .L774+0x4
	ldr	r2, .L774+0x8
	add	r1, r0, r2
	strb	r4, [r1]
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	b	.L734
.L775:
	.align	2, 0
.L774:
	.word	gPaletteFade
	.word	gSharedMem
	.word	0x76aa
.L743:
	bl	sub_80F2620
	b	.L765
.L744:
	ldr	r0, .L776
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	bl	sub_80F4BD0
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L764
.L777:
	.align	2, 0
.L776:
	.word	0xd162
.L745:
	bl	sub_80EFF34
	ldr	r1, .L778
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L746:
	bl	sub_80EFF68
	b	.L766
.L779:
	.align	2, 0
.L778:
	.word	gSharedMem
.L748:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L734	@cond_branch
	ldr	r1, .L780
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L764
.L781:
	.align	2, 0
.L780:
	.word	gSharedMem
.L750:
	bl	sub_8055870
	b	.L767
.L752:
	bl	sub_80F33A8
	ldr	r4, .L782
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L782+0x4
	bl	SetVBlankCallback
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L764
.L783:
	.align	2, 0
.L782:
	.word	gSharedMem
	.word	sub_80EBD4C
.L753:
	mov	r0, #0x2
	bl	sub_80EED2C
	ldr	r1, .L784
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L764
.L785:
	.align	2, 0
.L784:
	.word	gSharedMem
.L754:
	ldr	r0, .L786
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L734	@cond_branch
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L764
.L787:
	.align	2, 0
.L786:
	.word	gPaletteFade
.L756:
	mov	r0, #0x1
	bl	sub_80F2C80
	ldr	r1, .L788
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L757:
	mov	r0, #0x1
	bl	sub_80F2CBC
.L766:
	lsl	r0, r0, #0x18
.L767:
	cmp	r0, #0
	bne	.L734	@cond_branch
.L765:
	ldr	r1, .L788
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
.L764:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L734
.L789:
	.align	2, 0
.L788:
	.word	gSharedMem
.L759:
	mov	r0, #0x6
	bl	sub_80F2C80
	ldr	r1, .L790
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L760:
	mov	r0, #0x6
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L734	@cond_branch
	ldr	r0, .L790+0x4
	bl	sub_80EBDBC
.L734:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L791:
	.align	2, 0
.L790:
	.word	gSharedMem
	.word	sub_80ED858
.Lfe29:
	.size	 sub_80ED620,.Lfe29-sub_80ED620
	.align	2, 0
	.type	 sub_80ED858,function
	.thumb_func
sub_80ED858:
	.syntax unified
push {r4,r5,lr}
	sub sp, 0x4
	ldr r1, _080ED878 @ =gSharedMem
	movs r2, 0xC1
	lsls r2, 2
	adds r0, r1, r2
	ldrh r0, [r0]
	adds r5, r1, 0
	cmp r0, 0xB
	bls _080ED86E
	b _080EDB7A
_080ED86E:
	lsls r0, 2
	ldr r1, _080ED87C @ =_080ED880
	adds r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080ED878: .4byte gSharedMem
_080ED87C: .4byte _080ED880
	.align 2, 0
_080ED880:
	.4byte _080ED8B0
	.4byte _080ED8CC
	.4byte _080ED8EC
	.4byte _080ED904
	.4byte _080ED91A
	.4byte _080EDA68
	.4byte _080EDA8C
	.4byte _080EDAA4
	.4byte _080EDAC0
	.4byte _080EDAE8
	.4byte _080EDB7A
	.4byte _080EDB28
_080ED8B0:
	bl sub_80F4F78
	bl sub_80F5B38
	ldr r0, _080ED8C8 @ =gSharedMem
	movs r4, 0xC1
	lsls r4, 2
	adds r0, r4
	movs r1, 0x1
	strh r1, [r0]
	b _080EDB7A
	.align 2, 0
_080ED8C8: .4byte gSharedMem
_080ED8CC:
	bl sub_80F5B50
	lsls r0, 24
	cmp r0, 0
	beq _080ED8D8
	b _080EDB7A
_080ED8D8:
	ldr r0, _080ED8E8 @ =gSharedMem
	movs r1, 0xC1
	lsls r1, 2
	adds r0, r1
	movs r1, 0x2
	strh r1, [r0]
	b _080EDB7A
	.align 2, 0
_080ED8E8: .4byte gSharedMem
_080ED8EC:
	movs r0, 0x1
	bl sub_80F0174
	ldr r0, _080ED900 @ =gSharedMem
	movs r2, 0xC1
	lsls r2, 2
	adds r0, r2
	movs r1, 0x3
	strh r1, [r0]
	b _080EDB7A
	.align 2, 0
_080ED900: .4byte gSharedMem
_080ED904:
	bl sub_80F4FB4
	lsls r0, 24
	cmp r0, 0
	beq _080ED910
	b _080EDB7A
_080ED910:
	bl sub_80F3C94
	bl sub_80F3D00
	b _080EDAD4
_080ED91A:
	ldr r2, _080ED960 @ =gMain
	ldrh r1, [r2, 0x2C]
	movs r0, 0x40
	ands r0, r1
	adds r3, r2, 0
	cmp r0, 0
	beq _080ED970
	ldr r1, _080ED964 @ =0x000087cb
	adds r0, r5, r1
	ldrb r0, [r0]
	cmp r0, 0
	beq _080ED970
	ldr r2, _080ED968 @ =0x000076aa
	adds r0, r5, r2
	ldrb r0, [r0]
	cmp r0, 0
	beq _080ED948
	ldr r4, _080ED96C @ =0x000087dc
	adds r0, r5, r4
	movs r1, 0
	ldrsh r0, [r0, r1]
	cmp r0, 0
	beq _080ED970
_080ED948:
	movs r0, 0x5
	bl PlaySE
	movs r0, 0x1
	bl sub_80F5060
	bl move_anim_execute
	movs r2, 0xC1
	lsls r2, 2
	adds r1, r5, r2
	b _080ED9B8
	.align 2, 0
_080ED960: .4byte gMain
_080ED964: .4byte 0x000087cb
_080ED968: .4byte 0x000076aa
_080ED96C: .4byte 0x000087dc
_080ED970:
	ldrh r1, [r3, 0x2C]
	movs r0, 0x80
	ands r0, r1
	cmp r0, 0
	beq _080ED9CC
	ldr r4, _080ED9C0 @ =0x000087cb
	adds r0, r5, r4
	ldrb r0, [r0]
	cmp r0, 0
	beq _080ED9CC
	ldr r1, _080ED9C4 @ =0x000076aa
	adds r0, r5, r1
	ldrb r0, [r0]
	cmp r0, 0
	beq _080ED9A2
	ldr r2, _080ED9C8 @ =0x000087dc
	adds r0, r5, r2
	subs r4, 0x57
	adds r1, r5, r4
	movs r4, 0
	ldrsh r2, [r0, r4]
	movs r4, 0
	ldrsh r0, [r1, r4]
	cmp r2, r0
	bge _080ED9CC
_080ED9A2:
	movs r0, 0x5
	bl PlaySE
	movs r0, 0
	bl sub_80F5060
	bl move_anim_execute
	movs r0, 0xC1
	lsls r0, 2
	adds r1, r5, r0
_080ED9B8:
	movs r0, 0x5
	strh r0, [r1]
	b _080EDB7A
	.align 2, 0
_080ED9C0: .4byte 0x000087cb
_080ED9C4: .4byte 0x000076aa
_080ED9C8: .4byte 0x000087dc
_080ED9CC:
	ldrh r2, [r3, 0x2E]
	movs r0, 0x2
	ands r0, r2
	cmp r0, 0
	beq _080ED9F8
	movs r0, 0x5
	bl PlaySE
	bl sub_80F4FDC
	bl move_anim_execute
	ldr r0, _080ED9F4 @ =gSharedMem
	movs r1, 0xC1
	lsls r1, 2
	adds r0, r1
	movs r1, 0x9
	strh r1, [r0]
	b _080EDB7A
	.align 2, 0
_080ED9F4: .4byte gSharedMem
_080ED9F8:
	movs r0, 0x1
	ands r0, r2
	cmp r0, 0
	bne _080EDA02
	b _080EDB7A
_080EDA02:
	adds r4, r5, 0
	ldr r2, _080EDA38 @ =0x000076aa
	adds r0, r4, r2
	ldrb r0, [r0]
	cmp r0, 0
	bne _080EDA44
	ldr r1, _080EDA3C @ =0x000087dc
	adds r0, r4, r1
	movs r2, 0
	ldrsh r1, [r0, r2]
	ldr r2, _080EDA40 @ =0x000087da
	adds r0, r4, r2
	movs r2, 0
	ldrsh r0, [r0, r2]
	subs r0, 0x1
	cmp r1, r0
	beq _080EDA26
	b _080EDB7A
_080EDA26:
	movs r0, 0x5
	bl PlaySE
	movs r0, 0xC1
	lsls r0, 2
	adds r1, r4, r0
	movs r0, 0x9
	strh r0, [r1]
	b _080EDB7A
	.align 2, 0
_080EDA38: .4byte 0x000076aa
_080EDA3C: .4byte 0x000087dc
_080EDA40: .4byte 0x000087da
_080EDA44:
	ldr r1, _080EDA64 @ =0x00006dac
	adds r0, r5, r1
	ldrb r0, [r0]
	cmp r0, 0
	beq _080EDA50
	b _080EDB7A
_080EDA50:
	movs r0, 0x5
	bl PlaySE
	movs r2, 0xC1
	lsls r2, 2
	adds r1, r5, r2
	movs r0, 0x7
	strh r0, [r1]
	b _080EDB7A
	.align 2, 0
_080EDA64: .4byte 0x00006dac
_080EDA68:
	bl gpu_sync_bg_show
	lsls r0, 24
	cmp r0, 0
	beq _080EDA74
	b _080EDB7A
_080EDA74:
	bl sub_80F3D00
	ldr r0, _080EDA88 @ =gSharedMem
	movs r4, 0xC1
	lsls r4, 2
	adds r0, r4
	movs r1, 0x6
	strh r1, [r0]
	b _080EDB7A
	.align 2, 0
_080EDA88: .4byte gSharedMem
_080EDA8C:
	bl sub_8055870
	cmp r0, 0
	bne _080EDB7A
	ldr r0, _080EDAA0 @ =gSharedMem
	movs r1, 0xC1
	lsls r1, 2
	adds r0, r1
	b _080EDADC
	.align 2, 0
_080EDAA0: .4byte gSharedMem
_080EDAA4:
	movs r0, 0x3
	bl sub_80EEFBC
	bl sub_80F3668
	ldr r0, _080EDABC @ =gSharedMem
	movs r2, 0xC1
	lsls r2, 2
	adds r0, r2
	movs r1, 0x8
	strh r1, [r0]
	b _080EDB7A
	.align 2, 0
_080EDABC: .4byte gSharedMem
_080EDAC0:
	bl sub_80F7500
	lsls r0, 24
	cmp r0, 0
	bne _080EDB7A
	movs r0, 0x2
	bl sub_80EEFBC
	bl sub_80F3698
_080EDAD4:
	ldr r0, _080EDAE4 @ =gSharedMem
	movs r4, 0xC1
	lsls r4, 2
	adds r0, r4
_080EDADC:
	movs r1, 0x4
	strh r1, [r0]
	b _080EDB7A
	.align 2, 0
_080EDAE4: .4byte gSharedMem
_080EDAE8:
	bl sub_80F5038
	lsls r0, 24
	lsrs r4, r0, 24
	cmp r4, 0
	bne _080EDB7A
	movs r0, 0
	bl sub_80F0174
	bl sub_80F2F48
	ldr r5, _080EDB24 @ =gSharedMem
	movs r1, 0xC2
	lsls r1, 2
	adds r0, r5, r1
	ldr r0, [r0]
	movs r1, 0x1
	negs r1, r1
	str r4, [sp]
	movs r2, 0
	movs r3, 0x10
	bl BeginNormalPaletteFade
	movs r2, 0xC1
	lsls r2, 2
	adds r1, r5, r2
	movs r0, 0xB
	strh r0, [r1]
	b _080EDB7A
	.align 2, 0
_080EDB24: .4byte gSharedMem
_080EDB28:
	ldr r0, _080EDB60 @ =gPaletteFade
	ldrb r1, [r0, 0x7]
	movs r0, 0x80
	ands r0, r1
	cmp r0, 0
	bne _080EDB7A
	bl sub_80F3CE8
	bl sub_80F5BDC
	ldr r0, _080EDB64 @ =gSharedMem
	ldr r4, _080EDB68 @ =0x000076aa
	adds r0, r4
	ldrb r0, [r0]
	cmp r0, 0
	bne _080EDB70
	bl sub_80F357C
	movs r0, 0x1
	bl sub_80F2D6C
	movs r0, 0x6
	bl sub_80F2D6C
	ldr r0, _080EDB6C @ =sub_80ECA10
	bl sub_80EBDBC
	b _080EDB7A
	.align 2, 0
_080EDB60: .4byte gPaletteFade
_080EDB64: .4byte gSharedMem
_080EDB68: .4byte 0x000076aa
_080EDB6C: .4byte sub_80ECA10
_080EDB70:
	bl sub_80F3614
	ldr r0, _080EDB84 @ =sub_80ED3D0
	bl sub_80EBDBC
_080EDB7A:
	add sp, 0x4
	pop {r4,r5}
	pop {r0}
	bx r0
	.align 2, 0
_080EDB84: .4byte sub_80ED3D0

.syntax divided

	.code	16
.Lfe30:
	.size	 sub_80ED858,.Lfe30-sub_80ED858
	.align	2, 0
	.type	 sub_80EDB88,function
	.thumb_func
sub_80EDB88:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L827
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x11
	bls	.LCB4990
	b	.L793	@long jump
.LCB4990:
	lsl	r0, r0, #0x2
	ldr	r1, .L827+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L828:
	.align	2, 0
.L827:
	.word	gSharedMem
	.word	.L823
	.align	2, 0
	.align	2, 0
.L823:
	.word	.L795
	.word	.L796
	.word	.L798
	.word	.L800
	.word	.L802
	.word	.L803
	.word	.L804
	.word	.L806
	.word	.L808
	.word	.L810
	.word	.L811
	.word	.L813
	.word	.L814
	.word	.L816
	.word	.L817
	.word	.L819
	.word	.L820
	.word	.L821
.L795:
	bl	sub_80F1E84
	mov	r0, #0x0
	bl	sub_80F2D04
	b	.L825
.L796:
	bl	sub_80F1F10
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5022
	b	.L793	@long jump
.LCB5022:
	mov	r0, #0x4
	bl	sub_80EEFBC
	ldr	r1, .L829
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L826
.L830:
	.align	2, 0
.L829:
	.word	gSharedMem
.L798:
	bl	sub_80EEF34
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB5044
	b	.L793	@long jump
.LCB5044:
	ldr	r4, .L831
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L826
.L832:
	.align	2, 0
.L831:
	.word	gSharedMem
.L800:
	ldr	r0, .L833
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5080
	b	.L793	@long jump
.LCB5080:
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80EED0C
	bl	sub_80EF814
	b	.L825
.L834:
	.align	2, 0
.L833:
	.word	gPaletteFade
.L802:
	bl	sub_80F2620
	ldr	r1, .L835
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L826
.L836:
	.align	2, 0
.L835:
	.word	gSharedMem
.L803:
	bl	sub_80F638C
	ldr	r1, .L837
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L804:
	bl	sub_80F63D0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L825	@cond_branch
	ldr	r1, .L837
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x2
	strh	r0, [r1]
	b	.L793
.L838:
	.align	2, 0
.L837:
	.word	gSharedMem
.L806:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L793	@cond_branch
	ldr	r1, .L839
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	b	.L793
.L840:
	.align	2, 0
.L839:
	.word	gSharedMem
.L808:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L793	@cond_branch
	b	.L825
.L810:
	mov	r0, #0x1
	bl	sub_80F0264
	ldr	r1, .L841
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L811:
	bl	sub_80F02A0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L793	@cond_branch
	b	.L825
.L842:
	.align	2, 0
.L841:
	.word	gSharedMem
.L813:
	mov	r0, #0x2
	bl	sub_80F2C80
	ldr	r1, .L843
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L814:
	mov	r0, #0x2
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L793	@cond_branch
	b	.L825
.L844:
	.align	2, 0
.L843:
	.word	gSharedMem
.L816:
	mov	r0, #0x1
	bl	sub_80F3008
	ldr	r1, .L845
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L826
.L846:
	.align	2, 0
.L845:
	.word	gSharedMem
.L817:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L793	@cond_branch
	b	.L825
.L819:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L847
	bl	SetVBlankCallback
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L826
.L848:
	.align	2, 0
.L847:
	.word	sub_80EBD18
.L820:
	mov	r0, #0x4
	bl	sub_80EED2C
.L825:
	ldr	r1, .L849
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
.L826:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L793
.L850:
	.align	2, 0
.L849:
	.word	gSharedMem
.L821:
	ldr	r0, .L851
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L793	@cond_branch
	ldr	r0, .L851+0x4
	bl	sub_80EBDBC
.L793:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L852:
	.align	2, 0
.L851:
	.word	gPaletteFade
	.word	sub_80EDDBC
.Lfe31:
	.size	 sub_80EDB88,.Lfe31-sub_80EDB88
	.align	2, 0
	.type	 sub_80EDDBC,function
	.thumb_func
sub_80EDDBC:
	push	{r4, lr}
	ldr	r0, .L873
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4]
	cmp	r0, #0x1
	beq	.L864	@cond_branch
	cmp	r0, #0x1
	bgt	.L870	@cond_branch
	cmp	r0, #0
	beq	.L855	@cond_branch
	b	.L853
.L874:
	.align	2, 0
.L873:
	.word	gSharedMem
.L870:
	cmp	r0, #0x2
	beq	.L866	@cond_branch
	b	.L853
.L855:
	bl	sub_80F5DD4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L857	@cond_branch
	cmp	r0, #0x2
	beq	.L858	@cond_branch
	ldr	r0, .L875
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L860	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L875+0x4
	bl	sub_80EBDBC
	b	.L853
.L876:
	.align	2, 0
.L875:
	.word	gMain
	.word	sub_80EDEE4
.L857:
	mov	r0, #0x5
	bl	PlaySE
	bl	ShowMapNamePopUpWindow
	b	.L853
.L858:
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L872
.L860:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L853	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L877
	bl	sub_80EBDBC
	b	.L853
.L878:
	.align	2, 0
.L877:
	.word	sub_80EDE70
.L864:
	bl	sub_80F0718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L853	@cond_branch
	bl	ShowMapNamePopUpWindow
	bl	sub_80F3264
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L872
.L866:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L853	@cond_branch
.L872:
	strh	r0, [r4]
.L853:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 sub_80EDDBC,.Lfe32-sub_80EDDBC
	.align	2, 0
	.type	 sub_80EDE70,function
	.thumb_func
sub_80EDE70:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L889
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r4, r0, r1
	ldrh	r2, [r4]
	cmp	r2, #0x1
	beq	.L882	@cond_branch
	cmp	r2, #0x1
	bgt	.L887	@cond_branch
	cmp	r2, #0
	beq	.L881	@cond_branch
	b	.L879
.L890:
	.align	2, 0
.L889:
	.word	gSharedMem
.L887:
	cmp	r2, #0x2
	beq	.L884	@cond_branch
	b	.L879
.L881:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L888
.L882:
	ldr	r0, .L891
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L879	@cond_branch
	bl	sub_80F3130
	mov	r0, #0x2
	bl	sub_80F2D6C
.L888:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L879
.L892:
	.align	2, 0
.L891:
	.word	gPaletteFade
.L884:
	ldr	r0, .L893
	bl	sub_80EBDBC
.L879:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L894:
	.align	2, 0
.L893:
	.word	sub_80EC00C
.Lfe33:
	.size	 sub_80EDE70,.Lfe33-sub_80EDE70
	.align	2, 0
	.type	 sub_80EDEE4,function
	.thumb_func
sub_80EDEE4:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L918
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0xa
	bls	.LCB5563
	b	.L895	@long jump
.LCB5563:
	lsl	r0, r0, #0x2
	ldr	r1, .L918+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L919:
	.align	2, 0
.L918:
	.word	gSharedMem
	.word	.L914
	.align	2, 0
	.align	2, 0
.L914:
	.word	.L897
	.word	.L898
	.word	.L900
	.word	.L901
	.word	.L903
	.word	.L904
	.word	.L906
	.word	.L908
	.word	.L909
	.word	.L910
	.word	.L912
.L897:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L916
.L898:
	ldr	r0, .L920
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5609
	b	.L895	@long jump
.LCB5609:
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80EED0C
	bl	sub_80F3130
	ldr	r1, .L920+0x4
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L917
.L921:
	.align	2, 0
.L920:
	.word	gPaletteFade
	.word	gSharedMem
.L900:
	bl	sub_80F66E0
	bl	sub_80EEE08
	ldr	r1, .L922
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L917
.L923:
	.align	2, 0
.L922:
	.word	gSharedMem
.L901:
	bl	sub_80F1080
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L895	@cond_branch
	ldr	r1, .L924
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L917
.L925:
	.align	2, 0
.L924:
	.word	gSharedMem
.L903:
	mov	r0, #0x5
	bl	sub_80EEFBC
	bl	sub_80F38B8
	ldr	r1, .L926
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L904:
	bl	sub_80F38EC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L895	@cond_branch
	ldr	r1, .L926
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L917
.L927:
	.align	2, 0
.L926:
	.word	gSharedMem
.L906:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L895	@cond_branch
	ldr	r1, .L928
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L917
.L929:
	.align	2, 0
.L928:
	.word	gSharedMem
.L908:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L930
	bl	SetVBlankCallback
	b	.L916
.L931:
	.align	2, 0
.L930:
	.word	sub_80EBD18
.L909:
	mov	r0, #0x3
	bl	sub_80EED2C
	ldr	r1, .L932
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L917
.L933:
	.align	2, 0
.L932:
	.word	gSharedMem
.L910:
	ldr	r0, .L934
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L895	@cond_branch
.L916:
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
.L917:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L895
.L935:
	.align	2, 0
.L934:
	.word	gPaletteFade
.L912:
	bl	sub_80F170C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L895	@cond_branch
	ldr	r0, .L936
	bl	sub_80EBDBC
.L895:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L937:
	.align	2, 0
.L936:
	.word	sub_80EE06C
.Lfe34:
	.size	 sub_80EDEE4,.Lfe34-sub_80EDEE4
	.align	2, 0
	.type	 sub_80EE06C,function
	.thumb_func
sub_80EE06C:
	push	{r4, r5, lr}
	ldr	r1, .L977
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x8
	bls	.LCB5822
	b	.L938	@long jump
.LCB5822:
	lsl	r0, r0, #0x2
	ldr	r1, .L977+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L978:
	.align	2, 0
.L977:
	.word	gSharedMem
	.word	.L973
	.align	2, 0
	.align	2, 0
.L973:
	.word	.L940
	.word	.L941
	.word	.L955
	.word	.L957
	.word	.L959
	.word	.L960
	.word	.L962
	.word	.L969
	.word	.L971
.L940:
	bl	sub_80F15A8
	ldr	r1, .L979
	mov	r5, #0xc1
	lsl	r5, r5, #0x2
	add	r1, r1, r5
	b	.L975
.L980:
	.align	2, 0
.L979:
	.word	gSharedMem
.L941:
	ldr	r2, .L981
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	add	r3, r2, #0
	cmp	r0, #0
	beq	.L945	@cond_branch
	ldr	r1, .L981+0x4
	add	r0, r4, r1
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	beq	.L945	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	bl	sub_80F6A4C
	mov	r5, #0xc1
	lsl	r5, r5, #0x2
	add	r1, r4, r5
	b	.L975
.L982:
	.align	2, 0
.L981:
	.word	gMain
	.word	0x87dc
.L945:
	ldrh	r1, [r3, #0x30]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L950	@cond_branch
	ldr	r1, .L983
	add	r0, r4, r1
	ldr	r2, .L983+0x4
	add	r1, r4, r2
	mov	r5, #0x0
	ldrsh	r2, [r0, r5]
	mov	r5, #0x0
	ldrsh	r0, [r1, r5]
	cmp	r2, r0
	bge	.L950	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	sub_80F6A4C
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L975
.L984:
	.align	2, 0
.L983:
	.word	0x87dc
	.word	0x8774
.L950:
	ldrh	r2, [r3, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L952	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0xb
	bl	sub_80EEFBC
	ldr	r0, .L985
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	b	.L976
.L986:
	.align	2, 0
.L985:
	.word	gSharedMem
.L952:
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB5972
	b	.L938	@long jump
.LCB5972:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L987
	bl	sub_80EBDBC
	b	.L938
.L988:
	.align	2, 0
.L987:
	.word	sub_80EE294
.L955:
	bl	sub_80F6AF0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5993
	b	.L938	@long jump
.LCB5993:
	ldr	r1, .L989
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L975
.L990:
	.align	2, 0
.L989:
	.word	gSharedMem
.L957:
	bl	sub_8055870
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L938	@cond_branch
	ldr	r0, .L991
	mov	r5, #0xc1
	lsl	r5, r5, #0x2
	add	r0, r0, r5
	strh	r1, [r0]
	b	.L938
.L992:
	.align	2, 0
.L991:
	.word	gSharedMem
.L959:
	bl	sub_80F3B00
	ldr	r1, .L993
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
.L975:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L938
.L994:
	.align	2, 0
.L993:
	.word	gSharedMem
.L960:
	bl	sub_80F3B58
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L938	@cond_branch
	bl	sub_80F1494
	ldr	r1, .L995
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	bl	sub_80EED9C
	b	.L938
.L996:
	.align	2, 0
.L995:
	.word	gSharedMem
.L962:
	bl	sub_80F68E8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L966	@cond_branch
	cmp	r0, #0x1
	bne	.L966	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_80F3B94
	ldr	r0, .L997
	mov	r5, #0xc1
	lsl	r5, r5, #0x2
	add	r0, r0, r5
	mov	r1, #0x7
	strh	r1, [r0]
	b	.L938
.L998:
	.align	2, 0
.L997:
	.word	gSharedMem
.L966:
	ldr	r0, .L999
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L938	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_80F3B94
	ldr	r0, .L999+0x4
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0]
	b	.L938
.L1000:
	.align	2, 0
.L999:
	.word	gMain
	.word	gSharedMem
.L969:
	bl	sub_80F3BD4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L938	@cond_branch
	ldr	r0, .L1001
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r0, r2
.L976:
	mov	r1, #0x4
	strh	r1, [r0]
	b	.L938
.L1002:
	.align	2, 0
.L1001:
	.word	gSharedMem
.L971:
	bl	sub_80F3BD4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L938	@cond_branch
	mov	r0, #0x5
	bl	sub_80EEFBC
	ldr	r0, .L1003
	mov	r5, #0xc1
	lsl	r5, r5, #0x2
	add	r0, r0, r5
	strh	r4, [r0]
.L938:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1004:
	.align	2, 0
.L1003:
	.word	gSharedMem
.Lfe35:
	.size	 sub_80EE06C,.Lfe35-sub_80EE06C
	.align	2, 0
	.type	 sub_80EE294,function
	.thumb_func
sub_80EE294:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L1024
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x8
	bls	.LCB6193
	b	.L1005	@long jump
.LCB6193:
	lsl	r0, r0, #0x2
	ldr	r1, .L1024+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1025:
	.align	2, 0
.L1024:
	.word	gSharedMem
	.word	.L1020
	.align	2, 0
	.align	2, 0
.L1020:
	.word	.L1007
	.word	.L1008
	.word	.L1010
	.word	.L1011
	.word	.L1013
	.word	.L1014
	.word	.L1016
	.word	.L1017
	.word	.L1018
.L1007:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L1022
.L1008:
	ldr	r0, .L1026
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1005	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80EED0C
	bl	sub_80F3C2C
	bl	sub_80EEE08
	b	.L1023
.L1027:
	.align	2, 0
.L1026:
	.word	gPaletteFade
.L1010:
	bl	sub_80F6134
	mov	r0, #0x1
	bl	sub_80F0264
	ldr	r1, .L1028
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L1011:
	bl	sub_80F02A0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1005	@cond_branch
	b	.L1023
.L1029:
	.align	2, 0
.L1028:
	.word	gSharedMem
.L1013:
	mov	r0, #0x4
	bl	sub_80EEFBC
	mov	r0, #0x1
	bl	sub_80F3008
	ldr	r0, .L1030
	bl	SetVBlankCallback
	ldr	r1, .L1030+0x4
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L1022
.L1031:
	.align	2, 0
.L1030:
	.word	sub_80EBD18
	.word	gSharedMem
.L1014:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L1005	@cond_branch
	b	.L1023
.L1016:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r4, r2
	b	.L1022
.L1017:
	mov	r0, #0x4
	bl	sub_80EED2C
.L1023:
	ldr	r1, .L1032
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
.L1022:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L1005
.L1033:
	.align	2, 0
.L1032:
	.word	gSharedMem
.L1018:
	ldr	r0, .L1034
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1005	@cond_branch
	ldr	r0, .L1034+0x4
	bl	sub_80EBDBC
.L1005:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1035:
	.align	2, 0
.L1034:
	.word	gPaletteFade
	.word	sub_80EDDBC
.Lfe36:
	.size	 sub_80EE294,.Lfe36-sub_80EE294
	.align	2, 0
	.type	 sub_80EE3D8,function
	.thumb_func
sub_80EE3D8:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L1063
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0xd
	bls	.LCB6398
	b	.L1036	@long jump
.LCB6398:
	lsl	r0, r0, #0x2
	ldr	r1, .L1063+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1064:
	.align	2, 0
.L1063:
	.word	gSharedMem
	.word	.L1059
	.align	2, 0
	.align	2, 0
.L1059:
	.word	.L1038
	.word	.L1039
	.word	.L1041
	.word	.L1043
	.word	.L1045
	.word	.L1046
	.word	.L1047
	.word	.L1049
	.word	.L1050
	.word	.L1052
	.word	.L1053
	.word	.L1055
	.word	.L1056
	.word	.L1057
.L1038:
	bl	sub_80F1E84
	mov	r0, #0x0
	bl	sub_80F2D04
	b	.L1061
.L1039:
	bl	sub_80F1F10
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6430
	b	.L1036	@long jump
.LCB6430:
	mov	r0, #0x9
	bl	sub_80EEFBC
	b	.L1061
.L1041:
	bl	sub_80EEF34
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB6442
	b	.L1036	@long jump
.LCB6442:
	ldr	r4, .L1065
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L1062
.L1066:
	.align	2, 0
.L1065:
	.word	gSharedMem
.L1043:
	ldr	r0, .L1067
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1036	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80EED0C
	bl	sub_80EF814
	bl	sub_80EEE08
	b	.L1061
.L1068:
	.align	2, 0
.L1067:
	.word	gPaletteFade
.L1045:
	bl	sub_80F2620
	b	.L1061
.L1046:
	mov	r0, #0x2
	bl	sub_80F0264
	ldr	r1, .L1069
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L1047:
	bl	sub_80F02A0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1036	@cond_branch
	b	.L1061
.L1070:
	.align	2, 0
.L1069:
	.word	gSharedMem
.L1049:
	mov	r0, #0x3
	bl	sub_80F2C80
	ldr	r1, .L1071
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L1050:
	mov	r0, #0x3
	bl	sub_80F2CBC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1036	@cond_branch
	b	.L1061
.L1072:
	.align	2, 0
.L1071:
	.word	gSharedMem
.L1052:
	mov	r0, #0x2
	bl	sub_80F3008
	b	.L1061
.L1053:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L1036	@cond_branch
	b	.L1061
.L1055:
	bl	sub_80F6F10
	ldr	r4, .L1073
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L1073+0x4
	bl	SetVBlankCallback
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
	b	.L1062
.L1074:
	.align	2, 0
.L1073:
	.word	gSharedMem
	.word	sub_80EBD68
.L1056:
	mov	r0, #0x5
	bl	sub_80EED2C
.L1061:
	ldr	r1, .L1075
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
.L1062:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L1036
.L1076:
	.align	2, 0
.L1075:
	.word	gSharedMem
.L1057:
	ldr	r0, .L1077
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1036	@cond_branch
	ldr	r0, .L1077+0x4
	bl	sub_80EBDBC
.L1036:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1078:
	.align	2, 0
.L1077:
	.word	gPaletteFade
	.word	sub_80EE58C
.Lfe37:
	.size	 sub_80EE3D8,.Lfe37-sub_80EE3D8
	.align	2, 0
	.type	 sub_80EE58C,function
	.thumb_func
sub_80EE58C:
	push	{r4, r5, lr}
	ldr	r5, .L1099
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r4, r5, r0
	ldrh	r0, [r4]
	cmp	r0, #0x1
	beq	.L1090	@cond_branch
	cmp	r0, #0x1
	bgt	.L1096	@cond_branch
	cmp	r0, #0
	beq	.L1081	@cond_branch
	b	.L1079
.L1100:
	.align	2, 0
.L1099:
	.word	gSharedMem
.L1096:
	cmp	r0, #0x2
	beq	.L1092	@cond_branch
	b	.L1079
.L1081:
	bl	sub_80F5DD4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1083	@cond_branch
	cmp	r0, #0x2
	beq	.L1084	@cond_branch
	ldr	r0, .L1101
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1086	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1101+0x4
	bl	sub_80EBDBC
	b	.L1079
.L1102:
	.align	2, 0
.L1101:
	.word	gMain
	.word	sub_80EE658
.L1083:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L1103
	add	r0, r5, r1
	ldrb	r0, [r0]
	bl	sub_80F0FFC
	b	.L1079
.L1104:
	.align	2, 0
.L1103:
	.word	0x876e
.L1084:
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L1098
.L1086:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1079	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1105
	bl	sub_80EBDBC
	b	.L1079
.L1106:
	.align	2, 0
.L1105:
	.word	sub_80EE8F4
.L1090:
	bl	sub_80F0718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1079	@cond_branch
	ldr	r1, .L1107
	add	r0, r5, r1
	ldrb	r0, [r0]
	bl	sub_80F0FFC
	bl	sub_80F3264
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L1098
.L1108:
	.align	2, 0
.L1107:
	.word	0x876e
.L1092:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L1079	@cond_branch
.L1098:
	strh	r0, [r4]
.L1079:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 sub_80EE58C,.Lfe38-sub_80EE58C
	.align	2, 0
	.type	 sub_80EE658,function
	.thumb_func
sub_80EE658:
	push	{r4, r5, lr}
	ldr	r1, .L1156
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0x11
	bls	.LCB6810
	b	.L1109	@long jump
.LCB6810:
	lsl	r0, r0, #0x2
	ldr	r1, .L1156+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1157:
	.align	2, 0
.L1156:
	.word	gSharedMem
	.word	.L1150
	.align	2, 0
	.align	2, 0
.L1150:
	.word	.L1111
	.word	.L1112
	.word	.L1114
	.word	.L1115
	.word	.L1117
	.word	.L1118
	.word	.L1119
	.word	.L1120
	.word	.L1123
	.word	.L1135
	.word	.L1138
	.word	.L1139
	.word	.L1140
	.word	.L1142
	.word	.L1143
	.word	.L1145
	.word	.L1146
	.word	.L1148
.L1111:
	mov	r0, #0x1
	bl	sub_80F3294
	mov	r0, #0xa
	bl	sub_80EEFBC
	bl	sub_80F0B24
	b	.L1152
.L1112:
	bl	sub_80F0B44
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6844
	b	.L1109	@long jump
.LCB6844:
	ldr	r1, .L1158
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L1153
.L1159:
	.align	2, 0
.L1158:
	.word	gSharedMem
.L1114:
	bl	sub_80F0F64
	ldr	r1, .L1160
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L1153
.L1161:
	.align	2, 0
.L1160:
	.word	gSharedMem
.L1115:
	bl	sub_80F0FEC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6879
	b	.L1109	@long jump
.LCB6879:
	mov	r0, #0x1
	bl	sub_80F6FB8
	b	.L1152
.L1117:
	bl	sub_80F6DB8
	ldr	r1, .L1162
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L1153
.L1163:
	.align	2, 0
.L1162:
	.word	gSharedMem
.L1118:
	ldr	r4, .L1164
	add	r0, r4, #0
	sub	r0, r0, #0x1a
	ldrh	r1, [r0]
	add	r0, r4, #0
	bl	sub_80F700C
	add	r0, r4, #0
	bl	sub_80F42C4
	ldr	r1, .L1164+0x4
	add	r4, r4, r1
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L1109
.L1165:
	.align	2, 0
.L1164:
	.word	gSharedMem+0x8788
	.word	0xffff7b7c
.L1119:
	bl	sub_80F0CD8
	ldr	r1, .L1166
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L1120:
	bl	sub_80F6E9C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6940
	b	.L1109	@long jump
.LCB6940:
	bl	sub_80F0D5C
	b	.L1154
.L1167:
	.align	2, 0
.L1166:
	.word	gSharedMem
.L1123:
	ldr	r2, .L1168
	ldrh	r1, [r2, #0x2c]
	mov	r0, #0x40
	and	r0, r0, r1
	add	r3, r2, #0
	cmp	r0, #0
	beq	.L1127	@cond_branch
	ldr	r1, .L1168+0x4
	add	r0, r4, r1
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	beq	.L1127	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	bl	sub_80F708C
	mov	r5, #0xc1
	lsl	r5, r5, #0x2
	add	r1, r4, r5
	b	.L1155
.L1169:
	.align	2, 0
.L1168:
	.word	gMain
	.word	0x87dc
.L1127:
	ldrh	r1, [r3, #0x2c]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1132	@cond_branch
	ldr	r1, .L1170
	add	r0, r4, r1
	ldr	r2, .L1170+0x4
	add	r1, r4, r2
	mov	r5, #0x0
	ldrsh	r2, [r0, r5]
	mov	r5, #0x0
	ldrsh	r0, [r1, r5]
	cmp	r2, r0
	bge	.L1132	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	sub_80F708C
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r4, r0
.L1155:
	mov	r0, #0x10
	strh	r0, [r1]
	b	.L1109
.L1171:
	.align	2, 0
.L1170:
	.word	0x87dc
	.word	0x8774
.L1132:
	ldrh	r1, [r3, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1109	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_80F4394
	bl	sub_80F0EC0
	ldr	r1, .L1172
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L1153
.L1173:
	.align	2, 0
.L1172:
	.word	gSharedMem
.L1135:
	bl	sub_80F6ED4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1109	@cond_branch
	bl	sub_80F0EF4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1109	@cond_branch
	mov	r0, #0x0
	bl	sub_80F6FB8
	bl	sub_80F2FB0
	b	.L1152
.L1138:
	bl	sub_80F6134
	ldr	r1, .L1174
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L1153
.L1175:
	.align	2, 0
.L1174:
	.word	gSharedMem
.L1139:
	bl	sub_80F0FA0
	ldr	r1, .L1176
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L1153
.L1177:
	.align	2, 0
.L1176:
	.word	gSharedMem
.L1140:
	bl	sub_80F0FEC
	b	.L1154
.L1142:
	bl	sub_80F0C28
	ldr	r1, .L1178
	mov	r0, #0xc1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	b	.L1153
.L1179:
	.align	2, 0
.L1178:
	.word	gSharedMem
.L1143:
	bl	sub_80F0C48
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1109	@cond_branch
	ldr	r1, .L1180
	mov	r2, #0xc1
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	b	.L1153
.L1181:
	.align	2, 0
.L1180:
	.word	gSharedMem
.L1145:
	mov	r0, #0x9
	bl	sub_80EEFBC
	mov	r0, #0x0
	bl	sub_80F3294
	ldr	r0, .L1182
	bl	sub_80EBDBC
	bl	sub_80EED9C
	b	.L1109
.L1183:
	.align	2, 0
.L1182:
	.word	sub_80EE58C
.L1146:
	bl	sub_80F70FC
.L1154:
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1109	@cond_branch
.L1152:
	ldr	r1, .L1184
	mov	r5, #0xc1
	lsl	r5, r5, #0x2
	add	r1, r1, r5
.L1153:
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L1109
.L1185:
	.align	2, 0
.L1184:
	.word	gSharedMem
.L1148:
	bl	sub_8055870
	cmp	r0, #0
	bne	.L1109	@cond_branch
	ldr	r0, .L1186
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0]
.L1109:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1187:
	.align	2, 0
.L1186:
	.word	gSharedMem
.Lfe39:
	.size	 sub_80EE658,.Lfe39-sub_80EE658
	.align	2, 0
	.type	 sub_80EE8F4,function
	.thumb_func
sub_80EE8F4:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L1198
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r4, r0, r1
	ldrh	r2, [r4]
	cmp	r2, #0x1
	beq	.L1191	@cond_branch
	cmp	r2, #0x1
	bgt	.L1196	@cond_branch
	cmp	r2, #0
	beq	.L1190	@cond_branch
	b	.L1188
.L1199:
	.align	2, 0
.L1198:
	.word	gSharedMem
.L1196:
	cmp	r2, #0x2
	beq	.L1193	@cond_branch
	b	.L1188
.L1190:
	mov	r1, #0xc2
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	neg	r1, r1
	str	r2, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L1197
.L1191:
	ldr	r0, .L1200
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1188	@cond_branch
	bl	sub_80F3130
	mov	r0, #0x2
	bl	sub_80F2D6C
	bl	sub_80F6FFC
.L1197:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L1188
.L1201:
	.align	2, 0
.L1200:
	.word	gPaletteFade
.L1193:
	ldr	r0, .L1202
	bl	sub_80EBDBC
.L1188:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1203:
	.align	2, 0
.L1202:
	.word	sub_80EC00C
.Lfe40:
	.size	 sub_80EE8F4,.Lfe40-sub_80EE8F4
	.align	2, 0
	.type	 sub_80EE96C,function
	.thumb_func
sub_80EE96C:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L1208
	mov	r1, #0xc1
	lsl	r1, r1, #0x2
	add	r5, r0, r1
	ldrh	r4, [r5]
	cmp	r4, #0
	bne	.L1205	@cond_branch
	mov	r0, #0x6f
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	b	.L1204
.L1209:
	.align	2, 0
.L1208:
	.word	gSharedMem
.L1205:
	ldr	r0, .L1210
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1204	@cond_branch
	bl	sub_80F5BDC
	bl	sub_805469C
.L1204:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1211:
	.align	2, 0
.L1210:
	.word	gPaletteFade
.Lfe41:
	.size	 sub_80EE96C,.Lfe41-sub_80EE96C
	.align	2, 0
	.type	 sub_80EE9C0,function
	.thumb_func
sub_80EE9C0:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	bl	sub_80F1E84
	ldr	r1, .L1213
	ldr	r2, .L1213+0x4
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r4, [r0]
	ldr	r3, .L1213+0x8
	add	r0, r1, r3
	strb	r5, [r0]
	add	r3, r3, #0x1
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r0, .L1213+0xc
	add	r1, r1, r0
	strb	r6, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1214:
	.align	2, 0
.L1213:
	.word	gSharedMem
	.word	0x6e14
	.word	0x6e15
	.word	0x6e17
.Lfe42:
	.size	 sub_80EE9C0,.Lfe42-sub_80EE9C0
	.align	2, 0
	.type	 sub_80EEA0C,function
	.thumb_func
sub_80EEA0C:
	.syntax unified
push {r4,lr}
	ldr r1, _080EEA28 @ =gSharedMem
	ldr r2, _080EEA2C @ =0x00006e16
	adds r0, r1, r2
	ldrb r0, [r0]
	adds r3, r1, 0
	cmp r0, 0x8
	bls _080EEA1E
	b _080EEBFA
_080EEA1E:
	lsls r0, 2
	ldr r1, _080EEA30 @ =_080EEA34
	adds r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080EEA28: .4byte gSharedMem
_080EEA2C: .4byte 0x00006e16
_080EEA30: .4byte _080EEA34
	.align 2, 0
_080EEA34:
	.4byte _080EEA58
	.4byte _080EEA98
	.4byte _080EEAAE
	.4byte _080EEAD4
	.4byte _080EEB3E
	.4byte _080EEB68
	.4byte _080EEB88
	.4byte _080EEBAC
	.4byte _080EEBE4
_080EEA58:
	bl sub_80F1F10
	lsls r0, 24
	cmp r0, 0
	beq _080EEA64
	b _080EEC08
_080EEA64:
	ldr r1, _080EEA7C @ =gSharedMem
	ldr r4, _080EEA80 @ =0x00006e17
	adds r0, r1, r4
	ldrb r0, [r0]
	cmp r0, 0xC
	beq _080EEA88
	ldr r0, _080EEA84 @ =0x00006e16
	adds r1, r0
	movs r0, 0x1
	strb r0, [r1]
	b _080EEC08
	.align 2, 0
_080EEA7C: .4byte gSharedMem
_080EEA80: .4byte 0x00006e17
_080EEA84: .4byte 0x00006e16
_080EEA88:
	ldr r2, _080EEA94 @ =0x00006e16
	adds r1, r2
	movs r0, 0x3
	strb r0, [r1]
	b _080EEC08
	.align 2, 0
_080EEA94: .4byte 0x00006e16
_080EEA98:
	ldr r4, _080EEAC8 @ =gSharedMem
	ldr r1, _080EEACC @ =0x00006e17
	adds r0, r4, r1
	ldrb r0, [r0]
	bl sub_80F2C80
	ldr r2, _080EEAD0 @ =0x00006e16
	adds r4, r2
	ldrb r0, [r4]
	adds r0, 0x1
	strb r0, [r4]
_080EEAAE:
	ldr r4, _080EEAC8 @ =gSharedMem
	ldr r1, _080EEACC @ =0x00006e17
	adds r0, r4, r1
	ldrb r0, [r0]
	bl sub_80F2CBC
	lsls r0, 24
	cmp r0, 0
	beq _080EEAC2
	b _080EEC08
_080EEAC2:
	ldr r2, _080EEAD0 @ =0x00006e16
	adds r1, r4, r2
	b _080EEB76
	.align 2, 0
_080EEAC8: .4byte gSharedMem
_080EEACC: .4byte 0x00006e17
_080EEAD0: .4byte 0x00006e16
_080EEAD4:
	adds r2, r3, 0
	ldr r4, _080EEAF8 @ =0x00006e15
	adds r0, r2, r4
	ldrb r1, [r0]
	subs r4, 0x68
	adds r0, r2, r4
	strb r1, [r0]
	ldr r1, _080EEAFC @ =0x00006e14
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, 0x1
	beq _080EEB14
	cmp r0, 0x1
	bgt _080EEB00
	cmp r0, 0
	beq _080EEB06
	b _080EEB28
	.align 2, 0
_080EEAF8: .4byte 0x00006e15
_080EEAFC: .4byte 0x00006e14
_080EEB00:
	cmp r0, 0x2
	beq _080EEB20
	b _080EEB28
_080EEB06:
	ldr r4, _080EEB10 @ =0x00006dae
	adds r1, r2, r4
	movs r0, 0x5
	b _080EEB26
	.align 2, 0
_080EEB10: .4byte 0x00006dae
_080EEB14:
	ldr r0, _080EEB1C @ =0x00006dae
	adds r1, r2, r0
	movs r0, 0x3
	b _080EEB26
	.align 2, 0
_080EEB1C: .4byte 0x00006dae
_080EEB20:
	ldr r2, _080EEB58 @ =0x00006dae
	adds r1, r3, r2
	movs r0, 0x6
_080EEB26:
	strb r0, [r1]
_080EEB28:
	ldr r4, _080EEB5C @ =gSharedMem
	ldr r1, _080EEB60 @ =0x00006e14
	adds r0, r4, r1
	ldrb r0, [r0]
	bl sub_80F1B8C
	ldr r2, _080EEB64 @ =0x00006e16
	adds r4, r2
	ldrb r0, [r4]
	adds r0, 0x1
	strb r0, [r4]
_080EEB3E:
	ldr r4, _080EEB5C @ =gSharedMem
	ldr r1, _080EEB60 @ =0x00006e14
	adds r0, r4, r1
	ldrb r0, [r0]
	bl sub_80F1BC8
	lsls r0, 24
	cmp r0, 0
	bne _080EEC08
	ldr r2, _080EEB64 @ =0x00006e16
	adds r1, r4, r2
	b _080EEB76
	.align 2, 0
_080EEB58: .4byte 0x00006dae
_080EEB5C: .4byte gSharedMem
_080EEB60: .4byte 0x00006e14
_080EEB64: .4byte 0x00006e16
_080EEB68:
	bl sub_8055870
	cmp r0, 0
	bne _080EEC08
	ldr r1, _080EEB80 @ =gSharedMem
	ldr r4, _080EEB84 @ =0x00006e16
	adds r1, r4
_080EEB76:
	ldrb r0, [r1]
	adds r0, 0x1
	strb r0, [r1]
	b _080EEC08
	.align 2, 0
_080EEB80: .4byte gSharedMem
_080EEB84: .4byte 0x00006e16
_080EEB88:
	bl sub_80F1DF0
	ldr r4, _080EEBA0 @ =gSharedMem
	ldr r1, _080EEBA4 @ =0x00006e14
	adds r0, r4, r1
	ldrb r0, [r0]
	bl sub_80EF490
	ldr r2, _080EEBA8 @ =0x00006e16
	adds r4, r2
	b _080EEBCC
	.align 2, 0
_080EEBA0: .4byte gSharedMem
_080EEBA4: .4byte 0x00006e14
_080EEBA8: .4byte 0x00006e16
_080EEBAC:
	bl sub_80F1E50
	lsls r0, 24
	cmp r0, 0
	bne _080EEC08
	ldr r4, _080EEBD4 @ =gSharedMem
	ldr r1, _080EEBD8 @ =0x00006e14
	adds r0, r4, r1
	ldrb r0, [r0]
	ldr r2, _080EEBDC @ =0x00006dad
	adds r1, r4, r2
	ldrb r1, [r1]
	bl sub_80EF428
	ldr r0, _080EEBE0 @ =0x00006e16
	adds r4, r0
_080EEBCC:
	ldrb r0, [r4]
	adds r0, 0x1
	strb r0, [r4]
	b _080EEC08
	.align 2, 0
_080EEBD4: .4byte gSharedMem
_080EEBD8: .4byte 0x00006e14
_080EEBDC: .4byte 0x00006dad
_080EEBE0: .4byte 0x00006e16
_080EEBE4:
	bl sub_80EF4F8
	lsls r0, 24
	cmp r0, 0
	bne _080EEC08
	ldr r1, _080EEC00 @ =gSharedMem
	ldr r2, _080EEC04 @ =0x00006e16
	adds r1, r2
	ldrb r0, [r1]
	adds r0, 0x1
	strb r0, [r1]
_080EEBFA:
	movs r0, 0
	b _080EEC0A
	.align 2, 0
_080EEC00: .4byte gSharedMem
_080EEC04: .4byte 0x00006e16
_080EEC08:
	movs r0, 0x1
_080EEC0A:
	pop {r4}
	pop {r1}
	bx r1

.syntax divided

	.code	16
.Lfe43:
	.size	 sub_80EEA0C,.Lfe43-sub_80EEA0C
	.align	2, 0
	.type	 sub_80EEC10,function
	.thumb_func
sub_80EEC10:
	push	{r4, lr}
	ldr	r0, .L1232
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1217	@cond_branch
	ldr	r1, .L1232+0x4
	add	r3, r1, #0x1
	add	r2, r1, #0x5
.L1218:
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L1220	@cond_branch
	ldrb	r0, [r3]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L1220:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1218	@cond_branch
	mov	r0, #0x1
	b	.L1231
.L1233:
	.align	2, 0
.L1232:
	.word	gMain
	.word	gSharedMem+0x6dad
.L1217:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1224	@cond_branch
	ldr	r1, .L1234
	mov	r4, #0x0
	mov	r2, #0x1
	ldrsb	r2, [r1, r2]
	add	r3, r1, #0x5
.L1225:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, r2
	blt	.L1227	@cond_branch
	strb	r4, [r1]
.L1227:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1225	@cond_branch
	mov	r0, #0x1
	b	.L1231
.L1235:
	.align	2, 0
.L1234:
	.word	gSharedMem+0x6dad
.L1224:
	mov	r0, #0x0
.L1231:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 sub_80EEC10,.Lfe44-sub_80EEC10
	.align	2, 0
	.type	 sub_80EEC90,function
	.thumb_func
sub_80EEC90:
	push	{r4, lr}
	ldr	r0, .L1242
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	beq	.L1237	@cond_branch
	ldr	r2, .L1242+0x4
	ldr	r0, .L1242+0x8
	add	r1, r2, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L1240	@cond_branch
	ldr	r3, .L1242+0xc
	add	r0, r2, r3
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	b	.L1240
.L1243:
	.align	2, 0
.L1242:
	.word	gMain
	.word	gSharedMem
	.word	0x6dad
	.word	0x6dae
.L1237:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1239	@cond_branch
	ldr	r0, .L1244
	ldr	r4, .L1244+0x4
	add	r2, r0, r4
	ldrb	r1, [r2]
	add	r1, r1, #0x1
	strb	r1, [r2]
	add	r4, r4, #0x1
	add	r0, r0, r4
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r1, r0
	blt	.L1240	@cond_branch
	strb	r3, [r2]
.L1240:
	mov	r0, #0x1
	b	.L1241
.L1245:
	.align	2, 0
.L1244:
	.word	gSharedMem
	.word	0x6dad
.L1239:
	mov	r0, #0x0
.L1241:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 sub_80EEC90,.Lfe45-sub_80EEC90
	.align	2, 0
	.type	 sub_80EED0C,function
	.thumb_func
sub_80EED0C:
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	strh	r0, [r1]
	bx	lr
.Lfe46:
	.size	 sub_80EED0C,.Lfe46-sub_80EED0C
	.align	2, 0
	.type	 sub_80EED1C,function
	.thumb_func
sub_80EED1C:
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0x92
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	bx	lr
.Lfe47:
	.size	 sub_80EED1C,.Lfe47-sub_80EED1C
	.align	2, 0
	.type	 sub_80EED2C,function
	.thumb_func
sub_80EED2C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bhi	.L1249	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1259
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1260:
	.align	2, 0
.L1259:
	.word	.L1256
	.align	2, 0
	.align	2, 0
.L1256:
	.word	.L1250
	.word	.L1251
	.word	.L1254
	.word	.L1253
	.word	.L1253
	.word	.L1255
.L1250:
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xfa
	lsl	r2, r2, #0x5
	b	.L1258
.L1251:
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	ldr	r2, .L1261
	b	.L1258
.L1262:
	.align	2, 0
.L1261:
	.word	0x1741
.L1253:
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xfa
	lsl	r2, r2, #0x5
	b	.L1258
.L1254:
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	ldr	r2, .L1263
	b	.L1258
.L1264:
	.align	2, 0
.L1263:
	.word	0x7b40
.L1255:
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xfd
	lsl	r2, r2, #0x6
.L1258:
	add	r0, r2, #0
	strh	r0, [r1]
.L1249:
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 sub_80EED2C,.Lfe48-sub_80EED2C
	.align	2, 0
	.type	 sub_80EED9C,function
	.thumb_func
sub_80EED9C:
	push	{lr}
	ldr	r2, .L1266
	ldr	r0, .L1266+0x4
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	str	r1, [r2]
	ldr	r1, .L1266+0x8
	str	r1, [r0]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L1267:
	.align	2, 0
.L1266:
	.word	gUnknown_03000744
	.word	gSharedMem
	.word	sub_80EEDC4
.Lfe49:
	.size	 sub_80EED9C,.Lfe49-sub_80EED9C
	.align	2, 0
	.type	 sub_80EEDC4,function
	.thumb_func
sub_80EEDC4:
	push	{lr}
	bl	sub_8055870
	cmp	r0, #0x1
	beq	.L1269	@cond_branch
	ldr	r0, .L1270
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r1, .L1270+0x4
	ldr	r1, [r1]
	str	r1, [r0]
.L1269:
	pop	{r0}
	bx	r0
.L1271:
	.align	2, 0
.L1270:
	.word	gSharedMem
	.word	gUnknown_03000744
.Lfe50:
	.size	 sub_80EEDC4,.Lfe50-sub_80EEDC4
	.align	2, 0
	.globl	sub_80EEDE8
	.type	 sub_80EEDE8,function
	.thumb_func
sub_80EEDE8:
	ldr	r0, .L1273
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x8
	strh	r1, [r0]
	sub	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	bx	lr
.L1274:
	.align	2, 0
.L1273:
	.word	0x4000010
.Lfe51:
	.size	 sub_80EEDE8,.Lfe51-sub_80EEDE8
	.align	2, 0
	.type	 sub_80EEE08,function
	.thumb_func
sub_80EEE08:
	ldr	r0, .L1276
	ldr	r0, [r0]
	ldr	r1, .L1276+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	bx	lr
.L1277:
	.align	2, 0
.L1276:
	.word	gUnknown_083DFEC4
	.word	0xd160
.Lfe52:
	.size	 sub_80EEE08,.Lfe52-sub_80EEE08
	.align	2, 0
	.type	 sub_80EEE20,function
	.thumb_func
sub_80EEE20:
	push	{lr}
	ldr	r0, .L1284
	ldr	r0, [r0]
	ldr	r1, .L1284+0x4
	add	r2, r0, r1
	mov	r1, #0x0
	strh	r1, [r2]
	ldr	r1, .L1284+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1279	@cond_branch
.L1280:
	bl	sub_80EEE54
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1280	@cond_branch
.L1279:
	pop	{r0}
	bx	r0
.L1285:
	.align	2, 0
.L1284:
	.word	gUnknown_083DFEC4
	.word	0xd160
	.word	0x6dac
.Lfe53:
	.size	 sub_80EEE20,.Lfe53-sub_80EEE20
	.align	2, 0
	.type	 sub_80EEE54,function
	.thumb_func
sub_80EEE54:
	push	{lr}
	ldr	r1, .L1296
	ldr	r0, [r1]
	ldr	r2, .L1296+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0x4
	bhi	.L1293	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1296+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1297:
	.align	2, 0
.L1296:
	.word	gUnknown_083DFEC4
	.word	0xd160
	.word	.L1294
	.align	2, 0
	.align	2, 0
.L1294:
	.word	.L1288
	.word	.L1289
	.word	.L1290
	.word	.L1291
	.word	.L1292
.L1288:
	ldr	r0, .L1298
	ldr	r1, .L1298+0x4
	bl	LZ77UnCompVram
	b	.L1287
.L1299:
	.align	2, 0
.L1298:
	.word	gPokenavHoennMapMisc_Gfx
	.word	0x600c000
.L1289:
	ldr	r0, .L1300
	ldr	r1, .L1300+0x4
	bl	LZ77UnCompVram
	b	.L1287
.L1301:
	.align	2, 0
.L1300:
	.word	gUnknown_08E99FB0
	.word	0x600d800
.L1290:
	ldr	r0, .L1302
	mov	r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	b	.L1287
.L1303:
	.align	2, 0
.L1302:
	.word	gPokenavHoennMap1_Pal
.L1291:
	mov	r0, #0x0
	bl	sub_80EF58C
	mov	r0, #0x1
	bl	sub_80EF58C
	mov	r0, #0x2
	bl	sub_80EF58C
	b	.L1287
.L1292:
	ldr	r2, [r2]
	mov	r3, #0xc3
	lsl	r3, r3, #0x2
	add	r0, r2, r3
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1304
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	ldr	r1, .L1304+0x4
	ldr	r3, .L1304+0x8
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L1304+0xc
	add	r2, r2, r0
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
.L1293:
	mov	r0, #0x0
	b	.L1295
.L1305:
	.align	2, 0
.L1304:
	.word	0x4000014
	.word	0x400000a
	.word	0x1b0c
	.word	0xd160
.L1287:
	ldr	r0, .L1306
	ldr	r1, [r0]
	ldr	r2, .L1306+0x4
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x1
.L1295:
	pop	{r1}
	bx	r1
.L1307:
	.align	2, 0
.L1306:
	.word	gUnknown_083DFEC4
	.word	0xd160
.Lfe54:
	.size	 sub_80EEE54,.Lfe54-sub_80EEE54
	.align	2, 0
	.type	 sub_80EEF34,function
	.thumb_func
sub_80EEF34:
	push	{r4, lr}
	mov	r3, #0x1
	ldr	r0, .L1312
	ldr	r0, [r0]
	mov	r1, #0xc3
	lsl	r1, r1, #0x2
	add	r2, r0, r1
	ldrh	r1, [r2]
	mov	r4, #0x0
	ldrsh	r0, [r2, r4]
	cmp	r0, #0x20
	bne	.L1309	@cond_branch
	mov	r0, #0x0
	b	.L1311
.L1313:
	.align	2, 0
.L1312:
	.word	gUnknown_083DFEC4
.L1309:
	add	r0, r1, #0x2
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	ble	.L1310	@cond_branch
	mov	r0, #0x20
	strh	r0, [r2]
	mov	r3, #0x0
.L1310:
	ldr	r1, .L1314
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r0, r3, #0
.L1311:
	pop	{r4}
	pop	{r1}
	bx	r1
.L1315:
	.align	2, 0
.L1314:
	.word	0x4000016
.Lfe55:
	.size	 sub_80EEF34,.Lfe55-sub_80EEF34
	.align	2, 0
	.globl	sub_80EEF78
	.type	 sub_80EEF78,function
	.thumb_func
sub_80EEF78:
	push	{r4, lr}
	mov	r3, #0x1
	ldr	r0, .L1320
	ldr	r0, [r0]
	mov	r1, #0xc3
	lsl	r1, r1, #0x2
	add	r2, r0, r1
	ldrh	r1, [r2]
	mov	r4, #0x0
	ldrsh	r0, [r2, r4]
	cmp	r0, #0
	bne	.L1317	@cond_branch
	mov	r0, #0x0
	b	.L1319
.L1321:
	.align	2, 0
.L1320:
	.word	gUnknown_083DFEC4
.L1317:
	sub	r0, r1, #0x2
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L1318	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r3, #0x0
.L1318:
	ldr	r1, .L1322
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r0, r3, #0
.L1319:
	pop	{r4}
	pop	{r1}
	bx	r1
.L1323:
	.align	2, 0
.L1322:
	.word	0x4000016
.Lfe56:
	.size	 sub_80EEF78,.Lfe56-sub_80EEF78
	.align	2, 0
	.globl	sub_80EEFBC
	.type	 sub_80EEFBC,function
	.thumb_func
sub_80EEFBC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1344
	ldr	r3, .L1344+0x4
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x11
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	str	r1, [sp, #0xc]
	mov	r1, #0x0
	mov	r2, #0x16
	bl	sub_809D104
	cmp	r4, #0xb
	bls	.LCB8179
	b	.L1325	@long jump
.LCB8179:
	lsl	r0, r4, #0x2
	ldr	r1, .L1344+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1345:
	.align	2, 0
.L1344:
	.word	0x600d800
	.word	gUnknown_08E9A100
	.word	.L1338
	.align	2, 0
	.align	2, 0
.L1338:
	.word	.L1326
	.word	.L1325
	.word	.L1328
	.word	.L1331
	.word	.L1332
	.word	.L1336
	.word	.L1325
	.word	.L1333
	.word	.L1334
	.word	.L1336
	.word	.L1337
	.word	.L1327
.L1326:
	ldr	r6, .L1346
	ldr	r0, .L1346+0x4
	mov	r8, r0
	mov	r0, #0x11
	str	r0, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	mov	r0, #0xa
	str	r0, [sp, #0x8]
	mov	r5, #0x2
	str	r5, [sp, #0xc]
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0x16
	mov	r3, r8
	bl	sub_809D104
	str	r4, [sp]
	mov	r0, #0x6
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	str	r5, [sp, #0xc]
	add	r0, r6, #0
	mov	r1, #0xa
	b	.L1340
.L1347:
	.align	2, 0
.L1346:
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1327:
	ldr	r0, .L1348
	ldr	r3, .L1348+0x4
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x6
	str	r1, [sp, #0x4]
	mov	r1, #0x7
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	str	r1, [sp, #0xc]
	mov	r1, #0x8
	b	.L1341
.L1349:
	.align	2, 0
.L1348:
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1328:
	ldr	r0, .L1350
	ldr	r0, [r0]
	ldr	r1, .L1350+0x4
	add	r0, r0, r1
	ldrb	r7, [r0]
	cmp	r7, #0
	bne	.L1329	@cond_branch
	ldr	r5, .L1350+0x8
	ldr	r6, .L1350+0xc
	mov	r0, #0xa
	str	r0, [sp]
	mov	r4, #0x2
	str	r4, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x16
	add	r3, r6, #0
	bl	sub_809D104
	str	r7, [sp]
	mov	r0, #0x6
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0xa
	b	.L1342
.L1351:
	.align	2, 0
.L1350:
	.word	gUnknown_083DFEC4
	.word	0x6dac
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1329:
	ldr	r0, .L1352
	ldr	r3, .L1352+0x4
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x6
	str	r1, [sp, #0x4]
	mov	r1, #0x7
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	str	r1, [sp, #0xc]
	mov	r1, #0xa
.L1341:
	mov	r2, #0x16
	bl	sub_809D104
	b	.L1325
.L1353:
	.align	2, 0
.L1352:
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1331:
	ldr	r6, .L1354
	ldr	r0, .L1354+0x4
	mov	r8, r0
	mov	r5, #0x0
	str	r5, [sp]
	mov	r0, #0x4
	str	r0, [sp, #0x4]
	mov	r0, #0xa
	str	r0, [sp, #0x8]
	mov	r4, #0x2
	str	r4, [sp, #0xc]
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0x16
	mov	r3, r8
	bl	sub_809D104
	str	r5, [sp]
	mov	r0, #0x6
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r6, #0
	mov	r1, #0xa
	b	.L1340
.L1355:
	.align	2, 0
.L1354:
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1332:
	ldr	r5, .L1356
	ldr	r6, .L1356+0x4
	mov	r0, #0x14
	str	r0, [sp]
	mov	r4, #0x2
	str	r4, [sp, #0x4]
	mov	r0, #0xa
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x16
	add	r3, r6, #0
	bl	sub_809D104
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x6
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0xa
	b	.L1342
.L1357:
	.align	2, 0
.L1356:
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1333:
	ldr	r5, .L1358
	ldr	r6, .L1358+0x4
	mov	r1, #0xa
	str	r1, [sp]
	mov	r0, #0x4
	str	r0, [sp, #0x4]
	str	r1, [sp, #0x8]
	b	.L1343
.L1359:
	.align	2, 0
.L1358:
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1334:
	ldr	r5, .L1360
	ldr	r6, .L1360+0x4
	mov	r0, #0x14
	str	r0, [sp]
	mov	r0, #0x4
	str	r0, [sp, #0x4]
	mov	r0, #0xa
	str	r0, [sp, #0x8]
.L1343:
	mov	r4, #0x2
	str	r4, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x16
	add	r3, r6, #0
	bl	sub_809D104
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x6
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x7
.L1342:
	mov	r2, #0x16
	add	r3, r6, #0
	bl	sub_809D104
	b	.L1325
.L1361:
	.align	2, 0
.L1360:
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1336:
	ldr	r6, .L1362
	ldr	r1, .L1362+0x4
	mov	r8, r1
	mov	r5, #0x0
	str	r5, [sp]
	mov	r4, #0x2
	str	r4, [sp, #0x4]
	mov	r0, #0xa
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0x16
	mov	r3, r8
	bl	sub_809D104
	str	r5, [sp]
	mov	r0, #0x6
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r6, #0
	mov	r1, #0x8
.L1340:
	mov	r2, #0x16
	mov	r3, r8
	bl	sub_809D104
	b	.L1325
.L1363:
	.align	2, 0
.L1362:
	.word	0x600d800
	.word	gUnknown_08E9A100
.L1337:
	ldr	r0, .L1364
	ldr	r3, .L1364+0x4
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x6
	str	r1, [sp, #0x4]
	mov	r1, #0x7
	str	r1, [sp, #0x8]
	mov	r1, #0x2
	str	r1, [sp, #0xc]
	mov	r1, #0x8
	mov	r2, #0x16
	bl	sub_809D104
.L1325:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1365:
	.align	2, 0
.L1364:
	.word	0x600d800
	.word	gUnknown_08E9A100
.Lfe57:
	.size	 sub_80EEFBC,.Lfe57-sub_80EEFBC
	.align	2, 0
	.globl	sub_80EF248
	.type	 sub_80EF248,function
	.thumb_func
sub_80EF248:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L1372
	ldr	r0, [r0]
	ldr	r1, .L1372+0x4
	add	r2, r0, r1
	mov	r1, #0x0
	strh	r1, [r2]
	ldr	r1, .L1372+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1367	@cond_branch
.L1368:
	add	r0, r4, #0
	bl	sub_80EF284
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1368	@cond_branch
.L1367:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1373:
	.align	2, 0
.L1372:
	.word	gUnknown_083DFEC4
	.word	0xd160
	.word	0x6dac
.Lfe58:
	.size	 sub_80EF248,.Lfe58-sub_80EF248
	.align	2, 0
	.globl	sub_80EF284
	.type	 sub_80EF284,function
	.thumb_func
sub_80EF284:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1395
	ldr	r0, [r1]
	ldr	r3, .L1395+0x4
	add	r0, r0, r3
	ldrh	r0, [r0]
	add	r3, r1, #0
	cmp	r0, #0xb
	bls	.LCB8581
	b	.L1394	@long jump
.LCB8581:
	lsl	r0, r0, #0x2
	ldr	r1, .L1395+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1396:
	.align	2, 0
.L1395:
	.word	gUnknown_083DFEC4
	.word	0xd160
	.word	.L1390
	.align	2, 0
	.align	2, 0
.L1390:
	.word	.L1376
	.word	.L1377
	.word	.L1378
	.word	.L1379
	.word	.L1381
	.word	.L1382
	.word	.L1383
	.word	.L1384
	.word	.L1385
	.word	.L1386
	.word	.L1387
	.word	.L1388
.L1376:
	bl	sub_80EEDE8
	b	.L1375
.L1377:
	ldr	r0, .L1397
	bl	SetUpWindowConfig
	b	.L1375
.L1398:
	.align	2, 0
.L1397:
	.word	gWindowConfig_81E7224
.L1378:
	ldr	r0, .L1399
	bl	MultistepInitMenuWindowBegin
	b	.L1375
.L1400:
	.align	2, 0
.L1399:
	.word	gWindowConfig_81E7224
.L1379:
	bl	MultistepInitMenuWindowContinue
	cmp	r0, #0
	beq	.LCB8633
	b	.L1375	@long jump
.LCB8633:
	b	.L1392
.L1381:
	ldr	r1, .L1401
	ldr	r2, .L1401+0x4
	ldr	r0, .L1401+0x8
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L1401+0xc
	b	.L1393
.L1402:
	.align	2, 0
.L1401:
	.word	gUnknown_083DFEEC
	.word	0x6005000
	.word	0x40000d4
	.word	0x80000050
.L1382:
	ldr	r0, .L1403
	ldr	r1, .L1403+0x4
	bl	LZ77UnCompVram
	b	.L1375
.L1404:
	.align	2, 0
.L1403:
	.word	gUnknown_083DFF8C
	.word	0x600f800
.L1383:
	ldr	r1, .L1405
	ldr	r2, .L1405+0x4
	ldr	r0, .L1405+0x8
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L1405+0xc
.L1393:
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	b	.L1375
.L1406:
	.align	2, 0
.L1405:
	.word	gUnknown_083E005C
	.word	0x6008000
	.word	0x40000d4
	.word	0x80000010
.L1384:
	ldr	r0, .L1407
	ldr	r1, .L1407+0x4
	bl	LZ77UnCompVram
	b	.L1375
.L1408:
	.align	2, 0
.L1407:
	.word	gUnknown_083E007C
	.word	0x600e000
.L1385:
	ldr	r0, .L1409
	ldr	r1, .L1409+0x4
	bl	LZ77UnCompVram
	b	.L1375
.L1410:
	.align	2, 0
.L1409:
	.word	gPokenavOutlineTilemap
	.word	0x600e800
.L1386:
	ldr	r0, .L1411
	ldr	r1, .L1411+0x4
	bl	LZ77UnCompVram
	b	.L1375
.L1412:
	.align	2, 0
.L1411:
	.word	gPokenavOutlineTiles
	.word	0x6008020
.L1387:
	add	r0, r2, #0
	bl	sub_80EF54C
	ldr	r0, .L1413
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L1413+0x4
	mov	r1, #0x40
	mov	r2, #0x20
	bl	LoadPalette
	bl	sub_80EF7D4
	b	.L1375
.L1414:
	.align	2, 0
.L1413:
	.word	gUnknown_083DFECC
	.word	gPokenavOutlinePalette
.L1388:
	ldr	r1, .L1415
	ldr	r2, .L1415+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x4
	ldr	r2, .L1415+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	sub	r2, r2, #0xff
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x42
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, [r3]
	ldr	r3, .L1415+0xc
	add	r1, r1, r3
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L1394:
	mov	r0, #0x0
	b	.L1391
.L1416:
	.align	2, 0
.L1415:
	.word	0x4000008
	.word	0x1f01
	.word	0x1d0a
	.word	0xd160
.L1375:
	ldr	r0, .L1417
	ldr	r1, [r0]
	ldr	r0, .L1417+0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L1392:
	mov	r0, #0x1
.L1391:
	pop	{r1}
	bx	r1
.L1418:
	.align	2, 0
.L1417:
	.word	gUnknown_083DFEC4
	.word	0xd160
.Lfe59:
	.size	 sub_80EF284,.Lfe59-sub_80EF284
	.align	2, 0
	.globl	sub_80EF428
	.type	 sub_80EF428,function
	.thumb_func
sub_80EF428:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	mov	r1, #0x0
	cmp	r0, #0x1
	beq	.L1422	@cond_branch
	cmp	r0, #0x1
	bgt	.L1426	@cond_branch
	cmp	r0, #0
	beq	.L1421	@cond_branch
	b	.L1420
.L1426:
	cmp	r3, #0x2
	beq	.L1423	@cond_branch
	b	.L1420
.L1421:
	ldr	r1, .L1428
	b	.L1427
.L1429:
	.align	2, 0
.L1428:
	.word	gUnknown_083E31B0
.L1422:
	ldr	r1, .L1430
	b	.L1427
.L1431:
	.align	2, 0
.L1430:
	.word	gUnknown_083E31CC
.L1423:
	ldr	r1, .L1432
.L1427:
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
.L1420:
	ldr	r0, .L1432+0x4
	ldr	r4, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r2, #0xc0
	mov	r3, #0x2
	bl	sub_8072C74
	add	r0, r4, #0
	mov	r1, #0x3
	mov	r2, #0x11
	bl	MenuPrint
	pop	{r4}
	pop	{r0}
	bx	r0
.L1433:
	.align	2, 0
.L1432:
	.word	gUnknown_083E31D8
	.word	gUnknown_083DFEC8
.Lfe60:
	.size	 sub_80EF428,.Lfe60-sub_80EF428
	.align	2, 0
	.globl	sub_80EF490
	.type	 sub_80EF490,function
	.thumb_func
sub_80EF490:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x2
	bne	.L1435	@cond_branch
	mov	r2, #0x1
.L1435:
	ldr	r0, .L1441
	ldr	r3, [r0]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	lsl	r2, r1, #0x1
	ldr	r4, .L1441+0x4
	add	r0, r3, r4
	strh	r2, [r0]
	ldr	r2, .L1441+0x8
	add	r0, r3, r2
	ldrh	r2, [r0]
	lsl	r1, r1, #0x11
	lsr	r0, r1, #0x10
	cmp	r2, r0
	bcs	.L1436	@cond_branch
	add	r4, r4, #0x2
	add	r1, r3, r4
	mov	r0, #0x2
	b	.L1440
.L1442:
	.align	2, 0
.L1441:
	.word	gUnknown_083DFEC4
	.word	0xce4e
	.word	0xce4c
.L1436:
	cmp	r2, r0
	bls	.L1438	@cond_branch
	ldr	r0, .L1443
	add	r1, r3, r0
	ldr	r0, .L1443+0x4
	b	.L1440
.L1444:
	.align	2, 0
.L1443:
	.word	0xce50
	.word	0xfffe
.L1438:
	ldr	r2, .L1445
	add	r1, r3, r2
	mov	r0, #0x0
.L1440:
	strh	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1446:
	.align	2, 0
.L1445:
	.word	0xce50
.Lfe61:
	.size	 sub_80EF490,.Lfe61-sub_80EF490
	.align	2, 0
	.globl	sub_80EF4F8
	.type	 sub_80EF4F8,function
	.thumb_func
sub_80EF4F8:
	push	{r4, lr}
	ldr	r0, .L1451
	ldr	r1, [r0]
	ldr	r0, .L1451+0x4
	add	r2, r1, r0
	ldr	r3, .L1451+0x8
	add	r0, r1, r3
	ldrh	r3, [r2]
	ldrh	r0, [r0]
	cmp	r3, r0
	beq	.L1448	@cond_branch
	ldr	r4, .L1451+0xc
	add	r0, r1, r4
	ldrh	r0, [r0]
	add	r0, r3, r0
	strh	r0, [r2]
	ldr	r3, .L1451+0x10
	add	r0, r1, r3
	ldrh	r1, [r2]
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0x31
	mov	r2, #0x4
	bl	LoadPalette
	mov	r0, #0x1
	b	.L1450
.L1452:
	.align	2, 0
.L1451:
	.word	gUnknown_083DFEC4
	.word	0xce4c
	.word	0xce4e
	.word	0xce50
	.word	0xce52
.L1448:
	mov	r0, #0x0
.L1450:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe62:
	.size	 sub_80EF4F8,.Lfe62-sub_80EF4F8
	.align	2, 0
	.globl	sub_80EF54C
	.type	 sub_80EF54C,function
	.thumb_func
sub_80EF54C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x2
	bne	.L1454	@cond_branch
	mov	r2, #0x1
.L1454:
	ldr	r0, .L1455
	ldr	r0, [r0]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	lsl	r1, r1, #0x1
	ldr	r3, .L1455+0x4
	add	r2, r0, r3
	strh	r1, [r2]
	ldrh	r1, [r2]
	lsl	r1, r1, #0x1
	ldr	r2, .L1455+0x8
	add	r1, r1, r2
	add	r0, r0, r1
	mov	r1, #0x31
	mov	r2, #0x4
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L1456:
	.align	2, 0
.L1455:
	.word	gUnknown_083DFEC4
	.word	0xce4c
	.word	0xce52
.Lfe63:
	.size	 sub_80EF54C,.Lfe63-sub_80EF54C
	.align	2, 0
	.globl	sub_80EF58C
	.type	 sub_80EF58C,function
	.thumb_func
sub_80EF58C:
	push	{lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x1
	beq	.L1465	@cond_branch
	cmp	r0, #0x1
	bgt	.L1469	@cond_branch
	cmp	r0, #0
	beq	.L1459	@cond_branch
	b	.L1458
.L1469:
	cmp	r1, #0x2
	beq	.L1466	@cond_branch
	b	.L1458
.L1459:
	mov	r1, #0x0
	ldr	r0, .L1470
	ldr	r0, [r0]
	ldr	r3, .L1470+0x4
	add	r2, r0, r3
	mov	r3, #0x0
.L1463:
	lsl	r0, r1, #0x1
	add	r0, r2, r0
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x3d
	bls	.L1463	@cond_branch
	b	.L1458
.L1471:
	.align	2, 0
.L1470:
	.word	gUnknown_083DFEC4
	.word	0xce52
.L1465:
	ldr	r0, .L1472
	ldr	r0, [r0]
	ldr	r1, .L1472+0x4
	add	r2, r0, r1
	ldr	r1, .L1472+0x8
	add	r0, r1, #0x2
	add	r1, r1, #0x6
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x2
	bl	sub_80EF624
	b	.L1458
.L1473:
	.align	2, 0
.L1472:
	.word	gUnknown_083DFEC4
	.word	0xce52
	.word	gUnknown_083E003C
.L1466:
	ldr	r0, .L1474
	ldr	r0, [r0]
	ldr	r3, .L1474+0x4
	add	r2, r0, r3
	ldr	r1, .L1474+0x8
	add	r0, r1, #0x6
	add	r1, r1, #0xe
	str	r2, [sp]
	mov	r2, #0x10
	mov	r3, #0x2
	bl	sub_80EF624
.L1458:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L1475:
	.align	2, 0
.L1474:
	.word	gUnknown_083DFEC4
	.word	0xce8e
	.word	gUnknown_083E003C
.Lfe64:
	.size	 sub_80EF58C,.Lfe64-sub_80EF58C
	.align	2, 0
	.globl	sub_80EF624
	.type	 sub_80EF624,function
	.thumb_func
sub_80EF624:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x38
    str r0, [sp]
    str r1, [sp, 0x4]
    ldr r4, [sp, 0x58]
    lsls r2, 24
    lsrs r2, 24
    str r2, [sp, 0x8]
    lsls r3, 24
    lsrs r3, 24
    str r3, [sp, 0xC]
    movs r0, 0
    str r0, [sp, 0x10]
    lsls r0, r3, 16
    ldr r1, [sp, 0x10]
    cmp r1, r3
    bcs _080EF72E
    subs r2, 0x1
    str r2, [sp, 0x20]
    str r0, [sp, 0x2C]
_080EF654:
    ldr r2, [sp]
    ldrh r1, [r2]
    movs r0, 0x1F
    ands r0, r1
    lsls r7, r0, 8
    lsls r1, 16
    lsrs r0, r1, 21
    movs r2, 0x1F
    ands r0, r2
    lsls r6, r0, 8
    lsrs r1, 26
    ands r1, r2
    lsls r5, r1, 8
    ldr r0, [sp, 0x4]
    ldrh r1, [r0]
    movs r0, 0x1F
    ands r0, r1
    lsls r0, 8
    str r0, [sp, 0x14]
    lsls r1, 16
    lsrs r0, r1, 21
    ands r0, r2
    lsls r0, 8
    str r0, [sp, 0x18]
    lsrs r1, 26
    ands r1, r2
    lsls r1, 8
    str r1, [sp, 0x1C]
    ldr r1, [sp, 0x14]
    subs r0, r1, r7
    ldr r1, [sp, 0x8]
    bl __divsi3
    mov r10, r0
    ldr r2, [sp, 0x18]
    subs r0, r2, r6
    ldr r1, [sp, 0x8]
    bl __divsi3
    mov r9, r0
    ldr r1, [sp, 0x1C]
    subs r0, r1, r5
    ldr r1, [sp, 0x8]
    bl __divsi3
    mov r8, r0
    adds r3, r4, 0
    movs r4, 0
    ldr r2, [sp]
    adds r2, 0x2
    str r2, [sp, 0x30]
    ldr r0, [sp, 0x4]
    adds r0, 0x2
    str r0, [sp, 0x34]
    adds r1, r3, 0x2
    str r1, [sp, 0x24]
    ldr r2, [sp, 0x10]
    adds r2, 0x1
    str r2, [sp, 0x28]
    ldr r0, [sp, 0x20]
    cmp r4, r0
    bge _080EF700
    ldr r1, [sp, 0xC]
    lsls r1, 1
    mov r12, r1
_080EF6D6:
    lsls r0, r7, 8
    lsrs r2, r0, 16
    lsls r0, r6, 8
    lsrs r1, r0, 16
    lsls r0, r5, 8
    lsrs r0, 16
    lsls r0, 10
    lsls r1, 5
    orrs r0, r1
    orrs r2, r0
    strh r2, [r3]
    add r3, r12
    add r7, r10
    add r6, r9
    add r5, r8
    adds r0, r4, 0x1
    lsls r0, 16
    lsrs r4, r0, 16
    ldr r2, [sp, 0x20]
    cmp r4, r2
    blt _080EF6D6
_080EF700:
    ldr r4, [sp, 0x14]
    lsrs r2, r4, 8
    ldr r1, [sp, 0x1C]
    lsls r0, r1, 2
    ldr r4, [sp, 0x18]
    lsrs r1, r4, 3
    orrs r0, r1
    orrs r2, r0
    strh r2, [r3]
    ldr r0, [sp, 0x30]
    str r0, [sp]
    ldr r1, [sp, 0x34]
    str r1, [sp, 0x4]
    ldr r4, [sp, 0x24]
    ldr r2, [sp, 0x28]
    lsls r0, r2, 16
    lsrs r0, 16
    str r0, [sp, 0x10]
    ldr r1, [sp, 0x2C]
    lsrs r0, r1, 16
    ldr r2, [sp, 0x10]
    cmp r2, r0
    bcc _080EF654
_080EF72E:
    add sp, 0x38
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .syntax divided

	.code	16
.Lfe65:
	.size	 sub_80EF624,.Lfe65-sub_80EF624
	.align	2, 0
	.globl	sub_80EF740
	.type	 sub_80EF740,function
	.thumb_func
sub_80EF740:
	push	{lr}
	ldr	r0, .L1479
	ldr	r3, [r0]
	ldr	r0, .L1479+0x4
	add	r2, r3, r0
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	mov	r1, #0x1
	and	r0, r0, r1
	strh	r0, [r2]
	cmp	r0, #0
	beq	.L1478	@cond_branch
	ldr	r2, .L1479+0x8
	add	r1, r3, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L1478:
	ldr	r0, .L1479+0xc
	ldr	r2, .L1479+0x8
	add	r1, r3, r2
	ldrh	r1, [r1]
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L1480:
	.align	2, 0
.L1479:
	.word	gUnknown_083DFEC4
	.word	0x6da0
	.word	0x6da2
	.word	0x400001c
.Lfe66:
	.size	 sub_80EF740,.Lfe66-sub_80EF740
	.align	2, 0
	.globl	sub_80EF780
	.type	 sub_80EF780,function
	.thumb_func
sub_80EF780:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1485
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1483	@cond_branch
	ldr	r0, .L1485+0x4
	ldr	r3, [r0]
	ldr	r0, .L1485+0x8
	add	r2, r3, r0
	ldrh	r0, [r2]
	mov	r1, #0x7
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1482	@cond_branch
.L1483:
	bl	sub_80EF740
	b	.L1484
.L1486:
	.align	2, 0
.L1485:
	.word	gTasks
	.word	gUnknown_083DFEC4
	.word	0x6da2
.L1482:
	strh	r1, [r2]
	ldr	r2, .L1487
	add	r0, r3, r2
	strh	r1, [r0]
	ldr	r0, .L1487+0x4
	strh	r1, [r0]
.L1484:
	pop	{r0}
	bx	r0
.L1488:
	.align	2, 0
.L1487:
	.word	0x6da0
	.word	0x400001c
.Lfe67:
	.size	 sub_80EF780,.Lfe67-sub_80EF780
	.align	2, 0
	.globl	sub_80EF7D4
	.type	 sub_80EF7D4,function
	.thumb_func
sub_80EF7D4:
	push	{r4, lr}
	ldr	r0, .L1490
	ldr	r4, [r0]
	ldr	r1, .L1490+0x4
	add	r0, r4, r1
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r2, .L1490+0x8
	add	r0, r4, r2
	strh	r1, [r0]
	ldr	r0, .L1490+0xc
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1490+0x10
	add	r4, r4, r1
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1491:
	.align	2, 0
.L1490:
	.word	gUnknown_083DFEC4
	.word	0x6da2
	.word	0x6da0
	.word	sub_80EF780
	.word	0x6da4
.Lfe68:
	.size	 sub_80EF7D4,.Lfe68-sub_80EF7D4
	.align	2, 0
	.globl	sub_80EF814
	.type	 sub_80EF814,function
	.thumb_func
sub_80EF814:
	push	{lr}
	ldr	r0, .L1494
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1493	@cond_branch
	ldr	r0, .L1494+0x4
	ldr	r0, [r0]
	ldr	r1, .L1494+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	DestroyTask
.L1493:
	pop	{r0}
	bx	r0
.L1495:
	.align	2, 0
.L1494:
	.word	sub_80EF780
	.word	gUnknown_083DFEC4
	.word	0x6da4
.Lfe69:
	.size	 sub_80EF814,.Lfe69-sub_80EF814
	.align	2, 0
	.globl	sub_80EF840
	.type	 sub_80EF840,function
	.thumb_func
sub_80EF840:
	push	{lr}
	ldr	r0, .L1502
	ldr	r0, [r0]
	ldr	r1, .L1502+0x4
	add	r2, r0, r1
	mov	r1, #0x0
	strh	r1, [r2]
	ldr	r1, .L1502+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1497	@cond_branch
.L1498:
	bl	sub_80EF874
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1498	@cond_branch
.L1497:
	pop	{r0}
	bx	r0
.L1503:
	.align	2, 0
.L1502:
	.word	gUnknown_083DFEC4
	.word	0xd160
	.word	0x6dac
.Lfe70:
	.size	 sub_80EF840,.Lfe70-sub_80EF840
	.include "constants/gba_constants.inc"

	.code	16
	.align	2, 0
	.globl	sub_80EF874
	.type	 sub_80EF874,function
	.thumb_func
sub_80EF874:
	.syntax unified
	push {lr}
	ldr r0, _080EF890 @ =gUnknown_083DFEC4
	ldr r0, [r0]
	ldr r1, _080EF894 @ =0x0000d160
	adds r0, r1
	ldrh r0, [r0]
	cmp r0, 0xB
	bls _080EF886
	b _080EF9D8
_080EF886:
	lsls r0, 2
	ldr r1, _080EF898 @ =_080EF89C
	adds r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080EF890: .4byte gUnknown_083DFEC4
_080EF894: .4byte 0x0000d160
_080EF898: .4byte _080EF89C
	.align 2, 0
_080EF89C:
	.4byte _080EF8CC
	.4byte _080EF8D2
	.4byte _080EF8E0
	.4byte _080EF8EC
	.4byte _080EF8F6
	.4byte _080EF8FC
	.4byte _080EF920
	.4byte _080EF92C
	.4byte _080EF940
	.4byte _080EF954
	.4byte _080EF960
	.4byte _080EF972
_080EF8CC:
	bl sub_80EEDE8
	b _080EF9DC
_080EF8D2:
	ldr r0, _080EF8DC @ =gWindowConfig_81E7224
	bl SetUpWindowConfig
	b _080EF9DC
	.align 2, 0
_080EF8DC: .4byte gWindowConfig_81E7224
_080EF8E0:
	ldr r0, _080EF8E8 @ =gWindowConfig_81E7224
	bl MultistepInitMenuWindowBegin
	b _080EF9DC
	.align 2, 0
_080EF8E8: .4byte gWindowConfig_81E7224
_080EF8EC:
	bl MultistepInitMenuWindowContinue
	cmp r0, 0
	bne _080EF9DC
	b _080EF9EA
_080EF8F6:
	bl MenuZeroFillScreen
	b _080EF9DC
_080EF8FC:
	ldr r0, _080EF914 @ =gUnknown_083DFEC4
	ldr r0, [r0]
	ldr r2, _080EF918 @ =0x00006e18
	adds r0, r2
	ldr r1, _080EF91C @ =gSaveBlock2
	ldrb r1, [r1, 0x15]
	lsrs r1, 3
	movs r2, 0x1
	ands r1, r2
	bl sub_80FA904
	b _080EF9DC
	.align 2, 0
_080EF914: .4byte gUnknown_083DFEC4
_080EF918: .4byte 0x00006e18
_080EF91C: .4byte gSaveBlock2
_080EF920:
	bl sub_80FA940
	lsls r0, 24
	cmp r0, 0
	beq _080EF9DC
	b _080EF9EA
_080EF92C:
	ldr r0, _080EF938 @ =gPokenavHoennMapSquares_Gfx
	ldr r1, _080EF93C @ =0x06005000
	bl LZ77UnCompVram
	b _080EF9DC
	.align 2, 0
_080EF938: .4byte gPokenavHoennMapSquares_Gfx
_080EF93C: .4byte 0x06005000
_080EF940:
	ldr r0, _080EF950 @ =gPokenavHoennMapSquares_Pal
	movs r1, 0x30
	movs r2, 0x20
	bl LoadPalette
	bl sub_80EFC3C
	b _080EF9DC
	.align 2, 0
_080EF950: .4byte gPokenavHoennMapSquares_Pal
_080EF954:
	bl sub_80EFC64
	lsls r0, 24
	cmp r0, 0
	beq _080EF9DC
	b _080EF9EA
_080EF960:
	movs r0, 0x10
	movs r1, 0x3
	movs r2, 0x1D
	movs r3, 0x11
	bl MenuDrawTextWindow
	bl sub_80EF9F8
	b _080EF9DC
_080EF972:
	ldr r0, _080EF990 @ =gUnknown_083DFEC4
	ldr r1, [r0]
	ldr r2, _080EF994 @ =0x00006e90
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, 0
	bne _080EF9A0
	ldr r2, _080EF998 @ =0x00007698
	adds r0, r1, r2
	movs r1, 0xA0
	strh r1, [r0]
	ldr r0, _080EF99C @ =REG_BG0VOFS
	strh r1, [r0]
	b _080EF9B0
	.align 2, 0
_080EF990: .4byte gUnknown_083DFEC4
_080EF994: .4byte 0x00006e90
_080EF998: .4byte 0x00007698
_080EF99C: .4byte REG_BG0VOFS
_080EF9A0:
	ldr r0, _080EF9C8 @ =0x00007698
	adds r1, r0
	movs r2, 0
	movs r0, 0x80
	lsls r0, 1
	strh r0, [r1]
	ldr r0, _080EF9CC @ =REG_BG0VOFS
	strh r2, [r0]
_080EF9B0:
	ldr r2, _080EF9D0 @ =REG_BG0CNT
	ldrh r0, [r2]
	strh r0, [r2]
	ldrh r0, [r2]
	movs r1, 0x1
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080EF9D4 @ =REG_BLDCNT
	movs r0, 0
	strh r0, [r1]
	b _080EF9DC
	.align 2, 0
_080EF9C8: .4byte 0x00007698
_080EF9CC: .4byte REG_BG0VOFS
_080EF9D0: .4byte REG_BG0CNT
_080EF9D4: .4byte REG_BLDCNT
_080EF9D8:
	movs r0, 0
	b _080EF9EC
_080EF9DC:
	ldr r0, _080EF9F0 @ =gUnknown_083DFEC4
	ldr r1, [r0]
	ldr r2, _080EF9F4 @ =0x0000d160
	adds r1, r2
	ldrh r0, [r1]
	adds r0, 0x1
	strh r0, [r1]
_080EF9EA:
	movs r0, 0x1
_080EF9EC:
	pop {r1}
	bx r1
	.align 2, 0
_080EF9F0: .4byte gUnknown_083DFEC4
_080EF9F4: .4byte 0x0000d160
    .syntax divided

	.code	16
.Lfe71:
	.size	 sub_80EF874,.Lfe71-sub_80EF874
	.align	2, 0
	.globl	sub_80EF9F8
	.type	 sub_80EF9F8,function
	.thumb_func
sub_80EF9F8:
	.syntax unified
    push {r4-r6,lr}
    sub sp, 0x14
    movs r5, 0x4
    ldr r0, _080EFA18 @ =gUnknown_083DFEC4
    ldr r0, [r0]
    ldr r1, _080EFA1C @ =0x00006e2e
    adds r0, r1
    ldrb r0, [r0]
    cmp r0, 0x4
    bls _080EFA0E
    b _080EFB6A
_080EFA0E:
    lsls r0, 2
    ldr r1, _080EFA20 @ =_080EFA24
    adds r0, r1
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_080EFA18: .4byte gUnknown_083DFEC4
_080EFA1C: .4byte 0x00006e2e
_080EFA20: .4byte _080EFA24
    .align 2, 0
_080EFA24:
    .4byte _080EFB6A
    .4byte _080EFA38
    .4byte _080EFAC0
    .4byte _080EFB4C
    .4byte _080EFA38
_080EFA38:
    ldr r0, _080EFA64 @ =gUnknown_083DFEC4
    ldr r0, [r0]
    ldr r2, _080EFA68 @ =0x00006e18
    adds r0, r2
    lsls r2, r5, 19
    lsrs r2, 16
    movs r1, 0x1
    str r1, [sp]
    movs r1, 0x88
    movs r3, 0x78
    bl sub_8072A18
    adds r0, r5, 0x2
    lsls r0, 16
    lsrs r5, r0, 16
    ldr r0, _080EFA6C @ =gLinkOpen
    ldrb r0, [r0]
    cmp r0, 0x1
    bne _080EFA70
    bl sub_80F1A80
    b _080EFB82
    .align 2, 0
_080EFA64: .4byte gUnknown_083DFEC4
_080EFA68: .4byte 0x00006e18
_080EFA6C: .4byte gLinkOpen
_080EFA70:
    movs r4, 0
    b _080EFA92
_080EFA74:
    lsls r2, r5, 19
    lsrs r2, 16
    movs r0, 0x1
    str r0, [sp]
    adds r0, r1, 0
    movs r1, 0x88
    movs r3, 0x78
    bl sub_8072A18
    adds r0, r5, 0x2
    lsls r0, 16
    lsrs r5, r0, 16
    adds r0, r4, 0x1
    lsls r0, 16
    lsrs r4, r0, 16
_080EFA92:
    cmp r4, 0x3
    bhi _080EFB6A
    ldr r0, _080EFAB8 @ =gUnknown_083DFEC4
    ldr r1, [r0]
    ldr r2, _080EFABC @ =0x00006e2c
    adds r0, r1, r2
    ldrb r0, [r0]
    adds r2, 0x3
    adds r1, r2
    ldrb r1, [r1]
    lsls r2, r4, 24
    lsrs r2, 24
    bl GetLandmarkName
    adds r1, r0, 0
    cmp r1, 0
    bne _080EFA74
    b _080EFB6A
    .align 2, 0
_080EFAB8: .4byte gUnknown_083DFEC4
_080EFABC: .4byte 0x00006e2c
_080EFAC0:
    ldr r0, _080EFB38 @ =gUnknown_083DFEC4
    ldr r4, [r0]
    ldr r1, _080EFB3C @ =0x00006e18
    adds r0, r4, r1
    lsls r2, r5, 19
    lsrs r2, 16
    movs r1, 0x1
    str r1, [sp]
    movs r1, 0x88
    movs r3, 0x78
    bl sub_8072A18
    adds r0, r5, 0x2
    lsls r0, 16
    lsrs r5, r0, 16
    ldr r2, _080EFB40 @ =0x00006e2c
    adds r0, r4, r2
    ldrh r1, [r0]
    adds r2, 0x3
    adds r0, r4, r2
    ldrb r0, [r0]
    lsls r0, 2
    lsls r1, 3
    adds r0, r1
    ldr r1, _080EFB44 @ =0x0000cdcc
    adds r4, r1
    adds r6, r4, r0
    ldr r0, [r6]
    cmp r0, 0
    beq _080EFB6A
    lsls r4, r5, 24
    lsrs r4, 24
    movs r0, 0x11
    adds r1, r4, 0
    movs r2, 0x1C
    movs r3, 0xF
    bl MenuFillWindowRectWithBlankTile
    movs r0, 0x1A
    adds r1, r4, 0
    movs r2, 0x1C
    movs r3, 0xF
    bl MenuFillWindowRectWithBlankTile
    ldr r0, _080EFB48 @ =0x0600f800
    ldr r3, [r6]
    movs r1, 0
    str r1, [sp]
    str r1, [sp, 0x4]
    movs r1, 0xA
    str r1, [sp, 0x8]
    str r1, [sp, 0xC]
    str r1, [sp, 0x10]
    movs r1, 0x12
    movs r2, 0x6
    bl sub_8095C8C
    adds r0, r5, 0
    adds r0, 0xB
    b _080EFB66
    .align 2, 0
_080EFB38: .4byte gUnknown_083DFEC4
_080EFB3C: .4byte 0x00006e18
_080EFB40: .4byte 0x00006e2c
_080EFB44: .4byte 0x0000cdcc
_080EFB48: .4byte 0x0600f800
_080EFB4C:
    ldr r0, _080EFB98 @ =gUnknown_083DFEC4
    ldr r0, [r0]
    ldr r2, _080EFB9C @ =0x00006e18
    adds r0, r2
    lsls r2, r5, 19
    lsrs r2, 16
    movs r1, 0x1
    str r1, [sp]
    movs r1, 0x88
    movs r3, 0x78
    bl sub_8072A18
    adds r0, r5, 0x2
_080EFB66:
    lsls r0, 16
    lsrs r5, r0, 16
_080EFB6A:
    movs r0, 0
    cmp r0, 0
    bne _080EFB82
    cmp r5, 0xF
    bhi _080EFB82
    lsls r1, r5, 24
    lsrs r1, 24
    movs r0, 0x11
    movs r2, 0x1C
    movs r3, 0xF
    bl MenuFillWindowRectWithBlankTile
_080EFB82:
    ldr r0, _080EFB98 @ =gUnknown_083DFEC4
    ldr r0, [r0]
    ldr r1, _080EFBA0 @ =0x00006e2e
    adds r0, r1
    ldrb r0, [r0]
    cmp r0, 0x2
    bne _080EFBA4
    bl sub_80EFD74
    b _080EFBA8
    .align 2, 0
_080EFB98: .4byte gUnknown_083DFEC4
_080EFB9C: .4byte 0x00006e18
_080EFBA0: .4byte 0x00006e2e
_080EFBA4:
    bl sub_80EFDA0
_080EFBA8:
    add sp, 0x14
    pop {r4-r6}
    pop {r0}
    bx r0
    .syntax divided

	.code	16
.Lfe72:
	.size	 sub_80EF9F8,.Lfe72-sub_80EF9F8
	.align	2, 0
	.globl	sub_80EFBB0
	.type	 sub_80EFBB0,function
	.thumb_func
sub_80EFBB0:
	push	{lr}
	ldr	r0, .L1509
	ldr	r0, [r0]
	ldr	r1, .L1509+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1507	@cond_branch
	mov	r0, #0x8
	bl	sub_80EEFBC
	b	.L1508
.L1510:
	.align	2, 0
.L1509:
	.word	gUnknown_083DFEC4
	.word	0x6e90
.L1507:
	mov	r0, #0x7
	bl	sub_80EEFBC
.L1508:
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 sub_80EFBB0,.Lfe73-sub_80EFBB0
	.align	2, 0
	.globl	sub_80EFBDC
	.type	 sub_80EFBDC,function
	.thumb_func
sub_80EFBDC:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	mov	r4, #0x1
	ldr	r2, .L1520
	ldr	r1, [r2]
	ldr	r3, .L1520+0x4
	add	r1, r1, r3
	ldrh	r3, [r1]
	cmp	r0, #0
	beq	.L1512	@cond_branch
	cmp	r3, #0xa8
	bls	.L1513	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0x8
	b	.L1518
.L1521:
	.align	2, 0
.L1520:
	.word	gUnknown_083DFEC4
	.word	0x7698
.L1513:
	mov	r3, #0xa0
	b	.L1519
.L1512:
	cmp	r3, #0xf7
	bhi	.L1516	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x8
.L1518:
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	b	.L1515
.L1516:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
.L1519:
	mov	r4, #0x0
.L1515:
	ldr	r0, [r2]
	ldr	r1, .L1522
	add	r0, r0, r1
	strh	r3, [r0]
	ldr	r1, .L1522+0x4
	mov	r0, #0xff
	and	r3, r3, r0
	strh	r3, [r1]
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1523:
	.align	2, 0
.L1522:
	.word	0x7698
	.word	0x4000012
.Lfe74:
	.size	 sub_80EFBDC,.Lfe74-sub_80EFBDC
	.align	2, 0
	.globl	sub_80EFC3C
	.type	 sub_80EFC3C,function
	.thumb_func
sub_80EFC3C:
	push	{lr}
	ldr	r0, .L1525
	ldr	r0, [r0]
	ldr	r2, .L1525+0x4
	add	r1, r0, r2
	mov	r2, #0x0
	strb	r2, [r1]
	ldr	r1, .L1525+0x8
	add	r0, r0, r1
	strb	r2, [r0]
	bl	sub_80EFD3C
	pop	{r0}
	bx	r0
.L1526:
	.align	2, 0
.L1525:
	.word	gUnknown_083DFEC4
	.word	0xbc9a
	.word	0xbc9b
.Lfe75:
	.size	 sub_80EFC3C,.Lfe75-sub_80EFC3C
	.align	2, 0
	.globl	sub_80EFC64
	.type	 sub_80EFC64,function
	.thumb_func
sub_80EFC64:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r9
    mov r6, r8
    push {r6,r7}
    sub sp, 0x8
    ldr r4, _080EFCD0 @ =gUnknown_083DFEC4
    ldr r2, [r4]
    ldr r0, _080EFCD4 @ =0x0000bc9a
    adds r1, r2, r0
    ldrb r0, [r1]
    cmp r0, 0xF
    bhi _080EFD2C
    ldrb r1, [r1]
    mov r8, r1
    ldr r1, _080EFCD8 @ =0x0000bc9b
    adds r0, r2, r1
    ldrb r7, [r0]
    movs r2, 0
    ldr r0, _080EFCDC @ =gPokenavCityMaps
    mov r9, r0
    adds r3, r4, 0
_080EFC8E:
    lsls r0, r2, 2
    mov r4, r8
    lsls r1, r4, 3
    adds r6, r0, r1
    mov r1, r9
    adds r0, r6, r1
    ldr r1, [r0]
    cmp r1, 0
    beq _080EFCE8
    movs r0, 0xC8
    adds r5, r7, 0
    muls r5, r0
    ldr r4, _080EFCE0 @ =0x0000bc9c
    adds r5, r4
    ldr r4, [r3]
    adds r5, r4, r5
    adds r0, r1, 0
    adds r1, r5, 0
    str r2, [sp]
    str r3, [sp, 0x4]
    bl LZ77UnCompVram
    ldr r0, _080EFCE4 @ =0x0000cdcc
    adds r4, r0
    adds r4, r6
    str r5, [r4]
    adds r0, r7, 0x1
    lsls r0, 16
    lsrs r7, r0, 16
    ldr r2, [sp]
    ldr r3, [sp, 0x4]
    b _080EFCF2
    .align 2, 0
_080EFCD0: .4byte gUnknown_083DFEC4
_080EFCD4: .4byte 0x0000bc9a
_080EFCD8: .4byte 0x0000bc9b
_080EFCDC: .4byte gPokenavCityMaps
_080EFCE0: .4byte 0x0000bc9c
_080EFCE4: .4byte 0x0000cdcc
_080EFCE8:
    ldr r0, [r3]
    ldr r4, _080EFD1C @ =0x0000cdcc
    adds r0, r4
    adds r0, r6
    str r1, [r0]
_080EFCF2:
    adds r0, r2, 0x1
    lsls r0, 16
    lsrs r2, r0, 16
    cmp r2, 0x1
    bls _080EFC8E
    ldr r0, _080EFD20 @ =gUnknown_083DFEC4
    ldr r2, [r0]
    ldr r0, _080EFD24 @ =0x0000bc9a
    adds r1, r2, r0
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0xF
    bhi _080EFD2C
    ldr r1, _080EFD28 @ =0x0000bc9b
    adds r0, r2, r1
    strb r7, [r0]
    movs r0, 0x1
    b _080EFD2E
    .align 2, 0
_080EFD1C: .4byte 0x0000cdcc
_080EFD20: .4byte gUnknown_083DFEC4
_080EFD24: .4byte 0x0000bc9a
_080EFD28: .4byte 0x0000bc9b
_080EFD2C:
    movs r0, 0
_080EFD2E:
    add sp, 0x8
    pop {r3,r4}
    mov r8, r3
    mov r9, r4
    pop {r4-r7}
    pop {r1}
    bx r1
    .syntax divided

	.code	16
.Lfe76:
	.size	 sub_80EFC64,.Lfe76-sub_80EFC64
	.align	2, 0
	.globl	sub_80EFD3C
	.type	 sub_80EFD3C,function
	.thumb_func
sub_80EFD3C:
	ldr	r0, .L1529
	ldr	r1, [r0]
	ldr	r2, .L1529+0x4
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r0, .L1529+0x8
	add	r3, r1, r0
	mov	r0, #0x2f
	strb	r0, [r3]
	ldr	r3, .L1529+0xc
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r0, .L1529+0x10
	add	r1, r1, r0
	strh	r2, [r1]
	bx	lr
.L1530:
	.align	2, 0
.L1529:
	.word	gUnknown_083DFEC4
	.word	0x769e
	.word	0x769c
	.word	0x769d
	.word	0x769a
.Lfe77:
	.size	 sub_80EFD3C,.Lfe77-sub_80EFD3C
	.align	2, 0
	.globl	sub_80EFD74
	.type	 sub_80EFD74,function
	.thumb_func
sub_80EFD74:
	push	{lr}
	ldr	r0, .L1533
	ldr	r2, [r0]
	ldr	r0, .L1533+0x4
	add	r1, r2, r0
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L1533+0x8
	add	r2, r2, r0
	ldrb	r0, [r2]
	cmp	r0, #0x1
	bne	.L1532	@cond_branch
	mov	r0, #0x2
	strb	r0, [r2]
.L1532:
	pop	{r0}
	bx	r0
.L1534:
	.align	2, 0
.L1533:
	.word	gUnknown_083DFEC4
	.word	0x769e
	.word	0x769d
.Lfe78:
	.size	 sub_80EFD74,.Lfe78-sub_80EFD74
	.align	2, 0
	.globl	sub_80EFDA0
	.type	 sub_80EFDA0,function
	.thumb_func
sub_80EFDA0:
	push	{r4, lr}
	add	sp, sp, #0xffffffec
	ldr	r0, .L1536
	ldr	r3, .L1536+0x4
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0xc
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	str	r1, [sp, #0xc]
	mov	r1, #0xf
	str	r1, [sp, #0x10]
	mov	r1, #0x11
	mov	r2, #0x10
	bl	sub_8095C8C
	ldr	r0, .L1536+0x8
	ldr	r0, [r0]
	ldr	r1, .L1536+0xc
	add	r0, r0, r1
	strb	r4, [r0]
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L1537:
	.align	2, 0
.L1536:
	.word	0x600f800
	.word	gUnknown_08E9AC2C
	.word	gUnknown_083DFEC4
	.word	0x769e
.Lfe79:
	.size	 sub_80EFDA0,.Lfe79-sub_80EFDA0
	.align	2, 0
	.globl	sub_80EFDE4
	.type	 sub_80EFDE4,function
	.thumb_func
sub_80EFDE4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xffffffec
	ldr	r0, .L1542
	ldr	r1, [r0]
	ldr	r2, .L1542+0x4
	add	r0, r1, r2
	ldrb	r2, [r0]
	mov	r0, #0x3c
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xc
	bls	.L1539	@cond_branch
	mov	r4, #0xc
.L1539:
	ldr	r3, .L1542+0x8
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1540	@cond_branch
	ldr	r0, .L1542+0xc
	mov	r8, r0
	ldr	r3, .L1542+0x10
	mov	r9, r3
	str	r2, [sp]
	mov	r5, #0x0
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r7, #0x1
	str	r7, [sp, #0xc]
	mov	r6, #0x3c
	str	r6, [sp, #0x10]
	mov	r1, #0x11
	mov	r2, #0x10
	bl	sub_8095C8C
	cmp	r4, #0xb
	bhi	.L1540	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x11
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r5, [sp]
	str	r5, [sp, #0x4]
	mov	r0, #0xc
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	str	r7, [sp, #0xc]
	str	r6, [sp, #0x10]
	mov	r0, r8
	mov	r2, #0x10
	mov	r3, r9
	bl	sub_8095C8C
.L1540:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1543:
	.align	2, 0
.L1542:
	.word	gUnknown_083DFEC4
	.word	0x769c
	.word	0x769e
	.word	0x600f800
	.word	gUnknown_08E9ABB4
.Lfe80:
	.size	 sub_80EFDE4,.Lfe80-sub_80EFDE4
	.align	2, 0
	.globl	sub_80EFE7C
	.type	 sub_80EFE7C,function
	.thumb_func
sub_80EFE7C:
	push	{r4, lr}
	ldr	r0, .L1563
	ldr	r2, [r0]
	ldr	r0, .L1563+0x4
	add	r4, r2, r0
	ldrb	r1, [r4]
	cmp	r1, #0x1
	beq	.L1556	@cond_branch
	cmp	r1, #0x1
	bgt	.L1561	@cond_branch
	cmp	r1, #0
	beq	.L1546	@cond_branch
	b	.L1545
.L1564:
	.align	2, 0
.L1563:
	.word	gUnknown_083DFEC4
	.word	0x769d
.L1561:
	cmp	r1, #0x2
	beq	.L1558	@cond_branch
	b	.L1545
.L1546:
	ldr	r0, .L1565
	add	r4, r2, r0
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3b
	bls	.L1547	@cond_branch
	strb	r1, [r4]
.L1547:
	ldr	r1, .L1565+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	bl	sub_80EFDE4
	ldrb	r0, [r4]
	cmp	r0, #0xf
	beq	.L1552	@cond_branch
	cmp	r0, #0xf
	bgt	.L1555	@cond_branch
	cmp	r0, #0
	beq	.L1552	@cond_branch
	b	.L1545
.L1566:
	.align	2, 0
.L1565:
	.word	0x769c
	.word	0x769e
.L1555:
	cmp	r0, #0x1e
	beq	.L1552	@cond_branch
	cmp	r0, #0x2d
	bne	.L1545	@cond_branch
.L1552:
	ldr	r0, .L1567
	ldr	r1, [r0]
	ldr	r0, .L1567+0x4
	add	r2, r1, r0
	mov	r3, #0x0
	mov	r0, #0x1
	strb	r0, [r2]
	ldr	r0, .L1567+0x8
	add	r1, r1, r0
	strh	r3, [r1]
	b	.L1545
.L1568:
	.align	2, 0
.L1567:
	.word	gUnknown_083DFEC4
	.word	0x769d
	.word	0x769a
.L1556:
	ldr	r0, .L1569
	add	r1, r2, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x78
	bls	.L1545	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L1562
.L1570:
	.align	2, 0
.L1569:
	.word	0x769a
.L1558:
	mov	r0, #0x1
	bl	sub_80EFDE4
	mov	r0, #0x1
.L1562:
	strb	r0, [r4]
.L1545:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 sub_80EFE7C,.Lfe81-sub_80EFE7C
	.align	2, 0
	.globl	sub_80EFF34
	.type	 sub_80EFF34,function
	.thumb_func
sub_80EFF34:
	push	{lr}
	ldr	r0, .L1577
	ldr	r0, [r0]
	ldr	r1, .L1577+0x4
	add	r2, r0, r1
	mov	r1, #0x0
	strh	r1, [r2]
	ldr	r1, .L1577+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1572	@cond_branch
.L1573:
	bl	sub_80EFF68
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1573	@cond_branch
.L1572:
	pop	{r0}
	bx	r0
.L1578:
	.align	2, 0
.L1577:
	.word	gUnknown_083DFEC4
	.word	0xd160
	.word	0x6dac
.Lfe82:
	.size	 sub_80EFF34,.Lfe82-sub_80EFF34
	.align	2, 0
	.globl	sub_80EFF68
	.type	 sub_80EFF68,function
	.thumb_func
sub_80EFF68:
	push	{r4, lr}
	add	sp, sp, #0xffffffec
	ldr	r0, .L1602
	ldr	r0, [r0]
	ldr	r1, .L1602+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0xd
	bls	.LCB10052
	b	.L1598	@long jump
.LCB10052:
	lsl	r0, r0, #0x2
	ldr	r1, .L1602+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1603:
	.align	2, 0
.L1602:
	.word	gUnknown_083DFEC4
	.word	0xd160
	.word	.L1599
	.align	2, 0
	.align	2, 0
.L1599:
	.word	.L1581
	.word	.L1582
	.word	.L1583
	.word	.L1584
	.word	.L1586
	.word	.L1587
	.word	.L1588
	.word	.L1590
	.word	.L1591
	.word	.L1592
	.word	.L1594
	.word	.L1595
	.word	.L1596
	.word	.L1597
.L1581:
	bl	sub_80EEDE8
	ldr	r0, .L1604
	ldr	r0, [r0]
	ldr	r2, .L1604+0x4
	add	r0, r0, r2
	mov	r1, #0xb
	strb	r1, [r0]
	b	.L1580
.L1605:
	.align	2, 0
.L1604:
	.word	gUnknown_083DFEC4
	.word	0xd162
.L1582:
	ldr	r0, .L1606
	bl	SetUpWindowConfig
	b	.L1580
.L1607:
	.align	2, 0
.L1606:
	.word	gWindowConfig_81E7080
.L1583:
	ldr	r0, .L1608
	bl	MultistepInitMenuWindowBegin
	b	.L1580
.L1609:
	.align	2, 0
.L1608:
	.word	gWindowConfig_81E7080
.L1584:
	bl	MultistepInitMenuWindowContinue
	cmp	r0, #0
	beq	.LCB10118
	b	.L1580	@long jump
.LCB10118:
	b	.L1601
.L1586:
	bl	MenuZeroFillScreen
	b	.L1580
.L1587:
	bl	sub_80F1614
	b	.L1580
.L1588:
	mov	r0, #0x0
	bl	sub_80F162C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB10137
	b	.L1580	@long jump
.LCB10137:
	b	.L1601
.L1590:
	ldr	r0, .L1610
	ldr	r1, .L1610+0x4
	bl	LZ77UnCompVram
	b	.L1580
.L1611:
	.align	2, 0
.L1610:
	.word	gPokenavConditionView_Gfx
	.word	0x6005000
.L1591:
	ldr	r0, .L1612
	ldr	r1, .L1612+0x4
	bl	LZ77UnCompVram
	ldr	r0, .L1612+0x8
	mov	r1, #0x20
	mov	r2, #0x20
	bl	LoadPalette
	b	.L1580
.L1613:
	.align	2, 0
.L1612:
	.word	gUnknown_08E9AC4C
	.word	0x600f000
	.word	gPokenavConditionMenu2_Pal
.L1592:
	ldr	r0, .L1614
	ldr	r0, [r0]
	ldr	r1, .L1614+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1580	@cond_branch
	ldr	r0, .L1614+0x8
	ldr	r3, .L1614+0xc
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r2, #0x9
	str	r2, [sp, #0x8]
	mov	r1, #0x4
	str	r1, [sp, #0xc]
	str	r2, [sp, #0x10]
	mov	r1, #0x0
	mov	r2, #0x5
	bl	sub_8095C8C
	b	.L1580
.L1615:
	.align	2, 0
.L1614:
	.word	gUnknown_083DFEC4
	.word	0x76aa
	.word	0x600f800
	.word	gUnknown_083E01AC
.L1594:
	ldr	r0, .L1616
	ldr	r1, .L1616+0x4
	bl	LZ77UnCompVram
	b	.L1580
.L1617:
	.align	2, 0
.L1616:
	.word	gUnknown_08E9FEB4
	.word	0x600b800
.L1595:
	ldr	r0, .L1618
	mov	r1, #0x30
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L1618+0x4
	mov	r1, #0xb0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r4, .L1618+0x8
	add	r0, r4, #0
	mov	r1, #0xb1
	mov	r2, #0x2
	bl	LoadPalette
	add	r0, r4, #0
	add	r0, r0, #0xe
	mov	r1, #0xb5
	mov	r2, #0x2
	bl	LoadPalette
	add	r4, r4, #0x1c
	add	r0, r4, #0
	mov	r1, #0xbf
	mov	r2, #0x2
	bl	LoadPalette
	bl	sub_80F01A4
	b	.L1580
.L1619:
	.align	2, 0
.L1618:
	.word	gUnknown_083E0254
	.word	gUnknownPalette_81E6692
	.word	gPokenavConditionMenu2_Pal+0x2
.L1596:
	ldr	r0, .L1620
	ldr	r0, [r0]
	ldr	r2, .L1620+0x4
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	sub_80F01E0
	b	.L1580
.L1621:
	.align	2, 0
.L1620:
	.word	gUnknown_083DFEC4
	.word	0x8fe9
.L1597:
	ldr	r1, .L1622
	ldr	r2, .L1622+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x2
	ldr	r2, .L1622+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x44
	ldr	r2, .L1622+0xc
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r2, .L1622+0x10
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L1580
.L1623:
	.align	2, 0
.L1622:
	.word	0x400000e
	.word	0x1e03
	.word	0x1702
	.word	0x844
	.word	0x40b
.L1598:
	mov	r0, #0x0
	b	.L1600
.L1580:
	ldr	r0, .L1624
	ldr	r1, [r0]
	ldr	r0, .L1624+0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L1601:
	mov	r0, #0x1
.L1600:
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r1}
	bx	r1
.L1625:
	.align	2, 0
.L1624:
	.word	gUnknown_083DFEC4
	.word	0xd160
.Lfe83:
	.size	 sub_80EFF68,.Lfe83-sub_80EFF68
	.align	2, 0
	.globl	sub_80F0174
	.type	 sub_80F0174,function
	.thumb_func
sub_80F0174:
	push	{lr}
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1627	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	ldrh	r1, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r2, r3, #0
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L1628
.L1627:
	mov	r2, #0x80
	lsl	r2, r2, #0x13
	ldrh	r1, [r2]
	ldr	r0, .L1629
	and	r0, r0, r1
	strh	r0, [r2]
.L1628:
	pop	{r0}
	bx	r0
.L1630:
	.align	2, 0
.L1629:
	.word	0xfbff
.Lfe84:
	.size	 sub_80F0174,.Lfe84-sub_80F0174
	.align	2, 0
	.globl	sub_80F01A4
	.type	 sub_80F01A4,function
	.thumb_func
sub_80F01A4:
	ldr	r1, .L1632
	mov	r0, #0xf0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0x9b
	strh	r0, [r1]
	ldr	r0, .L1632+0x4
	ldr	r2, .L1632+0x8
	add	r1, r2, #0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	ldr	r1, .L1632+0xc
	ldr	r2, .L1632+0x10
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0x1b
	strh	r0, [r1]
	bx	lr
.L1633:
	.align	2, 0
.L1632:
	.word	0x4000040
	.word	0x4000044
	.word	0x3879
	.word	0x4000048
	.word	0x3f3f
.Lfe85:
	.size	 sub_80F01A4,.Lfe85-sub_80F01A4
	.align	2, 0
	.globl	sub_80F01E0
	.type	 sub_80F01E0,function
	.thumb_func
sub_80F01E0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, .L1636
	lsl	r0, r4, #0x6
	ldr	r2, .L1636+0x4
	add	r0, r0, r2
	ldr	r5, [r1]
	add	r0, r5, r0
	mov	r1, #0xd
	mov	r2, #0x1
	bl	MenuPrint
	ldr	r1, .L1636+0x8
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1635	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r2, .L1636+0xc
	add	r0, r0, r2
	add	r0, r5, r0
	mov	r1, #0xd
	mov	r2, #0x3
	bl	MenuPrint
	ldr	r0, .L1636+0x10
	add	r4, r5, r0
	ldr	r1, .L1636+0x14
	add	r0, r5, r1
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	ldr	r1, .L1636+0x18
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x12
	lsr	r1, r1, #0x17
	add	r0, r4, #0
	bl	sub_80F443C
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x6
	bl	MenuPrint
.L1635:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1637:
	.align	2, 0
.L1636:
	.word	gUnknown_083DFEC4
	.word	0x8829
	.word	0x76aa
	.word	0x88e9
	.word	0x8788
	.word	0x87dc
	.word	0x893e
.Lfe86:
	.size	 sub_80F01E0,.Lfe86-sub_80F01E0
	.align	2, 0
	.globl	sub_80F0264
	.type	 sub_80F0264,function
	.thumb_func
sub_80F0264:
	push	{lr}
	ldr	r1, .L1644
	ldr	r2, [r1]
	ldr	r1, .L1644+0x4
	add	r3, r2, r1
	mov	r1, #0x0
	strh	r1, [r3]
	ldr	r3, .L1644+0x8
	add	r1, r2, r3
	strb	r0, [r1]
	ldr	r0, .L1644+0xc
	add	r2, r2, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L1639	@cond_branch
.L1640:
	bl	sub_80F02A0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1640	@cond_branch
.L1639:
	pop	{r0}
	bx	r0
.L1645:
	.align	2, 0
.L1644:
	.word	gUnknown_083DFEC4
	.word	0x306
	.word	0x87ca
	.word	0x6dac
.Lfe87:
	.size	 sub_80F0264,.Lfe87-sub_80F0264
	.align	2, 0
	.globl	sub_80F02A0
	.type	 sub_80F02A0,function
	.thumb_func
sub_80F02A0:
	.syntax unified
    push {r4-r6,lr}
    mov r6, r8
    push {r6}
    sub sp, 0x18
    ldr r1, _080F02C4 @ =gUnknown_083DFEC4
    ldr r0, [r1]
    ldr r2, _080F02C8 @ =0x00000306
    adds r0, r2
    ldrh r0, [r0]
    adds r2, r1, 0
    cmp r0, 0xE
    bls _080F02BA
    b _080F05FA
_080F02BA:
    lsls r0, 2
    ldr r1, _080F02CC @ =_080F02D0
    adds r0, r1
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_080F02C4: .4byte gUnknown_083DFEC4
_080F02C8: .4byte 0x00000306
_080F02CC: .4byte _080F02D0
    .align 2, 0
_080F02D0:
    .4byte _080F030C
    .4byte _080F0344
    .4byte _080F0350
    .4byte _080F035C
    .4byte _080F0368
    .4byte _080F036E
    .4byte _080F0380
    .4byte _080F0394
    .4byte _080F04BC
    .4byte _080F053C
    .4byte _080F0550
    .4byte _080F0574
    .4byte _080F057A
    .4byte _080F0586
    .4byte _080F05BC
_080F030C:
    bl sub_80EEDE8
    ldr r0, _080F0334 @ =gUnknown_083DFEC4
    ldr r1, [r0]
    movs r2, 0
    ldr r3, _080F0338 @ =0x000087ca
    adds r0, r1, r3
    ldrb r0, [r0]
    cmp r0, 0x1
    bne _080F0322
    movs r2, 0x1
_080F0322:
    ldr r3, _080F033C @ =0x000087c8
    adds r0, r1, r3
    strb r2, [r0]
    ldr r0, _080F0340 @ =0x0000d162
    adds r1, r0
    movs r0, 0xB
    strb r0, [r1]
    b _080F0618
    .align 2, 0
_080F0334: .4byte gUnknown_083DFEC4
_080F0338: .4byte 0x000087ca
_080F033C: .4byte 0x000087c8
_080F0340: .4byte 0x0000d162
_080F0344:
    ldr r0, _080F034C @ =gWindowConfig_81E70D4
    bl SetUpWindowConfig
    b _080F0618
    .align 2, 0
_080F034C: .4byte gWindowConfig_81E70D4
_080F0350:
    ldr r0, _080F0358 @ =gWindowConfig_81E70D4
    bl MultistepInitMenuWindowBegin
    b _080F0618
    .align 2, 0
_080F0358: .4byte gWindowConfig_81E70D4
_080F035C:
    bl MultistepInitMenuWindowContinue
    cmp r0, 0
    beq _080F0366
    b _080F0618
_080F0366:
    b _080F0626
_080F0368:
    bl MenuZeroFillScreen
    b _080F0618
_080F036E:
    ldr r0, _080F0378 @ =gUnknown_08E9FC64
    ldr r1, _080F037C @ =0x0600e800
    bl LZ77UnCompVram
    b _080F0618
    .align 2, 0
_080F0378: .4byte gUnknown_08E9FC64
_080F037C: .4byte 0x0600e800
_080F0380:
    ldr r0, _080F038C @ =gPokenavConditionSearch2_Gfx
    ldr r1, _080F0390 @ =0x06008000
    bl LZ77UnCompVram
    b _080F0618
    .align 2, 0
_080F038C: .4byte gPokenavConditionSearch2_Gfx
_080F0390: .4byte 0x06008000
_080F0394:
    ldr r6, _080F03FC @ =gUnknown_083E02B4
    adds r0, r6, 0
    movs r1, 0xB0
    movs r2, 0x20
    bl LoadPalette
    adds r0, r6, 0
    movs r1, 0xF0
    movs r2, 0x20
    bl LoadPalette
    ldr r0, _080F0400 @ =gUnknown_083E0334
    movs r1, 0x40
    movs r2, 0x20
    bl LoadPalette
    ldr r0, _080F0404 @ =gUnknown_083DFEC4
    ldr r0, [r0]
    ldr r1, _080F0408 @ =0x000087ca
    adds r0, r1
    ldrb r0, [r0]
    cmp r0, 0
    bne _080F0418
    ldr r4, _080F040C @ =gPokenavConditionSearch2_Pal
    adds r0, r4, 0
    movs r1, 0x30
    movs r2, 0x20
    bl LoadPalette
    ldr r1, _080F0410 @ =gPlttBufferUnfaded
    ldrh r0, [r4, 0xA]
    strh r0, [r1]
    ldr r0, _080F0414 @ =gUnknownPalette_81E6692
    movs r1, 0xB0
    movs r2, 0x20
    bl LoadPalette
    adds r0, r6, 0x2
    movs r1, 0xB1
    movs r2, 0x2
    bl LoadPalette
    adds r0, r6, 0
    adds r0, 0x10
    movs r1, 0xB5
    movs r2, 0x2
    bl LoadPalette
    adds r4, 0xA
    adds r0, r4, 0
    movs r1, 0xBF
    b _080F04A8
    .align 2, 0
_080F03FC: .4byte gUnknown_083E02B4
_080F0400: .4byte gUnknown_083E0334
_080F0404: .4byte gUnknown_083DFEC4
_080F0408: .4byte 0x000087ca
_080F040C: .4byte gPokenavConditionSearch2_Pal
_080F0410: .4byte gPlttBufferUnfaded
_080F0414: .4byte gUnknownPalette_81E6692
_080F0418:
    cmp r0, 0x1
    bne _080F0464
    ldr r4, _080F0458 @ =gUnknown_083E0274
    adds r0, r4, 0
    movs r1, 0x30
    movs r2, 0x20
    bl LoadPalette
    ldr r1, _080F045C @ =gPlttBufferUnfaded
    ldrh r0, [r4, 0xA]
    strh r0, [r1]
    ldr r0, _080F0460 @ =gUnknownPalette_81E6692
    movs r1, 0xB0
    movs r2, 0x20
    bl LoadPalette
    adds r0, r6, 0x2
    movs r1, 0xB1
    movs r2, 0x2
    bl LoadPalette
    adds r0, r6, 0
    adds r0, 0x10
    movs r1, 0xB5
    movs r2, 0x2
    bl LoadPalette
    adds r4, 0xA
    adds r0, r4, 0
    movs r1, 0xBF
    b _080F04A8
    .align 2, 0
_080F0458: .4byte gUnknown_083E0274
_080F045C: .4byte gPlttBufferUnfaded
_080F0460: .4byte gUnknownPalette_81E6692
_080F0464:
    ldr r4, _080F04B0 @ =gUnknown_08E9F9E8
    adds r0, r4, 0
    movs r1, 0x30
    movs r2, 0x20
    bl LoadPalette
    ldr r1, _080F04B4 @ =gPlttBufferUnfaded
    adds r5, r4, 0
    adds r5, 0xA
    ldrh r0, [r4, 0xA]
    strh r0, [r1]
    ldr r0, _080F04B8 @ =gUnknown_083E0314
    movs r1, 0x50
    movs r2, 0x20
    bl LoadPalette
    adds r0, r6, 0x2
    movs r1, 0xB1
    movs r2, 0x2
    bl LoadPalette
    adds r0, r6, 0
    adds r0, 0x10
    movs r1, 0xB5
    movs r2, 0x2
    bl LoadPalette
    adds r0, r5, 0
    movs r1, 0xBF
    movs r2, 0x2
    bl LoadPalette
    adds r0, r5, 0
    movs r1, 0x5F
_080F04A8:
    movs r2, 0x2
    bl LoadPalette
    b _080F0618
    .align 2, 0
_080F04B0: .4byte gUnknown_08E9F9E8
_080F04B4: .4byte gPlttBufferUnfaded
_080F04B8: .4byte gUnknown_083E0314
_080F04BC:
    ldr r0, _080F04E8 @ =gUnknown_083DFEC4
    ldr r0, [r0]
    ldr r2, _080F04EC @ =0x000087ca
    adds r0, r2
    ldrb r0, [r0]
    cmp r0, 0x2
    beq _080F04F8
    ldr r0, _080F04F0 @ =0x0600e800
    ldr r3, _080F04F4 @ =gUnknown_08E9FD1C
    movs r1, 0
    str r1, [sp]
    str r1, [sp, 0x4]
    movs r2, 0x9
    str r2, [sp, 0x8]
    movs r1, 0x4
    str r1, [sp, 0xC]
    str r2, [sp, 0x10]
    movs r1, 0
    movs r2, 0x5
    bl sub_8095C8C
    b _080F0618
    .align 2, 0
_080F04E8: .4byte gUnknown_083DFEC4
_080F04EC: .4byte 0x000087ca
_080F04F0: .4byte 0x0600e800
_080F04F4: .4byte gUnknown_08E9FD1C
_080F04F8:
    ldr r3, _080F0530 @ =0x0600e800
    mov r8, r3
    ldr r3, _080F0534 @ =gUnknown_08E9FE54
    movs r4, 0
    str r4, [sp]
    str r4, [sp, 0x4]
    movs r5, 0xC
    str r5, [sp, 0x8]
    movs r6, 0xA
    str r6, [sp, 0xC]
    str r5, [sp, 0x10]
    mov r0, r8
    movs r1, 0
    movs r2, 0x4
    bl sub_8095C8C
    ldr r3, _080F0538 @ =gUnknown_08E9FD64
    str r4, [sp]
    str r4, [sp, 0x4]
    str r5, [sp, 0x8]
    str r6, [sp, 0xC]
    str r5, [sp, 0x10]
    mov r0, r8
    movs r1, 0
    movs r2, 0x8
    bl sub_8095C8C
    b _080F0618
    .align 2, 0
_080F0530: .4byte 0x0600e800
_080F0534: .4byte gUnknown_08E9FE54
_080F0538: .4byte gUnknown_08E9FD64
_080F053C:
    ldr r0, _080F0548 @ =gUnknown_083E0354
    ldr r1, _080F054C @ =0x06005000
    bl LZ77UnCompVram
    b _080F0618
    .align 2, 0
_080F0548: .4byte gUnknown_083E0354
_080F054C: .4byte 0x06005000
_080F0550:
    ldr r2, _080F0568 @ =0x0600f800
    add r1, sp, 0x14
    movs r0, 0
    strh r0, [r1]
    ldr r0, _080F056C @ =0x040000d4
    str r1, [r0]
    str r2, [r0, 0x4]
    ldr r1, _080F0570 @ =0x81000400
    str r1, [r0, 0x8]
    ldr r0, [r0, 0x8]
    b _080F0618
    .align 2, 0
_080F0568: .4byte 0x0600f800
_080F056C: .4byte 0x040000d4
_080F0570: .4byte 0x81000400
_080F0574:
    bl sub_80F0900
    b _080F0618
_080F057A:
    bl sub_80F0944
    lsls r0, 24
    cmp r0, 0
    beq _080F0618
    b _080F0626
_080F0586:
    ldr r0, _080F059C @ =gUnknown_083DFEC4
    ldr r4, [r0]
    ldr r1, _080F05A0 @ =0x000087ca
    adds r0, r4, r1
    ldrb r0, [r0]
    cmp r0, 0x2
    beq _080F05A4
    bl ShowMapNamePopUpWindow
    b _080F0618
    .align 2, 0
_080F059C: .4byte gUnknown_083DFEC4
_080F05A0: .4byte 0x000087ca
_080F05A4:
    movs r0, 0
    bl sub_80F081C
    ldr r2, _080F05B8 @ =0x0000876e
    adds r0, r4, r2
    ldrb r0, [r0]
    bl sub_80F0FFC
    b _080F0618
    .align 2, 0
_080F05B8: .4byte 0x0000876e
_080F05BC:
    ldr r1, _080F0600 @ =REG_BG2CNT
    ldr r3, _080F0604 @ =0x00001d0a
    adds r0, r3, 0
    strh r0, [r1]
    adds r1, 0x2
    adds r3, 0xF9
    adds r0, r3, 0
    strh r0, [r1]
    subs r1, 0x6
    adds r3, 0xFE
    adds r0, r3, 0
    strh r0, [r1]
    adds r1, 0x16
    movs r0, 0xF8
    strh r0, [r1]
    ldr r1, [r2]
    ldr r0, _080F0608 @ =0x00008776
    adds r2, r1, r0
    movs r3, 0
    movs r0, 0xF8
    strh r0, [r2]
    ldr r2, _080F060C @ =0x00008778
    adds r0, r1, r2
    strh r3, [r0]
    ldr r0, _080F0610 @ =REG_BLDCNT
    strh r3, [r0]
    ldr r3, _080F0614 @ =0x0000d160
    adds r1, r3
    ldrh r0, [r1]
    adds r0, 0x1
    strh r0, [r1]
_080F05FA:
    movs r0, 0
    b _080F0628
    .align 2, 0
_080F0600: .4byte REG_BG2CNT
_080F0604: .4byte 0x00001d0a
_080F0608: .4byte 0x00008776
_080F060C: .4byte 0x00008778
_080F0610: .4byte REG_BLDCNT
_080F0614: .4byte 0x0000d160
_080F0618:
    ldr r0, _080F0634 @ =gUnknown_083DFEC4
    ldr r1, [r0]
    ldr r0, _080F0638 @ =0x00000306
    adds r1, r0
    ldrh r0, [r1]
    adds r0, 0x1
    strh r0, [r1]
_080F0626:
    movs r0, 0x1
_080F0628:
    add sp, 0x18
    pop {r3}
    mov r8, r3
    pop {r4-r6}
    pop {r1}
    bx r1
    .align 2, 0
_080F0634: .4byte gUnknown_083DFEC4
_080F0638: .4byte 0x00000306
    .syntax divided

	.code	16
.Lfe88:
	.size	 sub_80F02A0,.Lfe88-sub_80F02A0
	.globl	gUnknown_03000744
.bss
	.align	2, 0
	.type	 gUnknown_03000744,object
	.size	 gUnknown_03000744,4
gUnknown_03000744:
	.space	4
.text
	.align	2, 0
