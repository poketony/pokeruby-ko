@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	unref_sub_8124F94
	.type	 unref_sub_8124F94,function
	.thumb_func
unref_sub_8124F94:
	add	sp, sp, #0xfffffffc
	mov	r3, #0x0
	strb	r3, [r0, #0x1]
	strb	r3, [r0]
	strh	r3, [r0, #0x2]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	str	r1, [r0, #0x4]
	mov	r1, sp
	strh	r3, [r1]
	ldr	r2, .L3
	str	r1, [r2]
	add	r1, r0, #0
	add	r1, r1, #0x8
	str	r1, [r2, #0x4]
	ldr	r1, .L3+0x4
	str	r1, [r2, #0x8]
	ldr	r1, [r2, #0x8]
	mov	r1, sp
	strh	r3, [r1]
	str	r1, [r2]
	add	r0, r0, #0x88
	str	r0, [r2, #0x4]
	ldr	r0, .L3+0x8
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	add	sp, sp, #0x4
	bx	lr
.L4:
	.align	2, 0
.L3:
	.word	0x40000d4
	.word	0x81000040
	.word	0x810000c0
.Lfe1:
	.size	 unref_sub_8124F94,.Lfe1-unref_sub_8124F94
	.align	2, 0
	.globl	unref_sub_8124FD8
	.type	 unref_sub_8124FD8,function
	.thumb_func
unref_sub_8124FD8:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r7, .L17
	b	.L8
.L18:
	.align	2, 0
.L17:
	.word	0x40000d4
.L10:
	ldrb	r0, [r4, #0x1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x88
	add	r0, r0, r1
	str	r3, [r0]
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldrb	r1, [r5, #0x6]
	add	r0, r0, #0x8e
	strb	r1, [r0]
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldrb	r1, [r5, #0x4]
	add	r0, r0, #0x8c
	strb	r1, [r0]
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldrb	r1, [r5, #0x5]
	add	r0, r0, #0x8d
	strb	r1, [r0]
	ldrb	r1, [r5, #0x4]
	ldrb	r0, [r5, #0x5]
	mov	r6, r1
	mul	r6, r6, r0
	ldrh	r2, [r4, #0x2]
	add	r1, r2, r6
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	ble	.L11	@cond_branch
	mov	r0, #0x2
	b	.L15
.L11:
	ldrh	r0, [r5, #0x8]
	cmp	r0, #0
	bne	.L12	@cond_branch
	str	r3, [r7]
	ldrh	r1, [r4, #0x2]
	lsl	r1, r1, #0x6
	ldr	r0, [r4, #0x4]
	add	r0, r0, r1
	str	r0, [r7, #0x4]
	lsl	r0, r6, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r7, #0x8]
	ldr	r0, [r7, #0x8]
	b	.L13
.L12:
	lsl	r0, r2, #0x6
	ldr	r1, [r4, #0x4]
	add	r1, r1, r0
	add	r0, r3, #0
	bl	LZDecompressWram
.L13:
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldrh	r1, [r4, #0x2]
	add	r0, r0, #0x90
	strh	r1, [r0]
	ldrh	r0, [r4, #0x2]
	add	r0, r6, r0
	strh	r0, [r4, #0x2]
	ldrb	r0, [r4, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
	add	r5, r5, #0xc
.L8:
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1f
	bhi	.L16	@cond_branch
	ldr	r3, [r5]
	cmp	r3, #0
	bne	.L10	@cond_branch
	mov	r0, #0x0
	b	.L15
.L16:
	mov	r0, #0x1
.L15:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 unref_sub_8124FD8,.Lfe2-unref_sub_8124FD8
	.align	2, 0
	.globl	unref_sub_81250A4
	.type	 unref_sub_81250A4,function
	.thumb_func
unref_sub_81250A4:
	push	{r4, r5, lr}
	add	sp, sp, #0xffffffe0
	add	r4, r0, #0
	add	r5, r1, #0
	b	.L22
.L24:
	ldrb	r1, [r4]
	lsl	r1, r1, #0x3
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	str	r2, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x3
	add	r0, r4, r0
	ldrb	r1, [r5, #0x4]
	strb	r1, [r0, #0xc]
	ldrb	r0, [r5, #0x5]
	cmp	r0, #0
	bne	.L25	@cond_branch
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r0, r2, #0
	mov	r2, #0x20
	bl	LoadPalette
	b	.L26
.L25:
	add	r0, r2, #0
	mov	r1, sp
	bl	LZDecompressWram
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	mov	r0, sp
	mov	r2, #0x20
	bl	LoadPalette
.L26:
	ldrb	r0, [r4]
	lsl	r1, r0, #0x3
	add	r1, r4, r1
	strb	r0, [r1, #0xd]
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	add	r5, r5, #0x8
.L22:
	ldrb	r0, [r4]
	cmp	r0, #0xf
	bhi	.L29	@cond_branch
	ldr	r2, [r5]
	cmp	r2, #0
	bne	.L24	@cond_branch
	mov	r0, #0x0
	b	.L28
.L29:
	mov	r0, #0x1
.L28:
	add	sp, sp, #0x20
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 unref_sub_81250A4,.Lfe3-unref_sub_81250A4
	.align	2, 0
	.globl	unref_sub_8125118
	.type	 unref_sub_8125118,function
	.thumb_func
unref_sub_8125118:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L38
	add	sp, sp, r4
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r0, sp
	mov	r1, #0x0
	bl	memset
	ldrb	r7, [r6, #0x5]
	ldr	r0, [r6]
	mov	r1, sp
	bl	LZDecompressWram
	ldrb	r4, [r5]
	cmp	r4, r7
	bcs	.L32	@cond_branch
.L34:
	ldrb	r0, [r5]
	add	r0, r0, r4
	cmp	r0, #0xf
	ble	.L35	@cond_branch
	mov	r0, #0x1
	b	.L37
.L39:
	.align	2, 0
.L38:
	.word	0xfffffe00
.L35:
	lsl	r2, r4, #0x3
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r0, r2
	ldr	r1, [r6]
	str	r1, [r0]
	add	r2, r5, r2
	ldrb	r0, [r6, #0x4]
	add	r0, r4, r0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r5]
	strb	r0, [r2, #0xd]
	lsl	r0, r4, #0x5
	add	r0, r0, sp
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r7
	bcc	.L34	@cond_branch
.L32:
	mov	r0, #0x0
.L37:
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	add	sp, sp, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 unref_sub_8125118,.Lfe4-unref_sub_8125118
.text
	.align	2, 0
