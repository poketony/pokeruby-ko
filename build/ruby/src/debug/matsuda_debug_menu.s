@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gText_Unused83C9150
	.section .rodata
	.type	 gText_Unused83C9150,object
gText_Unused83C9150:
	.byte	0x63
	.byte	0x5d
	.byte	0x64
	.byte	0x44
	.byte	0xd
	.byte	0xff
	.size	 gText_Unused83C9150,6
	.globl	gMatsudaDebugMenu_ActionContestText
	.type	 gMatsudaDebugMenu_ActionContestText,object
gMatsudaDebugMenu_ActionContestText:
	.byte	0x3f
	.byte	0x1c
	.byte	0x3f
	.byte	0x75
	.byte	0x3c
	.byte	0x35
	.byte	0x3f
	.byte	0xaa
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionContestText,9
	.globl	gMatsudaDebugMenu_ActionContestResultsText
	.type	 gMatsudaDebugMenu_ActionContestResultsText,object
gMatsudaDebugMenu_ActionContestResultsText:
	.byte	0x3f
	.byte	0x1c
	.byte	0x3f
	.byte	0x75
	.byte	0x3c
	.byte	0x35
	.byte	0x3f
	.byte	0xaa
	.byte	0x0
	.byte	0x37
	.byte	0x41
	.byte	0x37
	.byte	0x5a
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionContestResultsText,14
	.globl	gMatsudaDebugMenu_ActionChangePerimeterText
	.type	 gMatsudaDebugMenu_ActionChangePerimeterText,object
gMatsudaDebugMenu_ActionChangePerimeterText:
	.byte	0x9b
	.byte	0x77
	.byte	0x72
	.byte	0xae
	.byte	0x60
	.byte	0x1d
	.byte	0x2e
	.byte	0xa
	.byte	0x3
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionChangePerimeterText,10
	.globl	gMatsudaDebugMenu_ActionChangeMoveText
	.type	 gMatsudaDebugMenu_ActionChangeMoveText,object
gMatsudaDebugMenu_ActionChangeMoveText:
	.byte	0x2c
	.byte	0x3c
	.byte	0x0
	.byte	0x1d
	.byte	0x2e
	.byte	0xa
	.byte	0x3
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionChangeMoveText,8
	.globl	gMatsudaDebugMenu_ActionContestCommText
	.type	 gMatsudaDebugMenu_ActionContestCommText,object
gMatsudaDebugMenu_ActionContestCommText:
	.byte	0x3f
	.byte	0x1c
	.byte	0x3f
	.byte	0x75
	.byte	0x3c
	.byte	0x35
	.byte	0x3f
	.byte	0xaa
	.byte	0x0
	.byte	0x3f
	.byte	0x89
	.byte	0x3c
	.byte	0x40
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionContestCommText,14
	.globl	gMatsudaDebugMenu_ActionCommTestText
	.type	 gMatsudaDebugMenu_ActionCommTestText,object
gMatsudaDebugMenu_ActionCommTestText:
	.byte	0x3f
	.byte	0x89
	.byte	0x3c
	.byte	0x40
	.byte	0x0
	.byte	0x3e
	.byte	0x9b
	.byte	0x37
	.byte	0xa0
	.byte	0x40
	.byte	0x76
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionCommTestText,12
	.globl	gMatsudaDebugMenu_ActionSetHighScoreText
	.type	 gMatsudaDebugMenu_ActionSetHighScoreText,object
gMatsudaDebugMenu_ActionSetHighScoreText:
	.byte	0x3e
	.byte	0xa7
	.byte	0x37
	.byte	0x4d
	.byte	0x3d
	.byte	0xa5
	.byte	0x3c
	.byte	0x13
	.byte	0x0
	.byte	0x38
	.byte	0xec
	.byte	0x3d
	.byte	0x72
	.byte	0x3f
	.byte	0x6b
	.byte	0x0
	.byte	0x3b
	.byte	0xbf
	.byte	0x3d
	.byte	0xa8
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionSetHighScoreText,21
	.globl	gMatsudaDebugMenu_ActionResetHighScoreText
	.type	 gMatsudaDebugMenu_ActionResetHighScoreText,object
gMatsudaDebugMenu_ActionResetHighScoreText:
	.byte	0x3e
	.byte	0xa7
	.byte	0x37
	.byte	0x4d
	.byte	0x3d
	.byte	0xa5
	.byte	0x3c
	.byte	0x13
	.byte	0x0
	.byte	0x38
	.byte	0xec
	.byte	0x3d
	.byte	0x72
	.byte	0x3f
	.byte	0x6b
	.byte	0x0
	.byte	0x3d
	.byte	0x8d
	.byte	0x3b
	.byte	0xbf
	.byte	0x3d
	.byte	0xa8
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionResetHighScoreText,23
	.globl	gMatsudaDebugMenu_ActionSetAllArtMuseumText
	.type	 gMatsudaDebugMenu_ActionSetAllArtMuseumText,object
gMatsudaDebugMenu_ActionSetAllArtMuseumText:
	.byte	0x3a
	.byte	0xad
	.byte	0x3c
	.byte	0x17
	.byte	0x37
	.byte	0x5c
	.byte	0x0
	.byte	0x3d
	.byte	0xa2
	.byte	0x3e
	.byte	0x8d
	.byte	0x0
	.byte	0x3b
	.byte	0xbf
	.byte	0x3d
	.byte	0xa8
	.byte	0xff
	.size	 gMatsudaDebugMenu_ActionSetAllArtMuseumText,17
	.globl	gMatsudaDebugMenuActions
	.align	2, 0
	.type	 gMatsudaDebugMenuActions,object
gMatsudaDebugMenuActions:
	.word	gMatsudaDebugMenu_ActionContestText
	.word	MatsudaDebugMenu_Contest
	.word	gMatsudaDebugMenu_ActionContestResultsText
	.word	MatsudaDebugMenu_ContestResults
	.word	gMatsudaDebugMenu_ActionContestCommText
	.word	MatsudaDebugMenu_ContestComm
	.word	gMatsudaDebugMenu_ActionCommTestText
	.word	MatsudaDebugMenu_CommTest
	.word	gMatsudaDebugMenu_ActionSetHighScoreText
	.word	MatsudaDebugMenu_SetHighScore
	.word	gMatsudaDebugMenu_ActionResetHighScoreText
	.word	MatsudaDebugMenu_ResetHighScore
	.word	gMatsudaDebugMenu_ActionSetAllArtMuseumText
	.word	MatsudaDebugMenu_SetArtMuseumItems
	.size	 gMatsudaDebugMenuActions,56
	.globl	gMatsudaDebugMenu_UnknownByteArray
	.type	 gMatsudaDebugMenu_UnknownByteArray,object
gMatsudaDebugMenu_UnknownByteArray:
	.byte	0xfc
	.byte	0x2
	.byte	0xf
	.byte	0x0
	.byte	0xff
	.size	 gMatsudaDebugMenu_UnknownByteArray,5
	.globl	Unknown_083C922D
	.type	 Unknown_083C922D,object
Unknown_083C922D:
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.byte	0x10
	.byte	0x11
	.byte	0x1
	.byte	0x1
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x10
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x10
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x10
	.byte	0x11
	.byte	0x11
	.byte	0x1
	.byte	0x0
	.byte	0x11
	.byte	0x11
	.byte	0x0
	.size	 Unknown_083C922D,32
	.globl	Unknown_083C924E
	.align	1, 0
	.type	 Unknown_083C924E,object
Unknown_083C924E:
	.short	0x0
	.short	0x2dbf
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 Unknown_083C924E,32
	.globl	gUnknown_083C926E
	.type	 gUnknown_083C926E,object
gUnknown_083C926E:
	.byte	0x2
	.byte	0x0
	.byte	0x11
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x11
	.byte	0x2
	.size	 gUnknown_083C926E,8
	.globl	gMatsudaDebugMenuContestTopLeft
	.type	 gMatsudaDebugMenuContestTopLeft,object
gMatsudaDebugMenuContestTopLeft:
	.byte	0x0
	.byte	0x6
	.byte	0xf
	.byte	0x6
	.byte	0x0
	.byte	0x8
	.byte	0xf
	.byte	0x8
	.byte	0x0
	.byte	0xa
	.byte	0xf
	.byte	0xa
	.size	 gMatsudaDebugMenuContestTopLeft,12
	.globl	gUnknown_083C9282
	.type	 gUnknown_083C9282,object
gUnknown_083C9282:
	.byte	0x7
	.byte	0x6
	.byte	0x16
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x16
	.byte	0x8
	.byte	0x7
	.byte	0xa
	.byte	0x16
	.byte	0xa
	.size	 gUnknown_083C9282,12
	.globl	gUnknown_083C928E
	.type	 gUnknown_083C928E,object
gUnknown_083C928E:
	.byte	0x2
	.byte	0xe
	.byte	0x11
	.byte	0xe
	.byte	0x2
	.byte	0x10
	.byte	0x11
	.byte	0x10
	.size	 gUnknown_083C928E,8
	.globl	gUnknown_083C9296
	.type	 gUnknown_083C9296,object
gUnknown_083C9296:
	.byte	0x8
	.byte	0x80
	.byte	0x8
	.byte	0x80
	.byte	0x10
	.byte	0x10
	.byte	0x30
	.byte	0xa8
	.byte	0x30
	.byte	0xa8
	.byte	0x30
	.byte	0xa8
	.byte	0x8
	.byte	0x80
	.byte	0x8
	.byte	0x80
	.byte	0x10
	.byte	0x88
	.size	 gUnknown_083C9296,18
	.globl	gUnknown_083C92A8
	.type	 gUnknown_083C92A8,object
gUnknown_083C92A8:
	.byte	0x8
	.byte	0x18
	.byte	0x28
	.byte	0x38
	.byte	0x48
	.byte	0x58
	.byte	0x78
	.byte	0x88
	.byte	0x98
	.size	 gUnknown_083C92A8,9
	.globl	gUnknown_083C92B4
	.align	2, 0
	.type	 gUnknown_083C92B4,object
gUnknown_083C92B4:
	.word	Unknown_083C922D
	.short	0x20
	.short	0x4b0
	.size	 gUnknown_083C92B4,8
	.globl	gUnknown_083C92BC
	.align	2, 0
	.type	 gUnknown_083C92BC,object
gUnknown_083C92BC:
	.word	Unknown_083C924E
	.short	0x4b0
	.space	2
	.size	 gUnknown_083C92BC,8
	.globl	gOamData_83C92C4
	.align	2, 0
	.type	 gOamData_83C92C4,object
	.size	 gOamData_83C92C4,8
gOamData_83C92C4:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.globl	gSpriteTemplate_83C92CC
	.align	2, 0
	.type	 gSpriteTemplate_83C92CC,object
	.size	 gSpriteTemplate_83C92CC,24
gSpriteTemplate_83C92CC:
	.short	0x4b0
	.short	0x4b0
	.word	gOamData_83C92C4
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80AA754
	.align	2, 0
	.type	 gUnknown_083C92E4,object
gUnknown_083C92E4:
	.word	sub_80AA8C8
	.word	sub_80AA8D8
	.word	sub_80AA8E8
	.word	sub_80AA8F8
	.word	sub_80AAC5C
	.word	sub_80AAC5C
	.word	sub_80AA930
	.word	sub_80AA974
	.word	sub_80AA9B8
	.word	sub_80AA9FC
	.word	sub_80AAA40
	.word	sub_80AAA84
	.word	sub_80AAAF0
	.word	sub_80AAB30
	.word	sub_80AAB70
	.word	sub_80AABB0
	.word	sub_80AABF0
	.word	sub_80AAD44
	.size	 gUnknown_083C92E4,72
	.type	 gMatsudaDebugMenu_StartText,object
gMatsudaDebugMenu_StartText:
	.byte	0xfc
	.byte	0x1
	.byte	0x6
	.byte	0xfc
	.byte	0x2
	.byte	0x2
	.byte	0xff
	.size	 gMatsudaDebugMenu_StartText,7
	.type	 gMatsudaDebugMenu_StartJapText,object
gMatsudaDebugMenu_StartJapText:
	.byte	0x6
	.byte	0x2
	.byte	0xc
	.byte	0xff
	.size	 gMatsudaDebugMenu_StartJapText,4
	.type	 gMatsudaDebugMenu_GoBackText,object
gMatsudaDebugMenu_GoBackText:
	.byte	0x23
	.byte	0x45
	.byte	0x29
	.byte	0xff
	.size	 gMatsudaDebugMenu_GoBackText,4
	.type	 gMatsudaDebugMenu_BattlePointsText,object
gMatsudaDebugMenu_BattlePointsText:
	.byte	0xfc
	.byte	0x1
	.byte	0x7
	.byte	0xbc
	.byte	0xca
	.byte	0xad
	.byte	0xff
	.size	 gMatsudaDebugMenu_BattlePointsText,7
	.type	 MatsudaDebugMenuText_Cool,object
MatsudaDebugMenuText_Cool:
	.byte	0x6
	.byte	0x50
	.byte	0xa
	.byte	0x26
	.byte	0xb
	.byte	0xff
	.size	 MatsudaDebugMenuText_Cool,6
	.type	 MatsudaDebugMenuText_Cute,object
MatsudaDebugMenuText_Cute:
	.byte	0x6
	.byte	0x2c
	.byte	0x2
	.byte	0xb
	.byte	0xff
	.size	 MatsudaDebugMenuText_Cute,5
	.type	 MatsudaDebugMenuText_Beauty,object
MatsudaDebugMenuText_Beauty:
	.byte	0x3
	.byte	0x12
	.byte	0x8
	.byte	0xc
	.byte	0xb
	.byte	0xff
	.size	 MatsudaDebugMenuText_Beauty,6
	.type	 MatsudaDebugMenuText_Smart,object
MatsudaDebugMenuText_Smart:
	.byte	0x6
	.byte	0xc
	.byte	0xa
	.byte	0xb
	.byte	0xff
	.size	 MatsudaDebugMenuText_Smart,5
	.type	 MatsudaDebugMenuText_Tough,object
MatsudaDebugMenuText_Tough:
	.byte	0x10
	.byte	0x8
	.byte	0x1f
	.byte	0xc
	.byte	0xb
	.byte	0xff
	.size	 MatsudaDebugMenuText_Tough,6
	.type	 MatsudaDebugMenuText_Sheen,object
MatsudaDebugMenuText_Sheen:
	.byte	0x9
	.byte	0x43
	.byte	0x24
	.byte	0xff
	.size	 MatsudaDebugMenuText_Sheen,4
	.align	2, 0
	.type	 gMatsudaDebugMenuTextList1,object
gMatsudaDebugMenuTextList1:
	.word	MatsudaDebugMenuText_Cool
	.word	MatsudaDebugMenuText_Cute
	.word	MatsudaDebugMenuText_Beauty
	.word	MatsudaDebugMenuText_Smart
	.word	MatsudaDebugMenuText_Tough
	.word	MatsudaDebugMenuText_Sheen
	.size	 gMatsudaDebugMenuTextList1,24
	.type	 MatsudaDebugMenuText_CoolContest,object
MatsudaDebugMenuText_CoolContest:
	.byte	0x6
	.byte	0x50
	.byte	0xa
	.byte	0x26
	.byte	0xb
	.byte	0x5a
	.byte	0x7e
	.byte	0x63
	.byte	0x5d
	.byte	0x64
	.byte	0xff
	.size	 MatsudaDebugMenuText_CoolContest,11
	.type	 MatsudaDebugMenuText_BeautyContest,object
MatsudaDebugMenuText_BeautyContest:
	.byte	0x3
	.byte	0x12
	.byte	0x8
	.byte	0xc
	.byte	0xb
	.byte	0x5a
	.byte	0x7e
	.byte	0x63
	.byte	0x5d
	.byte	0x64
	.byte	0xff
	.size	 MatsudaDebugMenuText_BeautyContest,11
	.type	 MatsudaDebugMenuText_CuteContest,object
MatsudaDebugMenuText_CuteContest:
	.byte	0x6
	.byte	0x2c
	.byte	0x2
	.byte	0xb
	.byte	0x5a
	.byte	0x7e
	.byte	0x63
	.byte	0x5d
	.byte	0x64
	.byte	0x0
	.byte	0xff
	.size	 MatsudaDebugMenuText_CuteContest,11
	.type	 MatsudaDebugMenuText_SmartContest,object
MatsudaDebugMenuText_SmartContest:
	.byte	0x6
	.byte	0xc
	.byte	0xa
	.byte	0xb
	.byte	0x5a
	.byte	0x7e
	.byte	0x63
	.byte	0x5d
	.byte	0x64
	.byte	0x0
	.byte	0xff
	.size	 MatsudaDebugMenuText_SmartContest,11
	.type	 MatsudaDebugMenuText_ToughContest,object
MatsudaDebugMenuText_ToughContest:
	.byte	0x10
	.byte	0x8
	.byte	0x1f
	.byte	0xc
	.byte	0xb
	.byte	0x5a
	.byte	0x7e
	.byte	0x63
	.byte	0x5d
	.byte	0x64
	.byte	0xff
	.size	 MatsudaDebugMenuText_ToughContest,11
	.align	2, 0
	.type	 gMatsudaDebugMenuTextList2,object
gMatsudaDebugMenuTextList2:
	.word	MatsudaDebugMenuText_CoolContest
	.word	MatsudaDebugMenuText_BeautyContest
	.word	MatsudaDebugMenuText_CuteContest
	.word	MatsudaDebugMenuText_SmartContest
	.word	MatsudaDebugMenuText_ToughContest
	.size	 gMatsudaDebugMenuTextList2,20
	.type	 MatsudaDebugMenuText_Fallarbor,object
MatsudaDebugMenuText_Fallarbor:
	.byte	0x6a
	.byte	0x8d
	.byte	0x62
	.byte	0x8a
	.byte	0xba
	.byte	0x69
	.byte	0xae
	.byte	0x6f
	.byte	0x79
	.byte	0xff
	.size	 MatsudaDebugMenuText_Fallarbor,10
	.type	 MatsudaDebugMenuText_Verdanturf,object
MatsudaDebugMenuText_Verdanturf:
	.byte	0x5c
	.byte	0x91
	.byte	0x59
	.byte	0xba
	.byte	0x5d
	.byte	0xae
	.byte	0x9b
	.byte	0xae
	.byte	0x0
	.byte	0xff
	.size	 MatsudaDebugMenuText_Verdanturf,10
	.type	 MatsudaDebugMenuText_Slateport,object
MatsudaDebugMenuText_Slateport:
	.byte	0x56
	.byte	0x52
	.byte	0x65
	.byte	0xba
	.byte	0x6a
	.byte	0x52
	.byte	0x9b
	.byte	0xae
	.byte	0x0
	.byte	0xff
	.size	 MatsudaDebugMenuText_Slateport,10
	.type	 MatsudaDebugMenuText_Lilycove,object
MatsudaDebugMenuText_Lilycove:
	.byte	0x70
	.byte	0x65
	.byte	0x73
	.byte	0xba
	.byte	0x6f
	.byte	0x5d
	.byte	0x60
	.byte	0xae
	.byte	0x0
	.byte	0xff
	.size	 MatsudaDebugMenuText_Lilycove,10
	.align	2, 0
	.type	 gMatsudaDebugMenuTextList3,object
gMatsudaDebugMenuTextList3:
	.word	MatsudaDebugMenuText_Fallarbor
	.word	MatsudaDebugMenuText_Verdanturf
	.word	MatsudaDebugMenuText_Slateport
	.word	MatsudaDebugMenuText_Lilycove
	.size	 gMatsudaDebugMenuTextList3,16
	.align	2, 0
	.type	 gUnknown_083C9400,object
	.size	 gUnknown_083C9400,8
gUnknown_083C9400:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x40
	.byte	0xff
	.byte	0xf3
	.short	0x0
.text
	.align	2, 0
	.globl	unref_sub_80A9B28
	.type	 unref_sub_80A9B28,function
	.thumb_func
unref_sub_80A9B28:
	push	{lr}
	add	sp, sp, #0xfffffff8
	bl	MenuZeroFillScreen
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x11
	mov	r3, #0x12
	bl	MenuDrawTextWindow
	ldr	r3, .L3
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x7
	bl	PrintMenuItems
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x7
	bl	InitMenu
	ldr	r1, .L3+0x4
	ldr	r0, .L3+0x8
	str	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r1}
	bx	r1
.L4:
	.align	2, 0
.L3:
	.word	gMatsudaDebugMenuActions
	.word	gCallback_03004AE8
	.word	sub_80A9B78
.Lfe1:
	.size	 unref_sub_80A9B28,.Lfe1-unref_sub_80A9B28
	.align	2, 0
	.type	 sub_80A9B78,function
	.thumb_func
sub_80A9B78:
	push	{lr}
	bl	ProcessMenuInput
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	bne	.L7	@cond_branch
	mov	r0, #0x0
	b	.L11
.L7:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L9	@cond_branch
	ldr	r2, .L12
	ldr	r0, .L12+0x4
	lsl	r1, r1, #0x3
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	mov	r0, #0x0
	b	.L11
.L13:
	.align	2, 0
.L12:
	.word	gCallback_03004AE8
	.word	gMatsudaDebugMenuActions
.L9:
	bl	CloseMenu
	mov	r0, #0x1
.L11:
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 sub_80A9B78,.Lfe2-sub_80A9B78
	.align	2, 0
	.globl	MatsudaDebugMenu_ContestResults
	.type	 MatsudaDebugMenu_ContestResults,function
	.thumb_func
MatsudaDebugMenu_ContestResults:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L15
	mov	r1, #0xff
	bl	CreateTask
	mov	r0, #0x1
	add	sp, sp, #0x4
	pop	{r1}
	bx	r1
.L16:
	.align	2, 0
.L15:
	.word	sub_80A9BE4
.Lfe3:
	.size	 MatsudaDebugMenu_ContestResults,.Lfe3-MatsudaDebugMenu_ContestResults
	.align	2, 0
	.type	 sub_80A9BE4,function
	.thumb_func
sub_80A9BE4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L20
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L18	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
	ldr	r0, .L20+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L19	@cond_branch
	bl	sub_80AF668
.L19:
	bl	sub_80C2358
.L18:
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gPaletteFade
	.word	gIsLinkContest
.Lfe4:
	.size	 sub_80A9BE4,.Lfe4-sub_80A9BE4
	.align	2, 0
	.globl	MatsudaDebugMenu_Contest
	.type	 MatsudaDebugMenu_Contest,function
	.thumb_func
MatsudaDebugMenu_Contest:
	push	{lr}
	ldr	r1, .L23
	mov	r0, #0x0
	strb	r0, [r1]
	bl	sub_80AA10C
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L24:
	.align	2, 0
.L23:
	.word	gIsLinkContest
.Lfe5:
	.size	 MatsudaDebugMenu_Contest,.Lfe5-MatsudaDebugMenu_Contest
	.align	2, 0
	.globl	MatsudaDebugMenu_ContestComm
	.type	 MatsudaDebugMenu_ContestComm,function
	.thumb_func
MatsudaDebugMenu_ContestComm:
	push	{lr}
	bl	sub_80AA10C
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 MatsudaDebugMenu_ContestComm,.Lfe6-MatsudaDebugMenu_ContestComm
	.align	2, 0
	.globl	MatsudaDebugMenu_CommTest
	.type	 MatsudaDebugMenu_CommTest,function
	.thumb_func
MatsudaDebugMenu_CommTest:
	push	{r4, r5, lr}
	ldr	r5, .L27
	add	r0, r5, #0
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, .L27+0x4
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetTaskFuncWithFollowupFunc
	ldr	r0, .L27+0x8
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L27+0xc
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x1c]
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0x1c]
	mov	r0, #0x1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L28:
	.align	2, 0
.L27:
	.word	sub_80A9E3C
	.word	sub_80A9C98
	.word	sub_80A9E04
	.word	gTasks
.Lfe7:
	.size	 MatsudaDebugMenu_CommTest,.Lfe7-MatsudaDebugMenu_CommTest
	.align	2, 0
	.type	 sub_80A9C98,function
	.thumb_func
sub_80A9C98:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	sub_80AE098
	ldr	r1, .L30
	ldr	r2, .L30+0x4
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r4}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	sub_80C8734
	.word	sub_80A9CC0
.Lfe8:
	.size	 sub_80A9C98,.Lfe8-sub_80A9C98
	.align	2, 0
	.type	 sub_80A9CC0,function
	.thumb_func
sub_80A9CC0:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L33
	ldr	r2, .L33+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	sub_80C88AC
	.word	sub_80A9CDC
.Lfe9:
	.size	 sub_80A9CC0,.Lfe9-sub_80A9CC0
	.align	2, 0
	.type	 sub_80A9CDC,function
	.thumb_func
sub_80A9CDC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L36
	ldr	r2, .L36+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	sub_80C8E1C
	.word	sub_80A9D58
.Lfe10:
	.size	 sub_80A9CDC,.Lfe10-sub_80A9CDC
	.align	2, 0
	.type	 sub_80A9CF8,function
	.thumb_func
sub_80A9CF8:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L40
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L39	@cond_branch
	ldr	r0, .L40+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1c]
	bl	DestroyTask
	add	r0, r4, #0
	bl	DestroyTask
	bl	CloseMenu
.L39:
	pop	{r4}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	gReceivedRemoteLinkPlayers
	.word	gTasks
.Lfe11:
	.size	 sub_80A9CF8,.Lfe11-sub_80A9CF8
	.align	2, 0
	.type	 sub_80A9D30,function
	.thumb_func
sub_80A9D30:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_800832C
	ldr	r1, .L43
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L43+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gTasks
	.word	sub_80A9CF8
.Lfe12:
	.size	 sub_80A9D30,.Lfe12-sub_80A9D30
	.align	2, 0
	.type	 sub_80A9D58,function
	.thumb_func
sub_80A9D58:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r3, #0x0
	ldr	r1, .L51
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r1, #0x12
	add	r2, r0, r1
.L49:
	mov	r0, sp
	add	r1, r0, r3
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L49	@cond_branch
	mov	r0, sp
	bl	sub_80C4B34
	ldr	r1, .L51+0x4
	strb	r0, [r1]
	ldr	r0, .L51+0x8
	ldrb	r0, [r0]
	bl	sub_80AE82C
	mov	r0, #0x0
	bl	sub_80B0F28
	ldr	r1, .L51+0xc
	ldr	r2, .L51+0x10
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gTasks
	.word	gUnknown_0203869B
	.word	gScriptContestCategory
	.word	sub_80C8EBC
	.word	sub_80A9DBC
.Lfe13:
	.size	 sub_80A9D58,.Lfe13-sub_80A9D58
	.align	2, 0
	.type	 sub_80A9DBC,function
	.thumb_func
sub_80A9DBC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L54
	ldr	r2, .L54+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L55:
	.align	2, 0
.L54:
	.word	sub_80C8F34
	.word	sub_80A9DD8
.Lfe14:
	.size	 sub_80A9DBC,.Lfe14-sub_80A9DBC
	.align	2, 0
	.type	 sub_80A9DD8,function
	.thumb_func
sub_80A9DD8:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L57
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1c]
	bl	DestroyTask
	add	r0, r4, #0
	bl	DestroyTask
	bl	CloseMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	gTasks
.Lfe15:
	.size	 sub_80A9DD8,.Lfe15-sub_80A9DD8
	.align	2, 0
	.type	 sub_80A9E04,function
	.thumb_func
sub_80A9E04:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L61
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0x2
	bne	.L60	@cond_branch
	ldr	r2, .L61+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1c]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L61+0x8
	str	r1, [r0]
.L60:
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gMain
	.word	gTasks
	.word	sub_80A9D30
.Lfe16:
	.size	 sub_80A9E04,.Lfe16-sub_80A9E04
	.align	2, 0
	.type	 sub_80A9E3C,function
	.thumb_func
sub_80A9E3C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	OpenLink
	mov	r1, #0x0
	ldr	r3, .L69
	mov	r2, #0xff
.L67:
	lsl	r0, r1, #0x8
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L67	@cond_branch
	ldr	r1, .L69+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	ldr	r1, .L69+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gBlockRecvBuffer
	.word	gTasks
	.word	sub_80A9E80
.Lfe17:
	.size	 sub_80A9E3C,.Lfe17-sub_80A9E3C
	.align	2, 0
	.type	 sub_80A9E80,function
	.thumb_func
sub_80A9E80:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L78
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x9
	bgt	.L72	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x8]
	b	.L73
.L79:
	.align	2, 0
.L78:
	.word	gTasks
.L72:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L73	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	bl	IsLinkMaster
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L75	@cond_branch
	ldr	r0, .L80
	b	.L77
.L81:
	.align	2, 0
.L80:
	.word	sub_80A9ED8
.L75:
	ldr	r0, .L82
.L77:
	str	r0, [r4]
.L73:
	pop	{r4}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	sub_80A9F10
.Lfe18:
	.size	 sub_80A9E80,.Lfe18-sub_80A9E80
	.align	2, 0
	.type	 sub_80A9ED8,function
	.thumb_func
sub_80A9ED8:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L86
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x65
	bne	.L85	@cond_branch
	bl	sub_8007F4C
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L86+0x4
	str	r0, [r4]
.L85:
	pop	{r4}
	pop	{r0}
	bx	r0
.L87:
	.align	2, 0
.L86:
	.word	gTasks
	.word	sub_80A9F10
.Lfe19:
	.size	 sub_80A9ED8,.Lfe19-sub_80A9ED8
	.align	2, 0
	.type	 sub_80A9F10,function
	.thumb_func
sub_80A9F10:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L91
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L89	@cond_branch
	bl	GetMultiplayerId
	ldr	r1, .L91+0x4
	strb	r0, [r1]
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L89	@cond_branch
	ldr	r1, .L91+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	add	r0, r4, #0
	bl	SwitchTaskToFollowupFunc
.L89:
	pop	{r4}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gReceivedRemoteLinkPlayers
	.word	gContestPlayerMonIndex
	.word	gIsLinkContest
.Lfe20:
	.size	 sub_80A9F10,.Lfe20-sub_80A9F10
	.align	2, 0
	.type	 sub_80A9F50,function
	.thumb_func
sub_80A9F50:
	push	{r4, lr}
	mov	r2, #0x80
	lsl	r2, r2, #0x13
	mov	r0, #0x40
	strh	r0, [r2]
	ldrh	r0, [r2]
	mov	r3, #0x88
	lsl	r3, r3, #0x5
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r4, .L94
	add	r0, r4, #0
	bl	SetUpWindowConfig
	ldr	r0, .L94+0x4
	add	r1, r4, #0
	bl	InitWindowFromConfig
	ldr	r0, .L94+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	sub	r0, r0, #0x44
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	ldr	r0, .L94+0xc
	strh	r1, [r0]
	ldr	r0, .L94+0x10
	strh	r1, [r0]
	ldr	r0, .L94+0x14
	strh	r1, [r0]
	ldr	r0, .L94+0x18
	strh	r1, [r0]
	ldr	r0, .L94+0x1c
	strh	r1, [r0]
	ldr	r0, .L94+0x20
	strh	r1, [r0]
	ldr	r0, .L94+0x24
	strh	r1, [r0]
	ldr	r0, .L94+0x28
	strh	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gWindowConfig_81E6C3C
	.word	gMenuWindow
	.word	0x400004c
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
.Lfe21:
	.size	 sub_80A9F50,.Lfe21-sub_80A9F50
	.align	2, 0
	.type	 sub_80A9FE4,function
	.thumb_func
sub_80A9FE4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff4
	ldr	r1, .L102
	mov	r0, sp
	mov	r2, #0x5
	bl	memcpy
	mov	r2, #0xc0
	lsl	r2, r2, #0x13
	mov	r3, #0xc0
	lsl	r3, r3, #0x9
	add	r5, sp, #0x8
	mov	r6, #0x0
	ldr	r1, .L102+0x4
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	mov	ip, r5
	ldr	r7, .L102+0x8
	mov	r0, #0x85
	lsl	r0, r0, #0x18
	mov	r8, r0
.L97:
	str	r6, [sp, #0x8]
	mov	r0, ip
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r4
	sub	r3, r3, r4
	cmp	r3, r4
	bhi	.L97	@cond_branch
	str	r6, [sp, #0x8]
	str	r5, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x2
	mov	r2, r8
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	mov	r1, sp
	bl	sub_80034D4
	ldr	r0, .L102+0xc
	bl	LoadFontDefaultPalette
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gMatsudaDebugMenu_UnknownByteArray
	.word	0x40000d4
	.word	0x85000400
	.word	gWindowConfig_81E6C3C
.Lfe22:
	.size	 sub_80A9FE4,.Lfe22-sub_80A9FE4
	.align	2, 0
	.type	 sub_80AA064,function
	.thumb_func
sub_80AA064:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	RunTasks
	bl	UpdatePaletteFade
	ldr	r0, .L106
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0x4
	bne	.L105	@cond_branch
	ldr	r0, .L106+0x4
	bl	SetMainCallback2
.L105:
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gMain
	.word	sub_805469C
.Lfe23:
	.size	 sub_80AA064,.Lfe23-sub_80AA064
	.align	2, 0
	.type	 sub_80AA090,function
	.thumb_func
sub_80AA090:
	push	{lr}
	ldr	r1, .L109
	ldr	r0, .L109+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L109+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L109+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L109+0x10
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L109+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L109+0x18
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L109+0x1c
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L109+0x20
	ldrh	r0, [r0]
	strh	r0, [r1]
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	sub_8089668
	pop	{r0}
	bx	r0
.L110:
	.align	2, 0
.L109:
	.word	0x4000010
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
.Lfe24:
	.size	 sub_80AA090,.Lfe24-sub_80AA090
	.align	2, 0
	.type	 sub_80AA10C,function
	.thumb_func
sub_80AA10C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	ldr	r4, .L118
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r4, #0x8]
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80A9F50
	bl	dp12_8087EA4
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	ResetTasks
	bl	FreeAllSpritePalettes
	bl	sub_80A9FE4
	ldr	r0, .L118+0x4
	bl	SetVBlankCallback
	ldr	r0, .L118+0x8
	bl	SetMainCallback2
	ldrb	r1, [r4, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r4, #0x8]
	ldr	r4, .L118+0xc
	mov	r0, #0x0
	strb	r0, [r4]
	ldr	r0, .L118+0x10
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L112	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_80AE398
.L112:
	ldrb	r0, [r4]
	bl	sub_80AE098
	mov	r5, #0x0
	ldr	r6, .L118+0x14
	add	r0, r6, #0x1
	mov	r8, r0
	ldr	r7, .L118+0x18
.L116:
	lsl	r2, r5, #0x2
	add	r0, r2, r7
	ldr	r1, [r0]
	add	r2, r2, r5
	lsl	r2, r2, #0x11
	mov	r0, #0xa8
	lsl	r0, r0, #0xe
	add	r2, r2, r0
	lsr	r2, r2, #0x10
	lsl	r4, r5, #0x1
	add	r0, r4, r6
	ldrb	r3, [r0]
	add	r4, r4, r8
	ldrb	r0, [r4]
	str	r0, [sp]
	ldr	r0, .L118+0x1c
	bl	sub_8003460
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L116	@cond_branch
	ldr	r1, .L118+0x20
	ldr	r4, .L118+0x24
	mov	r0, #0x0
	strh	r0, [r4]
	strh	r0, [r1]
	mov	r5, #0x0
	mov	r0, #0x0
	bl	sub_80AA5BC
	ldrb	r0, [r4]
	bl	sub_80AA5E8
	ldr	r4, .L118+0x1c
	ldr	r1, .L118+0x28
	mov	r0, #0x12
	str	r0, [sp]
	add	r0, r4, #0
	mov	r2, #0xd6
	mov	r3, #0x12
	bl	sub_8003460
	ldr	r1, .L118+0x2c
	mov	r0, #0xc
	str	r0, [sp]
	add	r0, r4, #0
	mov	r2, #0xdc
	mov	r3, #0x0
	bl	sub_8003460
	ldr	r0, .L118+0x30
	bl	LoadSpriteSheet
	ldr	r0, .L118+0x34
	bl	LoadSpritePalette
	mov	r0, #0x3
	bl	sub_80AA280
	mov	r0, #0x3
	bl	sub_80AA658
	mov	r0, #0x3
	mov	r1, #0x0
	bl	sub_80AA614
	ldr	r0, .L118+0x38
	ldr	r1, .L118+0x3c
	ldrb	r1, [r1, #0x3]
	ldr	r2, .L118+0x40
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L118+0x44
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x1
	strh	r0, [r1, #0x2e]
	strh	r0, [r1, #0x30]
	mov	r0, #0x3
	strh	r0, [r1, #0x32]
	strh	r5, [r1, #0x34]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gPaletteFade
	.word	sub_80AA090
	.word	sub_80AA064
	.word	gUnknown_02038694
	.word	gContestMons
	.word	gMatsudaDebugMenuContestTopLeft
	.word	gMatsudaDebugMenuTextList1
	.word	gMenuWindow
	.word	gScriptContestCategory
	.word	gScriptContestRank
	.word	gMatsudaDebugMenu_GoBackText
	.word	gMatsudaDebugMenu_BattlePointsText
	.word	gUnknown_083C92B4
	.word	gUnknown_083C92BC
	.word	gSpriteTemplate_83C92CC
	.word	gUnknown_083C9296
	.word	gUnknown_083C92A8
	.word	gSprites
.Lfe25:
	.size	 sub_80AA10C,.Lfe25-sub_80AA10C
	.align	2, 0
	.globl	sub_80AA280
	.type	 sub_80AA280,function
	.thumb_func
sub_80AA280:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L128
	mov	r1, #0x1e
	str	r1, [sp]
	mov	r1, #0x3
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowRect_DefaultPalette
	ldr	r4, .L128+0x4
	ldr	r1, .L128+0x8
	add	r0, r4, #0
	bl	StringCopy
	lsl	r1, r7, #0x6
	ldr	r0, .L128+0xc
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringAppend
	mov	r5, #0x0
	ldr	r6, .L128+0x10
	add	r0, r6, #0x1
	mov	r8, r0
.L124:
	cmp	r7, r5
	bne	.L125	@cond_branch
	lsl	r2, r5, #0x2
	add	r2, r2, r5
	lsl	r2, r2, #0x11
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	add	r2, r2, r0
	lsr	r2, r2, #0x10
	lsl	r1, r5, #0x1
	add	r0, r1, r6
	ldrb	r3, [r0]
	add	r1, r1, r8
	ldrb	r0, [r1]
	str	r0, [sp]
	ldr	r0, .L128
	ldr	r1, .L128+0x4
	bl	sub_8003460
	b	.L123
.L129:
	.align	2, 0
.L128:
	.word	gMenuWindow
	.word	gSharedMem
	.word	gMatsudaDebugMenu_StartText
	.word	gUnknown_0203857D
	.word	gUnknown_083C926E
.L125:
	lsl	r1, r5, #0x6
	ldr	r0, .L130
	add	r1, r1, r0
	lsl	r2, r5, #0x2
	add	r2, r2, r5
	lsl	r2, r2, #0x11
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	add	r2, r2, r0
	lsr	r2, r2, #0x10
	lsl	r4, r5, #0x1
	add	r0, r4, r6
	ldrb	r3, [r0]
	add	r4, r4, r8
	ldrb	r0, [r4]
	str	r0, [sp]
	ldr	r0, .L130+0x4
	bl	sub_8003460
.L123:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L124	@cond_branch
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L131:
	.align	2, 0
.L130:
	.word	gUnknown_0203857D
	.word	gMenuWindow
.Lfe26:
	.size	 sub_80AA280,.Lfe26-sub_80AA280
	.align	2, 0
	.type	 sub_80AA340,function
	.thumb_func
sub_80AA340:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	ldr	r4, .L133
	ldr	r1, .L133+0x4
	lsr	r0, r0, #0x12
	add	r0, r0, r1
	add	r0, r0, #0x26
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L133+0x8
	ldr	r1, .L133+0xc
	ldrb	r3, [r1]
	ldrb	r1, [r1, #0x1]
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x66
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L134:
	.align	2, 0
.L133:
	.word	gSharedMem
	.word	gContestMons
	.word	gMenuWindow
	.word	gUnknown_083C9282
.Lfe27:
	.size	 sub_80AA340,.Lfe27-sub_80AA340
	.align	2, 0
	.type	 sub_80AA388,function
	.thumb_func
sub_80AA388:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	ldr	r4, .L136
	ldr	r1, .L136+0x4
	lsr	r0, r0, #0x12
	add	r0, r0, r1
	add	r0, r0, #0x28
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L136+0x8
	ldr	r1, .L136+0xc
	ldrb	r3, [r1, #0x2]
	ldrb	r1, [r1, #0x3]
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x6c
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L137:
	.align	2, 0
.L136:
	.word	gSharedMem
	.word	gContestMons
	.word	gMenuWindow
	.word	gUnknown_083C9282
.Lfe28:
	.size	 sub_80AA388,.Lfe28-sub_80AA388
	.align	2, 0
	.type	 sub_80AA3D0,function
	.thumb_func
sub_80AA3D0:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	ldr	r4, .L139
	ldr	r1, .L139+0x4
	lsr	r0, r0, #0x12
	add	r0, r0, r1
	add	r0, r0, #0x27
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L139+0x8
	ldr	r1, .L139+0xc
	ldrb	r3, [r1, #0x4]
	ldrb	r1, [r1, #0x5]
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x72
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	gSharedMem
	.word	gContestMons
	.word	gMenuWindow
	.word	gUnknown_083C9282
.Lfe29:
	.size	 sub_80AA3D0,.Lfe29-sub_80AA3D0
	.align	2, 0
	.type	 sub_80AA418,function
	.thumb_func
sub_80AA418:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	ldr	r4, .L142
	ldr	r1, .L142+0x4
	lsr	r0, r0, #0x12
	add	r0, r0, r1
	add	r0, r0, #0x29
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L142+0x8
	ldr	r1, .L142+0xc
	ldrb	r3, [r1, #0x6]
	ldrb	r1, [r1, #0x7]
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x78
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gSharedMem
	.word	gContestMons
	.word	gMenuWindow
	.word	gUnknown_083C9282
.Lfe30:
	.size	 sub_80AA418,.Lfe30-sub_80AA418
	.align	2, 0
	.type	 sub_80AA460,function
	.thumb_func
sub_80AA460:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	ldr	r4, .L145
	ldr	r1, .L145+0x4
	lsr	r0, r0, #0x12
	add	r0, r0, r1
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L145+0x8
	ldr	r1, .L145+0xc
	ldrb	r3, [r1, #0x8]
	ldrb	r1, [r1, #0x9]
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x7e
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	gSharedMem
	.word	gContestMons
	.word	gMenuWindow
	.word	gUnknown_083C9282
.Lfe31:
	.size	 sub_80AA460,.Lfe31-sub_80AA460
	.align	2, 0
	.type	 sub_80AA4A8,function
	.thumb_func
sub_80AA4A8:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	ldr	r4, .L148
	ldr	r1, .L148+0x4
	lsr	r0, r0, #0x12
	add	r0, r0, r1
	add	r0, r0, #0x2b
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L148+0x8
	ldr	r1, .L148+0xc
	ldrb	r3, [r1, #0xa]
	ldrb	r1, [r1, #0xb]
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x84
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L149:
	.align	2, 0
.L148:
	.word	gSharedMem
	.word	gContestMons
	.word	gMenuWindow
	.word	gUnknown_083C9282
.Lfe32:
	.size	 sub_80AA4A8,.Lfe32-sub_80AA4A8
	.align	2, 0
	.type	 sub_80AA4F0,function
	.thumb_func
sub_80AA4F0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	add	r6, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r7, .L151
	ldr	r0, .L151+0x4
	lsl	r5, r6, #0x1
	add	r1, r5, r0
	ldrb	r1, [r1]
	mov	r9, r1
	add	r0, r0, #0x1
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	sl, r0
	mov	r0, #0x7
	add	r0, r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	str	r0, [sp]
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, r9
	mov	r3, sl
	bl	FillWindowRect_DefaultPalette
	ldr	r0, .L151+0x8
	lsl	r4, r4, #0x6
	add	r4, r5, r4
	add	r0, r0, #0x1e
	add	r4, r4, r0
	ldrh	r0, [r4]
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	ldr	r0, .L151+0xc
	add	r1, r1, r0
	lsl	r2, r6, #0x3
	sub	r2, r2, r6
	lsl	r2, r2, #0x11
	mov	r0, #0x8a
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	lsr	r2, r2, #0x10
	mov	r0, sl
	str	r0, [sp]
	add	r0, r7, #0
	mov	r3, r9
	bl	sub_8003460
	ldr	r0, .L151+0x10
	mov	r9, r0
	ldrh	r1, [r4]
	mov	r2, #0x2
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r5, r5, r6
	lsl	r5, r5, #0x11
	mov	r0, #0xfa
	lsl	r0, r0, #0x10
	add	r5, r5, r0
	lsr	r5, r5, #0x10
	mov	r0, sl
	str	r0, [sp]
	add	r0, r7, #0
	mov	r1, r9
	add	r2, r5, #0
	mov	r3, r8
	bl	sub_8003460
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	gMenuWindow
	.word	gUnknown_083C928E
	.word	gContestMons
	.word	gMoveNames
	.word	gStringVar1
.Lfe33:
	.size	 sub_80AA4F0,.Lfe33-sub_80AA4F0
	.align	2, 0
	.type	 sub_80AA5BC,function
	.thumb_func
sub_80AA5BC:
	push	{lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	ldr	r2, .L154
	ldr	r1, .L154+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x12
	str	r0, [sp]
	add	r0, r2, #0
	mov	r2, #0xc2
	mov	r3, #0x3
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	gMenuWindow
	.word	gMatsudaDebugMenuTextList2
.Lfe34:
	.size	 sub_80AA5BC,.Lfe34-sub_80AA5BC
	.align	2, 0
	.globl	sub_80AA5E8
	.type	 sub_80AA5E8,function
	.thumb_func
sub_80AA5E8:
	push	{lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	ldr	r2, .L157
	ldr	r1, .L157+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x4
	str	r0, [sp]
	add	r0, r2, #0
	mov	r2, #0xe8
	mov	r3, #0x3
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	gMenuWindow
	.word	gMatsudaDebugMenuTextList3
.Lfe35:
	.size	 sub_80AA5E8,.Lfe35-sub_80AA5E8
	.align	2, 0
	.type	 sub_80AA614,function
	.thumb_func
sub_80AA614:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	sub_80AE770
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L160
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L160+0x4
	mov	r1, #0xc
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0xe2
	mov	r3, #0x3
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	gSharedMem
	.word	gMenuWindow
.Lfe36:
	.size	 sub_80AA614,.Lfe36-sub_80AA614
	.align	2, 0
	.globl	sub_80AA658
	.type	 sub_80AA658,function
	.thumb_func
sub_80AA658:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	sub_80AA340
	add	r0, r5, #0
	bl	sub_80AA388
	add	r0, r5, #0
	bl	sub_80AA3D0
	add	r0, r5, #0
	bl	sub_80AA418
	add	r0, r5, #0
	bl	sub_80AA460
	add	r0, r5, #0
	bl	sub_80AA4A8
	mov	r4, #0x0
.L166:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_80AA4F0
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L166	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 sub_80AA658,.Lfe37-sub_80AA658
	.align	2, 0
	.globl	SetDebugMonForContest
	.type	 SetDebugMonForContest,function
	.thumb_func
SetDebugMonForContest:
	push	{r4, r5, r6, lr}
	ldr	r6, .L169
	ldr	r5, .L169+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	ldr	r4, .L169+0x8
	add	r2, r2, r4
	add	r0, r6, #0
	mov	r1, #0x16
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	add	r0, r4, #0x2
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x18
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	add	r0, r4, #0x1
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x17
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	add	r0, r4, #0x3
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x21
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	add	r0, r4, #0x4
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x2f
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	add	r0, r4, #0x5
	add	r2, r2, r0
	add	r0, r6, #0
	mov	r1, #0x30
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	sub	r4, r4, #0x8
	add	r2, r2, r4
	add	r0, r6, #0
	mov	r1, #0xd
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	add	r2, r2, r4
	add	r2, r2, #0x2
	add	r0, r6, #0
	mov	r1, #0xe
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	add	r2, r2, r4
	add	r2, r2, #0x4
	add	r0, r6, #0
	mov	r1, #0xf
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x6
	add	r2, r2, r4
	add	r2, r2, #0x6
	add	r0, r6, #0
	mov	r1, #0x10
	bl	SetMonData
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	gPlayerParty
	.word	gContestPlayerMonIndex
	.word	gContestMons+0x26
.Lfe38:
	.size	 SetDebugMonForContest,.Lfe38-SetDebugMonForContest
	.align	2, 0
	.globl	sub_80AA754
	.type	 sub_80AA754,function
	.thumb_func
sub_80AA754:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L193
	ldrh	r1, [r0, #0x30]
	cmp	r1, #0x20
	beq	.L174	@cond_branch
	cmp	r1, #0x20
	bgt	.L188	@cond_branch
	cmp	r1, #0x2
	beq	.L182	@cond_branch
	cmp	r1, #0x2
	bgt	.L189	@cond_branch
	cmp	r1, #0x1
	beq	.L181	@cond_branch
	b	.L172
.L194:
	.align	2, 0
.L193:
	.word	gMain
.L189:
	cmp	r1, #0x8
	beq	.L185	@cond_branch
	cmp	r1, #0x10
	beq	.L174	@cond_branch
	b	.L172
.L188:
	cmp	r1, #0x80
	beq	.L178	@cond_branch
	cmp	r1, #0x80
	bgt	.L190	@cond_branch
	cmp	r1, #0x40
	beq	.L175	@cond_branch
	b	.L172
.L190:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L183	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	cmp	r1, r0
	beq	.L184	@cond_branch
	b	.L172
.L174:
	ldrh	r0, [r4, #0x2e]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x2e]
	b	.L172
.L175:
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L176	@cond_branch
	mov	r0, #0x8
	strh	r0, [r4, #0x30]
	b	.L172
.L176:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L172
.L178:
	ldrh	r1, [r4, #0x30]
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x8
	bne	.L179	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	b	.L172
.L179:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L172
.L181:
	ldr	r2, .L195
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	mov	r3, #0x30
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r0, r0, r2
	ldr	r2, [r0]
	add	r0, r4, #0
	mov	r1, #0x1
	b	.L191
.L196:
	.align	2, 0
.L195:
	.word	gUnknown_083C92E4
.L182:
	ldr	r1, .L197
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	lsl	r2, r2, #0x2
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r1
	mov	r1, #0x1
	neg	r1, r1
	b	.L192
.L198:
	.align	2, 0
.L197:
	.word	gUnknown_083C92E4
.L183:
	ldr	r2, .L199
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	mov	r3, #0x30
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r0, r0, r2
	ldr	r2, [r0]
	add	r0, r4, #0
	mov	r1, #0xa
	b	.L191
.L200:
	.align	2, 0
.L199:
	.word	gUnknown_083C92E4
.L184:
	ldr	r1, .L201
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	lsl	r2, r2, #0x2
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r1
	mov	r1, #0xa
	neg	r1, r1
.L192:
	ldr	r2, [r2]
	add	r0, r4, #0
.L191:
	bl	_call_via_r2
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	sub_80AA614
	b	.L172
.L202:
	.align	2, 0
.L201:
	.word	gUnknown_083C92E4
.L185:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_80AAD08
.L172:
	ldr	r2, .L203
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	strh	r0, [r4, #0x20]
	ldr	r1, .L203+0x4
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x22]
	pop	{r4}
	pop	{r0}
	bx	r0
.L204:
	.align	2, 0
.L203:
	.word	gUnknown_083C9296
	.word	gUnknown_083C92A8
.Lfe39:
	.size	 sub_80AA754,.Lfe39-sub_80AA754
	.align	2, 0
	.type	 sub_80AA8A0,function
	.thumb_func
sub_80AA8A0:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r2, r2, #0x18
	lsr	r0, r2, #0x18
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L206	@cond_branch
	strh	r0, [r4, #0x32]
	bl	sub_80AA280
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA658
.L206:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 sub_80AA8A0,.Lfe40-sub_80AA8A0
	.align	2, 0
	.globl	sub_80AA8C8
	.type	 sub_80AA8C8,function
	.thumb_func
sub_80AA8C8:
	push	{lr}
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r2, #0x0
	bl	sub_80AA8A0
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 sub_80AA8C8,.Lfe41-sub_80AA8C8
	.align	2, 0
	.globl	sub_80AA8D8
	.type	 sub_80AA8D8,function
	.thumb_func
sub_80AA8D8:
	push	{lr}
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r2, #0x1
	bl	sub_80AA8A0
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_80AA8D8,.Lfe42-sub_80AA8D8
	.align	2, 0
	.globl	sub_80AA8E8
	.type	 sub_80AA8E8,function
	.thumb_func
sub_80AA8E8:
	push	{lr}
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r2, #0x2
	bl	sub_80AA8A0
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 sub_80AA8E8,.Lfe43-sub_80AA8E8
	.align	2, 0
	.globl	sub_80AA8F8
	.type	 sub_80AA8F8,function
	.thumb_func
sub_80AA8F8:
	push	{lr}
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r2, #0x3
	bl	sub_80AA8A0
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 sub_80AA8F8,.Lfe44-sub_80AA8F8
	.align	2, 0
	.type	 sub_80AA908,function
	.thumb_func
sub_80AA908:
	push	{lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	asr	r2, r2, #0x18
	add	r2, r2, r1
	lsl	r2, r2, #0x10
	lsr	r0, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0xff
	ble	.L212	@cond_branch
	mov	r0, #0xff
	b	.L213
.L212:
	cmp	r2, #0
	bge	.L213	@cond_branch
	mov	r0, #0x0
.L213:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 sub_80AA908,.Lfe45-sub_80AA908
	.align	2, 0
	.globl	sub_80AA930
	.type	 sub_80AA930,function
	.thumb_func
sub_80AA930:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L216
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	add	r2, r2, #0x26
	ldrb	r3, [r2]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AA908
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	add	r1, r1, #0x26
	strb	r0, [r1]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA340
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	gContestMons
.Lfe46:
	.size	 sub_80AA930,.Lfe46-sub_80AA930
	.align	2, 0
	.globl	sub_80AA974
	.type	 sub_80AA974,function
	.thumb_func
sub_80AA974:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L219
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	add	r2, r2, #0x28
	ldrb	r3, [r2]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AA908
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	add	r1, r1, #0x28
	strb	r0, [r1]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA388
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gContestMons
.Lfe47:
	.size	 sub_80AA974,.Lfe47-sub_80AA974
	.align	2, 0
	.globl	sub_80AA9B8
	.type	 sub_80AA9B8,function
	.thumb_func
sub_80AA9B8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L222
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	add	r2, r2, #0x27
	ldrb	r3, [r2]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AA908
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	add	r1, r1, #0x27
	strb	r0, [r1]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA3D0
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gContestMons
.Lfe48:
	.size	 sub_80AA9B8,.Lfe48-sub_80AA9B8
	.align	2, 0
	.globl	sub_80AA9FC
	.type	 sub_80AA9FC,function
	.thumb_func
sub_80AA9FC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L225
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	add	r2, r2, #0x29
	ldrb	r3, [r2]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AA908
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	add	r1, r1, #0x29
	strb	r0, [r1]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA418
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L226:
	.align	2, 0
.L225:
	.word	gContestMons
.Lfe49:
	.size	 sub_80AA9FC,.Lfe49-sub_80AA9FC
	.align	2, 0
	.globl	sub_80AAA40
	.type	 sub_80AAA40,function
	.thumb_func
sub_80AAA40:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L228
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	add	r2, r2, #0x2a
	ldrb	r3, [r2]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AA908
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA460
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L229:
	.align	2, 0
.L228:
	.word	gContestMons
.Lfe50:
	.size	 sub_80AAA40,.Lfe50-sub_80AAA40
	.align	2, 0
	.globl	sub_80AAA84
	.type	 sub_80AAA84,function
	.thumb_func
sub_80AAA84:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L231
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	add	r2, r2, #0x2b
	ldrb	r3, [r2]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AA908
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	add	r1, r1, #0x2b
	strb	r0, [r1]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA4A8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L232:
	.align	2, 0
.L231:
	.word	gContestMons
.Lfe51:
	.size	 sub_80AAA84,.Lfe51-sub_80AAA84
	.align	2, 0
	.type	 sub_80AAAC8,function
	.thumb_func
sub_80AAAC8:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	asr	r2, r2, #0x18
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0xb1
	lsl	r2, r2, #0x1
	cmp	r1, r2
	ble	.L234	@cond_branch
	mov	r0, #0x1
	b	.L235
.L234:
	cmp	r1, #0
	bge	.L235	@cond_branch
	add	r0, r2, #0
.L235:
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 sub_80AAAC8,.Lfe52-sub_80AAAC8
	.align	2, 0
	.globl	sub_80AAAF0
	.type	 sub_80AAAF0,function
	.thumb_func
sub_80AAAF0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L238
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	ldrh	r3, [r2, #0x1e]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AAAC8
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	sub_80AA4F0
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	gContestMons
.Lfe53:
	.size	 sub_80AAAF0,.Lfe53-sub_80AAAF0
	.align	2, 0
	.globl	sub_80AAB30
	.type	 sub_80AAB30,function
	.thumb_func
sub_80AAB30:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L241
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	ldrh	r3, [r2, #0x20]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AAAC8
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	strh	r0, [r1, #0x20]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	sub_80AA4F0
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L242:
	.align	2, 0
.L241:
	.word	gContestMons
.Lfe54:
	.size	 sub_80AAB30,.Lfe54-sub_80AAB30
	.align	2, 0
	.globl	sub_80AAB70
	.type	 sub_80AAB70,function
	.thumb_func
sub_80AAB70:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L244
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	ldrh	r3, [r2, #0x22]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AAAC8
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	strh	r0, [r1, #0x22]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	sub_80AA4F0
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L245:
	.align	2, 0
.L244:
	.word	gContestMons
.Lfe55:
	.size	 sub_80AAB70,.Lfe55-sub_80AAB70
	.align	2, 0
	.globl	sub_80AABB0
	.type	 sub_80AABB0,function
	.thumb_func
sub_80AABB0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L247
	mov	r3, #0x32
	ldrsh	r2, [r4, r3]
	lsl	r2, r2, #0x6
	add	r2, r2, r5
	ldrh	r3, [r2, #0x24]
	lsl	r2, r1, #0x18
	asr	r2, r2, #0x18
	add	r1, r3, #0
	bl	sub_80AAAC8
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x6
	add	r1, r1, r5
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	sub_80AA4F0
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	gContestMons
.Lfe56:
	.size	 sub_80AABB0,.Lfe56-sub_80AABB0
	.align	2, 0
	.globl	sub_80AABF0
	.type	 sub_80AABF0,function
	.thumb_func
sub_80AABF0:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	mov	r0, #0xff
	cmp	r1, #0
	ble	.L250	@cond_branch
	mov	r0, #0x1
.L250:
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	ldrh	r1, [r5, #0x34]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0
	bge	.L252	@cond_branch
	mov	r4, #0x0
	b	.L253
.L252:
	cmp	r0, #0x4
	ble	.L253	@cond_branch
	mov	r4, #0x4
.L253:
	lsl	r4, r4, #0x18
	lsr	r0, r4, #0x18
	bl	sub_80AA5BC
	asr	r4, r4, #0x18
	strh	r4, [r5, #0x34]
	ldr	r0, .L255
	strh	r4, [r0]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L255+0x4
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	sub_80AE398
	ldrh	r0, [r5, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA280
	ldrh	r0, [r5, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA658
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gScriptContestCategory
	.word	gScriptContestRank
.Lfe57:
	.size	 sub_80AABF0,.Lfe57-sub_80AABF0
	.align	2, 0
	.globl	sub_80AAC5C
	.type	 sub_80AAC5C,function
	.thumb_func
sub_80AAC5C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	ble	.L258	@cond_branch
	ldr	r1, .L262
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	add	r4, r1, #0
	b	.L259
.L263:
	.align	2, 0
.L262:
	.word	gScriptContestRank
.L258:
	ldr	r0, .L264
	ldrh	r2, [r0]
	add	r4, r0, #0
	cmp	r2, #0
	beq	.L259	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r4]
.L259:
	add	r1, r4, #0
	ldrh	r0, [r1]
	cmp	r0, #0x3
	bls	.L261	@cond_branch
	mov	r0, #0x3
	strh	r0, [r1]
.L261:
	ldrb	r0, [r4]
	bl	sub_80AA5E8
	ldr	r0, .L264+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r4]
	bl	sub_80AE398
	ldrh	r0, [r5, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA280
	ldrh	r0, [r5, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80AA658
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	gScriptContestRank
	.word	gScriptContestCategory
.Lfe58:
	.size	 sub_80AAC5C,.Lfe58-sub_80AAC5C
	.align	2, 0
	.globl	sub_80AACC4
	.type	 sub_80AACC4,function
	.thumb_func
sub_80AACC4:
	push	{lr}
	bl	UpdatePaletteFade
	ldr	r0, .L269
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L267	@cond_branch
	bl	SetDebugMonForContest
	ldr	r0, .L269+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L268	@cond_branch
	ldr	r0, .L269+0x8
	ldrb	r0, [r0]
	bl	sub_80AE82C
.L268:
	ldr	r0, .L269+0xc
	bl	SetMainCallback2
.L267:
	pop	{r0}
	bx	r0
.L270:
	.align	2, 0
.L269:
	.word	gPaletteFade
	.word	gIsLinkContest
	.word	gSharedMem
	.word	sub_80AB47C
.Lfe59:
	.size	 sub_80AACC4,.Lfe59-sub_80AACC4
	.align	2, 0
	.type	 sub_80AAD08,function
	.thumb_func
sub_80AAD08:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L272	@cond_branch
	ldr	r1, .L273
	ldrh	r0, [r0, #0x34]
	mov	r4, #0x0
	strb	r0, [r1]
	ldr	r0, .L273+0x4
	bl	SetMainCallback2
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L272:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L274:
	.align	2, 0
.L273:
	.word	gSharedMem
	.word	sub_80AACC4
.Lfe60:
	.size	 sub_80AAD08,.Lfe60-sub_80AAD08
	.align	2, 0
	.globl	sub_80AAD44
	.type	 sub_80AAD44,function
	.thumb_func
sub_80AAD44:
	push	{r4, r5, lr}
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L276	@cond_branch
	bl	SetDebugMonForContest
	mov	r4, #0x0
	ldr	r5, .L282
.L280:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L282+0x4
	ldrb	r1, [r1]
	bl	sub_80AE770
	strh	r0, [r5]
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L280	@cond_branch
	ldr	r0, .L282+0x8
	bl	SetMainCallback2
.L276:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L283:
	.align	2, 0
.L282:
	.word	gUnknown_02038670
	.word	gScriptContestCategory
	.word	sub_805469C
.Lfe61:
	.size	 sub_80AAD44,.Lfe61-sub_80AAD44
	.align	2, 0
	.globl	sub_80AAD84
	.type	 sub_80AAD84,function
	.thumb_func
sub_80AAD84:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x64
    mov r9, r0
    lsls r1, 24
    lsrs r1, 24
    str r1, [sp, 0x48]
    lsls r2, 24
    lsrs r2, 24
    str r2, [sp, 0x4C]
    lsls r3, 24
    lsrs r3, 24
    mov r10, r3
    mov r5, r10
    adds r5, 0x1
    lsls r1, r5, 8
    ldr r0, _080AAEC4 @ =0x06018000
    subs r1, r0, r1
    movs r0, 0
    str r0, [sp, 0x44]
    ldr r4, _080AAEC8 @ =0x040000d4
    add r0, sp, 0x44
    str r0, [r4]
    str r1, [r4, 0x4]
    ldr r0, _080AAECC @ =0x85000040
    str r0, [r4, 0x8]
    ldr r0, [r4, 0x8]
    mov r0, r9
    bl StringLength
    lsls r0, 16
    lsrs r7, r0, 16
    cmp r7, 0x8
    bls _080AADD0
    movs r7, 0x8
_080AADD0:
    movs r6, 0
    mov r8, r5
    mov r1, r10
    lsls r1, 1
    str r1, [sp, 0x58]
    ldr r2, [sp, 0x48]
    adds r2, 0x20
    str r2, [sp, 0x5C]
    cmp r6, r7
    bge _080AAE1E
    add r5, sp, 0x40
    add r0, sp, 0x20
    mov r10, r0
    ldr r2, _080AAEC4 @ =0x06018000
_080AADEC:
    mov r1, r9
    adds r0, r1, r6
    ldrb r0, [r0]
    strb r0, [r5]
    movs r0, 0xFF
    strb r0, [r5, 0x1]
    mov r0, sp
    adds r1, r5, 0
    str r2, [sp, 0x60]
    bl sub_80034D4
    mov r1, r8
    lsls r0, r1, 8
    ldr r2, [sp, 0x60]
    subs r0, r2, r0
    mov r1, r10
    str r1, [r4]
    str r0, [r4, 0x4]
    ldr r0, _080AAED0 @ =0x84000008
    str r0, [r4, 0x8]
    ldr r0, [r4, 0x8]
    adds r2, 0x20
    adds r6, 0x1
    cmp r6, r7
    blt _080AADEC
_080AAE1E:
    movs r1, 0x7C
    ldr r2, [sp, 0x58]
    subs r1, r2
    lsls r1, 24
    lsrs r7, r1, 24
    ldr r0, _080AAED4 @ =gMain
    mov r9, r0
    lsls r3, r7, 3
    add r3, r9
    ldr r0, _080AAED8 @ =gUnknown_083C9400
    ldr r1, [r0]
    ldr r2, [r0, 0x4]
    str r1, [sp, 0x50]
    str r2, [sp, 0x54]
    str r1, [r3, 0x3C]
    str r2, [r3, 0x40]
    mov r2, r8
    lsls r0, r2, 3
    movs r1, 0x80
    lsls r1, 3
    adds r2, r1, 0
    subs r2, r0
    adds r6, r3, 0
    adds r6, 0x40
    ldr r0, _080AAEDC @ =0x000003ff
    mov r8, r0
    mov r1, r8
    ands r2, r1
    ldrh r5, [r6]
    ldr r4, _080AAEE0 @ =0xfffffc00
    adds r0, r4, 0
    ands r0, r5
    orrs r0, r2
    strh r0, [r6]
    ldrh r5, [r3, 0x3E]
    ldr r2, _080AAEE4 @ =0xfffffe00
    adds r0, r2, 0
    ands r0, r5
    ldr r1, [sp, 0x48]
    orrs r0, r1
    strh r0, [r3, 0x3E]
    adds r3, 0x3C
    add r0, sp, 0x4C
    ldrb r0, [r0]
    strb r0, [r3]
    adds r1, r7, 0x1
    lsls r1, 3
    mov r0, r9
    adds r7, r1, r0
    ldr r0, [sp, 0x50]
    ldr r1, [sp, 0x54]
    str r0, [r7, 0x3C]
    str r1, [r7, 0x40]
    ldrh r0, [r6]
    lsls r0, 22
    lsrs r0, 22
    adds r0, 0x4
    adds r5, r7, 0
    adds r5, 0x40
    mov r1, r8
    ands r0, r1
    ldrh r3, [r5]
    ands r4, r3
    orrs r4, r0
    strh r4, [r5]
    ldrh r0, [r7, 0x3E]
    ands r2, r0
    ldr r0, [sp, 0x5C]
    orrs r2, r0
    strh r2, [r7, 0x3E]
    adds r1, r7, 0
    adds r1, 0x3C
    add r2, sp, 0x4C
    ldrb r2, [r2]
    strb r2, [r1]
    add sp, 0x64
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_080AAEC4: .4byte 0x06018000
_080AAEC8: .4byte 0x040000d4
_080AAECC: .4byte 0x85000040
_080AAED0: .4byte 0x84000008
_080AAED4: .4byte gMain
_080AAED8: .4byte gUnknown_083C9400
_080AAEDC: .4byte 0x000003ff
_080AAEE0: .4byte 0xfffffc00
_080AAEE4: .4byte 0xfffffe00
    .syntax divided

	.code	16
.Lfe62:
	.size	 sub_80AAD84,.Lfe62-sub_80AAD84
	.align	2, 0
	.globl	unref_sub_80AAEE8
	.type	 unref_sub_80AAEE8,function
	.thumb_func
unref_sub_80AAEE8:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff4
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	mov	r0, #0x0
	cmp	r4, #0
	bge	.L286	@cond_branch
	mov	r1, sp
	mov	r0, #0xae
	strb	r0, [r1]
	mov	r0, #0x1
.L286:
	add	r0, r0, sp
	add	r1, r4, #0
	cmp	r1, #0
	bge	.L287	@cond_branch
	neg	r1, r1
.L287:
	mov	r2, #0x0
	mov	r3, #0x8
	bl	ConvertIntToDecimalStringN
	mov	r0, sp
	add	r1, r7, #0
	add	r2, r6, #0
	add	r3, r5, #0
	bl	sub_80AAD84
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 unref_sub_80AAEE8,.Lfe63-unref_sub_80AAEE8
	.align	2, 0
	.globl	sub_80AAF30
	.type	 sub_80AAF30,function
	.thumb_func
sub_80AAF30:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L299
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L299+0x4
	mov	r0, #0x3
	strb	r0, [r1]
	mov	r0, #0x0
	bl	sub_80AE098
	mov	r4, #0x3
	mov	r5, #0x1
	neg	r5, r5
	ldr	r3, .L299+0x8
	mov	r2, #0x3
.L292:
	add	r1, r4, r3
	sub	r0, r2, r4
	strb	r0, [r1]
	sub	r4, r4, #0x1
	cmp	r4, r5
	bgt	.L292	@cond_branch
	mov	r4, #0x0
	mov	r6, #0x0
	ldr	r7, .L299+0xc
	ldr	r5, .L299+0x10
	mov	r9, r5
.L297:
	lsl	r1, r4, #0x1
	strh	r6, [r7]
	ldr	r0, .L299+0x14
	mov	r8, r0
	add	r0, r1, r0
	strh	r6, [r0]
	ldr	r3, .L299+0x18
	add	r1, r1, r3
	strh	r6, [r1]
	add	r0, r5, #0
	mov	r1, r9
	add	r1, r1, #0xc0
	mov	r2, #0x40
	str	r3, [sp]
	bl	memcpy
	add	r7, r7, #0x2
	add	r5, r5, #0x40
	add	r4, r4, #0x1
	ldr	r3, [sp]
	cmp	r4, #0x2
	ble	.L297	@cond_branch
	ldr	r0, .L299+0xc
	mov	r1, #0x96
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x6]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	mov	r1, r8
	strh	r0, [r1, #0x6]
	strh	r0, [r3, #0x6]
	mov	r0, #0xfe
	bl	sub_80B2A7C
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gUnknown_0203856C
	.word	gContestPlayerMonIndex
	.word	gUnknown_02038690
	.word	gUnknown_02038670
	.word	gContestMons
	.word	gUnknown_02038680
	.word	gUnknown_02038678
.Lfe64:
	.size	 sub_80AAF30,.Lfe64-sub_80AAF30
	.align	2, 0
	.globl	MatsudaDebugMenu_SetHighScore
	.type	 MatsudaDebugMenu_SetHighScore,function
	.thumb_func
MatsudaDebugMenu_SetHighScore:
	push	{lr}
	bl	sub_80AAF30
	bl	CloseMenu
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 MatsudaDebugMenu_SetHighScore,.Lfe65-MatsudaDebugMenu_SetHighScore
	.align	2, 0
	.globl	MatsudaDebugMenu_ResetHighScore
	.type	 MatsudaDebugMenu_ResetHighScore,function
	.thumb_func
MatsudaDebugMenu_ResetHighScore:
	push	{r4, lr}
	ldr	r1, .L308
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r4, #0x0
	ldr	r3, .L308+0x4
	ldr	r2, .L308+0x8
	ldr	r1, .L308+0xc
	mov	r0, #0x3
.L306:
	strh	r4, [r1]
	strh	r4, [r2]
	strh	r4, [r3]
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	sub	r0, r0, #0x1
	cmp	r0, #0
	bge	.L306	@cond_branch
	bl	CloseMenu
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L309:
	.align	2, 0
.L308:
	.word	gUnknown_0203856C
	.word	gUnknown_02038678
	.word	gUnknown_02038680
	.word	gUnknown_02038670
.Lfe66:
	.size	 MatsudaDebugMenu_ResetHighScore,.Lfe66-MatsudaDebugMenu_ResetHighScore
	.align	2, 0
	.globl	MatsudaDebugMenu_SetArtMuseumItems
	.type	 MatsudaDebugMenu_SetArtMuseumItems,function
	.thumb_func
MatsudaDebugMenu_SetArtMuseumItems:
	push	{r4, r5, lr}
	ldr	r1, .L321
	mov	r0, #0x3
	strb	r0, [r1]
	mov	r0, #0x0
	bl	sub_80AE098
	mov	r2, #0x3
	mov	r5, #0x1
	neg	r5, r5
	ldr	r4, .L321+0x4
	mov	r3, #0x3
.L314:
	add	r1, r2, r4
	sub	r0, r3, r2
	strb	r0, [r1]
	sub	r2, r2, #0x1
	cmp	r2, r5
	bgt	.L314	@cond_branch
	ldr	r1, .L321+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	add	r4, r1, #0
.L319:
	mov	r0, #0xff
	bl	sub_80B2A7C
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bls	.L319	@cond_branch
	bl	CloseMenu
	mov	r0, #0x1
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L322:
	.align	2, 0
.L321:
	.word	gContestPlayerMonIndex
	.word	gUnknown_02038690
	.word	gScriptContestCategory
.Lfe67:
	.size	 MatsudaDebugMenu_SetArtMuseumItems,.Lfe67-MatsudaDebugMenu_SetArtMuseumItems
	.align	2, 0
	.globl	unref_sub_80AB084
	.type	 unref_sub_80AB084,function
	.thumb_func
unref_sub_80AB084:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	mov	r8, r0
	ldr	r0, .L329
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x22
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	sub	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x13
	mov	r3, #0xfa
	lsl	r3, r3, #0x5
	add	r0, r3, #0
	strh	r0, [r2]
	ldr	r3, .L329+0x4
	ldrh	r2, [r3]
	strh	r1, [r3]
	ldr	r4, .L329+0x8
	ldrh	r0, [r4]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r4]
	strh	r2, [r3]
	ldr	r1, .L329+0xc
	mov	r0, #0x8
	strh	r0, [r1]
	bl	ResetTasks
	bl	ResetSpriteData
	ldr	r0, .L329+0x10
	bl	SetMainCallback2
	mov	r2, #0xc0
	lsl	r2, r2, #0x13
	mov	r3, #0xc0
	lsl	r3, r3, #0x9
	mov	r5, #0x0
	ldr	r1, .L329+0x14
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	ldr	r6, .L329+0x18
	mov	r7, #0x85
	lsl	r7, r7, #0x18
.L324:
	str	r5, [sp, #0x4]
	add	r0, sp, #0x4
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r6, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r4
	sub	r3, r3, r4
	cmp	r3, r4
	bhi	.L324	@cond_branch
	str	r5, [sp, #0x4]
	add	r0, sp, #0x4
	str	r0, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x2
	orr	r0, r0, r7
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r4, .L329+0x1c
	add	r0, r4, #0
	bl	SetUpWindowConfig
	ldr	r5, .L329+0x20
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitWindowFromConfig
	add	r0, r4, #0
	bl	LoadFontDefaultPalette
	mov	r0, #0x7
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, r8
	mov	r2, #0x1
	mov	r3, #0x9
	bl	sub_8003460
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L330:
	.align	2, 0
.L329:
	.word	0x4000010
	.word	0x4000208
	.word	0x4000200
	.word	0x4000004
	.word	sub_80AB184
	.word	0x40000d4
	.word	0x85000400
	.word	gWindowConfig_81E6FD8
	.word	gUnknown_03004210
.Lfe68:
	.size	 unref_sub_80AB084,.Lfe68-unref_sub_80AB084
	.align	2, 0
	.globl	sub_80AB184
	.type	 sub_80AB184,function
	.thumb_func
sub_80AB184:
	ldr	r0, .L332
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	bx	lr
.L333:
	.align	2, 0
.L332:
	.word	0x4000010
.Lfe69:
	.size	 sub_80AB184,.Lfe69-sub_80AB184
.text
	.align	2, 0
