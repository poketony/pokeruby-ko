@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	b_movescr_stack_push
	.type	 b_movescr_stack_push,function
	.thumb_func
b_movescr_stack_push:
	push	{r4, lr}
	ldr	r4, .L3
	add	r3, r4, #0
	add	r3, r3, #0x20
	ldrb	r1, [r3]
	add	r2, r1, #0x1
	strb	r2, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r1, r1, r4
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gSharedMem+0x17110
.Lfe1:
	.size	 b_movescr_stack_push,.Lfe1-b_movescr_stack_push
	.align	2, 0
	.globl	b_movescr_stack_push_cursor
	.type	 b_movescr_stack_push_cursor,function
	.thumb_func
b_movescr_stack_push_cursor:
	ldr	r3, .L6
	add	r2, r3, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	add	r1, r0, #0x1
	strb	r1, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r3
	ldr	r1, .L6+0x4
	ldr	r1, [r1]
	str	r1, [r0]
	bx	lr
.L7:
	.align	2, 0
.L6:
	.word	gSharedMem+0x17110
	.word	gBattlescriptCurrInstr
.Lfe2:
	.size	 b_movescr_stack_push_cursor,.Lfe2-b_movescr_stack_push_cursor
	.align	2, 0
	.globl	b_movescr_stack_pop_cursor
	.type	 b_movescr_stack_pop_cursor,function
	.thumb_func
b_movescr_stack_pop_cursor:
	ldr	r3, .L9
	ldr	r2, .L9+0x4
	add	r1, r2, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3]
	bx	lr
.L10:
	.align	2, 0
.L9:
	.word	gBattlescriptCurrInstr
	.word	gSharedMem+0x17110
.Lfe3:
	.size	 b_movescr_stack_pop_cursor,.Lfe3-b_movescr_stack_pop_cursor
	.align	2, 0
	.globl	sub_8015894
	.type	 sub_8015894,function
	.thumb_func
sub_8015894:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	ldr	r2, .L20
	ldr	r1, .L20+0x4
	ldr	r5, .L20+0x8
	ldrb	r3, [r5]
	lsl	r0, r3, #0x9
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x58
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r4, [r0]
	lsl	r0, r3, #0x1
	ldr	r2, .L20+0xc
	add	r0, r0, r2
	mov	r8, r0
	ldr	r1, .L20+0x10
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x4]
	cmp	r0, r4
	bne	.L12	@cond_branch
	cmp	r4, #0
	beq	.L12	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0xe5
	strb	r3, [r0]
	ldr	r0, .L20+0x14
	strh	r4, [r0]
	ldr	r1, .L20+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L20+0x1c
	str	r1, [r0]
	mov	r6, #0x1
.L12:
	ldr	r1, .L20+0x20
	ldr	r5, .L20+0x8
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L13	@cond_branch
	cmp	r4, #0xa5
	beq	.L13	@cond_branch
	ldr	r1, .L20
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L13	@cond_branch
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	ldr	r1, .L20+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L20+0x24
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L13:
	ldr	r2, .L20+0x10
	ldr	r3, .L20+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L14	@cond_branch
	ldr	r0, .L20+0x28
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L14	@cond_branch
	ldr	r0, .L20+0x14
	strh	r4, [r0]
	ldr	r1, .L20+0x18
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L20+0x2c
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L14:
	ldr	r5, .L20+0x8
	ldrb	r0, [r5]
	add	r1, r4, #0
	bl	IsImprisoned
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L15	@cond_branch
	ldr	r0, .L20+0x14
	strh	r4, [r0]
	ldr	r1, .L20+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L20+0x30
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L15:
	ldr	r1, .L20
	ldrb	r2, [r5]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L16	@cond_branch
	ldr	r1, .L20+0x34
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x7]
	b	.L17
.L21:
	.align	2, 0
.L20:
	.word	gBattleMons
	.word	gBattleBufferB
	.word	gActiveBank
	.word	gSharedMem+0x160e8
	.word	gDisableStructs
	.word	gCurrentMove
	.word	gUnknown_02024C1C
	.word	BattleScript_MoveSelectionDisabledMove
	.word	gLastUsedMove
	.word	BattleScript_MoveSelectionTormented
	.word	gBattleMoves
	.word	BattleScript_MoveSelectionTaunted
	.word	BattleScript_MoveSelectionImprisoned
	.word	gEnigmaBerries
.L16:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L17:
	ldr	r2, .L22
	ldr	r1, .L22+0x4
	ldrb	r0, [r1]
	strb	r0, [r2]
	ldr	r7, .L22+0x8
	add	r5, r1, #0
	cmp	r3, #0x1d
	bne	.L18	@cond_branch
	mov	r0, r8
	ldrh	r2, [r0]
	add	r1, r2, #0
	cmp	r1, #0
	beq	.L18	@cond_branch
	ldr	r0, .L22+0xc
	cmp	r1, r0
	beq	.L18	@cond_branch
	cmp	r1, r4
	beq	.L18	@cond_branch
	ldr	r0, .L22+0x10
	strh	r2, [r0]
	ldr	r2, .L22+0x14
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r2]
	ldr	r1, .L22+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L22+0x1c
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L18:
	ldr	r0, .L22+0x20
	ldrb	r2, [r5]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x2
	add	r1, r1, r0
	mov	r0, #0x58
	mul	r0, r0, r2
	ldrb	r1, [r1]
	add	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L19	@cond_branch
	ldr	r1, .L22+0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r1, .L22+0x24
	str	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L19:
	add	r0, r6, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L23:
	.align	2, 0
.L22:
	.word	gStringBank
	.word	gActiveBank
	.word	gBattleMons
	.word	0xffff
	.word	gCurrentMove
	.word	gLastUsedItem
	.word	gUnknown_02024C1C
	.word	BattleScript_MoveSelectionChoiceBanded
	.word	gBattleBufferB
	.word	BattleScript_MoveSelectionNoPP
.Lfe4:
	.size	 sub_8015894,.Lfe4-sub_8015894
	.align	2, 0
	.globl	CheckMoveLimitations
	.type	 CheckMoveLimitations,function
	.thumb_func
CheckMoveLimitations:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffe4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r3, r2, #0x18
	lsl	r1, r7, #0x1
	ldr	r0, .L40
	add	r1, r1, r0
	str	r1, [sp, #0x4]
	ldr	r1, .L40+0x4
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L25	@cond_branch
	ldr	r2, .L40+0x8
	lsl	r1, r7, #0x3
	sub	r0, r1, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	str	r0, [sp]
	b	.L26
.L41:
	.align	2, 0
.L40:
	.word	gSharedMem+0x160e8
	.word	gBattleMons
	.word	gEnigmaBerries
.L25:
	ldrh	r0, [r1, #0x2e]
	str	r3, [sp, #0x14]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r7, #0x3
	ldr	r3, [sp, #0x14]
.L26:
	ldr	r0, .L42
	strb	r7, [r0]
	mov	r0, #0x0
	mov	r9, r0
	lsl	r2, r7, #0x1
	str	r2, [sp, #0xc]
	ldr	r5, .L42+0x4
	mov	ip, r5
	ldr	r0, .L42+0x8
	mov	r2, #0x58
	mov	r6, r7
	mul	r6, r6, r2
	str	r6, [sp, #0x8]
	ldr	r2, .L42+0xc
	add	r5, r6, r2
	mov	r6, #0x0
	str	r6, [sp, #0x10]
	mov	sl, r0
	sub	r0, r1, r7
	lsl	r0, r0, #0x2
	mov	r8, r0
	ldr	r6, .L42+0x10
.L30:
	ldrh	r0, [r5]
	cmp	r0, #0
	bne	.L31	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L31	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L31:
	ldr	r0, [sp, #0x8]
	add	r0, r0, r9
	mov	r1, sl
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L32	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L32	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L32:
	mov	r1, r8
	add	r1, r1, ip
	ldrh	r0, [r5]
	ldrh	r1, [r1, #0x4]
	cmp	r0, r1
	bne	.L33	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L33	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L33:
	mov	r0, #0x58
	mov	r2, r7
	mul	r2, r2, r0
	ldr	r1, [sp, #0x10]
	add	r0, r1, r2
	ldr	r1, .L42+0xc
	add	r0, r0, r1
	mov	ip, r0
	ldr	r1, .L42+0x14
	ldr	r0, [sp, #0xc]
	add	r1, r0, r1
	str	r1, [sp, #0x18]
	mov	r1, ip
	ldrh	r1, [r1]
	mov	ip, r1
	ldr	r0, [sp, #0x18]
	ldrh	r0, [r0]
	cmp	ip, r0
	bne	.L34	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L34	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L34	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L34:
	ldr	r0, .L42+0x4
	add	r0, r0, r8
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L35	@cond_branch
	mov	r0, #0x10
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldr	r2, .L42+0x18
	ldrh	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L35	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L35:
	ldrh	r1, [r5]
	add	r0, r7, #0
	str	r3, [sp, #0x14]
	bl	IsImprisoned
	lsl	r0, r0, #0x18
	ldr	r3, [sp, #0x14]
	cmp	r0, #0
	beq	.L36	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L36	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L36:
	ldr	r1, .L42+0x4
	mov	r0, r8
	add	r2, r0, r1
	ldrb	r0, [r2, #0xe]
	lsl	r0, r0, #0x1c
	mov	ip, r1
	cmp	r0, #0
	beq	.L37	@cond_branch
	ldrh	r0, [r2, #0x6]
	ldrh	r1, [r5]
	cmp	r0, r1
	beq	.L37	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L37:
	ldr	r2, [sp]
	cmp	r2, #0x1d
	bne	.L29	@cond_branch
	ldr	r0, [sp, #0x4]
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L29	@cond_branch
	ldr	r0, .L42+0x1c
	cmp	r1, r0
	beq	.L29	@cond_branch
	ldrh	r2, [r5]
	cmp	r1, r2
	beq	.L29	@cond_branch
	ldr	r0, [r6]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L29:
	add	r6, r6, #0x4
	add	r5, r5, #0x2
	ldr	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	mov	r1, #0x1
	add	r9, r9, r1
	mov	r2, r9
	cmp	r2, #0x3
	bgt	.LCB697
	b	.L30	@long jump
.LCB697:
	add	r0, r4, #0
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L43:
	.align	2, 0
.L42:
	.word	gStringBank
	.word	gDisableStructs
	.word	gBattleMons
	.word	gBattleMons+0xc
	.word	gBitTable
	.word	gLastUsedMove
	.word	gBattleMoves
	.word	0xffff
.Lfe5:
	.size	 CheckMoveLimitations,.Lfe5-CheckMoveLimitations
	.align	2, 0
	.globl	AreAllMovesUnusable
	.type	 AreAllMovesUnusable,function
	.thumb_func
AreAllMovesUnusable:
	push	{r4, r5, r6, lr}
	ldr	r5, .L51
	ldrb	r0, [r5]
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xf
	bne	.L45	@cond_branch
	ldr	r0, .L51+0x4
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L51+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L51+0xc
	str	r1, [r0]
	ldr	r0, .L51+0x10
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L46	@cond_branch
	ldrb	r0, [r5]
	bl	GetBankIdentity
	add	r4, r0, #0
	bl	Random
	mov	r1, #0x1
	eor	r4, r4, r1
	mov	r1, #0x2
	and	r1, r1, r0
	orr	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBankByPlayerAI
	ldr	r2, .L51+0x14
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x3
	add	r1, r1, r2
	b	.L50
.L52:
	.align	2, 0
.L51:
	.word	gActiveBank
	.word	gProtectStructs
	.word	gUnknown_02024C1C
	.word	BattleScript_NoMovesLeft
	.word	gBattleTypeFlags
	.word	gBattleBufferB
.L46:
	ldrb	r0, [r5]
	bl	GetBankIdentity
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankByPlayerAI
	ldr	r2, .L53
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x3
	add	r1, r1, r2
	b	.L50
.L54:
	.align	2, 0
.L53:
	.word	gBattleBufferB
.L45:
	ldr	r0, .L55
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
.L50:
	strb	r0, [r1]
	mov	r0, #0x0
	cmp	r6, #0xf
	bne	.L49	@cond_branch
	mov	r0, #0x1
.L49:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L56:
	.align	2, 0
.L55:
	.word	gProtectStructs
.Lfe6:
	.size	 AreAllMovesUnusable,.Lfe6-AreAllMovesUnusable
	.align	2, 0
	.globl	IsImprisoned
	.type	 IsImprisoned,function
	.thumb_func
IsImprisoned:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r6, #0x0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r4, #0x0
	ldr	r0, .L71
	ldrb	r0, [r0]
	cmp	r6, r0
	bge	.L59	@cond_branch
	ldr	r7, .L71+0x4
	mov	r8, r7
.L61:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r4, #0x1
	cmp	r9, r0
	beq	.L60	@cond_branch
	ldr	r1, .L71+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L60	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x58
	mov	r1, r4
	mul	r1, r1, r0
	add	r0, r1, r7
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L64	@cond_branch
	mov	r4, r8
	add	r0, r1, r4
.L65:
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L60	@cond_branch
	ldrh	r1, [r0]
	cmp	r5, r1
	bne	.L65	@cond_branch
.L64:
	cmp	r2, #0x3
	bgt	.L60	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L60:
	add	r4, r3, #0
	ldr	r0, .L71
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L61	@cond_branch
.L59:
	add	r0, r6, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L72:
	.align	2, 0
.L71:
	.word	gNoOfAllBanks
	.word	gBattleMons+0xc
	.word	gStatuses3
.Lfe7:
	.size	 IsImprisoned,.Lfe7-IsImprisoned
	.align	2, 0
	.globl	UpdateTurnCounters
	.type	 UpdateTurnCounters,function
	.thumb_func
UpdateTurnCounters:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L187
	mov	r2, r9
	strb	r2, [r1]
	ldr	r0, .L187+0x4
	ldrb	r4, [r0]
	add	r6, r1, #0
	mov	sl, r0
	ldr	r7, .L187+0x8
	ldr	r3, .L187+0xc
	mov	ip, r3
	cmp	r9, r4
	bcs	.L75	@cond_branch
	ldr	r2, .L187+0x10
	ldrb	r1, [r2]
	ldr	r5, .L187+0x14
	ldr	r0, [r5]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L75	@cond_branch
	add	r3, r6, #0
.L76:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L75	@cond_branch
	ldrb	r0, [r2]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L76	@cond_branch
.L75:
	mov	r0, #0x0
	strb	r0, [r7]
	mov	r0, sl
	ldrb	r4, [r0]
	cmp	r4, #0
	beq	.L86	@cond_branch
	ldr	r2, .L187+0x10
	ldrb	r1, [r2]
	ldr	r5, .L187+0x14
	ldr	r0, [r5]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L86	@cond_branch
	add	r3, r7, #0
.L82:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L86	@cond_branch
	ldrb	r0, [r2]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L82	@cond_branch
.L86:
	ldr	r0, .L187+0x18
	add	r0, r0, ip
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bls	.LCB1094
	b	.L88	@long jump
.LCB1094:
	lsl	r0, r0, #0x2
	ldr	r1, .L187+0x1c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L188:
	.align	2, 0
.L187:
	.word	gBankAttacker
	.word	gNoOfAllBanks
	.word	gBankTarget
	.word	gSharedMem
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	0x1600e
	.word	.L173
	.align	2, 0
	.align	2, 0
.L173:
	.word	.L90
	.word	.L107
	.word	.L116
	.word	.L125
	.word	.L133
	.word	.L142
	.word	.L150
	.word	.L160
	.word	.L164
	.word	.L168
	.word	.L172
.L90:
	mov	r5, #0x0
	ldr	r1, .L189
	mov	sl, r1
	ldrb	r2, [r1]
	cmp	r5, r2
	bge	.L92	@cond_branch
	ldr	r2, .L189+0x4
.L94:
	add	r0, r5, r2
	strb	r5, [r0]
	add	r5, r5, #0x1
	ldrb	r3, [r1]
	cmp	r5, r3
	blt	.L94	@cond_branch
.L92:
	mov	r5, #0x0
	b	.L179
.L190:
	.align	2, 0
.L189:
	.word	gNoOfAllBanks
	.word	gTurnOrder
.L99:
	add	r4, r5, #0x1
	add	r6, r4, #0
	ldrb	r1, [r1]
	cmp	r6, r1
	bge	.L98	@cond_branch
	ldr	r7, .L191
	ldr	r0, .L191+0x4
	mov	sl, r0
	lsl	r1, r5, #0x18
	mov	r8, r1
.L103:
	add	r0, r5, r7
	ldrb	r0, [r0]
	add	r1, r4, r7
	ldrb	r1, [r1]
	mov	r2, #0x0
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L102	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r2, r8
	lsr	r0, r2, #0x18
	bl	sub_8012FBC
.L102:
	add	r4, r4, #0x1
	ldr	r0, .L191+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L103	@cond_branch
.L98:
	add	r5, r6, #0
.L179:
	mov	r1, sl
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L99	@cond_branch
	ldr	r1, .L191+0x8
	ldr	r3, .L191+0xc
	add	r2, r1, r3
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strb	r0, [r2]
	ldr	r2, .L191+0x10
	add	r0, r1, r2
	strb	r3, [r0]
	mov	ip, r1
.L107:
	ldr	r1, .L191+0x10
	add	r1, r1, ip
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bls	.LCB1235
	b	.L135	@long jump
.LCB1235:
	ldr	r3, .L191+0x14
	mov	r8, r3
	add	r6, r1, #0
	mov	r7, #0x0
	ldr	r5, .L191+0x18
.L110:
	ldr	r0, .L191+0x1c
	ldrb	r4, [r6]
	strb	r4, [r0]
	mov	r0, r8
	strb	r4, [r0]
	ldr	r0, .L191+0x20
	lsl	r2, r4, #0x1
	add	r3, r2, r0
	ldrh	r1, [r3]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L111	@cond_branch
	ldr	r0, .L191+0x24
	add	r1, r2, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	mov	r4, #0xff
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L111	@cond_branch
	ldrh	r0, [r3]
	ldr	r2, .L191+0x28
	add	r1, r2, #0
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r0, .L191+0x2c
	bl	b_call_bc_move_exec
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r5, #0x1]
	mov	r0, #0x73
	strb	r0, [r5, #0x2]
	strb	r7, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	orr	r0, r0, r4
	strb	r0, [r5, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L111:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	ldr	r3, .L191+0x8
	mov	ip, r3
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB1310
	b	.L178	@long jump
.LCB1310:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L110	@cond_branch
	b	.L135
.L192:
	.align	2, 0
.L191:
	.word	gTurnOrder
	.word	gNoOfAllBanks
	.word	gSharedMem
	.word	0x1600e
	.word	0x160fc
	.word	gActiveBank
	.word	gBattleTextBuff1
	.word	gBankAttacker
	.word	gSideAffecting
	.word	gSideTimer
	.word	0xfffe
	.word	gUnknown_081D9030
.L116:
	ldr	r1, .L193
	add	r1, r1, ip
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bls	.LCB1350
	b	.L127	@long jump
.LCB1350:
	add	r7, r1, #0
	mov	r3, #0x2
	mov	sl, r3
	mov	r0, #0x0
	mov	r8, r0
	ldr	r5, .L193+0x4
.L119:
	ldr	r0, .L193+0x8
	ldrb	r4, [r7]
	strb	r4, [r0]
	ldr	r1, .L193+0xc
	strb	r4, [r1]
	ldr	r0, .L193+0x10
	lsl	r2, r4, #0x1
	add	r3, r2, r0
	ldrh	r1, [r3]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L120	@cond_branch
	ldr	r0, .L193+0x14
	add	r1, r2, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r6, #0xff
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L120	@cond_branch
	ldrh	r0, [r3]
	ldr	r2, .L193+0x18
	add	r1, r2, #0
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r0, .L193+0x1c
	bl	b_call_bc_move_exec
	ldr	r0, .L193+0x20
	strb	r4, [r0, #0x5]
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r3, sl
	strb	r3, [r5, #0x1]
	mov	r0, #0x71
	strb	r0, [r5, #0x2]
	mov	r0, r8
	strb	r0, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	orr	r0, r0, r6
	strb	r0, [r5, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L120:
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
	ldr	r1, .L193+0x24
	mov	ip, r1
	mov	r2, r9
	cmp	r2, #0
	beq	.LCB1430
	b	.L178	@long jump
.LCB1430:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L119	@cond_branch
	b	.L127
.L194:
	.align	2, 0
.L193:
	.word	0x160fc
	.word	gBattleTextBuff1
	.word	gBankAttacker
	.word	gActiveBank
	.word	gSideAffecting
	.word	gSideTimer
	.word	0xfffd
	.word	gUnknown_081D9030
	.word	gBattleCommunication
	.word	gSharedMem
.L125:
	ldr	r1, .L195
	add	r1, r1, ip
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bhi	.L127	@cond_branch
	ldr	r0, .L195+0x4
	mov	sl, r0
	add	r7, r1, #0
	mov	r1, #0x0
	mov	r8, r1
	ldr	r5, .L195+0x8
.L128:
	ldr	r0, .L195+0xc
	ldrb	r4, [r7]
	strb	r4, [r0]
	mov	r2, sl
	strb	r4, [r2]
	ldr	r1, .L195+0x10
	lsl	r3, r4, #0x1
	add	r0, r3, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L129	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	mov	r6, #0xff
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L129	@cond_branch
	ldr	r2, .L195+0x14
	add	r2, r3, r2
	ldrh	r0, [r2]
	ldr	r3, .L195+0x18
	add	r1, r3, #0
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L195+0x1c
	bl	b_call_bc_move_exec
	ldr	r0, .L195+0x20
	strb	r4, [r0, #0x5]
	mov	r0, #0xfd
	strb	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r5, #0x1]
	mov	r0, #0x36
	strb	r0, [r5, #0x2]
	mov	r0, r8
	strb	r0, [r5, #0x3]
	ldrb	r0, [r5, #0x4]
	orr	r0, r0, r6
	strb	r0, [r5, #0x4]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L129:
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
	ldr	r1, .L195+0x24
	mov	ip, r1
	mov	r2, r9
	cmp	r2, #0
	beq	.LCB1543
	b	.L178	@long jump
.LCB1543:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L128	@cond_branch
.L127:
	mov	r3, r9
	cmp	r3, #0
	beq	.LCB1554
	b	.L178	@long jump
.LCB1554:
	ldr	r0, .L195+0x28
	add	r0, r0, ip
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L195
	add	r0, r0, ip
	strb	r3, [r0]
	b	.L88
.L196:
	.align	2, 0
.L195:
	.word	0x160fc
	.word	gActiveBank
	.word	gBattleTextBuff1
	.word	gBankAttacker
	.word	gSideTimer
	.word	gSideAffecting
	.word	0xfeff
	.word	gUnknown_081D9030
	.word	gBattleCommunication
	.word	gSharedMem
	.word	0x1600e
.L133:
	ldr	r1, .L197
	add	r1, r1, ip
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bhi	.L135	@cond_branch
	ldr	r7, .L197+0x4
	add	r5, r1, #0
	ldr	r6, .L197+0x8
.L136:
	ldrb	r4, [r5]
	strb	r4, [r6]
	strb	r4, [r7]
	ldr	r0, .L197+0xc
	lsl	r2, r4, #0x1
	add	r3, r2, r0
	ldrh	r1, [r3]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L137	@cond_branch
	ldr	r0, .L197+0x10
	add	r1, r2, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x7]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x7]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L137	@cond_branch
	ldrh	r0, [r3]
	ldr	r2, .L197+0x14
	add	r1, r2, #0
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r0, .L197+0x18
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L137:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	ldr	r3, .L197+0x1c
	mov	ip, r3
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB1655
	b	.L178	@long jump
.LCB1655:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L136	@cond_branch
.L135:
	mov	r2, r9
	cmp	r2, #0
	beq	.LCB1666
	b	.L178	@long jump
.LCB1666:
	ldr	r0, .L197+0x20
	add	r0, r0, ip
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L197
	add	r0, r0, ip
	strb	r2, [r0]
	b	.L88
.L198:
	.align	2, 0
.L197:
	.word	0x160fc
	.word	gActiveBank
	.word	gBankAttacker
	.word	gSideAffecting
	.word	gSideTimer
	.word	0xffdf
	.word	gUnknown_081D9041
	.word	gSharedMem
	.word	0x1600e
.L142:
	ldr	r2, .L199
	add	r2, r2, ip
	ldr	r1, .L199+0x4
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L144	@cond_branch
	ldr	r5, .L199+0x8
	add	r4, r2, #0
	ldr	r6, .L199+0xc
.L145:
	ldr	r1, .L199+0x10
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldrb	r0, [r5]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L146	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L146	@cond_branch
	ldr	r1, .L199+0x14
	ldrb	r2, [r5]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L146	@cond_branch
	ldr	r0, .L199+0x18
	strb	r2, [r0]
	ldr	r0, .L199+0x1c
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L146:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r3, .L199+0x20
	mov	ip, r3
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB1769
	b	.L178	@long jump
.LCB1769:
	ldr	r1, .L199+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L145	@cond_branch
.L144:
	mov	r2, r9
	cmp	r2, #0
	beq	.LCB1785
	b	.L178	@long jump
.LCB1785:
	ldr	r1, .L199+0x24
	add	r1, r1, ip
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L88
.L200:
	.align	2, 0
.L199:
	.word	0x160fc
	.word	gNoOfAllBanks
	.word	gActiveBank
	.word	gWishFutureKnock+0x20
	.word	gTurnOrder
	.word	gBattleMons
	.word	gBankTarget
	.word	BattleScript_WishComesTrue
	.word	gSharedMem
	.word	0x1600e
.L150:
	ldr	r3, .L201
	ldrh	r2, [r3]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB1819
	b	.L169	@long jump
.LCB1819:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L152	@cond_branch
	ldr	r1, .L201+0x4
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L153	@cond_branch
	ldr	r0, .L201+0x8
	and	r0, r0, r2
	ldr	r1, .L201+0xc
	and	r0, r0, r1
	strh	r0, [r3]
	ldr	r1, .L201+0x10
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L157
.L202:
	.align	2, 0
.L201:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xfffe
	.word	0xfffd
	.word	gBattleCommunication
.L153:
	mov	r0, #0x2
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L180	@cond_branch
	b	.L158
.L152:
	mov	r0, #0x2
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L158	@cond_branch
.L180:
	ldr	r1, .L203
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L157
.L204:
	.align	2, 0
.L203:
	.word	gBattleCommunication
.L158:
	ldr	r0, .L205
	strb	r1, [r0, #0x5]
.L157:
	ldr	r0, .L205+0x4
	b	.L185
.L206:
	.align	2, 0
.L205:
	.word	gBattleCommunication
	.word	gUnknown_081D8F62
.L160:
	ldr	r3, .L207
	ldrh	r2, [r3]
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB1917
	b	.L169	@long jump
.LCB1917:
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L162	@cond_branch
	ldr	r1, .L207+0x4
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L162	@cond_branch
	ldr	r0, .L207+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L207+0xc
	ldr	r0, .L207+0x10
	b	.L181
.L208:
	.align	2, 0
.L207:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xfff7
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D8FFF
.L162:
	ldr	r1, .L209
	ldr	r0, .L209+0x4
.L181:
	str	r0, [r1]
	add	r3, r1, #0
	ldr	r1, .L209+0x8
	ldr	r0, .L209+0xc
	add	r1, r1, r0
	mov	r2, #0x0
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r0, .L209+0x10
	strb	r2, [r0, #0x5]
	b	.L186
.L210:
	.align	2, 0
.L209:
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D8F7D
	.word	gSharedMem
	.word	0x160a4
	.word	gBattleCommunication
.L164:
	ldr	r3, .L211
	ldrh	r2, [r3]
	mov	r0, #0x60
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L165	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L166	@cond_branch
	ldr	r1, .L211+0x4
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L166	@cond_branch
	ldr	r0, .L211+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L211+0xc
	ldr	r0, .L211+0x10
	b	.L182
.L212:
	.align	2, 0
.L211:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xffdf
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D9016
.L166:
	ldr	r1, .L213
	ldr	r0, .L213+0x4
.L182:
	str	r0, [r1]
	add	r3, r1, #0
	ldr	r0, [r3]
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L165:
	ldr	r2, .L213+0x8
	ldr	r0, .L213+0xc
	add	r1, r2, r0
	b	.L183
.L214:
	.align	2, 0
.L213:
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D9008
	.word	gSharedMem
	.word	0x1600e
.L168:
	ldr	r3, .L215
	ldrh	r2, [r3]
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r1, .L215+0x4
	add	r1, r1, #0x28
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L170	@cond_branch
	ldr	r0, .L215+0x8
	and	r0, r0, r2
	strh	r0, [r3]
	ldr	r1, .L215+0xc
	ldr	r0, .L215+0x10
	b	.L184
.L216:
	.align	2, 0
.L215:
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	0xff7f
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D8FFF
.L170:
	ldr	r1, .L217
	ldr	r0, .L217+0x4
.L184:
	str	r0, [r1]
	add	r3, r1, #0
	ldr	r0, .L217+0x8
	ldr	r1, .L217+0xc
	add	r0, r0, r1
	mov	r1, #0xd
	strb	r1, [r0]
	ldr	r1, .L217+0x10
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L186:
	ldr	r0, [r3]
.L185:
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L169:
	ldr	r2, .L217+0x8
	ldr	r3, .L217+0x14
	add	r1, r2, r3
.L183:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	ip, r2
	b	.L88
.L218:
	.align	2, 0
.L217:
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D8F7D
	.word	gSharedMem
	.word	0x160a4
	.word	gBattleCommunication
	.word	0x1600e
.L172:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L88:
	mov	r0, r9
	cmp	r0, #0
	bne	.LCB2164
	b	.L86	@long jump
.LCB2164:
.L178:
	ldr	r0, .L219
	ldr	r1, [r0]
	ldr	r0, .L219+0x4
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L220:
	.align	2, 0
.L219:
	.word	gBattleMainFunc
	.word	BattleTurnPassed
.Lfe8:
	.size	 UpdateTurnCounters,.Lfe8-UpdateTurnCounters
	.align	2, 0
	.globl	TurnBasedEffects
	.type	 TurnBasedEffects,function
	.thumb_func
TurnBasedEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	mov	r0, #0x0
	mov	r9, r0
	ldr	r2, .L320
	ldr	r0, [r2]
	ldr	r1, .L320+0x4
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L222	@ far jump
.L321:
	.align	2, 0
.L320:
	.word	gHitMarker
	.word	0x1000020
.L224:
	ldr	r3, .L322
	ldr	r4, .L322+0x4
	ldr	r1, .L322+0x8
	add	r5, r7, r2
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	strb	r0, [r3]
	ldr	r0, .L322+0xc
	ldrb	r1, [r0]
	ldr	r2, .L322+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	add	r6, r3, #0
	cmp	r1, #0
	beq	.L226	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	bl	.L222	@ far jump
.L323:
	.align	2, 0
.L322:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gTurnOrder
	.word	gAbsentBankFlags
	.word	gBitTable
.L226:
	mov	r5, #0xb0
	lsl	r5, r5, #0x9
	add	r0, r7, r5
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bls	.LCB2271
	bl	.L228	@far jump
.LCB2271:
	lsl	r0, r0, #0x2
	ldr	r1, .L324
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L325:
	.align	2, 0
.L324:
	.word	.L311
	.align	2, 0
	.align	2, 0
.L311:
	.word	.L229
	.word	.L232
	.word	.L234
	.word	.L238
	.word	.L241
	.word	.L244
	.word	.L248
	.word	.L251
	.word	.L254
	.word	.L257
	.word	.L262
	.word	.L277
	.word	.L284
	.word	.L295
	.word	.L301
	.word	.L303
	.word	.L305
	.word	.L307
	.word	.L236
	.word	.L310
.L229:
	ldr	r1, .L326
	ldrb	r3, [r6]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L230	@cond_branch
	ldr	r0, .L326+0x4
	mov	r1, #0x58
	mul	r1, r1, r3
	add	r0, r1, r0
	ldrh	r2, [r0, #0x28]
	ldrh	r7, [r0, #0x2c]
	cmp	r2, r7
	beq	.L230	@cond_branch
	cmp	r2, #0
	beq	.L230	@cond_branch
	ldr	r1, .L326+0x8
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L231	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L231:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r0, .L326+0xc
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L230:
	ldr	r1, .L326+0x10
	mov	r0, #0xb0
	lsl	r0, r0, #0x9
	add	r1, r1, r0
	bl	.L318	@ far jump
.L327:
	.align	2, 0
.L326:
	.word	gStatuses3
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_IngrainTurnHeal
	.word	gSharedMem
.L232:
	ldrb	r1, [r6]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L233	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L233:
	ldr	r1, .L328
	mov	r2, #0xb0
	lsl	r2, r2, #0x9
	add	r1, r1, r2
	bl	.L318	@ far jump
.L329:
	.align	2, 0
.L328:
	.word	gSharedMem
.L234:
	ldrb	r1, [r6]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L235	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L235:
	ldr	r1, .L330
	mov	r3, #0xb0
	lsl	r3, r3, #0x9
	add	r1, r1, r3
	bl	.L318	@ far jump
.L331:
	.align	2, 0
.L330:
	.word	gSharedMem
.L236:
	ldrb	r1, [r6]
	mov	r0, #0x1
	mov	r2, #0x1
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L237	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L237:
	ldr	r1, .L332
	mov	r5, #0xb0
	lsl	r5, r5, #0x9
	add	r1, r1, r5
	bl	.L318	@ far jump
.L333:
	.align	2, 0
.L332:
	.word	gSharedMem
.L238:
	ldr	r0, .L334
	ldrb	r2, [r6]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L239	@cond_branch
	ldr	r3, .L334+0x4
	mov	r5, #0x3
	and	r5, r5, r1
	mov	r1, #0x58
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L239	@cond_branch
	mov	r0, r2
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L239	@cond_branch
	ldr	r0, .L334+0x8
	strb	r5, [r0]
	ldr	r2, .L334+0xc
	ldrb	r0, [r6]
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x3
	str	r0, [r2]
	cmp	r0, #0
	bne	.L240	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L240:
	ldr	r1, .L334+0x10
	ldr	r7, .L334+0x14
	add	r0, r1, r7
	strb	r5, [r0]
	ldrb	r0, [r4]
	ldr	r2, .L334+0x18
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, .L334+0x1c
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L239:
	ldr	r1, .L334+0x10
	mov	r3, #0xb0
	lsl	r3, r3, #0x9
	add	r1, r1, r3
	bl	.L318	@ far jump
.L335:
	.align	2, 0
.L334:
	.word	gStatuses3
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattleMoveDamage
	.word	gSharedMem
	.word	0x160a4
	.word	0x160a5
	.word	BattleScript_LeechSeedTurnDrain
.L241:
	ldr	r2, .L336
	ldrb	r1, [r6]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L242	@cond_branch
	add	r1, r3, r2
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L242	@cond_branch
	ldr	r2, .L336+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x3
	str	r0, [r2]
	cmp	r0, #0
	bne	.L243	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L243:
	ldr	r0, .L336+0x8
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L242:
	ldr	r1, .L336+0xc
	mov	r5, #0xb0
	lsl	r5, r5, #0x9
	add	r1, r1, r5
	bl	.L318	@ far jump
.L337:
	.align	2, 0
.L336:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_PoisonTurnDmg
	.word	gSharedMem
.L244:
	ldr	r4, .L338
	ldrb	r0, [r6]
	mov	r7, #0x58
	mov	r8, r7
	mov	r2, r8
	mul	r2, r2, r0
	add	r3, r4, #0
	add	r3, r3, #0x4c
	add	r0, r2, r3
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L245	@cond_branch
	add	r1, r2, r4
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L245	@cond_branch
	ldr	r5, .L338+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r5]
	cmp	r0, #0
	bne	.L246	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L246:
	ldrb	r0, [r6]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r2, r0, r3
	ldr	r1, [r2]
	mov	r4, #0xf0
	lsl	r4, r4, #0x4
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, r4
	beq	.L247	@cond_branch
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	add	r0, r1, r7
	str	r0, [r2]
.L247:
	ldrb	r0, [r6]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r4
	lsr	r0, r0, #0x8
	ldr	r1, [r5]
	mul	r0, r0, r1
	str	r0, [r5]
	ldr	r0, .L338+0x8
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L245:
	ldr	r1, .L338+0xc
	mov	r2, #0xb0
	lsl	r2, r2, #0x9
	add	r1, r1, r2
	bl	.L318	@ far jump
.L339:
	.align	2, 0
.L338:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_PoisonTurnDmg
	.word	gSharedMem
.L248:
	ldr	r2, .L340
	ldrb	r1, [r6]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L249	@cond_branch
	add	r1, r3, r2
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L249	@cond_branch
	ldr	r2, .L340+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x3
	str	r0, [r2]
	cmp	r0, #0
	bne	.L250	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L250:
	ldr	r0, .L340+0x8
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L249:
	ldr	r1, .L340+0xc
	mov	r3, #0xb0
	lsl	r3, r3, #0x9
	add	r1, r1, r3
	b	.L318
.L341:
	.align	2, 0
.L340:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_BurnTurnDmg
	.word	gSharedMem
.L251:
	ldr	r2, .L342
	ldrb	r1, [r6]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L252	@cond_branch
	add	r1, r3, r2
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L252	@cond_branch
	ldr	r2, .L342+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r2]
	cmp	r0, #0
	bne	.L253	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L253:
	ldr	r0, .L342+0x8
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L252:
	ldr	r1, .L342+0xc
	mov	r5, #0xb0
	lsl	r5, r5, #0x9
	add	r1, r1, r5
	b	.L318
.L343:
	.align	2, 0
.L342:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_NightmareTurnDmg
	.word	gSharedMem
.L254:
	ldr	r2, .L344
	ldrb	r1, [r6]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L255	@cond_branch
	add	r1, r3, r2
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L255	@cond_branch
	ldr	r2, .L344+0x4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r2]
	cmp	r0, #0
	bne	.L256	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L256:
	ldr	r0, .L344+0x8
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L255:
	ldr	r1, .L344+0xc
	mov	r7, #0xb0
	lsl	r7, r7, #0x9
	add	r1, r1, r7
	b	.L318
.L345:
	.align	2, 0
.L344:
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	BattleScript_CurseTurnDmg
	.word	gSharedMem
.L257:
	ldr	r0, .L346
	mov	r8, r0
	ldrb	r0, [r6]
	mov	r1, #0x58
	mov	sl, r1
	mov	r1, sl
	mul	r1, r1, r0
	mov	r5, r8
	add	r5, r5, #0x50
	add	r3, r1, r5
	ldr	r2, [r3]
	mov	r4, #0xe0
	lsl	r4, r4, #0x8
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L258	@cond_branch
	mov	r7, r8
	add	r0, r1, r7
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L258	@cond_branch
	ldr	r1, .L346+0x4
	add	r0, r2, r1
	str	r0, [r3]
	ldrb	r1, [r6]
	mov	r0, sl
	mul	r0, r0, r1
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L259	@cond_branch
	ldr	r2, .L346+0x8
	lsl	r0, r1, #0x1
	ldr	r4, .L346+0xc
	add	r0, r0, r4
	add	r0, r0, r2
	ldrb	r1, [r0]
	ldr	r3, .L346+0x10
	add	r0, r2, r3
	strb	r1, [r0]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	sub	r3, r3, #0x9f
	add	r0, r0, r3
	add	r0, r0, r2
	ldrb	r1, [r0]
	ldr	r5, .L346+0x14
	add	r0, r2, r5
	strb	r1, [r0]
	ldr	r1, .L346+0x18
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L346+0x1c
	ldr	r0, .L346+0x20
	str	r0, [r1]
	ldr	r2, .L346+0x24
	ldrb	r0, [r6]
	mov	r7, sl
	mul	r7, r7, r0
	add	r0, r7, #0
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r2]
	cmp	r0, #0
	bne	.L261	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
	b	.L261
.L347:
	.align	2, 0
.L346:
	.word	gBattleMons
	.word	0xffffe000
	.word	gSharedMem
	.word	0x16004
	.word	0x160a4
	.word	0x160a5
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapTurnDmg
	.word	gBattleMoveDamage
.L259:
	ldr	r1, .L348
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldr	r2, .L348+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	ldr	r3, .L348+0x8
	add	r0, r0, r3
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	ldr	r5, .L348+0xc
	add	r0, r0, r5
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L348+0x10
	ldr	r0, .L348+0x14
	str	r0, [r1]
.L261:
	ldr	r0, [r1]
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L258:
	ldr	r1, .L348+0x4
	mov	r7, #0xb0
	lsl	r7, r7, #0x9
	add	r1, r1, r7
	b	.L318
.L349:
	.align	2, 0
.L348:
	.word	gBattleTextBuff1
	.word	gSharedMem
	.word	0x16004
	.word	0x16005
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapEnds
.L317:
	mov	r0, #0x8
	neg	r0, r0
	and	r4, r4, r0
	str	r4, [r2]
	ldrb	r0, [r6]
	mov	r2, r8
	mul	r2, r2, r0
	mov	r0, sl
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L350
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L350+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r0, .L350+0x8
	bl	b_call_bc_move_exec
	ldr	r4, .L350+0xc
	ldrb	r0, [r6]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r9
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	b	.L265
.L351:
	.align	2, 0
.L350:
	.word	0xf7ffffff
	.word	gBattleCommunication
	.word	gUnknown_081D950F
	.word	gActiveBank
.L262:
	ldr	r2, .L352
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x70
	and	r1, r1, r0
	add	r7, r2, #0
	cmp	r1, #0
	beq	.L263	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4]
	mov	r2, r8
	ldrb	r1, [r2]
	cmp	r1, #0
	beq	.L265	@cond_branch
	mov	sl, r7
	add	r6, r4, #0
	mov	r3, #0x58
	mov	r8, r3
	mov	r5, #0x4c
	add	r5, r5, r7
	mov	r9, r5
	str	r1, [sp, #0x4]
	mov	r0, #0x7
	mov	ip, r0
.L267:
	ldrb	r1, [r6]
	mov	r3, r8
	mul	r3, r3, r1
	mov	r5, r9
	add	r2, r3, r5
	ldr	r4, [r2]
	add	r0, r4, #0
	mov	r5, ip
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L266	@cond_branch
	add	r0, r3, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2b
	bne	.L317	@cond_branch
.L266:
	add	r0, r1, #0x1
	strb	r0, [r6]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [sp, #0x4]
	cmp	r0, r1
	bcc	.L267	@cond_branch
.L265:
	ldr	r2, .L352+0x4
	ldr	r1, .L352+0x8
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L270	@cond_branch
	mov	r2, #0x2
	mov	r9, r2
	b	.L315
.L353:
	.align	2, 0
.L352:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gNoOfAllBanks
.L270:
	ldr	r5, .L354
	ldrb	r0, [r5]
	strb	r0, [r2]
	ldr	r2, .L354+0x4
	ldrb	r0, [r5]
	mov	r7, #0x58
	mov	r1, r0
	mul	r1, r1, r7
	add	r6, r2, #0
	add	r6, r6, #0x50
	add	r1, r1, r6
	ldr	r0, [r1]
	sub	r0, r0, #0x10
	str	r0, [r1]
	ldrb	r0, [r5]
	bl	sub_8015660
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L272	@cond_branch
	ldrb	r0, [r5]
	bl	CancelMultiTurnMoves
	ldr	r1, .L354+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L273
.L355:
	.align	2, 0
.L354:
	.word	gActiveBank
	.word	gBattleMons
	.word	gBattleCommunication
.L272:
	ldrb	r3, [r5]
	mov	r0, r3
	mul	r0, r0, r7
	add	r2, r0, r6
	ldr	r0, [r2]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L274	@cond_branch
	ldr	r0, .L356
	strb	r4, [r0, #0x5]
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L273
.L357:
	.align	2, 0
.L356:
	.word	gBattleCommunication
.L274:
	ldr	r1, .L358
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	add	r0, r3, #0
	bl	CancelMultiTurnMoves
.L273:
	ldr	r0, .L358+0x4
	bl	b_call_bc_move_exec
	mov	r3, #0x1
	mov	r9, r3
.L263:
	mov	r5, r9
	cmp	r5, #0x2
	bne	.LCB3265
	b	.L228	@long jump
.LCB3265:
	ldr	r1, .L358+0x8
	mov	r7, #0xb0
	lsl	r7, r7, #0x9
	add	r1, r1, r7
	b	.L318
.L359:
	.align	2, 0
.L358:
	.word	gBattleCommunication
	.word	gUnknown_081D957E
	.word	gSharedMem
.L277:
	ldr	r1, .L360
	ldrb	r0, [r6]
	mov	r7, #0x58
	mul	r0, r0, r7
	add	r5, r1, #0
	add	r5, r5, #0x50
	add	r2, r0, r5
	ldr	r1, [r2]
	mov	r4, #0xc0
	lsl	r4, r4, #0x4
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L278	@cond_branch
	ldr	r3, .L360+0x4
	add	r0, r1, r3
	str	r0, [r2]
	ldrb	r0, [r6]
	bl	sub_8015660
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L279	@cond_branch
	ldrb	r0, [r6]
	bl	CancelMultiTurnMoves
	b	.L278
.L361:
	.align	2, 0
.L360:
	.word	gBattleMons
	.word	0xfffffc00
.L279:
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r2, r0, r5
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L278	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L278	@cond_branch
	ldr	r0, .L362
	and	r1, r1, r0
	str	r1, [r2]
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r4, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L278	@cond_branch
	ldr	r1, .L362+0x4
	mov	r0, #0x47
	strb	r0, [r1, #0x3]
	mov	r0, #0x1
	mov	r1, #0x0
	bl	SetMoveEffect
	ldrb	r0, [r6]
	mul	r0, r0, r7
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L283	@cond_branch
	ldr	r0, .L362+0x8
	bl	b_call_bc_move_exec
.L283:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L278:
	ldr	r1, .L362+0xc
	mov	r5, #0xb0
	lsl	r5, r5, #0x9
	add	r1, r1, r5
	b	.L318
.L363:
	.align	2, 0
.L362:
	.word	0xffffefff
	.word	gBattleCommunication
	.word	BattleScript_ThrashConfuses
	.word	gSharedMem
.L284:
	ldr	r0, .L364
	ldrb	r3, [r6]
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r5, r1, r0
	ldrb	r1, [r5, #0xb]
	lsl	r1, r1, #0x1c
	add	r7, r0, #0
	cmp	r1, #0
	beq	.L285	@cond_branch
	mov	r4, #0x0
	ldr	r2, .L364+0x4
	mov	r0, #0x58
	mov	r1, r3
	mul	r1, r1, r0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r0, [r5, #0x4]
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L287	@cond_branch
	mov	ip, r7
	mov	r8, r2
	add	r5, r6, #0
	mov	r3, #0x58
.L288:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L287	@cond_branch
	ldrb	r2, [r5]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	lsl	r0, r4, #0x1
	mul	r2, r2, r3
	add	r0, r0, r2
	add	r0, r0, r8
	ldrh	r1, [r1, #0x4]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L288	@cond_branch
.L287:
	cmp	r4, #0x4
	bne	.L292	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x0
	strh	r1, [r0, #0x4]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0xb]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	b	.L285
.L365:
	.align	2, 0
.L364:
	.word	gDisableStructs
	.word	gBattleMons
.L292:
	ldrb	r0, [r6]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r7
	ldrb	r3, [r2, #0xb]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0xb]
	add	r2, r1, #0
	cmp	r2, #0
	bne	.L285	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x4]
	ldr	r0, .L366
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L285:
	ldr	r1, .L366+0x4
	mov	r7, #0xb0
	lsl	r7, r7, #0x9
	add	r1, r1, r7
	b	.L318
.L367:
	.align	2, 0
.L366:
	.word	BattleScript_DisabledNoMore
	.word	gSharedMem
.L295:
	ldr	r3, .L368
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r3
	ldrb	r5, [r2, #0xe]
	lsl	r4, r5, #0x1c
	cmp	r4, #0
	beq	.L296	@cond_branch
	ldr	r0, .L368+0x4
	mov	r8, r0
	ldrb	r0, [r2, #0xc]
	lsl	r0, r0, #0x1
	mov	r7, #0x58
	mul	r1, r1, r7
	add	r0, r0, r1
	mov	r1, r8
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldrh	r1, [r2, #0x6]
	cmp	r0, r1
	beq	.L297	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x6]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0xe]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xe]
	b	.L296
.L369:
	.align	2, 0
.L368:
	.word	gDisableStructs
	.word	gBattleMons
.L297:
	lsr	r1, r4, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r4, #0x10
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r5
	orr	r0, r0, r1
	strb	r0, [r2, #0xe]
	cmp	r1, #0
	beq	.L300	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mul	r1, r1, r7
	ldrb	r0, [r0, #0xc]
	add	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x24
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L296	@cond_branch
.L300:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x6]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0xe]
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldr	r0, .L370
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L296:
	ldr	r1, .L370+0x4
	mov	r2, #0xb0
	lsl	r2, r2, #0x9
	add	r1, r1, r2
	b	.L318
.L371:
	.align	2, 0
.L370:
	.word	BattleScript_EncoredNoMore
	.word	gSharedMem
.L301:
	ldr	r0, .L372
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x18
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L302	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0x8
	str	r0, [r1]
.L302:
	mov	r1, #0xb0
	lsl	r1, r1, #0x9
	b	.L319
.L373:
	.align	2, 0
.L372:
	.word	gStatuses3
.L303:
	ldr	r2, .L374
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r0, r2
	ldrb	r2, [r3, #0x12]
	lsl	r1, r2, #0x1c
	cmp	r1, #0
	beq	.L304	@cond_branch
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x12]
	cmp	r1, #0
	bne	.L304	@cond_branch
	ldr	r0, .L374+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L374+0x8
	and	r0, r0, r1
	str	r0, [r2]
.L304:
	mov	r1, #0xb0
	lsl	r1, r1, #0x9
	b	.L319
.L375:
	.align	2, 0
.L374:
	.word	gDisableStructs
	.word	gStatuses3
	.word	0xfffffdff
.L305:
	ldr	r2, .L376
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r3, r0, r2
	ldrb	r2, [r3, #0x13]
	lsl	r1, r2, #0x1c
	cmp	r1, #0
	beq	.L306	@cond_branch
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x13]
.L306:
	mov	r1, #0xb0
	lsl	r1, r1, #0x9
	b	.L319
.L377:
	.align	2, 0
.L376:
	.word	gDisableStructs
.L307:
	ldr	r4, .L378
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r3, #0xc0
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L308	@cond_branch
	ldr	r5, .L378+0x4
	add	r0, r1, r5
	str	r0, [r2]
	ldrb	r2, [r6]
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L308	@cond_branch
	ldr	r3, .L378+0x8
	mov	r5, #0x58
	mov	r1, r2
	mul	r1, r1, r5
	add	r4, r3, #0
	add	r4, r4, #0x4c
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L308	@cond_branch
	add	r0, r1, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x48
	beq	.L308	@cond_branch
	cmp	r0, #0xf
	beq	.L308	@cond_branch
	add	r0, r2, #0
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L308	@cond_branch
	ldrb	r0, [r6]
	bl	CancelMultiTurnMoves
	bl	Random
	ldrb	r1, [r6]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x2
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r6]
	bl	MarkBufferBankForExecution
	ldr	r1, .L378+0xc
	ldrb	r0, [r6]
	strb	r0, [r1]
	ldr	r0, .L378+0x10
	bl	b_call_bc_move_exec
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L308:
	ldr	r1, .L378+0x14
	mov	r7, #0xb0
	lsl	r7, r7, #0x9
	add	r1, r1, r7
	b	.L318
.L379:
	.align	2, 0
.L378:
	.word	gStatuses3
	.word	0xfffff800
	.word	gBattleMons
	.word	gEffectBank
	.word	BattleScript_YawnMakesAsleep
	.word	gSharedMem
.L310:
	mov	r1, #0xb0
	lsl	r1, r1, #0x9
	add	r1, r1, sl
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L380
.L319:
	add	r1, r1, sl
.L318:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L228:
	mov	r0, r9
	cmp	r0, #0
	beq	.L222	@cond_branch
.L315:
	mov	r0, r9
	b	.L316
.L381:
	.align	2, 0
.L380:
	.word	0x16001
.L222:
	ldr	r7, .L382
	ldr	r2, .L382+0x4
	add	r0, r7, r2
	ldr	r1, .L382+0x8
	ldrb	r0, [r0]
	mov	sl, r7
	mov	r8, r1
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L223	@cond_branch
	mov	r3, #0xb0
	lsl	r3, r3, #0x9
	add	r0, r7, r3
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bhi	.LCB3963
	bl	.L224	@far jump
.LCB3963:
.L223:
	ldr	r0, .L382+0xc
	ldr	r1, [r0]
	ldr	r2, .L382+0x10
	and	r1, r1, r2
	str	r1, [r0]
	mov	r0, #0x0
.L316:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L383:
	.align	2, 0
.L382:
	.word	gSharedMem
	.word	0x16001
	.word	gNoOfAllBanks
	.word	gHitMarker
	.word	0xfeffffdf
.Lfe9:
	.size	 TurnBasedEffects,.Lfe9-TurnBasedEffects
	.align	2, 0
	.globl	sub_80170DC
	.type	 sub_80170DC,function
	.thumb_func
sub_80170DC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, .L411
	ldr	r0, [r2]
	ldr	r1, .L411+0x4
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L411+0x8
	ldr	r3, .L411+0xc
	add	r0, r1, r3
	ldrb	r0, [r0]
	mov	r8, r1
	cmp	r0, #0
	beq	.L386	@cond_branch
	cmp	r0, #0x1
	bne	.LCB4013
	b	.L396	@long jump
.LCB4013:
	b	.L385
.L412:
	.align	2, 0
.L411:
	.word	gHitMarker
	.word	0x1000020
	.word	gSharedMem
	.word	0x16110
.L386:
	ldr	r2, .L413
	add	r2, r2, r8
	ldr	r0, .L413+0x4
	ldrb	r1, [r2]
	mov	r9, r0
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.LCB4041
	b	.L388	@long jump
.LCB4041:
	ldr	r4, .L413+0x8
	add	r5, r2, #0
	ldr	r1, .L413+0xc
	mov	ip, r1
	mov	r2, #0x8
	add	r2, r2, ip
	mov	sl, r2
	mov	r7, ip
	add	r7, r7, #0x18
	ldr	r6, .L413+0x10
.L389:
	ldrb	r3, [r5]
	strb	r3, [r4]
	ldr	r0, .L413+0x14
	ldrb	r1, [r0]
	ldr	r2, .L413+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L390	@cond_branch
	add	r0, r3, #0x1
	strb	r0, [r5]
	b	.L387
.L414:
	.align	2, 0
.L413:
	.word	0x16111
	.word	gNoOfAllBanks
	.word	gActiveBank
	.word	gWishFutureKnock
	.word	gBattleTextBuff1
	.word	gAbsentBankFlags
	.word	gBitTable
.L390:
	add	r0, r3, #0x1
	strb	r0, [r5]
	ldr	r1, .L415
	ldrb	r0, [r4]
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L387	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L387	@cond_branch
	ldr	r1, .L415+0x4
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L387	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0xf8
	bne	.L393	@cond_branch
	ldr	r0, .L415+0x8
	strb	r3, [r0, #0x5]
	b	.L394
.L416:
	.align	2, 0
.L415:
	.word	gWishFutureKnock
	.word	gBattleMons
	.word	gBattleCommunication
.L393:
	ldr	r1, .L417
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L394:
	mov	r0, #0xfd
	strb	r0, [r6]
	mov	r0, #0x2
	strb	r0, [r6, #0x1]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r6, #0x2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r6, #0x3]
	mov	r0, #0xff
	strb	r0, [r6, #0x4]
	ldr	r3, .L417+0x4
	ldrb	r0, [r4]
	strb	r0, [r3]
	ldr	r1, .L417+0x8
	mov	r0, ip
	add	r0, r0, #0x4
	ldrb	r2, [r4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L417+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r2, .L417+0x10
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, .L417+0x14
	str	r1, [r0]
	ldr	r0, .L417+0x18
	b	.L409
.L418:
	.align	2, 0
.L417:
	.word	gBattleCommunication
	.word	gBankTarget
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gSpecialStatuses
	.word	0xffff
	.word	BattleScript_FutureSightHits
.L387:
	ldrb	r0, [r5]
	mov	r3, r9
	ldrb	r3, [r3]
	cmp	r0, r3
	bcs	.LCB4219
	b	.L389	@long jump
.LCB4219:
.L388:
	ldr	r1, .L419
	add	r1, r1, r8
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L419+0x4
	add	r0, r0, r8
	strb	r2, [r0]
.L396:
	ldr	r2, .L419+0x4
	add	r2, r2, r8
	ldr	r0, .L419+0x8
	ldrb	r1, [r2]
	mov	r9, r0
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.LCB4248
	b	.L385	@long jump
.LCB4248:
	ldr	r5, .L419+0xc
	add	r3, r2, #0
	ldr	r4, .L419+0x10
	ldr	r7, .L419+0x14
.L399:
	ldr	r2, .L419+0x18
	ldr	r1, .L419+0x1c
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	strb	r0, [r5]
	ldr	r0, .L419+0x20
	ldrb	r1, [r0]
	ldr	r2, .L419+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L400	@cond_branch
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	b	.L397
.L420:
	.align	2, 0
.L419:
	.word	0x16110
	.word	0x16111
	.word	gNoOfAllBanks
	.word	gActiveBank
	.word	gBattleTextBuff1
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gTurnOrder
	.word	gAbsentBankFlags
	.word	gBitTable
.L400:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldr	r6, .L421
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L397	@cond_branch
	mov	r0, #0xfd
	strb	r0, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0xf]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	strb	r0, [r4, #0x4]
	mov	r0, #0xff
	strb	r0, [r4, #0x5]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r7
	ldrb	r3, [r4, #0xf]
	lsl	r1, r3, #0x1c
	cmp	r1, #0
	bne	.L403	@cond_branch
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L421+0x4
	ldr	r2, .L421+0x8
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	str	r0, [r3]
	ldr	r1, .L421+0xc
	ldr	r0, .L421+0x10
	b	.L410
.L422:
	.align	2, 0
.L421:
	.word	gStatuses3
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PerishSongHits
.L403:
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r2, #0x10
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r4, #0xf]
	ldr	r1, .L423
	ldr	r0, .L423+0x4
.L410:
	str	r0, [r1]
	ldr	r0, [r1]
.L409:
	bl	b_call_bc_move_exec
	mov	r0, #0x1
	b	.L408
.L424:
	.align	2, 0
.L423:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PerishSongTimerGoesDown
.L397:
	ldrb	r0, [r3]
	mov	r1, r9
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.LCB4421
	b	.L399	@long jump
.LCB4421:
.L385:
	ldr	r2, .L425
	ldr	r0, [r2]
	ldr	r1, .L425+0x4
	and	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
.L408:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L426:
	.align	2, 0
.L425:
	.word	gHitMarker
	.word	0xfeffffdf
.Lfe10:
	.size	 sub_80170DC,.Lfe10-sub_80170DC
	.align	2, 0
	.globl	sub_80173A4
	.type	 sub_80173A4,function
	.thumb_func
sub_80173A4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L477
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L428	@cond_branch
	b	.L472
.L478:
	.align	2, 0
.L477:
	.word	gBattleTypeFlags
.L470:
	ldr	r0, .L479
	bl	b_call_bc_move_exec
	ldr	r1, .L479+0x4
	add	r1, r1, sl
	mov	r0, #0x2
	b	.L473
.L480:
	.align	2, 0
.L479:
	.word	gUnknown_081D8C72
	.word	0x16059
.L471:
	ldr	r0, .L481
	bl	b_call_bc_move_exec
	ldr	r1, .L481+0x4
	add	r1, r1, r8
	mov	r0, #0x5
.L473:
	strb	r0, [r1]
.L476:
	mov	r0, #0x1
	b	.L469
.L482:
	.align	2, 0
.L481:
	.word	gUnknown_081D8C7B
	.word	0x16059
.L428:
	ldr	r0, .L483
	mov	r9, r0
.L429:
	ldr	r0, .L483+0x4
	add	r0, r0, r9
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bls	.LCB4520
	b	.L431	@long jump
.LCB4520:
	lsl	r0, r0, #0x2
	ldr	r1, .L483+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L484:
	.align	2, 0
.L483:
	.word	gSharedMem
	.word	0x16059
	.word	.L465
	.align	2, 0
	.align	2, 0
.L465:
	.word	.L433
	.word	.L440
	.word	.L447
	.word	.L450
	.word	.L451
	.word	.L458
	.word	.L461
	.word	.L431
.L433:
	ldr	r1, .L485
	add	r1, r1, r9
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L485+0x4
	add	r1, r1, r9
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r5, #0x0
	ldr	r0, .L485+0x8
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L440	@cond_branch
	ldr	r6, .L485+0xc
.L437:
	ldrb	r0, [r6]
	ldr	r2, .L485+0x10
	lsl	r1, r5, #0x2
	add	r1, r1, r2
	ldr	r4, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L436	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x6
	mov	r2, #0x6
	bl	sub_8018018
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L436	@cond_branch
	ldrb	r0, [r6]
	bic	r0, r0, r4
	strb	r0, [r6]
.L436:
	add	r5, r5, #0x1
	ldr	r0, .L485+0x8
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L437	@cond_branch
.L440:
	ldr	r1, .L485+0x14
	mov	r9, r1
	ldr	r0, .L485+0x18
	mov	ip, r0
	ldr	r1, .L485+0x1c
	mov	r8, r1
	mov	sl, r9
	ldr	r5, .L485
	add	r5, r5, r9
	ldr	r7, .L485+0x20
	ldr	r6, .L485+0x24
	add	r6, r6, r9
.L441:
	ldrb	r0, [r5]
	mov	r1, r8
	strb	r0, [r1]
	mov	r1, ip
	strb	r0, [r1]
	ldrb	r3, [r5]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r7
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L443	@cond_branch
	ldrb	r2, [r6]
	ldr	r4, .L485+0x10
	ldr	r1, .L485+0x28
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L443	@cond_branch
	ldr	r0, .L485+0xc
	ldrb	r1, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB4646
	b	.L470	@long jump
.LCB4646:
.L443:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	ldr	r1, .L485+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L441	@cond_branch
	ldr	r1, .L485+0x4
	add	r1, r1, r9
	mov	r0, #0x3
	strb	r0, [r1]
	b	.L431
.L486:
	.align	2, 0
.L485:
	.word	0x1605a
	.word	0x16059
	.word	gNoOfAllBanks
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gSharedMem
	.word	gBank1
	.word	gBankTarget
	.word	gBattleMons
	.word	0x16113
	.word	gBattlePartyID
.L447:
	ldr	r0, .L487
	ldrb	r0, [r0]
	bl	sub_8015740
	ldr	r2, .L487+0x4
	ldr	r0, .L487+0x8
	add	r1, r2, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L487+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L448	@cond_branch
	ldr	r0, .L487+0x10
	add	r1, r2, r0
	mov	r0, #0x3
	b	.L474
.L488:
	.align	2, 0
.L487:
	.word	gBank1
	.word	gSharedMem
	.word	0x1605a
	.word	gNoOfAllBanks
	.word	0x16059
.L448:
	ldr	r0, .L489
	add	r1, r2, r0
	mov	r0, #0x1
	b	.L474
.L490:
	.align	2, 0
.L489:
	.word	0x16059
.L450:
	ldr	r1, .L491
	add	r1, r1, r9
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L491+0x4
	add	r1, r1, r9
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L451:
	ldr	r7, .L491+0x8
	ldr	r6, .L491+0xc
	ldr	r1, .L491+0x10
	mov	r8, r1
	ldr	r3, .L491
	add	r3, r3, r8
	ldr	r5, .L491+0x14
	ldr	r4, .L491+0x18
.L452:
	ldrb	r0, [r3]
	strb	r0, [r6]
	strb	r0, [r7]
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L454	@cond_branch
	ldr	r0, .L491+0x1c
	ldrb	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB4785
	b	.L471	@long jump
.LCB4785:
.L454:
	add	r0, r2, #0x1
	strb	r0, [r3]
	ldr	r1, .L491+0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L452	@cond_branch
	b	.L475
.L492:
	.align	2, 0
.L491:
	.word	0x1605a
	.word	0x16059
	.word	gBank1
	.word	gBankTarget
	.word	gSharedMem
	.word	gBattleMons
	.word	gBitTable
	.word	gAbsentBankFlags
	.word	gNoOfAllBanks
.L458:
	ldr	r0, .L493
	add	r0, r0, r9
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L493+0x4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L459	@cond_branch
.L475:
	ldr	r1, .L493+0x8
	add	r1, r1, r9
	mov	r0, #0x6
	strb	r0, [r1]
	b	.L431
.L494:
	.align	2, 0
.L493:
	.word	0x1605a
	.word	gNoOfAllBanks
	.word	0x16059
.L459:
	ldr	r1, .L495
	add	r1, r1, r9
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L431
.L496:
	.align	2, 0
.L495:
	.word	0x16059
.L461:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x9
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4882
	b	.L476	@long jump
.LCB4882:
	str	r0, [sp]
	mov	r0, #0xb
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4893
	b	.L476	@long jump
.LCB4893:
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x1
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4902
	b	.L476	@long jump
.LCB4902:
	str	r0, [sp]
	mov	r0, #0x6
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4913
	b	.L476	@long jump
.LCB4913:
	ldr	r2, .L497
	ldr	r0, .L497+0x4
	add	r1, r2, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
.L474:
	strb	r0, [r1]
	mov	r9, r2
.L431:
	ldr	r0, .L497+0x4
	add	r0, r0, r9
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.LCB4933
	b	.L429	@long jump
.LCB4933:
.L472:
	mov	r0, #0x0
.L469:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L498:
	.align	2, 0
.L497:
	.word	gSharedMem
	.word	0x16059
.Lfe11:
	.size	 sub_80173A4,.Lfe11-sub_80173A4
	.align	2, 0
	.globl	b_clear_atk_up_if_hit_flag_unless_enraged
	.type	 b_clear_atk_up_if_hit_flag_unless_enraged,function
	.thumb_func
b_clear_atk_up_if_hit_flag_unless_enraged:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	ldr	r0, .L506
	add	r5, r0, #0
	ldrb	r0, [r5]
	cmp	r3, r0
	bge	.L501	@cond_branch
	ldr	r4, .L506+0x4
	mov	r6, #0x80
	lsl	r6, r6, #0x10
	ldr	r2, .L506+0x8
.L503:
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L502	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0x63
	beq	.L502	@cond_branch
	ldr	r0, .L506+0xc
	and	r1, r1, r0
	str	r1, [r2]
.L502:
	add	r4, r4, #0x2
	add	r2, r2, #0x58
	add	r3, r3, #0x1
	ldrb	r0, [r5]
	cmp	r3, r0
	blt	.L503	@cond_branch
.L501:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L507:
	.align	2, 0
.L506:
	.word	gNoOfAllBanks
	.word	gChosenMovesByBanks
	.word	gBattleMons+0x50
	.word	0xff7fffff
.Lfe12:
	.size	 b_clear_atk_up_if_hit_flag_unless_enraged,.Lfe12-b_clear_atk_up_if_hit_flag_unless_enraged
	.align	2, 0
	.globl	AtkCanceller_UnableToUseMove
	.type	 AtkCanceller_UnableToUseMove,function
	.thumb_func
AtkCanceller_UnableToUseMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L579
	mov	sl, r1
	ldr	r2, .L579+0x4
	add	r2, r2, sl
	mov	r8, r2
	b	.L509
.L580:
	.align	2, 0
.L579:
	.word	gSharedMem+0x16090
	.word	0xfffe9f70
.L570:
	mov	r4, r9
	cmp	r4, #0
	beq	.LCB5048
	bl	.L510	@far jump
.LCB5048:
.L509:
	ldr	r0, .L581
	add	r0, r0, r8
	ldrb	r0, [r0]
	cmp	r0, #0xe
	bls	.LCB5057
	bl	.L511	@far jump
.LCB5057:
	lsl	r0, r0, #0x2
	ldr	r1, .L581+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L582:
	.align	2, 0
.L581:
	.word	0x160e7
	.word	.L566
	.align	2, 0
	.align	2, 0
.L566:
	.word	.L513
	.word	.L514
	.word	.L525
	.word	.L531
	.word	.L533
	.word	.L535
	.word	.L537
	.word	.L539
	.word	.L541
	.word	.L543
	.word	.L549
	.word	.L551
	.word	.L555
	.word	.L562
	.word	.L511
.L513:
	ldr	r1, .L583
	ldr	r3, .L583+0x4
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L583+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L583+0xc
	ldrb	r2, [r3]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L583+0x10
	and	r0, r0, r1
	str	r0, [r2]
	bl	.L563	@ far jump
.L584:
	.align	2, 0
.L583:
	.word	gBattleMons
	.word	gBankAttacker
	.word	0xfdffffff
	.word	gStatuses3
	.word	0xffffbfff
.L514:
	ldr	r7, .L585
	ldr	r4, .L585+0x4
	ldrb	r1, [r4]
	mov	r5, #0x58
	mov	r0, r1
	mul	r0, r0, r5
	add	r6, r7, #0
	add	r6, r6, #0x4c
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r2, #0x7
	mov	r8, r2
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB5124
	b	.L550	@long jump
.LCB5124:
	add	r0, r1, #0
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L516	@cond_branch
	ldrb	r0, [r4]
	mov	r2, r0
	mul	r2, r2, r5
	add	r2, r2, r6
	ldr	r0, [r2]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r4]
	mov	r2, r0
	mul	r2, r2, r5
	add	r0, r7, #0
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L585+0x8
	and	r0, r0, r1
	str	r0, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L585+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r1, .L585+0x10
	ldr	r0, .L585+0x14
	str	r0, [r1]
	mov	r4, #0x2
	mov	r9, r4
	b	.L550
.L586:
	.align	2, 0
.L585:
	.word	gBattleMons
	.word	gBankAttacker
	.word	0xf7ffffff
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedWokeUp
.L516:
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r0, r1, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	r3, #0x1
	cmp	r0, #0x30
	bne	.L518	@cond_branch
	mov	r3, #0x2
.L518:
	add	r2, r1, r6
	ldr	r1, [r2]
	add	r0, r1, #0
	mov	r7, r8
	and	r0, r0, r7
	cmp	r0, r3
	bcs	.L520	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	b	.L521
.L520:
	sub	r0, r1, r3
	str	r0, [r2]
.L521:
	ldr	r2, .L587
	ldr	r0, .L587+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r4, [r0]
	mov	r0, #0x7
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L522	@cond_branch
	ldr	r0, .L587+0x8
	ldrh	r0, [r0]
	cmp	r0, #0xad
	bne	.LCB5222
	b	.L550	@long jump
.LCB5222:
	cmp	r0, #0xd6
	bne	.LCB5224
	b	.L550	@long jump
.LCB5224:
	ldr	r1, .L587+0xc
	ldr	r0, .L587+0x10
	str	r0, [r1]
	ldr	r2, .L587+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x2
	mov	r9, r0
	b	.L550
.L588:
	.align	2, 0
.L587:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsAsleep
	.word	gHitMarker
.L522:
	add	r2, r2, #0x50
	add	r2, r1, r2
	ldr	r0, [r2]
	ldr	r1, .L589
	and	r0, r0, r1
	str	r0, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r0, .L589+0x4
	strb	r4, [r0, #0x5]
	ldr	r1, .L589+0x8
	ldr	r0, .L589+0xc
	str	r0, [r1]
	mov	r1, #0x2
	b	.L575
.L590:
	.align	2, 0
.L589:
	.word	0xf7ffffff
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedWokeUp
.L525:
	ldr	r1, .L591
	ldr	r7, .L591+0x4
	ldrb	r0, [r7]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r5, r1, #0
	add	r5, r5, #0x4c
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB5290
	b	.L563	@long jump
.LCB5290:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L527	@cond_branch
	ldr	r2, .L591+0x8
	ldr	r0, .L591+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x7d
	beq	.L528	@cond_branch
	ldr	r1, .L591+0x10
	ldr	r0, .L591+0x14
	str	r0, [r1]
	ldr	r2, .L591+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L530
.L592:
	.align	2, 0
.L591:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsFrozen
	.word	gHitMarker
.L528:
	ldr	r2, .L593
	ldr	r7, .L593+0x4
	add	r1, r2, r7
	b	.L572
.L594:
	.align	2, 0
.L593:
	.word	gSharedMem
	.word	0x160e7
.L527:
	ldrb	r0, [r7]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r5
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L595
	ldr	r0, .L595+0x4
	str	r0, [r1]
	ldr	r0, .L595+0x8
	strb	r4, [r0, #0x5]
.L530:
	mov	r0, #0x2
	b	.L576
.L596:
	.align	2, 0
.L595:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedUnfroze
	.word	gBattleCommunication
.L531:
	ldr	r1, .L597
	ldr	r0, .L597+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x36
	beq	.LCB5398
	b	.L550	@long jump
.LCB5398:
	ldr	r0, .L597+0x8
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x18]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.LCB5410
	b	.L550	@long jump
.LCB5410:
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	ldr	r2, .L597+0xc
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L597+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	ldr	r1, .L597+0x14
	ldr	r0, .L597+0x18
	str	r0, [r1]
	ldr	r2, .L597+0x1c
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r2, #0x1
	mov	r9, r2
	b	.L550
.L598:
	.align	2, 0
.L597:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedLoafingAround
	.word	gBattleMoveFlags
.L533:
	ldr	r1, .L599
	ldr	r3, .L599+0x4
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L534	@cond_branch
	ldr	r0, .L599+0x8
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r2, .L599+0xc
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x19]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L599+0x10
	ldr	r0, .L599+0x14
	str	r0, [r1]
	ldr	r2, .L599+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r7, #0x1
	mov	r9, r7
.L534:
	ldr	r2, .L599+0x1c
	ldr	r0, .L599+0x20
	add	r1, r2, r0
	b	.L572
.L600:
	.align	2, 0
.L599:
	.word	gBattleMons
	.word	gBankAttacker
	.word	0xffbfffff
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedMustRecharge
	.word	gHitMarker
	.word	gSharedMem
	.word	0x160e7
.L535:
	ldr	r1, .L601
	ldr	r3, .L601+0x4
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB5522
	b	.L550	@long jump
.LCB5522:
	mov	r0, #0x9
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r0, .L601+0x8
	ldrb	r2, [r3]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L601+0xc
	ldr	r0, .L601+0x10
	b	.L577
.L602:
	.align	2, 0
.L601:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedFlinched
.L537:
	ldr	r0, .L603
	ldr	r3, .L603+0x4
	ldrb	r2, [r3]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L603+0x8
	ldrh	r1, [r1, #0x4]
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.LCB5571
	b	.L550	@long jump
.LCB5571:
	cmp	r1, #0
	bne	.LCB5573
	b	.L550	@long jump
.LCB5573:
	ldr	r0, .L603+0xc
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L603+0x10
	ldrb	r1, [r3]
	ldr	r7, .L603+0x14
	add	r0, r0, r7
	strb	r1, [r0]
	ldrb	r0, [r3]
	bl	CancelMultiTurnMoves
	ldr	r1, .L603+0x18
	ldr	r0, .L603+0x1c
	str	r0, [r1]
	ldr	r2, .L603+0x20
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x1
	mov	r9, r0
	b	.L550
.L604:
	.align	2, 0
.L603:
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gSharedMem
	.word	0x16003
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsDisabled
	.word	gHitMarker
.L539:
	ldr	r0, .L605
	ldr	r4, .L605+0x4
	ldrb	r3, [r4]
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L540	@cond_branch
	ldr	r2, .L605+0x8
	ldr	r0, .L605+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L540	@cond_branch
	ldr	r0, .L605+0x10
	lsl	r2, r3, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L605+0x14
	ldr	r0, .L605+0x18
	str	r0, [r1]
	ldr	r2, .L605+0x1c
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r7, #0x1
	mov	r9, r7
.L540:
	ldr	r2, .L605+0x20
	ldr	r0, .L605+0x24
	add	r1, r2, r0
	b	.L572
.L606:
	.align	2, 0
.L605:
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsTaunted
	.word	gHitMarker
	.word	gSharedMem
	.word	0x160e7
.L541:
	ldr	r4, .L607
	ldrb	r0, [r4]
	ldr	r1, .L607+0x4
	ldrh	r1, [r1]
	bl	IsImprisoned
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB5702
	b	.L550	@long jump
.LCB5702:
	ldr	r0, .L607+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L607+0xc
	ldr	r0, .L607+0x10
	b	.L577
.L608:
	.align	2, 0
.L607:
	.word	gBankAttacker
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsImprisoned
.L543:
	ldr	r7, .L609
	ldr	r5, .L609+0x4
	ldrb	r0, [r5]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r4, r7, #0
	add	r4, r4, #0x50
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r3, #0x7
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.LCB5744
	b	.L563	@long jump
.LCB5744:
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L545	@cond_branch
	bl	Random
	mov	r1, #0x1
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L546	@cond_branch
	ldr	r1, .L609+0x8
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	bl	b_movescr_stack_push_cursor
	b	.L547
.L610:
	.align	2, 0
.L609:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleCommunication
.L546:
	ldr	r0, .L611
	mov	r4, #0x1
	strb	r1, [r0, #0x5]
	ldr	r1, .L611+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	ldrb	r0, [r5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r7
	mov	r0, #0x28
	str	r0, [sp]
	str	r2, [sp, #0x4]
	ldrb	r0, [r5]
	str	r0, [sp, #0x8]
	ldrb	r0, [r5]
	str	r0, [sp, #0xc]
	add	r0, r1, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	CalculateBaseDamage
	ldr	r1, .L611+0x8
	str	r0, [r1]
	ldr	r0, .L611+0xc
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	orr	r0, r0, r4
	strb	r0, [r1, #0x1]
	ldr	r2, .L611+0x10
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
.L547:
	ldr	r1, .L611+0x14
	ldr	r0, .L611+0x18
	b	.L573
.L612:
	.align	2, 0
.L611:
	.word	gBattleCommunication
	.word	gBankTarget
	.word	gBattleMoveDamage
	.word	gProtectStructs
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsConfused
.L545:
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L613
	ldr	r0, .L613+0x4
.L573:
	str	r0, [r1]
	mov	r7, #0x1
	b	.L578
.L614:
	.align	2, 0
.L613:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsConfusedNoMore
.L549:
	ldr	r1, .L615
	ldr	r4, .L615+0x4
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L550	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L550	@cond_branch
	ldr	r0, .L615+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
	ldr	r1, .L615+0xc
	ldr	r0, .L615+0x10
.L577:
	str	r0, [r1]
	ldr	r2, .L615+0x14
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0x1
.L575:
	mov	r9, r1
.L550:
	ldr	r2, .L615+0x18
	ldr	r4, .L615+0x1c
	add	r1, r2, r4
.L572:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r8, r2
	b	.L511
.L616:
	.align	2, 0
.L615:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsParalyzed
	.word	gHitMarker
	.word	gSharedMem
	.word	0x160e7
.L551:
	ldr	r1, .L617
	ldr	r4, .L617+0x4
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB5942
	b	.L563	@long jump
.LCB5942:
	lsr	r0, r1, #0x10
	bl	CountTrailingZeroBits
	ldr	r1, .L617+0x8
	ldr	r7, .L617+0xc
	add	r1, r1, r7
	strb	r0, [r1]
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L553	@cond_branch
	bl	b_movescr_stack_push_cursor
	b	.L554
.L618:
	.align	2, 0
.L617:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gSharedMem
	.word	0x16003
.L553:
	ldr	r0, .L619
	bl	b_movescr_stack_push
	ldr	r2, .L619+0x4
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L619+0x8
	ldrb	r2, [r4]
	lsl	r2, r2, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r0, [r4]
	bl	CancelMultiTurnMoves
.L554:
	ldr	r1, .L619+0xc
	ldr	r0, .L619+0x10
	str	r0, [r1]
	mov	r0, #0x1
.L576:
	mov	r9, r0
	ldr	r1, .L619+0x14
	mov	r8, r1
	b	.L563
.L620:
	.align	2, 0
.L619:
	.word	BattleScript_MoveUsedIsParalyzedCantAttack
	.word	gHitMarker
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedIsInLove
	.word	gSharedMem
.L555:
	ldr	r1, .L621
	ldr	r6, .L621+0x4
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r1, r1, #0x50
	add	r3, r0, r1
	ldr	r2, [r3]
	mov	r4, #0xc0
	lsl	r4, r4, #0x2
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	bne	.LCB6034
	b	.L563	@long jump
.LCB6034:
	ldr	r7, .L621+0x8
	add	r0, r2, r7
	str	r0, [r3]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r1, r0, r1
	ldr	r2, [r1]
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L557	@cond_branch
	ldr	r1, .L621+0xc
	ldr	r0, .L621+0x10
	b	.L574
.L622:
	.align	2, 0
.L621:
	.word	gBattleMons
	.word	gBankAttacker
	.word	0xffffff00
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideStoringEnergy
.L557:
	ldr	r0, .L623
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r2, .L623+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L559	@cond_branch
	ldr	r1, .L623+0x8
	mov	r0, #0x75
	strh	r0, [r1]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, sl
	str	r0, [r1]
	ldr	r4, .L623+0xc
	ldr	r1, .L623+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r0, .L623+0x14
	ldrb	r1, [r0]
	ldr	r2, .L623+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L560	@cond_branch
	mov	r0, #0x75
	mov	r1, #0x1
	bl	GetMoveTarget
	strb	r0, [r4]
.L560:
	ldr	r1, .L623+0x1c
	ldr	r0, .L623+0x20
	str	r0, [r1]
	ldr	r2, .L623+0x24
	mov	r8, r2
	b	.L558
.L624:
	.align	2, 0
.L623:
	.word	0xffffefff
	.word	gTakenDmg
	.word	gCurrentMove
	.word	gBankTarget
	.word	gTakenDmgBanks
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideAttack
	.word	gSharedMem
.L559:
	ldr	r1, .L625
	ldr	r0, .L625+0x4
.L574:
	str	r0, [r1]
.L558:
	mov	r4, #0x1
	mov	r9, r4
	b	.L563
.L626:
	.align	2, 0
.L625:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BideNoEnergyToAttack
.L562:
	ldr	r1, .L627
	ldr	r0, .L627+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r4, r0, r1
	ldr	r3, [r4]
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L563	@cond_branch
	ldr	r2, .L627+0x8
	ldr	r0, .L627+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x7d
	bne	.L564	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r3, r3, r0
	str	r3, [r4]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L627+0x10
	ldr	r0, .L627+0x14
	str	r0, [r1]
	ldr	r1, .L627+0x18
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L564:
	mov	r7, #0x2
.L578:
	mov	r9, r7
	ldr	r0, .L627+0x1c
	mov	r8, r0
.L563:
	ldr	r1, .L627+0x20
	add	r1, r1, r8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L511:
	ldr	r0, .L627+0x20
	add	r0, r0, r8
	ldrb	r0, [r0]
	cmp	r0, #0xe
	beq	.LCB6210
	bl	.L570	@far jump
.LCB6210:
.L510:
	mov	r1, r9
	cmp	r1, #0x2
	bne	.L571	@cond_branch
	ldr	r4, .L627+0x24
	ldr	r0, .L627+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L627+0x28
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L571:
	mov	r0, r9
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L628:
	.align	2, 0
.L627:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedUnfroze
	.word	gBattleCommunication
	.word	gSharedMem
	.word	0x160e7
	.word	gActiveBank
	.word	gBattleMons+0x4c
.Lfe13:
	.size	 AtkCanceller_UnableToUseMove,.Lfe13-AtkCanceller_UnableToUseMove
	.align	2, 0
	.globl	sub_8018018
	.type	 sub_8018018,function
	.thumb_func
sub_8018018:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r3, r4, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	ldr	r0, .L654
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L630	@cond_branch
	mov	r0, #0x0
	b	.L653
.L655:
	.align	2, 0
.L654:
	.word	gBattleTypeFlags
.L630:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L631	@cond_branch
	add	r0, r4, #0
	bl	sub_803FC34
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	ldr	r1, .L656
	mov	r8, r1
	cmp	r0, #0
	bne	.L632	@cond_branch
	ldr	r2, .L656+0x4
	mov	r8, r2
.L632:
	add	r0, r7, #0
	bl	sub_803FBFC
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x1
	add	r5, r0, r6
	add	r0, r5, #0x3
	cmp	r5, r0
	bge	.L635	@cond_branch
	add	r7, r0, #0
.L637:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L636	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L636	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L635	@cond_branch
.L636:
	add	r5, r5, #0x1
	cmp	r5, r7
	blt	.L637	@cond_branch
.L635:
	mov	r1, #0x0
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	add	r0, r0, #0x3
	cmp	r5, r0
	bne	.L640	@cond_branch
	mov	r1, #0x1
.L640:
	add	r0, r1, #0
	b	.L653
.L657:
	.align	2, 0
.L656:
	.word	gEnemyParty
	.word	gPlayerParty
.L631:
	add	r0, r3, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L642	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x3
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L658
	mov	r8, r2
	b	.L643
.L659:
	.align	2, 0
.L658:
	.word	gEnemyParty
.L642:
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x2
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L660
	mov	r8, r0
.L643:
	mov	r1, sl
	cmp	r1, #0x6
	bne	.L644	@cond_branch
	ldr	r1, .L660+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	sl, r0
.L644:
	mov	r2, r9
	cmp	r2, #0x6
	bne	.L645	@cond_branch
	ldr	r1, .L660+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r9, r0
.L645:
	mov	r5, #0x0
.L649:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L648	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L648	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L648	@cond_branch
	cmp	r5, sl
	beq	.L648	@cond_branch
	cmp	r5, r9
	beq	.L648	@cond_branch
	ldr	r1, .L660+0x8
	ldr	r2, .L660+0xc
	add	r0, r7, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L648	@cond_branch
	add	r0, r6, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L647	@cond_branch
.L648:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L649	@cond_branch
.L647:
	mov	r0, #0x0
	cmp	r5, #0x6
	bne	.L653	@cond_branch
	mov	r0, #0x1
.L653:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L661:
	.align	2, 0
.L660:
	.word	gPlayerParty
	.word	gBattlePartyID
	.word	gSharedMem
	.word	0x16068
.Lfe14:
	.size	 sub_8018018,.Lfe14-sub_8018018
	.align	2, 0
	.globl	CastformDataTypeChange
	.type	 CastformDataTypeChange,function
	.thumb_func
CastformDataTypeChange:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r1, .L674
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r4, r0, r1
	ldrh	r1, [r4]
	ldr	r0, .L674+0x4
	cmp	r1, r0
	bne	.L668	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bne	.L668	@cond_branch
	ldrh	r0, [r4, #0x28]
	cmp	r0, #0
	beq	.L668	@cond_branch
	str	r5, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L666	@cond_branch
	str	r5, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L665	@cond_branch
.L666:
	add	r2, r4, #0
	add	r2, r2, #0x21
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L665	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L665	@cond_branch
	strb	r5, [r2]
	strb	r5, [r1]
	mov	r0, #0x1
	b	.L673
.L675:
	.align	2, 0
.L674:
	.word	gBattleMons
	.word	0x181
.L665:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L668	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L667	@cond_branch
.L668:
	mov	r0, #0x0
	b	.L673
.L667:
	ldr	r1, .L676
	ldrh	r0, [r1]
	mov	r2, #0xe7
	and	r2, r2, r0
	add	r4, r1, #0
	cmp	r2, #0
	bne	.L669	@cond_branch
	ldr	r1, .L676+0x4
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r3, r1, #0
	add	r3, r3, #0x21
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L669	@cond_branch
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L669	@cond_branch
	strb	r2, [r3]
	strb	r2, [r1]
	mov	r5, #0x1
.L669:
	ldrh	r1, [r4]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L670	@cond_branch
	ldr	r1, .L676+0x4
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r2, r1, #0
	add	r2, r2, #0x21
	ldrb	r0, [r2]
	cmp	r0, #0xa
	beq	.L670	@cond_branch
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0xa
	beq	.L670	@cond_branch
	mov	r0, #0xa
	strb	r0, [r2]
	strb	r0, [r1]
	mov	r5, #0x2
.L670:
	ldrh	r1, [r4]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L671	@cond_branch
	ldr	r1, .L676+0x4
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r2, r1, #0
	add	r2, r2, #0x21
	ldrb	r0, [r2]
	cmp	r0, #0xb
	beq	.L671	@cond_branch
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0xb
	beq	.L671	@cond_branch
	mov	r0, #0xb
	strb	r0, [r2]
	strb	r0, [r1]
	mov	r5, #0x3
.L671:
	ldrh	r1, [r4]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L672	@cond_branch
	ldr	r1, .L676+0x4
	mov	r0, #0x58
	mul	r0, r0, r6
	add	r1, r0, r1
	add	r2, r1, #0
	add	r2, r2, #0x21
	ldrb	r0, [r2]
	cmp	r0, #0xf
	beq	.L672	@cond_branch
	add	r1, r1, #0x22
	ldrb	r0, [r1]
	cmp	r0, #0xf
	beq	.L672	@cond_branch
	mov	r0, #0xf
	strb	r0, [r2]
	strb	r0, [r1]
	mov	r5, #0x4
.L672:
	add	r0, r5, #0
.L673:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L677:
	.align	2, 0
.L676:
	.word	gBattleWeather
	.word	gBattleMons
.Lfe15:
	.size	 CastformDataTypeChange,.Lfe15-CastformDataTypeChange
	.align	2, 0
	.globl	AbilityBattleEffects
	.type	 AbilityBattleEffects,function
	.thumb_func
AbilityBattleEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffd8
	ldr	r4, [sp, #0x48]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x0
	mov	r9, r0
	ldr	r5, .L999
	ldr	r1, .L999+0x4
	ldrb	r0, [r5]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L679	@cond_branch
	mov	r1, sl
	strb	r1, [r5]
.L679:
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L680	@cond_branch
	ldr	r1, .L999+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L999+0xc
	b	.L983
.L1000:
	.align	2, 0
.L999:
	.word	gBankAttacker
	.word	gNoOfAllBanks
	.word	gBattlePartyID
	.word	gPlayerParty
.L680:
	ldr	r1, .L1001
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1001+0x4
.L983:
	add	r7, r1, r0
	ldr	r5, .L1001+0x8
	ldr	r1, .L1001+0xc
	ldrb	r0, [r5]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L682	@cond_branch
	mov	r2, sl
	strb	r2, [r5]
.L682:
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L683	@cond_branch
	ldr	r1, .L1001
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1001+0x10
	b	.L984
.L1002:
	.align	2, 0
.L1001:
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gBankTarget
	.word	gNoOfAllBanks
	.word	gPlayerParty
.L683:
	ldr	r1, .L1003
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1003+0x4
.L984:
	add	r5, r1, r0
	add	r0, r7, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	add	r0, r7, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x14]
	ldr	r0, .L1003+0x8
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB6952
	bl	.L685	@far jump
.LCB6952:
	mov	r3, r8
	cmp	r3, #0
	beq	.L686	@cond_branch
	ldr	r0, .L1003+0xc
	strb	r3, [r0]
	mov	r8, r0
	b	.L687
.L1004:
	.align	2, 0
.L1003:
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gLastUsedAbility
.L686:
	ldr	r2, .L1005
	ldr	r1, .L1005+0x4
	mov	r0, #0x58
	mov	r5, sl
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r8, r2
.L687:
	cmp	r4, #0
	beq	.L688	@cond_branch
	add	r3, r4, #0
	b	.L689
.L1006:
	.align	2, 0
.L1005:
	.word	gLastUsedAbility
	.word	gBattleMons
.L688:
	ldr	r0, .L1007
	ldrh	r3, [r0]
.L689:
	ldr	r1, .L1007+0x4
	ldr	r2, .L1007+0x8
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r7, r1, #0
	cmp	r0, #0
	beq	.L690	@cond_branch
	mov	r4, #0x3f
	and	r4, r4, r0
	b	.L691
.L1008:
	.align	2, 0
.L1007:
	.word	gCurrentMove
	.word	gSharedMem
	.word	0x1601c
.L690:
	ldr	r1, .L1009
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x2]
.L691:
	ldr	r5, [sp, #0x4]
	cmp	r5, #0x13
	bls	.LCB7035
	bl	.L692	@far jump
.LCB7035:
	lsl	r0, r5, #0x2
	ldr	r1, .L1009+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1010:
	.align	2, 0
.L1009:
	.word	gBattleMoves
	.word	.L972
	.align	2, 0
	.align	2, 0
.L972:
	.word	.L693
	.word	.L734
	.word	.L753
	.word	.L763
	.word	.L791
	.word	.L823
	.word	.L855
	.word	.L863
	.word	.L866
	.word	.L869
	.word	.L892
	.word	.L876
	.word	.L899
	.word	.L906
	.word	.L913
	.word	.L944
	.word	.L951
	.word	.L958
	.word	.L965
	.word	.L937
.L693:
	ldr	r2, .L1011
	ldr	r0, .L1011+0x4
	ldrb	r1, [r2]
	add	r5, r0, #0
	ldrb	r0, [r5]
	cmp	r1, r0
	bcc	.L694	@cond_branch
	mov	r1, sl
	strb	r1, [r2]
.L694:
	mov	r2, r8
	ldrb	r0, [r2]
	cmp	r0, #0x2d
	bne	.LCB7075
	b	.L711	@long jump
.LCB7075:
	cmp	r0, #0x2d
	bgt	.L731	@cond_branch
	cmp	r0, #0xd
	bne	.LCB7079
	b	.L722	@long jump
.LCB7079:
	cmp	r0, #0xd
	bgt	.L732	@cond_branch
	cmp	r0, #0x2
	bne	.LCB7083
	b	.L709	@long jump
.LCB7083:
	bl	.L692	@ far jump
.L1012:
	.align	2, 0
.L1011:
	.word	gBankAttacker
	.word	gNoOfAllBanks
.L732:
	cmp	r0, #0x16
	bne	.LCB7095
	b	.L715	@long jump
.LCB7095:
	cmp	r0, #0x24
	bne	.LCB7097
	b	.L719	@long jump
.LCB7097:
	bl	.L692	@ far jump
.L731:
	cmp	r0, #0x46
	bne	.LCB7102
	b	.L713	@long jump
.LCB7102:
	cmp	r0, #0x46
	bgt	.L733	@cond_branch
	cmp	r0, #0x3b
	bne	.LCB7106
	b	.L717	@long jump
.LCB7106:
	bl	.L692	@ far jump
.L733:
	cmp	r0, #0x4d
	bne	.LCB7111
	b	.L722	@long jump
.LCB7111:
	cmp	r0, #0xff
	beq	.LCB7113
	bl	.L692	@far jump
.LCB7113:
	bl	weather_get_current
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x3
	cmp	r0, #0xa
	bhi	.L697	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1013
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1014:
	.align	2, 0
.L1013:
	.word	.L706
	.align	2, 0
	.align	2, 0
.L706:
	.word	.L700
	.word	.L697
	.word	.L700
	.word	.L697
	.word	.L697
	.word	.L702
	.word	.L697
	.word	.L697
	.word	.L697
	.word	.L704
	.word	.L700
.L700:
	ldr	r2, .L1015
	ldrh	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L697	@cond_branch
	mov	r0, #0x5
	strh	r0, [r2]
	ldr	r0, .L1015+0x4
	ldr	r3, .L1015+0x8
	add	r2, r0, r3
	mov	r1, #0xa
	b	.L985
.L1016:
	.align	2, 0
.L1015:
	.word	gBattleWeather
	.word	gSharedMem
	.word	0x160a4
.L702:
	ldr	r3, .L1017
	ldrh	r1, [r3]
	mov	r2, #0x18
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L697	@cond_branch
	strh	r2, [r3]
	ldr	r0, .L1017+0x4
	ldr	r3, .L1017+0x8
	add	r2, r0, r3
	mov	r1, #0xc
	b	.L985
.L1018:
	.align	2, 0
.L1017:
	.word	gBattleWeather
	.word	gSharedMem
	.word	0x160a4
.L704:
	ldr	r3, .L1019
	ldrh	r1, [r3]
	mov	r2, #0x60
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L697	@cond_branch
	strh	r2, [r3]
	ldr	r0, .L1019+0x4
	ldr	r3, .L1019+0x8
	add	r2, r0, r3
	mov	r1, #0xb
.L985:
	strb	r1, [r2]
	ldr	r5, .L1019+0xc
	add	r0, r0, r5
	mov	r1, sl
	strb	r1, [r0]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L697:
	mov	r2, r9
	cmp	r2, #0
	bne	.LCB7229
	bl	.L685	@far jump
.LCB7229:
	bl	weather_get_current
	ldr	r1, .L1019+0x10
	strb	r0, [r1, #0x5]
	ldr	r0, .L1019+0x14
	bl	b_push_move_exec
	bl	.L692	@ far jump
.L1020:
	.align	2, 0
.L1019:
	.word	gBattleWeather
	.word	gSharedMem
	.word	0x160a4
	.word	0x16003
	.word	gBattleCommunication
	.word	gUnknown_081D901D
.L709:
	ldr	r2, .L1021
	ldrh	r1, [r2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7259
	bl	.L692	@far jump
.LCB7259:
	mov	r0, #0x5
	strh	r0, [r2]
	ldr	r0, .L1021+0x4
	bl	b_push_move_exec
	ldr	r0, .L1021+0x8
	ldr	r3, .L1021+0xc
	add	r0, r0, r3
	mov	r5, sl
	strb	r5, [r0]
	bl	.L986	@ far jump
.L1022:
	.align	2, 0
.L1021:
	.word	gBattleWeather
	.word	BattleScript_DrizzleActivates
	.word	gSharedMem
	.word	0x16003
.L711:
	ldr	r2, .L1023
	ldrh	r1, [r2]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7291
	bl	.L692	@far jump
.LCB7291:
	mov	r0, #0x18
	strh	r0, [r2]
	ldr	r0, .L1023+0x4
	bl	b_push_move_exec
	ldr	r0, .L1023+0x8
	ldr	r1, .L1023+0xc
	add	r0, r0, r1
	mov	r2, sl
	strb	r2, [r0]
	bl	.L986	@ far jump
.L1024:
	.align	2, 0
.L1023:
	.word	gBattleWeather
	.word	BattleScript_SandstreamActivates
	.word	gSharedMem
	.word	0x16003
.L713:
	ldr	r2, .L1025
	ldrh	r1, [r2]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7323
	bl	.L692	@far jump
.LCB7323:
	mov	r0, #0x60
	strh	r0, [r2]
	ldr	r0, .L1025+0x4
	bl	b_push_move_exec
	ldr	r0, .L1025+0x8
	ldr	r3, .L1025+0xc
	add	r0, r0, r3
	mov	r5, sl
	strb	r5, [r0]
	bl	.L986	@ far jump
.L1026:
	.align	2, 0
.L1025:
	.word	gBattleWeather
	.word	BattleScript_DroughtActivates
	.word	gSharedMem
	.word	0x16003
.L715:
	ldr	r0, .L1027
	mov	r1, sl
	lsl	r2, r1, #0x2
	add	r1, r2, r1
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.LCB7360
	bl	.L692	@far jump
.LCB7360:
	ldr	r1, .L1027+0x4
	add	r1, r2, r1
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xc
	orr	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x8
	b	.L987
.L1028:
	.align	2, 0
.L1027:
	.word	gSpecialStatuses
	.word	gStatuses3
.L717:
	mov	r0, sl
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r0, #0
	bne	.LCB7388
	bl	.L685	@far jump
.LCB7388:
	ldr	r0, .L1029
	bl	b_push_move_exec
	ldr	r0, .L1029+0x4
	ldr	r2, .L1029+0x8
	add	r1, r0, r2
	mov	r3, sl
	strb	r3, [r1]
	mov	r1, r9
	sub	r1, r1, #0x1
	ldr	r5, .L1029+0xc
	add	r0, r0, r5
	strb	r1, [r0]
	bl	.L692	@ far jump
.L1030:
	.align	2, 0
.L1029:
	.word	BattleScript_CastformChange
	.word	gSharedMem
	.word	0x16003
	.word	0x1609b
.L719:
	ldr	r0, .L1031
	mov	r1, sl
	lsl	r2, r1, #0x2
	add	r1, r2, r1
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.LCB7429
	bl	.L692	@far jump
.LCB7429:
	ldr	r1, .L1031+0x4
	add	r1, r2, r1
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xd
	orr	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x10
.L987:
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	.L692	@ far jump
.L1032:
	.align	2, 0
.L1031:
	.word	gSpecialStatuses
	.word	gStatuses3
.L722:
	mov	r6, #0x0
	ldrb	r5, [r5]
	cmp	r6, r5
	bcc	.LCB7461
	bl	.L692	@far jump
.LCB7461:
.L726:
	add	r0, r6, #0
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r0, #0
	beq	.LCB7472
	bl	.L978	@far jump
.LCB7472:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1033
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L726	@cond_branch
	bl	.L692	@ far jump
.L1034:
	.align	2, 0
.L1033:
	.word	gNoOfAllBanks
.L734:
	ldr	r2, .L1035
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r4, r1, r2
	ldrh	r0, [r4, #0x28]
	cmp	r0, #0
	bne	.LCB7503
	bl	.L692	@far jump
.LCB7503:
	ldr	r0, .L1035+0x4
	mov	r3, sl
	strb	r3, [r0]
	mov	r3, r8
	ldrb	r5, [r3]
	cmp	r5, #0x2c
	beq	.L737	@cond_branch
	cmp	r5, #0x2c
	bgt	.L752	@cond_branch
	cmp	r5, #0x3
	bne	.LCB7517
	b	.L747	@long jump
.LCB7517:
	bl	.L692	@ far jump
.L1036:
	.align	2, 0
.L1035:
	.word	gBattleMons
	.word	gBankAttacker
.L752:
	cmp	r5, #0x36
	bne	.LCB7529
	b	.L749	@long jump
.LCB7529:
	cmp	r5, #0x3d
	beq	.L740	@cond_branch
	bl	.L692	@ far jump
.L737:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB7548
	bl	.L692	@far jump
.LCB7548:
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB7559
	bl	.L692	@far jump
.LCB7559:
	ldr	r0, .L1037
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB7567
	bl	.L692	@far jump
.LCB7567:
	ldrh	r0, [r4, #0x2c]
	ldrh	r1, [r4, #0x28]
	cmp	r0, r1
	bhi	.LCB7576
	bl	.L692	@far jump
.LCB7576:
	mov	r2, r8
	strb	r5, [r2]
	ldr	r0, .L1037+0x4
	bl	b_push_move_exec
	ldr	r1, .L1037+0x8
	ldrh	r0, [r4, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L739	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L739:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	bl	.L986	@ far jump
.L1038:
	.align	2, 0
.L1037:
	.word	gBattleWeather
	.word	BattleScript_RainDishActivates
	.word	gBattleMoveDamage
.L740:
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r5, r1, r0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.LCB7615
	bl	.L692	@far jump
.LCB7615:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.LCB7627
	bl	.L692	@far jump
.LCB7627:
	ldr	r0, [r5]
	mov	r1, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L742	@cond_branch
	ldr	r0, .L1039
	ldr	r1, .L1039+0x4
	bl	StringCopy
.L742:
	ldr	r0, [r5]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L743	@cond_branch
	ldr	r0, .L1039
	ldr	r1, .L1039+0x8
	bl	StringCopy
.L743:
	ldr	r0, [r5]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L744	@cond_branch
	ldr	r0, .L1039
	ldr	r1, .L1039+0xc
	bl	StringCopy
.L744:
	ldr	r0, [r5]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L745	@cond_branch
	ldr	r0, .L1039
	ldr	r1, .L1039+0x10
	bl	StringCopy
.L745:
	ldr	r0, [r5]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L746	@cond_branch
	ldr	r0, .L1039
	ldr	r1, .L1039+0x14
	bl	StringCopy
.L746:
	str	r4, [r5]
	ldr	r0, .L1039+0x18
	ldr	r4, .L1039+0x1c
	mov	r3, sl
	strb	r3, [r4]
	ldr	r1, .L1039+0x20
	add	r0, r0, r1
	strb	r3, [r0]
	ldr	r0, .L1039+0x24
	bl	b_push_move_exec
	str	r5, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	bl	.L986	@ far jump
.L1040:
	.align	2, 0
.L1039:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	gSharedMem
	.word	gActiveBank
	.word	0x16003
	.word	BattleScript_ShedSkinActivates
.L747:
	ldrb	r2, [r4, #0x1b]
	mov	r0, #0x1b
	ldrsb	r0, [r4, r0]
	cmp	r0, #0xb
	ble	.LCB7732
	bl	.L692	@far jump
.LCB7732:
	ldr	r0, .L1041
	mov	r3, sl
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0x2
	bne	.LCB7743
	bl	.L692	@far jump
.LCB7743:
	add	r0, r2, #0x1
	mov	r2, #0x0
	strb	r0, [r4, #0x1b]
	ldr	r5, .L1041+0x4
	add	r1, r7, r5
	mov	r0, #0x11
	strb	r0, [r1]
	ldr	r1, .L1041+0x8
	add	r0, r7, r1
	strb	r2, [r0]
	ldr	r0, .L1041+0xc
	bl	b_push_move_exec
	ldr	r2, .L1041+0x10
	add	r0, r7, r2
	mov	r3, sl
	strb	r3, [r0]
	bl	.L986	@ far jump
.L1042:
	.align	2, 0
.L1041:
	.word	gDisableStructs
	.word	0x160a4
	.word	0x160a5
	.word	BattleScript_SpeedBoostActivates
	.word	0x16003
.L749:
	ldr	r2, .L1043
	ldrb	r0, [r0]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r3, [r1, #0x18]
	lsl	r0, r3, #0x1f
	lsr	r0, r0, #0x1f
	mov	r2, #0x1
	eor	r2, r2, r0
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x18]
	bl	.L692	@ far jump
.L1044:
	.align	2, 0
.L1043:
	.word	gDisableStructs
.L753:
	mov	r5, r8
	ldrb	r0, [r5]
	cmp	r0, #0x2b
	beq	.LCB7812
	bl	.L692	@far jump
.LCB7812:
	mov	r4, #0x0
	ldr	r0, .L1045
	ldrh	r2, [r0]
	ldr	r5, .L1045+0x4
	add	r1, r0, #0
	cmp	r2, r5
	bne	.LCB7824
	bl	.L692	@far jump
.LCB7824:
	cmp	r2, r3
	beq	.L756	@cond_branch
	add	r2, r1, #0
.L757:
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r2]
	cmp	r0, r5
	bne	.LCB7840
	bl	.L692	@far jump
.LCB7840:
	cmp	r0, r3
	bne	.L757	@cond_branch
.L756:
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L1045+0x4
	cmp	r1, r0
	bne	.LCB7856
	bl	.L692	@far jump
.LCB7856:
	ldr	r1, .L1045+0x8
	ldr	r0, .L1045+0xc
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L762	@cond_branch
	ldr	r0, .L1045+0x10
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	orr	r1, r1, r2
	str	r1, [r0]
.L762:
	ldr	r1, .L1045+0x14
	ldr	r0, .L1045+0x18
	str	r0, [r1]
	mov	r0, #0x1
	mov	r9, r0
	bl	.L975	@ far jump
.L1046:
	.align	2, 0
.L1045:
	.word	gSoundMovesTable
	.word	0xffff
	.word	gBattleMons
	.word	gBankAttacker
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SoundproofProtected
.L763:
	cmp	r3, #0
	bne	.LCB7899
	bl	.L692	@far jump
.LCB7899:
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0xb
	beq	.L770	@cond_branch
	cmp	r0, #0xb
	bgt	.L784	@cond_branch
	cmp	r0, #0xa
	beq	.L766	@cond_branch
	b	.L765
.L784:
	cmp	r0, #0x12
	beq	.L774	@cond_branch
	b	.L765
.L766:
	cmp	r4, #0xd
	beq	.LCB7921
	b	.L765	@long jump
.LCB7921:
	ldr	r0, .L1047
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB7931
	b	.L765	@long jump
.LCB7931:
	ldr	r1, .L1047+0x4
	ldr	r0, .L1047+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L768	@cond_branch
	ldr	r1, .L1047+0xc
	ldr	r0, .L1047+0x10
	b	.L988
.L1048:
	.align	2, 0
.L1047:
	.word	gBattleMoves
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain
.L768:
	ldr	r1, .L1049
	ldr	r0, .L1049+0x4
.L988:
	str	r0, [r1]
	mov	r2, #0x1
	b	.L989
.L1050:
	.align	2, 0
.L1049:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain_PPLoss
.L770:
	cmp	r4, #0xb
	beq	.LCB7974
	b	.L765	@long jump
.LCB7974:
	ldr	r0, .L1051
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB7984
	b	.L765	@long jump
.LCB7984:
	ldr	r1, .L1051+0x4
	ldr	r0, .L1051+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L772	@cond_branch
	ldr	r1, .L1051+0xc
	ldr	r0, .L1051+0x10
	b	.L990
.L1052:
	.align	2, 0
.L1051:
	.word	gBattleMoves
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain
.L772:
	ldr	r1, .L1053
	ldr	r0, .L1053+0x4
.L990:
	str	r0, [r1]
	mov	r3, #0x1
	mov	r9, r3
	b	.L765
.L1054:
	.align	2, 0
.L1053:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain_PPLoss
.L774:
	cmp	r4, #0xa
	bne	.L765	@cond_branch
	ldr	r1, .L1055
	mov	r0, #0x58
	mov	r5, sl
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L765	@cond_branch
	ldr	r2, .L1055+0x4
	mov	r0, sl
	lsl	r1, r0, #0x2
	add	r0, r1, r2
	ldr	r3, [r0]
	mov	r4, #0x1
	and	r3, r3, r4
	add	r5, r1, #0
	cmp	r3, #0
	bne	.L776	@cond_branch
	ldr	r0, .L1055+0x8
	strb	r3, [r0, #0x5]
	ldr	r1, .L1055+0xc
	ldr	r0, .L1055+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L777	@cond_branch
	ldr	r1, .L1055+0x14
	ldr	r0, .L1055+0x18
	b	.L991
.L1056:
	.align	2, 0
.L1055:
	.word	gBattleMons
	.word	gSharedMem+0x17100
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost
.L777:
	ldr	r1, .L1057
	ldr	r0, .L1057+0x4
.L991:
	str	r0, [r1]
	add	r0, r5, r2
	ldr	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	str	r1, [r0]
	mov	r1, #0x2
	mov	r9, r1
	b	.L765
.L1058:
	.align	2, 0
.L1057:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost_PPLoss
.L776:
	ldr	r0, .L1059
	strb	r4, [r0, #0x5]
	ldr	r1, .L1059+0x4
	ldr	r0, .L1059+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L780	@cond_branch
	ldr	r1, .L1059+0xc
	ldr	r0, .L1059+0x10
	b	.L992
.L1060:
	.align	2, 0
.L1059:
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost
.L780:
	ldr	r1, .L1061
	ldr	r0, .L1061+0x4
.L992:
	str	r0, [r1]
	mov	r2, #0x2
.L989:
	mov	r9, r2
.L765:
	mov	r3, r9
	cmp	r3, #0x1
	beq	.LCB8143
	bl	.L692	@far jump
.LCB8143:
	ldr	r1, .L1061+0x8
	mov	r0, #0x58
	mov	r5, sl
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2c]
	ldrh	r2, [r1, #0x28]
	cmp	r0, r2
	bne	.L786	@cond_branch
	ldr	r1, .L1061+0xc
	ldr	r0, .L1061+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L787	@cond_branch
	ldr	r1, .L1061
	ldr	r0, .L1061+0x14
	str	r0, [r1]
	bl	.L692	@ far jump
.L1062:
	.align	2, 0
.L1061:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlashFireBoost_PPLoss
	.word	gBattleMons
	.word	gProtectStructs
	.word	gBankAttacker
	.word	BattleScript_MoveHPDrain_FullHP
.L787:
	ldr	r1, .L1063
	ldr	r0, .L1063+0x4
	str	r0, [r1]
	bl	.L692	@ far jump
.L1064:
	.align	2, 0
.L1063:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveHPDrain_FullHP_PPLoss
.L786:
	ldr	r2, .L1065
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r2]
	cmp	r0, #0
	bne	.L790	@cond_branch
	mov	r3, r9
	str	r3, [r2]
.L790:
	ldr	r0, [r2]
	neg	r0, r0
	str	r0, [r2]
	bl	.L692	@ far jump
.L1066:
	.align	2, 0
.L1065:
	.word	gBattleMoveDamage
.L791:
	mov	r5, r8
	ldrb	r0, [r5]
	sub	r0, r0, #0x9
	cmp	r0, #0x2f
	bls	.LCB8230
	bl	.L692	@far jump
.LCB8230:
	lsl	r0, r0, #0x2
	ldr	r1, .L1067
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1068:
	.align	2, 0
.L1067:
	.word	.L821
	.align	2, 0
	.align	2, 0
.L821:
	.word	.L812
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L793
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L796
	.word	.L692
	.word	.L692
	.word	.L800
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L809
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L815
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L692
	.word	.L818
.L793:
	ldr	r0, .L1069
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8256
	bl	.L692	@far jump
.LCB8256:
	cmp	r3, #0xa5
	bne	.LCB8258
	bl	.L692	@far jump
.LCB8258:
	ldr	r0, .L1069+0x4
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB8268
	bl	.L692	@far jump
.LCB8268:
	ldr	r2, .L1069+0x8
	ldr	r0, .L1069+0xc
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L795	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB8286
	bl	.L692	@far jump
.LCB8286:
.L795:
	ldr	r1, .L1069+0x10
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r1, r0, r1
	add	r3, r1, #0
	add	r3, r3, #0x21
	ldrb	r0, [r3]
	cmp	r0, r4
	bne	.LCB8299
	bl	.L692	@far jump
.LCB8299:
	add	r2, r1, #0
	add	r2, r2, #0x22
	ldrb	r0, [r2]
	cmp	r0, r4
	bne	.LCB8306
	bl	.L692	@far jump
.LCB8306:
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	bne	.LCB8311
	bl	.L692	@far jump
.LCB8311:
	strb	r4, [r3]
	strb	r4, [r2]
	ldr	r1, .L1069+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1069+0x18
	ldr	r0, .L1069+0x1c
	str	r0, [r1]
	bl	.L986	@ far jump
.L1070:
	.align	2, 0
.L1069:
	.word	gBattleMoveFlags
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ColorChangeActivates
.L796:
	ldr	r0, .L1071
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8353
	bl	.L692	@far jump
.LCB8353:
	ldr	r1, .L1071+0x4
	ldr	r0, .L1071+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x28]
	cmp	r0, #0
	bne	.LCB8364
	bl	.L692	@far jump
.LCB8364:
	ldr	r0, .L1071+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB8372
	bl	.L692	@far jump
.LCB8372:
	ldr	r2, .L1071+0x10
	ldr	r0, .L1071+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L798	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB8390
	bl	.L692	@far jump
.LCB8390:
.L798:
	ldr	r1, .L1071+0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8404
	bl	.L692	@far jump
.LCB8404:
	ldr	r1, .L1071+0x1c
	ldrh	r0, [r4, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L799	@cond_branch
	str	r2, [r1]
.L799:
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1071+0x20
	ldr	r0, .L1071+0x24
	str	r0, [r1]
	bl	.L986	@ far jump
.L1072:
	.align	2, 0
.L1071:
	.word	gBattleMoveFlags
	.word	gBattleMons
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	gBattleMoves
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RoughSkinActivates
.L800:
	ldr	r0, .L1073
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8445
	bl	.L692	@far jump
.LCB8445:
	ldr	r1, .L1073+0x4
	ldr	r0, .L1073+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB8456
	bl	.L692	@far jump
.LCB8456:
	ldr	r0, .L1073+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB8464
	bl	.L692	@far jump
.LCB8464:
	ldr	r2, .L1073+0x10
	ldr	r0, .L1073+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L802	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB8482
	bl	.L692	@far jump
.LCB8482:
.L802:
	ldr	r1, .L1073+0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8495
	bl	.L692	@far jump
.LCB8495:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB8507
	bl	.L692	@far jump
.LCB8507:
	ldr	r5, .L1073+0x1c
	mov	r4, #0x3
.L803:
	bl	Random
	and	r0, r0, r4
	strb	r0, [r5, #0x3]
	cmp	r0, #0
	beq	.L803	@cond_branch
	ldr	r1, .L1073+0x1c
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0x3
	bne	.L808	@cond_branch
	add	r0, r0, #0x2
	strb	r0, [r1, #0x3]
.L808:
	ldrb	r0, [r1, #0x3]
	add	r0, r0, #0x40
	strb	r0, [r1, #0x3]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1073+0x20
	ldr	r0, .L1073+0x24
	str	r0, [r1]
	ldr	r2, .L1073+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L986	@ far jump
.L1074:
	.align	2, 0
.L1073:
	.word	gBattleMoveFlags
	.word	gBattleMons
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	gBattleMoves
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ApplySecondaryEffect
	.word	gHitMarker
.L809:
	ldr	r0, .L1075
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8575
	bl	.L692	@far jump
.LCB8575:
	ldr	r1, .L1075+0x4
	ldr	r0, .L1075+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB8586
	bl	.L692	@far jump
.LCB8586:
	ldr	r0, .L1075+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB8594
	bl	.L692	@far jump
.LCB8594:
	ldr	r2, .L1075+0x10
	ldr	r0, .L1075+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L811	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB8612
	bl	.L692	@far jump
.LCB8612:
.L811:
	ldr	r1, .L1075+0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8625
	bl	.L692	@far jump
.LCB8625:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB8637
	bl	.L692	@far jump
.LCB8637:
	ldr	r1, .L1075+0x1c
	mov	r0, #0x42
	strb	r0, [r1, #0x3]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1075+0x20
	ldr	r0, .L1075+0x24
	str	r0, [r1]
	ldr	r2, .L1075+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L986	@ far jump
.L1076:
	.align	2, 0
.L1075:
	.word	gBattleMoveFlags
	.word	gBattleMons
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	gBattleMoves
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ApplySecondaryEffect
	.word	gHitMarker
.L812:
	ldr	r0, .L1077
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8678
	bl	.L692	@far jump
.LCB8678:
	ldr	r1, .L1077+0x4
	ldr	r0, .L1077+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB8689
	bl	.L692	@far jump
.LCB8689:
	ldr	r0, .L1077+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB8697
	bl	.L692	@far jump
.LCB8697:
	ldr	r2, .L1077+0x10
	ldr	r0, .L1077+0x14
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L814	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB8715
	bl	.L692	@far jump
.LCB8715:
.L814:
	ldr	r1, .L1077+0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8728
	bl	.L692	@far jump
.LCB8728:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB8740
	bl	.L692	@far jump
.LCB8740:
	ldr	r1, .L1077+0x1c
	mov	r0, #0x45
	strb	r0, [r1, #0x3]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1077+0x20
	ldr	r0, .L1077+0x24
	str	r0, [r1]
	ldr	r2, .L1077+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L986	@ far jump
.L1078:
	.align	2, 0
.L1077:
	.word	gBattleMoveFlags
	.word	gBattleMons
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	gBattleMoves
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ApplySecondaryEffect
	.word	gHitMarker
.L815:
	ldr	r0, .L1079
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8781
	bl	.L692	@far jump
.LCB8781:
	ldr	r1, .L1079+0x4
	ldr	r0, .L1079+0x8
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB8792
	bl	.L692	@far jump
.LCB8792:
	ldr	r0, .L1079+0xc
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB8800
	bl	.L692	@far jump
.LCB8800:
	ldr	r1, .L1079+0x10
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8812
	bl	.L692	@far jump
.LCB8812:
	ldr	r2, .L1079+0x14
	ldr	r0, .L1079+0x18
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L817	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB8830
	bl	.L692	@far jump
.LCB8830:
.L817:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB8843
	bl	.L692	@far jump
.LCB8843:
	ldr	r1, .L1079+0x1c
	mov	r0, #0x43
	strb	r0, [r1, #0x3]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1079+0x20
	ldr	r0, .L1079+0x24
	str	r0, [r1]
	ldr	r2, .L1079+0x28
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L986	@ far jump
.L1080:
	.align	2, 0
.L1079:
	.word	gBattleMoveFlags
	.word	gBattleMons
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ApplySecondaryEffect
	.word	gHitMarker
.L818:
	ldr	r0, .L1081
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8884
	bl	.L692	@far jump
.LCB8884:
	ldr	r5, .L1081+0x4
	ldr	r7, .L1081+0x8
	ldrb	r1, [r7]
	mov	r6, #0x58
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r5
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB8895
	bl	.L692	@far jump
.LCB8895:
	ldr	r0, .L1081+0xc
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.LCB8903
	bl	.L692	@far jump
.LCB8903:
	ldr	r1, .L1081+0x10
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB8915
	bl	.L692	@far jump
.LCB8915:
	ldr	r3, .L1081+0x14
	ldr	r0, .L1081+0x18
	mov	r8, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L820	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xc
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB8934
	bl	.L692	@far jump
.LCB8934:
.L820:
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r5
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB8942
	bl	.L692	@far jump
.LCB8942:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB8954
	bl	.L692	@far jump
.LCB8954:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.LCB8963
	bl	.L692	@far jump
.LCB8963:
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x10]
	bl	GetGenderFromSpeciesAndPersonality
	add	r4, r0, #0
	ldr	r0, [sp, #0xc]
	ldr	r1, [sp, #0x14]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.LCB8977
	bl	.L692	@far jump
.LCB8977:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r4, r5, #0
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8988
	bl	.L692	@far jump
.LCB8988:
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x10]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB8996
	bl	.L692	@far jump
.LCB8996:
	ldr	r0, [sp, #0xc]
	ldr	r1, [sp, #0x14]
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB9004
	bl	.L692	@far jump
.LCB9004:
	ldrb	r0, [r7]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r4
	ldr	r1, .L1081+0x1c
	mov	r3, r8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1081+0x20
	ldr	r0, .L1081+0x24
	str	r0, [r1]
	bl	.L986	@ far jump
.L1082:
	.align	2, 0
.L1081:
	.word	gBattleMoveFlags
	.word	gBattleMons
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_CuteCharmActivates
.L823:
	mov	r5, #0x0
	mov	sl, r5
	ldr	r0, .L1083
	ldrb	r0, [r0]
	cmp	sl, r0
	bcc	.LCB9050
	bl	.L692	@far jump
.LCB9050:
.L827:
	ldr	r1, .L1083+0x4
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	sub	r0, r0, #0x7
	add	r2, r1, #0
	cmp	r0, #0x41
	bls	.LCB9064
	b	.L828	@long jump
.LCB9064:
	lsl	r0, r0, #0x2
	ldr	r1, .L1083+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1084:
	.align	2, 0
.L1083:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	.L844
	.align	2, 0
	.align	2, 0
.L844:
	.word	.L833
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L842
	.word	.L828
	.word	.L828
	.word	.L836
	.word	.L828
	.word	.L829
	.word	.L828
	.word	.L828
	.word	.L831
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L840
	.word	.L838
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L828
	.word	.L836
.L829:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1085
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9096
	b	.L828	@long jump
.LCB9096:
	ldr	r0, .L1085+0x4
	ldr	r1, .L1085+0x8
	b	.L993
.L1086:
	.align	2, 0
.L1085:
	.word	0xf88
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
.L831:
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9124
	b	.L828	@long jump
.LCB9124:
	ldr	r0, .L1087
	ldr	r1, .L1087+0x4
	bl	StringCopy
	mov	r2, #0x2
	mov	r9, r2
	b	.L976
.L1088:
	.align	2, 0
.L1087:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_ConfusionJpn
.L833:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L828	@cond_branch
	ldr	r0, .L1089
	ldr	r1, .L1089+0x4
	b	.L993
.L1090:
	.align	2, 0
.L1089:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_ParalysisJpn
.L836:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L828	@cond_branch
	add	r2, r2, #0x50
	add	r2, r3, r2
	ldr	r0, [r2]
	ldr	r1, .L1091
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1091+0x4
	ldr	r1, .L1091+0x8
	bl	StringCopy
	mov	r0, #0x1
	mov	r9, r0
	b	.L976
.L1092:
	.align	2, 0
.L1091:
	.word	0xf7ffffff
	.word	gBattleTextBuff1
	.word	gStatusConditionString_SleepJpn
.L838:
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L828	@cond_branch
	ldr	r0, .L1093
	ldr	r1, .L1093+0x4
	bl	StringCopy
	mov	r2, #0x1
	mov	r9, r2
	b	.L976
.L1094:
	.align	2, 0
.L1093:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_BurnJpn
.L840:
	mov	r0, #0x58
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r1, r2, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L828	@cond_branch
	ldr	r0, .L1095
	ldr	r1, .L1095+0x4
.L993:
	bl	StringCopy
	mov	r5, #0x1
	mov	r9, r5
	b	.L976
.L1096:
	.align	2, 0
.L1095:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_IceJpn
.L842:
	mov	r0, #0x58
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L828	@cond_branch
	ldr	r0, .L1097
	ldr	r1, .L1097+0x4
	bl	StringCopy
	mov	r2, #0x3
	mov	r9, r2
.L828:
	mov	r3, r9
	cmp	r3, #0
	beq	.L826	@cond_branch
.L976:
	mov	r5, r9
	cmp	r5, #0x2
	beq	.L849	@cond_branch
	cmp	r5, #0x2
	bgt	.L853	@cond_branch
	cmp	r5, #0x1
	beq	.L848	@cond_branch
	b	.L847
.L1098:
	.align	2, 0
.L1097:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
.L853:
	mov	r0, r9
	cmp	r0, #0x3
	beq	.L850	@cond_branch
	b	.L847
.L848:
	ldr	r1, .L1099
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r1, r1, #0x4c
	add	r2, r2, r1
	mov	r0, #0x0
	b	.L994
.L1100:
	.align	2, 0
.L1099:
	.word	gBattleMons
.L849:
	ldr	r1, .L1101
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x8
	neg	r1, r1
	b	.L995
.L1102:
	.align	2, 0
.L1101:
	.word	gBattleMons
.L850:
	ldr	r1, .L1103
	mov	r0, #0x58
	mov	r2, sl
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	ldr	r1, .L1103+0x4
.L995:
	and	r0, r0, r1
.L994:
	str	r0, [r2]
.L847:
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1103+0x8
	ldr	r0, .L1103+0xc
	str	r0, [r1]
	ldr	r0, .L1103+0x10
	ldr	r1, .L1103+0x14
	add	r0, r0, r1
	mov	r2, sl
	strb	r2, [r0]
	ldr	r4, .L1103+0x18
	strb	r2, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L1103+0x1c
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	bl	.L685	@ far jump
.L1104:
	.align	2, 0
.L1103:
	.word	gBattleMons
	.word	0xfff0ffff
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D9956
	.word	gSharedMem
	.word	0x16003
	.word	gActiveBank
	.word	gBattleMons+0x4c
.L826:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L1105
	ldrb	r0, [r0]
	cmp	sl, r0
	bcs	.LCB9418
	b	.L827	@long jump
.LCB9418:
	bl	.L692	@ far jump
.L1106:
	.align	2, 0
.L1105:
	.word	gNoOfAllBanks
.L855:
	mov	r3, #0x0
	mov	sl, r3
	ldr	r0, .L1107
	ldrb	r0, [r0]
	cmp	sl, r0
	bcc	.LCB9438
	b	.L692	@long jump
.LCB9438:
	ldr	r4, .L1107+0x4
.L859:
	mov	r0, #0x58
	mov	r5, sl
	mul	r5, r5, r0
	add	r0, r5, #0
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bne	.L858	@cond_branch
	mov	r0, sl
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r0, #0
	beq	.LCB9461
	b	.L979	@long jump
.LCB9461:
.L858:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L1107
	ldrb	r0, [r0]
	cmp	sl, r0
	bcc	.L859	@cond_branch
	b	.L692
.L1108:
	.align	2, 0
.L1107:
	.word	gNoOfAllBanks
	.word	gBattleMons
.L863:
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0x1c
	beq	.LCB9494
	b	.L692	@long jump
.LCB9494:
	ldr	r4, .L1109
	ldr	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9501
	b	.L692	@long jump
.LCB9501:
	ldr	r0, .L1109+0x4
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r3, .L1109+0x8
	add	r2, r7, r3
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	cmp	r0, #0x6
	bne	.L865	@cond_branch
	mov	r0, #0x2
	strb	r0, [r2]
.L865:
	ldr	r1, .L1109+0xc
	ldrb	r0, [r2]
	add	r0, r0, #0x40
	strb	r0, [r1, #0x3]
	ldr	r0, .L1109+0x10
	ldrb	r1, [r0]
	ldr	r5, .L1109+0x14
	add	r0, r7, r5
	strb	r1, [r0]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1109+0x18
	ldr	r0, .L1109+0x1c
	str	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r4]
	b	.L986
.L1110:
	.align	2, 0
.L1109:
	.word	gHitMarker
	.word	0xffffbfff
	.word	0x160ca
	.word	gBattleCommunication
	.word	gBankTarget
	.word	0x16003
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SynchronizeActivates
.L866:
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0x1c
	beq	.LCB9563
	b	.L692	@long jump
.LCB9563:
	ldr	r4, .L1111
	ldr	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9570
	b	.L692	@long jump
.LCB9570:
	ldr	r0, .L1111+0x4
	and	r1, r1, r0
	str	r1, [r4]
	ldr	r3, .L1111+0x8
	add	r2, r7, r3
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	cmp	r0, #0x6
	bne	.L868	@cond_branch
	mov	r0, #0x2
	strb	r0, [r2]
.L868:
	ldr	r1, .L1111+0xc
	ldrb	r0, [r2]
	strb	r0, [r1, #0x3]
	ldr	r0, .L1111+0x10
	ldrb	r1, [r0]
	ldr	r5, .L1111+0x14
	add	r0, r7, r5
	strb	r1, [r0]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1111+0x18
	ldr	r0, .L1111+0x1c
	str	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	orr	r0, r0, r1
	str	r0, [r4]
	b	.L986
.L1112:
	.align	2, 0
.L1111:
	.word	gHitMarker
	.word	0xffffbfff
	.word	0x160ca
	.word	gBattleCommunication
	.word	gBankAttacker
	.word	0x16003
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SynchronizeActivates
.L869:
	mov	r4, #0x0
	ldr	r0, .L1113
	ldrb	r1, [r0]
	cmp	r4, r1
	blt	.LCB9630
	b	.L692	@long jump
.LCB9630:
	ldr	r0, .L1113+0x4
	add	r5, r1, #0
	ldr	r2, .L1113+0x8
	add	r3, r0, #0
	add	r3, r3, #0x20
	mov	r6, #0x80
	lsl	r6, r6, #0xc
.L873:
	ldrb	r1, [r3]
	cmp	r1, #0x16
	bne	.L872	@cond_branch
	ldr	r0, [r2]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.LCB9654
	b	.L980	@long jump
.LCB9654:
.L872:
	add	r2, r2, #0x4
	add	r3, r3, #0x58
	add	r4, r4, #0x1
	cmp	r4, r5
	blt	.L873	@cond_branch
	b	.L692
.L1114:
	.align	2, 0
.L1113:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gStatuses3
.L876:
	mov	r4, #0x0
	ldr	r0, .L1115
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB9680
	b	.L692	@long jump
.LCB9680:
	ldr	r0, .L1115+0x4
	mov	r8, r0
	ldr	r1, .L1115+0x8
	add	r1, r1, #0x20
	str	r1, [sp, #0x1c]
	mov	r2, #0x0
	str	r2, [sp, #0x20]
.L880:
	ldr	r3, [sp, #0x1c]
	ldrb	r0, [r3]
	cmp	r0, #0x24
	beq	.LCB9699
	b	.L879	@long jump
.LCB9699:
	ldr	r0, .L1115+0xc
	ldr	r5, [sp, #0x20]
	add	r0, r5, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	and	r1, r1, r0
	str	r5, [sp, #0x18]
	cmp	r1, #0
	bne	.LCB9710
	b	.L879	@long jump
.LCB9710:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankIdentity
	mov	r1, #0x1
	add	r5, r0, #0
	eor	r5, r5, r1
	and	r5, r5, r1
	add	r0, r5, #0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r5, #0x2
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1115+0x10
	ldrh	r1, [r0]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9744
	b	.L882	@long jump
.LCB9744:
	mov	r1, #0x58
	mov	r0, r6
	mul	r0, r0, r1
	ldr	r3, .L1115+0x8
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L885	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L883	@cond_branch
	mov	r1, #0x58
	mov	r0, r7
	mul	r0, r0, r1
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L883	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L883	@cond_branch
	str	r2, [sp, #0x24]
	bl	Random
	ldr	r2, [sp, #0x24]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	orr	r5, r5, r1
	add	r0, r5, #0
	bl	GetBankByPlayerAI
	mov	r2, r8
	strb	r0, [r2]
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	ldr	r5, .L1115+0x8
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	ldr	r1, [sp, #0x1c]
	strb	r0, [r1]
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	ldr	r2, .L1115+0x14
	strb	r0, [r2]
	b	.L996
.L1116:
	.align	2, 0
.L1115:
	.word	gNoOfAllBanks
	.word	gActiveBank
	.word	gBattleMons
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	gLastUsedAbility
.L883:
	ldr	r3, .L1117
	mov	r2, #0x58
	mov	r0, r6
	mul	r0, r0, r2
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L885	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L885	@cond_branch
	mov	r5, r8
	strb	r6, [r5]
	mov	r1, r4
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	b	.L997
.L1118:
	.align	2, 0
.L1117:
	.word	gBattleMons
.L885:
	ldr	r3, .L1119
	mov	r2, #0x58
	mov	r0, r7
	mul	r0, r0, r2
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L888	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L888	@cond_branch
	mov	r5, r8
	strb	r7, [r5]
	mov	r1, r4
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	b	.L997
.L1120:
	.align	2, 0
.L1119:
	.word	gBattleMons
.L882:
	mov	r2, r8
	strb	r6, [r2]
	mov	r3, #0x58
	mov	r0, r6
	mul	r0, r0, r3
	ldr	r5, .L1121
	add	r0, r0, r5
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r1, [r2]
	cmp	r1, #0
	beq	.L888	@cond_branch
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L888	@cond_branch
	ldr	r0, [sp, #0x1c]
	strb	r1, [r0]
	ldrb	r0, [r2]
.L997:
	ldr	r1, .L1121+0x4
	strb	r0, [r1]
.L996:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L888:
	mov	r2, r9
	cmp	r2, #0
	beq	.LCB9944
	b	.L981	@long jump
.LCB9944:
.L879:
	ldr	r3, [sp, #0x1c]
	add	r3, r3, #0x58
	str	r3, [sp, #0x1c]
	ldr	r5, [sp, #0x20]
	add	r5, r5, #0x4
	str	r5, [sp, #0x20]
	add	r4, r4, #0x1
	ldr	r0, .L1121+0x8
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.LCB9960
	b	.L880	@long jump
.LCB9960:
	b	.L692
.L1122:
	.align	2, 0
.L1121:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gNoOfAllBanks
.L892:
	mov	r4, #0x0
	ldr	r0, .L1123
	ldrb	r1, [r0]
	cmp	r4, r1
	blt	.LCB9978
	b	.L692	@long jump
.LCB9978:
	ldr	r0, .L1123+0x4
	add	r5, r1, #0
	ldr	r2, .L1123+0x8
	add	r3, r0, #0
	add	r3, r3, #0x20
	mov	r6, #0x80
	lsl	r6, r6, #0xc
.L896:
	ldrb	r1, [r3]
	cmp	r1, #0x16
	bne	.L895	@cond_branch
	ldr	r0, [r2]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.LCB10002
	b	.L982	@long jump
.LCB10002:
.L895:
	add	r2, r2, #0x4
	add	r3, r3, #0x58
	add	r4, r4, #0x1
	cmp	r4, r5
	blt	.L896	@cond_branch
	b	.L692
.L1124:
	.align	2, 0
.L1123:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gStatuses3
.L899:
	mov	r0, sl
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L1125
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB10033
	b	.L692	@long jump
.LCB10033:
	ldr	r7, .L1125+0x4
.L903:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r4, #0x1
	cmp	r0, r5
	beq	.L902	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r6
	bne	.L902	@cond_branch
	ldr	r0, .L1125+0x8
	strb	r6, [r0]
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L902:
	add	r4, r3, #0
	ldr	r0, .L1125
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L903	@cond_branch
	b	.L692
.L1126:
	.align	2, 0
.L1125:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gLastUsedAbility
.L906:
	mov	r0, sl
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L1127
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB10097
	b	.L692	@long jump
.LCB10097:
	ldr	r7, .L1127+0x4
.L910:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r4, #0x1
	cmp	r0, r5
	bne	.L909	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r6
	bne	.L909	@cond_branch
	ldr	r0, .L1127+0x8
	strb	r6, [r0]
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L909:
	add	r4, r3, #0
	ldr	r0, .L1127
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L910	@cond_branch
	b	.L692
.L1128:
	.align	2, 0
.L1127:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gLastUsedAbility
.L913:
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0xfd
	beq	.L915	@cond_branch
	cmp	r0, #0xfe
	beq	.L922	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L1129
	add	r5, r0, #0
	ldrb	r2, [r5]
	cmp	r4, r2
	blt	.LCB10165
	b	.L692	@long jump
.LCB10165:
	ldr	r2, .L1129+0x4
	b	.L933
.L1130:
	.align	2, 0
.L1129:
	.word	gNoOfAllBanks
	.word	gBattleMons
.L915:
	mov	r4, #0x0
	ldr	r0, .L1131
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB10184
	b	.L692	@long jump
.LCB10184:
	ldr	r5, .L1131+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	add	r1, r0, #0
.L919:
	lsl	r0, r4, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r0, r0, r2
	add	r3, r4, #0x1
	cmp	r0, #0
	beq	.L918	@cond_branch
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L918:
	add	r4, r3, #0
	cmp	r4, r1
	blt	.L919	@cond_branch
	b	.L692
.L1132:
	.align	2, 0
.L1131:
	.word	gNoOfAllBanks
	.word	gStatuses3
.L922:
	mov	r4, #0x0
	ldr	r0, .L1133
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB10227
	b	.L692	@long jump
.LCB10227:
	ldr	r5, .L1133+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0xa
	add	r1, r0, #0
.L926:
	lsl	r0, r4, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	and	r0, r0, r2
	add	r3, r4, #0x1
	cmp	r0, #0
	beq	.L925	@cond_branch
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L925:
	add	r4, r3, #0
	cmp	r4, r1
	blt	.L926	@cond_branch
	b	.L692
.L1134:
	.align	2, 0
.L1133:
	.word	gNoOfAllBanks
	.word	gStatuses3
.L933:
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r3, r4, #0x1
	cmp	r0, r6
	bne	.L932	@cond_branch
	mov	r0, r8
	strb	r6, [r0]
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L932:
	add	r4, r3, #0
	ldrb	r1, [r5]
	cmp	r4, r1
	blt	.L933	@cond_branch
	b	.L692
.L937:
	mov	r4, #0x0
	ldr	r0, .L1135
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB10305
	b	.L692	@long jump
.LCB10305:
	ldr	r7, .L1135+0x4
	add	r2, r0, #0
	mov	r5, #0x58
.L941:
	mov	r0, r4
	mul	r0, r0, r5
	add	r1, r0, r7
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r3, r4, #0x1
	cmp	r0, r6
	bne	.L940	@cond_branch
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	beq	.L940	@cond_branch
	mov	r0, r8
	strb	r6, [r0]
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L940:
	add	r4, r3, #0
	cmp	r4, r2
	blt	.L941	@cond_branch
	b	.L692
.L1136:
	.align	2, 0
.L1135:
	.word	gNoOfAllBanks
	.word	gBattleMons
.L944:
	mov	r4, #0x0
	ldr	r0, .L1137
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB10360
	b	.L692	@long jump
.LCB10360:
	ldr	r7, .L1137+0x4
	add	r1, r0, #0
	mov	r5, #0x58
	ldr	r2, .L1137+0x8
.L948:
	mov	r0, r4
	mul	r0, r0, r5
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r3, r4, #0x1
	cmp	r0, r6
	bne	.L947	@cond_branch
	cmp	r4, sl
	beq	.L947	@cond_branch
	strb	r6, [r2]
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L947:
	add	r4, r3, #0
	cmp	r4, r1
	blt	.L948	@cond_branch
	b	.L692
.L1138:
	.align	2, 0
.L1137:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gLastUsedAbility
.L951:
	mov	r0, sl
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L1139
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB10416
	b	.L692	@long jump
.LCB10416:
	ldr	r7, .L1139+0x4
.L955:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	beq	.L954	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r6
	bne	.L954	@cond_branch
	ldr	r0, .L1139+0x8
	strb	r6, [r0]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L954:
	add	r4, r4, #0x1
	ldr	r0, .L1139
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L955	@cond_branch
	b	.L692
.L1140:
	.align	2, 0
.L1139:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gLastUsedAbility
.L958:
	mov	r0, sl
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L1141
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.LCB10478
	b	.L692	@long jump
.LCB10478:
	ldr	r7, .L1141+0x4
.L962:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	bne	.L961	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r6
	bne	.L961	@cond_branch
	ldr	r0, .L1141+0x8
	strb	r6, [r0]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L961:
	add	r4, r4, #0x1
	ldr	r0, .L1141
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L962	@cond_branch
	b	.L692
.L1142:
	.align	2, 0
.L1141:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gLastUsedAbility
.L978:
	ldr	r0, .L1143
	bl	b_push_move_exec
	ldr	r0, .L1143+0x4
	ldr	r2, .L1143+0x8
	add	r1, r0, r2
	strb	r6, [r1]
	mov	r1, r9
	sub	r1, r1, #0x1
	ldr	r3, .L1143+0xc
	add	r0, r0, r3
	strb	r1, [r0]
	b	.L692
.L1144:
	.align	2, 0
.L1143:
	.word	BattleScript_CastformChange
	.word	gSharedMem
	.word	0x16003
	.word	0x1609b
.L979:
	ldr	r0, .L1145
	bl	b_push_move_exec
	ldr	r0, .L1145+0x4
	ldr	r5, .L1145+0x8
	add	r1, r0, r5
	mov	r2, sl
	strb	r2, [r1]
	mov	r1, r9
	sub	r1, r1, #0x1
	ldr	r3, .L1145+0xc
	add	r0, r0, r3
	strb	r1, [r0]
	b	.L685
.L1146:
	.align	2, 0
.L1145:
	.word	BattleScript_CastformChange
	.word	gSharedMem
	.word	0x16003
	.word	0x1609b
.L980:
	mov	r5, r8
	strb	r1, [r5]
	ldr	r0, [r2]
	ldr	r1, .L1147
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1147+0x4
	bl	b_push_move_exec
	b	.L998
.L1148:
	.align	2, 0
.L1147:
	.word	0xfff7ffff
	.word	gUnknown_081D978C
.L981:
	ldr	r0, .L1149
	bl	b_push_move_exec
	ldr	r1, .L1149+0x4
	ldr	r2, [sp, #0x18]
	add	r1, r2, r1
	ldr	r0, [r1]
	ldr	r2, .L1149+0x8
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L1149+0xc
	ldr	r3, .L1149+0x10
	add	r0, r0, r3
	strb	r4, [r0]
	ldr	r1, .L1149+0x14
	mov	r4, #0xfd
	strb	r4, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r2, .L1149+0x18
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r3, .L1149+0x1c
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1149+0x20
	strb	r4, [r1]
	mov	r0, #0x9
	strb	r0, [r1, #0x1]
	ldr	r0, .L1149+0x24
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x3]
	b	.L692
.L1150:
	.align	2, 0
.L1149:
	.word	BattleScript_TraceActivates
	.word	gStatuses3
	.word	0xffefffff
	.word	gSharedMem
	.word	0x16003
	.word	gBattleTextBuff1
	.word	gActiveBank
	.word	gBattlePartyID
	.word	gBattleTextBuff2
	.word	gLastUsedAbility
.L982:
	mov	r5, r8
	strb	r1, [r5]
	ldr	r0, [r2]
	ldr	r1, .L1151
	and	r0, r0, r1
	str	r0, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1151+0x4
	ldr	r0, .L1151+0x8
	str	r0, [r1]
.L998:
	ldr	r0, .L1151+0xc
	ldr	r1, .L1151+0x10
	add	r0, r0, r1
	strb	r4, [r0]
.L986:
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	b	.L692
.L1152:
	.align	2, 0
.L1151:
	.word	0xfff7ffff
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D9795
	.word	gSharedMem
	.word	0x160dd
.L965:
	mov	r4, #0x0
	ldr	r0, .L1153
	ldrb	r1, [r0]
	cmp	r4, r1
	bge	.L692	@cond_branch
	ldr	r0, .L1153+0x4
	add	r2, r1, #0
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldr	r3, .L1153+0x8
.L969:
	ldrb	r0, [r1]
	cmp	r0, r6
	bne	.L968	@cond_branch
	cmp	r4, sl
	beq	.L968	@cond_branch
	strb	r6, [r3]
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L968:
	add	r1, r1, #0x58
	add	r4, r4, #0x1
	cmp	r4, r2
	blt	.L969	@cond_branch
.L692:
	mov	r2, r9
	cmp	r2, #0
	beq	.L685	@cond_branch
.L975:
	ldr	r3, [sp, #0x4]
	cmp	r3, #0xb
	bhi	.L685	@cond_branch
	ldr	r1, .L1153+0x8
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L685	@cond_branch
	add	r1, r0, #0
	mov	r0, sl
	bl	RecordAbilityBattle
.L685:
	mov	r0, r9
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1154:
	.align	2, 0
.L1153:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gLastUsedAbility
.Lfe16:
	.size	 AbilityBattleEffects,.Lfe16-AbilityBattleEffects
	.align	2, 0
	.globl	b_call_bc_move_exec
	.type	 b_call_bc_move_exec,function
	.thumb_func
b_call_bc_move_exec:
	ldr	r1, .L1156
	str	r0, [r1]
	ldr	r3, .L1156+0x4
	add	r2, r3, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	add	r1, r0, #0x1
	strb	r1, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r3
	ldr	r2, .L1156+0x8
	ldr	r1, [r2]
	str	r1, [r0]
	ldr	r0, .L1156+0xc
	str	r0, [r2]
	ldr	r1, .L1156+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L1157:
	.align	2, 0
.L1156:
	.word	gBattlescriptCurrInstr
	.word	gSharedMem+0x17140
	.word	gBattleMainFunc
	.word	sub_8013F54
	.word	gFightStateTracker
.Lfe17:
	.size	 b_call_bc_move_exec,.Lfe17-b_call_bc_move_exec
	.align	2, 0
	.globl	b_push_move_exec
	.type	 b_push_move_exec,function
	.thumb_func
b_push_move_exec:
	push	{r4, lr}
	add	r4, r0, #0
	bl	b_movescr_stack_push_cursor
	ldr	r0, .L1159
	str	r4, [r0]
	ldr	r3, .L1159+0x4
	add	r2, r3, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	add	r1, r0, #0x1
	strb	r1, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r3
	ldr	r2, .L1159+0x8
	ldr	r1, [r2]
	str	r1, [r0]
	ldr	r0, .L1159+0xc
	str	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1160:
	.align	2, 0
.L1159:
	.word	gBattlescriptCurrInstr
	.word	gSharedMem+0x17140
	.word	gBattleMainFunc
	.word	sub_8013FBC
.Lfe18:
	.size	 b_push_move_exec,.Lfe18-b_push_move_exec
	.align	2, 0
	.globl	ItemBattleEffects
	.type	 ItemBattleEffects,function
	.thumb_func
ItemBattleEffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffd4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x0
	str	r1, [sp, #0xc]
	add	r0, sp, #0x4
	strb	r1, [r0]
	ldr	r4, .L1377
	ldr	r1, .L1377+0x4
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1162	@cond_branch
	ldr	r1, .L1377+0x8
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x7]
	ldrb	r0, [r0, #0x1a]
	b	.L1363
.L1378:
	.align	2, 0
.L1377:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gEnigmaBerries
.L1162:
	ldrh	r0, [r4]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r4]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1363:
	mov	r9, r0
	ldr	r1, .L1379
	ldr	r0, .L1379+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	str	r0, [sp, #0x14]
	cmp	r0, #0xaf
	bne	.L1164	@cond_branch
	ldr	r1, .L1379+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x7]
	mov	r8, r3
	ldrb	r0, [r0, #0x1a]
	b	.L1364
.L1380:
	.align	2, 0
.L1379:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gEnigmaBerries
.L1164:
	ldr	r0, [sp, #0x14]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, [sp, #0x14]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1364:
	str	r0, [sp, #0x10]
	ldr	r2, .L1381
	ldr	r0, .L1381+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r4, [r0, #0x2e]
	cmp	r4, #0xaf
	beq	.L1167	@cond_branch
	add	r0, r4, #0
	bl	ItemId_GetHoldEffect
	add	r0, r4, #0
	bl	ItemId_GetHoldEffectParam
.L1167:
	ldr	r4, [sp, #0x8]
	cmp	r4, #0x4
	bls	.LCB10995
	bl	.L1168	@far jump
.LCB10995:
	lsl	r0, r4, #0x2
	ldr	r1, .L1381+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1382:
	.align	2, 0
.L1381:
	.word	gBattleMons
	.word	gBankTarget
	.word	.L1358
	.align	2, 0
	.align	2, 0
.L1358:
	.word	.L1169
	.word	.L1182
	.word	.L1168
	.word	.L1304
	.word	.L1347
.L1169:
	cmp	r5, #0x17
	beq	.L1172	@cond_branch
	cmp	r5, #0x20
	beq	.LCB11020
	bl	.L1168	@far jump
.LCB11020:
	ldr	r0, .L1383
	ldr	r5, .L1383+0x4
	add	r0, r0, r5
	mov	r1, #0x2
	strb	r1, [r0]
	bl	.L1168	@ far jump
.L1384:
	.align	2, 0
.L1383:
	.word	gSharedMem
	.word	0x16056
.L1172:
	ldr	r0, .L1385
	mov	r8, r0
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r3, #0x7
	mov	sl, r3
.L1176:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L1175	@cond_branch
	strb	r2, [r1]
	mov	r4, #0x5
	str	r4, [sp, #0xc]
.L1175:
	add	r1, r1, #0x1
	mov	r5, #0x1
	neg	r5, r5
	add	sl, sl, r5
	mov	r0, sl
	cmp	r0, #0
	bge	.L1176	@cond_branch
	ldr	r1, [sp, #0xc]
	cmp	r1, #0
	bne	.LCB11079
	bl	.L1168	@far jump
.LCB11079:
	ldr	r0, .L1385+0x4
	ldr	r2, .L1385+0x8
	add	r0, r0, r2
	strb	r7, [r0]
	ldr	r0, .L1385+0xc
	strb	r7, [r0]
	ldr	r1, .L1385+0x10
	ldr	r0, .L1385+0x14
	strb	r7, [r0]
	strb	r7, [r1]
	ldr	r0, .L1385+0x18
	bl	b_call_bc_move_exec
	bl	.L1168	@ far jump
.L1386:
	.align	2, 0
.L1385:
	.word	gBattleMons
	.word	gSharedMem
	.word	0x16003
	.word	gStringBank
	.word	gActiveBank
	.word	gBankAttacker
	.word	BattleScript_WhiteHerbEnd2
.L1182:
	ldr	r1, .L1387
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	mov	r8, r1
	cmp	r0, #0
	bne	.LCB11119
	bl	.L1168	@far jump
.LCB11119:
	sub	r0, r5, #0x1
	cmp	r0, #0x2a
	bls	.LCB11123
	bl	.L1184	@far jump
.LCB11123:
	lsl	r0, r0, #0x2
	ldr	r1, .L1387+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1388:
	.align	2, 0
.L1387:
	.word	gBattleMons
	.word	.L1294
	.align	2, 0
	.align	2, 0
.L1294:
	.word	.L1185
	.word	.L1269
	.word	.L1277
	.word	.L1271
	.word	.L1273
	.word	.L1275
	.word	.L1188
	.word	.L1279
	.word	.L1281
	.word	.L1213
	.word	.L1219
	.word	.L1225
	.word	.L1231
	.word	.L1237
	.word	.L1243
	.word	.L1245
	.word	.L1247
	.word	.L1249
	.word	.L1251
	.word	.L1253
	.word	.L1255
	.word	.L1184
	.word	.L1201
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1292
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1184
	.word	.L1209
.L1185:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r3, r8
	add	r2, r0, r3
	ldrh	r0, [r2, #0x2c]
	ldrh	r1, [r2, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB11156
	bl	.L1184	@far jump
.LCB11156:
	cmp	r6, #0
	beq	.LCB11158
	bl	.L1184	@far jump
.LCB11158:
	ldr	r4, .L1389
	mov	r5, r9
	str	r5, [r4]
	ldrh	r3, [r2, #0x28]
	add	r0, r3, r5
	ldrh	r1, [r2, #0x2c]
	cmp	r0, r1
	ble	.L1187	@cond_branch
	sub	r0, r1, r3
	str	r0, [r4]
.L1187:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	ldr	r0, .L1389+0x4
	bl	b_call_bc_move_exec
	b	.L1242
.L1390:
	.align	2, 0
.L1389:
	.word	gBattleMoveDamage
	.word	BattleScript_ItemHealHP_RemoveItem
.L1188:
	cmp	r6, #0
	beq	.LCB11188
	bl	.L1184	@far jump
.LCB11188:
	add	r0, r7, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1190	@cond_branch
	ldr	r1, .L1391
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1391+0x4
	b	.L1365
.L1392:
	.align	2, 0
.L1391:
	.word	gBattlePartyID
	.word	gPlayerParty
.L1190:
	ldr	r1, .L1393
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1393+0x4
.L1365:
	add	r4, r1, r0
	mov	r1, #0x0
	mov	sl, r1
	add	r5, sp, #0x4
.L1195:
	mov	r1, sl
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r1, sl
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	strb	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r6, #0
	beq	.L1194	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L1193	@cond_branch
.L1194:
	mov	r2, #0x1
	add	sl, sl, r2
	mov	r3, sl
	cmp	r3, #0x3
	ble	.L1195	@cond_branch
.L1193:
	mov	r4, sl
	cmp	r4, #0x4
	bne	.LCB11273
	bl	.L1184	@far jump
.LCB11273:
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	bl	CalculatePPWithBonus
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, sp, #0x4
	ldrb	r0, [r0]
	mov	r5, r9
	add	r1, r0, r5
	cmp	r1, r2
	ble	.L1199	@cond_branch
	add	r0, sp, #0x4
	strb	r2, [r0]
	b	.L1200
.L1394:
	.align	2, 0
.L1393:
	.word	gBattlePartyID
	.word	gEnemyParty
.L1199:
	add	r0, sp, #0x4
	strb	r1, [r0]
.L1200:
	ldr	r1, .L1395
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r6, [r1, #0x2]
	lsr	r0, r6, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r0, .L1395+0x4
	bl	b_call_bc_move_exec
	mov	r1, sl
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, sp, #0x4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	EmitSetAttributes
	ldr	r0, .L1395+0x8
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	mov	r1, #0x3
	str	r1, [sp, #0xc]
	bl	.L1360	@ far jump
.L1396:
	.align	2, 0
.L1395:
	.word	gBattleTextBuff1
	.word	BattleScript_BerryPPHealEnd2
	.word	gActiveBank
.L1201:
	ldr	r0, .L1397
	mov	r1, #0x58
	mul	r1, r1, r7
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r3, #0x7
	mov	sl, r3
.L1205:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L1204	@cond_branch
	strb	r2, [r1]
	mov	r4, #0x5
	str	r4, [sp, #0xc]
.L1204:
	add	r1, r1, #0x1
	mov	r5, #0x1
	neg	r5, r5
	add	sl, sl, r5
	mov	r0, sl
	cmp	r0, #0
	bge	.L1205	@cond_branch
	mov	r1, #0x8
	mov	sl, r1
	ldr	r2, [sp, #0xc]
	cmp	r2, #0
	bne	.LCB11393
	bl	.L1168	@far jump
.LCB11393:
	ldr	r0, .L1397+0x4
	ldr	r3, .L1397+0x8
	add	r0, r0, r3
	strb	r7, [r0]
	ldr	r0, .L1397+0xc
	strb	r7, [r0]
	ldr	r1, .L1397+0x10
	ldr	r0, .L1397+0x14
	strb	r7, [r0]
	strb	r7, [r1]
	ldr	r0, .L1397+0x18
	bl	b_call_bc_move_exec
	bl	.L1184	@ far jump
.L1398:
	.align	2, 0
.L1397:
	.word	gBattleMons
	.word	gSharedMem
	.word	0x16003
	.word	gStringBank
	.word	gActiveBank
	.word	gBankAttacker
	.word	BattleScript_WhiteHerbEnd2
.L1209:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r4, r8
	add	r1, r0, r4
	ldrh	r0, [r1, #0x28]
	ldrh	r2, [r1, #0x2c]
	cmp	r0, r2
	bcc	.LCB11437
	bl	.L1184	@far jump
.LCB11437:
	cmp	r6, #0
	beq	.LCB11439
	bl	.L1184	@far jump
.LCB11439:
	ldr	r3, .L1399
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r3]
	cmp	r0, #0
	bne	.L1211	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L1211:
	ldrh	r2, [r1, #0x28]
	ldr	r0, [r3]
	add	r0, r2, r0
	ldrh	r1, [r1, #0x2c]
	cmp	r0, r1
	ble	.L1212	@cond_branch
	sub	r0, r1, r2
	str	r0, [r3]
.L1212:
	ldr	r0, [r3]
	neg	r0, r0
	str	r0, [r3]
	ldr	r0, .L1399+0x4
	bl	b_call_bc_move_exec
	mov	r3, #0x4
	str	r3, [sp, #0xc]
	add	r0, r7, #0
	add	r1, r5, #0
	bl	RecordItemBattle
	bl	.L1184	@ far jump
.L1400:
	.align	2, 0
.L1399:
	.word	gBattleMoveDamage
	.word	BattleScript_ItemHealHP_End2
.L1213:
	mov	r0, #0x58
	mov	r4, r7
	mul	r4, r4, r0
	str	r4, [sp, #0x18]
	add	r4, r4, r8
	ldrh	r0, [r4, #0x2c]
	ldrh	r1, [r4, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB11495
	bl	.L1184	@far jump
.LCB11495:
	cmp	r6, #0
	beq	.LCB11497
	bl	.L1184	@far jump
.LCB11497:
	ldr	r1, .L1401
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	strb	r6, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r5, .L1401+0x4
	ldrh	r0, [r4, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L1215	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L1215:
	ldrh	r2, [r4, #0x28]
	ldr	r0, [r5]
	add	r0, r2, r0
	ldrh	r1, [r4, #0x2c]
	cmp	r0, r1
	ble	.L1216	@cond_branch
	sub	r0, r1, r2
	str	r0, [r5]
.L1216:
	ldr	r0, [r5]
	neg	r0, r0
	str	r0, [r5]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r5, [sp, #0x18]
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x0
.L1376:
	bl	GetPokeFlavourRelation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.LCB11547
	b	.L1371	@long jump
.LCB11547:
	b	.L1241
.L1402:
	.align	2, 0
.L1401:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
.L1219:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	str	r1, [sp, #0x1c]
	add	r5, r1, #0
	add	r5, r5, r8
	ldrh	r0, [r5, #0x2c]
	ldrh	r1, [r5, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB11574
	bl	.L1184	@far jump
.LCB11574:
	cmp	r6, #0
	beq	.LCB11576
	bl	.L1184	@far jump
.LCB11576:
	ldr	r1, .L1403
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	mov	r6, #0x1
	strb	r6, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L1403+0x4
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L1221	@cond_branch
	str	r6, [r4]
.L1221:
	ldrh	r2, [r5, #0x28]
	ldr	r0, [r4]
	add	r0, r2, r0
	ldrh	r1, [r5, #0x2c]
	cmp	r0, r1
	ble	.L1222	@cond_branch
	sub	r0, r1, r2
	str	r0, [r4]
.L1222:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r2, [sp, #0x1c]
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	GetPokeFlavourRelation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	blt	.L1373	@cond_branch
	b	.L1235
.L1404:
	.align	2, 0
.L1403:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
.L1225:
	mov	r0, #0x58
	mov	r4, r7
	mul	r4, r4, r0
	str	r4, [sp, #0x20]
	add	r5, r4, #0
	add	r5, r5, r8
	ldrh	r0, [r5, #0x2c]
	ldrh	r1, [r5, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB11652
	b	.L1184	@long jump
.LCB11652:
	cmp	r6, #0
	beq	.LCB11654
	b	.L1184	@long jump
.LCB11654:
	ldr	r1, .L1405
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L1405+0x4
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L1227	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L1227:
	ldrh	r2, [r5, #0x28]
	ldr	r0, [r4]
	add	r0, r2, r0
	ldrh	r1, [r5, #0x2c]
	cmp	r0, r1
	ble	.L1228	@cond_branch
	sub	r0, r1, r2
	str	r0, [r4]
.L1228:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r5, [sp, #0x20]
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x2
	b	.L1376
.L1406:
	.align	2, 0
.L1405:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
.L1231:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	str	r1, [sp, #0x24]
	add	r5, r1, #0
	add	r5, r5, r8
	ldrh	r0, [r5, #0x2c]
	ldrh	r1, [r5, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB11727
	b	.L1184	@long jump
.LCB11727:
	cmp	r6, #0
	beq	.LCB11729
	b	.L1184	@long jump
.LCB11729:
	ldr	r1, .L1407
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L1407+0x4
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L1233	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L1233:
	ldrh	r2, [r5, #0x28]
	ldr	r0, [r4]
	add	r0, r2, r0
	ldrh	r1, [r5, #0x2c]
	cmp	r0, r1
	ble	.L1234	@cond_branch
	sub	r0, r1, r2
	str	r0, [r4]
.L1234:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r2, [sp, #0x24]
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	GetPokeFlavourRelation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L1235	@cond_branch
.L1373:
	ldr	r0, .L1407+0x8
	bl	b_call_bc_move_exec
	b	.L1236
.L1408:
	.align	2, 0
.L1407:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
	.word	BattleScript_BerryConfuseHealEnd2
.L1235:
	ldr	r0, .L1409
	bl	b_call_bc_move_exec
.L1236:
	mov	r3, #0x4
	str	r3, [sp, #0xc]
	b	.L1360
.L1410:
	.align	2, 0
.L1409:
	.word	BattleScript_ItemHealHP_RemoveItem
.L1237:
	mov	r0, #0x58
	mov	r4, r7
	mul	r4, r4, r0
	str	r4, [sp, #0x28]
	add	r5, r4, #0
	add	r5, r5, r8
	ldrh	r0, [r5, #0x2c]
	ldrh	r1, [r5, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bls	.LCB11825
	b	.L1184	@long jump
.LCB11825:
	cmp	r6, #0
	beq	.LCB11827
	b	.L1184	@long jump
.LCB11827:
	ldr	r1, .L1411
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x8
	strb	r0, [r1, #0x1]
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r4, .L1411+0x4
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L1239	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L1239:
	ldrh	r2, [r5, #0x28]
	ldr	r0, [r4]
	add	r0, r2, r0
	ldrh	r1, [r5, #0x2c]
	cmp	r0, r1
	ble	.L1240	@cond_branch
	sub	r0, r1, r2
	str	r0, [r4]
.L1240:
	ldr	r0, [r4]
	neg	r0, r0
	str	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x48
	ldr	r5, [sp, #0x28]
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x4
	bl	GetPokeFlavourRelation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bge	.L1241	@cond_branch
.L1371:
	ldr	r0, .L1411+0x8
	bl	b_call_bc_move_exec
	b	.L1242
.L1412:
	.align	2, 0
.L1411:
	.word	gBattleTextBuff1
	.word	gBattleMoveDamage
	.word	BattleScript_BerryConfuseHealEnd2
.L1241:
	ldr	r0, .L1413
	bl	b_call_bc_move_exec
.L1242:
	mov	r0, #0x4
	str	r0, [sp, #0xc]
	b	.L1360
.L1414:
	.align	2, 0
.L1413:
	.word	BattleScript_ItemHealHP_RemoveItem
.L1243:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r1, r8
	add	r5, r0, r1
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB11921
	b	.L1184	@long jump
.LCB11921:
	cmp	r6, #0
	beq	.LCB11923
	b	.L1184	@long jump
.LCB11923:
	mov	r0, #0x19
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB11928
	b	.L1184	@long jump
.LCB11928:
	ldr	r1, .L1415
	mov	r2, #0xfd
	strb	r2, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L1415+0x4
	strb	r2, [r1]
	strb	r6, [r1, #0x1]
	mov	r0, #0xd2
	strb	r0, [r1, #0x2]
	strb	r6, [r1, #0x3]
	sub	r0, r0, #0xd3
	strb	r0, [r1, #0x4]
	ldr	r0, .L1415+0x8
	strb	r7, [r0]
	ldr	r1, .L1415+0xc
	ldr	r3, .L1415+0x10
	add	r2, r1, r3
	mov	r0, #0x11
	strb	r0, [r2]
	ldr	r4, .L1415+0x14
	add	r2, r1, r4
	mov	r0, #0xf
	b	.L1366
.L1416:
	.align	2, 0
.L1415:
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gEffectBank
	.word	gSharedMem
	.word	0x1601e
	.word	0x160a4
.L1245:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r1, r8
	add	r5, r0, r1
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB11991
	b	.L1184	@long jump
.LCB11991:
	cmp	r6, #0
	beq	.LCB11993
	b	.L1184	@long jump
.LCB11993:
	mov	r0, #0x1a
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB11998
	b	.L1184	@long jump
.LCB11998:
	ldr	r1, .L1417
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1417+0x4
	strb	r7, [r0]
	ldr	r1, .L1417+0x8
	ldr	r3, .L1417+0xc
	add	r2, r1, r3
	mov	r0, #0x12
	strb	r0, [r2]
	ldr	r4, .L1417+0x10
	add	r2, r1, r4
	mov	r0, #0x10
	b	.L1366
.L1418:
	.align	2, 0
.L1417:
	.word	gBattleTextBuff1
	.word	gEffectBank
	.word	gSharedMem
	.word	0x1601e
	.word	0x160a4
.L1247:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r1, r8
	add	r5, r0, r1
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB12051
	b	.L1184	@long jump
.LCB12051:
	cmp	r6, #0
	beq	.LCB12053
	b	.L1184	@long jump
.LCB12053:
	mov	r0, #0x1b
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB12058
	b	.L1184	@long jump
.LCB12058:
	ldr	r1, .L1419
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1419+0x4
	strb	r7, [r0]
	ldr	r1, .L1419+0x8
	ldr	r3, .L1419+0xc
	add	r2, r1, r3
	mov	r0, #0x13
	strb	r0, [r2]
	ldr	r4, .L1419+0x10
	add	r2, r1, r4
	mov	r0, #0x11
	b	.L1366
.L1420:
	.align	2, 0
.L1419:
	.word	gBattleTextBuff1
	.word	gEffectBank
	.word	gSharedMem
	.word	0x1601e
	.word	0x160a4
.L1249:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r1, r8
	add	r5, r0, r1
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB12111
	b	.L1184	@long jump
.LCB12111:
	cmp	r6, #0
	beq	.LCB12113
	b	.L1184	@long jump
.LCB12113:
	mov	r0, #0x1c
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB12118
	b	.L1184	@long jump
.LCB12118:
	ldr	r1, .L1421
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1421+0x4
	strb	r7, [r0]
	ldr	r1, .L1421+0x8
	ldr	r3, .L1421+0xc
	add	r2, r1, r3
	mov	r0, #0x14
	strb	r0, [r2]
	ldr	r4, .L1421+0x10
	add	r2, r1, r4
	mov	r0, #0x12
	b	.L1366
.L1422:
	.align	2, 0
.L1421:
	.word	gBattleTextBuff1
	.word	gEffectBank
	.word	gSharedMem
	.word	0x1601e
	.word	0x160a4
.L1251:
	mov	r0, #0x58
	mul	r0, r0, r7
	mov	r1, r8
	add	r5, r0, r1
	ldrh	r4, [r5, #0x28]
	ldrh	r0, [r5, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB12171
	b	.L1184	@long jump
.LCB12171:
	cmp	r6, #0
	beq	.LCB12173
	b	.L1184	@long jump
.LCB12173:
	mov	r0, #0x1d
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xb
	ble	.LCB12178
	b	.L1184	@long jump
.LCB12178:
	ldr	r1, .L1423
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1423+0x4
	strb	r7, [r0]
	ldr	r1, .L1423+0x8
	ldr	r3, .L1423+0xc
	add	r2, r1, r3
	mov	r0, #0x15
	strb	r0, [r2]
	ldr	r4, .L1423+0x10
	add	r2, r1, r4
	mov	r0, #0x13
.L1366:
	strb	r0, [r2]
	ldr	r5, .L1423+0x14
	add	r1, r1, r5
	strb	r6, [r1]
	ldr	r0, .L1423+0x18
	bl	b_call_bc_move_exec
	mov	r0, #0x5
	str	r0, [sp, #0xc]
	b	.L1360
.L1424:
	.align	2, 0
.L1423:
	.word	gBattleTextBuff1
	.word	gEffectBank
	.word	gSharedMem
	.word	0x1601e
	.word	0x160a4
	.word	0x160a5
	.word	BattleScript_BerryStatRaiseEnd2
.L1253:
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	mov	r1, r8
	add	r0, r5, r1
	ldrh	r4, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB12241
	b	.L1184	@long jump
.LCB12241:
	cmp	r6, #0
	beq	.LCB12243
	b	.L1184	@long jump
.LCB12243:
	mov	r0, r8
	add	r0, r0, #0x50
	add	r1, r5, r0
	ldr	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0xd
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.LCB12253
	b	.L1184	@long jump
.LCB12253:
	orr	r2, r2, r3
	str	r2, [r1]
	ldr	r0, .L1425
	bl	b_call_bc_move_exec
	mov	r2, #0x2
	str	r2, [sp, #0xc]
	b	.L1360
.L1426:
	.align	2, 0
.L1425:
	.word	BattleScript_BerryFocusEnergyEnd2
.L1255:
	cmp	r6, #0
	beq	.LCB12272
	b	.L1184	@long jump
.LCB12272:
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	mov	r3, r8
	add	r0, r5, r3
	ldrh	r4, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	mov	r1, r9
	bl	__divsi3
	cmp	r4, r0
	ble	.LCB12285
	b	.L1184	@long jump
.LCB12285:
	mov	r4, #0x0
	mov	sl, r4
	add	r0, r5, #0x1
	mov	r1, r8
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xb
	ble	.L1258	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x19
	add	r1, r5, r0
.L1259:
	add	r1, r1, #0x1
	mov	r5, #0x1
	add	sl, sl, r5
	mov	r0, sl
	cmp	r0, #0x4
	bgt	.L1258	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xb
	bgt	.L1259	@cond_branch
.L1258:
	mov	r1, sl
	cmp	r1, #0x5
	bne	.LCB12326
	b	.L1184	@long jump
.LCB12326:
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r4, r0, #0x1
	ldr	r5, .L1427
.L1264:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	add	r0, r0, r4
	add	r0, r0, r5
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	beq	.L1264	@cond_branch
	ldr	r1, .L1427+0x4
	mov	r3, #0x0
	mov	r2, #0xfd
	strb	r2, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	mov	r0, sl
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r0, .L1427+0x8
	strb	r2, [r0]
	strb	r3, [r0, #0x1]
	mov	r1, #0xd1
	strb	r1, [r0, #0x2]
	strb	r3, [r0, #0x3]
	strb	r3, [r0, #0x4]
	mov	r1, #0xd2
	strb	r1, [r0, #0x5]
	strb	r3, [r0, #0x6]
	sub	r1, r1, #0xd3
	strb	r1, [r0, #0x7]
	ldr	r0, .L1427+0xc
	strb	r7, [r0]
	ldr	r1, .L1427+0x10
	mov	r2, sl
	add	r2, r2, #0x21
	ldr	r4, .L1427+0x14
	add	r0, r1, r4
	strb	r2, [r0]
	add	r2, r2, #0x6
	ldr	r5, .L1427+0x18
	add	r0, r1, r5
	strb	r2, [r0]
	ldr	r0, .L1427+0x1c
	add	r1, r1, r0
	strb	r3, [r1]
	ldr	r0, .L1427+0x20
	bl	b_call_bc_move_exec
	mov	r1, #0x5
	str	r1, [sp, #0xc]
	b	.L1360
.L1428:
	.align	2, 0
.L1427:
	.word	gBattleMons+0x18
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gEffectBank
	.word	gSharedMem
	.word	0x1601e
	.word	0x160a4
	.word	0x160a5
	.word	BattleScript_BerryStatRaiseEnd2
.L1269:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB12433
	b	.L1184	@long jump
.LCB12433:
	mov	r0, #0x41
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1429
	bl	b_call_bc_move_exec
	mov	r2, #0x1
	str	r2, [sp, #0xc]
	b	.L1360
.L1430:
	.align	2, 0
.L1429:
	.word	BattleScript_BerryCurePrlzEnd2
.L1271:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x88
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB12463
	b	.L1184	@long jump
.LCB12463:
	ldr	r0, .L1431
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1431+0x4
	bl	b_call_bc_move_exec
	mov	r3, #0x1
	str	r3, [sp, #0xc]
	b	.L1360
.L1432:
	.align	2, 0
.L1431:
	.word	0xfffff077
	.word	BattleScript_BerryCurePsnEnd2
.L1273:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB12493
	b	.L1184	@long jump
.LCB12493:
	mov	r0, #0x11
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1433
	bl	b_call_bc_move_exec
	mov	r4, #0x1
	str	r4, [sp, #0xc]
	b	.L1360
.L1434:
	.align	2, 0
.L1433:
	.word	BattleScript_BerryCureBrnEnd2
.L1275:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB12523
	b	.L1184	@long jump
.LCB12523:
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1435
	b	.L1367
.L1436:
	.align	2, 0
.L1435:
	.word	BattleScript_BerryCureFrzEnd2
.L1277:
	mov	r0, #0x58
	mov	r3, r7
	mul	r3, r3, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r2, r3, r0
	ldr	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB12550
	b	.L1184	@long jump
.LCB12550:
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	mov	r1, r8
	add	r1, r1, #0x50
	add	r1, r3, r1
	ldr	r0, [r1]
	ldr	r2, .L1437
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L1437+0x4
	bl	b_call_bc_move_exec
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	b	.L1360
.L1438:
	.align	2, 0
.L1437:
	.word	0xf7ffffff
	.word	BattleScript_BerryCureSlpEnd2
.L1279:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0x7
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB12588
	b	.L1184	@long jump
.LCB12588:
	mov	r0, #0x8
	neg	r0, r0
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1439
	bl	b_call_bc_move_exec
	mov	r1, #0x2
	str	r1, [sp, #0xc]
	b	.L1360
.L1440:
	.align	2, 0
.L1439:
	.word	BattleScript_BerryCureConfusionEnd2
.L1281:
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r4, r5, r0
	ldr	r2, [r4]
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L1283	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x50
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB12627
	b	.L1184	@long jump
.LCB12627:
.L1283:
	mov	r3, #0x0
	mov	sl, r3
	mov	r0, #0x88
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1284	@cond_branch
	ldr	r0, .L1441
	ldr	r1, .L1441+0x4
	bl	StringCopy
	mov	r0, #0x1
	mov	sl, r0
.L1284:
	ldr	r0, [r4]
	mov	r1, #0x7
	mov	r9, r1
	and	r0, r0, r1
	mov	r6, r8
	add	r6, r6, #0x50
	cmp	r0, #0
	beq	.L1285	@cond_branch
	add	r2, r5, r6
	ldr	r0, [r2]
	ldr	r1, .L1441+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1441
	ldr	r1, .L1441+0xc
	bl	StringCopy
	mov	r2, #0x1
	add	sl, sl, r2
.L1285:
	ldr	r0, [r4]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1286	@cond_branch
	ldr	r0, .L1441
	ldr	r1, .L1441+0x10
	bl	StringCopy
	mov	r3, #0x1
	add	sl, sl, r3
.L1286:
	ldr	r0, [r4]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1287	@cond_branch
	ldr	r0, .L1441
	ldr	r1, .L1441+0x14
	bl	StringCopy
	mov	r0, #0x1
	add	sl, sl, r0
.L1287:
	ldr	r0, [r4]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1288	@cond_branch
	ldr	r0, .L1441
	ldr	r1, .L1441+0x18
	bl	StringCopy
	mov	r1, #0x1
	add	sl, sl, r1
.L1288:
	add	r0, r5, r6
	ldr	r0, [r0]
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1289	@cond_branch
	ldr	r0, .L1441
	ldr	r1, .L1441+0x1c
	bl	StringCopy
	mov	r3, #0x1
	add	sl, sl, r3
.L1289:
	mov	r4, sl
	cmp	r4, #0x1
	bgt	.L1290	@cond_branch
	ldr	r1, .L1441+0x20
	mov	r0, #0x0
	b	.L1368
.L1442:
	.align	2, 0
.L1441:
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	0xf7ffffff
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	gStatusConditionString_ConfusionJpn
	.word	gBattleCommunication
.L1290:
	ldr	r1, .L1443
	mov	r0, #0x1
.L1368:
	strb	r0, [r1, #0x5]
	ldr	r2, .L1443+0x4
	mov	r0, #0x58
	mov	r3, r7
	mul	r3, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r3, r0
	mov	r1, #0x0
	str	r1, [r0]
	add	r2, r2, #0x50
	add	r3, r3, r2
	ldr	r0, [r3]
	sub	r1, r1, #0x8
	and	r0, r0, r1
	str	r0, [r3]
	ldr	r0, .L1443+0x8
.L1367:
	bl	b_call_bc_move_exec
	mov	r5, #0x1
	str	r5, [sp, #0xc]
	b	.L1360
.L1444:
	.align	2, 0
.L1443:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gUnknown_081D9A44
.L1292:
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1184	@cond_branch
	ldr	r0, .L1445
	and	r2, r2, r0
	str	r2, [r1]
	ldr	r0, .L1445+0x4
	ldr	r1, .L1445+0x8
	bl	StringCopy
	ldr	r0, .L1445+0xc
	bl	b_call_bc_move_exec
	ldr	r1, .L1445+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	mov	r0, #0x2
	str	r0, [sp, #0xc]
.L1184:
	ldr	r1, [sp, #0xc]
	cmp	r1, #0
	bne	.LCB12816
	b	.L1168	@long jump
.LCB12816:
.L1360:
	ldr	r0, .L1445+0x14
	ldr	r2, .L1445+0x18
	add	r0, r0, r2
	strb	r7, [r0]
	ldr	r0, .L1445+0x1c
	strb	r7, [r0]
	ldr	r4, .L1445+0x20
	ldr	r0, .L1445+0x24
	strb	r7, [r0]
	strb	r7, [r4]
	ldr	r3, [sp, #0xc]
	cmp	r3, #0x1
	beq	.L1298	@cond_branch
	cmp	r3, #0x3
	beq	.L1299	@cond_branch
	b	.L1168
.L1446:
	.align	2, 0
.L1445:
	.word	0xfff0ffff
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
	.word	gUnknown_081D9A44
	.word	gBattleCommunication
	.word	gSharedMem
	.word	0x16003
	.word	gStringBank
	.word	gActiveBank
	.word	gBankAttacker
.L1298:
	mov	r0, #0x58
	mul	r0, r0, r7
	b	.L1369
.L1299:
	ldr	r4, .L1447
	mov	r0, #0x58
	mov	r3, r7
	mul	r3, r3, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB12873
	b	.L1168	@long jump
.LCB12873:
	ldr	r1, .L1447+0x4
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L1447+0x8
	mov	r5, sl
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB12891
	b	.L1168	@long jump
.LCB12891:
	add	r1, r5, r3
	add	r0, r4, #0
	add	r0, r0, #0x24
	add	r1, r1, r0
	add	r0, sp, #0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L1168
.L1448:
	.align	2, 0
.L1447:
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
.L1304:
	mov	r7, #0x0
	ldr	r0, .L1449
	ldrb	r0, [r0]
	cmp	r7, r0
	bcc	.LCB12917
	b	.L1168	@long jump
.LCB12917:
.L1308:
	ldr	r4, .L1449+0x4
	ldr	r1, .L1449+0x8
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1309	@cond_branch
	ldr	r1, .L1449+0xc
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x7]
	b	.L1310
.L1450:
	.align	2, 0
.L1449:
	.word	gNoOfAllBanks
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gEnigmaBerries
.L1309:
	ldrh	r0, [r4]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r0, [r4]
	bl	ItemId_GetHoldEffectParam
.L1310:
	sub	r0, r5, #0x2
	cmp	r0, #0x1a
	bls	.LCB12971
	b	.L1311	@long jump
.LCB12971:
	lsl	r0, r0, #0x2
	ldr	r1, .L1451
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1452:
	.align	2, 0
.L1451:
	.word	.L1343
	.align	2, 0
	.align	2, 0
.L1343:
	.word	.L1312
	.word	.L1320
	.word	.L1314
	.word	.L1316
	.word	.L1318
	.word	.L1311
	.word	.L1322
	.word	.L1326
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1335
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1311
	.word	.L1324
.L1312:
	ldr	r1, .L1453
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x4c
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB12999
	b	.L1311	@long jump
.LCB12999:
	mov	r0, #0x41
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1453+0x4
	ldr	r0, .L1453+0x8
	str	r0, [r1]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	b	.L1361
.L1454:
	.align	2, 0
.L1453:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureParRet
.L1314:
	ldr	r1, .L1455
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x4c
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13031
	b	.L1311	@long jump
.LCB13031:
	ldr	r0, .L1455+0x4
	and	r1, r1, r0
	str	r1, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1455+0x8
	ldr	r0, .L1455+0xc
	str	r0, [r1]
	mov	r1, #0x1
	str	r1, [sp, #0xc]
	b	.L1361
.L1456:
	.align	2, 0
.L1455:
	.word	gBattleMons
	.word	0xfffff077
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCurePsnRet
.L1316:
	ldr	r1, .L1457
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x4c
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13063
	b	.L1311	@long jump
.LCB13063:
	mov	r0, #0x11
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1457+0x4
	ldr	r0, .L1457+0x8
	str	r0, [r1]
	mov	r2, #0x1
	str	r2, [sp, #0xc]
	b	.L1361
.L1458:
	.align	2, 0
.L1457:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureBrnRet
.L1318:
	ldr	r1, .L1459
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x4c
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13095
	b	.L1311	@long jump
.LCB13095:
	mov	r0, #0x21
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1459+0x4
	ldr	r0, .L1459+0x8
	b	.L1370
.L1460:
	.align	2, 0
.L1459:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureFrzRet
.L1320:
	ldr	r2, .L1461
	mov	r0, #0x58
	mov	r4, r7
	mul	r4, r4, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r3, r4, r0
	ldr	r1, [r3]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13125
	b	.L1311	@long jump
.LCB13125:
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r3]
	add	r2, r2, #0x50
	add	r2, r4, r2
	ldr	r0, [r2]
	ldr	r1, .L1461+0x4
	and	r0, r0, r1
	str	r0, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1461+0x8
	ldr	r0, .L1461+0xc
	str	r0, [r1]
	mov	r4, #0x1
	str	r4, [sp, #0xc]
	b	.L1361
.L1462:
	.align	2, 0
.L1461:
	.word	gBattleMons
	.word	0xf7ffffff
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureSlpRet
.L1322:
	ldr	r1, .L1463
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x50
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13164
	b	.L1311	@long jump
.LCB13164:
	mov	r0, #0x8
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1463+0x4
	ldr	r0, .L1463+0x8
	str	r0, [r1]
	mov	r5, #0x2
	str	r5, [sp, #0xc]
	b	.L1361
.L1464:
	.align	2, 0
.L1463:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BerryCureConfusionRet
.L1324:
	ldr	r1, .L1465
	mov	r0, #0x58
	mul	r0, r0, r7
	add	r1, r1, #0x50
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13197
	b	.L1311	@long jump
.LCB13197:
	ldr	r0, .L1465+0x4
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r0, .L1465+0x8
	ldr	r1, .L1465+0xc
	bl	StringCopy
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1465+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	ldr	r1, .L1465+0x14
	ldr	r0, .L1465+0x18
	str	r0, [r1]
	mov	r0, #0x2
	str	r0, [sp, #0xc]
	b	.L1361
.L1466:
	.align	2, 0
.L1465:
	.word	gBattleMons
	.word	0xfff0ffff
	.word	gBattleTextBuff1
	.word	gStatusConditionString_LoveJpn
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D9A4A
.L1326:
	ldr	r4, .L1467
	mov	r0, #0x58
	mov	r5, r7
	mul	r5, r5, r0
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r6, r5, r0
	ldr	r2, [r6]
	ldrb	r0, [r6]
	cmp	r0, #0
	bne	.L1328	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r5, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13250
	b	.L1311	@long jump
.LCB13250:
.L1328:
	mov	r0, #0x88
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1329	@cond_branch
	ldr	r0, .L1467+0x4
	ldr	r1, .L1467+0x8
	bl	StringCopy
.L1329:
	ldr	r0, [r6]
	mov	r1, #0x7
	mov	r8, r1
	and	r0, r0, r1
	add	r4, r4, #0x50
	cmp	r0, #0
	beq	.L1330	@cond_branch
	add	r2, r5, r4
	ldr	r0, [r2]
	ldr	r1, .L1467+0xc
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L1467+0x4
	ldr	r1, .L1467+0x10
	bl	StringCopy
.L1330:
	ldr	r0, [r6]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1331	@cond_branch
	ldr	r0, .L1467+0x4
	ldr	r1, .L1467+0x14
	bl	StringCopy
.L1331:
	ldr	r0, [r6]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1332	@cond_branch
	ldr	r0, .L1467+0x4
	ldr	r1, .L1467+0x18
	bl	StringCopy
.L1332:
	ldr	r0, [r6]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1333	@cond_branch
	ldr	r0, .L1467+0x4
	ldr	r1, .L1467+0x1c
	bl	StringCopy
.L1333:
	add	r5, r5, r4
	ldr	r0, [r5]
	mov	r2, r8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1334	@cond_branch
	ldr	r0, .L1467+0x4
	ldr	r1, .L1467+0x20
	bl	StringCopy
.L1334:
	mov	r4, #0x0
	str	r4, [r6]
	ldr	r0, [r5]
	mov	r1, #0x8
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r5]
	bl	b_movescr_stack_push_cursor
	ldr	r0, .L1467+0x24
	strb	r4, [r0, #0x5]
	ldr	r1, .L1467+0x28
	ldr	r0, .L1467+0x2c
.L1370:
	str	r0, [r1]
	mov	r3, #0x1
	str	r3, [sp, #0xc]
	b	.L1361
.L1468:
	.align	2, 0
.L1467:
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gStatusConditionString_PoisonJpn
	.word	0xf7ffffff
	.word	gStatusConditionString_SleepJpn
	.word	gStatusConditionString_ParalysisJpn
	.word	gStatusConditionString_BurnJpn
	.word	gStatusConditionString_IceJpn
	.word	gStatusConditionString_ConfusionJpn
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D9A4A
.L1335:
	ldr	r4, .L1469
	mov	r8, r4
	mov	r0, #0x58
	mov	r1, r7
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x18
	add	r1, r1, r0
	mov	r2, #0x6
	mov	r5, #0x7
	mov	sl, r5
.L1339:
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L1338	@cond_branch
	strb	r2, [r1]
	mov	r0, #0x5
	str	r0, [sp, #0xc]
.L1338:
	add	r1, r1, #0x1
	mov	r3, #0x1
	neg	r3, r3
	add	sl, sl, r3
	mov	r4, sl
	cmp	r4, #0
	bge	.L1339	@cond_branch
	ldr	r5, [sp, #0xc]
	cmp	r5, #0
	beq	.L1307	@cond_branch
	ldr	r0, .L1469+0x4
	ldr	r1, .L1469+0x8
	add	r0, r0, r1
	strb	r7, [r0]
	ldr	r0, .L1469+0xc
	strb	r7, [r0]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1469+0x10
	ldr	r0, .L1469+0x14
	str	r0, [r1]
	b	.L1168
.L1470:
	.align	2, 0
.L1469:
	.word	gBattleMons
	.word	gSharedMem
	.word	0x16003
	.word	gStringBank
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WhiteHerbRet
.L1311:
	ldr	r2, [sp, #0xc]
	cmp	r2, #0
	beq	.L1307	@cond_branch
.L1361:
	ldr	r0, .L1471
	ldr	r3, .L1471+0x4
	add	r0, r0, r3
	strb	r7, [r0]
	ldr	r0, .L1471+0x8
	strb	r7, [r0]
	ldr	r4, .L1471+0xc
	strb	r7, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
.L1369:
	ldr	r1, .L1471+0x10
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	b	.L1168
.L1472:
	.align	2, 0
.L1471:
	.word	gSharedMem
	.word	0x16003
	.word	gStringBank
	.word	gActiveBank
	.word	gBattleMons+0x4c
.L1307:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1473
	ldrb	r0, [r0]
	cmp	r7, r0
	bcs	.LCB13497
	b	.L1308	@long jump
.LCB13497:
	b	.L1168
.L1474:
	.align	2, 0
.L1473:
	.word	gNoOfAllBanks
.L1347:
	ldr	r7, .L1475
	ldr	r0, [r7]
	cmp	r0, #0
	bne	.LCB13511
	b	.L1168	@long jump
.LCB13511:
	mov	r4, r8
	cmp	r4, #0x1e
	beq	.L1350	@cond_branch
	cmp	r4, #0x3e
	beq	.L1353	@cond_branch
	b	.L1168
.L1476:
	.align	2, 0
.L1475:
	.word	gBattleMoveDamage
.L1350:
	ldr	r0, .L1477
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB13536
	b	.L1168	@long jump
.LCB13536:
	ldr	r2, .L1477+0x4
	ldr	r4, .L1477+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1352	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB13554
	b	.L1168	@long jump
.LCB13554:
.L1352:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r9
	bcs	.L1168	@cond_branch
	ldr	r2, .L1477+0xc
	ldr	r0, .L1477+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1168	@cond_branch
	ldr	r2, .L1477+0x14
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1168	@cond_branch
	ldr	r1, .L1477+0x18
	mov	r0, #0x8
	strb	r0, [r1, #0x3]
	bl	b_movescr_stack_push_cursor
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	bl	b_movescr_stack_pop_cursor
	b	.L1168
.L1478:
	.align	2, 0
.L1477:
	.word	gBattleMoveFlags
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattleCommunication
.L1353:
	ldr	r0, .L1479
	ldrb	r0, [r0]
	mov	r4, #0x29
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L1168	@cond_branch
	ldr	r1, .L1479+0x4
	ldr	r5, .L1479+0x8
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r6, r1, #0x4
	add	r0, r0, r6
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L1168	@cond_branch
	ldr	r0, .L1479+0xc
	cmp	r1, r0
	beq	.L1168	@cond_branch
	ldr	r0, .L1479+0x10
	ldrb	r3, [r0]
	cmp	r3, r2
	beq	.L1168	@cond_branch
	ldr	r2, .L1479+0x14
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	beq	.L1168	@cond_branch
	cmp	r1, #0
	beq	.L1168	@cond_branch
	ldr	r0, .L1479+0x18
	mov	r1, sp
	ldrh	r1, [r1, #0x14]
	strh	r1, [r0]
	ldr	r0, .L1479+0x1c
	strb	r3, [r0]
	ldr	r0, .L1479+0x20
	ldr	r2, .L1479+0x24
	add	r0, r0, r2
	strb	r3, [r0]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldr	r1, [sp, #0x10]
	bl	__divsi3
	neg	r0, r0
	str	r0, [r7]
	ldrb	r1, [r5]
	cmp	r0, #0
	bne	.L1355	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r7]
.L1355:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	str	r4, [r0]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L1479+0x28
	ldr	r0, .L1479+0x2c
	str	r0, [r1]
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
.L1168:
	ldr	r0, [sp, #0xc]
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1480:
	.align	2, 0
.L1479:
	.word	gBattleMoveFlags
	.word	gSpecialStatuses
	.word	gBankTarget
	.word	0xffff
	.word	gBankAttacker
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gStringBank
	.word	gSharedMem
	.word	0x16003
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ItemHealHP_Ret
.Lfe19:
	.size	 ItemBattleEffects,.Lfe19-ItemBattleEffects
	.section .rodata
	.align	2, 0
	.type	 sCombinedMoves,object
	.size	 sCombinedMoves,16
sCombinedMoves:
	.short	0x34
	.short	0x10
	.short	0x101
	.space	2
	.short	0xffff
	.short	0xffff
	.short	0xffff
	.space	2
.text
	.align	2, 0
	.globl	unref_sub_801B40C
	.type	 unref_sub_801B40C,function
	.thumb_func
unref_sub_801B40C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r0, .L1498
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB13755
	b	.L1482	@long jump
.LCB13755:
	mov	r1, #0x1
	mov	r9, r1
.L1483:
	mov	r5, #0x0
	ldr	r4, .L1498+0x4
	ldr	r2, [sp]
	add	r2, r2, #0x1
	str	r2, [sp, #0x4]
.L1486:
	ldr	r0, .L1498+0x8
	ldrb	r2, [r0]
	ldr	r3, .L1498+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L1490	@cond_branch
	add	r0, r5, #0x2
	lsl	r1, r0, #0x2
	add	r1, r1, r3
	ldr	r1, [r1]
	and	r2, r2, r1
	add	r7, r0, #0
	cmp	r2, #0
	beq	.L1489	@cond_branch
.L1490:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L1488
.L1499:
	.align	2, 0
.L1498:
	.word	gBattleTypeFlags
	.word	sCombinedMoves
	.word	gAbsentBankFlags
	.word	gBitTable
.L1489:
	ldr	r0, .L1500
	ldr	r2, [sp]
	lsl	r1, r2, #0x3
	add	r6, r1, r0
	ldr	r4, .L1500+0x4
	lsl	r0, r5, #0x1
	add	r3, r0, r4
	ldrh	r2, [r6]
	mov	r8, r1
	mov	sl, r0
	ldrh	r3, [r3]
	cmp	r2, r3
	bne	.L1492	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r4
	ldrh	r1, [r6, #0x2]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L1492	@cond_branch
	add	r0, r5, #0
	bl	GetBankIdentity
	mov	r2, r9
	and	r2, r2, r0
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r0, .L1500+0x8
	add	r1, r1, r0
	lsl	r0, r7, #0x4
	orr	r0, r0, r5
	strb	r0, [r1, #0x3]
	add	r0, r5, #0
	bl	GetBankIdentity
	mov	r1, r9
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1500+0x8
	add	r0, r0, r1
	ldrh	r1, [r6, #0x4]
	strh	r1, [r0, #0x4]
	add	r0, r5, #0
	bl	GetBankIdentity
	mov	r1, r9
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldr	r2, .L1500+0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strh	r0, [r1]
.L1492:
	ldr	r0, .L1500
	mov	r1, r8
	add	r4, r1, r0
	ldr	r2, .L1500+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	ldrh	r1, [r4]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L1493	@cond_branch
	mov	r0, sl
	add	r1, r0, r2
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L1493	@cond_branch
	add	r0, r5, #0
	bl	GetBankIdentity
	mov	r2, r9
	and	r2, r2, r0
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r2, .L1500+0x8
	add	r1, r1, r2
	lsl	r0, r5, #0x4
	orr	r0, r0, r7
	strb	r0, [r1, #0x3]
	add	r0, r5, #0
	bl	GetBankIdentity
	mov	r1, r9
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1500+0x8
	add	r0, r0, r1
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x4]
	add	r0, r5, #0
	bl	GetBankIdentity
	mov	r1, r9
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldr	r2, .L1500+0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strh	r0, [r1]
.L1493:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L1500
.L1488:
	cmp	r5, #0x1
	bhi	.LCB13970
	b	.L1486	@long jump
.LCB13970:
	ldr	r0, [sp, #0x4]
	str	r0, [sp]
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrh	r1, [r0]
	ldr	r0, .L1500+0x10
	cmp	r1, r0
	beq	.LCB13985
	b	.L1483	@long jump
.LCB13985:
.L1482:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1501:
	.align	2, 0
.L1500:
	.word	sCombinedMoves
	.word	gChosenMovesByBanks
	.word	gSideTimer
	.word	gSideAffecting
	.word	0xffff
.Lfe20:
	.size	 unref_sub_801B40C,.Lfe20-unref_sub_801B40C
	.align	2, 0
	.globl	sub_801B594
	.type	 sub_801B594,function
	.thumb_func
sub_801B594:
	push	{lr}
	ldr	r0, .L1504
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1503	@cond_branch
	ldr	r1, .L1504+0x4
	ldr	r0, .L1504+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
.L1503:
	pop	{r0}
	bx	r0
.L1505:
	.align	2, 0
.L1504:
	.word	gBattleExecBuffer
	.word	gBattleScriptingCommandsTable
	.word	gBattlescriptCurrInstr
.Lfe21:
	.size	 sub_801B594,.Lfe21-sub_801B594
	.align	2, 0
	.globl	GetMoveTarget
	.type	 GetMoveTarget,function
	.thumb_func
GetMoveTarget:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	mov	r5, #0x0
	cmp	r0, #0
	beq	.L1507	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1508
.L1507:
	ldr	r1, .L1542
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r6, [r0, #0x6]
.L1508:
	cmp	r6, #0x40
	bls	.LCB14067
	b	.L1509	@long jump
.LCB14067:
	lsl	r0, r6, #0x2
	ldr	r1, .L1542+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1543:
	.align	2, 0
.L1542:
	.word	gBattleMoves
	.word	.L1538
	.align	2, 0
	.align	2, 0
.L1538:
	.word	.L1510
	.word	.L1522
	.word	.L1537
	.word	.L1509
	.word	.L1524
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1522
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1537
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1522
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1509
	.word	.L1522
.L1510:
	ldr	r0, .L1544
	ldrb	r0, [r0]
	bl	GetBankSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1544+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L1511	@cond_branch
	ldr	r1, .L1544+0x8
	ldrb	r4, [r2, #0x9]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.LCB14115
	b	.L1540	@long jump
.LCB14115:
.L1511:
	ldr	r0, .L1544
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r7, #0x1
	mov	r8, r0
.L1513:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L1544+0xc
	ldrb	r1, [r1]
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L1544
	ldrb	r2, [r6]
	cmp	r5, r2
	beq	.L1513	@cond_branch
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1513	@cond_branch
	ldr	r0, .L1544+0x10
	ldrb	r2, [r0]
	ldr	r1, .L1544+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1513	@cond_branch
	ldr	r0, .L1544+0x18
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xd
	beq	.LCB14177
	b	.L1509	@long jump
.LCB14177:
	ldrb	r1, [r6]
	str	r2, [sp]
	mov	r0, #0x10
	mov	r2, #0x1f
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB14191
	b	.L1509	@long jump
.LCB14191:
	ldr	r2, .L1544+0x8
	mov	r1, #0x58
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1f
	bne	.LCB14201
	b	.L1509	@long jump
.LCB14201:
	mov	r4, #0x2
	eor	r5, r5, r4
	mov	r0, r5
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	RecordAbilityBattle
	ldr	r1, .L1544+0x1c
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	orr	r1, r1, r4
	strb	r1, [r0]
	b	.L1509
.L1545:
	.align	2, 0
.L1544:
	.word	gBankAttacker
	.word	gSideTimer
	.word	gBattleMons
	.word	gNoOfAllBanks
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gBattleMoves
	.word	gSpecialStatuses
.L1522:
	ldr	r0, .L1546
	ldrb	r0, [r0]
	bl	GetBankIdentity
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	b	.L1541
.L1547:
	.align	2, 0
.L1546:
	.word	gBankAttacker
.L1524:
	ldr	r0, .L1548
	ldrb	r0, [r0]
	bl	GetBankSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1548+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L1525	@cond_branch
	ldr	r1, .L1548+0x8
	ldrb	r4, [r2, #0x9]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1525	@cond_branch
.L1540:
	add	r5, r4, #0
	b	.L1509
.L1549:
	.align	2, 0
.L1548:
	.word	gBankAttacker
	.word	gSideTimer
	.word	gBattleMons
.L1525:
	ldr	r0, .L1550
	ldrh	r1, [r0]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1527	@cond_branch
	mov	r0, #0x4
	and	r6, r6, r0
	cmp	r6, #0
	beq	.L1527	@cond_branch
	ldr	r0, .L1550+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1528	@cond_branch
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1529	@cond_branch
	mov	r0, #0x1
	b	.L1541
.L1551:
	.align	2, 0
.L1550:
	.word	gBattleTypeFlags
	.word	gBankAttacker
.L1529:
	mov	r0, #0x3
	b	.L1541
.L1528:
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1532	@cond_branch
	mov	r0, #0x0
	b	.L1541
.L1532:
	mov	r0, #0x2
.L1541:
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1552
	ldrb	r1, [r0]
	ldr	r2, .L1552+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1509	@cond_branch
	mov	r0, #0x2
	eor	r5, r5, r0
	b	.L1509
.L1553:
	.align	2, 0
.L1552:
	.word	gAbsentBankFlags
	.word	gBitTable
.L1527:
	ldr	r0, .L1554
	ldrb	r0, [r0]
	bl	GetBankIdentity
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L1509
.L1555:
	.align	2, 0
.L1554:
	.word	gBankAttacker
.L1537:
	ldr	r0, .L1556
	ldrb	r5, [r0]
.L1509:
	ldr	r1, .L1556+0x4
	ldr	r0, .L1556
	ldrb	r0, [r0]
	ldr	r2, .L1556+0x8
	add	r0, r0, r2
	add	r0, r0, r1
	strb	r5, [r0]
	add	r0, r5, #0
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1557:
	.align	2, 0
.L1556:
	.word	gBankAttacker
	.word	gSharedMem
	.word	0x16010
.Lfe22:
	.size	 GetMoveTarget,.Lfe22-GetMoveTarget
	.align	2, 0
	.globl	IsPokeDisobedient
	.type	 IsPokeDisobedient,function
	.thumb_func
IsPokeDisobedient:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff0
	ldr	r0, .L1593
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1589	@cond_branch
	ldr	r7, .L1593+0x4
	ldrb	r0, [r7]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1589	@cond_branch
	ldr	r5, .L1593+0x8
	ldrb	r0, [r7]
	mov	r1, #0x58
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0x54
	add	r0, r1, r0
	ldr	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x3c
	add	r1, r1, r2
	bl	IsOtherTrainer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1589	@cond_branch
	ldr	r0, .L1593+0xc
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1589	@cond_branch
	mov	r6, #0xa
	ldr	r0, .L1593+0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1561	@cond_branch
	mov	r6, #0x1e
.L1561:
	ldr	r0, .L1593+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1562	@cond_branch
	mov	r6, #0x32
.L1562:
	ldr	r0, .L1593+0x18
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1563	@cond_branch
	mov	r6, #0x46
.L1563:
	ldrb	r0, [r7]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r5
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	cmp	r0, r6
	bls	.L1589	@cond_branch
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	ldrb	r0, [r7]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, r5
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	add	r0, r0, r6
	mul	r0, r0, r1
	asr	r4, r0, #0x8
	cmp	r4, r6
	bge	.L1565	@cond_branch
.L1589:
	mov	r0, #0x0
	b	.L1588
.L1594:
	.align	2, 0
.L1593:
	.word	gBattleTypeFlags
	.word	gBankAttacker
	.word	gBattleMons
	.word	0x80e
	.word	0x808
	.word	0x80a
	.word	0x80c
.L1565:
	ldr	r3, .L1595
	ldrh	r0, [r3]
	cmp	r0, #0x63
	bne	.L1566	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r2, .L1595+0x4
	and	r1, r1, r2
	str	r1, [r0]
.L1566:
	ldrb	r0, [r7]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r5, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1567	@cond_branch
	ldrh	r0, [r3]
	cmp	r0, #0xad
	beq	.L1568	@cond_branch
	cmp	r0, #0xd6
	bne	.L1567	@cond_branch
.L1568:
	ldr	r1, .L1595+0x8
	ldr	r0, .L1595+0xc
	b	.L1590
.L1596:
	.align	2, 0
.L1595:
	.word	gCurrentMove
	.word	0xff7fffff
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D995F
.L1567:
	bl	Random
	mov	r5, #0xff
	add	r1, r5, #0
	and	r1, r1, r0
	ldr	r7, .L1597
	ldr	r2, .L1597+0x4
	mov	r9, r2
	ldrb	r3, [r2]
	mov	r0, #0x58
	mov	r8, r0
	mov	r0, r8
	mul	r0, r0, r3
	add	r0, r0, r7
	add	r0, r0, #0x2a
	ldrb	r2, [r0]
	add	r0, r2, r6
	mul	r0, r0, r1
	asr	r4, r0, #0x8
	cmp	r4, r6
	bge	.L1569	@cond_branch
	ldr	r7, .L1597+0x8
	ldr	r5, .L1597+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0]
	add	r0, r3, #0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bne	.LCB14665
	b	.L1591	@long jump
.LCB14665:
	add	r6, r5, #0
	ldr	r1, .L1597+0x10
	mov	r9, r1
	mov	r2, #0x3
	mov	r8, r2
.L1572:
	bl	Random
	mov	r1, r8
	and	r0, r0, r1
	mov	r2, r9
	strb	r0, [r2]
	strb	r0, [r6]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r5, [r0]
	and	r5, r5, r4
	cmp	r5, #0
	bne	.L1572	@cond_branch
	ldr	r4, .L1597+0x14
	ldr	r3, .L1597
	ldr	r0, .L1597+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	ldr	r1, .L1597+0x4
	ldrb	r2, [r1]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldr	r0, .L1597+0x18
	strb	r5, [r0, #0x3]
	ldr	r0, .L1597+0x1c
	mov	r1, #0x0
	strh	r5, [r0]
	ldr	r0, .L1597+0x20
	ldr	r2, .L1597+0x24
	add	r0, r0, r2
	strb	r1, [r0]
	ldr	r1, .L1597+0x28
	ldr	r0, .L1597+0x2c
	str	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L1597+0x30
	strb	r0, [r1]
	ldr	r2, .L1597+0x34
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	b	.L1592
.L1598:
	.align	2, 0
.L1597:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBitTable
	.word	gCurrMovePos
	.word	gUnknown_02024BE5
	.word	gRandomMove
	.word	gBattleCommunication
	.word	gDynamicBasePower
	.word	gSharedMem
	.word	0x1601c
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D996F
	.word	gBankTarget
	.word	gHitMarker
.L1569:
	sub	r0, r2, r6
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	Random
	add	r4, r5, #0
	and	r4, r4, r0
	cmp	r4, r6
	bge	.L1578	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r7, #0
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1578	@cond_branch
	add	r0, r1, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x48
	beq	.L1578	@cond_branch
	cmp	r0, #0xf
	beq	.L1578	@cond_branch
	mov	r2, #0x0
	ldr	r0, .L1599
	ldrb	r3, [r0]
	mov	r8, r0
	cmp	r2, r3
	bge	.L1580	@cond_branch
	ldr	r0, [r7, #0x50]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1580	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #0x50
	mov	r5, #0x70
.L1581:
	add	r1, r1, #0x58
	add	r2, r2, #0x1
	cmp	r2, r3
	bge	.L1580	@cond_branch
	ldr	r0, [r1]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1581	@cond_branch
.L1580:
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L1578	@cond_branch
	ldr	r1, .L1599+0x4
	ldr	r0, .L1599+0x8
	b	.L1590
.L1600:
	.align	2, 0
.L1599:
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D9989
.L1578:
	sub	r4, r4, r6
	cmp	r4, r6
	blt	.L1586	@cond_branch
.L1591:
	bl	Random
	ldr	r2, .L1601
	mov	r1, #0x3
	and	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldr	r1, .L1601+0x4
	ldr	r0, .L1601+0x8
.L1590:
	str	r0, [r1]
	mov	r0, #0x1
	b	.L1588
.L1602:
	.align	2, 0
.L1601:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveUsedLoafingAround
.L1586:
	ldr	r4, .L1603
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r1, r1, r0
	ldr	r0, .L1603+0x4
	add	r1, r1, r0
	mov	r0, #0x28
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	ldrb	r0, [r4]
	str	r0, [sp, #0x8]
	ldrb	r0, [r4]
	str	r0, [sp, #0xc]
	add	r0, r1, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	CalculateBaseDamage
	ldr	r1, .L1603+0x8
	str	r0, [r1]
	ldr	r1, .L1603+0xc
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldr	r1, .L1603+0x10
	ldr	r0, .L1603+0x14
	str	r0, [r1]
	ldr	r2, .L1603+0x18
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xc
.L1592:
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x2
.L1588:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1604:
	.align	2, 0
.L1603:
	.word	gBankAttacker
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D99A0
	.word	gHitMarker
.Lfe23:
	.size	 IsPokeDisobedient,.Lfe23-IsPokeDisobedient
.text
	.align	2, 0
