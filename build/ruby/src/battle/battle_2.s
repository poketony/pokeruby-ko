@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	sub_800E7C4
	.type	 sub_800E7C4,function
	.thumb_func
sub_800E7C4:
	push	{lr}
	ldr	r0, .L5
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3	@cond_branch
	bl	sub_800B858
	ldr	r0, .L5+0x4
	bl	SetMainCallback2
	ldr	r1, .L5+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gBattleTypeFlags
	.word	sub_800F104
	.word	gBattleCommunication
.L3:
	bl	InitBattle
.L4:
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 sub_800E7C4,.Lfe1-sub_800E7C4
	.align	2, 0
	.globl	InitBattle
	.type	 InitBattle,function
	.thumb_func
InitBattle:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r4, #0x0
	str	r4, [sp]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L26
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L26+0x4
	strh	r4, [r0]
	sub	r0, r0, #0xc
	mov	r2, #0xf0
	strh	r2, [r0]
	add	r0, r0, #0x4
	ldr	r3, .L26+0x8
	add	r1, r3, #0
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r4, [r0]
	add	r0, r0, #0x2
	strh	r4, [r0]
	ldr	r0, .L26+0xc
	strh	r2, [r0]
	ldr	r0, .L26+0x10
	strh	r1, [r0]
	bl	dp12_8087EA4
	ldr	r0, .L26+0x14
	mov	r3, #0xf0
	mov	r5, #0xf0
	lsl	r5, r5, #0x3
	add	r2, r0, r5
	mov	r1, #0x4f
.L11:
	strh	r3, [r0]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L11	@cond_branch
	mov	r1, #0x50
	ldr	r4, .L26+0x18
	ldr	r0, .L26+0x14
	ldr	r3, .L26+0x1c
	mov	r5, #0x82
	lsl	r5, r5, #0x4
	add	r2, r0, r5
	add	r0, r0, #0xa0
.L16:
	.code	16
	strh	r3, [r0]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x2
	add	r1, r1, #0x1
	cmp	r1, #0x9f
	ble	.L16	@cond_branch
	ldr	r0, [r4]
	ldr	r1, [r4, #0x4]
	ldr	r2, [r4, #0x8]
	bl	sub_80895F8
	ldr	r4, .L26+0x20
	add	r0, r4, #0
	bl	SetUpWindowConfig
	bl	ResetPaletteFade
	ldr	r0, .L26+0x24
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L26+0x28
	strh	r1, [r0]
	ldr	r0, .L26+0x2c
	strh	r1, [r0]
	ldr	r0, .L26+0x30
	strh	r1, [r0]
	ldr	r0, .L26+0x34
	strh	r1, [r0]
	ldr	r0, .L26+0x38
	strh	r1, [r0]
	ldr	r0, .L26+0x3c
	strh	r1, [r0]
	ldr	r0, .L26+0x40
	strh	r1, [r0]
	bl	BattleSetup_GetTerrain
	ldr	r1, .L26+0x44
	strb	r0, [r1]
	ldr	r0, .L26+0x48
	add	r1, r4, #0
	bl	InitWindowFromConfig
	ldr	r0, .L26+0x4c
	ldr	r1, .L26+0x50
	bl	InitWindowFromConfig
	ldr	r0, .L26+0x54
	ldr	r1, .L26+0x58
	bl	InitWindowFromConfig
	bl	sub_800D6D4
	bl	sub_800DAB8
	bl	ResetSpriteData
	bl	ResetTasks
	bl	sub_800E23C
	bl	FreeAllSpritePalettes
	ldr	r1, .L26+0x5c
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, .L26+0x60
	bl	SetVBlankCallback
	bl	setup_poochyena_battle
	ldr	r0, .L26+0x64
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L18	@cond_branch
	ldr	r0, .L26+0x68
	bl	SetMainCallback2
	b	.L19
.L27:
	.align	2, 0
.L26:
	.word	0x5006000
	.word	0x400004c
	.word	0x5051
	.word	gUnknown_030042C4
	.word	gUnknown_03004240
	.word	gUnknown_03004DE0
	.word	gUnknown_081F9674
	.word	0xff10
	.word	gWindowConfig_81E6C58
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
	.word	gBattleTerrain
	.word	gUnknown_03004210
	.word	gUnknown_030041D0
	.word	gWindowConfig_81E71D0
	.word	gUnknown_03004250
	.word	gWindowConfig_81E71EC
	.word	gReservedSpritePaletteCount
	.word	sub_800FCFC
	.word	gBattleTypeFlags
	.word	sub_800F298
.L18:
	ldr	r0, .L28
	bl	SetMainCallback2
.L19:
	ldr	r0, .L28+0x4
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r0, .L28+0x8
	ldr	r1, .L28+0xc
	ldrh	r1, [r1]
	bl	CreateNPCTrainerParty
	bl	SetWildMonHeldItem
.L20:
	ldr	r0, .L28+0x10
	ldr	r1, .L28+0x14
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r4, .L28+0x18
	mov	r3, #0xfa
	lsl	r3, r3, #0x1
	add	r5, r4, r3
.L24:
	add	r0, r4, #0
	mov	r1, #0x3
	bl	AdjustFriendship
	add	r4, r4, #0x64
	cmp	r4, r5
	ble	.L24	@cond_branch
	mov	r1, #0x0
	ldr	r0, .L28+0x1c
	strb	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	sub_800EC9C
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	gTrainerBattleOpponent
	.word	gMain
	.word	0x43d
	.word	gPlayerParty
	.word	gBattleCommunication
.Lfe2:
	.size	 InitBattle,.Lfe2-InitBattle
	.align	2, 0
	.globl	sub_800E9EC
	.type	 sub_800E9EC,function
	.thumb_func
sub_800E9EC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r9, r6
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	mov	sl, r0
	mov	r8, r6
.L34:
	mov	r0, #0x64
	mov	r4, r9
	mul	r4, r4, r0
	ldr	r0, .L43
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L33	@cond_branch
	cmp	r5, sl
	beq	.L36	@cond_branch
	cmp	r7, #0
	beq	.L36	@cond_branch
	cmp	r1, #0
	bne	.L36	@cond_branch
	mov	r0, #0x1
	mov	r2, r8
	lsl	r0, r0, r2
	orr	r6, r6, r0
	lsl	r0, r6, #0x10
	lsr	r6, r0, #0x10
.L36:
	cmp	r5, #0
	beq	.L33	@cond_branch
	cmp	r7, #0
	beq	.L38	@cond_branch
	cmp	r5, sl
	beq	.L39	@cond_branch
	cmp	r1, #0
	beq	.L38	@cond_branch
.L39:
	mov	r0, #0x2
	mov	r1, r8
	lsl	r0, r0, r1
	orr	r6, r6, r0
	lsl	r0, r6, #0x10
	lsr	r6, r0, #0x10
.L38:
	cmp	r5, #0
	beq	.L33	@cond_branch
	cmp	r5, sl
	beq	.L33	@cond_branch
	cmp	r7, #0
	bne	.L33	@cond_branch
	mov	r0, #0x3
	mov	r2, r8
	lsl	r0, r0, r2
	orr	r6, r6, r0
	lsl	r0, r6, #0x10
	lsr	r6, r0, #0x10
.L33:
	mov	r0, #0x2
	add	r8, r8, r0
	mov	r1, #0x1
	add	r9, r9, r1
	mov	r2, r9
	cmp	r2, #0x5
	ble	.L34	@cond_branch
	ldr	r1, .L43+0x4
	strb	r6, [r1, #0x2]
	lsr	r0, r6, #0x8
	strb	r0, [r1, #0x3]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gPlayerParty
	.word	gSharedMem
.Lfe3:
	.size	 sub_800E9EC,.Lfe3-sub_800E9EC
	.align	2, 0
	.globl	sub_800EAAC
	.type	 sub_800EAAC,function
	.thumb_func
sub_800EAAC:
	push	{r4, r5, r6, lr}
	ldr	r4, .L56
	mov	r2, #0x0
	ldr	r6, .L56+0x4
	ldr	r0, .L56+0x8
	add	r3, r6, r0
.L49:
	add	r0, r4, r2
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L49	@cond_branch
	mov	r2, #0x0
	add	r3, r4, #0
	add	r3, r3, #0x8
	ldr	r5, .L56+0xc
.L54:
	add	r0, r3, r2
	add	r1, r2, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x11
	ble	.L54	@cond_branch
	ldr	r1, .L56+0x10
	add	r0, r6, r1
	ldrb	r0, [r0]
	strb	r0, [r4, #0x7]
	add	r1, r1, #0x1
	add	r0, r6, r1
	ldrb	r0, [r0]
	strb	r0, [r4, #0x1a]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gSharedMem+0x4
	.word	gSaveBlock1
	.word	0x3160
	.word	gSaveBlock1+0x3676
	.word	0x3688
.Lfe4:
	.size	 sub_800EAAC,.Lfe4-sub_800EAAC
	.align	2, 0
	.globl	sub_800EB08
	.type	 sub_800EB08,function
	.thumb_func
sub_800EB08:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L88
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L59	@cond_branch
	mov	r3, #0x0
	ldr	r5, .L88+0x4
	ldr	r0, .L88+0x8
	mov	ip, r0
	add	r7, r5, #0
	ldr	r6, .L88+0xc
	add	r6, r6, ip
	add	r4, r5, #0
	add	r4, r4, #0x38
.L63:
	add	r1, r3, r7
	add	r2, r3, r6
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r1, r3, r4
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0x6
	ble	.L63	@cond_branch
	mov	r3, #0x0
	ldr	r4, .L88+0x10
	ldr	r7, .L88+0x14
	add	r6, r4, #0
	add	r6, r6, #0x38
.L68:
	add	r1, r3, r4
	add	r2, r3, r7
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r1, r3, r6
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0x11
	ble	.L68	@cond_branch
	ldr	r1, .L88+0x18
	add	r1, r1, ip
	ldrb	r0, [r1]
	strb	r0, [r5, #0x7]
	ldrb	r0, [r1]
	add	r1, r5, #0
	add	r1, r1, #0x3f
	strb	r0, [r1]
	ldr	r1, .L88+0x1c
	add	r1, r1, ip
	ldrb	r0, [r1]
	strb	r0, [r5, #0x1a]
	ldrb	r1, [r1]
	add	r0, r5, #0
	add	r0, r0, #0x52
	strb	r1, [r0]
	b	.L70
.L89:
	.align	2, 0
.L88:
	.word	gBattleTypeFlags
	.word	gEnigmaBerries
	.word	gSaveBlock1
	.word	0x3160
	.word	gEnigmaBerries+0x8
	.word	gSaveBlock1+0x3676
	.word	0x3688
	.word	0x3689
.L59:
	mov	r0, #0x40
	and	r0, r0, r1
	mov	r1, #0x2
	mov	r8, r1
	cmp	r0, #0
	beq	.L71	@cond_branch
	mov	r0, #0x4
	mov	r8, r0
.L71:
	mov	r3, #0x0
	cmp	r3, r8
	bge	.L70	@cond_branch
	ldr	r1, .L90
	mov	ip, r1
	ldr	r0, .L90+0x4
	mov	sl, r0
	mov	r1, #0x8
	add	r1, r1, ip
	mov	r9, r1
.L76:
	lsl	r0, r3, #0x8
	mov	r1, sl
	add	r5, r0, r1
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, .L90+0x8
	add	r0, r0, r1
	ldrb	r4, [r0, #0x18]
	mov	r2, #0x0
	add	r7, r3, #0x1
	lsl	r1, r4, #0x3
	sub	r0, r1, r4
	add	r6, r1, #0
	lsl	r0, r0, #0x2
	mov	r1, ip
	add	r3, r0, r1
.L80:
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L80	@cond_branch
	mov	r2, #0x0
	sub	r0, r6, r4
	lsl	r0, r0, #0x2
	mov	r1, r9
	add	r3, r0, r1
	add	r1, r5, #0
	add	r1, r1, #0x8
.L85:
	add	r0, r1, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x11
	ble	.L85	@cond_branch
	sub	r0, r6, r4
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r1, [r5, #0x7]
	strb	r1, [r0, #0x7]
	ldrb	r1, [r5, #0x1a]
	strb	r1, [r0, #0x1a]
	add	r3, r7, #0
	cmp	r3, r8
	blt	.L76	@cond_branch
.L70:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gEnigmaBerries
	.word	gBlockRecvBuffer+0x4
	.word	gLinkPlayers
.Lfe5:
	.size	 sub_800EB08,.Lfe5-sub_800EB08
	.align	2, 0
	.globl	shedinja_something
	.type	 shedinja_something,function
	.thumb_func
shedinja_something:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff0
	add	r4, r0, #0
	add	r5, sp, #0xc
	mov	r0, #0x1
	strb	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, .L95
	cmp	r0, r1
	bne	.L93	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetMonData
	ldrb	r1, [r5]
	cmp	r0, r1
	beq	.L93	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	ldr	r1, .L95+0x4
	mov	r0, sp
	bl	StringCompareWithoutExtCtrlCodes
	cmp	r0, #0
	bne	.L93	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x3
	add	r2, r5, #0
	bl	SetMonData
.L93:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	0x12f
	.word	gUnknown_081F96C8
.Lfe6:
	.size	 shedinja_something,.Lfe6-shedinja_something
	.align	2, 0
	.globl	sub_800EC9C
	.type	 sub_800EC9C,function
	.thumb_func
sub_800EC9C:
	push	{r4, r5, r6, r7, lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L143
	ldr	r1, .L143+0x4
	add	r0, r0, r1
	strb	r4, [r0]
	mov	r0, #0x1
	add	r5, r4, #0
	eor	r5, r5, r0
	ldr	r0, .L143+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x9
	bls	.LCB788
	b	.L98	@long jump
.LCB788:
	lsl	r0, r0, #0x2
	ldr	r1, .L143+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L144:
	.align	2, 0
.L143:
	.word	gSharedMem
	.word	0x160cb
	.word	gBattleCommunication
	.word	.L136
	.align	2, 0
	.align	2, 0
.L136:
	.word	.L99
	.word	.L103
	.word	.L120
	.word	.L122
	.word	.L124
	.word	.L126
	.word	.L128
	.word	.L130
	.word	.L132
	.word	.L133
.L99:
	ldr	r2, .L145
	ldrh	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L100	@cond_branch
	ldr	r0, .L145+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB824
	b	.L98	@long jump
.LCB824:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB830
	b	.L98	@long jump
.LCB830:
	ldr	r4, .L145+0x8
	mov	r5, #0x1
	strb	r5, [r4]
	strb	r5, [r4, #0x1]
	bl	sub_800E9EC
	bl	sub_800EAAC
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	mov	r2, #0x20
	bl	SendBlock
	ldr	r0, .L145+0xc
	strb	r5, [r0]
	b	.L98
.L146:
	.align	2, 0
.L145:
	.word	gBattleTypeFlags
	.word	gReceivedRemoteLinkPlayers
	.word	gSharedMem
	.word	gBattleCommunication
.L100:
	mov	r0, #0x4
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L147
	mov	r0, #0x8
	strb	r0, [r1]
	bl	sub_800EB08
	b	.L98
.L148:
	.align	2, 0
.L147:
	.word	gBattleCommunication
.L103:
	bl	GetBlockReceivedStatus
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0x3
	beq	.LCB884
	b	.L98	@long jump
.LCB884:
	bl	ResetBlockReceivedFlags
	mov	r3, #0x0
	ldr	r0, .L149
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L105	@cond_branch
	cmp	r4, #0
	bne	.L106	@cond_branch
	ldr	r0, .L149+0x4
	ldrh	r1, [r0]
	mov	r2, #0xc
	b	.L138
.L150:
	.align	2, 0
.L149:
	.word	gBlockRecvBuffer
	.word	gBattleTypeFlags
.L106:
	ldr	r0, .L151
	ldrh	r1, [r0]
	mov	r2, #0x8
.L138:
	orr	r1, r1, r2
	strh	r1, [r0]
	add	r3, r3, #0x1
.L105:
	lsl	r7, r5, #0x8
	cmp	r3, #0
	bne	.L108	@cond_branch
	ldr	r0, .L151+0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r2, r0, r1
	ldrh	r1, [r0]
	add	r6, r0, #0
	ldrh	r2, [r2]
	cmp	r1, r2
	bne	.L109	@cond_branch
	cmp	r4, #0
	bne	.L110	@cond_branch
	ldr	r0, .L151
	ldrh	r1, [r0]
	mov	r2, #0xc
	b	.L139
.L152:
	.align	2, 0
.L151:
	.word	gBattleTypeFlags
	.word	gBlockRecvBuffer
.L110:
	ldr	r0, .L153
	ldrh	r1, [r0]
	mov	r2, #0x8
.L139:
	orr	r1, r1, r2
	strh	r1, [r0]
	add	r3, r3, #0x1
.L109:
	lsl	r7, r5, #0x8
	cmp	r3, #0
	bne	.L108	@cond_branch
	ldrh	r1, [r6]
	ldr	r0, .L153+0x4
	ldr	r2, .L153
	b	.L140
.L154:
	.align	2, 0
.L153:
	.word	gBattleTypeFlags
	.word	0x101
.L116:
	add	r3, r3, #0x1
	cmp	r3, #0x1
	bgt	.L114	@cond_branch
	lsl	r0, r3, #0x8
	add	r0, r0, r6
	ldrh	r1, [r0]
	ldr	r0, .L155
.L140:
	cmp	r1, r0
	bls	.L116	@cond_branch
	cmp	r3, r4
	beq	.L116	@cond_branch
.L114:
	cmp	r3, #0x2
	bne	.L118	@cond_branch
	ldrh	r0, [r2]
	mov	r1, #0xc
	b	.L141
.L156:
	.align	2, 0
.L155:
	.word	0x101
.L118:
	ldrh	r0, [r2]
	mov	r1, #0x8
.L141:
	orr	r0, r0, r1
	strh	r0, [r2]
.L108:
	bl	sub_800EB08
	ldr	r0, .L157
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L157+0x4
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	mov	r1, #0x0
	mov	r0, #0x87
	lsl	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	mov	r0, #0x5a
	strh	r0, [r2, #0xc]
	strh	r1, [r2, #0x12]
	ldr	r0, .L157+0x8
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r2, #0xe]
	ldr	r0, .L157+0xc
	add	r0, r0, #0x2
	add	r0, r7, r0
	ldrh	r0, [r0]
	strh	r0, [r2, #0x10]
	b	.L142
.L158:
	.align	2, 0
.L157:
	.word	sub_800DE30
	.word	gTasks
	.word	gSharedMem
	.word	gBlockRecvBuffer
.L120:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1090
	b	.L98	@long jump
.LCB1090:
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L159
	mov	r2, #0xc8
	bl	SendBlock
	b	.L142
.L160:
	.align	2, 0
.L159:
	.word	gPlayerParty
.L122:
	bl	GetBlockReceivedStatus
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0x3
	beq	.LCB1117
	b	.L98	@long jump
.LCB1117:
	bl	ResetBlockReceivedFlags
	ldr	r0, .L161
	lsl	r1, r5, #0x8
	ldr	r2, .L161+0x4
	add	r1, r1, r2
	mov	r2, #0xc8
	bl	memcpy
	b	.L142
.L162:
	.align	2, 0
.L161:
	.word	gEnemyParty
	.word	gBlockRecvBuffer
.L124:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1143
	b	.L98	@long jump
.LCB1143:
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L163
	mov	r2, #0xc8
	bl	SendBlock
	b	.L142
.L164:
	.align	2, 0
.L163:
	.word	gPlayerParty+0xc8
.L126:
	bl	GetBlockReceivedStatus
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0x3
	beq	.LCB1170
	b	.L98	@long jump
.LCB1170:
	bl	ResetBlockReceivedFlags
	ldr	r0, .L165
	lsl	r1, r5, #0x8
	ldr	r2, .L165+0x4
	add	r1, r1, r2
	mov	r2, #0xc8
	bl	memcpy
	b	.L142
.L166:
	.align	2, 0
.L165:
	.word	gEnemyParty+0xc8
	.word	gBlockRecvBuffer
.L128:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L98	@cond_branch
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L167
	mov	r2, #0xc8
	bl	SendBlock
	b	.L142
.L168:
	.align	2, 0
.L167:
	.word	gPlayerParty+0x190
.L130:
	bl	GetBlockReceivedStatus
	mov	r1, #0x3
	and	r1, r1, r0
	cmp	r1, #0x3
	bne	.L98	@cond_branch
	bl	ResetBlockReceivedFlags
	ldr	r4, .L169
	lsl	r1, r5, #0x8
	ldr	r0, .L169+0x4
	add	r1, r1, r0
	add	r0, r4, #0
	mov	r2, #0xc8
	bl	memcpy
	ldr	r1, .L169+0x8
	add	r0, r4, r1
	bl	shedinja_something
	ldr	r1, .L169+0xc
	add	r0, r4, r1
	bl	shedinja_something
	add	r0, r4, #0
	sub	r0, r0, #0xc8
	bl	shedinja_something
	add	r0, r4, #0
	sub	r0, r0, #0x64
	bl	shedinja_something
	add	r0, r4, #0
	bl	shedinja_something
	add	r0, r4, #0
	add	r0, r0, #0x64
	bl	shedinja_something
.L142:
	ldr	r1, .L169+0x10
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L98
.L170:
	.align	2, 0
.L169:
	.word	gEnemyParty+0x190
	.word	gBlockRecvBuffer
	.word	0xfffffe70
	.word	0xfffffed4
	.word	gBattleCommunication
.L132:
	bl	sub_800B950
	ldr	r0, .L171
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	strb	r2, [r0, #0x2]
	b	.L98
.L172:
	.align	2, 0
.L171:
	.word	gBattleCommunication
.L133:
	ldr	r0, .L173
	add	r1, r0, #0x1
	bl	battle_load_something
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L98	@cond_branch
	ldr	r2, .L173+0x4
	ldr	r1, .L173+0x8
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, .L173+0xc
	str	r0, [r1]
	ldr	r0, .L173+0x10
	bl	SetMainCallback2
	ldr	r3, .L173+0x14
	ldrh	r2, [r3]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L98	@cond_branch
	ldr	r1, .L173+0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	strh	r0, [r1]
	mov	r0, #0x20
	orr	r0, r0, r2
	strh	r0, [r3]
.L98:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L174:
	.align	2, 0
.L173:
	.word	gUnknown_02024D1F
	.word	gPreBattleCallback1
	.word	gMain
	.word	sub_8010824
	.word	sub_800F808
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent
.Lfe7:
	.size	 sub_800EC9C,.Lfe7-sub_800EC9C
	.align	2, 0
	.globl	sub_800F02C
	.type	 sub_800F02C,function
	.thumb_func
sub_800F02C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	r8, r0
	ldr	r7, .L182
	mov	sl, r7
.L179:
	mov	r1, r8
	lsl	r6, r1, #0x5
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	ldr	r0, .L182+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, #0x4
	neg	r1, r1
	add	r1, r1, sl
	mov	r9, r1
	add	r5, r6, r1
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	strh	r0, [r5, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2
	add	r2, r7, #0
	bl	GetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	strb	r0, [r5, #0xf]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5, #0x10]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r5, #0x12]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	mov	r1, sl
	add	r1, r1, #0x10
	add	r6, r6, r1
	str	r0, [r6]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [r7, #0x14]
	add	r0, r4, #0
	bl	GetMonGender
	strb	r0, [r5, #0x1c]
	add	r0, r7, #0
	bl	StripExtCtrlCodes
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetMonData
	strb	r0, [r5, #0x1d]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L178	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x0
	bl	PadNameString
.L178:
	add	r7, r7, #0x20
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x2
	ble	.L179	@cond_branch
	ldr	r0, .L182+0x8
	mov	r1, r9
	mov	r2, #0x60
	bl	memcpy
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	gUnknown_02023A00+0x4
	.word	gPlayerParty
	.word	gSharedMem
.Lfe8:
	.size	 sub_800F02C,.Lfe8-sub_800F02C
	.align	2, 0
	.globl	sub_800F104
	.type	 sub_800F104,function
	.thumb_func
sub_800F104:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L207
	ldr	r1, .L207+0x4
	add	r0, r4, r1
	strb	r6, [r0]
	ldr	r2, .L207+0x8
	add	r2, r2, r4
	mov	r9, r2
	ldr	r0, .L207+0xc
	add	r0, r0, r4
	mov	r8, r0
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	ldr	r5, .L207+0x10
	ldrb	r0, [r5]
	cmp	r0, #0x1
	beq	.L188	@cond_branch
	cmp	r0, #0x1
	bgt	.L205	@cond_branch
	cmp	r0, #0
	beq	.L186	@cond_branch
	b	.L185
.L208:
	.align	2, 0
.L207:
	.word	gSharedMem
	.word	0x160cb
	.word	0x160c4
	.word	0x160c2
	.word	gBattleCommunication
.L205:
	cmp	r0, #0x2
	beq	.L199	@cond_branch
	cmp	r0, #0x3
	bne	.LCB1511
	b	.L201	@long jump
.LCB1511:
	b	.L185
.L186:
	ldr	r0, .L209
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB1522
	b	.L185	@long jump
.LCB1522:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1528
	b	.L185	@long jump
.LCB1528:
	bl	sub_800F02C
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	mov	r2, #0x60
	bl	SendBlock
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L185
.L210:
	.align	2, 0
.L209:
	.word	gReceivedRemoteLinkPlayers
.L188:
	bl	GetBlockReceivedStatus
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0xf
	bne	.L185	@cond_branch
	bl	ResetBlockReceivedFlags
	mov	r4, #0x0
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r5, r0, #0x2
	mov	r7, #0x0
.L193:
	cmp	r4, r6
	beq	.L192	@cond_branch
	ldr	r2, .L211
	add	r0, r7, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L206	@cond_branch
	add	r0, r5, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L196	@cond_branch
	b	.L192
.L212:
	.align	2, 0
.L211:
	.word	gLinkPlayers
.L206:
	add	r0, r5, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L192	@cond_branch
.L196:
	lsl	r1, r4, #0x8
	ldr	r0, .L213
	add	r1, r1, r0
	ldr	r0, .L213+0x4
	mov	r2, #0x60
	bl	memcpy
.L192:
	add	r7, r7, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L193	@cond_branch
	ldr	r1, .L213+0x8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L213+0xc
	ldr	r0, [r1, #0x8]
	mov	r2, r9
	str	r0, [r2]
	ldr	r0, .L213+0x10
	ldrh	r0, [r0]
	mov	r2, r8
	strh	r0, [r2]
	ldr	r0, .L213+0x14
	str	r0, [r1, #0x8]
	mov	r0, #0x5
	mov	r1, #0x0
	bl	OpenPartyMenu
	b	.L185
.L214:
	.align	2, 0
.L213:
	.word	gBlockRecvBuffer
	.word	gUnknown_02023A00
	.word	gBattleCommunication
	.word	gMain
	.word	gBattleTypeFlags
	.word	sub_800F104
.L199:
	ldr	r0, .L215
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L185	@cond_branch
	mov	r0, #0x3
	strb	r0, [r5]
	bl	sub_800832C
	b	.L185
.L216:
	.align	2, 0
.L215:
	.word	gPaletteFade
.L201:
	ldr	r0, .L217
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L185	@cond_branch
	ldr	r1, .L217+0x4
	mov	r2, r8
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldr	r1, .L217+0x8
	mov	r2, r9
	ldr	r0, [r2]
	str	r0, [r1, #0x8]
	ldr	r0, .L217+0xc
	bl	SetMainCallback2
.L185:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	gReceivedRemoteLinkPlayers
	.word	gBattleTypeFlags
	.word	gMain
	.word	InitBattle
.Lfe9:
	.size	 sub_800F104,.Lfe9-sub_800F104
	.align	2, 0
	.globl	sub_800F298
	.type	 sub_800F298,function
	.thumb_func
sub_800F298:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L357
	ldr	r1, .L357+0x4
	add	r0, r0, r1
	strb	r6, [r0]
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	ldr	r0, .L357+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bls	.LCB1738
	b	.L220	@long jump
.LCB1738:
	lsl	r0, r0, #0x2
	ldr	r1, .L357+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L358:
	.align	2, 0
.L357:
	.word	gSharedMem
	.word	0x160cb
	.word	gBattleCommunication
	.word	.L344
	.align	2, 0
	.align	2, 0
.L344:
	.word	.L221
	.word	.L223
	.word	.L261
	.word	.L264
	.word	.L301
	.word	.L303
	.word	.L340
	.word	.L341
.L221:
	ldr	r0, .L359
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB1765
	b	.L220	@long jump
.LCB1765:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1771
	b	.L220	@long jump
.LCB1771:
	ldr	r4, .L359+0x4
	mov	r0, #0x1
	strb	r0, [r4]
	strb	r0, [r4, #0x1]
	bl	sub_800E9EC
	bl	sub_800EAAC
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	mov	r2, #0x20
	bl	SendBlock
	b	.L348
.L360:
	.align	2, 0
.L359:
	.word	gReceivedRemoteLinkPlayers
	.word	gSharedMem
.L223:
	bl	GetBlockReceivedStatus
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0xf
	beq	.LCB1804
	b	.L220	@long jump
.LCB1804:
	bl	ResetBlockReceivedFlags
	mov	r4, #0x0
	ldr	r0, .L361
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L225	@cond_branch
	cmp	r6, #0
	bne	.L226	@cond_branch
	ldr	r0, .L361+0x4
	ldrh	r1, [r0]
	mov	r2, #0xc
	b	.L349
.L362:
	.align	2, 0
.L361:
	.word	gBlockRecvBuffer
	.word	gBattleTypeFlags
.L226:
	ldr	r0, .L363
	ldrh	r1, [r0]
	mov	r2, #0x8
.L349:
	orr	r1, r1, r2
	strh	r1, [r0]
	add	r4, r4, #0x1
.L225:
	cmp	r4, #0
	bne	.L228	@cond_branch
	mov	r2, #0x0
	ldr	r1, .L363+0x4
	add	r5, r1, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x1
.L231:
	add	r1, r1, r3
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L230	@cond_branch
	ldrh	r0, [r5]
	ldrh	r7, [r1]
	cmp	r0, r7
	beq	.L231	@cond_branch
.L230:
	cmp	r2, #0x4
	bne	.L235	@cond_branch
	cmp	r6, #0
	bne	.L236	@cond_branch
	ldr	r0, .L363
	ldrh	r1, [r0]
	mov	r2, #0xc
	b	.L350
.L364:
	.align	2, 0
.L363:
	.word	gBattleTypeFlags
	.word	gBlockRecvBuffer
.L236:
	ldr	r0, .L365
	ldrh	r1, [r0]
	mov	r2, #0x8
.L350:
	orr	r1, r1, r2
	strh	r1, [r0]
	add	r4, r4, #0x1
.L235:
	cmp	r4, #0
	bne	.L228	@cond_branch
	ldr	r0, .L365+0x4
	ldrh	r2, [r0]
	ldr	r1, .L365+0x8
	add	r3, r0, #0
	ldr	r5, .L365
	cmp	r2, r1
	beq	.L351	@cond_branch
.L242:
	lsl	r0, r4, #0x8
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldr	r1, .L365+0x8
	cmp	r0, r1
	bls	.L244	@cond_branch
	cmp	r4, r6
	bne	.L240	@cond_branch
.L244:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L240	@cond_branch
	lsl	r0, r4, #0x8
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r1
	bne	.L242	@cond_branch
.L351:
	cmp	r4, r6
	beq	.L242	@cond_branch
	cmp	r4, r6
	bge	.L242	@cond_branch
.L240:
	cmp	r4, #0x4
	bne	.L246	@cond_branch
	ldrh	r0, [r5]
	mov	r1, #0xc
	b	.L352
.L366:
	.align	2, 0
.L365:
	.word	gBattleTypeFlags
	.word	gBlockRecvBuffer
	.word	0x101
.L246:
	ldrh	r0, [r5]
	mov	r1, #0x8
.L352:
	orr	r0, r0, r1
	strh	r0, [r5]
.L228:
	bl	sub_800EB08
	ldr	r0, .L367
	ldr	r1, .L367+0x4
	mov	r2, #0x96
	lsl	r2, r2, #0x1
	bl	memcpy
	ldr	r0, .L367+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L367+0xc
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	mov	r0, #0x87
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x5a
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0x12]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x10]
	add	r2, r1, #0
	ldr	r0, .L367+0x10
	add	r3, r0, #0x2
	ldr	r6, .L367+0x14
	mov	r5, #0x3f
	mov	r7, #0x80
	lsl	r7, r7, #0x1
	mov	r4, #0x3
.L251:
	ldrh	r0, [r6, #0x18]
	cmp	r0, #0x1
	beq	.L254	@cond_branch
	cmp	r0, #0x1
	bgt	.L259	@cond_branch
	cmp	r0, #0
	beq	.L253	@cond_branch
	b	.L250
.L368:
	.align	2, 0
.L367:
	.word	gSharedMem+0x1d000
	.word	gPlayerParty
	.word	sub_800DE30
	.word	gTasks
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L259:
	cmp	r0, #0x2
	beq	.L255	@cond_branch
	cmp	r0, #0x3
	beq	.L256	@cond_branch
	b	.L250
.L253:
	ldrh	r0, [r3]
	add	r1, r5, #0
	and	r1, r1, r0
	b	.L353
.L254:
	ldrh	r0, [r3]
	add	r1, r5, #0
	and	r1, r1, r0
	b	.L354
.L255:
	ldrh	r0, [r3]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x6
.L353:
	ldrh	r0, [r2, #0xe]
	orr	r1, r1, r0
	strh	r1, [r2, #0xe]
	b	.L250
.L256:
	ldrh	r0, [r3]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x6
.L354:
	ldrh	r0, [r2, #0x10]
	orr	r1, r1, r0
	strh	r1, [r2, #0x10]
.L250:
	add	r3, r3, r7
	add	r6, r6, #0x1c
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L251	@cond_branch
	bl	ZeroPlayerPartyMons
	bl	ZeroEnemyPartyMons
	ldr	r1, .L369
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L261:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2115
	b	.L220	@long jump
.LCB2115:
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L369+0x4
	mov	r2, #0xc8
	bl	SendBlock
	b	.L348
.L370:
	.align	2, 0
.L369:
	.word	gBattleCommunication
	.word	gSharedMem+0x1d000
.L264:
	bl	GetBlockReceivedStatus
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0xf
	beq	.LCB2143
	b	.L220	@long jump
.LCB2143:
	bl	ResetBlockReceivedFlags
	mov	r4, #0x0
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	mov	r8, r0
	ldr	r5, .L371
	mov	r7, #0x0
.L269:
	cmp	r4, r6
	bne	.L270	@cond_branch
	ldr	r0, .L371+0x4
	add	r0, r7, r0
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x2
	bgt	.L278	@cond_branch
	cmp	r0, #0x1
	bge	.L275	@cond_branch
	cmp	r0, #0
	beq	.L273	@cond_branch
	b	.L268
.L372:
	.align	2, 0
.L371:
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L278:
	cmp	r0, #0x3
	bne	.L268	@cond_branch
.L273:
	ldr	r0, .L373
	b	.L355
.L374:
	.align	2, 0
.L373:
	.word	gPlayerParty
.L275:
	ldr	r0, .L375
	b	.L355
.L376:
	.align	2, 0
.L375:
	.word	gPlayerParty+0x12c
.L270:
	ldr	r2, .L377
	add	r0, r7, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L346	@cond_branch
	mov	r1, r8
	add	r0, r1, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L281	@cond_branch
	b	.L280
.L378:
	.align	2, 0
.L377:
	.word	gLinkPlayers
.L346:
	mov	r1, r8
	add	r0, r1, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L280	@cond_branch
.L281:
	add	r0, r7, r2
	ldrh	r2, [r0, #0x18]
	cmp	r2, #0x2
	bgt	.L290	@cond_branch
	cmp	r2, #0x1
	bge	.L287	@cond_branch
	cmp	r2, #0
	beq	.L285	@cond_branch
	b	.L268
.L290:
	cmp	r2, #0x3
	bne	.L268	@cond_branch
.L285:
	ldr	r0, .L379
	b	.L355
.L380:
	.align	2, 0
.L379:
	.word	gPlayerParty
.L287:
	ldr	r0, .L381
	b	.L355
.L382:
	.align	2, 0
.L381:
	.word	gPlayerParty+0x12c
.L280:
	add	r0, r7, r2
	ldrh	r2, [r0, #0x18]
	cmp	r2, #0x2
	bgt	.L299	@cond_branch
	cmp	r2, #0x1
	bge	.L296	@cond_branch
	cmp	r2, #0
	beq	.L294	@cond_branch
	b	.L268
.L299:
	cmp	r2, #0x3
	bne	.L268	@cond_branch
.L294:
	ldr	r0, .L383
.L355:
	add	r1, r5, #0
	mov	r2, #0xc8
	bl	memcpy
	b	.L268
.L384:
	.align	2, 0
.L383:
	.word	gEnemyParty
.L296:
	ldr	r0, .L385
	add	r1, r5, #0
	mov	r2, #0xc8
	bl	memcpy
.L268:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r7, r7, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L269	@cond_branch
	b	.L348
.L386:
	.align	2, 0
.L385:
	.word	gEnemyParty+0x12c
.L301:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2366
	b	.L220	@long jump
.LCB2366:
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L387
	mov	r2, #0x64
	bl	SendBlock
	b	.L348
.L388:
	.align	2, 0
.L387:
	.word	gSharedMem+0x1d0c8
.L303:
	bl	GetBlockReceivedStatus
	mov	r1, #0xf
	and	r1, r1, r0
	cmp	r1, #0xf
	beq	.LCB2393
	b	.L220	@long jump
.LCB2393:
	bl	ResetBlockReceivedFlags
	mov	r4, #0x0
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	mov	r8, r0
	ldr	r5, .L389
	mov	r7, #0x0
.L308:
	cmp	r4, r6
	bne	.L309	@cond_branch
	ldr	r0, .L389+0x4
	add	r0, r7, r0
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x2
	bgt	.L317	@cond_branch
	cmp	r0, #0x1
	bge	.L314	@cond_branch
	cmp	r0, #0
	beq	.L312	@cond_branch
	b	.L307
.L390:
	.align	2, 0
.L389:
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L317:
	cmp	r0, #0x3
	bne	.L307	@cond_branch
.L312:
	ldr	r0, .L391
	b	.L356
.L392:
	.align	2, 0
.L391:
	.word	gPlayerParty+0xc8
.L314:
	ldr	r0, .L393
	b	.L356
.L394:
	.align	2, 0
.L393:
	.word	gPlayerParty+0x1f4
.L309:
	ldr	r2, .L395
	add	r0, r7, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L347	@cond_branch
	mov	r1, r8
	add	r0, r1, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L320	@cond_branch
	b	.L319
.L396:
	.align	2, 0
.L395:
	.word	gLinkPlayers
.L347:
	mov	r1, r8
	add	r0, r1, r2
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L319	@cond_branch
.L320:
	add	r0, r7, r2
	ldrh	r2, [r0, #0x18]
	cmp	r2, #0x2
	bgt	.L329	@cond_branch
	cmp	r2, #0x1
	bge	.L326	@cond_branch
	cmp	r2, #0
	beq	.L324	@cond_branch
	b	.L307
.L329:
	cmp	r2, #0x3
	bne	.L307	@cond_branch
.L324:
	ldr	r0, .L397
	b	.L356
.L398:
	.align	2, 0
.L397:
	.word	gPlayerParty+0xc8
.L326:
	ldr	r0, .L399
	b	.L356
.L400:
	.align	2, 0
.L399:
	.word	gPlayerParty+0x1f4
.L319:
	add	r0, r7, r2
	ldrh	r2, [r0, #0x18]
	cmp	r2, #0x2
	bgt	.L338	@cond_branch
	cmp	r2, #0x1
	bge	.L335	@cond_branch
	cmp	r2, #0
	beq	.L333	@cond_branch
	b	.L307
.L338:
	cmp	r2, #0x3
	bne	.L307	@cond_branch
.L333:
	ldr	r0, .L401
.L356:
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	b	.L307
.L402:
	.align	2, 0
.L401:
	.word	gEnemyParty+0xc8
.L335:
	ldr	r0, .L403
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
.L307:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r7, r7, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L308	@cond_branch
	ldr	r4, .L403+0x4
	add	r0, r4, #0
	bl	shedinja_something
	add	r0, r4, #0
	add	r0, r0, #0x64
	bl	shedinja_something
	add	r0, r4, #0
	add	r0, r0, #0xc8
	bl	shedinja_something
	mov	r1, #0x96
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	shedinja_something
	mov	r7, #0xc8
	lsl	r7, r7, #0x1
	add	r0, r4, r7
	bl	shedinja_something
	mov	r1, #0xfa
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	shedinja_something
	ldr	r4, .L403+0x8
	add	r0, r4, #0
	bl	shedinja_something
	add	r0, r4, #0
	add	r0, r0, #0x64
	bl	shedinja_something
	add	r0, r4, #0
	add	r0, r0, #0xc8
	bl	shedinja_something
	sub	r7, r7, #0x64
	add	r0, r4, r7
	bl	shedinja_something
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	shedinja_something
	add	r7, r7, #0xc8
	add	r0, r4, r7
	bl	shedinja_something
.L348:
	ldr	r1, .L403+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L220
.L404:
	.align	2, 0
.L403:
	.word	gEnemyParty+0x1f4
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattleCommunication
.L340:
	bl	sub_800B950
	ldr	r0, .L405
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	strb	r2, [r0, #0x2]
	b	.L220
.L406:
	.align	2, 0
.L405:
	.word	gBattleCommunication
.L341:
	ldr	r0, .L407
	add	r1, r0, #0x1
	bl	battle_load_something
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L220	@cond_branch
	ldr	r2, .L407+0x4
	ldr	r1, .L407+0x8
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, .L407+0xc
	str	r0, [r1]
	ldr	r0, .L407+0x10
	bl	SetMainCallback2
	ldr	r3, .L407+0x14
	ldrh	r2, [r3]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L220	@cond_branch
	ldr	r1, .L407+0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	strh	r0, [r1]
	mov	r0, #0x20
	orr	r0, r0, r2
	strh	r0, [r3]
.L220:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L408:
	.align	2, 0
.L407:
	.word	gUnknown_02024D1F
	.word	gPreBattleCallback1
	.word	gMain
	.word	sub_8010824
	.word	sub_800F808
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent
.Lfe10:
	.size	 sub_800F298,.Lfe10-sub_800F298
	.align	2, 0
	.globl	sub_800F808
	.type	 sub_800F808,function
	.thumb_func
sub_800F808:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	ldr	r0, .L410
	bl	sub_800374C
	bl	UpdatePaletteFade
	bl	RunTasks
	pop	{r0}
	bx	r0
.L411:
	.align	2, 0
.L410:
	.word	gUnknown_03004210
.Lfe11:
	.size	 sub_800F808,.Lfe11-sub_800F808
	.align	2, 0
	.globl	sub_800F828
	.type	 sub_800F828,function
	.thumb_func
sub_800F828:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldr	r1, .L413
	str	r1, [r0, #0x1c]
	bx	lr
.L414:
	.align	2, 0
.L413:
	.word	sub_800F838
.Lfe12:
	.size	 sub_800F828,.Lfe12-sub_800F828
	.align	2, 0
	.globl	sub_800F838
	.type	 sub_800F838,function
	.thumb_func
sub_800F838:
	push	{r4, r5, lr}
	add	r3, r0, #0
	ldr	r5, .L431
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	cmp	r1, #0x1
	beq	.L418	@cond_branch
	cmp	r1, #0x1
	bgt	.L430	@cond_branch
	cmp	r1, #0
	beq	.L417	@cond_branch
	b	.L416
.L432:
	.align	2, 0
.L431:
	.word	gSharedMem
.L430:
	cmp	r1, #0x2
	beq	.L426	@cond_branch
	b	.L416
.L417:
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	strh	r1, [r3, #0x30]
	ldr	r0, .L433
	strh	r0, [r3, #0x32]
	strh	r1, [r3, #0x34]
	mov	r0, #0x1
	strh	r0, [r3, #0x36]
.L418:
	ldrh	r0, [r3, #0x36]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x36]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L416	@cond_branch
	mov	r0, #0x2
	strh	r0, [r3, #0x36]
	mov	r4, #0x30
	ldrsh	r2, [r3, r4]
	mov	r0, #0x34
	ldrsh	r1, [r3, r0]
	lsl	r1, r1, #0x5
	add	r2, r2, r1
	mov	r4, #0x32
	ldrsh	r0, [r3, r4]
	sub	r0, r0, r1
	mov	r4, #0x3d
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	lsl	r2, r2, #0x1
	add	r2, r2, r5
	mov	r1, #0x1c
.L423:
	strh	r4, [r2]
	strh	r4, [r0]
	add	r0, r0, #0x4
	add	r2, r2, #0x4
	sub	r1, r1, #0x2
	cmp	r1, #0
	bge	.L423	@cond_branch
	ldrh	r0, [r3, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L416	@cond_branch
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	mov	r0, #0x20
	strh	r0, [r3, #0x30]
	b	.L416
.L434:
	.align	2, 0
.L433:
	.word	0x281
.L426:
	ldrh	r0, [r3, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bne	.L416	@cond_branch
	ldr	r0, .L435
	bl	SetMainCallback2
.L416:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L436:
	.align	2, 0
.L435:
	.word	sub_800E7C4
.Lfe13:
	.size	 sub_800F838,.Lfe13-sub_800F838
	.align	2, 0
	.globl	CreateNPCTrainerParty
	.type	 CreateNPCTrainerParty,function
	.thumb_func
CreateNPCTrainerParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffdc
	str	r0, [sp, #0x10]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp, #0x14]
	mov	r0, #0x0
	mov	r9, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L438	@cond_branch
	mov	r0, #0x0
	b	.L492
.L438:
	ldr	r0, .L494
	ldrh	r1, [r0]
	ldr	r0, .L494+0x4
	and	r0, r0, r1
	ldr	r1, [sp, #0x14]
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x20]
	cmp	r0, #0x8
	beq	.LCB2951
	b	.L439	@long jump
.LCB2951:
	bl	ZeroEnemyPartyMons
	mov	r2, #0x0
	str	r2, [sp, #0x18]
	ldr	r2, .L494+0x8
	ldr	r1, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r0, r1, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldr	r4, [sp, #0x18]
	b	.L493
.L495:
	.align	2, 0
.L494:
	.word	gBattleTypeFlags
	.word	0x908
	.word	gTrainers
.L443:
	ldr	r3, [sp, #0x14]
	add	r0, r1, r3
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0x1
	bne	.L444	@cond_branch
	mov	r4, #0x80
	mov	sl, r4
	b	.L445
.L444:
	ldrb	r1, [r1, #0x2]
	mov	r0, #0x80
	and	r0, r0, r1
	mov	r1, #0x88
	mov	sl, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	mov	r2, #0x78
	mov	sl, r2
.L445:
	mov	r6, #0x0
	ldr	r0, .L496
	ldr	r2, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r3, r0, #0x4
	add	r1, r1, r3
	ldrb	r1, [r1]
	add	r4, r0, #0
	ldr	r0, [sp, #0x18]
	add	r0, r0, #0x1
	str	r0, [sp, #0x1c]
	cmp	r1, #0xff
	beq	.L449	@cond_branch
.L451:
	ldr	r0, [sp, #0x14]
	add	r1, r2, r0
	lsl	r1, r1, #0x3
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L451	@cond_branch
.L449:
	add	r2, r4, #0
	ldr	r1, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r0, r1, r3
	lsl	r1, r0, #0x3
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L460	@cond_branch
	cmp	r0, #0x1
	bgt	.L490	@cond_branch
	cmp	r0, #0
	beq	.L454	@cond_branch
	b	.L442
.L497:
	.align	2, 0
.L496:
	.word	gTrainers
.L490:
	cmp	r0, #0x2
	bne	.LCB3078
	b	.L471	@long jump
.LCB3078:
	cmp	r0, #0x3
	bne	.LCB3080
	b	.L477	@long jump
.LCB3080:
	b	.L442
.L454:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r4, [r0]
	mov	r6, #0x0
	ldr	r0, [sp, #0x18]
	lsl	r2, r0, #0x3
	add	r0, r2, r4
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb
	mul	r0, r0, r1
	ldr	r1, .L498
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r5, r2, #0
	cmp	r0, #0xff
	beq	.L456	@cond_branch
	add	r3, r1, #0
	mov	r7, #0xb
.L458:
	add	r0, r2, r4
	ldrh	r0, [r0, #0x4]
	mov	r1, r0
	mul	r1, r1, r7
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L458	@cond_branch
.L456:
	mov	r2, r9
	lsl	r0, r2, #0x8
	add	sl, sl, r0
	add	r4, r5, r4
	ldrh	r1, [r4]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	mov	r1, #0xff
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, [sp, #0x18]
	mov	r1, #0x64
	mov	r0, r3
	mul	r0, r0, r1
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldrh	r1, [r4, #0x4]
	ldrb	r2, [r4, #0x2]
	mov	r3, #0x1
	str	r3, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	mov	r3, #0x2
	str	r3, [sp, #0x8]
	mov	r3, #0x0
	str	r3, [sp, #0xc]
	add	r3, r6, #0
	bl	CreateMon
	b	.L442
.L499:
	.align	2, 0
.L498:
	.word	gSpeciesNames
.L460:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r7, [r0]
	mov	r6, #0x0
	ldr	r4, [sp, #0x18]
	lsl	r2, r4, #0x4
	add	r0, r2, r7
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb
	mul	r0, r0, r1
	ldr	r1, .L500
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r8, r2
	cmp	r0, #0xff
	beq	.L462	@cond_branch
	add	r3, r1, #0
	mov	r4, #0xb
.L464:
	add	r0, r2, r7
	ldrh	r0, [r0, #0x4]
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L464	@cond_branch
.L462:
	mov	r2, r9
	lsl	r0, r2, #0x8
	add	sl, sl, r0
	mov	r3, r8
	add	r4, r3, r7
	ldrh	r1, [r4]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	mov	r1, #0xff
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, [sp, #0x18]
	mov	r1, #0x64
	mov	r5, r0
	mul	r5, r5, r1
	ldr	r2, [sp, #0x10]
	add	r5, r2, r5
	ldrh	r1, [r4, #0x4]
	ldrb	r2, [r4, #0x2]
	mov	r0, #0x1
	str	r0, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	add	r3, r6, #0
	bl	CreateMon
	mov	r6, #0x0
	mov	r0, r8
	add	r0, r0, #0x6
	add	r4, r7, r0
.L469:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r6, #0
	add	r1, r1, #0x11
	ldrh	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L500+0x4
	add	r2, r2, r0
	add	r0, r5, #0
	bl	SetMonData
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L469	@cond_branch
	b	.L442
.L501:
	.align	2, 0
.L500:
	.word	gSpeciesNames
	.word	gBattleMoves+0x4
.L471:
	add	r0, r2, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r4, [r0]
	mov	r6, #0x0
	ldr	r0, [sp, #0x18]
	lsl	r2, r0, #0x3
	add	r0, r2, r4
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb
	mul	r0, r0, r1
	ldr	r1, .L502
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r5, r2, #0
	cmp	r0, #0xff
	beq	.L473	@cond_branch
	add	r3, r1, #0
	mov	r7, #0xb
.L475:
	add	r0, r2, r4
	ldrh	r0, [r0, #0x4]
	mov	r1, r0
	mul	r1, r1, r7
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L475	@cond_branch
.L473:
	mov	r2, r9
	lsl	r0, r2, #0x8
	add	sl, sl, r0
	add	r5, r5, r4
	ldrh	r1, [r5]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	mov	r1, #0xff
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, [sp, #0x18]
	mov	r0, #0x64
	mov	r4, r3
	mul	r4, r4, r0
	ldr	r1, [sp, #0x10]
	add	r4, r1, r4
	ldrh	r1, [r5, #0x4]
	ldrb	r2, [r5, #0x2]
	mov	r0, #0x1
	str	r0, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	add	r3, r6, #0
	bl	CreateMon
	add	r5, r5, #0x6
	add	r0, r4, #0
	mov	r1, #0xc
	add	r2, r5, #0
	bl	SetMonData
	b	.L442
.L503:
	.align	2, 0
.L502:
	.word	gSpeciesNames
.L477:
	add	r0, r4, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r7, [r0]
	mov	r6, #0x0
	ldr	r4, [sp, #0x18]
	lsl	r2, r4, #0x4
	add	r0, r2, r7
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb
	mul	r0, r0, r1
	ldr	r1, .L504
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r8, r2
	cmp	r0, #0xff
	beq	.L479	@cond_branch
	add	r3, r1, #0
	mov	r4, #0xb
.L481:
	add	r0, r2, r7
	ldrh	r0, [r0, #0x4]
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r6, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	add	r9, r9, r0
	add	r6, r6, #0x1
	add	r1, r6, r1
	add	r1, r1, r3
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L481	@cond_branch
.L479:
	mov	r2, r9
	lsl	r0, r2, #0x8
	add	sl, sl, r0
	mov	r3, r8
	add	r5, r3, r7
	ldrh	r1, [r5]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	mov	r1, #0xff
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, [sp, #0x18]
	mov	r1, #0x64
	mov	r4, r0
	mul	r4, r4, r1
	ldr	r2, [sp, #0x10]
	add	r4, r2, r4
	ldrh	r1, [r5, #0x4]
	ldrb	r2, [r5, #0x2]
	mov	r0, #0x1
	str	r0, [sp]
	mov	r3, sl
	str	r3, [sp, #0x4]
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	add	r3, r6, #0
	bl	CreateMon
	add	r5, r5, #0x6
	add	r0, r4, #0
	mov	r1, #0xc
	add	r2, r5, #0
	bl	SetMonData
	mov	r6, #0x0
	add	r5, r4, #0
	mov	r0, r8
	add	r0, r0, #0x8
	add	r4, r7, r0
.L486:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r6, #0
	add	r1, r1, #0x11
	ldrh	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L504+0x4
	add	r2, r2, r0
	add	r0, r5, #0
	bl	SetMonData
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L486	@cond_branch
.L442:
	ldr	r4, [sp, #0x1c]
	str	r4, [sp, #0x18]
	ldr	r2, .L504+0x8
	ldr	r1, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r0, r1, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	add	r0, r0, #0x20
.L493:
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.LCB3543
	b	.L443	@long jump
.LCB3543:
	ldr	r2, .L504+0xc
	ldr	r1, .L504+0x8
	ldr	r4, [sp, #0x20]
	ldr	r3, [sp, #0x14]
	add	r0, r4, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x18]
	ldrh	r1, [r2]
	orr	r0, r0, r1
	strh	r0, [r2]
.L439:
	ldr	r0, .L504+0x8
	ldr	r4, [sp, #0x20]
	ldr	r2, [sp, #0x14]
	add	r1, r4, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
.L492:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L505:
	.align	2, 0
.L504:
	.word	gSpeciesNames
	.word	gBattleMoves+0x4
	.word	gTrainers
	.word	gBattleTypeFlags
.Lfe14:
	.size	 CreateNPCTrainerParty,.Lfe14-CreateNPCTrainerParty
	.align	2, 0
	.globl	sub_800FCD4
	.type	 sub_800FCD4,function
	.thumb_func
sub_800FCD4:
	push	{lr}
	ldr	r0, .L508
	ldrh	r0, [r0]
	sub	r0, r0, #0x6f
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x30
	bhi	.L507	@cond_branch
	ldr	r1, .L508+0x4
	mov	r2, #0x98
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	strh	r0, [r1]
.L507:
	pop	{r0}
	bx	r0
.L509:
	.align	2, 0
.L508:
	.word	0x4000006
	.word	0x4000008
.Lfe15:
	.size	 sub_800FCD4,.Lfe15-sub_800FCD4
	.align	2, 0
	.globl	sub_800FCFC
	.type	 sub_800FCFC,function
	.thumb_func
sub_800FCFC:
	push	{lr}
	bl	Random
	ldr	r1, .L511
	ldr	r0, .L511+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L511+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L511+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L511+0x10
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L511+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L511+0x18
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L511+0x1c
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r0, .L511+0x20
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x22
	ldr	r0, .L511+0x24
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x4
	ldr	r0, .L511+0x28
	ldrh	r0, [r0]
	strh	r0, [r1]
	sub	r1, r1, #0x2
	ldr	r0, .L511+0x2c
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x4
	ldr	r0, .L511+0x30
	ldrh	r0, [r0]
	strh	r0, [r1]
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	sub_8089668
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	0x4000010
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
	.word	gUnknown_030042C4
	.word	gUnknown_03004240
	.word	gUnknown_03004200
	.word	gUnknown_03004244
.Lfe16:
	.size	 sub_800FCFC,.Lfe16-sub_800FCFC
	.align	2, 0
	.globl	nullsub_36
	.type	 nullsub_36,function
	.thumb_func
nullsub_36:
	bx	lr
.Lfe17:
	.size	 nullsub_36,.Lfe17-nullsub_36
	.align	2, 0
	.globl	sub_800FDB0
	.type	 sub_800FDB0,function
	.thumb_func
sub_800FDB0:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L515	@cond_branch
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	ldrh	r1, [r5, #0x30]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	b	.L516
.L515:
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	asr	r0, r0, #0x8
	ldrh	r1, [r5, #0x30]
	sub	r1, r1, r0
	strh	r1, [r5, #0x20]
.L516:
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L517	@cond_branch
	ldr	r4, .L518
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	FreeSpriteOamMatrix
	add	r0, r5, #0
	bl	DestroySprite
.L517:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L519:
	.align	2, 0
.L518:
	.word	0x2710
.Lfe18:
	.size	 sub_800FDB0,.Lfe18-sub_800FDB0
	.align	2, 0
	.globl	sub_800FE20
	.type	 sub_800FE20,function
	.thumb_func
sub_800FE20:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L521
	str	r0, [r4, #0x1c]
	mov	r0, #0x68
	bl	PlaySE
	pop	{r4}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	sub_800FDB0
.Lfe19:
	.size	 sub_800FE20,.Lfe19-sub_800FE20
	.align	2, 0
	.globl	sub_800FE40
	.type	 sub_800FE40,function
	.thumb_func
sub_800FE40:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	ldr	r0, .L558
	ldr	r2, .L558+0x4
	add	r0, r0, r2
	ldrb	r2, [r0]
	ldr	r0, .L558+0x8
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L524	@cond_branch
	ldr	r1, .L558+0xc
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x1
	beq	.L529	@cond_branch
	cmp	r0, #0x1
	bgt	.L532	@cond_branch
	cmp	r0, #0
	beq	.L524	@cond_branch
	b	.L533
.L559:
	.align	2, 0
.L558:
	.word	gSharedMem
	.word	0x160cb
	.word	gBattleTypeFlags
	.word	gLinkPlayers
.L532:
	cmp	r0, #0x2
	beq	.L524	@cond_branch
	cmp	r0, #0x3
	bne	.L533	@cond_branch
.L529:
	ldr	r1, .L560
	str	r1, [sp, #0x4]
	ldr	r2, .L560+0x4
	str	r2, [sp, #0x8]
	b	.L533
.L561:
	.align	2, 0
.L560:
	.word	gEnemyParty
	.word	gPlayerParty
.L524:
	ldr	r3, .L562
	str	r3, [sp, #0x4]
	ldr	r0, .L562+0x4
	str	r0, [sp, #0x8]
.L533:
	mov	r7, #0x0
	mov	r1, #0x0
	mov	r8, r1
	ldr	r2, [sp]
	lsl	r2, r2, #0x2
	str	r2, [sp, #0xc]
	mov	r3, #0xce
	lsl	r3, r3, #0x1
	mov	sl, r3
	mov	r9, r1
.L537:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	ldr	r0, [sp, #0x4]
	add	r4, r0, r4
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L536	@cond_branch
	cmp	r5, sl
	beq	.L539	@cond_branch
	cmp	r6, #0
	beq	.L539	@cond_branch
	cmp	r1, #0
	bne	.L539	@cond_branch
	mov	r0, #0x1
	mov	r2, r9
	lsl	r0, r0, r2
	orr	r7, r7, r0
.L539:
	cmp	r5, #0
	beq	.L536	@cond_branch
	cmp	r6, #0
	beq	.L541	@cond_branch
	cmp	r5, sl
	beq	.L542	@cond_branch
	cmp	r1, #0
	beq	.L541	@cond_branch
.L542:
	mov	r0, #0x2
	mov	r3, r9
	lsl	r0, r0, r3
	orr	r7, r7, r0
.L541:
	cmp	r5, #0
	beq	.L536	@cond_branch
	cmp	r5, sl
	beq	.L536	@cond_branch
	cmp	r6, #0
	bne	.L536	@cond_branch
	mov	r0, #0x3
	mov	r1, r9
	lsl	r0, r0, r1
	orr	r7, r7, r0
.L536:
	mov	r2, #0x2
	add	r9, r9, r2
	mov	r3, #0x1
	add	r8, r8, r3
	mov	r0, r8
	cmp	r0, #0x5
	ble	.L537	@cond_branch
	ldr	r1, .L562+0x8
	ldr	r2, [sp, #0xc]
	ldr	r3, [sp]
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r7, [r0, #0xe]
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	mov	sl, r1
	mov	r9, r0
.L549:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	ldr	r2, [sp, #0x8]
	add	r4, r2, r4
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L548	@cond_branch
	cmp	r5, sl
	beq	.L551	@cond_branch
	cmp	r6, #0
	beq	.L551	@cond_branch
	cmp	r1, #0
	bne	.L551	@cond_branch
	mov	r0, #0x1
	mov	r3, r9
	lsl	r0, r0, r3
	orr	r7, r7, r0
.L551:
	cmp	r5, #0
	beq	.L548	@cond_branch
	cmp	r6, #0
	beq	.L553	@cond_branch
	cmp	r5, sl
	beq	.L554	@cond_branch
	cmp	r1, #0
	beq	.L553	@cond_branch
.L554:
	mov	r0, #0x2
	mov	r1, r9
	lsl	r0, r0, r1
	orr	r7, r7, r0
.L553:
	cmp	r5, #0
	beq	.L548	@cond_branch
	cmp	r5, sl
	beq	.L548	@cond_branch
	cmp	r6, #0
	bne	.L548	@cond_branch
	mov	r0, #0x3
	mov	r2, r9
	lsl	r0, r0, r2
	orr	r7, r7, r0
.L548:
	mov	r3, #0x2
	add	r9, r9, r3
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L549	@cond_branch
	ldr	r1, .L562+0x8
	ldr	r2, [sp, #0xc]
	ldr	r3, [sp]
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r7, [r0, #0x10]
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L563:
	.align	2, 0
.L562:
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gTasks
.Lfe20:
	.size	 sub_800FE40,.Lfe20-sub_800FE40
	.align	2, 0
	.globl	c2_8011A1C
	.type	 c2_8011A1C,function
	.thumb_func
c2_8011A1C:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r4, #0x0
	str	r4, [sp]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L575
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L575+0x4
	strh	r4, [r0]
	sub	r0, r0, #0xc
	mov	r2, #0xf0
	strh	r2, [r0]
	add	r0, r0, #0x4
	ldr	r3, .L575+0x8
	add	r1, r3, #0
	strh	r1, [r0]
	add	r0, r0, #0x4
	strh	r4, [r0]
	add	r0, r0, #0x2
	strh	r4, [r0]
	ldr	r0, .L575+0xc
	strh	r2, [r0]
	ldr	r0, .L575+0x10
	strh	r1, [r0]
	bl	dp12_8087EA4
	ldr	r0, .L575+0x14
	mov	r3, #0xf0
	mov	r4, #0xf0
	lsl	r4, r4, #0x3
	add	r2, r0, r4
	mov	r1, #0x4f
.L568:
	strh	r3, [r0]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L568	@cond_branch
	mov	r1, #0x50
	ldr	r5, .L575+0x18
	ldr	r0, .L575+0x14
	ldr	r3, .L575+0x1c
	mov	r4, #0x82
	lsl	r4, r4, #0x4
	add	r2, r0, r4
	add	r0, r0, #0xa0
.L573:
	.code	16
	strh	r3, [r0]
	strh	r3, [r2]
	add	r2, r2, #0x2
	add	r0, r0, #0x2
	add	r1, r1, #0x1
	cmp	r1, #0x9f
	ble	.L573	@cond_branch
	add	r0, r5, #0
	bl	SetUpWindowConfig
	bl	ResetPaletteFade
	ldr	r0, .L575+0x20
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r0, .L575+0x24
	strh	r4, [r0]
	ldr	r0, .L575+0x28
	strh	r4, [r0]
	ldr	r0, .L575+0x2c
	strh	r4, [r0]
	ldr	r0, .L575+0x30
	strh	r4, [r0]
	ldr	r0, .L575+0x34
	strh	r4, [r0]
	ldr	r0, .L575+0x38
	strh	r4, [r0]
	ldr	r0, .L575+0x3c
	strh	r4, [r0]
	ldr	r0, .L575+0x40
	add	r1, r5, #0
	bl	InitWindowFromConfig
	ldr	r0, .L575+0x44
	ldr	r1, .L575+0x48
	bl	InitWindowFromConfig
	ldr	r0, .L575+0x4c
	ldr	r1, .L575+0x50
	bl	InitWindowFromConfig
	bl	sub_800D6D4
	ldr	r0, .L575+0x54
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	bl	sub_800D74C
	bl	ResetSpriteData
	bl	ResetTasks
	bl	sub_800E23C
	ldr	r1, .L575+0x58
	mov	r0, #0x37
	strh	r0, [r1]
	bl	FreeAllSpritePalettes
	ldr	r1, .L575+0x5c
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, .L575+0x60
	bl	SetVBlankCallback
	ldr	r0, .L575+0x64
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L575+0x68
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x87
	lsl	r2, r2, #0x1
	strh	r2, [r1, #0xa]
	mov	r2, #0x5a
	strh	r2, [r1, #0xc]
	mov	r2, #0x1
	strh	r2, [r1, #0x12]
	bl	sub_800FE40
	ldr	r0, .L575+0x6c
	bl	SetMainCallback2
	ldr	r0, .L575+0x70
	strb	r4, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L576:
	.align	2, 0
.L575:
	.word	0x5006000
	.word	0x400004c
	.word	0x5051
	.word	gUnknown_030042C4
	.word	gUnknown_03004240
	.word	gUnknown_03004DE0
	.word	gWindowConfig_81E6C58
	.word	0xff10
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gUnknown_030041B0
	.word	gUnknown_030041B8
	.word	gUnknown_03004210
	.word	gUnknown_030041D0
	.word	gWindowConfig_81E71D0
	.word	gUnknown_03004250
	.word	gWindowConfig_81E71EC
	.word	gUnknown_08D004E0
	.word	0x400004a
	.word	gReservedSpritePaletteCount
	.word	sub_800FCFC
	.word	sub_800DE30
	.word	gTasks
	.word	sub_80101B8
	.word	gBattleCommunication
.Lfe21:
	.size	 c2_8011A1C,.Lfe21-c2_8011A1C
	.align	2, 0
	.globl	sub_80101B8
	.type	 sub_80101B8,function
	.thumb_func
sub_80101B8:
	push	{lr}
	bl	c2_081284E0
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	bl	RunTasks
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 sub_80101B8,.Lfe22-sub_80101B8
	.align	2, 0
	.globl	c2_081284E0
	.type	 c2_081284E0,function
	.thumb_func
c2_081284E0:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r4, .L589
	ldrb	r0, [r4]
	cmp	r0, #0x1
	beq	.L581	@cond_branch
	cmp	r0, #0x1
	bgt	.L587	@cond_branch
	cmp	r0, #0
	beq	.L580	@cond_branch
	b	.L579
.L590:
	.align	2, 0
.L589:
	.word	gBattleCommunication
.L587:
	cmp	r0, #0x2
	beq	.L583	@cond_branch
	b	.L579
.L580:
	mov	r0, #0xff
	strb	r0, [r4, #0x1]
	b	.L588
.L581:
	ldrb	r0, [r4, #0x1]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x1]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L579	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
.L588:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L579
.L583:
	ldr	r0, .L591
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L579	@cond_branch
	ldr	r0, .L591+0x4
	ldr	r0, [r0, #0x8]
	bl	SetMainCallback2
.L579:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L592:
	.align	2, 0
.L591:
	.word	gPaletteFade
	.word	gMain
.Lfe23:
	.size	 c2_081284E0,.Lfe23-c2_081284E0
	.align	2, 0
	.globl	oac_poke_opponent
	.type	 oac_poke_opponent,function
	.thumb_func
oac_poke_opponent:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L594
	str	r1, [r0, #0x1c]
	mov	r1, #0x0
	bl	StartSpriteAnimIfDifferent
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	ldr	r1, .L594+0x4
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0xa
	mov	r3, #0xa
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L595:
	.align	2, 0
.L594:
	.word	sub_8010278
	.word	0x3def
.Lfe24:
	.size	 oac_poke_opponent,.Lfe24-oac_poke_opponent
	.align	2, 0
	.globl	sub_8010278
	.type	 sub_8010278,function
	.thumb_func
sub_8010278:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L599
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L597	@cond_branch
	ldrh	r0, [r2, #0x24]
	add	r0, r0, #0x2
	strh	r0, [r2, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L597	@cond_branch
	ldr	r0, .L599+0x4
	str	r0, [r2, #0x1c]
	ldrh	r0, [r2, #0x32]
	mov	r1, #0x19
	bl	PlayCry1
.L597:
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	gUnknown_02024DE8
	.word	sub_80102AC
.Lfe25:
	.size	 sub_8010278,.Lfe25-sub_8010278
	.align	2, 0
	.globl	sub_80102AC
	.type	 sub_80102AC,function
	.thumb_func
sub_80102AC:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L602	@cond_branch
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_804777C
	ldr	r1, .L603
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldr	r0, .L603+0x4
	str	r0, [r4, #0x1c]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnimIfDifferent
	mov	r0, #0x80
	lsl	r0, r0, #0xa
	ldr	r1, .L603+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0xa
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L602:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L604:
	.align	2, 0
.L603:
	.word	gHealthboxIDs
	.word	nullsub_37
	.word	0x3def
.Lfe26:
	.size	 sub_80102AC,.Lfe26-sub_80102AC
	.align	2, 0
	.globl	nullsub_37
	.type	 nullsub_37,function
	.thumb_func
nullsub_37:
	bx	lr
.Lfe27:
	.size	 nullsub_37,.Lfe27-nullsub_37
	.align	2, 0
	.globl	unref_sub_801030C
	.type	 unref_sub_801030C,function
	.thumb_func
unref_sub_801030C:
	mov	r1, #0x6
	strh	r1, [r0, #0x34]
	mov	r1, #0x1
	strh	r1, [r0, #0x36]
	ldr	r1, .L607
	str	r1, [r0, #0x1c]
	bx	lr
.L608:
	.align	2, 0
.L607:
	.word	sub_8010320
.Lfe28:
	.size	 unref_sub_801030C,.Lfe28-unref_sub_801030C
	.align	2, 0
	.globl	sub_8010320
	.type	 sub_8010320,function
	.thumb_func
sub_8010320:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x36]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x36]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L610	@cond_branch
	mov	r0, #0x8
	strh	r0, [r3, #0x36]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r4, #0x5
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L610	@cond_branch
	ldrb	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldr	r0, .L612
	str	r0, [r3, #0x1c]
	ldr	r0, .L612+0x4
	str	r2, [r0]
.L610:
	pop	{r4}
	pop	{r0}
	bx	r0
.L613:
	.align	2, 0
.L612:
	.word	nullsub_37
	.word	gUnknown_03004284
.Lfe29:
	.size	 sub_8010320,.Lfe29-sub_8010320
	.align	2, 0
	.globl	sub_8010384
	.type	 sub_8010384,function
	.thumb_func
sub_8010384:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r6, #0x2
	ldr	r0, .L627
	add	r1, r1, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L615	@cond_branch
	add	r4, r0, #0
	b	.L616
.L628:
	.align	2, 0
.L627:
	.word	gSharedMem+0x17800
.L615:
	mov	r0, r9
	ldrh	r4, [r0, #0x32]
.L616:
	ldr	r1, .L629
	lsl	r0, r6, #0x1
	add	r5, r0, r1
	ldrh	r0, [r5]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r7, .L629+0x4
	add	r0, r0, r7
	mov	r1, #0x0
	bl	GetMonData
	cmp	r4, #0xc9
	bne	.L617	@cond_branch
	ldrh	r0, [r5]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L618	@cond_branch
	mov	r0, #0xc9
	b	.L619
.L630:
	.align	2, 0
.L629:
	.word	gBattlePartyID
	.word	gEnemyParty
.L618:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L619:
	ldr	r1, .L631
	lsl	r0, r0, #0x2
	b	.L625
.L632:
	.align	2, 0
.L631:
	.word	gMonFrontPicCoords
.L617:
	ldr	r0, .L633
	cmp	r4, r0
	bne	.L621	@cond_branch
	ldr	r0, .L633+0x4
	ldr	r1, .L633+0x8
	add	r1, r6, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L620
.L634:
	.align	2, 0
.L633:
	.word	0x181
	.word	gCastformFrontSpriteCoords
	.word	gBattleMonForms
.L621:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bls	.L623	@cond_branch
	ldr	r0, .L635
	b	.L626
.L636:
	.align	2, 0
.L635:
	.word	gMonFrontPicCoords
.L623:
	ldr	r1, .L637
	lsl	r0, r4, #0x2
.L625:
	add	r0, r0, r1
.L626:
	ldrb	r0, [r0, #0x1]
.L620:
	lsr	r1, r0, #0x3
	mov	r0, #0x8
	sub	r0, r0, r1
	mov	r1, r9
	strh	r0, [r1, #0x34]
	mov	r0, #0x1
	strh	r0, [r1, #0x36]
	ldr	r0, .L637+0x4
	str	r0, [r1, #0x1c]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	gMonFrontPicCoords
	.word	sub_8010494
.Lfe30:
	.size	 sub_8010384,.Lfe30-sub_8010384
	.align	2, 0
	.globl	sub_8010494
	.type	 sub_8010494,function
	.thumb_func
sub_8010494:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L640	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L641	@cond_branch
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	b	.L640
.L641:
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankIdentity
	ldr	r1, .L648
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r2, .L648+0x4
	mov	r3, #0x2e
	ldrsh	r1, [r4, r3]
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0xb
	ldr	r2, [r0]
	add	r2, r2, r1
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	mov	r1, #0x0
	mov	r0, #0xff
.L646:
	strb	r1, [r2]
	add	r2, r2, #0x1
	sub	r0, r0, #0x1
	cmp	r0, #0
	bge	.L646	@cond_branch
	ldr	r0, .L648+0x4
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	add	r1, r1, r0
	ldrb	r1, [r1]
	add	r0, r4, #0
	bl	StartSpriteAnim
.L640:
	pop	{r4}
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	gUnknown_081FAF4C
	.word	gBattleMonForms
.Lfe31:
	.size	 sub_8010494,.Lfe31-sub_8010494
	.align	2, 0
	.globl	sub_8010520
	.type	 sub_8010520,function
	.thumb_func
sub_8010520:
	mov	r1, #0x8
	strh	r1, [r0, #0x34]
	add	r1, r0, #0
	add	r1, r1, #0x3e
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	strh	r1, [r0, #0x36]
	ldr	r1, .L651
	str	r1, [r0, #0x1c]
	bx	lr
.L652:
	.align	2, 0
.L651:
	.word	sub_801053C
.Lfe32:
	.size	 sub_8010520,.Lfe32-sub_8010520
	.align	2, 0
	.globl	sub_801053C
	.type	 sub_801053C,function
	.thumb_func
sub_801053C:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L654	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	mov	r0, #0x8
	strh	r0, [r3, #0x34]
.L654:
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 sub_801053C,.Lfe33-sub_801053C
	.align	2, 0
	.globl	sub_8010574
	.type	 sub_8010574,function
	.thumb_func
sub_8010574:
	mov	r1, #0x3e
	add	r1, r1, r0
	mov	ip, r1
	mov	r1, #0x1
	ldrh	r2, [r0, #0x36]
	and	r2, r2, r1
	lsl	r2, r2, #0x2
	mov	r1, ip
	ldrb	r3, [r1]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r2
	mov	r2, ip
	strb	r1, [r2]
	mov	r1, #0x0
	strh	r1, [r0, #0x36]
	ldr	r1, .L656
	str	r1, [r0, #0x1c]
	bx	lr
.L657:
	.align	2, 0
.L656:
	.word	nullsub_37
.Lfe34:
	.size	 sub_8010574,.Lfe34-sub_8010574
	.align	2, 0
	.globl	sub_80105A0
	.type	 sub_80105A0,function
	.thumb_func
sub_80105A0:
	ldr	r1, .L659
	str	r1, [r0, #0x1c]
	bx	lr
.L660:
	.align	2, 0
.L659:
	.word	oac_poke_ally_
.Lfe35:
	.size	 sub_80105A0,.Lfe35-sub_80105A0
	.align	2, 0
	.globl	oac_poke_ally_
	.type	 oac_poke_ally_,function
	.thumb_func
oac_poke_ally_:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L664
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L662	@cond_branch
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, #0x2
	strh	r0, [r2, #0x24]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L662	@cond_branch
	ldr	r0, .L664+0x4
	str	r0, [r2, #0x1c]
	strh	r1, [r2, #0x30]
.L662:
	pop	{r0}
	bx	r0
.L665:
	.align	2, 0
.L664:
	.word	gUnknown_02024DE8
	.word	nullsub_86
.Lfe36:
	.size	 oac_poke_ally_,.Lfe36-oac_poke_ally_
	.align	2, 0
	.globl	sub_80105DC
	.type	 sub_80105DC,function
	.thumb_func
sub_80105DC:
	ldr	r1, .L667
	str	r1, [r0, #0x1c]
	bx	lr
.L668:
	.align	2, 0
.L667:
	.word	nullsub_86
.Lfe37:
	.size	 sub_80105DC,.Lfe37-sub_80105DC
	.align	2, 0
	.globl	nullsub_86
	.type	 nullsub_86,function
	.thumb_func
nullsub_86:
	bx	lr
.Lfe38:
	.size	 nullsub_86,.Lfe38-nullsub_86
	.align	2, 0
	.globl	sub_80105EC
	.type	 sub_80105EC,function
	.thumb_func
sub_80105EC:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L672
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L671	@cond_branch
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x26]
	add	r0, r0, r1
	strh	r0, [r2, #0x26]
.L671:
	pop	{r0}
	bx	r0
.L673:
	.align	2, 0
.L672:
	.word	gUnknown_02024DE8
.Lfe39:
	.size	 sub_80105EC,.Lfe39-sub_80105EC
	.align	2, 0
	.globl	dp11b_obj_instanciate
	.type	 dp11b_obj_instanciate,function
	.thumb_func
dp11b_obj_instanciate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	cmp	r1, #0
	beq	.L675	@cond_branch
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L683
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	b	.L681
.L684:
	.align	2, 0
.L683:
	.word	gSharedMem+0x17810
.L675:
	lsl	r2, r4, #0x1
	add	r0, r2, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L685
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
.L681:
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	bne	.L674	@cond_branch
	ldr	r0, .L685+0x4
	bl	CreateInvisibleSpriteWithCallback
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r8
	cmp	r0, #0x1
	bne	.L679	@cond_branch
	ldr	r0, .L685+0x8
	add	r0, r4, r0
	ldrb	r7, [r0]
	add	r0, r6, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L685
	add	r0, r0, r1
	strb	r5, [r0, #0x2]
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r2, .L685+0xc
	lsl	r3, r5, #0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x80
	b	.L682
.L686:
	.align	2, 0
.L685:
	.word	gSharedMem+0x17810
	.word	objc_dp11b_pingpong
	.word	gHealthboxIDs
	.word	gSprites
.L679:
	ldr	r0, .L687
	add	r0, r4, r0
	ldrb	r7, [r0]
	add	r0, r6, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L687+0x4
	add	r0, r0, r1
	strb	r5, [r0, #0x3]
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r2, .L687+0x8
	lsl	r3, r5, #0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0xc0
.L682:
	strh	r1, [r0, #0x2e]
	add	r4, r2, #0
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, r9
	lsl	r0, r2, #0x18
	asr	r0, r0, #0x18
	mov	r2, #0x0
	strh	r0, [r1, #0x30]
	mov	r3, sl
	lsl	r0, r3, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x32]
	strh	r7, [r1, #0x34]
	mov	r0, r8
	strh	r0, [r1, #0x36]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x24]
	strh	r2, [r0, #0x26]
.L674:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L688:
	.align	2, 0
.L687:
	.word	gObjectBankIDs
	.word	gSharedMem+0x17810
	.word	gSprites
.Lfe40:
	.size	 dp11b_obj_instanciate,.Lfe40-dp11b_obj_instanciate
	.align	2, 0
	.globl	dp11b_obj_free
	.type	 dp11b_obj_free,function
	.thumb_func
dp11b_obj_free:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L690	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L695
	add	r5, r0, r1
	ldrb	r1, [r5]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L689	@cond_branch
	ldr	r2, .L695+0x4
	ldrb	r1, [r5, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x34]
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	DestroySprite
	ldrb	r1, [r5]
	mov	r0, #0x3
	neg	r0, r0
	b	.L694
.L696:
	.align	2, 0
.L695:
	.word	gSharedMem+0x17810
	.word	gSprites
.L690:
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L697
	add	r5, r0, r1
	ldrb	r1, [r5]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L689	@cond_branch
	ldr	r2, .L697+0x4
	ldrb	r1, [r5, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x34]
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	DestroySprite
	ldrb	r1, [r5]
	mov	r0, #0x5
	neg	r0, r0
.L694:
	and	r0, r0, r1
	strb	r0, [r5]
	ldr	r0, .L697+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x24]
	strh	r0, [r1, #0x26]
.L689:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	gSharedMem+0x17810
	.word	gSprites
.Lfe41:
	.size	 dp11b_obj_free,.Lfe41-dp11b_obj_free
	.align	2, 0
	.globl	objc_dp11b_pingpong
	.type	 objc_dp11b_pingpong,function
	.thumb_func
objc_dp11b_pingpong:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L700	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	b	.L701
.L700:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
.L701:
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldr	r2, .L702
	lsl	r1, r5, #0x4
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r4, #0x32]
	add	r0, r0, r2
	strh	r0, [r1, #0x26]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	gSprites
.Lfe42:
	.size	 objc_dp11b_pingpong,.Lfe42-objc_dp11b_pingpong
	.align	2, 0
	.globl	nullsub_41
	.type	 nullsub_41,function
	.thumb_func
nullsub_41:
	bx	lr
.Lfe43:
	.size	 nullsub_41,.Lfe43-nullsub_41
	.align	2, 0
	.globl	sub_8010800
	.type	 sub_8010800,function
	.thumb_func
sub_8010800:
	push	{lr}
	bl	sub_8010874
	ldr	r1, .L706
	mov	r0, #0x0
	strb	r0, [r1, #0x1]
	ldr	r1, .L706+0x4
	ldr	r0, .L706+0x8
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L707:
	.align	2, 0
.L706:
	.word	gBattleCommunication
	.word	gBattleMainFunc
	.word	bc_8012FAC
.Lfe44:
	.size	 sub_8010800,.Lfe44-sub_8010800
	.align	2, 0
	.globl	sub_8010824
	.type	 sub_8010824,function
	.thumb_func
sub_8010824:
	push	{r4, r5, lr}
	ldr	r0, .L714
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r1, .L714+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L714+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L710	@cond_branch
	ldr	r5, .L714+0xc
	add	r4, r1, #0
.L712:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	_call_via_r0
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L714+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L712	@cond_branch
.L710:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L715:
	.align	2, 0
.L714:
	.word	gBattleMainFunc
	.word	gActiveBank
	.word	gNoOfAllBanks
	.word	gBattleBankFunc
.Lfe45:
	.size	 sub_8010824,.Lfe45-sub_8010824
	.align	2, 0
	.globl	sub_8010874
	.type	 sub_8010874,function
	.thumb_func
sub_8010874:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	bl	TurnValuesCleanUp
	bl	SpecialStatusesClear
	mov	r2, #0x0
	mov	r3, #0x0
	ldr	r0, .L763
	mov	sl, r0
	ldr	r1, .L763+0x4
	mov	r9, r1
	ldr	r4, .L763+0x8
	mov	r8, r4
	ldr	r0, .L763+0xc
	mov	ip, r0
	ldr	r4, .L763+0x10
	mov	r5, #0x0
	ldr	r7, .L763+0x14
	ldr	r6, .L763+0x18
.L720:
	ldr	r0, .L763+0x1c
	add	r0, r5, r0
	str	r3, [r0]
	mov	r1, #0x0
.L724:
	add	r0, r4, r1
	strb	r3, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x1b
	bls	.L724	@cond_branch
	mov	r0, #0x2
	strb	r0, [r4, #0x16]
	ldr	r1, .L763+0x20
	add	r0, r2, r1
	strb	r3, [r0]
	mov	r0, ip
	strh	r3, [r0]
	mov	r1, r8
	strh	r3, [r1]
	mov	r0, r9
	strh	r3, [r0]
	mov	r1, sl
	strh	r3, [r1]
	ldr	r0, .L763+0x24
	add	r1, r2, r0
	mov	r0, #0xff
	strb	r0, [r1]
	strh	r3, [r6]
	strh	r3, [r7]
	ldr	r1, .L763+0x28
	add	r0, r5, r1
	str	r3, [r0]
	mov	r0, #0x2
	add	sl, sl, r0
	add	r9, r9, r0
	add	r8, r8, r0
	add	ip, ip, r0
	add	r4, r4, #0x1c
	add	r5, r5, #0x4
	add	r7, r7, #0x2
	add	r6, r6, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L720	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L763+0x2c
	ldr	r4, .L763+0x30
	mov	r2, #0x1
.L730:
	strh	r5, [r4]
	mov	r1, #0x0
.L734:
	add	r0, r3, r1
	strb	r5, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0xb
	bls	.L734	@cond_branch
	add	r3, r3, #0xc
	add	r4, r4, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L730	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L763+0x34
	strb	r1, [r2]
	ldr	r3, .L763+0x38
	strb	r1, [r3]
	ldr	r4, .L763+0x3c
	strh	r1, [r4]
	ldr	r1, .L763+0x40
	mov	r2, #0x0
	mov	r3, #0x0
.L740:
	add	r0, r1, r2
	strb	r3, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x2b
	bls	.L740	@cond_branch
	mov	r0, #0x0
	ldr	r1, .L763+0x44
	str	r0, [r1]
	ldr	r2, .L763+0x48
	ldrh	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L742	@cond_branch
	ldr	r3, .L763+0x4c
	ldrb	r1, [r3, #0x15]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L742	@cond_branch
	mov	r0, #0x80
	ldr	r4, .L763+0x44
	str	r0, [r4]
.L742:
	ldr	r1, .L763+0x4c
	ldrb	r0, [r1, #0x15]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	ldr	r3, .L763+0x50
	ldr	r4, .L763+0x54
	add	r2, r3, r4
	mov	r1, #0x0
	strb	r0, [r2]
	ldr	r0, .L763+0x58
	strb	r1, [r0]
	ldr	r2, .L763+0x5c
	strb	r1, [r2]
	ldr	r3, .L763+0x60
	str	r1, [r3]
	mov	r2, #0x0
	ldr	r4, .L763+0x64
	strh	r1, [r4]
	ldr	r1, .L763+0x50
	ldr	r3, .L763+0x68
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r4, .L763+0x6c
	add	r0, r1, r4
	strb	r2, [r0]
	ldr	r1, .L763+0x70
	mov	r2, #0x0
	add	r0, r1, #0x7
.L746:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L746	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L763+0x74
	strh	r5, [r0]
	mov	r0, #0x0
	ldr	r1, .L763+0x78
	str	r0, [r1]
	ldr	r2, .L763+0x7c
	strh	r0, [r2]
	ldr	r4, .L763+0x50
	ldr	r3, .L763+0x80
	add	r0, r4, r3
	strb	r5, [r0]
	ldr	r1, .L763+0x84
	add	r0, r4, r1
	strb	r5, [r0]
	ldr	r2, .L763+0x88
	strb	r5, [r2]
	ldr	r3, .L763+0x8c
	strb	r5, [r3]
	sub	r1, r1, #0x29
	add	r0, r4, r1
	strb	r5, [r0]
	ldr	r2, .L763+0x90
	add	r0, r4, r2
	strb	r5, [r0]
	ldr	r3, .L763+0x94
	add	r0, r4, r3
	strb	r5, [r0]
	ldr	r0, .L763+0x98
	mov	r1, #0xb
	bl	GetMonData
	ldr	r2, .L763+0x9c
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x8]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L763+0xa0
	bl	__divsi3
	ldr	r2, .L763+0xa4
	add	r1, r4, r2
	strb	r0, [r1]
	ldr	r3, .L763+0xa8
	add	r1, r4, r3
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r1, .L763+0xac
	add	r0, r4, r1
	strb	r5, [r0]
	sub	r2, r2, #0x33
	add	r1, r4, r2
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r2, #0x0
	mov	r1, #0x0
.L751:
	ldr	r3, .L763+0xb0
	add	r0, r2, r3
	add	r0, r0, r4
	strb	r1, [r0]
	add	r3, r3, #0x20
	add	r0, r2, r3
	add	r0, r0, r4
	strb	r1, [r0]
	add	r3, r3, #0x1c
	add	r0, r2, r3
	add	r0, r0, r4
	strb	r1, [r0]
	add	r3, r3, #0x8
	add	r0, r2, r3
	add	r0, r0, r4
	strb	r1, [r0]
	add	r3, r3, #0x10
	add	r0, r2, r3
	add	r0, r0, r4
	strb	r1, [r0]
	add	r3, r3, #0x8
	add	r0, r2, r3
	add	r0, r0, r4
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L751	@cond_branch
	ldr	r4, .L763+0x50
	ldr	r1, .L763+0xb4
	add	r0, r4, r1
	mov	r2, #0x0
	mov	r1, #0x6
	strb	r1, [r0]
	sub	r3, r3, #0x3f
	add	r0, r4, r3
	strb	r1, [r0]
	ldr	r1, .L763+0xb8
	add	r0, r4, r1
	strb	r2, [r0]
	ldr	r3, .L763+0xbc
	mov	r1, #0x0
	mov	r2, #0xa
	add	r0, r3, #0
	add	r0, r0, #0x40
.L756:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L756	@cond_branch
	mov	r1, #0x0
	strb	r1, [r3, #0x13]
	strb	r1, [r3]
	strb	r1, [r3, #0x1]
	strb	r1, [r3, #0x2]
	strb	r1, [r3, #0x3]
	strb	r1, [r3, #0x4]
	ldrb	r2, [r3, #0x5]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	mov	r2, #0x3
	neg	r2, r2
	and	r0, r0, r2
	strb	r0, [r3, #0x5]
	strh	r1, [r3, #0x20]
	strh	r1, [r3, #0x22]
	strh	r1, [r3, #0x24]
	strh	r1, [r3, #0x6]
	strh	r1, [r3, #0x26]
	strh	r1, [r3, #0x28]
	mov	r2, #0x0
	add	r5, r3, #0
	add	r5, r5, #0x8
	mov	r4, #0x0
	add	r1, r3, #0
	add	r1, r1, #0x14
.L761:
	add	r0, r2, r5
	strb	r4, [r0]
	strb	r4, [r1]
	strb	r4, [r1, #0x16]
	add	r1, r1, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x9
	ble	.L761	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L764:
	.align	2, 0
.L763:
	.word	gUnknown_02024C4C
	.word	gUnknown_02024C44
	.word	gMoveHitWith
	.word	gLastUsedMove
	.word	gDisableStructs
	.word	gUnknown_02024C2C
	.word	gLockedMove
	.word	gStatuses3
	.word	gUnknown_02024C70
	.word	gUnknown_02024C5C
	.word	gSharedMem+0x17100
	.word	gSideTimer
	.word	gSideAffecting
	.word	gBankAttacker
	.word	gBankTarget
	.word	gBattleWeather
	.word	gWishFutureKnock
	.word	gHitMarker
	.word	gBattleTypeFlags
	.word	gSaveBlock2
	.word	gSharedMem
	.word	0x16084
	.word	gMultiHitCounter
	.word	gBattleOutcome
	.word	gBattleExecBuffer
	.word	gPaydayMoney
	.word	0x17130
	.word	0x17160
	.word	gBattleCommunication
	.word	gPauseCounterBattle
	.word	gBattleMoveDamage
	.word	gUnknown_02024DE8
	.word	0x16002
	.word	0x160a1
	.word	gLeveledUpInBattle
	.word	gAbsentBankFlags
	.word	0x16086
	.word	0x16087
	.word	gEnemyParty
	.word	gBaseStats
	.word	0x4fb
	.word	0x16089
	.word	0x16088
	.word	0x1601b
	.word	0x160ac
	.word	0x160c8
	.word	0x16113
	.word	gBattleResults
.Lfe46:
	.size	 sub_8010874,.Lfe46-sub_8010874
	.align	2, 0
	.globl	SwitchInClearStructs
	.type	 SwitchInClearStructs,function
	.thumb_func
SwitchInClearStructs:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffdc
	ldr	r4, .L801
	ldr	r5, .L801+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, sp
	add	r0, r0, r4
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r2, .L801+0x8
	ldr	r3, .L801+0xc
	ldrh	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	mov	sl, r4
	add	r7, r5, #0
	ldr	r1, .L801+0x10
	mov	r8, r1
	ldr	r2, .L801+0x14
	mov	ip, r2
	cmp	r0, #0x7f
	beq	.L800	@cond_branch
	mov	r5, #0x0
	add	r4, r7, #0
	mov	r3, #0x58
	mov	r2, r8
	add	r2, r2, #0x18
	mov	r1, #0x6
.L770:
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r5, r0
	add	r0, r0, r2
	strb	r1, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L770	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L801+0x18
	ldrb	r3, [r3]
	cmp	r5, r3
	bge	.L766	@cond_branch
	ldr	r6, .L801+0x1c
	mov	r9, r6
	ldr	r3, .L801
	ldr	r4, .L801+0x14
.L775:
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r9
	str	r0, [sp, #0x20]
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L776	@cond_branch
	ldrb	r0, [r3, #0x14]
	ldr	r2, .L801+0x4
	ldrb	r2, [r2]
	cmp	r0, r2
	bne	.L776	@cond_branch
	ldr	r0, .L801+0x20
	and	r1, r1, r0
	ldr	r6, [sp, #0x20]
	str	r1, [r6]
.L776:
	ldr	r1, [r4]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L774	@cond_branch
	ldrb	r0, [r3, #0x15]
	ldr	r2, .L801+0x4
	ldrb	r2, [r2]
	cmp	r0, r2
	bne	.L774	@cond_branch
	mov	r0, #0x19
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r3, #0x15]
.L774:
	add	r3, r3, #0x1c
	add	r4, r4, #0x4
	add	r5, r5, #0x1
	ldr	r6, .L801+0x18
	ldrb	r6, [r6]
	cmp	r5, r6
	blt	.L775	@cond_branch
.L766:
	ldr	r1, .L801+0xc
	ldrh	r0, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L801+0x8
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, #0x7f
	bne	.L779	@cond_branch
.L800:
	ldrb	r1, [r7]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L801+0x24
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r0, [r1]
	ldr	r2, .L801+0x28
	and	r0, r0, r2
	str	r0, [r1]
	mov	r5, #0x0
	ldr	r3, .L801+0x18
	ldrb	r3, [r3]
	cmp	r5, r3
	bge	.L786	@cond_branch
	mov	r6, #0x0
.L783:
	ldrb	r0, [r7]
	bl	GetBankSide
	add	r4, r0, #0
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L782	@cond_branch
	ldr	r1, .L801+0x14
	lsl	r0, r5, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L782	@cond_branch
	ldr	r0, .L801
	add	r0, r6, r0
	ldrb	r0, [r0, #0x15]
	ldrb	r3, [r7]
	cmp	r0, r3
	bne	.L782	@cond_branch
	mov	r0, #0x19
	neg	r0, r0
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	str	r1, [r2]
.L782:
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	ldr	r0, .L801+0x18
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L783	@cond_branch
	ldr	r6, .L801
	mov	sl, r6
	ldr	r7, .L801+0x4
	b	.L786
.L802:
	.align	2, 0
.L801:
	.word	gDisableStructs
	.word	gActiveBank
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gStatuses3
	.word	gNoOfAllBanks
	.word	gUnknown_02024AD0
	.word	0xfbffffff
	.word	0x15100007
	.word	0x3043f
.L779:
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	str	r1, [r0]
.L786:
	mov	r5, #0x0
	ldr	r6, .L803
	ldr	r0, .L803+0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L788	@cond_branch
	ldr	r1, .L803+0x8
	mov	r9, r1
	ldr	r2, .L803+0xc
	mov	r8, r2
	ldr	r4, .L803+0x10
	mov	ip, r6
.L790:
	mov	r0, #0x58
	mul	r0, r0, r5
	mov	r1, r9
	add	r3, r0, r1
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	lsl	r2, r0, #0x10
	ldr	r1, [r3]
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L791	@cond_branch
	bic	r1, r1, r2
	str	r1, [r3]
.L791:
	ldr	r1, [r3]
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L789	@cond_branch
	ldr	r2, .L803+0x14
	add	r0, r5, r2
	add	r0, r0, ip
	ldrb	r0, [r0]
	ldrb	r2, [r4]
	cmp	r0, r2
	bne	.L789	@cond_branch
	ldr	r0, .L803+0x18
	and	r1, r1, r0
	str	r1, [r3]
.L789:
	add	r5, r5, #0x1
	ldr	r3, .L803+0x4
	ldrb	r3, [r3]
	cmp	r5, r3
	blt	.L790	@cond_branch
.L788:
	ldrb	r0, [r7]
	ldr	r1, .L803+0x1c
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r0, [r7]
	ldr	r2, .L803+0x20
	add	r0, r0, r2
	strb	r1, [r0]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r3, sl
	add	r1, r0, r3
	mov	r5, #0x0
	mov	r2, #0x0
.L797:
	add	r0, r1, r5
	strb	r2, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x1b
	bls	.L797	@cond_branch
	ldr	r1, .L803+0x24
	ldrh	r0, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L803+0x28
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, #0x7f
	bne	.L799	@cond_branch
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	mov	r1, sp
	ldrb	r1, [r1, #0xa]
	strb	r1, [r0, #0xa]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	mov	r1, sp
	ldrb	r1, [r1, #0x15]
	strb	r1, [r0, #0x15]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	mov	r0, sp
	ldrb	r2, [r0, #0xf]
	lsl	r2, r2, #0x1c
	mov	r4, #0xf
	lsr	r2, r2, #0x1c
	ldrb	r3, [r1, #0xf]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xf]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	mov	r1, sp
	ldrb	r1, [r1, #0xf]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	ldrb	r2, [r0, #0xf]
	and	r4, r4, r2
	orr	r4, r4, r1
	strb	r4, [r0, #0xf]
.L799:
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	mov	r3, #0x0
	mov	r1, #0x2
	strb	r1, [r0, #0x16]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L803+0x2c
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r3, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L803+0x30
	add	r0, r0, r1
	strh	r3, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L803+0x34
	add	r0, r0, r1
	strh	r3, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L803+0x38
	add	r0, r0, r1
	strh	r3, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L803+0x3c
	add	r0, r0, r1
	strh	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, .L803+0x40
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L803+0x44
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x53
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	sub	r1, r1, #0x1b
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r2, [r0]
	ldr	r2, .L803+0x48
	add	r1, r6, r2
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	str	r3, [r0]
	ldr	r6, .L803+0x24
	strh	r3, [r6]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L804:
	.align	2, 0
.L803:
	.word	gSharedMem
	.word	gNoOfAllBanks
	.word	gUnknown_02024AD0
	.word	gBitTable
	.word	gActiveBank
	.word	0x16020
	.word	0xffff1fff
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gLastUsedMove
	.word	gMoveHitWith
	.word	gUnknown_02024C44
	.word	gUnknown_02024C4C
	.word	gUnknown_02024C2C
	.word	gUnknown_02024C5C
	.word	0x160ac
	.word	0x17100
.Lfe47:
	.size	 SwitchInClearStructs,.Lfe47-SwitchInClearStructs
	.align	2, 0
	.globl	UndoEffectsAfterFainting
	.type	 UndoEffectsAfterFainting,function
	.thumb_func
UndoEffectsAfterFainting:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r4, #0x0
	ldr	r7, .L824
	ldr	r0, .L824+0x4
	mov	r9, r0
	ldr	r1, .L824+0x8
	mov	r8, r1
	ldr	r2, .L824+0xc
	mov	ip, r2
	ldr	r6, .L824+0x10
	add	r5, r7, #0
	mov	r3, #0x58
	ldr	r2, .L824+0x14
	add	r2, r2, #0x18
	mov	r1, #0x6
.L809:
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r4, r0
	add	r0, r0, r2
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x7
	ble	.L809	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r2, .L824+0x14
	add	r2, r2, #0x50
	add	r0, r0, r2
	mov	r1, #0x0
	str	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	str	r1, [r0]
	mov	r4, #0x0
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.L812	@cond_branch
	add	r3, r2, #0
	mov	r5, #0x0
	ldr	r1, .L824+0x18
	mov	sl, r1
	ldr	r2, .L824+0xc
	mov	r9, r2
.L814:
	ldr	r1, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L815	@cond_branch
	ldr	r2, .L824+0x1c
	add	r0, r5, r2
	ldrb	r0, [r0, #0x14]
	ldrb	r2, [r7]
	cmp	r0, r2
	bne	.L815	@cond_branch
	ldr	r0, .L824+0x20
	and	r1, r1, r0
	str	r1, [r3]
.L815:
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldr	r0, [r0]
	lsl	r2, r0, #0x10
	ldr	r1, [r3]
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L816	@cond_branch
	bic	r1, r1, r2
	str	r1, [r3]
.L816:
	ldr	r1, [r3]
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L813	@cond_branch
	ldr	r2, .L824+0x24
	add	r0, r4, r2
	add	r0, r0, r9
	ldrb	r0, [r0]
	ldrb	r2, [r7]
	cmp	r0, r2
	bne	.L813	@cond_branch
	ldr	r0, .L824+0x28
	and	r1, r1, r0
	str	r1, [r3]
.L813:
	add	r3, r3, #0x58
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
	mov	r0, r8
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L814	@cond_branch
.L812:
	ldrb	r0, [r7]
	ldr	r1, .L824+0x2c
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r0, [r7]
	ldr	r2, .L824+0x30
	add	r0, r0, r2
	strb	r1, [r0]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L824+0x1c
	add	r1, r0, r2
	mov	r4, #0x0
	mov	r2, #0x0
.L822:
	add	r0, r1, r4
	strb	r2, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x1b
	bls	.L822	@cond_branch
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	mov	r9, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x3
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	mov	sl, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r5, #0x21
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r4, #0x41
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1, #0x1]
	mov	r0, r9
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1, #0x1]
	mov	r0, r8
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r1, [r7]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x19
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrb	r1, [r0, #0x1]
	and	r5, r5, r1
	strb	r5, [r0, #0x1]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrb	r1, [r0, #0x1]
	and	r3, r3, r1
	strb	r3, [r0, #0x1]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrb	r1, [r0, #0x2]
	mov	r2, r9
	and	r2, r2, r1
	strb	r2, [r0, #0x2]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrb	r1, [r0, #0x2]
	mov	r2, r8
	and	r2, r2, r1
	strb	r2, [r0, #0x2]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrb	r1, [r0, #0x2]
	mov	r2, #0x5
	neg	r2, r2
	and	r2, r2, r1
	strb	r2, [r0, #0x2]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	ldrb	r1, [r0, #0x2]
	mov	r2, sl
	and	r2, r2, r1
	strb	r2, [r0, #0x2]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L824+0x1c
	add	r0, r0, r1
	mov	r3, #0x0
	mov	r1, #0x2
	strb	r1, [r0, #0x16]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r2, .L824+0x34
	add	r0, r0, r2
	mov	r2, #0x0
	strh	r3, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L824+0x38
	add	r0, r0, r1
	strh	r3, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L824+0x3c
	add	r0, r0, r1
	strh	r3, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L824+0x40
	add	r0, r0, r1
	strh	r3, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L824+0x44
	add	r0, r0, r1
	strh	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, .L824+0x48
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	ldr	r1, .L824+0x4c
	add	r0, r0, r1
	add	r0, r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	sub	r1, r1, #0x3d
	add	r0, r0, r1
	add	r0, r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x53
	add	r0, r0, r1
	add	r0, r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, ip
	strb	r2, [r0]
	ldr	r1, .L824+0x50
	add	r1, r1, ip
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	str	r3, [r0]
	ldrb	r0, [r7]
	mov	r3, #0x58
	mov	r1, r0
	mul	r1, r1, r3
	ldr	r2, .L824+0x14
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r2, .L824+0x54
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	add	r1, r1, #0x21
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r3
	ldr	r0, .L824+0x14
	add	r1, r1, r0
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r2, .L824+0x54
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	add	r1, r1, #0x22
	strb	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L825:
	.align	2, 0
.L824:
	.word	gActiveBank
	.word	gStatuses3
	.word	gNoOfAllBanks
	.word	gSharedMem
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBitTable
	.word	gDisableStructs
	.word	0xfbffffff
	.word	0x16020
	.word	0xffff1fff
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gLastUsedMove
	.word	gMoveHitWith
	.word	gUnknown_02024C44
	.word	gUnknown_02024C4C
	.word	gUnknown_02024C2C
	.word	gUnknown_02024C5C
	.word	0x160e8
	.word	0x17100
	.word	gBaseStats
.Lfe48:
	.size	 UndoEffectsAfterFainting,.Lfe48-UndoEffectsAfterFainting
	.align	2, 0
	.globl	bc_8012FAC
	.type	 bc_8012FAC,function
	.thumb_func
bc_8012FAC:
	push	{r4, r5, lr}
	ldr	r5, .L835
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L828	@cond_branch
	cmp	r0, #0x1
	beq	.L829	@cond_branch
	b	.L827
.L836:
	.align	2, 0
.L835:
	.word	gBattleCommunication
.L828:
	ldr	r4, .L837
	ldrb	r0, [r5, #0x1]
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	EmitGetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L827
.L838:
	.align	2, 0
.L837:
	.word	gActiveBank
.L829:
	ldr	r0, .L839
	ldr	r2, [r0]
	cmp	r2, #0
	bne	.L827	@cond_branch
	ldrb	r0, [r5, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x1]
	ldr	r1, .L839+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L831	@cond_branch
	ldr	r1, .L839+0x8
	ldr	r0, .L839+0xc
	str	r0, [r1]
	b	.L827
.L840:
	.align	2, 0
.L839:
	.word	gBattleExecBuffer
	.word	gNoOfAllBanks
	.word	gBattleMainFunc
	.word	BattlePrepIntroSlide
.L831:
	strb	r2, [r5]
.L827:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 bc_8012FAC,.Lfe49-bc_8012FAC
	.align	2, 0
	.type	 BattlePrepIntroSlide,function
	.thumb_func
BattlePrepIntroSlide:
	push	{r4, r5, lr}
	ldr	r0, .L843
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L842	@cond_branch
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	ldr	r4, .L843+0x4
	strb	r0, [r4]
	ldr	r0, .L843+0x8
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	EmitIntroSlide
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r1, .L843+0xc
	ldr	r0, .L843+0x10
	str	r0, [r1]
	ldr	r0, .L843+0x14
	strb	r5, [r0]
	strb	r5, [r0, #0x1]
.L842:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L844:
	.align	2, 0
.L843:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gBattleTerrain
	.word	gBattleMainFunc
	.word	sub_8011384
	.word	gBattleCommunication
.Lfe50:
	.size	 BattlePrepIntroSlide,.Lfe50-BattlePrepIntroSlide
	.align	2, 0
	.globl	sub_8011384
	.type	 sub_8011384,function
	.thumb_func
sub_8011384:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L878
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.LCB7341
	b	.L846	@long jump
.LCB7341:
	ldr	r2, .L878+0x4
	strb	r1, [r2]
	ldr	r0, .L878+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.LCB7351
	b	.L848	@long jump
.LCB7351:
	mov	r7, #0x58
	ldr	r0, .L878+0xc
	mov	r9, r0
	mov	r8, r2
.L850:
	ldr	r0, .L878+0x10
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L851	@cond_branch
	ldr	r4, .L878+0x4
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L851	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r7
	mov	r1, r9
	add	r3, r0, r1
	mov	r2, #0x0
	mov	r1, #0x0
.L855:
	add	r0, r3, r2
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x57
	bls	.L855	@cond_branch
	b	.L857
.L879:
	.align	2, 0
.L878:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gBattleTypeFlags
.L851:
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r7
	mov	r1, r9
	add	r3, r0, r1
	mov	r2, #0x0
	ldr	r6, .L880
	ldr	r5, .L880+0x4
	ldr	r4, .L880+0x8
.L861:
	add	r0, r3, r2
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x57
	bls	.L861	@cond_branch
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r2, r0
	mul	r2, r2, r7
	add	r2, r2, r9
	ldrh	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x6]
	add	r2, r2, #0x21
	strb	r0, [r2]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r2, r0
	mul	r2, r2, r7
	add	r2, r2, r9
	ldrh	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x7]
	add	r2, r2, #0x22
	strb	r0, [r2]
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r9
	ldrh	r0, [r1]
	ldrb	r1, [r1, #0x17]
	lsr	r1, r1, #0x7
	bl	GetAbilityBySpecies
	mov	r2, r8
	ldrb	r1, [r2]
	mul	r1, r1, r7
	add	r1, r1, r9
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrb	r0, [r2]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	ldr	r1, .L880+0xc
	add	r0, r0, r1
	mov	r2, r8
	ldrb	r1, [r2]
	mul	r1, r1, r7
	add	r1, r1, r9
	ldrh	r1, [r1, #0x28]
	strh	r1, [r0]
	mov	r2, #0x0
	ldr	r4, .L880+0x8
	mov	r5, #0x58
	ldr	r1, .L880+0x10
	add	r6, r4, #0
	mov	r0, #0x18
	neg	r0, r0
	add	r0, r0, r1
	mov	ip, r0
	mov	r3, #0x6
.L866:
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r2, r0
	add	r0, r0, r1
	strb	r3, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L866	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r7
	mov	r0, ip
	add	r0, r0, #0x50
	add	r1, r1, r0
	mov	r0, #0x0
	str	r0, [r1]
.L857:
	ldr	r4, .L880+0x8
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L868	@cond_branch
	mov	r0, #0x0
	bl	EmitTrainerThrow
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L868:
	ldr	r5, .L880+0x14
	ldrh	r1, [r5]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L869	@cond_branch
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L870	@cond_branch
	mov	r0, #0x0
	bl	EmitTrainerThrow
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L870:
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L872	@cond_branch
	ldrh	r1, [r5]
	ldr	r2, .L880+0x18
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L872	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r9
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	b	.L872
.L881:
	.align	2, 0
.L880:
	.word	gBaseStats
	.word	gBattleBufferB
	.word	gActiveBank
	.word	gSharedMem+0x160bc
	.word	gBattleMons+0x18
	.word	gBattleTypeFlags
	.word	0x902
.L869:
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L872	@cond_branch
	ldrh	r1, [r5]
	ldr	r2, .L882
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L872	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r9
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	mov	r0, #0x0
	bl	EmitLoadPokeSprite
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L872:
	ldr	r0, .L882+0x4
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L849	@cond_branch
	ldr	r4, .L882+0x8
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L876	@cond_branch
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L849	@cond_branch
.L876:
	mov	r0, #0x0
	bl	EmitTrainerThrow
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L849:
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L882+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.LCB7709
	b	.L850	@long jump
.LCB7709:
.L848:
	ldr	r1, .L882+0x10
	ldr	r0, .L882+0x14
	str	r0, [r1]
.L846:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L883:
	.align	2, 0
.L882:
	.word	0x902
	.word	gBattleTypeFlags
	.word	gActiveBank
	.word	gNoOfAllBanks
	.word	gBattleMainFunc
	.word	bc_801333C
.Lfe51:
	.size	 sub_8011384,.Lfe51-sub_8011384
	.align	2, 0
	.globl	bc_801333C
	.type	 bc_801333C,function
	.thumb_func
bc_801333C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xffffffd0
	ldr	r0, .L916
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7741
	b	.L885	@long jump
.LCB7741:
	ldr	r0, .L916+0x4
	ldrh	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB7750
	b	.L886	@long jump
.LCB7750:
	mov	r7, #0x0
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r6, r8
	mov	r5, sp
.L890:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L916+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L892	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L891	@cond_branch
.L892:
	ldr	r0, .L916+0xc
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L912
.L917:
	.align	2, 0
.L916:
	.word	gBattleExecBuffer
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	0xffff
.L891:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L912:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L890	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	ldr	r4, .L918
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x80
	bl	EmitDrawPartyStatusSummary
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	mov	r7, #0x0
	mov	r6, r8
	mov	r5, sp
.L898:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L918+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L900	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L899	@cond_branch
.L900:
	ldr	r0, .L918+0x8
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L913
.L919:
	.align	2, 0
.L918:
	.word	gActiveBank
	.word	gPlayerParty
	.word	0xffff
.L899:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L913:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L898	@cond_branch
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	ldr	r4, .L920
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x80
	bl	EmitDrawPartyStatusSummary
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r1, .L920+0x4
	ldr	r0, .L920+0x8
	b	.L914
.L921:
	.align	2, 0
.L920:
	.word	gActiveBank
	.word	gBattleMainFunc
	.word	bc_battle_begin_message
.L886:
	mov	r7, #0x0
	add	r6, sp, #0x4
	mov	r5, sp
.L907:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L922
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L909	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L908	@cond_branch
.L909:
	ldr	r0, .L922+0x4
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L915
.L923:
	.align	2, 0
.L922:
	.word	gPlayerParty
	.word	0xffff
.L908:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L915:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L907	@cond_branch
	ldr	r1, .L924
	ldr	r0, .L924+0x4
.L914:
	str	r0, [r1]
.L885:
	add	sp, sp, #0x30
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L925:
	.align	2, 0
.L924:
	.word	gBattleMainFunc
	.word	bc_8013568
.Lfe52:
	.size	 bc_801333C,.Lfe52-bc_801333C
	.align	2, 0
	.globl	bc_battle_begin_message
	.type	 bc_battle_begin_message,function
	.thumb_func
bc_battle_begin_message:
	push	{lr}
	ldr	r0, .L928
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L927	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	ldr	r1, .L928+0x4
	strb	r0, [r1]
	ldrb	r1, [r1]
	mov	r0, #0x0
	bl	PrepareStringBattle
	ldr	r1, .L928+0x8
	ldr	r0, .L928+0xc
	str	r0, [r1]
.L927:
	pop	{r0}
	bx	r0
.L929:
	.align	2, 0
.L928:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gBattleMainFunc
	.word	sub_8011800
.Lfe53:
	.size	 bc_battle_begin_message,.Lfe53-bc_battle_begin_message
	.align	2, 0
	.globl	bc_8013568
	.type	 bc_8013568,function
	.thumb_func
bc_8013568:
	push	{lr}
	ldr	r0, .L932
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L931	@cond_branch
	ldr	r1, .L932+0x4
	ldr	r0, .L932+0x8
	str	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	PrepareStringBattle
.L931:
	pop	{r0}
	bx	r0
.L933:
	.align	2, 0
.L932:
	.word	gBattleExecBuffer
	.word	gBattleMainFunc
	.word	sub_8011970
.Lfe54:
	.size	 bc_8013568,.Lfe54-bc_8013568
	.align	2, 0
	.globl	sub_8011800
	.type	 sub_8011800,function
	.thumb_func
sub_8011800:
	push	{lr}
	ldr	r0, .L936
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L935	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	PrepareStringBattle
	ldr	r1, .L936+0x4
	ldr	r0, .L936+0x8
	str	r0, [r1]
.L935:
	pop	{r0}
	bx	r0
.L937:
	.align	2, 0
.L936:
	.word	gBattleExecBuffer
	.word	gBattleMainFunc
	.word	sub_8011834
.Lfe55:
	.size	 sub_8011800,.Lfe55-sub_8011800
	.align	2, 0
	.globl	sub_8011834
	.type	 sub_8011834,function
	.thumb_func
sub_8011834:
	push	{r4, lr}
	ldr	r0, .L947
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L939	@cond_branch
	ldr	r2, .L947+0x4
	strb	r1, [r2]
	ldr	r0, .L947+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L941	@cond_branch
	add	r4, r2, #0
.L943:
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L944	@cond_branch
	mov	r0, #0x0
	bl	EmitTrainerBallThrow
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L944:
	ldr	r0, .L947+0xc
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L942	@cond_branch
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L942	@cond_branch
	mov	r0, #0x0
	bl	EmitTrainerBallThrow
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L942:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L947+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L943	@cond_branch
.L941:
	ldr	r1, .L947+0x10
	ldr	r0, .L947+0x14
	str	r0, [r1]
.L939:
	pop	{r4}
	pop	{r0}
	bx	r0
.L948:
	.align	2, 0
.L947:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gNoOfAllBanks
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	bc_801362C
.Lfe56:
	.size	 sub_8011834,.Lfe56-sub_8011834
	.align	2, 0
	.globl	bc_801362C
	.type	 bc_801362C,function
	.thumb_func
bc_801362C:
	push	{r4, r5, lr}
	ldr	r0, .L957
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L950	@cond_branch
	ldr	r2, .L957+0x4
	strb	r1, [r2]
	ldr	r0, .L957+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L952	@cond_branch
	add	r4, r2, #0
	ldr	r5, .L957+0xc
.L954:
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L953	@cond_branch
	ldr	r0, .L957+0x10
	ldrh	r1, [r0]
	ldr	r2, .L957+0x14
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L953	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r5
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
.L953:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L957+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L954	@cond_branch
.L952:
	ldr	r1, .L957+0x18
	ldr	r0, .L957+0x1c
	str	r0, [r1]
.L950:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L958:
	.align	2, 0
.L957:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	0x902
	.word	gBattleMainFunc
	.word	sub_8011970
.Lfe57:
	.size	 bc_801362C,.Lfe57-bc_801362C
	.align	2, 0
	.globl	unref_sub_8011950
	.type	 unref_sub_8011950,function
	.thumb_func
unref_sub_8011950:
	push	{lr}
	ldr	r0, .L961
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L960	@cond_branch
	ldr	r1, .L961+0x4
	ldr	r0, .L961+0x8
	str	r0, [r1]
.L960:
	pop	{r0}
	bx	r0
.L962:
	.align	2, 0
.L961:
	.word	gBattleExecBuffer
	.word	gBattleMainFunc
	.word	sub_8011970
.Lfe58:
	.size	 unref_sub_8011950,.Lfe58-unref_sub_8011950
	.align	2, 0
	.globl	sub_8011970
	.type	 sub_8011970,function
	.thumb_func
sub_8011970:
	push	{lr}
	ldr	r0, .L966
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L964	@cond_branch
	ldr	r0, .L966+0x4
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L965	@cond_branch
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	PrepareStringBattle
.L965:
	ldr	r1, .L966+0x8
	ldr	r0, .L966+0xc
	str	r0, [r1]
.L964:
	pop	{r0}
	bx	r0
.L967:
	.align	2, 0
.L966:
	.word	gBattleExecBuffer
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	sub_80119B4
.Lfe59:
	.size	 sub_8011970,.Lfe59-sub_8011970
	.align	2, 0
	.globl	sub_80119B4
	.type	 sub_80119B4,function
	.thumb_func
sub_80119B4:
	push	{r4, lr}
	ldr	r0, .L977
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L969	@cond_branch
	ldr	r2, .L977+0x4
	strb	r1, [r2]
	ldr	r0, .L977+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L971	@cond_branch
	add	r4, r2, #0
.L973:
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L974	@cond_branch
	mov	r0, #0x0
	bl	EmitTrainerBallThrow
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L974:
	ldr	r0, .L977+0xc
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L972	@cond_branch
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L972	@cond_branch
	mov	r0, #0x0
	bl	EmitTrainerBallThrow
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L972:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L977+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L973	@cond_branch
.L971:
	ldr	r1, .L977+0x10
	ldr	r2, .L977+0x14
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r3, .L977+0x18
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r0, .L977+0x1c
	add	r1, r1, r0
	strb	r2, [r1]
	ldr	r1, .L977+0x20
	ldr	r0, .L977+0x24
	str	r0, [r1]
.L969:
	pop	{r4}
	pop	{r0}
	bx	r0
.L978:
	.align	2, 0
.L977:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gNoOfAllBanks
	.word	gBattleTypeFlags
	.word	gSharedMem
	.word	0x16058
	.word	0x160f9
	.word	0x160e6
	.word	gBattleMainFunc
	.word	BattleBeginFirstTurn
.Lfe60:
	.size	 sub_80119B4,.Lfe60-sub_80119B4
	.align	2, 0
	.globl	unref_sub_8011A68
	.type	 unref_sub_8011A68,function
	.thumb_func
unref_sub_8011A68:
	push	{r4, r5, lr}
	ldr	r0, .L987
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.L980	@cond_branch
	ldr	r2, .L987+0x4
	strb	r1, [r2]
	ldr	r0, .L987+0x8
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L982	@cond_branch
	add	r4, r2, #0
	ldr	r5, .L987+0xc
.L984:
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L983	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x0
	mov	r2, #0x0
	bl	EmitSendOutPoke
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L983:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L987+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L984	@cond_branch
.L982:
	ldr	r1, .L987+0x10
	ldr	r2, .L987+0x14
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r3, .L987+0x18
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r0, .L987+0x1c
	add	r1, r1, r0
	strb	r2, [r1]
	ldr	r1, .L987+0x20
	ldr	r0, .L987+0x24
	str	r0, [r1]
.L980:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L988:
	.align	2, 0
.L987:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gNoOfAllBanks
	.word	gBattlePartyID
	.word	gSharedMem
	.word	0x16058
	.word	0x160f9
	.word	0x160e6
	.word	gBattleMainFunc
	.word	BattleBeginFirstTurn
.Lfe61:
	.size	 unref_sub_8011A68,.Lfe61-unref_sub_8011A68
	.align	2, 0
	.globl	BattleBeginFirstTurn
	.type	 BattleBeginFirstTurn,function
	.thumb_func
BattleBeginFirstTurn:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff8
	mov	r0, #0x0
	mov	r9, r0
	ldr	r0, .L1044
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB8613
	b	.L989	@long jump
.LCB8613:
	ldr	r0, .L1044+0x4
	ldr	r1, .L1044+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L991	@cond_branch
	mov	r5, #0x0
	ldr	r1, .L1044+0xc
	add	r3, r1, #0
	ldrb	r2, [r1]
	cmp	r5, r2
	bge	.L993	@cond_branch
	ldr	r2, .L1044+0x10
.L995:
	add	r0, r5, r2
	strb	r5, [r0]
	add	r5, r5, #0x1
	ldrb	r0, [r1]
	cmp	r5, r0
	blt	.L995	@cond_branch
.L993:
	mov	r5, #0x0
	b	.L1043
.L1045:
	.align	2, 0
.L1044:
	.word	gBattleExecBuffer
	.word	gSharedMem
	.word	0x16058
	.word	gNoOfAllBanks
	.word	gTurnOrder
.L1000:
	add	r4, r5, #0x1
	mov	r8, r4
	ldrb	r1, [r1]
	cmp	r8, r1
	bge	.L999	@cond_branch
	ldr	r6, .L1046
	ldr	r3, .L1046+0x4
	lsl	r7, r5, #0x18
.L1004:
	add	r0, r5, r6
	ldrb	r0, [r0]
	add	r1, r4, r6
	ldrb	r1, [r1]
	mov	r2, #0x1
	str	r3, [sp, #0x4]
	bl	GetWhoStrikesFirst
	lsl	r0, r0, #0x18
	ldr	r3, [sp, #0x4]
	cmp	r0, #0
	beq	.L1003	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r7, #0x18
	bl	sub_8012FBC
	ldr	r3, [sp, #0x4]
.L1003:
	add	r4, r4, #0x1
	ldr	r0, .L1046+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L1004	@cond_branch
.L999:
	mov	r5, r8
.L1043:
	add	r1, r3, #0
	ldrb	r0, [r3]
	sub	r0, r0, #0x1
	cmp	r5, r0
	blt	.L1000	@cond_branch
.L991:
	ldr	r0, .L1046+0x8
	ldr	r1, .L1046+0xc
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L1008	@cond_branch
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0xff
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1008	@cond_branch
	mov	r0, #0x1
	strb	r0, [r4]
	b	.L989
.L1047:
	.align	2, 0
.L1046:
	.word	gTurnOrder
	.word	gNoOfAllBanks
	.word	gSharedMem
	.word	0x160e6
.L1008:
	ldr	r0, .L1048
	ldr	r3, .L1048+0x4
	add	r2, r0, r3
	ldr	r1, .L1048+0x8
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L1010	@cond_branch
	ldr	r5, .L1048+0xc
	add	r4, r2, #0
.L1011:
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1012	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1012:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r1, r9
	cmp	r1, #0
	beq	.LCB8804
	b	.L989	@long jump
.LCB8804:
	ldr	r1, .L1048+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1011	@cond_branch
.L1010:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x9
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB8829
	b	.L989	@long jump
.LCB8829:
	str	r0, [sp]
	mov	r0, #0xb
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB8840
	b	.L989	@long jump
.LCB8840:
	ldr	r0, .L1048
	ldr	r3, .L1048+0x10
	add	r2, r0, r3
	ldr	r0, .L1048+0x8
	ldrb	r1, [r2]
	add	r3, r0, #0
	ldrb	r0, [r3]
	cmp	r1, r0
	bcs	.L1018	@cond_branch
	ldr	r5, .L1048+0xc
	add	r4, r2, #0
.L1019:
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x0
	mov	r2, #0x0
	str	r3, [sp, #0x4]
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	ldr	r3, [sp, #0x4]
	cmp	r0, #0
	beq	.L1020	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L1020:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r1, r9
	cmp	r1, #0
	bne	.L989	@cond_branch
	ldr	r1, .L1048+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1019	@cond_branch
.L1018:
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L1024	@cond_branch
	add	r5, r0, #0
.L1025:
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L1025	@cond_branch
.L1024:
	mov	r5, #0x0
	ldr	r0, .L1048
	mov	r8, r5
	ldr	r3, .L1048+0x14
	ldr	r1, .L1048+0x18
	add	r2, r0, r1
	mov	r7, #0x6
	ldr	r6, .L1048+0x1c
	mov	r4, #0xff
.L1031:
	strb	r7, [r2]
	add	r1, r5, r6
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	mov	r0, r8
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1031	@cond_branch
	mov	r0, #0x0
	bl	TurnValuesCleanUp
	bl	SpecialStatusesClear
	ldr	r0, .L1048
	ldr	r1, .L1048+0x20
	ldrb	r1, [r1]
	ldr	r2, .L1048+0x24
	add	r0, r0, r2
	strb	r1, [r0]
	ldr	r1, .L1048+0x28
	ldr	r0, .L1048+0x2c
	str	r0, [r1]
	bl	sub_80156DC
	ldr	r1, .L1048+0x30
	mov	r2, #0x0
	add	r0, r1, #0x7
.L1036:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L1036	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L1048+0x8
	ldr	r2, .L1048
	ldr	r6, .L1048+0x34
	ldrb	r0, [r3]
	cmp	r5, r0
	bge	.L1039	@cond_branch
	ldr	r0, .L1048+0x38
	mov	r4, #0x9
	neg	r4, r4
	add	r1, r0, #0
	add	r1, r1, #0x50
.L1041:
	ldr	r0, [r1]
	and	r0, r0, r4
	str	r0, [r1]
	add	r1, r1, #0x58
	add	r5, r5, #0x1
	ldrb	r0, [r3]
	cmp	r5, r0
	blt	.L1041	@cond_branch
.L1039:
	mov	r1, #0xb0
	lsl	r1, r1, #0x9
	add	r0, r2, r1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r3, .L1048+0x3c
	add	r0, r2, r3
	strb	r1, [r0]
	ldr	r3, .L1048+0x40
	add	r0, r2, r3
	strb	r1, [r0]
	add	r3, r3, #0x1
	add	r0, r2, r3
	strb	r1, [r0]
	ldr	r3, .L1048+0x44
	add	r0, r2, r3
	strb	r1, [r0]
	add	r3, r3, #0x4d
	add	r0, r2, r3
	strb	r1, [r0]
	sub	r3, r3, #0x4b
	add	r0, r2, r3
	strb	r1, [r0]
	strb	r1, [r6]
	bl	Random
	ldr	r1, .L1048+0x48
	strh	r0, [r1]
.L989:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1049:
	.align	2, 0
.L1048:
	.word	gSharedMem
	.word	0x16058
	.word	gNoOfAllBanks
	.word	gTurnOrder
	.word	0x160f9
	.word	gChosenMovesByBanks
	.word	0x16068
	.word	gActionForBanks
	.word	gAbsentBankFlags
	.word	0x160a6
	.word	gBattleMainFunc
	.word	sub_8012324
	.word	gBattleCommunication
	.word	gBattleMoveFlags
	.word	gBattleMons
	.word	0x16001
	.word	0x16110
	.word	0x1600c
	.word	gRandomTurnNumber
.Lfe62:
	.size	 BattleBeginFirstTurn,.Lfe62-BattleBeginFirstTurn
	.align	2, 0
	.globl	bc_8013B1C
	.type	 bc_8013B1C,function
	.thumb_func
bc_8013B1C:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1063
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1051	@cond_branch
	ldr	r1, .L1063+0x4
	ldr	r0, .L1063+0x8
	str	r0, [r1]
	ldr	r3, .L1063+0xc
	ldr	r1, .L1063+0x10
	mov	r2, #0x0
	add	r0, r1, #0x7
.L1055:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L1055	@cond_branch
	mov	r4, #0x0
	ldrb	r3, [r3]
	cmp	r4, r3
	bge	.L1058	@cond_branch
	ldr	r5, .L1063+0x14
	add	r6, r5, #0
	add	r6, r6, #0x4c
.L1060:
	mov	r0, #0x58
	mov	r2, r4
	mul	r2, r2, r0
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r1, r2, r1
	ldr	r3, [r1]
	sub	r0, r0, #0x61
	and	r3, r3, r0
	str	r3, [r1]
	add	r2, r2, r6
	ldr	r0, [r2]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1059	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L1059	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	CancelMultiTurnMoves
.L1059:
	add	r4, r4, #0x1
	ldr	r0, .L1063+0xc
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L1060	@cond_branch
.L1058:
	ldr	r0, .L1063+0x18
	mov	r2, #0xb0
	lsl	r2, r2, #0x9
	add	r1, r0, r2
	mov	r2, #0x0
	strb	r2, [r1]
	ldr	r3, .L1063+0x1c
	add	r1, r0, r3
	strb	r2, [r1]
	ldr	r3, .L1063+0x20
	add	r1, r0, r3
	strb	r2, [r1]
	add	r3, r3, #0x1
	add	r1, r0, r3
	strb	r2, [r1]
	ldr	r1, .L1063+0x24
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r0, .L1063+0x28
	strb	r2, [r0]
.L1051:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1064:
	.align	2, 0
.L1063:
	.word	gBattleExecBuffer
	.word	gBattleMainFunc
	.word	BattleTurnPassed
	.word	gNoOfAllBanks
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gSharedMem
	.word	0x16001
	.word	0x16110
	.word	0x1600e
	.word	gBattleMoveFlags
.Lfe63:
	.size	 bc_8013B1C,.Lfe63-bc_8013B1C
	.align	2, 0
	.globl	BattleTurnPassed
	.type	 BattleTurnPassed,function
	.thumb_func
BattleTurnPassed:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x1
	bl	TurnValuesCleanUp
	ldr	r0, .L1088
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1066	@cond_branch
	bl	UpdateTurnCounters
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB9234
	b	.L1065	@long jump
.LCB9234:
	bl	TurnBasedEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB9240
	b	.L1065	@long jump
.LCB9240:
.L1066:
	bl	sub_80173A4
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB9247
	b	.L1065	@long jump
.LCB9247:
	ldr	r5, .L1088+0x4
	ldr	r2, .L1088+0x8
	add	r0, r5, r2
	strb	r1, [r0]
	bl	sub_80170DC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.LCB9258
	b	.L1065	@long jump
.LCB9258:
	mov	r0, #0x0
	bl	TurnValuesCleanUp
	ldr	r2, .L1088+0xc
	ldr	r0, [r2]
	ldr	r1, .L1088+0x10
	and	r0, r0, r1
	ldr	r1, .L1088+0x14
	and	r0, r0, r1
	ldr	r1, .L1088+0x18
	and	r0, r0, r1
	ldr	r1, .L1088+0x1c
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L1088+0x20
	add	r0, r5, r3
	strb	r4, [r0]
	ldr	r1, .L1088+0x24
	add	r0, r5, r1
	strb	r4, [r0]
	ldr	r2, .L1088+0x28
	add	r0, r5, r2
	strb	r4, [r0]
	ldr	r0, .L1088+0x2c
	str	r4, [r0]
	ldr	r0, .L1088+0x30
	strb	r4, [r0]
	ldr	r1, .L1088+0x34
	mov	r2, #0x0
	add	r0, r1, #0x4
.L1074:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L1074	@cond_branch
	ldr	r0, .L1088
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1076	@cond_branch
	ldr	r1, .L1088+0x38
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r1, .L1088+0x3c
	ldr	r0, .L1088+0x40
	str	r0, [r1]
	b	.L1065
.L1089:
	.align	2, 0
.L1088:
	.word	gBattleOutcome
	.word	gSharedMem
	.word	0x16059
	.word	gHitMarker
	.word	0xfffffdff
	.word	0xfff7ffff
	.word	0xffbfffff
	.word	0xffefffff
	.word	0x16002
	.word	0x160a1
	.word	0x1600c
	.word	gBattleMoveDamage
	.word	gBattleMoveFlags
	.word	gBattleCommunication
	.word	gFightStateTracker
	.word	gBattleMainFunc
	.word	sub_80138F0
.L1076:
	ldr	r1, .L1090
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0xfe
	bhi	.L1077	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x13]
.L1077:
	mov	r2, #0x0
	ldr	r4, .L1090+0x4
	ldr	r3, .L1090+0x8
	mov	r9, r3
	ldr	r0, .L1090+0xc
	mov	sl, r0
	ldr	r1, .L1090+0x10
	mov	ip, r1
	ldr	r3, .L1090+0x14
	mov	r8, r3
	ldrb	r0, [r4]
	cmp	r2, r0
	bge	.L1079	@cond_branch
	ldr	r7, .L1090+0x18
	mov	r6, #0xff
	mov	r5, #0x0
	ldr	r3, .L1090+0x1c
.L1081:
	add	r1, r2, r7
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	strh	r5, [r3]
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	ldrb	r1, [r4]
	cmp	r2, r1
	blt	.L1081	@cond_branch
.L1079:
	ldr	r0, .L1090+0x8
	mov	r1, #0x6
	mov	r2, #0x3
	ldr	r3, .L1090+0x20
	add	r0, r0, r3
.L1086:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L1086	@cond_branch
	mov	r0, ip
	ldrb	r1, [r0]
	ldr	r0, .L1090+0x24
	add	r0, r0, r9
	strb	r1, [r0]
	mov	r1, r8
	mov	r2, sl
	str	r1, [r2]
	bl	Random
	ldr	r1, .L1090+0x28
	strh	r0, [r1]
.L1065:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1091:
	.align	2, 0
.L1090:
	.word	gBattleResults
	.word	gNoOfAllBanks
	.word	gSharedMem
	.word	gBattleMainFunc
	.word	gAbsentBankFlags
	.word	sub_8012324
	.word	gActionForBanks
	.word	gChosenMovesByBanks
	.word	0x1606b
	.word	0x160a6
	.word	gRandomTurnNumber
.Lfe64:
	.size	 BattleTurnPassed,.Lfe64-BattleTurnPassed
	.align	2, 0
	.globl	CanRunFromBattle
	.type	 CanRunFromBattle,function
	.thumb_func
CanRunFromBattle:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L1118
	ldr	r0, .L1118+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L1093	@cond_branch
	ldr	r1, .L1118+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x7]
	b	.L1094
.L1119:
	.align	2, 0
.L1118:
	.word	gBattleMons
	.word	gActiveBank
	.word	gEnigmaBerries
.L1093:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L1094:
	ldr	r1, .L1120
	ldr	r3, .L1120+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	cmp	r2, #0x25
	bne	.LCB9502
	b	.L1113	@long jump
.LCB9502:
	ldr	r0, .L1120+0x8
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB9510
	b	.L1113	@long jump
.LCB9510:
	ldr	r1, .L1120+0xc
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x32
	bne	.LCB9521
	b	.L1113	@long jump
.LCB9521:
	add	r0, r2, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r0, .L1120+0x10
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L1099	@cond_branch
	mov	r7, #0x0
.L1101:
	lsr	r4, r7, #0x18
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L1102	@cond_branch
	ldr	r1, .L1120+0xc
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r1
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	cmp	r0, #0x17
	bne	.LCB9555
	b	.L1111	@long jump
.LCB9555:
.L1102:
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L1100	@cond_branch
	ldr	r3, .L1120+0xc
	ldr	r0, .L1120+0x4
	ldrb	r0, [r0]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	beq	.L1100	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1100	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1100	@cond_branch
	mov	r0, r5
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	cmp	r0, #0x47
	bne	.LCB9600
	b	.L1112	@long jump
.LCB9600:
.L1100:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r7, r7, r0
	add	r5, r5, #0x1
	ldr	r0, .L1120+0x10
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L1101	@cond_branch
.L1099:
	ldr	r4, .L1120+0x4
	ldrb	r1, [r4]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xf
	mov	r2, #0x2a
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L1105	@cond_branch
	ldr	r6, .L1120+0xc
	ldrb	r0, [r4]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r1, r0, r6
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x8
	beq	.L1106	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L1105	@cond_branch
.L1106:
	ldr	r0, .L1120+0x14
	sub	r1, r5, #0x1
	ldr	r2, .L1120+0x18
	add	r0, r0, r2
	strb	r1, [r0]
	ldr	r2, .L1120+0x1c
	mov	r0, r1
	mul	r0, r0, r3
	add	r0, r0, r6
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r1, .L1120+0x20
	mov	r0, #0x2
	b	.L1115
.L1121:
	.align	2, 0
.L1120:
	.word	gStringBank
	.word	gActiveBank
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	gNoOfAllBanks
	.word	gSharedMem
	.word	0x16003
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L1105:
	ldr	r1, .L1122
	ldr	r0, .L1122+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1122+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1108	@cond_branch
	ldr	r1, .L1122+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1107	@cond_branch
.L1108:
	ldr	r1, .L1122+0x10
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	mov	r0, #0x1
	b	.L1110
.L1123:
	.align	2, 0
.L1122:
	.word	gBattleMons
	.word	gActiveBank
	.word	0x400e000
	.word	gStatuses3
	.word	gBattleCommunication
.L1107:
	ldr	r0, .L1124
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1109	@cond_branch
.L1113:
	mov	r0, #0x0
	b	.L1110
.L1125:
	.align	2, 0
.L1124:
	.word	gBattleTypeFlags
.L1111:
	ldr	r0, .L1126
	ldr	r1, .L1126+0x4
	add	r0, r0, r1
	strb	r5, [r0]
	ldr	r1, .L1126+0x8
	ldrb	r0, [r2]
	strb	r0, [r1]
	ldr	r1, .L1126+0xc
	mov	r0, #0x2
	b	.L1115
.L1127:
	.align	2, 0
.L1126:
	.word	gSharedMem
	.word	0x16003
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L1112:
	ldr	r0, .L1128
	ldr	r1, .L1128+0x4
	add	r0, r0, r1
	strb	r5, [r0]
	ldr	r1, .L1128+0x8
	ldrb	r0, [r2]
	strb	r0, [r1]
	ldr	r1, .L1128+0xc
	mov	r0, #0x2
	b	.L1115
.L1129:
	.align	2, 0
.L1128:
	.word	gSharedMem
	.word	0x16003
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L1109:
	ldr	r1, .L1130
	mov	r0, #0x1
.L1115:
	strb	r0, [r1, #0x5]
.L1110:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1131:
	.align	2, 0
.L1130:
	.word	gBattleCommunication
.Lfe65:
	.size	 CanRunFromBattle,.Lfe65-CanRunFromBattle
	.align	2, 0
	.globl	sub_8012258
	.type	 sub_8012258,function
	.thumb_func
sub_8012258:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r3, #0x0
	ldr	r7, .L1150
	ldr	r4, .L1150+0x4
	ldr	r1, .L1150+0x8
	lsl	r6, r5, #0x1
	ldr	r2, .L1150+0xc
	add	r0, r5, r2
	add	r0, r6, r0
	add	r2, r0, r1
.L1136:
	add	r1, r3, r4
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1136	@cond_branch
	add	r0, r6, r7
	ldrb	r0, [r0]
	bl	pokemon_order_func
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r7, .L1150+0x8
	ldr	r1, .L1150+0x10
	add	r0, r5, r1
	add	r0, r0, r7
	ldrb	r0, [r0]
	bl	pokemon_order_func
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	sub_8094C98
	ldr	r0, .L1150+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1138	@cond_branch
	mov	r3, #0x0
	ldr	r2, .L1150+0xc
	mov	r0, #0x2
	add	r1, r5, #0
	eor	r1, r1, r0
	add	r0, r5, r2
	add	r0, r6, r0
	add	r4, r0, r7
	ldr	r5, .L1150+0x4
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r2
	add	r2, r0, r7
.L1142:
	add	r0, r3, r5
	ldrb	r1, [r0]
	strb	r1, [r4]
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1142	@cond_branch
	b	.L1144
.L1151:
	.align	2, 0
.L1150:
	.word	gBattlePartyID
	.word	gUnknown_02038470
	.word	gSharedMem
	.word	0x1606c
	.word	0x16068
	.word	gBattleTypeFlags
.L1138:
	mov	r3, #0x0
	ldr	r2, .L1152
	add	r0, r5, r2
	add	r0, r6, r0
	add	r1, r0, r7
	ldr	r2, .L1152+0x4
.L1148:
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1148	@cond_branch
.L1144:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1153:
	.align	2, 0
.L1152:
	.word	0x1606c
	.word	gUnknown_02038470
.Lfe66:
	.size	 sub_8012258,.Lfe66-sub_8012258
.text
	.align	2, 0
