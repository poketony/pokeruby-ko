@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gString_TurnJP
	.section .rodata
	.type	 gString_TurnJP,object
gString_TurnJP:
	.byte	0x60
	.byte	0xae
	.byte	0x7e
	.byte	0xff
	.size	 gString_TurnJP,4
	.globl	gPlayerBufferCommands
	.align	2, 0
	.type	 gPlayerBufferCommands,object
gPlayerBufferCommands:
	.word	PlayerHandleGetAttributes
	.word	PlayerHandlecmd1
	.word	PlayerHandleSetAttributes
	.word	PlayerHandlecmd3
	.word	PlayerHandleLoadPokeSprite
	.word	PlayerHandleSendOutPoke
	.word	PlayerHandleReturnPokeToBall
	.word	PlayerHandleTrainerThrow
	.word	PlayerHandleTrainerSlide
	.word	PlayerHandleTrainerSlideBack
	.word	PlayerHandlecmd10
	.word	PlayerHandlecmd11
	.word	PlayerHandlecmd12
	.word	PlayerHandleBallThrow
	.word	PlayerHandlePuase
	.word	PlayerHandleMoveAnimation
	.word	PlayerHandlePrintString
	.word	PlayerHandlePrintStringPlayerOnly
	.word	PlayerHandlecmd18
	.word	PlayerHandlecmd19
	.word	PlayerHandlecmd20
	.word	PlayerHandleOpenBag
	.word	PlayerHandlecmd22
	.word	PlayerHandlecmd23
	.word	PlayerHandleHealthBarUpdate
	.word	PlayerHandleExpBarUpdate
	.word	PlayerHandleStatusIconUpdate
	.word	PlayerHandleStatusAnimation
	.word	PlayerHandleStatusXor
	.word	PlayerHandlecmd29
	.word	PlayerHandleDMATransfer
	.word	PlayerHandlecmd31
	.word	PlayerHandlecmd32
	.word	PlayerHandlecmd33
	.word	PlayerHandlecmd34
	.word	PlayerHandlecmd35
	.word	PlayerHandlecmd36
	.word	PlayerHandlecmd37
	.word	PlayerHandlecmd38
	.word	PlayerHandlecmd39
	.word	PlayerHandlecmd40
	.word	PlayerHandleHitAnimation
	.word	PlayerHandlecmd42
	.word	PlayerHandleEffectivenessSound
	.word	PlayerHandlecmd44
	.word	PlayerHandleFaintingCry
	.word	PlayerHandleIntroSlide
	.word	PlayerHandleTrainerBallThrow
	.word	PlayerHandlecmd48
	.word	PlayerHandlecmd49
	.word	PlayerHandlecmd50
	.word	PlayerHandleSpriteInvisibility
	.word	PlayerHandleBattleAnimation
	.word	PlayerHandleLinkStandbyMsg
	.word	PlayerHandleResetActionMoveSelection
	.word	PlayerHandlecmd55
	.word	PlayerHandlecmd56
	.size	 gPlayerBufferCommands,228
.text
	.align	2, 0
	.globl	nullsub_91
	.type	 nullsub_91,function
	.thumb_func
nullsub_91:
	bx	lr
.Lfe1:
	.size	 nullsub_91,.Lfe1-nullsub_91
	.align	2, 0
	.globl	SetBankFuncToPlayerBufferRunCommand
	.type	 SetBankFuncToPlayerBufferRunCommand,function
	.thumb_func
SetBankFuncToPlayerBufferRunCommand:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	ldr	r1, .L4+0xc
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	PlayerBufferRunCommand
	.word	gDoingBattleAnim
.Lfe2:
	.size	 SetBankFuncToPlayerBufferRunCommand,.Lfe2-SetBankFuncToPlayerBufferRunCommand
	.align	2, 0
	.globl	PlayerBufferExecCompleted
	.type	 PlayerBufferExecCompleted,function
	.thumb_func
PlayerBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L9
	ldr	r4, .L9+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L9+0x8
	str	r1, [r0]
	ldr	r0, .L9+0xc
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L7	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r1, .L9+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	mov	r1, #0x38
	strb	r1, [r0]
	b	.L8
.L10:
	.align	2, 0
.L9:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	PlayerBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleBufferA
.L7:
	ldr	r2, .L11
	ldr	r1, .L11+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L8:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gBattleExecBuffer
	.word	gBitTable
.Lfe3:
	.size	 PlayerBufferExecCompleted,.Lfe3-PlayerBufferExecCompleted
	.align	2, 0
	.globl	PlayerBufferRunCommand
	.type	 PlayerBufferRunCommand,function
	.thumb_func
PlayerBufferRunCommand:
	push	{lr}
	ldr	r2, .L17
	ldr	r1, .L17+0x4
	ldr	r0, .L17+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L14	@cond_branch
	ldr	r0, .L17+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L15	@cond_branch
	ldr	r0, .L17+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L14
.L18:
	.align	2, 0
.L17:
	.word	gBattleExecBuffer
	.word	gBitTable
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gPlayerBufferCommands
.L15:
	bl	PlayerBufferExecCompleted
.L14:
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 PlayerBufferRunCommand,.Lfe4-PlayerBufferRunCommand
	.align	2, 0
	.globl	bx_0802E404
	.type	 bx_0802E404,function
	.thumb_func
bx_0802E404:
	push	{lr}
	ldr	r2, .L21
	ldr	r1, .L21+0x4
	ldr	r0, .L21+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L20	@cond_branch
	bl	PlayerBufferExecCompleted
.L20:
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
.Lfe5:
	.size	 bx_0802E404,.Lfe5-bx_0802E404
	.align	2, 0
	.globl	sub_802C098
	.type	 sub_802C098,function
	.thumb_func
sub_802C098:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L56
	ldr	r4, .L56+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r1, r7, #0x2
	add	r1, r2, r1
	ldrb	r5, [r1]
	add	r1, r7, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r5, r5, r1
	mov	r1, #0x1
	mov	r2, #0x7
	mov	r3, #0x1
	bl	dp11b_obj_instanciate
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x7
	mov	r3, #0x1
	bl	dp11b_obj_instanciate
	ldr	r0, .L56+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	DestroyMenuCursor
	ldr	r1, .L56+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L27	@cond_branch
	cmp	r0, #0x1
	bgt	.L32	@cond_branch
	cmp	r0, #0
	beq	.L26	@cond_branch
	b	.L25
.L57:
	.align	2, 0
.L56:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gMain
	.word	gActionSelectionCursor
.L32:
	cmp	r0, #0x2
	beq	.L28	@cond_branch
	cmp	r0, #0x3
	beq	.L29	@cond_branch
	b	.L25
.L26:
	mov	r0, #0x1
	mov	r1, #0x0
	b	.L53
.L27:
	mov	r0, #0x1
	mov	r1, #0x1
	b	.L53
.L28:
	mov	r0, #0x1
	mov	r1, #0x2
.L53:
	mov	r2, #0x0
	bl	Emitcmd33
	b	.L25
.L29:
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	Emitcmd33
.L25:
	bl	PlayerBufferExecCompleted
	b	.L23
.L24:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldr	r5, .L58
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB322
	b	.L23	@long jump
.LCB322:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	nullsub_8
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x1
	b	.L54
.L59:
	.align	2, 0
.L58:
	.word	gActionSelectionCursor
.L34:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L37	@cond_branch
	ldr	r5, .L60
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB362
	b	.L23	@long jump
.LCB362:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	nullsub_8
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x1
	b	.L54
.L61:
	.align	2, 0
.L60:
	.word	gActionSelectionCursor
.L37:
	mov	r0, #0x40
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldr	r5, .L62
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L23	@cond_branch
	b	.L55
.L63:
	.align	2, 0
.L62:
	.word	gActionSelectionCursor
.L40:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r5, .L64
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L23	@cond_branch
.L55:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	nullsub_8
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x2
.L54:
	eor	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_802E3E4
	b	.L23
.L65:
	.align	2, 0
.L64:
	.word	gActionSelectionCursor
.L43:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L46	@cond_branch
	ldr	r6, .L66
	ldrh	r1, [r6]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L23	@cond_branch
	ldrb	r0, [r4]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L23	@cond_branch
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	ldr	r1, .L66+0x4
	ldrb	r1, [r1]
	ldr	r2, .L66+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L23	@cond_branch
	ldrh	r1, [r6]
	mov	r0, r8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L23	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r7, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L48	@cond_branch
	cmp	r5, #0xc
	bhi	.L23	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	AddBagItem
.L48:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0xc
	mov	r2, #0x0
	bl	Emitcmd33
	bl	PlayerBufferExecCompleted
	bl	DestroyMenuCursor
	b	.L23
.L67:
	.align	2, 0
.L66:
	.word	gBattleTypeFlags
	.word	gAbsentBankFlags
	.word	gBitTable
.L46:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L23	@cond_branch
	bl	sub_804454C
.L23:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_802C098,.Lfe6-sub_802C098
	.align	2, 0
	.globl	unref_sub_802C2B8
	.type	 unref_sub_802C2B8,function
	.thumb_func
unref_sub_802C2B8:
	push	{r4, lr}
	ldr	r4, .L69
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	dp11b_obj_free
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	dp11b_obj_free
	ldr	r1, .L69+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L69+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gActiveBank
	.word	gBattleBankFunc
	.word	sub_802C2EC
.Lfe7:
	.size	 unref_sub_802C2B8,.Lfe7-unref_sub_802C2B8
	.section .rodata
.LC33:
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x1
.text
	.align	2, 0
	.globl	sub_802C2EC
	.type	 sub_802C2EC,function
	.thumb_func
sub_802C2EC:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L145
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L145+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	mov	r2, #0xf
	mov	r3, #0x1
	bl	dp11b_obj_instanciate
	mov	r4, #0x0
	ldr	r0, .L145+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L72	@cond_branch
.L73:
	ldr	r0, .L145+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L76	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	dp11b_obj_free
.L76:
	add	r4, r4, #0x1
	ldr	r0, .L145+0x8
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L73	@cond_branch
.L72:
	ldr	r0, .L145+0xc
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L79	@cond_branch
	bl	DestroyMenuCursor
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L145+0x10
	ldr	r1, .L145+0x14
	ldr	r4, .L145+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L145+0x18
	str	r1, [r0]
	ldr	r1, .L145+0x1c
	ldr	r0, .L145+0x20
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	mov	r0, #0x1
	mov	r1, #0xa
	bl	Emitcmd33
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	dp11b_obj_free
	bl	PlayerBufferExecCompleted
	b	.L80
.L146:
	.align	2, 0
.L145:
	.word	.LC33
	.word	gUnknown_03004344
	.word	gNoOfAllBanks
	.word	gMain
	.word	gSprites
	.word	gObjectBankIDs
	.word	sub_8010574
	.word	gMoveSelectionCursor
	.word	gActiveBank
.L79:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L81	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L147
	ldr	r1, .L147+0x4
	ldr	r5, .L147+0x8
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L147+0xc
	str	r1, [r0]
	ldr	r1, .L147+0x10
	ldr	r4, .L147+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L147+0x18
	str	r1, [r0]
	ldrb	r0, [r4]
	mov	r1, #0x1
	mov	r2, #0x7
	mov	r3, #0x1
	bl	dp11b_obj_instanciate
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x7
	mov	r3, #0x1
	bl	dp11b_obj_instanciate
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	dp11b_obj_free
	b	.L80
.L148:
	.align	2, 0
.L147:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gUnknown_03004344
	.word	sub_8010574
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802C68C
.L81:
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB769
	b	.L83	@long jump
.LCB769:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L149
	ldr	r1, .L149+0x4
	ldr	r3, .L149+0x8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L149+0xc
	str	r1, [r0]
	add	r5, r3, #0
.L84:
	ldrb	r0, [r5]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r4, #0x0
	mov	r0, sp
	b	.L142
.L150:
	.align	2, 0
.L149:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gUnknown_03004344
	.word	sub_8010574
.L89:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L93	@cond_branch
	mov	r2, sp
	add	r0, r2, r4
.L142:
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L89	@cond_branch
.L93:
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L96	@cond_branch
	mov	r4, #0x3
.L96:
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r0, [r0]
	bl	GetBankByPlayerAI
	strb	r0, [r5]
	ldr	r1, .L151
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L93	@cond_branch
	mov	r4, #0x0
	ldrb	r0, [r5]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L105	@cond_branch
	cmp	r0, #0x1
	bgt	.L108	@cond_branch
	cmp	r0, #0
	beq	.L101	@cond_branch
	b	.L99
.L152:
	.align	2, 0
.L151:
	.word	gNoOfAllBanks
.L108:
	cmp	r0, #0x2
	beq	.L101	@cond_branch
	cmp	r0, #0x3
	beq	.L105	@cond_branch
	b	.L99
.L101:
	ldr	r2, .L153
	ldrb	r0, [r2]
	ldrb	r1, [r5]
	cmp	r0, r1
	bne	.L102	@cond_branch
	.code	16
	ldr	r1, .L153+0x4
	ldrb	r2, [r2]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L153+0x8
	add	r0, r0, r1
	ldr	r1, .L153+0xc
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0xd
	bl	GetMonData
	ldr	r2, .L153+0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x6]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L99	@cond_branch
.L102:
.L105:
	add	r4, r4, #0x1
.L99:
	ldr	r0, .L153+0x14
	ldrb	r1, [r0]
	ldr	r2, .L153+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	ldr	r0, .L153+0x1c
	cmp	r1, #0
	beq	.L86	@cond_branch
	mov	r4, #0x0
.L86:
	cmp	r4, #0
	beq	.L84	@cond_branch
	b	.L143
.L154:
	.align	2, 0
.L153:
	.word	gActiveBank
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gMoveSelectionCursor
	.word	gBattleMoves
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gUnknown_03004344
.L83:
	mov	r0, #0x90
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB976
	b	.L80	@long jump
.LCB976:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L155
	ldr	r1, .L155+0x4
	ldr	r3, .L155+0x8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L155+0xc
	str	r1, [r0]
	add	r5, r3, #0
.L114:
	ldrb	r0, [r5]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r4, #0x0
	mov	r0, sp
	b	.L144
.L156:
	.align	2, 0
.L155:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gUnknown_03004344
	.word	sub_8010574
.L119:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L123	@cond_branch
	mov	r2, sp
	add	r0, r2, r4
.L144:
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L119	@cond_branch
.L123:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L126	@cond_branch
	mov	r4, #0x0
.L126:
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r0, [r0]
	bl	GetBankByPlayerAI
	strb	r0, [r5]
	ldr	r1, .L157
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L123	@cond_branch
	mov	r4, #0x0
	ldrb	r0, [r5]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L135	@cond_branch
	cmp	r0, #0x1
	bgt	.L138	@cond_branch
	cmp	r0, #0
	beq	.L131	@cond_branch
	b	.L129
.L158:
	.align	2, 0
.L157:
	.word	gNoOfAllBanks
.L138:
	cmp	r0, #0x2
	beq	.L131	@cond_branch
	cmp	r0, #0x3
	beq	.L135	@cond_branch
	b	.L129
.L131:
	ldr	r2, .L159
	ldrb	r0, [r2]
	ldrb	r1, [r5]
	cmp	r0, r1
	bne	.L132	@cond_branch
	.code	16
	ldr	r1, .L159+0x4
	ldrb	r2, [r2]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L159+0x8
	add	r0, r0, r1
	ldr	r1, .L159+0xc
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0xd
	bl	GetMonData
	ldr	r2, .L159+0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x6]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L129	@cond_branch
.L132:
.L135:
	add	r4, r4, #0x1
.L129:
	ldr	r0, .L159+0x14
	ldrb	r1, [r0]
	ldr	r2, .L159+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	ldr	r0, .L159+0x1c
	cmp	r1, #0
	beq	.L116	@cond_branch
	mov	r4, #0x0
.L116:
	cmp	r4, #0
	beq	.L114	@cond_branch
.L143:
	ldr	r2, .L159+0x20
	ldr	r1, .L159+0x24
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L159+0x28
	str	r1, [r0]
.L80:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	gActiveBank
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gMoveSelectionCursor
	.word	gBattleMoves
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gUnknown_03004344
	.word	gSprites
	.word	gObjectBankIDs
	.word	sub_8010520
.Lfe8:
	.size	 sub_802C2EC,.Lfe8-sub_802C2EC
	.globl	gUnknown_081FAE80
	.section .rodata
	.type	 gUnknown_081FAE80,object
gUnknown_081FAE80:
	.byte	0xfc
	.byte	0x5
	.byte	0x5
	.byte	0xfc
	.byte	0x4
	.byte	0xc
	.byte	0xe
	.byte	0xf
	.byte	0xff
	.size	 gUnknown_081FAE80,9
.text
	.align	2, 0
	.globl	sub_802C68C
	.type	 sub_802C68C,function
	.thumb_func
sub_802C68C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	mov	r0, #0x0
	mov	r8, r0
	ldr	r6, .L207
	ldrb	r2, [r6]
	lsl	r0, r2, #0x9
	ldr	r1, .L207+0x4
	add	r7, r0, r1
	ldr	r0, .L207+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r5, #0x1
	add	r4, r5, #0
	and	r4, r4, r1
	cmp	r4, #0
	bne	.LCB1220
	b	.L162	@long jump
.LCB1220:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L207+0xc
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r1, r7, r0
	ldrh	r0, [r1]
	cmp	r0, #0xae
	bne	.L163	@cond_branch
	ldrb	r0, [r7, #0x12]
	mov	r4, #0x0
	cmp	r0, #0x7
	beq	.L166	@cond_branch
	ldrb	r1, [r7, #0x13]
	mov	r0, #0x7
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	asr	r4, r0, #0x1f
	mov	r0, #0x10
	and	r4, r4, r0
	b	.L166
.L208:
	.align	2, 0
.L207:
	.word	gActiveBank
	.word	gBattleBufferA+0x4
	.word	gMain
	.word	gMoveSelectionCursor
.L163:
	ldr	r2, .L209
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x6]
.L166:
	mov	r0, #0x10
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L167	@cond_branch
	ldr	r0, .L209+0x4
	ldr	r1, .L209+0x8
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L168
.L210:
	.align	2, 0
.L209:
	.word	gBattleMoves
	.word	gUnknown_03004344
	.word	gActiveBank
.L167:
	ldr	r0, .L211
	ldrb	r0, [r0]
	bl	GetBankIdentity
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	bl	GetBankByPlayerAI
	ldr	r1, .L211+0x4
	strb	r0, [r1]
.L168:
	ldr	r3, .L211+0x8
	ldr	r5, .L211
	ldrb	r2, [r5]
	lsl	r1, r2, #0x9
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L169	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L171	@cond_branch
	add	r0, r3, #0x2
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L171	@cond_branch
	mov	r2, #0x1
	add	r8, r8, r2
	b	.L171
.L212:
	.align	2, 0
.L211:
	.word	gActiveBank
	.word	gUnknown_03004344
	.word	gBattleBufferA
.L169:
	mov	r0, #0x7d
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L172	@cond_branch
	mov	r0, #0x1
	add	r8, r8, r0
.L172:
	ldr	r0, .L213
	add	r0, r2, r0
	add	r1, r7, #0
	add	r1, r1, #0x8
	ldrb	r0, [r0]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L201	@cond_branch
	mov	r0, #0x12
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L171	@cond_branch
	mov	r0, #0x0
	bl	CountAliveMons
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L171	@cond_branch
	ldrb	r0, [r5]
	bl	sub_803C434
	ldr	r1, .L213+0x4
	strb	r0, [r1]
	mov	r2, #0x0
	mov	r8, r2
.L171:
	mov	r0, r8
	cmp	r0, #0
	bne	.L176	@cond_branch
.L201:
	bl	DestroyMenuCursor
	ldr	r1, .L213
	ldr	r0, .L213+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r0, .L213+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	b	.L202
.L214:
	.align	2, 0
.L213:
	.word	gMoveSelectionCursor
	.word	gUnknown_03004344
	.word	gActiveBank
.L176:
	ldr	r1, .L215
	ldr	r2, .L215+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L215+0x8
	str	r1, [r0]
	mov	r0, #0x12
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L178	@cond_branch
	ldr	r1, .L215+0xc
	ldrb	r0, [r2]
	b	.L203
.L216:
	.align	2, 0
.L215:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802C2EC
	.word	gUnknown_03004344
.L178:
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	ldr	r1, .L217
	ldrb	r1, [r1]
	ldr	r2, .L217+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L180	@cond_branch
	mov	r0, #0x3
	b	.L204
.L218:
	.align	2, 0
.L217:
	.word	gAbsentBankFlags
	.word	gBitTable
.L180:
	mov	r0, #0x1
.L204:
	bl	GetBankByPlayerAI
	ldr	r1, .L219
.L203:
	strb	r0, [r1]
	ldr	r2, .L219+0x4
	ldr	r1, .L219+0x8
	ldr	r0, .L219
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L219+0xc
	b	.L205
.L220:
	.align	2, 0
.L219:
	.word	gUnknown_03004344
	.word	gSprites
	.word	gObjectBankIDs
	.word	sub_8010520
.L162:
	mov	r7, #0x2
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	bl	DestroyMenuCursor
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L221
	strh	r4, [r0]
	ldr	r1, .L221+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r2, .L221+0x8
.L202:
	mov	r0, #0x1
	mov	r1, #0xa
	bl	Emitcmd33
	bl	PlayerBufferExecCompleted
	b	.L182
.L222:
	.align	2, 0
.L221:
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	0xffff
.L183:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldr	r4, .L223
	add	r2, r2, r4
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1551
	b	.L182	@long jump
.LCB1551:
	ldrb	r0, [r2]
	bl	nullsub_7
	ldrb	r1, [r6]
	add	r1, r1, r4
	ldrb	r0, [r1]
	mov	r2, #0x1
	eor	r0, r0, r2
	b	.L206
.L224:
	.align	2, 0
.L223:
	.word	gMoveSelectionCursor
.L185:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L188	@cond_branch
	ldr	r4, .L225
	add	r3, r2, r4
	ldrb	r2, [r3]
	mov	r7, #0x1
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.LCB1587
	b	.L182	@long jump
.LCB1587:
	ldr	r1, .L225+0x4
	add	r0, r7, #0
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.LCB1598
	b	.L182	@long jump
.LCB1598:
	ldrb	r0, [r3]
	bl	nullsub_7
	ldrb	r1, [r6]
	add	r1, r1, r4
	ldrb	r0, [r1]
	eor	r0, r0, r7
	b	.L206
.L226:
	.align	2, 0
.L225:
	.word	gMoveSelectionCursor
	.word	gUnknown_03004348
.L188:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L191	@cond_branch
	ldr	r4, .L227
	add	r2, r2, r4
	ldrb	r1, [r2]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1634
	b	.L182	@long jump
.LCB1634:
	ldrb	r0, [r2]
	bl	nullsub_7
	ldrb	r1, [r6]
	add	r1, r1, r4
	ldrb	r0, [r1]
	mov	r2, #0x2
	eor	r0, r0, r2
	b	.L206
.L228:
	.align	2, 0
.L227:
	.word	gMoveSelectionCursor
.L191:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L194	@cond_branch
	ldr	r4, .L229
	add	r3, r2, r4
	ldrb	r2, [r3]
	mov	r5, #0x2
	add	r0, r7, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L182	@cond_branch
	ldr	r1, .L229+0x4
	add	r0, r5, #0
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L182	@cond_branch
	ldrb	r0, [r3]
	bl	nullsub_7
	ldrb	r1, [r6]
	add	r1, r1, r4
	ldrb	r0, [r1]
	eor	r0, r0, r5
.L206:
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_802E3B4
	bl	sub_802E220
	bl	sub_802E2D4
	b	.L182
.L230:
	.align	2, 0
.L229:
	.word	gMoveSelectionCursor
	.word	gUnknown_03004348
.L194:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L182	@cond_branch
	ldr	r0, .L231
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L182	@cond_branch
	ldr	r0, .L231+0x4
	ldrh	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L182	@cond_branch
	ldr	r0, .L231+0x8
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L199	@cond_branch
	ldr	r0, .L231+0xc
	strb	r1, [r0]
	b	.L200
.L232:
	.align	2, 0
.L231:
	.word	gUnknown_03004348
	.word	gBattleTypeFlags
	.word	gMoveSelectionCursor
	.word	gUnknown_03004344
.L199:
	ldr	r1, .L233
	add	r0, r0, #0x1
	strb	r0, [r1]
.L200:
	mov	r0, #0x1
	bl	SetCustomFont
	ldr	r1, .L233+0x4
	ldr	r5, .L233+0x8
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x1d
	bl	sub_802E3B4
	ldr	r0, .L233
	ldrb	r0, [r0]
	mov	r1, #0x1b
	bl	sub_802E3B4
	ldr	r4, .L233+0xc
	ldr	r1, .L233+0x10
	mov	r0, #0x1c
	str	r0, [sp]
	mov	r0, #0x3a
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r2, #0x17
	mov	r3, #0x37
	bl	FillWindowRect
	ldr	r1, .L233+0x14
	mov	r2, #0xa4
	lsl	r2, r2, #0x2
	mov	r0, #0x37
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x17
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
	mov	r0, #0x0
	bl	SetCustomFont
	ldr	r1, .L233+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L233+0x1c
.L205:
	str	r1, [r0]
.L182:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gUnknown_03004344
	.word	gMoveSelectionCursor
	.word	gActiveBank
	.word	gUnknown_03004210
	.word	0x1016
	.word	BattleText_SwitchWhich
	.word	gBattleBankFunc
	.word	sub_802CA60
.Lfe9:
	.size	 sub_802C68C,.Lfe9-sub_802C68C
	.align	2, 0
	.globl	sub_802CA60
	.type	 sub_802CA60,function
	.thumb_func
sub_802CA60:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffd4
	ldr	r0, .L297
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1840
	b	.L236	@long jump
.LCB1840:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L297+0x4
	mov	sl, r0
	ldr	r1, .L297+0x8
	mov	r8, r1
	ldrb	r1, [r1]
	add	r2, r1, r0
	ldr	r5, .L297+0xc
	ldrb	r0, [r2]
	ldrb	r3, [r5]
	cmp	r0, r3
	bne	.LCB1859
	b	.L237	@long jump
.LCB1859:
	lsl	r1, r1, #0x9
	ldr	r0, .L297+0x10
	add	r1, r1, r0
	mov	r9, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	ldrh	r6, [r1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	strh	r6, [r0]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r7, r9
	add	r7, r7, #0x8
	add	r1, r7, r1
	ldrb	r6, [r1]
	ldrb	r0, [r5]
	add	r0, r7, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r5]
	add	r0, r7, r0
	strb	r6, [r0]
	mov	r2, r8
	ldrb	r0, [r2]
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r2, r9
	add	r2, r2, #0xc
	add	r1, r2, r1
	ldrb	r6, [r1]
	ldrb	r0, [r5]
	add	r0, r2, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r5]
	add	r2, r2, r0
	strb	r6, [r2]
	mov	r3, r8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L297+0x14
	add	r6, r0, r2
	ldrb	r4, [r6, #0x18]
	lsl	r3, r4, #0x18
	lsr	r2, r3, #0x1c
	ldr	r0, .L297+0x18
	mov	ip, r0
	add	r1, r1, sl
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L238	@cond_branch
	lsr	r1, r3, #0x1c
	bic	r1, r1, r0
	lsl	r1, r1, #0x4
	mov	r2, #0xf
	add	r0, r2, #0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r6, #0x18]
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r3, .L297+0x14
	add	r1, r1, r3
	ldrb	r4, [r1, #0x18]
	lsr	r3, r4, #0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldr	r0, [r0]
	orr	r0, r0, r3
	lsl	r0, r0, #0x4
	and	r2, r2, r4
	orr	r2, r2, r0
	strb	r2, [r1, #0x18]
.L238:
	bl	sub_802E1B0
	mov	r6, #0x0
	mov	ip, r7
	mov	r5, sp
	add	r5, r5, #0x20
	str	r5, [sp, #0x28]
	ldr	r2, .L297+0x1c
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r4, r0, #0
	add	r4, r4, #0x3b
	mov	r7, r8
	mov	sl, r2
	mov	r5, #0x3
.L242:
	mov	r3, sp
	add	r3, r3, r6
	add	r3, r3, #0x8
	ldrb	r1, [r4]
	lsl	r2, r6, #0x1
	add	r0, r5, #0
	lsl	r0, r0, r2
	and	r1, r1, r0
	asr	r1, r1, r2
	strb	r1, [r3]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L242	@cond_branch
	ldr	r1, .L297+0x4
	ldrb	r0, [r7]
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, sp
	add	r0, r0, #0x8
	ldrb	r0, [r0]
	ldr	r2, [sp, #0x28]
	strb	r0, [r2]
	ldrb	r0, [r7]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r2, sp
	add	r2, r2, r0
	add	r2, r2, #0x8
	ldr	r1, .L297+0xc
	ldrb	r0, [r1]
	add	r0, r0, sp
	add	r0, r0, #0x8
	ldrb	r0, [r0]
	mov	r3, #0x0
	strb	r0, [r2]
	ldrb	r0, [r1]
	mov	r1, sp
	add	r1, r1, r0
	add	r1, r1, #0x8
	ldr	r5, [sp, #0x28]
	ldrb	r0, [r5]
	strb	r0, [r1]
	strb	r3, [r5]
	mov	r6, #0x0
	ldr	r2, [sp, #0x28]
.L247:
	mov	r0, sp
	add	r0, r0, r6
	add	r0, r0, #0x8
	ldrb	r1, [r0]
	lsl	r0, r6, #0x1
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L247	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, sl
	add	r0, r0, #0x3b
	ldr	r2, [sp, #0x28]
	ldrb	r1, [r2]
	strb	r1, [r0]
	mov	r6, #0x0
	add	r4, r7, #0
	mov	r3, #0x58
	mov	r5, #0x24
	add	r5, r5, sl
	mov	r8, r5
	mov	r2, r9
	mov	r7, sl
	add	r7, r7, #0xc
	mov	r5, ip
.L252:
	lsl	r1, r6, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r7
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r3
	add	r1, r6, r1
	add	r1, r1, r8
	add	r0, r5, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L252	@cond_branch
	ldr	r2, .L297+0x8
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, sl
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2115
	b	.L237	@long jump
.LCB2115:
	mov	r6, #0x0
	mov	r0, sp
	add	r0, r0, #0xc
	str	r0, [sp, #0x24]
	add	r1, sp, #0x14
	mov	sl, r1
	ldr	r3, .L297+0x20
	mov	r9, r3
	mov	r8, r2
	mov	r7, #0x64
	ldr	r5, .L297+0x24
	add	r4, r0, #0
.L258:
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	add	r1, r6, #0
	add	r1, r1, #0xd
	bl	GetMonData
	strh	r0, [r4]
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	add	r1, r6, #0
	add	r1, r1, #0x11
	bl	GetMonData
	mov	r3, sl
	add	r1, r3, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L258	@cond_branch
	ldr	r1, .L297+0x20
	ldr	r0, .L297+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L297+0x24
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	ldr	r5, [sp, #0x28]
	strb	r0, [r5]
	mov	r6, #0x0
	mov	r5, #0x3
	ldr	r4, [sp, #0x28]
.L263:
	mov	r3, sp
	add	r3, r3, r6
	add	r3, r3, #0x8
	lsl	r2, r6, #0x1
	add	r1, r5, #0
	lsl	r1, r1, r2
	ldrb	r0, [r4]
	and	r0, r0, r1
	asr	r0, r0, r2
	strb	r0, [r3]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L263	@cond_branch
	ldr	r4, .L297+0x4
	ldr	r3, .L297+0x8
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, [sp, #0x24]
	add	r1, r0, r1
	ldrh	r6, [r1]
	ldr	r2, .L297+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	ldr	r5, [sp, #0x24]
	add	r0, r5, r0
	ldrh	r0, [r0]
	mov	r5, #0x0
	strh	r0, [r1]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	ldr	r1, [sp, #0x24]
	add	r0, r1, r0
	strh	r6, [r0]
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r1, r1, sl
	ldrb	r6, [r1]
	ldrb	r0, [r2]
	add	r0, r0, sl
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2]
	add	r0, r0, sl
	strb	r6, [r0]
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r0, [r0]
	add	r0, r0, sp
	add	r0, r0, #0x8
	ldrb	r0, [r0]
	ldr	r1, [sp, #0x28]
	strb	r0, [r1]
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, sp
	add	r1, r1, r0
	add	r1, r1, #0x8
	ldrb	r0, [r2]
	add	r0, r0, sp
	add	r0, r0, #0x8
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2]
	mov	r1, sp
	add	r1, r1, r0
	add	r1, r1, #0x8
	ldr	r2, [sp, #0x28]
	ldrb	r0, [r2]
	strb	r0, [r1]
	strb	r5, [r2]
	mov	r6, #0x0
	ldr	r2, [sp, #0x28]
.L268:
	mov	r0, sp
	add	r0, r0, r6
	add	r0, r0, #0x8
	ldrb	r1, [r0]
	lsl	r0, r6, #0x1
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L268	@cond_branch
	mov	r6, #0x0
	ldr	r3, .L297+0x20
	mov	sl, r3
	ldr	r5, .L297+0x8
	mov	r9, r5
	mov	r0, #0x64
	mov	r8, r0
	ldr	r7, .L297+0x24
	ldr	r5, [sp, #0x24]
	add	r5, r5, #0x8
	ldr	r4, [sp, #0x24]
.L273:
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r2, r4, #0
	bl	SetMonData
	mov	r3, r9
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r2, r5, #0
	bl	SetMonData
	add	r5, r5, #0x1
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L273	@cond_branch
	ldr	r1, .L297+0x20
	ldr	r0, .L297+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L297+0x24
	add	r0, r0, r1
	mov	r1, #0x15
	ldr	r2, [sp, #0x28]
	bl	SetMonData
.L237:
	ldr	r1, .L297+0x28
	ldr	r2, .L297+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L297+0x2c
	str	r1, [r0]
	ldr	r3, .L297+0x4
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldr	r1, .L297+0xc
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_802E3B4
	ldr	r4, .L297+0x30
	ldr	r1, .L297+0x34
	mov	r0, #0x1c
	str	r0, [sp]
	mov	r0, #0x3a
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r2, #0x17
	mov	r3, #0x37
	bl	FillWindowRect
	ldr	r1, .L297+0x38
	mov	r2, #0xa4
	lsl	r2, r2, #0x2
	b	.L296
.L298:
	.align	2, 0
.L297:
	.word	gMain
	.word	gMoveSelectionCursor
	.word	gActiveBank
	.word	gUnknown_03004344
	.word	gBattleBufferA+0x4
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattleMons
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gBattleBankFunc
	.word	sub_802C68C
	.word	gUnknown_03004210
	.word	0x1016
	.word	BattleText_PP
.L296:
	mov	r0, #0x37
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x17
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
	bl	sub_802E220
	bl	sub_802E2D4
.L236:
	ldr	r5, .L299
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L275	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L299+0x4
	ldrb	r0, [r0]
	bl	nullsub_7
	ldr	r1, .L299+0x8
	ldr	r4, .L299+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_802E3B4
	ldr	r1, .L299+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L299+0x14
	str	r1, [r0]
	ldr	r4, .L299+0x18
	ldr	r1, .L299+0x1c
	mov	r0, #0x1c
	str	r0, [sp]
	mov	r0, #0x3a
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r2, #0x17
	mov	r3, #0x37
	bl	FillWindowRect
	ldr	r1, .L299+0x20
	mov	r2, #0xa4
	lsl	r2, r2, #0x2
	mov	r0, #0x37
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x17
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
	bl	sub_802E220
	bl	sub_802E2D4
.L275:
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L276	@cond_branch
	ldr	r3, .L299+0x4
	ldrb	r2, [r3]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L276	@cond_branch
	ldr	r0, .L299+0x8
	ldr	r1, .L299+0xc
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r5, [r1]
	cmp	r2, r5
	bne	.L277	@cond_branch
	ldrb	r0, [r1]
	mov	r1, #0x1d
	bl	sub_802E3B4
	b	.L278
.L300:
	.align	2, 0
.L299:
	.word	gMain
	.word	gUnknown_03004344
	.word	gMoveSelectionCursor
	.word	gActiveBank
	.word	gBattleBankFunc
	.word	sub_802C68C
	.word	gUnknown_03004210
	.word	0x1016
	.word	BattleText_PP
.L277:
	ldrb	r0, [r3]
	bl	nullsub_7
.L278:
	ldr	r4, .L301
	ldrb	r0, [r4]
	mov	r1, #0x1
	eor	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L301+0x4
	ldr	r0, .L301+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r4]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L279	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	sub_802E3B4
	b	.L276
.L302:
	.align	2, 0
.L301:
	.word	gUnknown_03004344
	.word	gMoveSelectionCursor
	.word	gActiveBank
.L279:
	ldrb	r0, [r4]
	mov	r1, #0x1b
	bl	sub_802E3B4
.L276:
	ldr	r0, .L303
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L281	@cond_branch
	ldr	r3, .L303+0x4
	ldrb	r2, [r3]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L281	@cond_branch
	ldr	r1, .L303+0x8
	mov	r0, #0x1
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L281	@cond_branch
	ldr	r0, .L303+0xc
	ldr	r1, .L303+0x10
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r2, r0
	bne	.L282	@cond_branch
	ldrb	r0, [r1]
	mov	r1, #0x1d
	bl	sub_802E3B4
	b	.L283
.L304:
	.align	2, 0
.L303:
	.word	gMain
	.word	gUnknown_03004344
	.word	gUnknown_03004348
	.word	gMoveSelectionCursor
	.word	gActiveBank
.L282:
	ldrb	r0, [r3]
	bl	nullsub_7
.L283:
	ldr	r4, .L305
	ldrb	r0, [r4]
	mov	r1, #0x1
	eor	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L305+0x4
	ldr	r0, .L305+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r4]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L284	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	sub_802E3B4
	b	.L281
.L306:
	.align	2, 0
.L305:
	.word	gUnknown_03004344
	.word	gMoveSelectionCursor
	.word	gActiveBank
.L284:
	ldrb	r0, [r4]
	mov	r1, #0x1b
	bl	sub_802E3B4
.L281:
	ldr	r0, .L307
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L286	@cond_branch
	ldr	r3, .L307+0x4
	ldrb	r2, [r3]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L286	@cond_branch
	ldr	r0, .L307+0x8
	ldr	r1, .L307+0xc
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r5, [r1]
	cmp	r2, r5
	bne	.L287	@cond_branch
	ldrb	r0, [r1]
	mov	r1, #0x1d
	bl	sub_802E3B4
	b	.L288
.L308:
	.align	2, 0
.L307:
	.word	gMain
	.word	gUnknown_03004344
	.word	gMoveSelectionCursor
	.word	gActiveBank
.L287:
	ldrb	r0, [r3]
	bl	nullsub_7
.L288:
	ldr	r4, .L309
	ldrb	r0, [r4]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L309+0x4
	ldr	r0, .L309+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r4]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L289	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	sub_802E3B4
	b	.L286
.L310:
	.align	2, 0
.L309:
	.word	gUnknown_03004344
	.word	gMoveSelectionCursor
	.word	gActiveBank
.L289:
	ldrb	r0, [r4]
	mov	r1, #0x1b
	bl	sub_802E3B4
.L286:
	ldr	r0, .L311
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L291	@cond_branch
	ldr	r3, .L311+0x4
	ldrb	r2, [r3]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L291	@cond_branch
	ldr	r1, .L311+0x8
	mov	r0, #0x2
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L291	@cond_branch
	ldr	r0, .L311+0xc
	ldr	r1, .L311+0x10
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r2, r0
	bne	.L292	@cond_branch
	ldrb	r0, [r1]
	mov	r1, #0x1d
	bl	sub_802E3B4
	b	.L293
.L312:
	.align	2, 0
.L311:
	.word	gMain
	.word	gUnknown_03004344
	.word	gUnknown_03004348
	.word	gMoveSelectionCursor
	.word	gActiveBank
.L292:
	ldrb	r0, [r3]
	bl	nullsub_7
.L293:
	ldr	r4, .L313
	ldrb	r0, [r4]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L313+0x4
	ldr	r0, .L313+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r4]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L294	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	sub_802E3B4
	b	.L291
.L314:
	.align	2, 0
.L313:
	.word	gUnknown_03004344
	.word	gMoveSelectionCursor
	.word	gActiveBank
.L294:
	ldrb	r0, [r4]
	mov	r1, #0x1b
	bl	sub_802E3B4
.L291:
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_802CA60,.Lfe10-sub_802CA60
	.align	2, 0
	.globl	sub_802D148
	.type	 sub_802D148,function
	.thumb_func
sub_802D148:
	push	{lr}
	ldr	r0, .L317
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L316	@cond_branch
	mov	r0, #0x5a
	bl	m4aSongNumStop
	ldr	r3, .L317+0x4
	ldr	r0, .L317+0x8
	add	r2, r3, r0
	ldrb	r1, [r2]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L317+0xc
	ldr	r0, [r0]
	str	r0, [r3]
	ldr	r0, .L317+0x10
	bl	SetMainCallback2
.L316:
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	gReceivedRemoteLinkPlayers
	.word	gMain
	.word	0x43d
	.word	gPreBattleCallback1
	.word	c2_8011A1C
.Lfe11:
	.size	 sub_802D148,.Lfe11-sub_802D148
	.align	2, 0
	.globl	sub_802D18C
	.type	 sub_802D18C,function
	.thumb_func
sub_802D18C:
	push	{lr}
	ldr	r0, .L323
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L320	@cond_branch
	ldr	r0, .L323+0x4
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L321	@cond_branch
	bl	sub_800832C
	ldr	r1, .L323+0x8
	ldr	r0, .L323+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L323+0x10
	str	r1, [r0]
	b	.L320
.L324:
	.align	2, 0
.L323:
	.word	gPaletteFade
	.word	gBattleTypeFlags
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802D148
.L321:
	mov	r0, #0x5a
	bl	m4aSongNumStop
	ldr	r2, .L325
	ldr	r0, .L325+0x4
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L325+0x8
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L320:
	pop	{r0}
	bx	r0
.L326:
	.align	2, 0
.L325:
	.word	gMain
	.word	0x43d
	.word	gPreBattleCallback1
.Lfe12:
	.size	 sub_802D18C,.Lfe12-sub_802D18C
	.align	2, 0
	.globl	sub_802D204
	.type	 sub_802D204,function
	.thumb_func
sub_802D204:
	push	{lr}
	ldr	r2, .L329
	ldr	r1, .L329+0x4
	ldr	r0, .L329+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L329+0xc
	cmp	r1, r0
	bne	.L328	@cond_branch
	bl	PlayerBufferExecCompleted
.L328:
	pop	{r0}
	bx	r0
.L330:
	.align	2, 0
.L329:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.Lfe13:
	.size	 sub_802D204,.Lfe13-sub_802D204
	.align	2, 0
	.globl	sub_802D23C
	.type	 sub_802D23C,function
	.thumb_func
sub_802D23C:
	push	{lr}
	ldr	r2, .L333
	ldr	r1, .L333+0x4
	ldr	r0, .L333+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L333+0xc
	cmp	r1, r0
	bne	.L332	@cond_branch
	bl	PlayerBufferExecCompleted
.L332:
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.Lfe14:
	.size	 sub_802D23C,.Lfe14-sub_802D23C
	.align	2, 0
	.globl	sub_802D274
	.type	 sub_802D274,function
	.thumb_func
sub_802D274:
	push	{r4, r5, r6, lr}
	ldr	r6, .L337
	ldr	r5, .L337+0x4
	ldr	r4, .L337+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L337+0xc
	cmp	r1, r0
	bne	.L336	@cond_branch
	ldr	r0, .L337+0x10
	ldrb	r0, [r0, #0x8]
	bl	nullsub_10
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	bl	PlayerBufferExecCompleted
.L336:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L338:
	.align	2, 0
.L337:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	gSaveBlock2
.Lfe15:
	.size	 sub_802D274,.Lfe15-sub_802D274
	.align	2, 0
	.globl	sub_802D2E0
	.type	 sub_802D2E0,function
	.thumb_func
sub_802D2E0:
	push	{lr}
	ldr	r3, .L341
	ldrb	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L341+0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L340	@cond_branch
	ldrb	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
	bl	PlayerBufferExecCompleted
.L340:
	pop	{r0}
	bx	r0
.L342:
	.align	2, 0
.L341:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe16:
	.size	 sub_802D2E0,.Lfe16-sub_802D2E0
	.align	2, 0
	.globl	sub_802D31C
	.type	 sub_802D31C,function
	.thumb_func
sub_802D31C:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L345	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L344	@cond_branch
	ldr	r0, .L355
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L344	@cond_branch
.L345:
	ldr	r2, .L355+0x4
	ldr	r1, .L355+0x8
	ldr	r0, .L355+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L355+0x10
	cmp	r1, r0
	bne	.L347	@cond_branch
	b	.L354
.L356:
	.align	2, 0
.L355:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.L344:
	ldr	r2, .L357
	ldr	r5, .L357+0x4
	ldr	r0, .L357+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L357+0xc
	cmp	r4, r0
	bne	.L347	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L347	@cond_branch
.L354:
	mov	r6, #0x1
.L347:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L349	@cond_branch
	mov	r6, #0x0
.L349:
	cmp	r6, #0
	bne	.LCB3298
	b	.L350	@long jump
.LCB3298:
	ldr	r7, .L357+0x8
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r5, .L357+0x10
	add	r4, r0, r5
	ldrb	r1, [r4, #0x1]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3313
	b	.L350	@long jump
.LCB3313:
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L350	@cond_branch
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L357+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L357+0x18
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L351	@cond_branch
	ldr	r0, .L357+0x1c
	bl	m4aMPlayContinue
	b	.L352
.L358:
	.align	2, 0
.L357:
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	gSharedMem+0x17810
	.word	0x27f9
	.word	gBattleTypeFlags
	.word	gMPlay_BGM
.L351:
	ldr	r0, .L359
	ldr	r1, .L359+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L352:
	ldr	r7, .L359+0x8
	ldr	r4, .L359+0xc
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L359+0x10
	add	r0, r0, r5
	bl	sub_80324F8
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L353	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x2
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	sub_80324F8
.L353:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L359+0x14
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L359+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L359+0x1c
	str	r1, [r0]
.L350:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	gMPlay_BGM
	.word	0xffff
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gPlayerParty
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_802D2E0
.Lfe17:
	.size	 sub_802D31C,.Lfe17-sub_802D31C
	.align	2, 0
	.globl	sub_802D500
	.type	 sub_802D500,function
	.thumb_func
sub_802D500:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L366
	ldrb	r2, [r5]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L366+0x4
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r7, #0x88
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L362	@cond_branch
	ldr	r0, .L366+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L366+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L362:
	ldrb	r0, [r5]
	mov	r6, #0x2
	add	r2, r6, #0
	eor	r2, r2, r0
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L363	@cond_branch
	ldr	r0, .L366+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L366+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L363:
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r3, #0x8
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L364	@cond_branch
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L364	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L365	@cond_branch
	ldr	r0, .L366+0x10
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L365	@cond_branch
	ldr	r1, .L366+0x14
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L366+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L366+0x1c
	ldrb	r0, [r5]
	add	r1, r6, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L366+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L366+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r5]
	eor	r0, r0, r6
	bl	sub_804777C
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	sub_8043DFC
.L365:
	ldr	r1, .L366+0x14
	ldr	r4, .L366
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L366+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L366+0x1c
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L366+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L366+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r4]
	bl	sub_804777C
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldr	r2, .L366+0x20
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L366+0x24
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L366+0x28
	str	r1, [r0]
.L364:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L367:
	.align	2, 0
.L366:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gUnknown_0300434C
	.word	gSprites
	.word	gHealthboxIDs
	.word	gSharedMem+0x17840
	.word	gBattleBankFunc
	.word	sub_802D31C
.Lfe18:
	.size	 sub_802D500,.Lfe18-sub_802D500
	.align	2, 0
	.globl	sub_802D680
	.type	 sub_802D680,function
	.thumb_func
sub_802D680:
	push	{r4, r5, r6, lr}
	ldr	r2, .L371
	ldr	r0, .L371+0x4
	ldr	r6, .L371+0x8
	ldrb	r3, [r6]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L371+0xc
	cmp	r1, r0
	bne	.L369	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r5, .L371+0x10
	add	r2, r0, r5
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L369	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L371+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldrb	r2, [r6]
	lsl	r0, r2, #0x2
	add	r1, r5, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L370	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	move_anim_start_t4
.L370:
	ldr	r0, .L371+0x18
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L371+0x1c
	str	r0, [r1]
.L369:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	gSharedMem+0x17810
	.word	0x27f9
	.word	gBattleBankFunc
	.word	sub_802D730
.Lfe19:
	.size	 sub_802D680,.Lfe19-sub_802D680
	.align	2, 0
	.globl	sub_802D730
	.type	 sub_802D730,function
	.thumb_func
sub_802D730:
	push	{r4, lr}
	ldr	r4, .L375
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L375+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L374	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L374	@cond_branch
	ldr	r0, .L375+0x8
	ldr	r1, .L375+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	ldr	r2, .L375+0x10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L375+0x14
	add	r0, r0, r2
	bl	sub_80324F8
	bl	PlayerBufferExecCompleted
.L374:
	pop	{r4}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gMPlay_BGM
	.word	0xffff
	.word	gBattlePartyID
	.word	gPlayerParty
.Lfe20:
	.size	 sub_802D730,.Lfe20-sub_802D730
	.align	2, 0
	.globl	sub_802D798
	.type	 sub_802D798,function
	.thumb_func
sub_802D798:
	push	{r4, r5, r6, lr}
	ldr	r5, .L380
	ldrb	r2, [r5]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	ldr	r6, .L380+0x4
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L378	@cond_branch
	ldr	r0, .L380+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L380+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L378:
	ldr	r4, .L380+0x10
	ldr	r0, .L380+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L380+0x18
	cmp	r1, r0
	bne	.L379	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L379	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldr	r4, .L380+0x1c
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L380+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L380+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r5]
	bl	sub_804777C
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldrb	r0, [r5]
	bl	sub_8031F88
	ldr	r1, .L380+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L380+0x24
	str	r1, [r0]
.L379:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L381:
	.align	2, 0
.L380:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gSprites
	.word	gUnknown_0300434C
	.word	SpriteCallbackDummy
	.word	gHealthboxIDs
	.word	gBattleBankFunc
	.word	sub_802D680
.Lfe21:
	.size	 sub_802D798,.Lfe21-sub_802D798
	.align	2, 0
	.globl	c3_0802FDF4
	.type	 c3_0802FDF4,function
	.thumb_func
c3_0802FDF4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L383	@cond_branch
	ldr	r0, .L384
	ldr	r1, .L384+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	add	r0, r4, #0
	bl	DestroyTask
.L383:
	pop	{r4}
	pop	{r0}
	bx	r0
.L385:
	.align	2, 0
.L384:
	.word	gMPlay_BGM
	.word	0xffff
.Lfe22:
	.size	 c3_0802FDF4,.Lfe22-c3_0802FDF4
	.align	2, 0
	.globl	bx_t1_healthbar_update
	.type	 bx_t1_healthbar_update,function
	.thumb_func
bx_t1_healthbar_update:
	push	{r4, r5, r6, lr}
	ldr	r5, .L389
	ldrb	r0, [r5]
	ldr	r6, .L389+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8045C78
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	sub_8043DFC
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L387	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	sub_80440EC
	b	.L388
.L390:
	.align	2, 0
.L389:
	.word	gActiveBank
	.word	gHealthboxIDs
.L387:
	ldr	r2, .L391
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L391+0x4
	add	r0, r0, r2
	bl	sub_80324F8
	bl	PlayerBufferExecCompleted
.L388:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	gBattlePartyID
	.word	gPlayerParty
.Lfe23:
	.size	 bx_t1_healthbar_update,.Lfe23-bx_t1_healthbar_update
	.align	2, 0
	.globl	sub_802D90C
	.type	 sub_802D90C,function
	.thumb_func
sub_802D90C:
	push	{lr}
	ldr	r0, .L395
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	bne	.L394	@cond_branch
	bl	PlayerBufferExecCompleted
.L394:
	pop	{r0}
	bx	r0
.L396:
	.align	2, 0
.L395:
	.word	gUnknown_03004210
.Lfe24:
	.size	 sub_802D90C,.Lfe24-sub_802D90C
	.align	2, 0
	.globl	sub_802D924
	.type	 sub_802D924,function
	.thumb_func
sub_802D924:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L408
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r8, r0
	ldrb	r0, [r0, #0x8]
	mov	sl, r0
	mov	r1, r8
	ldrb	r7, [r1, #0xc]
	str	r7, [sp, #0x8]
	ldrh	r2, [r1, #0xa]
	str	r2, [sp, #0xc]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L399	@cond_branch
	ldr	r1, .L408+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	sl, r0
	bne	.LCB4162
	b	.L398	@long jump
.LCB4162:
.L399:
	mov	r0, #0x64
	mov	r1, sl
	mul	r1, r1, r0
	ldr	r0, .L408+0x8
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldr	r3, .L408+0xc
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L408+0x10
	lsl	r1, r5, #0x3
	sub	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x13]
	mov	r1, #0xca
	lsl	r1, r1, #0x1
	mul	r1, r1, r2
	add	r4, r4, r1
	add	r4, r4, r3
	ldr	r2, [r4]
	str	r2, [sp]
	ldr	r3, [sp, #0xc]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x10
	add	r0, r0, r1
	cmp	r0, r2
	bcc	.L400	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r6, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	ldr	r0, [sp, #0xc]
	sub	r2, r0, r2
	ldr	r4, .L408+0x14
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	Emitcmd33
	strb	r5, [r4]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L401	@cond_branch
	ldr	r2, .L408+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	mov	r1, sl
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L402	@cond_branch
	mov	r0, #0x2
	eor	r7, r7, r0
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L401	@cond_branch
.L402:
	ldr	r0, .L408+0x18
	b	.L406
.L409:
	.align	2, 0
.L408:
	.word	gTasks
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gBaseStats
	.word	gActiveBank
	.word	sub_802DCB0
.L401:
	ldr	r0, .L410
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L410+0x4
	b	.L407
.L411:
	.align	2, 0
.L410:
	.word	gTasks
	.word	sub_802DDC4
.L400:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r6, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L412
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, .L412+0x4
	str	r1, [r0]
	mov	r0, r9
	bl	DestroyTask
	b	.L405
.L413:
	.align	2, 0
.L412:
	.word	gBattleBankFunc
	.word	sub_802D90C
.L398:
	ldr	r0, .L414
.L406:
	mov	r1, r8
.L407:
	str	r0, [r1]
.L405:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L415:
	.align	2, 0
.L414:
	.word	sub_802DA9C
.Lfe25:
	.size	 sub_802D924,.Lfe25-sub_802D924
	.align	2, 0
	.globl	sub_802DA9C
	.type	 sub_802DA9C,function
	.thumb_func
sub_802DA9C:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L417
	lsl	r2, r0, #0x2
	mov	r8, r2
	add	r8, r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x3
	mov	r8, r0
	add	r8, r8, r1
	mov	r2, r8
	ldrb	r1, [r2, #0x8]
	mov	r0, #0xa
	ldrsh	r2, [r2, r0]
	mov	r9, r2
	mov	r2, r8
	ldrb	r2, [r2, #0xc]
	mov	sl, r2
	mov	r0, #0x64
	mov	r6, r1
	mul	r6, r6, r0
	ldr	r0, .L417+0x4
	add	r6, r6, r0
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r6, .L417+0x8
	lsl	r1, r4, #0x2
	ldr	r2, .L417+0xc
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, r6
	ldr	r2, [r4]
	sub	r2, r2, r1
	ldr	r0, .L417+0x10
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r0, r9
	neg	r0, r0
	str	r0, [sp]
	mov	r0, sl
	bl	sub_8043D84
	mov	r0, #0x21
	bl	PlaySE
	ldr	r0, .L417+0x14
	mov	r1, r8
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L418:
	.align	2, 0
.L417:
	.word	gTasks
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gBaseStats
	.word	gHealthboxIDs
	.word	sub_802DB6C
.Lfe26:
	.size	 sub_802DA9C,.Lfe26-sub_802DA9C
	.align	2, 0
	.globl	sub_802DB6C
	.type	 sub_802DB6C,function
	.thumb_func
sub_802DB6C:
	.syntax unified
push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x8
    lsls r0, 24
    lsrs r0, 24
    mov r8, r0
    ldr r1, _0802DB98 @ =gTasks
    lsls r0, 2
    add r0, r8
    lsls r0, 3
    adds r6, r0, r1
    ldrh r1, [r6, 0x1C]
    movs r2, 0x1C
    ldrsh r0, [r6, r2]
    cmp r0, 0xC
    bgt _0802DB9C
    adds r0, r1, 0x1
    strh r0, [r6, 0x1C]
    b _0802DC98
    .align 2, 0
_0802DB98: .4byte gTasks
_0802DB9C:
    ldrb r0, [r6, 0x8]
    mov r9, r0
    ldrh r2, [r6, 0xA]
    mov r10, r2
    ldrb r7, [r6, 0xC]
    ldr r5, _0802DC64 @ =gHealthboxIDs
    adds r5, r7, r5
    ldrb r1, [r5]
    adds r0, r7, 0
    movs r2, 0x1
    movs r3, 0
    bl sub_8045C78
    adds r4, r0, 0
    lsls r4, 16
    lsrs r4, 16
    ldrb r0, [r5]
    bl sub_8043DFC
    lsls r4, 16
    asrs r4, 16
    movs r0, 0x1
    negs r0, r0
    cmp r4, r0
    bne _0802DC98
    movs r0, 0x21
    bl m4aSongNumStop
    movs r0, 0x64
    mov r1, r9
    muls r1, r0
    ldr r0, _0802DC68 @ =gPlayerParty
    adds r5, r1, r0
    adds r0, r5, 0
    movs r1, 0x38
    bl GetMonData
    adds r4, r0, 0
    lsls r4, 24
    lsrs r4, 24
    adds r0, r5, 0
    movs r1, 0x19
    bl GetMonData
    str r0, [sp, 0x4]
    adds r0, r5, 0
    movs r1, 0xB
    bl GetMonData
    lsls r0, 16
    lsrs r0, 16
    ldr r3, _0802DC6C @ =gExperienceTables
    adds r4, 0x1
    lsls r4, 2
    ldr r2, _0802DC70 @ =gBaseStats
    lsls r1, r0, 3
    subs r1, r0
    lsls r1, 2
    adds r1, r2
    ldrb r1, [r1, 0x13]
    movs r0, 0xCA
    lsls r0, 1
    muls r0, r1
    adds r4, r0
    adds r4, r3
    ldr r1, [r4]
    str r1, [sp]
    mov r2, r10
    lsls r0, r2, 16
    asrs r4, r0, 16
    ldr r0, [sp, 0x4]
    adds r0, r4
    cmp r0, r1
    blt _0802DC7C
    adds r0, r5, 0
    movs r1, 0x19
    mov r2, sp
    bl SetMonData
    adds r0, r5, 0
    bl CalculateMonStats
    ldr r2, [sp]
    add r0, sp, 0x4
    ldrh r0, [r0]
    subs r2, r0
    subs r2, r4, r2
    ldr r4, _0802DC74 @ =gActiveBank
    ldrb r5, [r4]
    strb r7, [r4]
    lsls r2, 16
    lsrs r2, 16
    movs r0, 0x1
    movs r1, 0xB
    bl Emitcmd33
    strb r5, [r4]
    ldr r0, _0802DC78 @ =sub_802DCB0
    str r0, [r6]
    b _0802DC98
    .align 2, 0
_0802DC64: .4byte gHealthboxIDs
_0802DC68: .4byte gPlayerParty
_0802DC6C: .4byte gExperienceTables
_0802DC70: .4byte gBaseStats
_0802DC74: .4byte gActiveBank
_0802DC78: .4byte sub_802DCB0
_0802DC7C:
    str r0, [sp, 0x4]
    add r2, sp, 0x4
    adds r0, r5, 0
    movs r1, 0x19
    bl SetMonData
    ldr r1, _0802DCA8 @ =gBattleBankFunc
    lsls r0, r7, 2
    adds r0, r1
    ldr r1, _0802DCAC @ =sub_802D90C
    str r1, [r0]
    mov r0, r8
    bl DestroyTask
_0802DC98:
    add sp, 0x8
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_0802DCA8: .4byte gBattleBankFunc
_0802DCAC: .4byte sub_802D90C

.syntax divided

	.code	16
.Lfe27:
	.size	 sub_802DB6C,.Lfe27-sub_802DB6C
	.align	2, 0
	.globl	sub_802DCB0
	.type	 sub_802DCB0,function
	.thumb_func
sub_802DCB0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L422
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r4, [r0, #0xc]
	ldrb	r6, [r0, #0x8]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L421	@cond_branch
	ldr	r1, .L422+0x4
	mov	r0, #0x2
	add	r2, r4, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	bne	.L421	@cond_branch
	add	r4, r2, #0
.L421:
	add	r0, r4, #0
	add	r1, r4, #0
	add	r2, r4, #0
	mov	r3, #0x0
	bl	move_anim_start_t4
	ldr	r0, .L422
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L422+0x8
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	gTasks
	.word	gBattlePartyID
	.word	sub_802DD10
.Lfe28:
	.size	 sub_802DCB0,.Lfe28-sub_802DCB0
	.align	2, 0
	.globl	sub_802DD10
	.type	 sub_802DD10,function
	.thumb_func
sub_802DD10:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L428
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrb	r5, [r2, #0xc]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L428+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L425	@cond_branch
	ldrb	r4, [r2, #0x8]
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L428+0x8
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x38
	bl	GetMonData
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L426	@cond_branch
	ldr	r1, .L428+0xc
	mov	r0, #0x2
	add	r2, r5, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L426	@cond_branch
	ldr	r0, .L428+0x10
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	sub_8045A5C
	b	.L427
.L429:
	.align	2, 0
.L428:
	.word	gTasks
	.word	gSharedMem+0x17810
	.word	gPlayerParty
	.word	gBattlePartyID
	.word	gHealthboxIDs
.L426:
	ldr	r0, .L430
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x64
	mul	r1, r1, r4
	ldr	r2, .L430+0x4
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
.L427:
	ldr	r0, .L430+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L430+0xc
	str	r0, [r1]
.L425:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L431:
	.align	2, 0
.L430:
	.word	gHealthboxIDs
	.word	gPlayerParty
	.word	gTasks
	.word	sub_802DDC4
.Lfe29:
	.size	 sub_802DD10,.Lfe29-sub_802DD10
	.align	2, 0
	.globl	sub_802DDC4
	.type	 sub_802DDC4,function
	.thumb_func
sub_802DDC4:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L433
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrb	r1, [r4, #0x8]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L433+0x4
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	ldrb	r0, [r4, #0xc]
	ldr	r1, .L433+0x8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L433+0xc
	str	r1, [r0]
	add	r0, r5, #0
	bl	DestroyTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L434:
	.align	2, 0
.L433:
	.word	gTasks
	.word	gPlayerParty
	.word	gBattleBankFunc
	.word	sub_802D90C
.Lfe30:
	.size	 sub_802DDC4,.Lfe30-sub_802DDC4
	.align	2, 0
	.globl	sub_802DE10
	.type	 sub_802DE10,function
	.thumb_func
sub_802DE10:
	push	{r4, r5, r6, lr}
	ldr	r6, .L437
	ldr	r5, .L437+0x4
	ldr	r4, .L437+0x8
	ldrb	r2, [r4]
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r3, #0x22
	ldrsh	r1, [r0, r3]
	mov	r3, #0x26
	ldrsh	r0, [r0, r3]
	add	r1, r1, r0
	cmp	r1, #0xa0
	ble	.L436	@cond_branch
	ldr	r1, .L437+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L437+0x10
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	nullsub_9
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	ldr	r1, .L437+0x14
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	PlayerBufferExecCompleted
.L436:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L438:
	.align	2, 0
.L437:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gHealthboxIDs
.Lfe31:
	.size	 sub_802DE10,.Lfe31-sub_802DE10
	.align	2, 0
	.globl	sub_802DEAC
	.type	 sub_802DEAC,function
	.thumb_func
sub_802DEAC:
	push	{r4, r5, r6, lr}
	ldr	r6, .L441
	ldrb	r2, [r6]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L441+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L440	@cond_branch
	ldr	r5, .L441+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L441+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L441+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	PlayerBufferExecCompleted
.L440:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L442:
	.align	2, 0
.L441:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
.Lfe32:
	.size	 sub_802DEAC,.Lfe32-sub_802DEAC
	.align	2, 0
	.globl	sub_802DF18
	.type	 sub_802DF18,function
	.thumb_func
sub_802DF18:
	push	{lr}
	ldr	r0, .L445
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	bne	.L444	@cond_branch
	bl	PlayerBufferExecCompleted
.L444:
	pop	{r0}
	bx	r0
.L446:
	.align	2, 0
.L445:
	.word	gUnknown_03004210
.Lfe33:
	.size	 sub_802DF18,.Lfe33-sub_802DF18
	.align	2, 0
	.globl	sub_802DF30
	.type	 sub_802DF30,function
	.thumb_func
sub_802DF30:
	push	{r4, lr}
	ldr	r0, .L449
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L448	@cond_branch
	ldr	r1, .L449+0x4
	ldr	r2, .L449+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L449+0xc
	str	r1, [r0]
	ldr	r3, .L449+0x10
	ldr	r1, .L449+0x14
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldrb	r4, [r1, #0x8]
	bl	DestroyTask
	add	r0, r4, #0
	bl	sub_8094E20
.L448:
	pop	{r4}
	pop	{r0}
	bx	r0
.L450:
	.align	2, 0
.L449:
	.word	gPaletteFade
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802DF88
	.word	gTasks
	.word	gUnknown_0300434C
.Lfe34:
	.size	 sub_802DF30,.Lfe34-sub_802DF30
	.align	2, 0
	.globl	sub_802DF88
	.type	 sub_802DF88,function
	.thumb_func
sub_802DF88:
	push	{lr}
	ldr	r0, .L456
	ldr	r1, [r0, #0x4]
	ldr	r0, .L456+0x4
	cmp	r1, r0
	bne	.L452	@cond_branch
	ldr	r0, .L456+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L452	@cond_branch
	ldr	r0, .L456+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L453	@cond_branch
	ldr	r0, .L456+0x10
	ldrb	r1, [r0]
	ldr	r2, .L456+0x14
	mov	r0, #0x1
	bl	Emitcmd34
	b	.L454
.L457:
	.align	2, 0
.L456:
	.word	gMain
	.word	sub_800F808
	.word	gPaletteFade
	.word	gUnknown_0202E8F4
	.word	gUnknown_0202E8F5
	.word	gUnknown_02038470
.L453:
	mov	r0, #0x1
	mov	r1, #0x6
	mov	r2, #0x0
	bl	Emitcmd34
.L454:
	ldr	r1, .L458
	ldr	r0, .L458+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L455	@cond_branch
	bl	b_link_standby_message
.L455:
	bl	PlayerBufferExecCompleted
.L452:
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe35:
	.size	 sub_802DF88,.Lfe35-sub_802DF88
	.align	2, 0
	.globl	sub_802E004
	.type	 sub_802E004,function
	.thumb_func
sub_802E004:
	push	{lr}
	ldr	r0, .L462
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L461	@cond_branch
	ldr	r1, .L462+0x4
	ldr	r0, .L462+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L462+0xc
	str	r1, [r0]
	bl	nullsub_14
	bl	sub_80A6DCC
.L461:
	pop	{r0}
	bx	r0
.L463:
	.align	2, 0
.L462:
	.word	gPaletteFade
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802E03C
.Lfe36:
	.size	 sub_802E004,.Lfe36-sub_802E004
	.align	2, 0
	.globl	sub_802E03C
	.type	 sub_802E03C,function
	.thumb_func
sub_802E03C:
	push	{lr}
	ldr	r0, .L466
	ldr	r1, [r0, #0x4]
	ldr	r0, .L466+0x4
	cmp	r1, r0
	bne	.L465	@cond_branch
	ldr	r0, .L466+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L465	@cond_branch
	ldr	r0, .L466+0xc
	ldrh	r1, [r0]
	mov	r0, #0x1
	bl	Emitcmd35
	bl	PlayerBufferExecCompleted
.L465:
	pop	{r0}
	bx	r0
.L467:
	.align	2, 0
.L466:
	.word	gMain
	.word	sub_800F808
	.word	gPaletteFade
	.word	gScriptItemId
.Lfe37:
	.size	 sub_802E03C,.Lfe37-sub_802E03C
	.align	2, 0
	.globl	bx_wait_t1
	.type	 bx_wait_t1,function
	.thumb_func
bx_wait_t1:
	push	{lr}
	ldr	r0, .L471
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L470	@cond_branch
	ldr	r0, .L471+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L471+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L469	@cond_branch
.L470:
	bl	PlayerBufferExecCompleted
.L469:
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	gDoingBattleAnim
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe38:
	.size	 bx_wait_t1,.Lfe38-bx_wait_t1
	.align	2, 0
	.globl	bx_blink_t1
	.type	 bx_blink_t1,function
	.thumb_func
bx_blink_t1:
	push	{r4, lr}
	ldr	r1, .L477
	ldr	r0, .L477+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L477+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L474	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L477+0xc
	strb	r3, [r0]
	bl	PlayerBufferExecCompleted
	b	.L475
.L478:
	.align	2, 0
.L477:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	gDoingBattleAnim
.L474:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L476	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L476:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L475:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 bx_blink_t1,.Lfe39-bx_blink_t1
	.align	2, 0
	.globl	sub_802E12C
	.type	 sub_802E12C,function
	.thumb_func
sub_802E12C:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	ldr	r0, .L485
	ldrb	r4, [r0]
	lsl	r4, r4, #0x9
	ldr	r0, .L485+0x4
	add	r4, r4, r0
	ldr	r5, .L485+0x8
	add	r0, r5, #0
	bl	StringCopy
	lsl	r0, r6, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	ldr	r0, .L485+0xc
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringAppend
	ldr	r4, .L485+0x10
	add	r1, r5, #0
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x12
	mov	r2, #0xc0
	lsl	r2, r2, #0x12
	add	r0, r0, r2
	lsr	r2, r0, #0x10
	mov	r0, #0x1
	and	r0, r0, r6
	mov	r3, #0x2
	cmp	r0, #0
	beq	.L480	@cond_branch
	mov	r3, #0xb
.L480:
	cmp	r6, #0x1
	bgt	.L482	@cond_branch
	mov	r0, #0x37
	b	.L484
.L486:
	.align	2, 0
.L485:
	.word	gActiveBank
	.word	gBattleBufferA+0x4
	.word	gDisplayedStringBattle
	.word	gMoveNames
	.word	gUnknown_03004210
.L482:
	mov	r0, #0x39
.L484:
	str	r0, [sp]
	add	r0, r4, #0
	bl	InitWindow
	ldr	r0, .L487
	bl	sub_8002F44
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	gUnknown_03004210
.Lfe40:
	.size	 sub_802E12C,.Lfe40-sub_802E12C
	.align	2, 0
	.globl	sub_802E1B0
	.type	 sub_802E1B0,function
	.thumb_func
sub_802E1B0:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	ldr	r0, .L496
	ldrb	r4, [r0]
	lsl	r4, r4, #0x9
	ldr	r0, .L496+0x4
	add	r4, r4, r0
	ldr	r5, .L496+0x8
	mov	r0, #0x0
	strb	r0, [r5]
	ldr	r0, .L496+0xc
	ldr	r1, .L496+0x10
	mov	r2, #0x14
	str	r2, [sp]
	mov	r2, #0x3a
	str	r2, [sp, #0x4]
	mov	r2, #0x1
	mov	r3, #0x37
	bl	FillWindowRect
	mov	r0, #0x1
	bl	SetCustomFont
	mov	r6, #0x0
.L493:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	nullsub_7
	add	r0, r6, #0
	ldr	r1, .L496+0x14
	bl	sub_802E12C
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L492	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
.L492:
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L493	@cond_branch
	mov	r0, #0x0
	bl	SetCustomFont
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	gActiveBank
	.word	gBattleBufferA+0x4
	.word	gUnknown_03004348
	.word	gUnknown_03004210
	.word	0x1016
	.word	BattleText_Format
.Lfe41:
	.size	 sub_802E1B0,.Lfe41-sub_802E1B0
	.align	2, 0
	.globl	sub_802E220
	.type	 sub_802E220,function
	.thumb_func
sub_802E220:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r4, .L500
	ldr	r6, .L500+0x4
	ldrb	r0, [r6]
	lsl	r1, r0, #0x9
	add	r0, r4, #0x2
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L499	@cond_branch
	add	r4, r4, #0x4
	add	r4, r1, r4
	ldr	r2, .L500+0x8
	ldr	r1, .L500+0xc
	add	r0, r2, #0
	bl	StringCopy
	add	r2, r0, #0
	mov	r1, #0xfc
	strb	r1, [r2]
	mov	r0, #0x11
	strb	r0, [r2, #0x1]
	mov	r0, #0x2
	strb	r0, [r2, #0x2]
	add	r2, r2, #0x3
	strb	r1, [r2]
	mov	r0, #0x14
	strb	r0, [r2, #0x1]
	mov	r0, #0x6
	strb	r0, [r2, #0x2]
	add	r2, r2, #0x3
	ldr	r5, .L500+0x10
	ldrb	r1, [r6]
	add	r1, r1, r5
	add	r0, r4, #0
	add	r0, r0, #0x8
	ldrb	r1, [r1]
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	add	r2, r0, #0
	mov	r0, #0xba
	strb	r0, [r2]
	add	r2, r2, #0x1
	ldrb	r0, [r6]
	add	r0, r0, r5
	add	r4, r4, #0xc
	ldrb	r0, [r0]
	add	r4, r4, r0
	ldrb	r1, [r4]
	add	r0, r2, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L500+0x14
	ldr	r1, .L500+0x8
	ldr	r2, .L500+0x18
	mov	r0, #0x37
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x19
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
.L499:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L501:
	.align	2, 0
.L500:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gDisplayedStringBattle
	.word	BattleText_Format
	.word	gMoveSelectionCursor
	.word	gUnknown_03004210
	.word	0x2a2
.Lfe42:
	.size	 sub_802E220,.Lfe42-sub_802E220
	.section .rodata
.LC284:
	.byte	0x3f
	.byte	0x56
	.byte	0x3d
	.byte	0x7a
	.byte	0xba
	.byte	0xff
.text
	.align	2, 0
	.globl	sub_802E2D4
	.type	 sub_802E2D4,function
	.thumb_func
sub_802E2D4:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff0
	ldr	r1, .L505
	add	r0, sp, #0x8
	mov	r2, #0x6
	bl	memcpy
	mov	r0, #0x1
	bl	SetCustomFont
	ldr	r4, .L505+0x4
	ldr	r6, .L505+0x8
	ldrb	r0, [r6]
	lsl	r1, r0, #0x9
	add	r0, r4, #0x2
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L503	@cond_branch
	ldr	r4, .L505+0xc
	ldr	r1, .L505+0x10
	mov	r0, #0x1c
	str	r0, [sp]
	mov	r0, #0x3a
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r2, #0x17
	mov	r3, #0x37
	bl	FillWindowRect
	ldr	r1, .L505+0x14
	mov	r2, #0xa4
	lsl	r2, r2, #0x2
	mov	r0, #0x37
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x13
	bl	InitWindow
	b	.L504
.L506:
	.align	2, 0
.L505:
	.word	.LC284
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gUnknown_03004210
	.word	0x1016
	.word	BattleText_ForgetMove
.L503:
	add	r4, r4, #0x4
	add	r4, r1, r4
	ldr	r5, .L507
	ldr	r1, .L507+0x4
	add	r0, r5, #0
	bl	StringCopy
	add	r5, r0, #0
	add	r1, sp, #0x8
	bl	StringCopy
	ldr	r2, .L507+0x8
	ldr	r1, .L507+0xc
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	ldr	r0, .L507+0x10
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringAppend
	ldr	r4, .L507+0x14
	ldr	r1, .L507+0x18
	mov	r0, #0x1c
	str	r0, [sp]
	mov	r0, #0x3a
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r2, #0x17
	mov	r3, #0x39
	bl	FillWindowRect
	ldr	r1, .L507
	mov	r2, #0xb0
	lsl	r2, r2, #0x2
	mov	r0, #0x39
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x17
	bl	InitWindow
.L504:
	ldr	r0, .L507+0x14
	bl	sub_8002F44
	mov	r0, #0x0
	bl	SetCustomFont
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gDisplayedStringBattle
	.word	BattleText_Format
	.word	gBattleMoves
	.word	gMoveSelectionCursor
	.word	gTypeNames
	.word	gUnknown_03004210
	.word	0x1016
.Lfe43:
	.size	 sub_802E2D4,.Lfe43-sub_802E2D4
	.globl	gUnknown_081FAE89
	.section .rodata
	.type	 gUnknown_081FAE89,object
gUnknown_081FAE89:
	.byte	0x1
	.byte	0xf
	.byte	0xa
	.byte	0xf
	.byte	0x1
	.byte	0x11
	.byte	0xa
	.byte	0x11
	.size	 gUnknown_081FAE89,8
	.globl	gUnknown_081FAE91
	.type	 gUnknown_081FAE91,object
gUnknown_081FAE91:
	.byte	0x12
	.byte	0xf
	.byte	0x18
	.byte	0xf
	.byte	0x12
	.byte	0x11
	.byte	0x18
	.byte	0x11
	.byte	0x9
	.byte	0x9
	.byte	0x4
	.byte	0xb
	.byte	0xa
	.byte	0xa
	.byte	0xa
	.byte	0xb
	.size	 gUnknown_081FAE91,16
.text
	.align	2, 0
	.globl	sub_802E3B4
	.type	 sub_802E3B4,function
	.thumb_func
sub_802E3B4:
	lsl	r0, r0, #0x18
	ldr	r3, .L510
	lsr	r0, r0, #0x17
	add	r2, r0, r3
	ldrb	r2, [r2]
	add	r3, r3, #0x1
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r2, r2, #0x1
	lsl	r0, r0, #0x6
	ldr	r3, .L510+0x4
	add	r0, r0, r3
	add	r2, r2, r0
	add	r0, r1, #0x1
	strh	r0, [r2]
	add	r2, r2, #0x40
	add	r1, r1, #0x2
	strh	r1, [r2]
	bx	lr
.L511:
	.align	2, 0
.L510:
	.word	gUnknown_081FAE89
	.word	0x600ca00
.Lfe44:
	.size	 sub_802E3B4,.Lfe44-sub_802E3B4
	.align	2, 0
	.globl	nullsub_7
	.type	 nullsub_7,function
	.thumb_func
nullsub_7:
	lsl	r0, r0, #0x18
	ldr	r2, .L513
	lsr	r0, r0, #0x17
	add	r1, r0, r2
	ldrb	r1, [r1]
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r1, r1, #0x1
	lsl	r0, r0, #0x6
	ldr	r2, .L513+0x4
	add	r0, r0, r2
	add	r1, r1, r0
	mov	r0, #0x20
	strh	r0, [r1]
	add	r1, r1, #0x40
	strh	r0, [r1]
	bx	lr
.L514:
	.align	2, 0
.L513:
	.word	gUnknown_081FAE89
	.word	0x600ca00
.Lfe45:
	.size	 nullsub_7,.Lfe45-nullsub_7
	.align	2, 0
	.globl	sub_802E3E4
	.type	 sub_802E3E4,function
	.thumb_func
sub_802E3E4:
	lsl	r0, r0, #0x18
	ldr	r3, .L516
	lsr	r0, r0, #0x17
	add	r2, r0, r3
	ldrb	r2, [r2]
	add	r3, r3, #0x1
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r2, r2, #0x1
	lsl	r0, r0, #0x6
	ldr	r3, .L516+0x4
	add	r0, r0, r3
	add	r2, r2, r0
	add	r0, r1, #0x1
	strh	r0, [r2]
	add	r2, r2, #0x40
	add	r1, r1, #0x2
	strh	r1, [r2]
	bx	lr
.L517:
	.align	2, 0
.L516:
	.word	gUnknown_081FAE91
	.word	0x600c500
.Lfe46:
	.size	 sub_802E3E4,.Lfe46-sub_802E3E4
	.align	2, 0
	.globl	nullsub_8
	.type	 nullsub_8,function
	.thumb_func
nullsub_8:
	lsl	r0, r0, #0x18
	ldr	r2, .L519
	lsr	r0, r0, #0x17
	add	r1, r0, r2
	ldrb	r1, [r1]
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r1, r1, #0x1
	lsl	r0, r0, #0x6
	ldr	r2, .L519+0x4
	add	r0, r0, r2
	add	r1, r1, r0
	mov	r0, #0x20
	strh	r0, [r1]
	add	r1, r1, #0x40
	strh	r0, [r1]
	bx	lr
.L520:
	.align	2, 0
.L519:
	.word	gUnknown_081FAE91
	.word	0x600c500
.Lfe47:
	.size	 nullsub_8,.Lfe47-nullsub_8
	.align	2, 0
	.globl	sub_802E414
	.type	 sub_802E414,function
	.thumb_func
sub_802E414:
	push	{lr}
	ldr	r0, .L522
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L523:
	.align	2, 0
.L522:
	.word	ReshowBattleScreenAfterMenu
.Lfe48:
	.size	 sub_802E414,.Lfe48-sub_802E414
	.align	2, 0
	.globl	sub_802E424
	.type	 sub_802E424,function
	.thumb_func
sub_802E424:
	push	{lr}
	ldr	r0, .L525
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L526:
	.align	2, 0
.L525:
	.word	ReshowBattleScreenAfterMenu
.Lfe49:
	.size	 sub_802E424,.Lfe49-sub_802E424
	.align	2, 0
	.globl	sub_802E434
	.type	 sub_802E434,function
	.thumb_func
sub_802E434:
	push	{lr}
	ldr	r0, .L529
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L529+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L528	@cond_branch
	bl	PlayerBufferExecCompleted
.L528:
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe50:
	.size	 sub_802E434,.Lfe50-sub_802E434
	.align	2, 0
	.globl	sub_802E460
	.type	 sub_802E460,function
	.thumb_func
sub_802E460:
	push	{lr}
	ldr	r0, .L533
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L533+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L532	@cond_branch
	bl	PlayerBufferExecCompleted
.L532:
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe51:
	.size	 sub_802E460,.Lfe51-sub_802E460
	.align	2, 0
	.globl	b_link_standby_message
	.type	 b_link_standby_message,function
	.thumb_func
b_link_standby_message:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L537
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L536	@cond_branch
	ldr	r0, .L537+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L537+0x8
	strh	r1, [r0]
	ldr	r0, .L537+0xc
	ldr	r1, .L537+0x10
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
.L536:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	gBattleTypeFlags
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_03004210
	.word	BattleText_LinkStandby
.Lfe52:
	.size	 b_link_standby_message,.Lfe52-b_link_standby_message
	.align	2, 0
	.globl	PlayerHandleGetAttributes
	.type	 PlayerHandleGetAttributes,function
	.thumb_func
PlayerHandleGetAttributes:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xffffff00
	mov	r6, #0x0
	ldr	r1, .L548
	ldr	r0, .L548+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L540	@cond_branch
	ldr	r0, .L548+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	dp01_getattr_by_ch1_for_player_pokemon_
	add	r6, r0, #0
	b	.L541
.L549:
	.align	2, 0
.L548:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattlePartyID
.L540:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L545:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L546	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	dp01_getattr_by_ch1_for_player_pokemon_
	add	r6, r6, r0
.L546:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L545	@cond_branch
.L541:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	Emitcmd29
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 PlayerHandleGetAttributes,.Lfe53-PlayerHandleGetAttributes
	.align	2, 0
	.globl	dp01_getattr_by_ch1_for_player_pokemon_
	.type	 dp01_getattr_by_ch1_for_player_pokemon_,function
	.thumb_func
dp01_getattr_by_ch1_for_player_pokemon_:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffff70
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L639
	ldr	r3, .L639+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB6028
	bl	.L551	@far jump
.LCB6028:
	lsl	r0, r0, #0x2
	ldr	r1, .L639+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L640:
	.align	2, 0
.L639:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	.L633
	.align	2, 0
	.align	2, 0
.L633:
	.word	.L552
	.word	.L563
	.word	.L564
	.word	.L565
	.word	.L579
	.word	.L579
	.word	.L579
	.word	.L579
	.word	.L580
	.word	.L589
	.word	.L589
	.word	.L589
	.word	.L589
	.word	.L551
	.word	.L551
	.word	.L551
	.word	.L551
	.word	.L590
	.word	.L591
	.word	.L592
	.word	.L593
	.word	.L594
	.word	.L595
	.word	.L596
	.word	.L597
	.word	.L598
	.word	.L599
	.word	.L600
	.word	.L601
	.word	.L602
	.word	.L603
	.word	.L604
	.word	.L605
	.word	.L606
	.word	.L607
	.word	.L608
	.word	.L609
	.word	.L610
	.word	.L611
	.word	.L612
	.word	.L613
	.word	.L614
	.word	.L615
	.word	.L616
	.word	.L617
	.word	.L618
	.word	.L619
	.word	.L620
	.word	.L621
	.word	.L622
	.word	.L623
	.word	.L624
	.word	.L625
	.word	.L626
	.word	.L627
	.word	.L628
	.word	.L629
	.word	.L630
	.word	.L631
	.word	.L632
.L552:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L641
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L556:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L556	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L641
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L641+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L641+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L641+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L561:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L561	@cond_branch
	b	.L551
.L642:
	.align	2, 0
.L641:
	.word	gPlayerParty
	.word	0xfffffc1f
	.word	0xfff07fff
	.word	0xfffffe0f
.L563:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L643
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L635
.L644:
	.align	2, 0
.L643:
	.word	gPlayerParty
.L564:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L645
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L635
.L646:
	.align	2, 0
.L645:
	.word	gPlayerParty
.L565:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L647
	add	r4, r1, r0
	mov	r8, r9
.L569:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L569	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L647
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L574:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L574	@cond_branch
	b	.L551
.L648:
	.align	2, 0
.L647:
	.word	gPlayerParty
.L579:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L649
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L635
.L650:
	.align	2, 0
.L649:
	.word	gPlayerParty
.L580:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L651
	mov	r8, r2
.L584:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L584	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L651
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L551
.L652:
	.align	2, 0
.L651:
	.word	gPlayerParty
.L589:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L653
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L636
.L654:
	.align	2, 0
.L653:
	.word	gPlayerParty
.L590:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L655
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L637
.L656:
	.align	2, 0
.L655:
	.word	gPlayerParty
.L591:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L657
	add	r0, r0, r1
	mov	r1, #0x19
.L637:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L551
.L658:
	.align	2, 0
.L657:
	.word	gPlayerParty
.L592:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L659
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L636
.L660:
	.align	2, 0
.L659:
	.word	gPlayerParty
.L593:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L661
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L636
.L662:
	.align	2, 0
.L661:
	.word	gPlayerParty
.L594:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L663
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L636
.L664:
	.align	2, 0
.L663:
	.word	gPlayerParty
.L595:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L665
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L636
.L666:
	.align	2, 0
.L665:
	.word	gPlayerParty
.L596:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L667
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L636
.L668:
	.align	2, 0
.L667:
	.word	gPlayerParty
.L597:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L669
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L636
.L670:
	.align	2, 0
.L669:
	.word	gPlayerParty
.L598:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L671
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L636
.L672:
	.align	2, 0
.L671:
	.word	gPlayerParty
.L599:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L673
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L636
.L674:
	.align	2, 0
.L673:
	.word	gPlayerParty
.L600:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L675
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L636
.L676:
	.align	2, 0
.L675:
	.word	gPlayerParty
.L601:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L677
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L636
.L678:
	.align	2, 0
.L677:
	.word	gPlayerParty
.L602:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L679
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L636
.L680:
	.align	2, 0
.L679:
	.word	gPlayerParty
.L603:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L681
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L636
.L682:
	.align	2, 0
.L681:
	.word	gPlayerParty
.L604:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L683
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L551
.L684:
	.align	2, 0
.L683:
	.word	gPlayerParty
.L605:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L685
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L636
.L686:
	.align	2, 0
.L685:
	.word	gPlayerParty
.L606:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L687
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L636
.L688:
	.align	2, 0
.L687:
	.word	gPlayerParty
.L607:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L689
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L636
.L690:
	.align	2, 0
.L689:
	.word	gPlayerParty
.L608:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L691
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L636
.L692:
	.align	2, 0
.L691:
	.word	gPlayerParty
.L609:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L693
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L636
.L694:
	.align	2, 0
.L693:
	.word	gPlayerParty
.L610:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L695
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L636
.L696:
	.align	2, 0
.L695:
	.word	gPlayerParty
.L611:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L697
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L638
.L698:
	.align	2, 0
.L697:
	.word	gPlayerParty
.L612:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L699
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L635
.L700:
	.align	2, 0
.L699:
	.word	gPlayerParty
.L613:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L701
	add	r0, r0, r1
	mov	r1, #0x37
.L638:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L551
.L702:
	.align	2, 0
.L701:
	.word	gPlayerParty
.L614:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L703
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L636
.L704:
	.align	2, 0
.L703:
	.word	gPlayerParty
.L615:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L705
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L635
.L706:
	.align	2, 0
.L705:
	.word	gPlayerParty
.L616:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L707
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L635
.L708:
	.align	2, 0
.L707:
	.word	gPlayerParty
.L617:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L709
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L635
.L710:
	.align	2, 0
.L709:
	.word	gPlayerParty
.L618:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L711
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L635
.L712:
	.align	2, 0
.L711:
	.word	gPlayerParty
.L619:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L713
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L635
.L714:
	.align	2, 0
.L713:
	.word	gPlayerParty
.L620:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L715
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L635
.L716:
	.align	2, 0
.L715:
	.word	gPlayerParty
.L621:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L717
	add	r0, r0, r1
	mov	r1, #0x3f
.L635:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L551
.L718:
	.align	2, 0
.L717:
	.word	gPlayerParty
.L622:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L719
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L636
.L720:
	.align	2, 0
.L719:
	.word	gPlayerParty
.L623:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L721
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L636
.L722:
	.align	2, 0
.L721:
	.word	gPlayerParty
.L624:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L723
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L636
.L724:
	.align	2, 0
.L723:
	.word	gPlayerParty
.L625:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L725
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L636
.L726:
	.align	2, 0
.L725:
	.word	gPlayerParty
.L626:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L727
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L636
.L728:
	.align	2, 0
.L727:
	.word	gPlayerParty
.L627:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L729
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L636
.L730:
	.align	2, 0
.L729:
	.word	gPlayerParty
.L628:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L731
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L636
.L732:
	.align	2, 0
.L731:
	.word	gPlayerParty
.L629:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L733
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L636
.L734:
	.align	2, 0
.L733:
	.word	gPlayerParty
.L630:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L735
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L636
.L736:
	.align	2, 0
.L735:
	.word	gPlayerParty
.L631:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L737
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L636
.L738:
	.align	2, 0
.L737:
	.word	gPlayerParty
.L632:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L739
	add	r0, r0, r1
	mov	r1, #0x36
.L636:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L551:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L740:
	.align	2, 0
.L739:
	.word	gPlayerParty
.Lfe54:
	.size	 dp01_getattr_by_ch1_for_player_pokemon_,.Lfe54-dp01_getattr_by_ch1_for_player_pokemon_
	.align	2, 0
	.globl	PlayerHandlecmd1
	.type	 PlayerHandlecmd1,function
	.thumb_func
PlayerHandlecmd1:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffa8
	ldr	r2, .L747
	ldr	r5, .L747+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mov	r4, r2
	mul	r4, r4, r0
	ldr	r3, .L747+0x8
	lsl	r1, r1, #0x9
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r2, [r0]
	ldr	r0, .L747+0xc
	add	r0, r2, r0
	add	r6, r4, r0
	mov	r0, sp
	add	r4, r0, r2
	mov	r2, #0x0
	add	r0, r3, #0x2
	add	r1, r1, r0
	add	r7, r5, #0
	mov	ip, r3
	ldrb	r1, [r1]
	cmp	r2, r1
	bcs	.L743	@cond_branch
	add	r3, r0, #0
.L745:
	add	r1, r4, r2
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L745	@cond_branch
.L743:
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	mov	r1, ip
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	add	r2, r4, #0
	bl	Emitcmd29
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x58
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gPlayerParty
.Lfe55:
	.size	 PlayerHandlecmd1,.Lfe55-PlayerHandlecmd1
	.align	2, 0
	.globl	PlayerHandleSetAttributes
	.type	 PlayerHandleSetAttributes,function
	.thumb_func
PlayerHandleSetAttributes:
	push	{r4, r5, lr}
	ldr	r1, .L758
	ldr	r0, .L758+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L750	@cond_branch
	ldr	r0, .L758+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	dp01_setattr_by_ch1_for_player_pokemon
	b	.L751
.L759:
	.align	2, 0
.L758:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattlePartyID
.L750:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L755:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L756	@cond_branch
	add	r0, r5, #0
	bl	dp01_setattr_by_ch1_for_player_pokemon
.L756:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L755	@cond_branch
.L751:
	bl	PlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 PlayerHandleSetAttributes,.Lfe56-PlayerHandleSetAttributes
	.align	2, 0
	.globl	dp01_setattr_by_ch1_for_player_pokemon
	.type	 dp01_setattr_by_ch1_for_player_pokemon,function
	.thumb_func
dp01_setattr_by_ch1_for_player_pokemon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffcc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L832
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	ldr	r2, .L832+0x4
	add	r3, r0, r2
	add	r6, r3, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r2, #0
	cmp	r0, #0x3b
	bls	.LCB7526
	bl	.L761	@far jump
.LCB7526:
	lsl	r0, r0, #0x2
	ldr	r1, .L832+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L833:
	.align	2, 0
.L832:
	.word	gActiveBank
	.word	gBattleBufferA+0x3
	.word	.L828
	.align	2, 0
	.align	2, 0
.L828:
	.word	.L762
	.word	.L768
	.word	.L769
	.word	.L770
	.word	.L779
	.word	.L779
	.word	.L779
	.word	.L779
	.word	.L780
	.word	.L784
	.word	.L784
	.word	.L784
	.word	.L784
	.word	.L761
	.word	.L761
	.word	.L761
	.word	.L761
	.word	.L785
	.word	.L786
	.word	.L787
	.word	.L788
	.word	.L789
	.word	.L790
	.word	.L791
	.word	.L792
	.word	.L793
	.word	.L794
	.word	.L795
	.word	.L796
	.word	.L797
	.word	.L798
	.word	.L799
	.word	.L800
	.word	.L801
	.word	.L802
	.word	.L803
	.word	.L804
	.word	.L805
	.word	.L806
	.word	.L807
	.word	.L808
	.word	.L809
	.word	.L810
	.word	.L811
	.word	.L812
	.word	.L813
	.word	.L814
	.word	.L815
	.word	.L816
	.word	.L817
	.word	.L818
	.word	.L819
	.word	.L820
	.word	.L821
	.word	.L822
	.word	.L823
	.word	.L824
	.word	.L825
	.word	.L826
	.word	.L827
.L762:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L834
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r6, #0
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r6
	mov	sl, r0
	add	r0, r6, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r6, #0x2
	str	r0, [sp, #0x4]
	add	r0, r6, #0x4
	str	r0, [sp, #0x8]
	add	r0, r6, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r7, r6, #0
	add	r7, r7, #0x24
	add	r4, r6, #0
	add	r4, r4, #0xc
.L766:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r7, #0
	bl	SetMonData
	add	r7, r7, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L766	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L834
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r6, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r6, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L761
.L835:
	.align	2, 0
.L834:
	.word	gPlayerParty
.L768:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L836
	add	r0, r0, r1
	ldr	r1, .L836+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xb
	bl	SetMonData
	b	.L761
.L837:
	.align	2, 0
.L836:
	.word	gPlayerParty
	.word	gActiveBank
.L769:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L838
	add	r0, r0, r1
	ldr	r1, .L838+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xc
	bl	SetMonData
	b	.L761
.L839:
	.align	2, 0
.L838:
	.word	gPlayerParty
	.word	gActiveBank
.L770:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r3
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L840
	add	r7, r1, r0
	add	r6, r3, #0
	add	r6, r6, #0x8
	add	r4, r3, #0
.L774:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L774	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L840
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L761
.L841:
	.align	2, 0
.L840:
	.word	gPlayerParty
.L779:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L842
	add	r0, r0, r1
	ldr	r3, .L842+0x4
	ldr	r1, .L842+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L830
.L843:
	.align	2, 0
.L842:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBank
.L780:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L844
	add	r4, r4, r0
	ldr	r5, .L844+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L761
.L845:
	.align	2, 0
.L844:
	.word	gPlayerParty
	.word	gActiveBank
.L784:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L846
	add	r0, r0, r1
	ldr	r3, .L846+0x4
	ldr	r1, .L846+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L830:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L761
.L847:
	.align	2, 0
.L846:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBank
.L785:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L848
	add	r0, r0, r1
	ldr	r1, .L848+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1
	bl	SetMonData
	b	.L761
.L849:
	.align	2, 0
.L848:
	.word	gPlayerParty
	.word	gActiveBank
.L786:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L850
	add	r0, r0, r1
	ldr	r1, .L850+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x19
	bl	SetMonData
	b	.L761
.L851:
	.align	2, 0
.L850:
	.word	gPlayerParty
	.word	gActiveBank
.L787:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L852
	add	r0, r0, r1
	ldr	r1, .L852+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1a
	bl	SetMonData
	b	.L761
.L853:
	.align	2, 0
.L852:
	.word	gPlayerParty
	.word	gActiveBank
.L788:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L854
	add	r0, r0, r1
	ldr	r1, .L854+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1b
	bl	SetMonData
	b	.L761
.L855:
	.align	2, 0
.L854:
	.word	gPlayerParty
	.word	gActiveBank
.L789:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L856
	add	r0, r0, r1
	ldr	r1, .L856+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1c
	bl	SetMonData
	b	.L761
.L857:
	.align	2, 0
.L856:
	.word	gPlayerParty
	.word	gActiveBank
.L790:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L858
	add	r0, r0, r1
	ldr	r1, .L858+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1d
	bl	SetMonData
	b	.L761
.L859:
	.align	2, 0
.L858:
	.word	gPlayerParty
	.word	gActiveBank
.L791:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L860
	add	r0, r0, r1
	ldr	r1, .L860+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1e
	bl	SetMonData
	b	.L761
.L861:
	.align	2, 0
.L860:
	.word	gPlayerParty
	.word	gActiveBank
.L792:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L862
	add	r0, r0, r1
	ldr	r1, .L862+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1f
	bl	SetMonData
	b	.L761
.L863:
	.align	2, 0
.L862:
	.word	gPlayerParty
	.word	gActiveBank
.L793:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L864
	add	r0, r0, r1
	ldr	r1, .L864+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x20
	bl	SetMonData
	b	.L761
.L865:
	.align	2, 0
.L864:
	.word	gPlayerParty
	.word	gActiveBank
.L794:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L866
	add	r0, r0, r1
	ldr	r1, .L866+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x22
	bl	SetMonData
	b	.L761
.L867:
	.align	2, 0
.L866:
	.word	gPlayerParty
	.word	gActiveBank
.L795:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L868
	add	r0, r0, r1
	ldr	r1, .L868+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x23
	bl	SetMonData
	b	.L761
.L869:
	.align	2, 0
.L868:
	.word	gPlayerParty
	.word	gActiveBank
.L796:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L870
	add	r0, r0, r1
	ldr	r1, .L870+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x24
	bl	SetMonData
	b	.L761
.L871:
	.align	2, 0
.L870:
	.word	gPlayerParty
	.word	gActiveBank
.L797:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L872
	add	r0, r0, r1
	ldr	r1, .L872+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x25
	bl	SetMonData
	b	.L761
.L873:
	.align	2, 0
.L872:
	.word	gPlayerParty
	.word	gActiveBank
.L798:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L874
	add	r0, r0, r1
	ldr	r1, .L874+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x26
	bl	SetMonData
	b	.L761
.L875:
	.align	2, 0
.L874:
	.word	gPlayerParty
	.word	gActiveBank
.L799:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L876
	add	r4, r4, r0
	ldr	r5, .L876+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L831
.L877:
	.align	2, 0
.L876:
	.word	gPlayerParty
	.word	gActiveBank
.L800:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L878
	add	r0, r0, r1
	ldr	r1, .L878+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x27
	bl	SetMonData
	b	.L761
.L879:
	.align	2, 0
.L878:
	.word	gPlayerParty
	.word	gActiveBank
.L801:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L880
	add	r0, r0, r1
	ldr	r1, .L880+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x28
	bl	SetMonData
	b	.L761
.L881:
	.align	2, 0
.L880:
	.word	gPlayerParty
	.word	gActiveBank
.L802:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L882
	add	r0, r0, r1
	ldr	r1, .L882+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x29
	bl	SetMonData
	b	.L761
.L883:
	.align	2, 0
.L882:
	.word	gPlayerParty
	.word	gActiveBank
.L803:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L884
	add	r0, r0, r1
	ldr	r1, .L884+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2a
	bl	SetMonData
	b	.L761
.L885:
	.align	2, 0
.L884:
	.word	gPlayerParty
	.word	gActiveBank
.L804:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L886
	add	r0, r0, r1
	ldr	r1, .L886+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2b
	bl	SetMonData
	b	.L761
.L887:
	.align	2, 0
.L886:
	.word	gPlayerParty
	.word	gActiveBank
.L805:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L888
	add	r0, r0, r1
	ldr	r1, .L888+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
.L831:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L761
.L889:
	.align	2, 0
.L888:
	.word	gPlayerParty
	.word	gActiveBank
.L806:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L890
	add	r0, r0, r1
	ldr	r1, .L890+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x0
	bl	SetMonData
	b	.L761
.L891:
	.align	2, 0
.L890:
	.word	gPlayerParty
	.word	gActiveBank
.L807:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L892
	add	r0, r0, r1
	ldr	r1, .L892+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x9
	bl	SetMonData
	b	.L761
.L893:
	.align	2, 0
.L892:
	.word	gPlayerParty
	.word	gActiveBank
.L808:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L894
	add	r0, r0, r1
	ldr	r1, .L894+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x37
	bl	SetMonData
	b	.L761
.L895:
	.align	2, 0
.L894:
	.word	gPlayerParty
	.word	gActiveBank
.L809:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L896
	add	r0, r0, r1
	ldr	r1, .L896+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x38
	bl	SetMonData
	b	.L761
.L897:
	.align	2, 0
.L896:
	.word	gPlayerParty
	.word	gActiveBank
.L810:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L898
	add	r0, r0, r1
	ldr	r1, .L898+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x39
	bl	SetMonData
	b	.L761
.L899:
	.align	2, 0
.L898:
	.word	gPlayerParty
	.word	gActiveBank
.L811:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L900
	add	r0, r0, r1
	ldr	r1, .L900+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3a
	bl	SetMonData
	b	.L761
.L901:
	.align	2, 0
.L900:
	.word	gPlayerParty
	.word	gActiveBank
.L812:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L902
	add	r0, r0, r1
	ldr	r1, .L902+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3b
	bl	SetMonData
	b	.L761
.L903:
	.align	2, 0
.L902:
	.word	gPlayerParty
	.word	gActiveBank
.L813:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L904
	add	r0, r0, r1
	ldr	r1, .L904+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3c
	bl	SetMonData
	b	.L761
.L905:
	.align	2, 0
.L904:
	.word	gPlayerParty
	.word	gActiveBank
.L814:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L906
	add	r0, r0, r1
	ldr	r1, .L906+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3d
	bl	SetMonData
	b	.L761
.L907:
	.align	2, 0
.L906:
	.word	gPlayerParty
	.word	gActiveBank
.L815:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L908
	add	r0, r0, r1
	ldr	r1, .L908+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3e
	bl	SetMonData
	b	.L761
.L909:
	.align	2, 0
.L908:
	.word	gPlayerParty
	.word	gActiveBank
.L816:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L910
	add	r0, r0, r1
	ldr	r1, .L910+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3f
	bl	SetMonData
	b	.L761
.L911:
	.align	2, 0
.L910:
	.word	gPlayerParty
	.word	gActiveBank
.L817:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L912
	add	r0, r0, r1
	ldr	r1, .L912+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x16
	bl	SetMonData
	b	.L761
.L913:
	.align	2, 0
.L912:
	.word	gPlayerParty
	.word	gActiveBank
.L818:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L914
	add	r0, r0, r1
	ldr	r1, .L914+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x17
	bl	SetMonData
	b	.L761
.L915:
	.align	2, 0
.L914:
	.word	gPlayerParty
	.word	gActiveBank
.L819:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L916
	add	r0, r0, r1
	ldr	r1, .L916+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x18
	bl	SetMonData
	b	.L761
.L917:
	.align	2, 0
.L916:
	.word	gPlayerParty
	.word	gActiveBank
.L820:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L918
	add	r0, r0, r1
	ldr	r1, .L918+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x21
	bl	SetMonData
	b	.L761
.L919:
	.align	2, 0
.L918:
	.word	gPlayerParty
	.word	gActiveBank
.L821:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L920
	add	r0, r0, r1
	ldr	r1, .L920+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2f
	bl	SetMonData
	b	.L761
.L921:
	.align	2, 0
.L920:
	.word	gPlayerParty
	.word	gActiveBank
.L822:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L922
	add	r0, r0, r1
	ldr	r1, .L922+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x30
	bl	SetMonData
	b	.L761
.L923:
	.align	2, 0
.L922:
	.word	gPlayerParty
	.word	gActiveBank
.L823:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L924
	add	r0, r0, r1
	ldr	r1, .L924+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x32
	bl	SetMonData
	b	.L761
.L925:
	.align	2, 0
.L924:
	.word	gPlayerParty
	.word	gActiveBank
.L824:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L926
	add	r0, r0, r1
	ldr	r1, .L926+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x33
	bl	SetMonData
	b	.L761
.L927:
	.align	2, 0
.L926:
	.word	gPlayerParty
	.word	gActiveBank
.L825:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L928
	add	r0, r0, r1
	ldr	r1, .L928+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x34
	bl	SetMonData
	b	.L761
.L929:
	.align	2, 0
.L928:
	.word	gPlayerParty
	.word	gActiveBank
.L826:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L930
	add	r0, r0, r1
	ldr	r1, .L930+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x35
	bl	SetMonData
	b	.L761
.L931:
	.align	2, 0
.L930:
	.word	gPlayerParty
	.word	gActiveBank
.L827:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L932
	add	r0, r0, r1
	ldr	r1, .L932+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x36
	bl	SetMonData
.L761:
	ldr	r2, .L932+0x8
	ldr	r0, .L932+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L932
	add	r0, r0, r2
	bl	sub_80324F8
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L933:
	.align	2, 0
.L932:
	.word	gPlayerParty
	.word	gActiveBank
	.word	gBattlePartyID
.Lfe57:
	.size	 dp01_setattr_by_ch1_for_player_pokemon,.Lfe57-dp01_setattr_by_ch1_for_player_pokemon
	.align	2, 0
	.globl	PlayerHandlecmd3
	.type	 PlayerHandlecmd3,function
	.thumb_func
PlayerHandlecmd3:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L940
	ldr	r7, .L940+0x4
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r3, r1
	mul	r3, r3, r0
	ldr	r4, .L940+0x8
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	ldr	r1, .L940+0xc
	add	r0, r0, r1
	add	r5, r3, r0
	mov	r3, #0x0
	add	r0, r4, #0x2
	add	r2, r2, r0
	ldrb	r2, [r2]
	cmp	r3, r2
	bcs	.L936	@cond_branch
	add	r6, r4, #0
	add	r2, r7, #0
	add	r4, r0, #0
.L938:
	add	r1, r5, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L938	@cond_branch
.L936:
	bl	PlayerBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L941:
	.align	2, 0
.L940:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gPlayerParty
.Lfe58:
	.size	 PlayerHandlecmd3,.Lfe58-PlayerHandlecmd3
	.align	2, 0
	.globl	PlayerHandleLoadPokeSprite
	.type	 PlayerHandleLoadPokeSprite,function
	.thumb_func
PlayerHandleLoadPokeSprite:
	push	{r4, lr}
	ldr	r2, .L943
	ldr	r4, .L943+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L943+0x8
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSprite
	ldr	r2, .L943+0xc
	ldr	r0, .L943+0x10
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldr	r1, .L943+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L943+0x18
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L944:
	.align	2, 0
.L943:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gPlayerParty
	.word	gSprites
	.word	gObjectBankIDs
	.word	gBattleBankFunc
	.word	bx_0802E404
.Lfe59:
	.size	 PlayerHandleLoadPokeSprite,.Lfe59-PlayerHandleLoadPokeSprite
	.align	2, 0
	.globl	PlayerHandleSendOutPoke
	.type	 PlayerHandleSendOutPoke,function
	.thumb_func
PlayerHandleSendOutPoke:
	push	{r4, r5, r6, lr}
	ldr	r5, .L946
	ldrb	r0, [r5]
	ldr	r4, .L946+0x4
	lsl	r1, r0, #0x9
	add	r6, r4, #0x2
	add	r1, r1, r6
	ldrb	r1, [r1]
	bl	sub_8032AA8
	ldr	r2, .L946+0x8
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	lsl	r0, r0, #0x9
	add	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r4, #0x0
	strh	r0, [r1]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L946+0xc
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSprite
	ldr	r1, .L946+0x10
	ldrb	r0, [r5]
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r1, .L946+0x14
	ldrb	r0, [r5]
	add	r0, r0, r1
	strb	r4, [r0]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x9
	add	r1, r1, r6
	ldrb	r1, [r1]
	bl	sub_802F934
	ldr	r1, .L946+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L946+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L947:
	.align	2, 0
.L946:
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gBattleBankFunc
	.word	sub_802D798
.Lfe60:
	.size	 PlayerHandleSendOutPoke,.Lfe60-PlayerHandleSendOutPoke
	.align	2, 0
	.globl	sub_802F934
	.type	 sub_802F934,function
	.thumb_func
sub_802F934:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	sub_8032AA8
	ldr	r0, .L949
	lsl	r2, r6, #0x1
	add	r2, r2, r0
	ldr	r0, .L949+0x4
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r2]
	ldrh	r1, [r2]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L949+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L949+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L949+0x10
	mov	r9, r1
	add	r9, r9, r6
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L949+0x14
	mov	sl, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	sub_8077ABC
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	sub_8077F68
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L949+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L949+0x1c
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L949+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L949+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	sub_8046400
	mov	r1, r9
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L950:
	.align	2, 0
.L949:
	.word	gBattlePartyID
	.word	gBattleBufferA
	.word	gPlayerParty
	.word	sub_80312F0
	.word	gUnknown_0300434C
	.word	gUnknown_02024E8C
	.word	gObjectBankIDs
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe61:
	.size	 sub_802F934,.Lfe61-sub_802F934
	.align	2, 0
	.globl	PlayerHandleReturnPokeToBall
	.type	 PlayerHandleReturnPokeToBall,function
	.thumb_func
PlayerHandleReturnPokeToBall:
	push	{r4, r5, r6, lr}
	ldr	r1, .L954
	ldr	r6, .L954+0x4
	ldrb	r2, [r6]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L952	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L954+0x8
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L954+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L954+0x10
	str	r1, [r0]
	b	.L953
.L955:
	.align	2, 0
.L954:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_802FB2C
.L952:
	ldr	r5, .L956
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L956+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L956+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	PlayerBufferExecCompleted
.L953:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L957:
	.align	2, 0
.L956:
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
.Lfe62:
	.size	 PlayerHandleReturnPokeToBall,.Lfe62-PlayerHandleReturnPokeToBall
	.align	2, 0
	.globl	sub_802FB2C
	.type	 sub_802FB2C,function
	.thumb_func
sub_802FB2C:
	push	{r4, r5, lr}
	ldr	r5, .L966
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L966+0x4
	add	r3, r0, r4
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L960	@cond_branch
	cmp	r0, #0x1
	beq	.L962	@cond_branch
	b	.L959
.L967:
	.align	2, 0
.L966:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L960:
	lsl	r0, r2, #0x2
	add	r1, r4, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L961	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L961:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L959
.L962:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L959	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	move_anim_start_t4
	ldr	r1, .L968
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L968+0x4
	str	r1, [r0]
.L959:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L969:
	.align	2, 0
.L968:
	.word	gBattleBankFunc
	.word	sub_802DEAC
.Lfe63:
	.size	 sub_802FB2C,.Lfe63-sub_802FB2C
	.align	2, 0
	.globl	PlayerHandleTrainerThrow
	.type	 PlayerHandleTrainerThrow,function
	.thumb_func
PlayerHandleTrainerThrow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L975
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L971	@cond_branch
	ldr	r0, .L975+0x4
	ldrb	r0, [r0]
	bl	GetBankIdentity
	mov	r1, #0x2
	and	r1, r1, r0
	ldr	r7, .L975+0x8
	cmp	r1, #0
	beq	.L974	@cond_branch
	mov	r7, #0x10
	b	.L974
.L976:
	.align	2, 0
.L975:
	.word	gBattleTypeFlags
	.word	gActiveBank
	.word	0xfff0
.L971:
	mov	r7, #0x0
.L974:
	ldr	r4, .L977
	ldrb	r0, [r4, #0x8]
	ldr	r6, .L977+0x4
	ldrb	r1, [r6]
	bl	LoadPlayerTrainerBankSprite
	ldrb	r5, [r4, #0x8]
	ldrb	r0, [r6]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	GetMonSpriteTemplate_803C5A0
	ldr	r0, .L977+0x8
	mov	r8, r0
	lsl	r5, r7, #0x10
	mov	r0, #0xa0
	lsl	r0, r0, #0xf
	add	r5, r5, r0
	asr	r5, r5, #0x10
	ldr	r1, .L977+0xc
	ldrb	r0, [r4, #0x8]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xf
	add	r4, r4, r0
	asr	r4, r4, #0x10
	ldrb	r0, [r6]
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r5, .L977+0x10
	ldrb	r1, [r6]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L977+0x14
	ldrb	r3, [r6]
	add	r0, r3, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L977+0x18
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L977+0x1c
	str	r1, [r0]
	ldr	r1, .L977+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L977+0x24
	str	r1, [r0]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L978:
	.align	2, 0
.L977:
	.word	gSaveBlock2
	.word	gActiveBank
	.word	gUnknown_02024E8C
	.word	gTrainerBackPicCoords
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xfffe
	.word	sub_80313A0
	.word	gBattleBankFunc
	.word	sub_802D204
.Lfe64:
	.size	 PlayerHandleTrainerThrow,.Lfe64-PlayerHandleTrainerThrow
	.align	2, 0
	.globl	PlayerHandleTrainerSlide
	.type	 PlayerHandleTrainerSlide,function
	.thumb_func
PlayerHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	ldr	r4, .L980
	ldrb	r0, [r4, #0x8]
	ldr	r5, .L980+0x4
	ldrb	r1, [r5]
	bl	LoadPlayerTrainerBankSprite
	ldrb	r6, [r4, #0x8]
	ldrb	r0, [r5]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	GetMonSpriteTemplate_803C5A0
	ldr	r0, .L980+0x8
	ldr	r2, .L980+0xc
	ldrb	r1, [r4, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r6, .L980+0x10
	ldrb	r1, [r5]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r4, .L980+0x14
	ldrb	r3, [r5]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L980+0x18
	strh	r1, [r0, #0x24]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L980+0x1c
	str	r1, [r0]
	ldr	r1, .L980+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L980+0x24
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L981:
	.align	2, 0
.L980:
	.word	gSaveBlock2
	.word	gActiveBank
	.word	gUnknown_02024E8C
	.word	gTrainerBackPicCoords
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xffa0
	.word	sub_80313A0
	.word	gBattleBankFunc
	.word	sub_802D23C
.Lfe65:
	.size	 PlayerHandleTrainerSlide,.Lfe65-PlayerHandleTrainerSlide
	.align	2, 0
	.globl	PlayerHandleTrainerSlideBack
	.type	 PlayerHandleTrainerSlideBack,function
	.thumb_func
PlayerHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r5, .L983
	ldr	r6, .L983+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L983+0x8
	add	r0, r0, r4
	bl	oamt_add_pos2_onto_pos1
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L983+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L983+0x10
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L983+0x14
	bl	StoreSpriteCallbackInData
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r1, .L983+0x18
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L983+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L984:
	.align	2, 0
.L983:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	0xffd8
	.word	sub_8078B34
	.word	SpriteCallbackDummy
	.word	gBattleBankFunc
	.word	sub_802D274
.Lfe66:
	.size	 PlayerHandleTrainerSlideBack,.Lfe66-PlayerHandleTrainerSlideBack
	.align	2, 0
	.globl	PlayerHandlecmd10
	.type	 PlayerHandlecmd10,function
	.thumb_func
PlayerHandlecmd10:
	push	{r4, r5, lr}
	ldr	r5, .L990
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L990+0x4
	add	r3, r0, r4
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L986	@cond_branch
	lsl	r0, r2, #0x2
	add	r1, r4, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L987	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L987:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x4]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L988
.L991:
	.align	2, 0
.L990:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L986:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L988	@cond_branch
	strb	r4, [r3, #0x4]
	ldr	r2, .L992
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L992+0x4
	add	r0, r0, r2
	bl	sub_80324F8
	mov	r1, #0x40
	neg	r1, r1
	mov	r0, #0x10
	bl	PlaySE12WithPanning
	ldr	r2, .L992+0x8
	ldr	r3, .L992+0xc
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x30]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L992+0x10
	str	r1, [r0]
	ldr	r1, .L992+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L992+0x18
	str	r1, [r0]
.L988:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L993:
	.align	2, 0
.L992:
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gSprites
	.word	gObjectBankIDs
	.word	sub_80105EC
	.word	gBattleBankFunc
	.word	sub_802DE10
.Lfe67:
	.size	 PlayerHandlecmd10,.Lfe67-PlayerHandlecmd10
	.align	2, 0
	.globl	PlayerHandlecmd11
	.type	 PlayerHandlecmd11,function
	.thumb_func
PlayerHandlecmd11:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 PlayerHandlecmd11,.Lfe68-PlayerHandlecmd11
	.align	2, 0
	.globl	PlayerHandlecmd12
	.type	 PlayerHandlecmd12,function
	.thumb_func
PlayerHandlecmd12:
	push	{r4, r5, lr}
	ldr	r1, .L996
	mov	r0, #0x4
	strb	r0, [r1, #0x8]
	ldr	r1, .L996+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r5, .L996+0x8
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x3
	bl	move_anim_start_t4
	ldr	r1, .L996+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L996+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L997:
	.align	2, 0
.L996:
	.word	gSharedMem+0x17840
	.word	gDoingBattleAnim
	.word	gActiveBank
	.word	gBattleBankFunc
	.word	bx_wait_t1
.Lfe69:
	.size	 PlayerHandlecmd12,.Lfe69-PlayerHandlecmd12
	.align	2, 0
	.globl	PlayerHandleBallThrow
	.type	 PlayerHandleBallThrow,function
	.thumb_func
PlayerHandleBallThrow:
	push	{r4, r5, lr}
	ldr	r1, .L999
	ldr	r5, .L999+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, .L999+0x8
	strb	r1, [r0, #0x8]
	ldr	r1, .L999+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x3
	bl	move_anim_start_t4
	ldr	r1, .L999+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L999+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1000:
	.align	2, 0
.L999:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17840
	.word	gDoingBattleAnim
	.word	gBattleBankFunc
	.word	bx_wait_t1
.Lfe70:
	.size	 PlayerHandleBallThrow,.Lfe70-PlayerHandleBallThrow
	.align	2, 0
	.globl	PlayerHandlePuase
	.type	 PlayerHandlePuase,function
	.thumb_func
PlayerHandlePuase:
	push	{lr}
	ldr	r1, .L1006
	ldr	r0, .L1006+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1003	@cond_branch
.L1004:
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1004	@cond_branch
.L1003:
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1007:
	.align	2, 0
.L1006:
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe71:
	.size	 PlayerHandlePuase,.Lfe71-PlayerHandlePuase
	.align	2, 0
	.globl	PlayerHandleMoveAnimation
	.type	 PlayerHandleMoveAnimation,function
	.thumb_func
PlayerHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L1012
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10275
	b	.L1009	@long jump
.LCB10275:
	ldr	r0, .L1012+0x4
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L1012+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L1012+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L1012+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L1012+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L1012+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L1012+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L1012+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	sub_8031720
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L1010	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1009
.L1013:
	.align	2, 0
.L1012:
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gUnknown_0202F7C4
	.word	gMovePowerMoveAnim
	.word	gMoveDmgMoveAnim
	.word	gHappinessMoveAnim
	.word	gWeatherMoveAnim
	.word	gDisableStructMoveAnim
	.word	gPID_perBank
.L1010:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1014
	add	r0, r0, r1
	strb	r2, [r0, #0x4]
	ldr	r1, .L1014+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1014+0x8
	str	r1, [r0]
.L1009:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1015:
	.align	2, 0
.L1014:
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8030190
.Lfe72:
	.size	 PlayerHandleMoveAnimation,.Lfe72-PlayerHandleMoveAnimation
	.align	2, 0
	.globl	sub_8030190
	.type	 sub_8030190,function
	.thumb_func
sub_8030190:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r2, .L1030
	ldr	r5, .L1030+0x4
	ldrb	r3, [r5]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	r9, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r6, r2, #0x2
	mov	r8, r6
	add	r0, r1, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r2, r2, #0xb
	add	r1, r1, r2
	ldrb	r7, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r6, .L1030+0x8
	add	r0, r0, r6
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L1020	@cond_branch
	cmp	r2, #0x1
	bgt	.L1029	@cond_branch
	cmp	r2, #0
	beq	.L1018	@cond_branch
	b	.L1017
.L1031:
	.align	2, 0
.L1030:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L1029:
	cmp	r2, #0x2
	beq	.L1022	@cond_branch
	cmp	r2, #0x3
	beq	.L1025	@cond_branch
	b	.L1017
.L1018:
	lsl	r1, r3, #0x2
	add	r0, r6, #0
	sub	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0x4
	bne	.L1019	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L1019:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L1017
.L1020:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1017	@cond_branch
	mov	r0, #0x0
	bl	sub_80326EC
	add	r0, r4, #0
	bl	ExecuteMoveAnim
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x2
	strb	r0, [r1, #0x4]
	b	.L1017
.L1022:
	ldr	r0, .L1032
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L1032+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1017	@cond_branch
	mov	r0, #0x1
	bl	sub_80326EC
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r4, r6, #0
	sub	r4, r4, #0x10
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1024	@cond_branch
	cmp	r7, #0x1
	bhi	.L1024	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	move_anim_start_t4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0]
	mov	r1, #0x9
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L1024:
	ldr	r0, .L1032+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1032+0xc
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L1017
.L1033:
	.align	2, 0
.L1032:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L1025:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L1017	@cond_branch
	bl	sub_8031F24
	ldrb	r0, [r5]
	lsl	r2, r0, #0x9
	mov	r3, r9
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r8
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	sub_80324BC
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strb	r4, [r0, #0x4]
	bl	PlayerBufferExecCompleted
.L1017:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 sub_8030190,.Lfe73-sub_8030190
	.align	2, 0
	.globl	PlayerHandlePrintString
	.type	 PlayerHandlePrintString,function
	.thumb_func
PlayerHandlePrintString:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L1035
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1035+0x4
	strh	r1, [r0]
	ldr	r4, .L1035+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	ldr	r1, .L1035+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	BufferStringBattle
	ldr	r0, .L1035+0x10
	ldr	r1, .L1035+0x14
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L1035+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1035+0x1c
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1036:
	.align	2, 0
.L1035:
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gActiveBank
	.word	gBattleBufferA+0x2
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gBattleBankFunc
	.word	sub_802DF18
.Lfe74:
	.size	 PlayerHandlePrintString,.Lfe74-PlayerHandlePrintString
	.align	2, 0
	.globl	PlayerHandlePrintStringPlayerOnly
	.type	 PlayerHandlePrintStringPlayerOnly,function
	.thumb_func
PlayerHandlePrintStringPlayerOnly:
	push	{lr}
	ldr	r0, .L1040
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1038	@cond_branch
	bl	PlayerHandlePrintString
	b	.L1039
.L1041:
	.align	2, 0
.L1040:
	.word	gActiveBank
.L1038:
	bl	PlayerBufferExecCompleted
.L1039:
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 PlayerHandlePrintStringPlayerOnly,.Lfe75-PlayerHandlePrintStringPlayerOnly
	.align	2, 0
	.globl	PlayerHandlecmd18
	.type	 PlayerHandlecmd18,function
	.thumb_func
PlayerHandlecmd18:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	mov	r0, #0x1
	bl	SetCustomFont
	ldr	r1, .L1048
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L1048+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r4, .L1048+0x8
	mov	r0, #0x1b
	str	r0, [sp]
	mov	r0, #0x12
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r1, #0xa
	mov	r2, #0x2
	mov	r3, #0xf
	bl	FillWindowRect
	mov	r0, #0x10
	str	r0, [sp]
	mov	r0, #0x26
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r1, #0xa
	mov	r2, #0x2
	mov	r3, #0x23
	bl	FillWindowRect
	ldr	r1, .L1048+0xc
	ldr	r0, .L1048+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1048+0x14
	str	r1, [r0]
	ldr	r1, .L1048+0x18
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	mov	r0, #0x23
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x13
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
	ldr	r1, .L1048+0x1c
	ldr	r3, .L1048+0x20
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0xc
	bl	sub_814A5C0
	mov	r4, #0x0
.L1046:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	nullsub_8
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1046	@cond_branch
	ldr	r1, .L1048+0x24
	ldr	r0, .L1048+0x10
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_802E3E4
	mov	r0, #0x0
	bl	SetCustomFont
	ldr	r0, .L1048+0x28
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r4, .L1048+0x8
	ldr	r1, .L1048+0x2c
	mov	r2, #0xdc
	lsl	r2, r2, #0x1
	mov	r0, #0x23
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x2
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L1049:
	.align	2, 0
.L1048:
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_03004210
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802C098
	.word	BattleText_MenuOptions
	.word	0xffff
	.word	0x2d9f
	.word	gActionSelectionCursor
	.word	BattleText_OtherMenu
	.word	gDisplayedStringBattle
.Lfe76:
	.size	 PlayerHandlecmd18,.Lfe76-PlayerHandlecmd18
	.align	2, 0
	.globl	PlayerHandlecmd19
	.type	 PlayerHandlecmd19,function
	.thumb_func
PlayerHandlecmd19:
	bx	lr
.Lfe77:
	.size	 PlayerHandlecmd19,.Lfe77-PlayerHandlecmd19
	.align	2, 0
	.globl	PlayerHandlecmd20
	.type	 PlayerHandlecmd20,function
	.thumb_func
PlayerHandlecmd20:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L1052
	ldr	r3, .L1052+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0xc
	bl	sub_814A5C0
	bl	sub_80304A8
	ldr	r1, .L1052+0x8
	ldr	r0, .L1052+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1052+0x10
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L1053:
	.align	2, 0
.L1052:
	.word	0xffff
	.word	0x2d9f
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802C68C
.Lfe78:
	.size	 PlayerHandlecmd20,.Lfe78-PlayerHandlecmd20
	.align	2, 0
	.globl	sub_80304A8
	.type	 sub_80304A8,function
	.thumb_func
sub_80304A8:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L1056
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L1056+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	bl	sub_802E1B0
	ldr	r1, .L1056+0x8
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r1, .L1056+0xc
	ldr	r4, .L1056+0x10
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_802E3B4
	ldr	r1, .L1056+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1055	@cond_branch
	ldr	r4, .L1056+0x18
	ldr	r1, .L1056+0x1c
	mov	r2, #0xa4
	lsl	r2, r2, #0x2
	mov	r0, #0x37
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x17
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
.L1055:
	bl	sub_802E220
	bl	sub_802E2D4
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1057:
	.align	2, 0
.L1056:
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_03004344
	.word	gMoveSelectionCursor
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gUnknown_03004210
	.word	BattleText_PP
.Lfe79:
	.size	 sub_80304A8,.Lfe79-sub_80304A8
	.align	2, 0
	.globl	PlayerHandleOpenBag
	.type	 PlayerHandleOpenBag,function
	.thumb_func
PlayerHandleOpenBag:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1064
	ldr	r2, .L1064+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1064+0x8
	str	r1, [r0]
	ldr	r1, .L1064+0xc
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r3, #0x0
	ldr	r5, .L1064+0x10
	ldr	r4, .L1064+0x14
.L1062:
	add	r0, r3, r5
	ldrb	r1, [r2]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x1
	add	r1, r3, r1
	add	r1, r1, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1062	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1065:
	.align	2, 0
.L1064:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802E004
	.word	gBankInMenu
	.word	gUnknown_02038470
	.word	gBattleBufferA
.Lfe80:
	.size	 PlayerHandleOpenBag,.Lfe80-PlayerHandleOpenBag
	.align	2, 0
	.globl	PlayerHandlecmd22
	.type	 PlayerHandlecmd22,function
	.thumb_func
PlayerHandlecmd22:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L1072
	mov	r1, #0xff
	bl	CreateTask
	ldr	r3, .L1072+0x4
	ldr	r5, .L1072+0x8
	ldrb	r1, [r5]
	add	r1, r1, r3
	strb	r0, [r1]
	ldr	r4, .L1072+0xc
	ldrb	r2, [r5]
	add	r3, r2, r3
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldr	r4, .L1072+0x10
	lsl	r2, r2, #0x9
	add	r3, r4, #0x1
	add	r2, r2, r3
	ldrb	r2, [r2]
	mov	r0, #0xf
	and	r0, r0, r2
	strh	r0, [r1, #0x8]
	ldr	r2, .L1072+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsr	r0, r0, #0x4
	ldr	r3, .L1072+0x18
	add	r1, r2, r3
	strb	r0, [r1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r3, r3, #0x49
	add	r0, r2, r3
	strb	r1, [r0]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r4, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, .L1072+0x1c
	add	r2, r2, r1
	strb	r0, [r2]
	mov	r2, #0x0
	ldr	r3, .L1072+0x20
.L1070:
	add	r0, r2, r3
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L1070	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1072+0x24
	ldr	r2, .L1072+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1072+0x28
	str	r1, [r0]
	ldr	r1, .L1072+0x2c
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1073:
	.align	2, 0
.L1072:
	.word	TaskDummy
	.word	gUnknown_0300434C
	.word	gActiveBank
	.word	gTasks
	.word	gBattleBufferA
	.word	gSharedMem
	.word	0x16054
	.word	0x160c0
	.word	gUnknown_02038470
	.word	gBattleBankFunc
	.word	sub_802DF30
	.word	gBankInMenu
.Lfe81:
	.size	 PlayerHandlecmd22,.Lfe81-PlayerHandlecmd22
	.align	2, 0
	.globl	PlayerHandlecmd23
	.type	 PlayerHandlecmd23,function
	.thumb_func
PlayerHandlecmd23:
	push	{lr}
	add	sp, sp, #0xfffffffc
	bl	BattleMusicStop
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 PlayerHandlecmd23,.Lfe82-PlayerHandlecmd23
	.align	2, 0
	.globl	PlayerHandleHealthBarUpdate
	.type	 PlayerHandleHealthBarUpdate,function
	.thumb_func
PlayerHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	bl	load_gfxc_health_bar
	ldr	r3, .L1078
	ldr	r0, .L1078+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r2, r4, #0x9
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r3, r3, #0x3
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L1078+0x8
	cmp	r7, r0
	beq	.L1076	@cond_branch
	ldr	r6, .L1078+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L1078+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L1078+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	sub_8043D84
	b	.L1077
.L1079:
	.align	2, 0
.L1078:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	0x7fff
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gHealthboxIDs
.L1076:
	ldr	r1, .L1080
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1080+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r4, .L1080+0x8
	add	r1, r0, r4
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	sub_8043D84
	mov	r1, r9
	ldrb	r0, [r1]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	sub_80440EC
.L1077:
	ldr	r1, .L1080+0xc
	ldr	r0, .L1080+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1080+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1081:
	.align	2, 0
.L1080:
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gHealthboxIDs
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	bx_t1_healthbar_update
.Lfe83:
	.size	 PlayerHandleHealthBarUpdate,.Lfe83-PlayerHandleHealthBarUpdate
	.align	2, 0
	.globl	PlayerHandleExpBarUpdate
	.type	 PlayerHandleExpBarUpdate,function
	.thumb_func
PlayerHandleExpBarUpdate:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L1085
	ldr	r6, .L1085+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x1
	add	r0, r0, r1
	ldrb	r7, [r0]
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L1085+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x63
	bls	.L1083	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1084
.L1086:
	.align	2, 0
.L1085:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gPlayerParty
.L1083:
	mov	r0, #0x1
	bl	load_gfxc_health_bar
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r0, r5, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r0, .L1087
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1087+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r7, [r1, #0x8]
	strh	r4, [r1, #0xa]
	ldrb	r0, [r6]
	strh	r0, [r1, #0xc]
	ldr	r1, .L1087+0x8
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1087+0xc
	str	r1, [r0]
.L1084:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1088:
	.align	2, 0
.L1087:
	.word	sub_802D924
	.word	gTasks
	.word	gBattleBankFunc
	.word	nullsub_91
.Lfe84:
	.size	 PlayerHandleExpBarUpdate,.Lfe84-PlayerHandleExpBarUpdate
	.align	2, 0
	.globl	PlayerHandleStatusIconUpdate
	.type	 PlayerHandleStatusIconUpdate,function
	.thumb_func
PlayerHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L1091
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1090	@cond_branch
	ldr	r0, .L1091+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L1091+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L1091+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	sub_8045A5C
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L1091+0x10
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L1091+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1091+0x18
	str	r1, [r0]
.L1090:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1092:
	.align	2, 0
.L1091:
	.word	gActiveBank
	.word	gHealthboxIDs
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_802E434
.Lfe85:
	.size	 PlayerHandleStatusIconUpdate,.Lfe85-PlayerHandleStatusIconUpdate
	.align	2, 0
	.globl	PlayerHandleStatusAnimation
	.type	 PlayerHandleStatusAnimation,function
	.thumb_func
PlayerHandleStatusAnimation:
	push	{r4, r5, lr}
	ldr	r5, .L1095
	ldrb	r0, [r5]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1094	@cond_branch
	ldr	r4, .L1095+0x4
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	add	r2, r4, #0x4
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	add	r4, r4, #0x5
	add	r3, r3, r4
	ldrb	r2, [r3]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	move_anim_start_t2_for_situation
	ldr	r1, .L1095+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1095+0xc
	str	r1, [r0]
.L1094:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1096:
	.align	2, 0
.L1095:
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gBattleBankFunc
	.word	sub_802E434
.Lfe86:
	.size	 PlayerHandleStatusAnimation,.Lfe86-PlayerHandleStatusAnimation
	.align	2, 0
	.globl	PlayerHandleStatusXor
	.type	 PlayerHandleStatusXor,function
	.thumb_func
PlayerHandleStatusXor:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L1098
	mov	r8, r0
	ldr	r4, .L1098+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1098+0x8
	add	r0, r0, r5
	mov	r1, #0x37
	bl	GetMonData
	ldr	r2, .L1098+0xc
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	eor	r0, r0, r1
	mov	r1, sp
	strb	r0, [r1]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1099:
	.align	2, 0
.L1098:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gPlayerParty
	.word	gBattleBufferA
.Lfe87:
	.size	 PlayerHandleStatusXor,.Lfe87-PlayerHandleStatusXor
	.align	2, 0
	.globl	PlayerHandlecmd29
	.type	 PlayerHandlecmd29,function
	.thumb_func
PlayerHandlecmd29:
	push	{lr}
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 PlayerHandlecmd29,.Lfe88-PlayerHandlecmd29
	.align	2, 0
	.globl	PlayerHandleDMATransfer
	.type	 PlayerHandleDMATransfer,function
	.thumb_func
PlayerHandleDMATransfer:
	push	{r4, r5, lr}
	ldr	r3, .L1108
	ldr	r0, .L1108+0x4
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	add	r0, r3, #0x1
	add	r0, r2, r0
	ldrb	r5, [r0]
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	add	r0, r3, #0x3
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
	add	r0, r3, #0x4
	add	r0, r2, r0
	ldrb	r4, [r0]
	lsl	r4, r4, #0x18
	add	r0, r3, #0x5
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r0, r3, #0x6
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	add	r3, r3, #0x7
	add	r2, r2, r3
	orr	r5, r5, r4
	lsr	r4, r1, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r4, r0
	bhi	.L1105	@cond_branch
	ldr	r0, .L1108+0x8
	str	r2, [r0]
	str	r5, [r0, #0x4]
	lsr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	b	.L1107
.L1109:
	.align	2, 0
.L1108:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	0x40000d4
.L1105:
	ldr	r3, .L1110
	str	r2, [r3]
	str	r5, [r3, #0x4]
	ldr	r0, .L1110+0x4
	str	r0, [r3, #0x8]
	ldr	r0, [r3, #0x8]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	add	r2, r2, r0
	add	r5, r5, r0
	ldr	r1, .L1110+0x8
	add	r4, r4, r1
	cmp	r4, r0
	bhi	.L1105	@cond_branch
	str	r2, [r3]
	str	r5, [r3, #0x4]
	lsr	r0, r4, #0x1
	mov	r1, #0x80
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r3, #0x8]
	ldr	r0, [r3, #0x8]
.L1107:
	bl	PlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1111:
	.align	2, 0
.L1110:
	.word	0x40000d4
	.word	0x80000800
	.word	0xfffff000
.Lfe89:
	.size	 PlayerHandleDMATransfer,.Lfe89-PlayerHandleDMATransfer
	.align	2, 0
	.globl	PlayerHandlecmd31
	.type	 PlayerHandlecmd31,function
	.thumb_func
PlayerHandlecmd31:
	push	{lr}
	ldr	r2, .L1113
	ldr	r0, .L1113+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1114:
	.align	2, 0
.L1113:
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe90:
	.size	 PlayerHandlecmd31,.Lfe90-PlayerHandlecmd31
	.align	2, 0
	.globl	PlayerHandlecmd32
	.type	 PlayerHandlecmd32,function
	.thumb_func
PlayerHandlecmd32:
	push	{lr}
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 PlayerHandlecmd32,.Lfe91-PlayerHandlecmd32
	.align	2, 0
	.globl	PlayerHandlecmd33
	.type	 PlayerHandlecmd33,function
	.thumb_func
PlayerHandlecmd33:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	Emitcmd33
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe92:
	.size	 PlayerHandlecmd33,.Lfe92-PlayerHandlecmd33
	.align	2, 0
	.globl	PlayerHandlecmd34
	.type	 PlayerHandlecmd34,function
	.thumb_func
PlayerHandlecmd34:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	Emitcmd34
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe93:
	.size	 PlayerHandlecmd34,.Lfe93-PlayerHandlecmd34
	.align	2, 0
	.globl	PlayerHandlecmd35
	.type	 PlayerHandlecmd35,function
	.thumb_func
PlayerHandlecmd35:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	Emitcmd35
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe94:
	.size	 PlayerHandlecmd35,.Lfe94-PlayerHandlecmd35
	.align	2, 0
	.globl	PlayerHandlecmd36
	.type	 PlayerHandlecmd36,function
	.thumb_func
PlayerHandlecmd36:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	Emitcmd36
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 PlayerHandlecmd36,.Lfe95-PlayerHandlecmd36
	.align	2, 0
	.globl	PlayerHandlecmd37
	.type	 PlayerHandlecmd37,function
	.thumb_func
PlayerHandlecmd37:
	push	{lr}
	ldr	r2, .L1121
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1122:
	.align	2, 0
.L1121:
	.word	gUnknown_020238C8
.Lfe96:
	.size	 PlayerHandlecmd37,.Lfe96-PlayerHandlecmd37
	.align	2, 0
	.globl	PlayerHandlecmd38
	.type	 PlayerHandlecmd38,function
	.thumb_func
PlayerHandlecmd38:
	push	{lr}
	ldr	r3, .L1124
	ldr	r1, .L1124+0x4
	ldr	r0, .L1124+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1125:
	.align	2, 0
.L1124:
	.word	gUnknown_020238C8
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe97:
	.size	 PlayerHandlecmd38,.Lfe97-PlayerHandlecmd38
	.align	2, 0
	.globl	PlayerHandlecmd39
	.type	 PlayerHandlecmd39,function
	.thumb_func
PlayerHandlecmd39:
	push	{lr}
	ldr	r2, .L1127
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	gUnknown_020238C8
.Lfe98:
	.size	 PlayerHandlecmd39,.Lfe98-PlayerHandlecmd39
	.align	2, 0
	.globl	PlayerHandlecmd40
	.type	 PlayerHandlecmd40,function
	.thumb_func
PlayerHandlecmd40:
	push	{lr}
	ldr	r3, .L1130
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1131:
	.align	2, 0
.L1130:
	.word	gUnknown_020238C8
.Lfe99:
	.size	 PlayerHandlecmd40,.Lfe99-PlayerHandlecmd40
	.align	2, 0
	.globl	PlayerHandleHitAnimation
	.type	 PlayerHandleHitAnimation,function
	.thumb_func
PlayerHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L1135
	ldr	r2, .L1135+0x4
	ldr	r4, .L1135+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1133	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1134
.L1136:
	.align	2, 0
.L1135:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
.L1133:
	ldr	r1, .L1137
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	sub_8047858
	ldr	r1, .L1137+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1137+0x8
	str	r1, [r0]
.L1134:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1138:
	.align	2, 0
.L1137:
	.word	gDoingBattleAnim
	.word	gBattleBankFunc
	.word	bx_blink_t1
.Lfe100:
	.size	 PlayerHandleHitAnimation,.Lfe100-PlayerHandleHitAnimation
	.align	2, 0
	.globl	PlayerHandlecmd42
	.type	 PlayerHandlecmd42,function
	.thumb_func
PlayerHandlecmd42:
	push	{lr}
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 PlayerHandlecmd42,.Lfe101-PlayerHandlecmd42
	.align	2, 0
	.globl	PlayerHandleEffectivenessSound
	.type	 PlayerHandleEffectivenessSound,function
	.thumb_func
PlayerHandleEffectivenessSound:
	push	{r4, lr}
	ldr	r4, .L1143
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L1141	@cond_branch
	mov	r3, #0xc0
.L1141:
	ldr	r2, .L1143+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L1144:
	.align	2, 0
.L1143:
	.word	gActiveBank
	.word	gBattleBufferA
.Lfe102:
	.size	 PlayerHandleEffectivenessSound,.Lfe102-PlayerHandleEffectivenessSound
	.align	2, 0
	.globl	PlayerHandlecmd44
	.type	 PlayerHandlecmd44,function
	.thumb_func
PlayerHandlecmd44:
	push	{lr}
	ldr	r2, .L1146
	ldr	r0, .L1146+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1147:
	.align	2, 0
.L1146:
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe103:
	.size	 PlayerHandlecmd44,.Lfe103-PlayerHandlecmd44
	.align	2, 0
	.globl	PlayerHandleFaintingCry
	.type	 PlayerHandleFaintingCry,function
	.thumb_func
PlayerHandleFaintingCry:
	push	{lr}
	ldr	r1, .L1149
	ldr	r0, .L1149+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1149+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	neg	r1, r1
	mov	r2, #0x5
	bl	PlayCry3
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1150:
	.align	2, 0
.L1149:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gPlayerParty
.Lfe104:
	.size	 PlayerHandleFaintingCry,.Lfe104-PlayerHandleFaintingCry
	.align	2, 0
	.globl	PlayerHandleIntroSlide
	.type	 PlayerHandleIntroSlide,function
	.thumb_func
PlayerHandleIntroSlide:
	push	{lr}
	ldr	r1, .L1152
	ldr	r0, .L1152+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_80E43C0
	ldr	r2, .L1152+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1153:
	.align	2, 0
.L1152:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gUnknown_02024DE8
.Lfe105:
	.size	 PlayerHandleIntroSlide,.Lfe105-PlayerHandleIntroSlide
	.align	2, 0
	.globl	PlayerHandleTrainerBallThrow
	.type	 PlayerHandleTrainerBallThrow,function
	.thumb_func
PlayerHandleTrainerBallThrow:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L1156
	ldr	r7, .L1156+0x4
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L1156+0x8
	add	r0, r0, r5
	bl	oamt_add_pos2_onto_pos1
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L1156+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L1156+0x10
	str	r1, [r0]
	ldrb	r2, [r7]
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x38]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L1156+0x14
	bl	StoreSpriteCallbackInData
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L1156+0x18
	bl	AllocSpritePalette
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r1, .L1156+0x1c
	ldr	r0, .L1156+0x20
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	lsr	r4, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L1156+0x24
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L1156+0x28
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r7]
	strh	r0, [r1, #0x8]
	ldrb	r3, [r7]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r2, .L1156+0x2c
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1155	@cond_branch
	ldr	r0, .L1156+0x30
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L1156+0x34
	str	r1, [r0]
.L1155:
	add	r2, r2, #0x30
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L1156+0x38
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1156+0x3c
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1157:
	.align	2, 0
.L1156:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	0xffd8
	.word	sub_8078B34
	.word	sub_8030E38
	.word	0xd6f8
	.word	gTrainerBackPicPaletteTable
	.word	gSaveBlock2
	.word	task05_08033660
	.word	gTasks
	.word	gSharedMem+0x17810
	.word	gUnknown_02024E68
	.word	sub_8044CA0
	.word	gBattleBankFunc
	.word	nullsub_91
.Lfe106:
	.size	 PlayerHandleTrainerBallThrow,.Lfe106-PlayerHandleTrainerBallThrow
	.align	2, 0
	.globl	sub_8030E38
	.type	 sub_8030E38,function
	.thumb_func
sub_8030E38:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r4, [r5, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r5, #0x5]
	lsr	r0, r0, #0x4
	bl	GetSpritePaletteTagByPaletteNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	DestroySprite
	ldr	r1, .L1159
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1159+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	BattleLoadPlayerMonSprite
	ldr	r0, .L1159+0x8
	add	r4, r4, r0
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1159+0xc
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1160:
	.align	2, 0
.L1159:
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gObjectBankIDs
	.word	gSprites
.Lfe107:
	.size	 sub_8030E38,.Lfe107-sub_8030E38
	.align	2, 0
	.globl	task05_08033660
	.type	 task05_08033660,function
	.thumb_func
task05_08033660:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L1167
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1e
	bgt	.L1162	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L1163
.L1168:
	.align	2, 0
.L1167:
	.word	gTasks
.L1162:
	ldr	r7, .L1169
	ldrb	r0, [r7]
	mov	r9, r0
	ldrh	r0, [r1, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1165	@cond_branch
	ldr	r0, .L1169+0x4
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1164	@cond_branch
.L1165:
	ldr	r0, .L1169+0x8
	ldrb	r1, [r7]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L1169+0xc
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_802F934
	b	.L1166
.L1170:
	.align	2, 0
.L1169:
	.word	gActiveBank
	.word	gBattleTypeFlags
	.word	gBattleBufferA
	.word	gBattlePartyID
.L1164:
	ldr	r4, .L1171
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r4, r4, #0x1
	add	r1, r1, r4
	ldr	r5, .L1171+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_802F934
	ldrb	r0, [r7]
	mov	r6, #0x2
	eor	r0, r0, r6
	strb	r0, [r7]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r1, r1, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L1171+0x8
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSprite
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_802F934
	ldrb	r0, [r7]
	eor	r0, r0, r6
	strb	r0, [r7]
.L1166:
	ldr	r1, .L1171+0xc
	ldr	r2, .L1171+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1171+0x14
	str	r1, [r0]
	mov	r3, r9
	strb	r3, [r2]
	mov	r0, r8
	bl	DestroyTask
.L1163:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1172:
	.align	2, 0
.L1171:
	.word	gBattleBufferA
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_802D500
.Lfe108:
	.size	 task05_08033660,.Lfe108-task05_08033660
	.align	2, 0
	.globl	PlayerHandlecmd48
	.type	 PlayerHandlecmd48,function
	.thumb_func
PlayerHandlecmd48:
	push	{r4, r5, r6, lr}
	ldr	r1, .L1177
	ldr	r0, .L1177+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1174	@cond_branch
	add	r0, r2, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1174	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1175
.L1178:
	.align	2, 0
.L1177:
	.word	gBattleBufferA
	.word	gActiveBank
.L1174:
	ldr	r5, .L1179
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r6, .L1179+0x4
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r5]
	lsl	r3, r0, #0x9
	ldr	r4, .L1179+0x8
	add	r1, r3, r4
	sub	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	sub	r4, r4, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	sub_8044804
	ldr	r2, .L1179+0xc
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r2, #0x0
	strb	r0, [r1]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strb	r2, [r0, #0x5]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1176	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L1176:
	ldr	r0, .L1179+0x10
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L1179+0x14
	str	r0, [r1]
.L1175:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1180:
	.align	2, 0
.L1179:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBufferA+0x4
	.word	gUnknown_02024E68
	.word	gBattleBankFunc
	.word	sub_8031064
.Lfe109:
	.size	 PlayerHandlecmd48,.Lfe109-PlayerHandlecmd48
	.align	2, 0
	.globl	sub_8031064
	.type	 sub_8031064,function
	.thumb_func
sub_8031064:
	push	{r4, lr}
	ldr	r4, .L1183
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r3, .L1183+0x4
	add	r0, r0, r3
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L1182	@cond_branch
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	bl	PlayerBufferExecCompleted
.L1182:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1184:
	.align	2, 0
.L1183:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe110:
	.size	 sub_8031064,.Lfe110-sub_8031064
	.align	2, 0
	.globl	PlayerHandlecmd49
	.type	 PlayerHandlecmd49,function
	.thumb_func
PlayerHandlecmd49:
	push	{lr}
	ldr	r0, .L1187
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, .L1187+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1186	@cond_branch
	ldr	r2, .L1187+0x8
	ldr	r0, .L1187+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1187+0x10
	str	r1, [r0]
.L1186:
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1188:
	.align	2, 0
.L1187:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gTasks
	.word	gUnknown_02024E68
	.word	sub_8044CA0
.Lfe111:
	.size	 PlayerHandlecmd49,.Lfe111-PlayerHandlecmd49
	.align	2, 0
	.globl	PlayerHandlecmd50
	.type	 PlayerHandlecmd50,function
	.thumb_func
PlayerHandlecmd50:
	push	{r4, lr}
	ldr	r4, .L1190
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	dp11b_obj_free
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	dp11b_obj_free
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L1191:
	.align	2, 0
.L1190:
	.word	gActiveBank
.Lfe112:
	.size	 PlayerHandlecmd50,.Lfe112-PlayerHandlecmd50
	.align	2, 0
	.globl	PlayerHandleSpriteInvisibility
	.type	 PlayerHandleSpriteInvisibility,function
	.thumb_func
PlayerHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L1194
	ldrb	r0, [r4]
	bl	AnimBankSpriteExists
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1193	@cond_branch
	ldr	r3, .L1194+0x4
	ldr	r0, .L1194+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L1194+0xc
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r1, [r1]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	sub_8031F88
.L1193:
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L1195:
	.align	2, 0
.L1194:
	.word	gActiveBank
	.word	gSprites
	.word	gObjectBankIDs
	.word	gBattleBufferA
.Lfe113:
	.size	 PlayerHandleSpriteInvisibility,.Lfe113-PlayerHandleSpriteInvisibility
	.align	2, 0
	.globl	PlayerHandleBattleAnimation
	.type	 PlayerHandleBattleAnimation,function
	.thumb_func
PlayerHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L1200
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1197	@cond_branch
	ldr	r5, .L1200+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	move_anim_start_t3
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1198	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1197
.L1201:
	.align	2, 0
.L1200:
	.word	gActiveBank
	.word	gBattleBufferA
.L1198:
	ldr	r0, .L1202
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L1202+0x4
	str	r0, [r1]
.L1197:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1203:
	.align	2, 0
.L1202:
	.word	gBattleBankFunc
	.word	sub_802E460
.Lfe114:
	.size	 PlayerHandleBattleAnimation,.Lfe114-PlayerHandleBattleAnimation
	.align	2, 0
	.globl	PlayerHandleLinkStandbyMsg
	.type	 PlayerHandleLinkStandbyMsg,function
	.thumb_func
PlayerHandleLinkStandbyMsg:
	push	{r4, lr}
	ldr	r1, .L1212
	ldr	r0, .L1212+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1207	@cond_branch
	cmp	r0, #0x1
	bgt	.L1211	@cond_branch
	cmp	r0, #0
	beq	.L1206	@cond_branch
	b	.L1205
.L1213:
	.align	2, 0
.L1212:
	.word	gBattleBufferA
	.word	gActiveBank
.L1211:
	cmp	r0, #0x2
	beq	.L1208	@cond_branch
	b	.L1205
.L1206:
	bl	b_link_standby_message
.L1207:
	ldr	r4, .L1214
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	dp11b_obj_free
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	dp11b_obj_free
	b	.L1205
.L1215:
	.align	2, 0
.L1214:
	.word	gActiveBank
.L1208:
	bl	b_link_standby_message
.L1205:
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 PlayerHandleLinkStandbyMsg,.Lfe115-PlayerHandleLinkStandbyMsg
	.align	2, 0
	.globl	PlayerHandleResetActionMoveSelection
	.type	 PlayerHandleResetActionMoveSelection,function
	.thumb_func
PlayerHandleResetActionMoveSelection:
	push	{r4, lr}
	ldr	r1, .L1225
	ldr	r4, .L1225+0x4
	ldrb	r3, [r4]
	lsl	r0, r3, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r2, [r0]
	cmp	r2, #0x1
	beq	.L1219	@cond_branch
	cmp	r2, #0x1
	bgt	.L1223	@cond_branch
	cmp	r2, #0
	beq	.L1218	@cond_branch
	b	.L1217
.L1226:
	.align	2, 0
.L1225:
	.word	gBattleBufferA
	.word	gActiveBank
.L1223:
	cmp	r2, #0x2
	beq	.L1220	@cond_branch
	b	.L1217
.L1218:
	ldr	r0, .L1227
	add	r0, r3, r0
	strb	r2, [r0]
	ldr	r1, .L1227+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	strb	r2, [r0]
	b	.L1217
.L1228:
	.align	2, 0
.L1227:
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
.L1219:
	ldr	r0, .L1229
	b	.L1224
.L1230:
	.align	2, 0
.L1229:
	.word	gActionSelectionCursor
.L1220:
	ldr	r0, .L1231
.L1224:
	add	r0, r3, r0
	mov	r1, #0x0
	strb	r1, [r0]
.L1217:
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L1232:
	.align	2, 0
.L1231:
	.word	gMoveSelectionCursor
.Lfe116:
	.size	 PlayerHandleResetActionMoveSelection,.Lfe116-PlayerHandleResetActionMoveSelection
	.align	2, 0
	.globl	PlayerHandlecmd55
	.type	 PlayerHandlecmd55,function
	.thumb_func
PlayerHandlecmd55:
	push	{r4, lr}
	ldr	r2, .L1234
	ldr	r1, .L1234+0x4
	ldr	r4, .L1234+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	PlayerBufferExecCompleted
	ldr	r1, .L1234+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1234+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1235:
	.align	2, 0
.L1234:
	.word	gBattleOutcome
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattleBankFunc
	.word	sub_802D18C
.Lfe117:
	.size	 PlayerHandlecmd55,.Lfe117-PlayerHandlecmd55
	.align	2, 0
	.globl	PlayerHandlecmd56
	.type	 PlayerHandlecmd56,function
	.thumb_func
PlayerHandlecmd56:
	bx	lr
.Lfe118:
	.size	 PlayerHandlecmd56,.Lfe118-PlayerHandlecmd56
.text
	.align	2, 0
