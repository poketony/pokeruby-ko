@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 gSubspriteTable_83931B8,object
	.size	 gSubspriteTable_83931B8,32
gSubspriteTable_83931B8:
	.short	0xfff0
	.short	0xfff0
	.byte	0xc
	.byte	0x80
	.space	2
	.short	0xfff0
	.short	0x30
	.byte	0xd
	.byte	0x84
	.space	2
	.short	0x30
	.short	0xfff0
	.byte	0xe
	.byte	0x86
	.space	2
	.short	0x30
	.short	0x30
	.byte	0x8
	.byte	0x88
	.space	2
	.align	2, 0
	.type	 gSubspriteTables_83931D8,object
gSubspriteTables_83931D8:
	.byte	0x4
	.space	3
	.word	gSubspriteTable_83931B8
	.size	 gSubspriteTables_83931D8,8
	.align	2, 0
	.type	 gSpriteTemplate_83931E0,object
	.size	 gSpriteTemplate_83931E0,24
gSpriteTemplate_83931E0:
	.short	0x271a
	.short	0x271a
	.word	gOamData_837E05C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gSpriteTemplate_83931F8,object
	.size	 gSpriteTemplate_83931F8,24
gSpriteTemplate_83931F8:
	.short	0x2798
	.short	0x2798
	.word	gOamData_837DF24
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_807B870
.text
	.align	2, 0
	.globl	unref_sub_807B69C
	.type	 unref_sub_807B69C,function
	.thumb_func
unref_sub_807B69C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L17
	add	r0, r4, r0
	ldrb	r6, [r0]
	ldr	r0, .L17+0x4
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L17+0x8
	bl	LoadCompressedObjectPic
	ldr	r0, .L17+0xc
	bl	LoadCompressedObjectPalette
	ldr	r1, .L17+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	strh	r4, [r1, #0x8]
	cmp	r5, #0
	beq	.L3	@cond_branch
	mov	r0, #0x1f
	strh	r0, [r1, #0xa]
	mov	r5, #0x0
	lsl	r0, r6, #0x4
	ldr	r7, .L17+0x14
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r6, r0, r7
.L7:
	mov	r0, #0x20
	ldrsh	r1, [r6, r0]
	ldrh	r2, [r6, #0x22]
	add	r2, r2, #0x20
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r0, .L17+0x18
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r3, r0, r7
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r1, r0, #0x4
	add	r0, r0, r1
	strh	r0, [r3, #0x2e]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	strh	r0, [r3, #0x30]
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	cmp	r5, #0x4
	bls	.L6	@cond_branch
	mov	r0, #0x15
	strh	r0, [r3, #0x3a]
.L6:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L7	@cond_branch
	b	.L10
.L18:
	.align	2, 0
.L17:
	.word	gObjectBankIDs
	.word	sub_807B7E0
	.word	gBattleAnimPicTable+0x440
	.word	gBattleAnimPaletteTable+0x440
	.word	gTasks
	.word	gSprites
	.word	gSpriteTemplate_83931F8
.L3:
	mov	r0, #0xf8
	lsl	r0, r0, #0x7
	strh	r0, [r1, #0xa]
	mov	r5, #0x0
	lsl	r0, r6, #0x4
	ldr	r7, .L19
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r6, r0, r7
.L14:
	mov	r2, #0x20
	ldrsh	r1, [r6, r2]
	ldrh	r2, [r6, #0x22]
	sub	r2, r2, #0x20
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r0, .L19+0x4
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r3, r0, r7
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r1, r0, #0x4
	add	r0, r0, r1
	strh	r0, [r3, #0x2e]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	cmp	r5, #0x4
	bls	.L13	@cond_branch
	mov	r0, #0x15
	strh	r0, [r3, #0x3a]
.L13:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L14	@cond_branch
.L10:
	ldr	r0, .L19
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
	mov	r0, r8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L20:
	.align	2, 0
.L19:
	.word	gSprites
	.word	gSpriteTemplate_83931F8
.Lfe1:
	.size	 unref_sub_807B69C,.Lfe1-unref_sub_807B69C
	.align	2, 0
	.type	 sub_807B7E0,function
	.thumb_func
sub_807B7E0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L29
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x2
	bne	.L22	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x10]
	ldrh	r3, [r4, #0xa]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r2, [r4, #0x12]
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L23	@cond_branch
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L28	@cond_branch
	mov	r0, #0x1
	eor	r0, r0, r2
	strh	r0, [r4, #0x12]
	b	.L28
.L30:
	.align	2, 0
.L29:
	.word	gTasks
.L23:
	ldrh	r1, [r4, #0x10]
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L28	@cond_branch
	strh	r1, [r4, #0x10]
	mov	r0, #0x1
	eor	r0, r0, r2
	strh	r0, [r4, #0x12]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L28	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	b	.L28
.L22:
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
.L28:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_807B7E0,.Lfe2-sub_807B7E0
	.align	2, 0
	.type	 sub_807B870,function
	.thumb_func
sub_807B870:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x3a]
	mov	r3, #0x3a
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L32	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r3]
	ldr	r1, .L34
	str	r1, [r2, #0x1c]
	add	r0, r2, #0
	bl	_call_via_r1
	b	.L33
.L35:
	.align	2, 0
.L34:
	.word	sub_807B8A4
.L32:
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x3a]
.L33:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_807B870,.Lfe3-sub_807B870
	.align	2, 0
	.type	 sub_807B8A4,function
	.thumb_func
sub_807B8A4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L37	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
	b	.L42
.L37:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
.L42:
	strb	r0, [r1]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x34
	bne	.L39	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L40	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndFreeResources
	b	.L39
.L40:
	add	r0, r4, #0
	bl	DestroySprite
.L39:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_807B8A4,.Lfe4-sub_807B8A4
	.align	2, 0
	.globl	sub_807B920
	.type	 sub_807B920,function
	.thumb_func
sub_807B920:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L45
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	ldr	r1, .L45+0x4
	add	r0, r0, r1
	lsr	r5, r0, #0x10
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	ldr	r2, .L45+0x8
	add	r0, r0, r2
	lsr	r4, r0, #0x10
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L44	@cond_branch
	lsl	r0, r5, #0x10
	ldr	r1, .L45+0xc
	add	r0, r0, r1
	lsr	r5, r0, #0x10
.L44:
	ldr	r1, .L45+0x10
	mov	r2, #0xfd
	lsl	r2, r2, #0x6
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L45+0x14
	lsl	r1, r5, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r4, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x4
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L45+0x18
	add	r0, r0, r1
	ldr	r1, .L45+0x1c
	bl	SetSubspriteTables
	ldr	r1, .L45+0x20
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x26]
	ldr	r1, .L45+0x24
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gBattleAnimBankTarget
	.word	0xffe00000
	.word	0xffdc0000
	.word	0xfffa0000
	.word	0x4000050
	.word	gSpriteTemplate_83931E0
	.word	gSprites
	.word	gSubspriteTables_83931D8
	.word	gTasks
	.word	sub_807B9D8
.Lfe5:
	.size	 sub_807B920,.Lfe5-sub_807B920
	.align	2, 0
	.type	 sub_807B9D8,function
	.thumb_func
sub_807B9D8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L50
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	add	r2, r0, #0
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L48	@cond_branch
	ldr	r0, .L50+0x4
	str	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	b	.L49
.L51:
	.align	2, 0
.L50:
	.word	gTasks
	.word	sub_807BA24
.L48:
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L52
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	strh	r1, [r2]
.L49:
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	0x4000052
.Lfe6:
	.size	 sub_807B9D8,.Lfe6-sub_807B9D8
	.align	2, 0
	.type	 sub_807BA24,function
	.thumb_func
sub_807BA24:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L59
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L59+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0xa]
	add	r1, r0, #0x1
	strh	r1, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xd
	ble	.L55	@cond_branch
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	mov	r6, #0x0
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L55	@cond_branch
	ldr	r3, .L59+0x8
	lsl	r2, r2, #0x4
	mov	ip, r2
	ldr	r1, .L59+0xc
	add	r1, r1, ip
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrh	r4, [r1]
	mov	r2, #0x87
	lsl	r2, r2, #0x1
	add	r2, r2, ip
	lsl	r2, r2, #0x1
	add	r2, r2, r3
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldr	r0, .L59+0x10
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r1, [r0]
	strh	r1, [r2]
	strh	r4, [r0]
	strh	r6, [r5, #0xc]
	ldrh	r0, [r5, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L55	@cond_branch
	strh	r6, [r5, #0xe]
	strh	r6, [r5, #0xa]
	ldrh	r0, [r5, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L55	@cond_branch
	mov	r0, #0x9
	strh	r0, [r5, #0xa]
	ldr	r0, .L59+0x14
	str	r0, [r5]
.L55:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	0x271a
	.word	gTasks
	.word	gPlttBufferFaded
	.word	0x10d
	.word	0x10f
	.word	sub_807BAD4
.Lfe7:
	.size	 sub_807BA24,.Lfe7-sub_807BA24
	.align	2, 0
	.type	 sub_807BAD4,function
	.thumb_func
sub_807BAD4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L64
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r1, r2
	ldrh	r0, [r2, #0xa]
	sub	r0, r0, #0x1
	add	r3, r0, #0
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L62	@cond_branch
	ldr	r0, .L64+0x4
	str	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	b	.L63
.L65:
	.align	2, 0
.L64:
	.word	gTasks
	.word	sub_807BB24
.L62:
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L66
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	strh	r1, [r2]
.L63:
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	0x4000052
.Lfe8:
	.size	 sub_807BAD4,.Lfe8-sub_807BAD4
	.align	2, 0
	.type	 sub_807BB24,function
	.thumb_func
sub_807BB24:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	ldr	r1, .L72
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x25
	bne	.L69	@cond_branch
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L72+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	b	.L70
.L73:
	.align	2, 0
.L72:
	.word	gTasks
	.word	gSprites
.L69:
	cmp	r0, #0x27
	bne	.L70	@cond_branch
	ldr	r0, .L74
	strh	r3, [r0]
	add	r0, r0, #0x2
	strh	r3, [r0]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L70:
	pop	{r4}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	0x4000050
.Lfe9:
	.size	 sub_807BB24,.Lfe9-sub_807BB24
	.align	2, 0
	.globl	sub_807BB88
	.type	 sub_807BB88,function
	.thumb_func
sub_807BB88:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r3, #0x0
	ldr	r0, .L121
	ldrh	r0, [r0]
	sub	r0, r0, #0xf
	cmp	r0, #0x2b
	bls	.LCB836
	b	.L110	@long jump
.LCB836:
	lsl	r0, r0, #0x2
	ldr	r1, .L121+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L122:
	.align	2, 0
.L121:
	.word	gSharedMem+0x17840
	.word	.L111
	.align	2, 0
	.align	2, 0
.L111:
	.word	.L78
	.word	.L79
	.word	.L80
	.word	.L81
	.word	.L82
	.word	.L83
	.word	.L84
	.word	.L85
	.word	.L86
	.word	.L87
	.word	.L88
	.word	.L89
	.word	.L90
	.word	.L91
	.word	.L110
	.word	.L110
	.word	.L110
	.word	.L110
	.word	.L110
	.word	.L110
	.word	.L110
	.word	.L110
	.word	.L110
	.word	.L110
	.word	.L92
	.word	.L93
	.word	.L94
	.word	.L95
	.word	.L96
	.word	.L97
	.word	.L98
	.word	.L99
	.word	.L100
	.word	.L101
	.word	.L102
	.word	.L103
	.word	.L104
	.word	.L105
	.word	.L110
	.word	.L110
	.word	.L106
	.word	.L107
	.word	.L108
	.word	.L109
.L78:
	mov	r5, #0x0
	mov	r2, #0x0
	b	.L77
.L79:
	mov	r5, #0x0
	mov	r2, #0x1
	b	.L77
.L80:
	mov	r5, #0x0
	mov	r2, #0x3
	b	.L77
.L81:
	mov	r5, #0x0
	mov	r2, #0x5
	b	.L77
.L82:
	mov	r5, #0x0
	mov	r2, #0x6
	b	.L77
.L83:
	mov	r5, #0x0
	mov	r2, #0x2
	b	.L77
.L84:
	mov	r5, #0x0
	mov	r2, #0x4
	b	.L77
.L85:
	mov	r5, #0x1
	mov	r2, #0x0
	b	.L77
.L86:
	mov	r5, #0x1
	mov	r2, #0x1
	b	.L77
.L87:
	mov	r5, #0x1
	mov	r2, #0x3
	b	.L77
.L88:
	mov	r5, #0x1
	mov	r2, #0x5
	b	.L77
.L89:
	mov	r5, #0x1
	mov	r2, #0x6
	b	.L77
.L90:
	mov	r5, #0x1
	mov	r2, #0x2
	b	.L77
.L91:
	mov	r5, #0x1
	mov	r2, #0x4
	b	.L77
.L92:
	mov	r5, #0x0
	b	.L112
.L93:
	mov	r5, #0x0
	b	.L113
.L94:
	mov	r5, #0x0
	b	.L114
.L95:
	mov	r5, #0x0
	b	.L115
.L96:
	mov	r5, #0x0
	b	.L116
.L97:
	mov	r5, #0x0
	b	.L117
.L98:
	mov	r5, #0x0
	b	.L118
.L99:
	mov	r5, #0x1
.L112:
	mov	r2, #0x0
	mov	r3, #0x1
	b	.L77
.L100:
	mov	r5, #0x1
.L113:
	mov	r2, #0x1
	mov	r3, #0x1
	b	.L77
.L101:
	mov	r5, #0x1
.L114:
	mov	r2, #0x3
	mov	r3, #0x1
	b	.L77
.L102:
	mov	r5, #0x1
.L115:
	mov	r2, #0x5
	mov	r3, #0x1
	b	.L77
.L103:
	mov	r5, #0x1
.L116:
	mov	r2, #0x6
	mov	r3, #0x1
	b	.L77
.L104:
	mov	r5, #0x1
.L117:
	mov	r2, #0x2
	mov	r3, #0x1
	b	.L77
.L105:
	mov	r5, #0x1
.L118:
	mov	r2, #0x4
	mov	r3, #0x1
	b	.L77
.L106:
	mov	r5, #0x0
	b	.L119
.L107:
	mov	r5, #0x0
	b	.L120
.L108:
	mov	r5, #0x1
.L119:
	mov	r2, #0xff
	mov	r3, #0x0
	b	.L77
.L109:
	mov	r5, #0x1
.L120:
	mov	r2, #0xff
	mov	r3, #0x1
	b	.L77
.L110:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L76
.L77:
	ldr	r0, .L123
	mov	r1, #0x0
	strh	r5, [r0]
	strh	r2, [r0, #0x2]
	strh	r1, [r0, #0x4]
	strh	r1, [r0, #0x6]
	strh	r3, [r0, #0x8]
	ldr	r1, .L123+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L123+0x8
	str	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
.L76:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	sub_80E32E0
.Lfe10:
	.size	 sub_807BB88,.Lfe10-sub_807BB88
	.align	2, 0
	.globl	move_anim_start_t2
	.type	 move_anim_start_t2,function
	.thumb_func
move_anim_start_t2:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L126
	strb	r4, [r0]
	ldr	r0, .L126+0x4
	strb	r4, [r0]
	ldr	r0, .L126+0x8
	mov	r2, #0x0
	bl	DoMoveAnim
	ldr	r0, .L126+0xc
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L126+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L127:
	.align	2, 0
.L126:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
	.word	gBattleAnims_StatusConditions
	.word	sub_807BDAC
	.word	gTasks
.Lfe11:
	.size	 move_anim_start_t2,.Lfe11-move_anim_start_t2
	.align	2, 0
	.type	 sub_807BDAC,function
	.thumb_func
sub_807BDAC:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L130
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L130+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L129	@cond_branch
	ldr	r1, .L130+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L130+0xc
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L129:
	pop	{r4}
	pop	{r0}
	bx	r0
.L131:
	.align	2, 0
.L130:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gTasks
	.word	gSharedMem+0x17810
.Lfe12:
	.size	 sub_807BDAC,.Lfe12-sub_807BDAC
.text
	.align	2, 0
