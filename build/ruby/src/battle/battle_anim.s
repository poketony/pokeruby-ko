@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBattleAnimScriptPtr
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gBattleAnimScriptPtr,object
	.size	 gBattleAnimScriptPtr,4
gBattleAnimScriptPtr:
	.word	0x0
	.globl	gBattleAnimScriptRetAddr
	.align	2, 0
	.type	 gBattleAnimScriptRetAddr,object
	.size	 gBattleAnimScriptRetAddr,4
gBattleAnimScriptRetAddr:
	.word	0x0
	.globl	gAnimScriptCallback
	.align	2, 0
	.type	 gAnimScriptCallback,object
	.size	 gAnimScriptCallback,4
gAnimScriptCallback:
	.word	0x0
	.globl	gAnimFramesToWait
	.type	 gAnimFramesToWait,object
	.size	 gAnimFramesToWait,1
gAnimFramesToWait:
	.byte	0x0
	.globl	gAnimScriptActive
	.type	 gAnimScriptActive,object
	.size	 gAnimScriptActive,1
gAnimScriptActive:
	.byte	0x0
	.globl	gAnimVisualTaskCount
	.type	 gAnimVisualTaskCount,object
	.size	 gAnimVisualTaskCount,1
gAnimVisualTaskCount:
	.byte	0x0
	.globl	gAnimSoundTaskCount
	.type	 gAnimSoundTaskCount,object
	.size	 gAnimSoundTaskCount,1
gAnimSoundTaskCount:
	.byte	0x0
	.globl	gDisableStructMoveAnim
	.align	2, 0
	.type	 gDisableStructMoveAnim,object
	.size	 gDisableStructMoveAnim,4
gDisableStructMoveAnim:
	.word	0x0
	.globl	gMoveDmgMoveAnim
	.align	2, 0
	.type	 gMoveDmgMoveAnim,object
	.size	 gMoveDmgMoveAnim,4
gMoveDmgMoveAnim:
	.word	0x0
	.globl	gMovePowerMoveAnim
	.align	1, 0
	.type	 gMovePowerMoveAnim,object
	.size	 gMovePowerMoveAnim,2
gMovePowerMoveAnim:
	.short	0x0
	.globl	gHappinessMoveAnim
	.type	 gHappinessMoveAnim,object
	.size	 gHappinessMoveAnim,1
gHappinessMoveAnim:
	.byte	0x0
	.globl	gWeatherMoveAnim
	.align	1, 0
	.type	 gWeatherMoveAnim,object
	.size	 gWeatherMoveAnim,2
gWeatherMoveAnim:
	.short	0x0
	.globl	gMonAnimTaskIdArray
	.type	 gMonAnimTaskIdArray,object
	.size	 gMonAnimTaskIdArray,2
gMonAnimTaskIdArray:
	.byte	0x0
	.space	1
	.globl	gUnknown_0202F7C4
	.type	 gUnknown_0202F7C4,object
	.size	 gUnknown_0202F7C4,1
gUnknown_0202F7C4:
	.byte	0x0
	.globl	gUnknown_0202F7C5
	.type	 gUnknown_0202F7C5,object
	.size	 gUnknown_0202F7C5,1
gUnknown_0202F7C5:
	.byte	0x0
	.globl	gAnimMoveIndex
	.align	1, 0
	.type	 gAnimMoveIndex,object
	.size	 gAnimMoveIndex,2
gAnimMoveIndex:
	.short	0x0
	.globl	gBattleAnimBankAttacker
	.type	 gBattleAnimBankAttacker,object
	.size	 gBattleAnimBankAttacker,1
gBattleAnimBankAttacker:
	.byte	0x0
	.globl	gBattleAnimBankTarget
	.type	 gBattleAnimBankTarget,object
	.size	 gBattleAnimBankTarget,1
gBattleAnimBankTarget:
	.byte	0x0
	.globl	gUnknown_0202F7CA
	.align	1, 0
	.type	 gUnknown_0202F7CA,object
	.size	 gUnknown_0202F7CA,8
gUnknown_0202F7CA:
	.short	0x0
	.space	6
	.globl	gUnknown_0202F7D2
	.type	 gUnknown_0202F7D2,object
	.size	 gUnknown_0202F7D2,1
gUnknown_0202F7D2:
	.byte	0x0
	.section .rodata
	.align	2, 0
	.type	 sScriptCmdTable,object
sScriptCmdTable:
	.word	ScriptCmd_loadsprite
	.word	ScriptCmd_unloadsprite
	.word	ScriptCmd_sprite
	.word	ScriptCmd_createtask
	.word	ScriptCmd_delay
	.word	ScriptCmd_waitforvisualfinish
	.word	ScriptCmd_hang1
	.word	ScriptCmd_hang2
	.word	ScriptCmd_end
	.word	ScriptCmd_playse
	.word	ScriptCmd_monbg
	.word	ScriptCmd_clearmonbg
	.word	ScriptCmd_setalpha
	.word	ScriptCmd_blendoff
	.word	ScriptCmd_call
	.word	ScriptCmd_return
	.word	ScriptCmd_setvar
	.word	ScriptCmd_ifelse
	.word	ScriptCmd_jumpif
	.word	ScriptCmd_jump
	.word	ScriptCmd_fadetobg
	.word	ScriptCmd_restorebg
	.word	ScriptCmd_waitbgfadeout
	.word	ScriptCmd_waitbgfadein
	.word	ScriptCmd_changebg
	.word	ScriptCmd_panse_19
	.word	ScriptCmd_setpan
	.word	ScriptCmd_panse_1B
	.word	ScriptCmd_panse_1C
	.word	ScriptCmd_panse_1D
	.word	ScriptCmd_setbldcnt
	.word	ScriptCmd_createtask_1F
	.word	ScriptCmd_waitsound
	.word	ScriptCmd_jumpvareq
	.word	ScriptCmd_monbg_22
	.word	ScriptCmd_clearmonbg_23
	.word	ScriptCmd_jumpunkcond
	.word	ScriptCmd_fadetobg_25
	.word	ScriptCmd_panse_26
	.word	ScriptCmd_panse_27
	.word	ScriptCmd_monbgprio_28
	.word	ScriptCmd_monbgprio_29
	.word	ScriptCmd_monbgprio_2A
	.word	ScriptCmd_invisible
	.word	ScriptCmd_visible
	.word	ScriptCmd_doublebattle_2D
	.word	ScriptCmd_doublebattle_2E
	.word	ScriptCmd_stopsound
	.size	 sScriptCmdTable,192
.text
	.align	2, 0
	.globl	battle_anim_clear_some_data
	.type	 battle_anim_clear_some_data,function
	.thumb_func
battle_anim_clear_some_data:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L13
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L13+0x4
	strb	r1, [r0]
	ldr	r0, .L13+0x8
	strb	r1, [r0]
	ldr	r0, .L13+0xc
	strb	r1, [r0]
	ldr	r0, .L13+0x10
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L13+0x14
	str	r1, [r0]
	ldr	r0, .L13+0x18
	mov	r2, #0x0
	strh	r1, [r0]
	ldr	r0, .L13+0x1c
	strb	r2, [r0]
	ldr	r4, .L13+0x20
	ldr	r5, .L13+0x24
	ldr	r6, .L13+0x28
	ldr	r7, .L13+0x2c
	ldr	r0, .L13+0x30
	mov	ip, r0
	ldr	r1, .L13+0x34
	mov	r8, r1
	ldr	r0, .L13+0x38
	mov	r9, r0
	ldr	r1, .L13+0x3c
	add	r3, r1, #0
	ldr	r1, .L13+0x40
	mov	r2, #0x7
.L6:
	ldrh	r0, [r1]
	orr	r0, r0, r3
	strh	r0, [r1]
	add	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L6	@cond_branch
	ldr	r1, .L13+0x44
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0xe
.L11:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L11	@cond_branch
	mov	r1, #0x0
	mov	r0, #0xff
	strb	r0, [r4]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r4, #0x1]
	strb	r1, [r5]
	strb	r1, [r6]
	mov	r0, #0x0
	strh	r1, [r7]
	mov	r1, ip
	strb	r0, [r1]
	mov	r1, r8
	strb	r0, [r1]
	mov	r1, r9
	strb	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gAnimFramesToWait
	.word	gAnimScriptActive
	.word	gAnimVisualTaskCount
	.word	gAnimSoundTaskCount
	.word	gDisableStructMoveAnim
	.word	gMoveDmgMoveAnim
	.word	gMovePowerMoveAnim
	.word	gHappinessMoveAnim
	.word	gMonAnimTaskIdArray
	.word	gUnknown_0202F7C4
	.word	gUnknown_0202F7C5
	.word	gAnimMoveIndex
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
	.word	gUnknown_0202F7D2
	.word	0xffff
	.word	gAnimSpriteIndexArray
	.word	gBattleAnimArgs
.Lfe1:
	.size	 battle_anim_clear_some_data,.Lfe1-battle_anim_clear_some_data
	.align	2, 0
	.globl	ExecuteMoveAnim
	.type	 ExecuteMoveAnim,function
	.thumb_func
ExecuteMoveAnim:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L16
	ldr	r0, .L16+0x4
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r2, .L16+0x8
	ldr	r0, .L16+0xc
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L16+0x10
	mov	r2, #0x1
	bl	DoMoveAnim
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gBattleAnimBankAttacker
	.word	gBankAttacker
	.word	gBattleAnimBankTarget
	.word	gBankTarget
	.word	gBattleAnims_Moves
.Lfe2:
	.size	 ExecuteMoveAnim,.Lfe2-ExecuteMoveAnim
	.align	2, 0
	.globl	DoMoveAnim
	.type	 DoMoveAnim,function
	.thumb_func
DoMoveAnim:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	str	r0, [sp]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L19	@cond_branch
	bl	sub_8079E24
	mov	r0, #0x0
	bl	sub_8043EB4
	mov	r4, #0x0
	mov	r0, r8
	lsl	r0, r0, #0x2
	mov	sl, r0
	ldr	r6, .L53
	mov	r7, #0x64
	ldr	r5, .L53+0x4
.L23:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldrh	r0, [r6]
	mul	r0, r0, r7
	ldr	r1, .L53+0x8
	b	.L52
.L54:
	.align	2, 0
.L53:
	.word	gBattlePartyID
	.word	gUnknown_0202F7CA
	.word	gEnemyParty
.L24:
	ldrh	r0, [r6]
	mul	r0, r0, r7
	ldr	r1, .L55
.L52:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	strh	r0, [r5]
	add	r6, r6, #0x2
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L23	@cond_branch
	ldr	r3, .L55+0x4
	ldr	r5, .L55+0x8
	ldr	r1, .L55+0xc
	mov	ip, r1
	ldr	r7, .L55+0x10
	ldr	r6, .L55+0x14
	b	.L27
.L56:
	.align	2, 0
.L55:
	.word	gPlayerParty
	.word	gAnimMoveIndex
	.word	gMonAnimTaskIdArray
	.word	gAnimScriptActive
	.word	gAnimScriptCallback
	.word	RunAnimScriptCommand
.L19:
	ldr	r3, .L57
	ldr	r5, .L57+0x4
	mov	r0, r8
	lsl	r0, r0, #0x2
	mov	sl, r0
	ldr	r1, .L57+0x8
	mov	ip, r1
	ldr	r7, .L57+0xc
	ldr	r6, .L57+0x10
	ldr	r2, .L57+0x14
	ldr	r1, .L57+0x18
	mov	r4, #0x3
.L31:
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L31	@cond_branch
.L27:
	mov	r0, r9
	cmp	r0, #0
	bne	.L33	@cond_branch
	strh	r0, [r3]
	b	.L34
.L58:
	.align	2, 0
.L57:
	.word	gAnimMoveIndex
	.word	gMonAnimTaskIdArray
	.word	gAnimScriptActive
	.word	gAnimScriptCallback
	.word	RunAnimScriptCommand
	.word	gSharedMem+0x19348
	.word	gUnknown_0202F7CA
.L33:
	mov	r1, r8
	strh	r1, [r3]
.L34:
	ldr	r1, .L59
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0xe
.L38:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L38	@cond_branch
	mov	r0, #0xff
	strb	r0, [r5]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r5, #0x1]
	ldr	r0, [sp]
	add	r0, r0, sl
	ldr	r0, [r0]
	ldr	r1, .L59+0x4
	str	r0, [r1]
	mov	r0, #0x1
	mov	r1, ip
	strb	r0, [r1]
	mov	r0, #0x0
	ldr	r1, .L59+0x8
	strb	r0, [r1]
	str	r6, [r7]
	ldr	r0, .L59+0xc
	add	r2, r0, #0
	ldr	r1, .L59+0x10
	mov	r4, #0x7
.L43:
	ldrh	r0, [r1]
	orr	r0, r0, r2
	strh	r0, [r1]
	add	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L43	@cond_branch
	mov	r1, r9
	cmp	r1, #0
	beq	.L45	@cond_branch
	mov	r4, #0x0
	ldr	r2, .L59+0x14
	b	.L46
.L60:
	.align	2, 0
.L59:
	.word	gBattleAnimArgs
	.word	gBattleAnimScriptPtr
	.word	gAnimFramesToWait
	.word	0xffff
	.word	gAnimSpriteIndexArray
	.word	gUnknown_081C7160
.L48:
	add	r4, r4, #0x1
.L46:
	lsl	r0, r4, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldr	r1, .L61
	cmp	r0, r1
	beq	.L45	@cond_branch
	cmp	r8, r0
	bne	.L48	@cond_branch
	ldr	r0, .L61+0x4
	mov	r2, #0x80
	bl	m4aMPlayVolumeControl
.L45:
	ldr	r0, .L61+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L61+0xc
	strh	r1, [r0]
	ldr	r0, .L61+0x10
	strh	r1, [r0]
	ldr	r0, .L61+0x14
	strh	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	0xffff
	.word	gMPlay_BGM
	.word	gUnknown_030042C4
	.word	gUnknown_03004240
	.word	gUnknown_03004200
	.word	gUnknown_03004244
.Lfe3:
	.size	 DoMoveAnim,.Lfe3-DoMoveAnim
	.align	2, 0
	.globl	move_anim_8072740
	.type	 move_anim_8072740,function
	.thumb_func
move_anim_8072740:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	ldr	r1, .L64
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L65:
	.align	2, 0
.L64:
	.word	gAnimVisualTaskCount
.Lfe4:
	.size	 move_anim_8072740,.Lfe4-move_anim_8072740
	.align	2, 0
	.globl	DestroyAnimVisualTask
	.type	 DestroyAnimVisualTask,function
	.thumb_func
DestroyAnimVisualTask:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	ldr	r1, .L67
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gAnimVisualTaskCount
.Lfe5:
	.size	 DestroyAnimVisualTask,.Lfe5-DestroyAnimVisualTask
	.align	2, 0
	.globl	DestroyAnimSoundTask
	.type	 DestroyAnimSoundTask,function
	.thumb_func
DestroyAnimSoundTask:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	ldr	r1, .L70
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gAnimSoundTaskCount
.Lfe6:
	.size	 DestroyAnimSoundTask,.Lfe6-DestroyAnimSoundTask
	.align	2, 0
	.type	 AddSpriteIndex,function
	.thumb_func
AddSpriteIndex:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r4, .L79
	ldr	r1, .L79+0x4
.L76:
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L75	@cond_branch
	strh	r3, [r1]
	b	.L72
.L80:
	.align	2, 0
.L79:
	.word	0xffff
	.word	gAnimSpriteIndexArray
.L75:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L76	@cond_branch
.L72:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 AddSpriteIndex,.Lfe7-AddSpriteIndex
	.align	2, 0
	.type	 ClearSpriteIndex,function
	.thumb_func
ClearSpriteIndex:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r0, .L88
	add	r4, r0, #0
	ldr	r1, .L88+0x4
.L85:
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L84	@cond_branch
	orr	r0, r0, r4
	strh	r0, [r1]
	b	.L81
.L89:
	.align	2, 0
.L88:
	.word	0xffff
	.word	gAnimSpriteIndexArray
.L84:
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L85	@cond_branch
.L81:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 ClearSpriteIndex,.Lfe8-ClearSpriteIndex
	.align	2, 0
	.type	 WaitAnimFrameCount,function
	.thumb_func
WaitAnimFrameCount:
	push	{lr}
	ldr	r2, .L94
	ldrb	r1, [r2]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0
	bgt	.L91	@cond_branch
	ldr	r0, .L94+0x4
	ldr	r1, .L94+0x8
	str	r1, [r0]
	mov	r0, #0x0
	b	.L93
.L95:
	.align	2, 0
.L94:
	.word	gAnimFramesToWait
	.word	gAnimScriptCallback
	.word	RunAnimScriptCommand
.L91:
	sub	r0, r1, #0x1
.L93:
	strb	r0, [r2]
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 WaitAnimFrameCount,.Lfe9-WaitAnimFrameCount
	.align	2, 0
	.type	 RunAnimScriptCommand,function
	.thumb_func
RunAnimScriptCommand:
	push	{r4, lr}
	ldr	r4, .L103
.L97:
	ldr	r0, .L103+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L103+0x8
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L98	@cond_branch
	ldr	r0, .L103+0xc
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L97	@cond_branch
.L98:
	pop	{r4}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	sScriptCmdTable
	.word	gBattleAnimScriptPtr
	.word	gAnimFramesToWait
	.word	gAnimScriptActive
.Lfe10:
	.size	 RunAnimScriptCommand,.Lfe10-RunAnimScriptCommand
	.align	2, 0
	.type	 ScriptCmd_loadsprite,function
	.thumb_func
ScriptCmd_loadsprite:
	push	{r4, r5, r6, lr}
	ldr	r6, .L106
	ldr	r0, [r6]
	add	r1, r0, #0x1
	str	r1, [r6]
	ldrb	r4, [r0, #0x1]
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	lsl	r5, r4, #0x3
	ldr	r0, .L106+0x4
	add	r0, r5, r0
	bl	LoadCompressedObjectPic
	ldr	r0, .L106+0x8
	add	r5, r5, r0
	add	r0, r5, #0
	bl	LoadCompressedObjectPalette
	ldr	r0, [r6]
	add	r0, r0, #0x2
	str	r0, [r6]
	ldr	r0, .L106+0xc
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r4, #0
	bl	AddSpriteIndex
	ldr	r1, .L106+0x10
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L106+0x14
	ldr	r0, .L106+0x18
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimPicTable+0xfffec780
	.word	gBattleAnimPaletteTable+0xfffec780
	.word	0xffffd8f0
	.word	gAnimFramesToWait
	.word	gAnimScriptCallback
	.word	WaitAnimFrameCount
.Lfe11:
	.size	 ScriptCmd_loadsprite,.Lfe11-ScriptCmd_loadsprite
	.align	2, 0
	.type	 ScriptCmd_unloadsprite,function
	.thumb_func
ScriptCmd_unloadsprite:
	push	{r4, r5, r6, lr}
	ldr	r6, .L109
	ldr	r0, [r6]
	add	r1, r0, #0x1
	str	r1, [r6]
	ldrb	r4, [r0, #0x1]
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r1, .L109+0x4
	ldr	r0, .L109+0x8
	add	r4, r4, r0
	lsl	r0, r4, #0x3
	add	r0, r0, r1
	ldrh	r5, [r0, #0x6]
	add	r0, r5, #0
	bl	FreeSpriteTilesByTag
	add	r0, r5, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, [r6]
	add	r0, r0, #0x2
	str	r0, [r6]
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r4, #0
	bl	ClearSpriteIndex
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L110:
	.align	2, 0
.L109:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimPicTable
	.word	0xffffd8f0
.Lfe12:
	.size	 ScriptCmd_unloadsprite,.Lfe12-ScriptCmd_unloadsprite
	.align	2, 0
	.type	 ScriptCmd_sprite,function
	.thumb_func
ScriptCmd_sprite:
	.syntax unified
    push {r4-r7,lr}
    ldr r5, _08075B2C @ =gBattleAnimScriptPtr
    ldr r1, [r5]
    adds r3, r1, 0x1
    str r3, [r5]
    ldrb r2, [r1, 0x1]
    ldrb r0, [r3, 0x1]
    lsls r0, 8
    adds r2, r0
    ldrb r0, [r3, 0x2]
    lsls r0, 16
    adds r2, r0
    ldrb r0, [r3, 0x3]
    lsls r0, 24
    adds r7, r2, r0
    adds r0, r1, 0x5
    str r0, [r5]
    ldrb r4, [r1, 0x5]
    adds r0, r1, 0x6
    str r0, [r5]
    ldrb r0, [r1, 0x6]
    adds r1, 0x7
    str r1, [r5]
    cmp r0, 0
    beq _08075B14
    adds r6, r5, 0
    ldr r5, _08075B30 @ =gBattleAnimArgs
    adds r3, r0, 0
_08075AFC:
    ldr r2, [r6]
    ldrb r1, [r2]
    ldrb r0, [r2, 0x1]
    lsls r0, 8
    orrs r1, r0
    strh r1, [r5]
    adds r2, 0x2
    str r2, [r6]
    adds r5, 0x2
    subs r3, 0x1
    cmp r3, 0
    bne _08075AFC
_08075B14:
    movs r0, 0x80
    ands r0, r4
    cmp r0, 0
    beq _08075B44
    movs r0, 0x80
    eors r4, r0
    cmp r4, 0x3F
    bls _08075B34
    adds r0, r4, 0
    subs r0, 0x40
    b _08075B36
    .align 2, 0
_08075B2C: .4byte gBattleAnimScriptPtr
_08075B30: .4byte gBattleAnimArgs
_08075B34:
    negs r0, r4
_08075B36:
    lsls r0, 24
    lsrs r4, r0, 24
    ldr r0, _08075B40 @ =gBattleAnimBankTarget
    b _08075B56
    .align 2, 0
_08075B40: .4byte gBattleAnimBankTarget
_08075B44:
    cmp r4, 0x3F
    bls _08075B4E
    adds r0, r4, 0
    subs r0, 0x40
    b _08075B50
_08075B4E:
    negs r0, r4
_08075B50:
    lsls r0, 24
    lsrs r4, r0, 24
    ldr r0, _08075BAC @ =gBattleAnimBankAttacker
_08075B56:
    ldrb r0, [r0]
    bl sub_8079E90
    lsls r0, 24
    lsrs r0, 24
    lsls r1, r4, 24
    asrs r1, 24
    adds r0, r1
    lsls r0, 16
    lsrs r6, r0, 16
    lsls r0, r6, 16
    asrs r0, 16
    cmp r0, 0x2
    bgt _08075B74
    movs r6, 0x3
_08075B74:
    ldr r5, _08075BB0 @ =gBattleAnimBankTarget
    ldrb r0, [r5]
    movs r1, 0x2
    bl sub_8077ABC
    adds r4, r0, 0
    lsls r4, 24
    lsrs r4, 24
    ldrb r0, [r5]
    movs r1, 0x3
    bl sub_8077ABC
    adds r2, r0, 0
    lsls r2, 24
    lsrs r2, 24
    lsls r3, r6, 24
    lsrs r3, 24
    adds r0, r7, 0
    adds r1, r4, 0
    bl CreateSpriteAndAnimate
    ldr r1, _08075BB4 @ =gAnimVisualTaskCount
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08075BAC: .4byte gBattleAnimBankAttacker
_08075BB0: .4byte gBattleAnimBankTarget
_08075BB4: .4byte gAnimVisualTaskCount
    .syntax divided

	.code	16
.Lfe13:
	.size	 ScriptCmd_sprite,.Lfe13-ScriptCmd_sprite
	.align	2, 0
	.type	 ScriptCmd_createtask,function
	.thumb_func
ScriptCmd_createtask:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L118
	ldr	r1, [r4]
	add	r3, r1, #0x1
	str	r3, [r4]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	add	r0, r1, #0x5
	str	r0, [r4]
	ldrb	r7, [r1, #0x5]
	add	r0, r1, #0x6
	str	r0, [r4]
	ldrb	r0, [r1, #0x6]
	add	r1, r1, #0x7
	str	r1, [r4]
	cmp	r0, #0
	beq	.L114	@cond_branch
	add	r5, r4, #0
	ldr	r4, .L118+0x4
	add	r3, r0, #0
.L116:
	ldr	r2, [r5]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r4]
	add	r2, r2, #0x2
	str	r2, [r5]
	add	r4, r4, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L116	@cond_branch
.L114:
	add	r0, r6, #0
	add	r1, r7, #0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	_call_via_r6
	ldr	r1, .L118+0x8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimArgs
	.word	gAnimVisualTaskCount
.Lfe14:
	.size	 ScriptCmd_createtask,.Lfe14-ScriptCmd_createtask
	.align	2, 0
	.type	 ScriptCmd_delay,function
	.thumb_func
ScriptCmd_delay:
	push	{r4, lr}
	ldr	r1, .L122
	ldr	r0, [r1]
	add	r2, r0, #0x1
	str	r2, [r1]
	ldr	r3, .L122+0x4
	ldrb	r0, [r0, #0x1]
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L121	@cond_branch
	mov	r4, #0x1
	neg	r4, r4
	add	r0, r4, #0
	strb	r0, [r3]
.L121:
	add	r0, r2, #0x1
	str	r0, [r1]
	ldr	r1, .L122+0x8
	ldr	r0, .L122+0xc
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gBattleAnimScriptPtr
	.word	gAnimFramesToWait
	.word	gAnimScriptCallback
	.word	WaitAnimFrameCount
.Lfe15:
	.size	 ScriptCmd_delay,.Lfe15-ScriptCmd_delay
	.align	2, 0
	.type	 ScriptCmd_waitforvisualfinish,function
	.thumb_func
ScriptCmd_waitforvisualfinish:
	push	{lr}
	ldr	r0, .L127
	ldrb	r2, [r0]
	cmp	r2, #0
	bne	.L125	@cond_branch
	ldr	r0, .L127+0x4
	ldr	r1, [r0]
	add	r1, r1, #0x1
	str	r1, [r0]
	ldr	r0, .L127+0x8
	strb	r2, [r0]
	b	.L126
.L128:
	.align	2, 0
.L127:
	.word	gAnimVisualTaskCount
	.word	gBattleAnimScriptPtr
	.word	gAnimFramesToWait
.L125:
	ldr	r1, .L129
	mov	r0, #0x1
	strb	r0, [r1]
.L126:
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gAnimFramesToWait
.Lfe16:
	.size	 ScriptCmd_waitforvisualfinish,.Lfe16-ScriptCmd_waitforvisualfinish
	.align	2, 0
	.type	 ScriptCmd_hang1,function
	.thumb_func
ScriptCmd_hang1:
	bx	lr
.Lfe17:
	.size	 ScriptCmd_hang1,.Lfe17-ScriptCmd_hang1
	.align	2, 0
	.type	 ScriptCmd_hang2,function
	.thumb_func
ScriptCmd_hang2:
	bx	lr
.Lfe18:
	.size	 ScriptCmd_hang2,.Lfe18-ScriptCmd_hang2
	.align	2, 0
	.type	 ScriptCmd_end,function
	.thumb_func
ScriptCmd_end:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L148
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L135	@cond_branch
	ldr	r0, .L148+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L135	@cond_branch
	ldr	r1, .L148+0x8
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L135	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0xff
	beq	.L134	@cond_branch
.L135:
	ldr	r1, .L148+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L147
.L149:
	.align	2, 0
.L148:
	.word	gAnimVisualTaskCount
	.word	gAnimSoundTaskCount
	.word	gMonAnimTaskIdArray
	.word	gSoundAnimFramesToWait
.L134:
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L136	@cond_branch
	ldr	r1, .L150
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5a
	bhi	.L137	@cond_branch
.L147:
	ldr	r1, .L150+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L133
.L151:
	.align	2, 0
.L150:
	.word	gSoundAnimFramesToWait
	.word	gAnimFramesToWait
.L137:
	ldr	r0, .L152
	bl	m4aMPlayStop
	ldr	r0, .L152+0x4
	bl	m4aMPlayStop
.L136:
	ldr	r1, .L152+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r5, #0x0
	ldr	r7, .L152+0xc
	ldr	r6, .L152+0x10
	ldr	r4, .L152+0x14
.L142:
	ldrh	r0, [r4]
	cmp	r0, r7
	beq	.L141	@cond_branch
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrh	r0, [r0, #0x6]
	bl	FreeSpriteTilesByTag
	ldrh	r0, [r4]
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	ldrh	r0, [r0, #0x6]
	bl	FreeSpritePaletteByTag
	ldrh	r1, [r4]
	add	r0, r7, #0
	orr	r0, r0, r1
	strh	r0, [r4]
.L141:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L142	@cond_branch
	mov	r1, r8
	cmp	r1, #0
	bne	.L133	@cond_branch
	ldr	r0, .L152+0x18
	ldr	r1, .L152+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L146	@cond_branch
	bl	sub_8079E24
	mov	r0, #0x1
	bl	sub_8043EB4
.L146:
	ldr	r0, .L152+0x1c
	mov	r1, r8
	strb	r1, [r0]
.L133:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gMPlay_SE1
	.word	gMPlay_SE2
	.word	gSoundAnimFramesToWait
	.word	0xffff
	.word	gBattleAnimPicTable
	.word	gAnimSpriteIndexArray
	.word	gMPlay_BGM
	.word	gAnimScriptActive
.Lfe19:
	.size	 ScriptCmd_end,.Lfe19-ScriptCmd_end
	.align	2, 0
	.type	 ScriptCmd_playse,function
	.thumb_func
ScriptCmd_playse:
	push	{r4, lr}
	ldr	r4, .L155
	ldr	r0, [r4]
	add	r1, r0, #0x1
	str	r1, [r4]
	ldrb	r0, [r0, #0x1]
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlaySE
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L156:
	.align	2, 0
.L155:
	.word	gBattleAnimScriptPtr
.Lfe20:
	.size	 ScriptCmd_playse,.Lfe20-ScriptCmd_playse
	.align	2, 0
	.type	 ScriptCmd_monbg,function
	.thumb_func
ScriptCmd_monbg:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L180
	ldr	r2, [r0]
	add	r1, r2, #0x1
	str	r1, [r0]
	ldrb	r6, [r2, #0x1]
	cmp	r6, #0
	bne	.L158	@cond_branch
	mov	r6, #0x2
	b	.L176
.L181:
	.align	2, 0
.L180:
	.word	gBattleAnimScriptPtr
.L158:
	cmp	r6, #0x1
	bne	.L159	@cond_branch
	mov	r6, #0x3
.L159:
	cmp	r6, #0
	beq	.L162	@cond_branch
.L176:
	cmp	r6, #0x2
	bne	.L161	@cond_branch
.L162:
	ldr	r0, .L182
	b	.L177
.L183:
	.align	2, 0
.L182:
	.word	gBattleAnimBankAttacker
.L161:
	ldr	r0, .L184
.L177:
	ldrb	r5, [r0]
	add	r0, r5, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L164	@cond_branch
	add	r0, r5, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L166	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L165	@cond_branch
.L166:
	mov	r7, #0x0
	b	.L167
.L185:
	.align	2, 0
.L184:
	.word	gBattleAnimBankTarget
.L165:
	mov	r7, #0x1
.L167:
	add	r0, r5, #0
	add	r1, r7, #0
	bl	sub_8076034
	ldr	r0, .L186
	add	r0, r5, r0
	ldrb	r4, [r0]
	ldr	r0, .L186+0x4
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L186+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	strh	r4, [r2, #0x8]
	ldr	r1, .L186+0xc
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x24]
	ldrh	r4, [r0, #0x20]
	add	r1, r1, r4
	strh	r1, [r2, #0xa]
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	strh	r1, [r2, #0xc]
	cmp	r7, #0
	bne	.L168	@cond_branch
	ldr	r0, .L186+0x10
	ldrh	r0, [r0]
	strh	r0, [r2, #0xe]
	ldr	r0, .L186+0x14
	b	.L178
.L187:
	.align	2, 0
.L186:
	.word	gObjectBankIDs
	.word	task_pA_ma0A_obj_to_bg_pal
	.word	gTasks
	.word	gSprites
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
.L168:
	ldr	r0, .L188
	ldrh	r0, [r0]
	strh	r0, [r2, #0xe]
	ldr	r0, .L188+0x4
.L178:
	ldrh	r0, [r0]
	strh	r0, [r2, #0x10]
	ldr	r0, .L188+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r7, [r1, #0x12]
	strh	r5, [r1, #0x14]
	ldr	r0, .L188+0xc
	strb	r3, [r0]
.L164:
	mov	r0, #0x2
	eor	r5, r5, r0
	cmp	r6, #0x1
	bls	.L170	@cond_branch
	add	r0, r5, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L170	@cond_branch
	add	r0, r5, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L172	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L171	@cond_branch
.L172:
	mov	r7, #0x0
	b	.L173
.L189:
	.align	2, 0
.L188:
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gTasks
	.word	gMonAnimTaskIdArray
.L171:
	mov	r7, #0x1
.L173:
	add	r0, r5, #0
	add	r1, r7, #0
	bl	sub_8076034
	ldr	r0, .L190
	add	r0, r5, r0
	ldrb	r4, [r0]
	ldr	r0, .L190+0x4
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L190+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	strh	r4, [r2, #0x8]
	ldr	r1, .L190+0xc
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x24]
	ldrh	r4, [r0, #0x20]
	add	r1, r1, r4
	strh	r1, [r2, #0xa]
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	strh	r1, [r2, #0xc]
	cmp	r7, #0
	bne	.L174	@cond_branch
	ldr	r0, .L190+0x10
	ldrh	r0, [r0]
	strh	r0, [r2, #0xe]
	ldr	r0, .L190+0x14
	b	.L179
.L191:
	.align	2, 0
.L190:
	.word	gObjectBankIDs
	.word	task_pA_ma0A_obj_to_bg_pal
	.word	gTasks
	.word	gSprites
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
.L174:
	ldr	r0, .L192
	ldrh	r0, [r0]
	strh	r0, [r2, #0xe]
	ldr	r0, .L192+0x4
.L179:
	ldrh	r0, [r0]
	strh	r0, [r2, #0x10]
	ldr	r0, .L192+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r7, [r1, #0x12]
	strh	r5, [r1, #0x14]
	ldr	r0, .L192+0xc
	strb	r3, [r0, #0x1]
.L170:
	ldr	r1, .L192+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gTasks
	.word	gMonAnimTaskIdArray
	.word	gBattleAnimScriptPtr
.Lfe21:
	.size	 ScriptCmd_monbg,.Lfe21-ScriptCmd_monbg
	.align	2, 0
	.globl	IsAnimBankSpriteVisible
	.type	 IsAnimBankSpriteVisible,function
	.thumb_func
IsAnimBankSpriteVisible:
	.syntax unified
    push {r4,r5,lr}
    lsls r0, 24
    lsrs r4, r0, 24
    adds r5, r4, 0
    bl NotInBattle
    lsls r0, 24
    cmp r0, 0
    beq _08075FDC
    ldr r0, _08075FD8 @ =gBattleAnimBankAttacker
    ldrb r0, [r0]
    cmp r4, r0
    beq _0807601C
    b _0807602C
    .align 2, 0
_08075FD8: .4byte gBattleAnimBankAttacker
_08075FDC:
    adds r0, r4, 0
    bl AnimBankSpriteExists
    lsls r0, 24
    cmp r0, 0
    beq _0807602C
    bl NotInBattle
    lsls r0, 24
    cmp r0, 0
    bne _0807601C
    lsls r0, r5, 2
    ldr r1, _08076020 @ =gSharedMem + 0x17800
    adds r0, r1
    ldrb r1, [r0]
    movs r0, 0x1
    ands r0, r1
    cmp r0, 0
    beq _0807601C
    ldr r2, _08076024 @ =gSprites
    ldr r0, _08076028 @ =gObjectBankIDs
    adds r0, r5, r0
    ldrb r1, [r0]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r2
    adds r0, 0x3E
    ldrb r0, [r0]
    lsls r0, 29
    cmp r0, 0
    blt _0807602C
_0807601C:
    movs r0, 0x1
    b _0807602E
    .align 2, 0
_08076020: .4byte gSharedMem + 0x17800
_08076024: .4byte gSprites
_08076028: .4byte gObjectBankIDs
_0807602C:
    movs r0, 0
_0807602E:
    pop {r4,r5}
    pop {r1}
    bx r1
    .syntax divided

	.code	16
.Lfe22:
	.size	 IsAnimBankSpriteVisible,.Lfe22-IsAnimBankSpriteVisible
	.align	2, 0
	.globl	sub_8076034
	.type	 sub_8076034,function
	.thumb_func
sub_8076034:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffd8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	beq	.LCB1539
	b	.L196	@long jump
.LCB1539:
	add	r4, sp, #0x10
	add	r0, r4, #0
	bl	sub_8078914
	ldr	r2, [sp, #0x10]
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	add	r6, sp, #0x1c
	add	r0, sp, #0x20
	mov	sl, r0
	mov	r1, r9
	lsl	r1, r1, #0x5
	str	r1, [sp, #0x24]
	mov	r5, #0x0
	ldr	r1, .L213
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	mov	ip, r6
	ldr	r7, .L213+0x4
	mov	r0, #0x85
	lsl	r0, r0, #0x18
	mov	r8, r0
.L197:
	str	r5, [sp, #0x1c]
	mov	r0, ip
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r4
	sub	r3, r3, r4
	cmp	r3, r4
	bhi	.L197	@cond_branch
	str	r5, [sp, #0x1c]
	str	r6, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x2
	mov	r2, r8
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r0, sp, #0xc
	mov	r1, #0x0
	strb	r1, [r0]
	strb	r1, [r0]
	ldr	r1, [sp, #0x14]
	mov	r0, #0xff
	mov	r3, sl
	strh	r0, [r3]
	ldr	r0, .L213
	str	r3, [r0]
	str	r1, [r0, #0x4]
	ldr	r1, .L213+0x8
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	ldr	r2, .L213+0xc
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, .L213+0x10
	add	r0, r0, r9
	ldrb	r4, [r0]
	ldr	r5, .L213+0x14
	ldr	r0, .L213+0x18
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x24]
	ldrh	r1, [r1, #0x20]
	add	r0, r0, r1
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r5]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L202	@cond_branch
	ldr	r0, .L213+0x1c
	ldrh	r0, [r0]
	bl	sub_80AEB1C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L202	@cond_branch
	ldrh	r0, [r5]
	sub	r0, r0, #0x1
	strh	r0, [r5]
.L202:
	ldr	r3, .L213+0x20
	ldr	r2, .L213+0x18
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x26]
	ldrh	r1, [r1, #0x22]
	add	r0, r0, r1
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r3]
	ldr	r0, .L213+0x10
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L213+0x24
	ldr	r0, .L213+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldrh	r0, [r3]
	strh	r0, [r1]
	ldr	r4, .L213+0x28
	ldr	r0, [sp, #0x24]
	add	r4, r0, r4
	mov	r2, sp
	ldrb	r1, [r2, #0x18]
	lsl	r1, r1, #0x4
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r3, sp
	ldrb	r0, [r3, #0x18]
	lsl	r0, r0, #0x5
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	ldr	r1, .L213
	str	r4, [r1]
	str	r0, [r1, #0x4]
	ldr	r0, .L213+0x2c
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L203	@cond_branch
	mov	r2, #0x0
	b	.L204
.L214:
	.align	2, 0
.L213:
	.word	0x40000d4
	.word	0x85000400
	.word	0x81000800
	.word	0x400000a
	.word	gObjectBankIDs
	.word	gUnknown_030042C0
	.word	gSprites
	.word	gSharedMem+0x19348
	.word	gUnknown_030041B4
	.word	0x4000014
	.word	gPlttBufferUnfaded+0x200
	.word	0x84000008
.L203:
	mov	r0, r9
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L204:
	mov	r0, sp
	ldrb	r3, [r0, #0x18]
	ldr	r0, [sp, #0x10]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
	ldr	r4, [sp, #0x14]
	mov	r1, #0xfa
	lsl	r1, r1, #0x18
	add	r0, r4, r1
	cmp	r0, #0
	bge	.L205	@cond_branch
	ldr	r1, .L215
	add	r0, r4, r1
.L205:
	asr	r0, r0, #0xb
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	ldr	r0, .L215+0x4
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_80E4EF8
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1805
	b	.L207	@long jump
.LCB1805:
	bl	sub_8076380
	b	.L207
.L216:
	.align	2, 0
.L215:
	.word	0xfa0007ff
	.word	0x400000a
.L196:
	ldr	r3, .L217
	mov	r5, #0x80
	lsl	r5, r5, #0x6
	add	r6, sp, #0x1c
	ldr	r2, .L217+0x4
	mov	sl, r2
	mov	r0, r9
	lsl	r0, r0, #0x5
	str	r0, [sp, #0x24]
	mov	r4, #0x0
	ldr	r1, .L217+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	ip, r6
	ldr	r7, .L217+0xc
	mov	r0, #0x85
	lsl	r0, r0, #0x18
	mov	r8, r0
.L208:
	str	r4, [sp, #0x1c]
	mov	r0, ip
	str	r0, [r1]
	str	r3, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r3, r3, r2
	sub	r5, r5, r2
	cmp	r5, r2
	bhi	.L208	@cond_branch
	str	r4, [sp, #0x1c]
	str	r6, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r5, #0x2
	mov	r2, r8
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r0, sp, #0xc
	mov	r1, #0x0
	strb	r1, [r0]
	strb	r1, [r0]
	ldr	r1, .L217+0x10
	mov	r0, #0x0
	str	r0, [sp, #0x1c]
	ldr	r5, .L217+0x8
	str	r6, [r5]
	str	r1, [r5, #0x4]
	ldr	r0, .L217+0x14
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	ldr	r6, .L217+0x18
	ldrb	r1, [r6]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r6]
	ldrb	r1, [r6, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r6, #0x1]
	ldrb	r1, [r6, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r6, #0x1]
	ldr	r2, .L217+0x1c
	add	r2, r2, r9
	ldrb	r4, [r2]
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	ldrh	r0, [r1, #0x24]
	ldrh	r3, [r1, #0x20]
	add	r0, r0, r3
	neg	r0, r0
	add	r0, r0, #0x20
	ldr	r3, .L217+0x20
	strh	r0, [r3]
	ldrh	r0, [r1, #0x26]
	ldrh	r1, [r1, #0x22]
	add	r0, r0, r1
	neg	r0, r0
	add	r0, r0, #0x20
	ldr	r1, .L217+0x24
	strh	r0, [r1]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L217+0x28
	ldrh	r0, [r3]
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r2, .L217+0x24
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldr	r3, [sp, #0x24]
	ldr	r0, .L217+0x2c
	add	r4, r3, r0
	add	r0, r4, #0
	mov	r1, #0x90
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L217+0x30
	str	r4, [r5]
	str	r0, [r5, #0x4]
	ldr	r0, .L217+0x34
	str	r0, [r5, #0x8]
	ldr	r0, [r5, #0x8]
	mov	r0, r9
	bl	GetBankIdentity
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0xc0
	lsl	r0, r0, #0x7
	str	r0, [sp]
	mov	r0, #0x1e
	str	r0, [sp, #0x4]
	ldr	r0, [r6]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r3, #0x9
	bl	sub_80E4EF8
.L207:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	0x6006000
	.word	gSprites
	.word	0x40000d4
	.word	0x85000400
	.word	0x600f000
	.word	0x85000200
	.word	0x400000c
	.word	gObjectBankIDs
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	0x4000018
	.word	gPlttBufferUnfaded+0x200
	.word	0x5000120
	.word	0x84000008
.Lfe23:
	.size	 sub_8076034,.Lfe23-sub_8076034
	.align	2, 0
	.type	 sub_8076380,function
	.thumb_func
sub_8076380:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff4
	ldr	r0, .L241
	ldrh	r0, [r0]
	bl	sub_80AEB1C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L220	@cond_branch
	mov	r0, sp
	bl	sub_8078914
	ldr	r6, [sp, #0x4]
	mov	r5, #0x0
	mov	r0, #0x7
	mov	ip, r0
	mov	r7, #0x0
.L224:
	mov	r4, #0x0
	add	r3, r7, r6
	mov	r1, ip
	lsl	r0, r1, #0x1
	add	r2, r0, r6
.L228:
	ldrh	r1, [r3]
	ldrh	r0, [r2]
	strh	r0, [r3]
	strh	r1, [r2]
	add	r3, r3, #0x2
	sub	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L228	@cond_branch
	mov	r0, #0x20
	add	ip, ip, r0
	add	r7, r7, #0x40
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L224	@cond_branch
	mov	r5, #0x0
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	add	r3, r1, #0
.L234:
	add	r2, r5, #0x1
	lsl	r0, r5, #0x6
	add	r1, r0, r6
	mov	r4, #0x7
.L238:
	ldrh	r0, [r1]
	eor	r0, r0, r3
	strh	r0, [r1]
	add	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L238	@cond_branch
	add	r5, r2, #0
	cmp	r5, #0x7
	ble	.L234	@cond_branch
.L220:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L242:
	.align	2, 0
.L241:
	.word	gSharedMem+0x19348
.Lfe24:
	.size	 sub_8076380,.Lfe24-sub_8076380
	.align	2, 0
	.globl	sub_80763FC
	.type	 sub_80763FC,function
	.thumb_func
sub_80763FC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	ip, r1
	add	r7, r2, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r3, r3, #0x18
	mov	r0, #0x40
	mov	r9, r0
	cmp	r3, #0
	bne	.L244	@cond_branch
	mov	r1, #0x20
	mov	r9, r1
.L244:
	lsl	r0, r6, #0x1c
	lsr	r6, r0, #0x10
	mov	r0, #0x0
	cmp	r0, r9
	bcs	.L247	@cond_branch
	ldr	r1, .L256
	mov	r8, r1
.L249:
	mov	r3, #0x0
	add	r5, r0, #0x1
	lsl	r4, r0, #0x5
.L253:
	add	r1, r4, r3
	lsl	r1, r1, #0x1
	add	r1, r1, ip
	ldrh	r2, [r1]
	mov	r0, r8
	and	r0, r0, r2
	orr	r0, r0, r6
	add	r0, r0, r7
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x1f
	bls	.L253	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r9
	bcc	.L249	@cond_branch
.L247:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L257:
	.align	2, 0
.L256:
	.word	0xfff
.Lfe25:
	.size	 sub_80763FC,.Lfe25-sub_80763FC
	.align	2, 0
	.globl	sub_8076464
	.type	 sub_8076464,function
	.thumb_func
sub_8076464:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffec
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r5, sp, #0x4
	add	r0, r5, #0
	bl	sub_8078914
	cmp	r4, #0
	beq	.L260	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L259	@cond_branch
.L260:
	ldr	r2, [sp, #0x4]
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	add	r5, sp, #0x10
	ldr	r0, .L273
	mov	r9, r0
	ldr	r0, .L273+0x4
	mov	sl, r0
	mov	r6, #0x0
	ldr	r1, .L273+0x8
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	mov	ip, r5
	ldr	r7, .L273+0xc
	mov	r0, #0x85
	lsl	r0, r0, #0x18
	mov	r8, r0
.L261:
	str	r6, [sp, #0x10]
	mov	r0, ip
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r4
	sub	r3, r3, r4
	cmp	r3, r4
	bhi	.L261	@cond_branch
	str	r6, [sp, #0x10]
	str	r5, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x2
	mov	r2, r8
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, sp
	mov	r1, #0x0
	strb	r1, [r0]
	strb	r1, [r0]
	ldr	r1, [sp, #0x8]
	b	.L272
.L274:
	.align	2, 0
.L273:
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	0x40000d4
	.word	0x85000400
.L259:
	ldr	r2, .L275
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	add	r5, sp, #0x10
	ldr	r0, .L275+0x4
	mov	r9, r0
	ldr	r0, .L275+0x8
	mov	sl, r0
	mov	r6, #0x0
	ldr	r1, .L275+0xc
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	mov	ip, r5
	ldr	r7, .L275+0x10
	mov	r0, #0x85
	lsl	r0, r0, #0x18
	mov	r8, r0
.L267:
	str	r6, [sp, #0x10]
	mov	r0, ip
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r4
	sub	r3, r3, r4
	cmp	r3, r4
	bhi	.L267	@cond_branch
	str	r6, [sp, #0x10]
	str	r5, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x2
	mov	r2, r8
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, sp
	mov	r1, #0x0
	strb	r1, [r0]
	strb	r1, [r0]
	ldr	r1, .L275+0x14
.L272:
	mov	r2, #0x0
	str	r2, [sp, #0x10]
	ldr	r0, .L275+0xc
	str	r5, [r0]
	str	r1, [r0, #0x4]
	ldr	r1, .L275+0x18
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	mov	r0, r9
	strh	r2, [r0]
	mov	r0, sl
	strh	r2, [r0]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	0x6006000
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	0x40000d4
	.word	0x85000400
	.word	0x600f000
	.word	0x85000200
.Lfe26:
	.size	 sub_8076464,.Lfe26-sub_8076464
	.align	2, 0
	.type	 task_pA_ma0A_obj_to_bg_pal,function
	.thumb_func
task_pA_ma0A_obj_to_bg_pal:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L281
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrb	r4, [r5, #0x8]
	ldrb	r6, [r5, #0x14]
	mov	r0, sp
	bl	sub_8078914
	ldr	r0, .L281+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x24]
	ldrh	r0, [r1, #0x20]
	add	r2, r2, r0
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrh	r2, [r1, #0x26]
	ldrh	r1, [r1, #0x22]
	add	r2, r2, r1
	ldrh	r0, [r5, #0xc]
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x12
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L278	@cond_branch
	ldr	r1, .L281+0x8
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	ldrh	r3, [r5, #0xe]
	add	r0, r0, r3
	strh	r0, [r1]
	ldr	r1, .L281+0xc
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	ldrh	r5, [r5, #0x10]
	add	r0, r0, r5
	strh	r0, [r1]
	lsl	r2, r6, #0x5
	ldr	r1, .L281+0x10
	add	r2, r2, r1
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x5
	ldr	r3, .L281+0x14
	add	r1, r1, r3
	add	r0, r0, r1
	b	.L280
.L282:
	.align	2, 0
.L281:
	.word	gTasks
	.word	gSprites
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	gPlttBufferFaded+0x200
	.word	0xfffffe00
.L278:
	ldr	r1, .L283
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	ldrh	r3, [r5, #0xe]
	add	r0, r0, r3
	strh	r0, [r1]
	ldr	r1, .L283+0x4
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	ldrh	r5, [r5, #0x10]
	add	r0, r0, r5
	strh	r0, [r1]
	lsl	r2, r6, #0x5
	ldr	r0, .L283+0x8
	add	r2, r2, r0
	sub	r0, r0, #0xe0
.L280:
	ldr	r1, .L283+0xc
	str	r2, [r1]
	str	r0, [r1, #0x4]
	ldr	r0, .L283+0x10
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	gUnknown_03004288
	.word	gUnknown_03004280
	.word	gPlttBufferFaded+0x200
	.word	0x40000d4
	.word	0x84000008
.Lfe27:
	.size	 task_pA_ma0A_obj_to_bg_pal,.Lfe27-task_pA_ma0A_obj_to_bg_pal
	.align	2, 0
	.type	 ScriptCmd_clearmonbg,function
	.thumb_func
ScriptCmd_clearmonbg:
	push	{r4, r5, lr}
	ldr	r0, .L297
	ldr	r2, [r0]
	add	r1, r2, #0x1
	str	r1, [r0]
	ldrb	r4, [r2, #0x1]
	cmp	r4, #0
	bne	.L286	@cond_branch
	mov	r4, #0x2
	b	.L295
.L298:
	.align	2, 0
.L297:
	.word	gBattleAnimScriptPtr
.L286:
	cmp	r4, #0x1
	bne	.L287	@cond_branch
	mov	r4, #0x3
.L287:
	cmp	r4, #0
	beq	.L290	@cond_branch
.L295:
	cmp	r4, #0x2
	bne	.L289	@cond_branch
.L290:
	ldr	r0, .L299
	b	.L296
.L300:
	.align	2, 0
.L299:
	.word	gBattleAnimBankAttacker
.L289:
	ldr	r0, .L301
.L296:
	ldrb	r5, [r0]
	ldr	r3, .L301+0x4
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L292	@cond_branch
	ldr	r2, .L301+0x8
	ldr	r0, .L301+0xc
	add	r0, r5, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L292:
	cmp	r4, #0x1
	bls	.L293	@cond_branch
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0xff
	beq	.L293	@cond_branch
	ldr	r3, .L301+0x8
	ldr	r2, .L301+0xc
	mov	r1, #0x2
	add	r0, r5, #0
	eor	r0, r0, r1
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	b	.L294
.L302:
	.align	2, 0
.L301:
	.word	gBattleAnimBankTarget
	.word	gMonAnimTaskIdArray
	.word	gSprites
	.word	gObjectBankIDs
.L293:
	mov	r4, #0x0
.L294:
	ldr	r0, .L303
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L303+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	strh	r5, [r1, #0xc]
	ldr	r1, .L303+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	sub_807672C
	.word	gTasks
	.word	gBattleAnimScriptPtr
.Lfe28:
	.size	 ScriptCmd_clearmonbg,.Lfe28-ScriptCmd_clearmonbg
	.align	2, 0
	.type	 sub_807672C,function
	.thumb_func
sub_807672C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L312
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	beq	.L306	@cond_branch
	ldrb	r0, [r1, #0xc]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L308	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L307	@cond_branch
.L308:
	mov	r4, #0x0
	b	.L309
.L313:
	.align	2, 0
.L312:
	.word	gTasks
.L307:
	mov	r4, #0x1
.L309:
	ldr	r6, .L314
	ldrb	r0, [r6]
	cmp	r0, #0xff
	beq	.L310	@cond_branch
	add	r0, r4, #0
	bl	sub_8076464
	ldrb	r0, [r6]
	bl	DestroyTask
	mov	r0, #0xff
	strb	r0, [r6]
.L310:
	ldr	r0, .L314+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	ble	.L311	@cond_branch
	mov	r0, #0x1
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	sub_8076464
	ldrb	r0, [r6, #0x1]
	bl	DestroyTask
	mov	r0, #0xff
	strb	r0, [r6, #0x1]
.L311:
	add	r0, r5, #0
	bl	DestroyTask
.L306:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L315:
	.align	2, 0
.L314:
	.word	gMonAnimTaskIdArray
	.word	gTasks
.Lfe29:
	.size	 sub_807672C,.Lfe29-sub_807672C
	.align	2, 0
	.type	 ScriptCmd_monbg_22,function
	.thumb_func
ScriptCmd_monbg_22:
	push	{r4, r5, lr}
	ldr	r0, .L333
	ldr	r2, [r0]
	add	r1, r2, #0x1
	str	r1, [r0]
	ldrb	r5, [r2, #0x1]
	cmp	r5, #0
	bne	.L317	@cond_branch
	mov	r5, #0x2
	b	.L331
.L334:
	.align	2, 0
.L333:
	.word	gBattleAnimScriptPtr
.L317:
	cmp	r5, #0x1
	bne	.L318	@cond_branch
	mov	r5, #0x3
.L318:
	cmp	r5, #0
	beq	.L321	@cond_branch
.L331:
	cmp	r5, #0x2
	bne	.L320	@cond_branch
.L321:
	ldr	r0, .L335
	b	.L332
.L336:
	.align	2, 0
.L335:
	.word	gBattleAnimBankAttacker
.L320:
	ldr	r0, .L337
.L332:
	ldrb	r4, [r0]
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L323	@cond_branch
	add	r0, r4, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L325	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L324	@cond_branch
.L325:
	mov	r1, #0x0
	b	.L326
.L338:
	.align	2, 0
.L337:
	.word	gBattleAnimBankTarget
.L324:
	mov	r1, #0x1
.L326:
	add	r0, r4, #0
	bl	sub_8076034
	ldr	r2, .L339
	ldr	r0, .L339+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L323:
	mov	r0, #0x2
	eor	r4, r4, r0
	cmp	r5, #0x1
	bls	.L327	@cond_branch
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L327	@cond_branch
	add	r0, r4, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L329	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L328	@cond_branch
.L329:
	mov	r1, #0x0
	b	.L330
.L340:
	.align	2, 0
.L339:
	.word	gSprites
	.word	gObjectBankIDs
.L328:
	mov	r1, #0x1
.L330:
	add	r0, r4, #0
	bl	sub_8076034
	ldr	r2, .L341
	ldr	r0, .L341+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L327:
	ldr	r1, .L341+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L342:
	.align	2, 0
.L341:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gBattleAnimScriptPtr
.Lfe30:
	.size	 ScriptCmd_monbg_22,.Lfe30-ScriptCmd_monbg_22
	.align	2, 0
	.type	 ScriptCmd_clearmonbg_23,function
	.thumb_func
ScriptCmd_clearmonbg_23:
	push	{r4, r5, r6, lr}
	ldr	r0, .L355
	ldr	r2, [r0]
	add	r1, r2, #0x1
	str	r1, [r0]
	ldrb	r5, [r2, #0x1]
	cmp	r5, #0
	bne	.L344	@cond_branch
	mov	r5, #0x2
	b	.L353
.L356:
	.align	2, 0
.L355:
	.word	gBattleAnimScriptPtr
.L344:
	cmp	r5, #0x1
	bne	.L345	@cond_branch
	mov	r5, #0x3
.L345:
	cmp	r5, #0
	beq	.L348	@cond_branch
.L353:
	cmp	r5, #0x2
	bne	.L347	@cond_branch
.L348:
	ldr	r0, .L357
	b	.L354
.L358:
	.align	2, 0
.L357:
	.word	gBattleAnimBankAttacker
.L347:
	ldr	r0, .L359
.L354:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L350	@cond_branch
	ldr	r2, .L359+0x4
	ldr	r0, .L359+0x8
	add	r0, r6, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L350:
	cmp	r5, #0x1
	bls	.L351	@cond_branch
	mov	r0, #0x2
	add	r4, r6, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L351	@cond_branch
	ldr	r2, .L359+0x4
	ldr	r0, .L359+0x8
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	b	.L352
.L360:
	.align	2, 0
.L359:
	.word	gBattleAnimBankTarget
	.word	gSprites
	.word	gObjectBankIDs
.L351:
	mov	r5, #0x0
.L352:
	ldr	r0, .L361
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L361+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r5, [r1, #0x8]
	strh	r6, [r1, #0xc]
	ldr	r1, .L361+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L362:
	.align	2, 0
.L361:
	.word	sub_80769A4
	.word	gTasks
	.word	gBattleAnimScriptPtr
.Lfe31:
	.size	 ScriptCmd_clearmonbg_23,.Lfe31-ScriptCmd_clearmonbg_23
	.align	2, 0
	.type	 sub_80769A4,function
	.thumb_func
sub_80769A4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L370
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	beq	.L364	@cond_branch
	ldrb	r4, [r1, #0xc]
	add	r0, r4, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L366	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L365	@cond_branch
.L366:
	mov	r5, #0x0
	b	.L367
.L371:
	.align	2, 0
.L370:
	.word	gTasks
.L365:
	mov	r5, #0x1
.L367:
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L368	@cond_branch
	add	r0, r5, #0
	bl	sub_8076464
.L368:
	ldr	r0, .L372
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	ble	.L369	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L369	@cond_branch
	mov	r0, #0x1
	eor	r5, r5, r0
	add	r0, r5, #0
	bl	sub_8076464
.L369:
	add	r0, r6, #0
	bl	DestroyTask
.L364:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L373:
	.align	2, 0
.L372:
	.word	gTasks
.Lfe32:
	.size	 sub_80769A4,.Lfe32-sub_80769A4
	.align	2, 0
	.type	 ScriptCmd_setalpha,function
	.thumb_func
ScriptCmd_setalpha:
	push	{r4, lr}
	ldr	r2, .L375
	ldr	r0, [r2]
	add	r1, r0, #0x1
	str	r1, [r2]
	ldrb	r3, [r0, #0x1]
	add	r0, r1, #0x1
	str	r0, [r2]
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, #0x1
	str	r0, [r2]
	ldr	r2, .L375+0x4
	mov	r4, #0xfd
	lsl	r4, r4, #0x6
	add	r0, r4, #0
	strh	r0, [r2]
	ldr	r0, .L375+0x8
	orr	r3, r3, r1
	strh	r3, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	gBattleAnimScriptPtr
	.word	0x4000050
	.word	0x4000052
.Lfe33:
	.size	 ScriptCmd_setalpha,.Lfe33-ScriptCmd_setalpha
	.align	2, 0
	.type	 ScriptCmd_setbldcnt,function
	.thumb_func
ScriptCmd_setbldcnt:
	ldr	r2, .L378
	ldr	r0, [r2]
	add	r1, r0, #0x1
	str	r1, [r2]
	ldrb	r3, [r0, #0x1]
	add	r0, r1, #0x1
	str	r0, [r2]
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, #0x1
	str	r0, [r2]
	ldr	r0, .L378+0x4
	orr	r3, r3, r1
	strh	r3, [r0]
	bx	lr
.L379:
	.align	2, 0
.L378:
	.word	gBattleAnimScriptPtr
	.word	0x4000050
.Lfe34:
	.size	 ScriptCmd_setbldcnt,.Lfe34-ScriptCmd_setbldcnt
	.align	2, 0
	.type	 ScriptCmd_blendoff,function
	.thumb_func
ScriptCmd_blendoff:
	ldr	r1, .L381
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r0, .L381+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	bx	lr
.L382:
	.align	2, 0
.L381:
	.word	gBattleAnimScriptPtr
	.word	0x4000050
.Lfe35:
	.size	 ScriptCmd_blendoff,.Lfe35-ScriptCmd_blendoff
	.align	2, 0
	.type	 ScriptCmd_call,function
	.thumb_func
ScriptCmd_call:
	push	{r4, lr}
	ldr	r4, .L384
	ldr	r1, [r4]
	add	r3, r1, #0x1
	str	r3, [r4]
	ldr	r2, .L384+0x4
	add	r0, r1, #0x5
	str	r0, [r2]
	ldrb	r1, [r1, #0x1]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L385:
	.align	2, 0
.L384:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimScriptRetAddr
.Lfe36:
	.size	 ScriptCmd_call,.Lfe36-ScriptCmd_call
	.align	2, 0
	.type	 ScriptCmd_return,function
	.thumb_func
ScriptCmd_return:
	ldr	r0, .L387
	ldr	r1, .L387+0x4
	ldr	r1, [r1]
	str	r1, [r0]
	bx	lr
.L388:
	.align	2, 0
.L387:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimScriptRetAddr
.Lfe37:
	.size	 ScriptCmd_return,.Lfe37-ScriptCmd_return
	.align	2, 0
	.type	 ScriptCmd_setvar,function
	.thumb_func
ScriptCmd_setvar:
	push	{r4, r5, lr}
	ldr	r5, .L390
	ldr	r1, [r5]
	add	r0, r1, #0x1
	str	r0, [r5]
	ldrb	r2, [r1, #0x1]
	add	r3, r0, #0x1
	str	r3, [r5]
	ldrb	r4, [r0, #0x1]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r1, r1, #0x4
	str	r1, [r5]
	ldr	r0, .L390+0x4
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	strh	r4, [r2]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L391:
	.align	2, 0
.L390:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimArgs
.Lfe38:
	.size	 ScriptCmd_setvar,.Lfe38-ScriptCmd_setvar
	.align	2, 0
	.type	 ScriptCmd_ifelse,function
	.thumb_func
ScriptCmd_ifelse:
	push	{lr}
	ldr	r3, .L394
	ldr	r2, [r3]
	add	r0, r2, #0x1
	str	r0, [r3]
	ldr	r0, .L394+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L393	@cond_branch
	add	r0, r2, #0x5
	str	r0, [r3]
.L393:
	ldr	r2, [r3]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	gBattleAnimScriptPtr
	.word	gUnknown_0202F7C4
.Lfe39:
	.size	 ScriptCmd_ifelse,.Lfe39-ScriptCmd_ifelse
	.align	2, 0
	.type	 ScriptCmd_jumpif,function
	.thumb_func
ScriptCmd_jumpif:
	push	{r4, r5, lr}
	ldr	r5, .L399
	ldr	r4, [r5]
	add	r2, r4, #0x1
	str	r2, [r5]
	ldrb	r1, [r4, #0x1]
	add	r3, r2, #0x1
	str	r3, [r5]
	ldr	r0, .L399+0x4
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L397	@cond_branch
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r5]
	b	.L398
.L400:
	.align	2, 0
.L399:
	.word	gBattleAnimScriptPtr
	.word	gUnknown_0202F7C4
.L397:
	add	r0, r4, #0x6
	str	r0, [r5]
.L398:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 ScriptCmd_jumpif,.Lfe40-ScriptCmd_jumpif
	.align	2, 0
	.type	 ScriptCmd_jump,function
	.thumb_func
ScriptCmd_jump:
	ldr	r3, .L402
	ldr	r0, [r3]
	add	r2, r0, #0x1
	str	r2, [r3]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L403:
	.align	2, 0
.L402:
	.word	gBattleAnimScriptPtr
.Lfe41:
	.size	 ScriptCmd_jump,.Lfe41-ScriptCmd_jump
	.align	2, 0
	.globl	NotInBattle
	.type	 NotInBattle,function
	.thumb_func
NotInBattle:
	push	{lr}
	ldr	r0, .L408
	ldr	r1, .L408+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L405	@cond_branch
	mov	r0, #0x0
	b	.L407
.L409:
	.align	2, 0
.L408:
	.word	gMain
	.word	0x43d
.L405:
	mov	r0, #0x1
.L407:
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 NotInBattle,.Lfe42-NotInBattle
	.align	2, 0
	.type	 ScriptCmd_fadetobg,function
	.thumb_func
ScriptCmd_fadetobg:
	push	{r4, lr}
	ldr	r1, .L411
	ldr	r2, [r1]
	add	r0, r2, #0x1
	str	r0, [r1]
	ldrb	r4, [r2, #0x1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r0, .L411+0x4
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L411+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	ldr	r1, .L411+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L412:
	.align	2, 0
.L411:
	.word	gBattleAnimScriptPtr
	.word	task_p5_load_battle_screen_elements
	.word	gTasks
	.word	gUnknown_0202F7C5
.Lfe43:
	.size	 ScriptCmd_fadetobg,.Lfe43-ScriptCmd_fadetobg
	.align	2, 0
	.type	 ScriptCmd_fadetobg_25,function
	.thumb_func
ScriptCmd_fadetobg_25:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r2, .L418
	ldr	r1, [r2]
	add	r0, r1, #0x1
	str	r0, [r2]
	ldrb	r3, [r1, #0x1]
	mov	r8, r3
	ldrb	r7, [r0, #0x1]
	ldrb	r6, [r0, #0x2]
	add	r1, r1, #0x4
	str	r1, [r2]
	ldr	r0, .L418+0x4
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L414	@cond_branch
	ldr	r1, .L418+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0x8]
	b	.L415
.L419:
	.align	2, 0
.L418:
	.word	gBattleAnimScriptPtr
	.word	task_p5_load_battle_screen_elements
	.word	gTasks
.L414:
	ldr	r0, .L420
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L416	@cond_branch
	ldr	r1, .L420+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r7, [r0, #0x8]
	b	.L415
.L421:
	.align	2, 0
.L420:
	.word	gBattleAnimBankTarget
	.word	gTasks
.L416:
	ldr	r1, .L422
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r8
	strh	r1, [r0, #0x8]
.L415:
	ldr	r1, .L422+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	gTasks
	.word	gUnknown_0202F7C5
.Lfe44:
	.size	 ScriptCmd_fadetobg_25,.Lfe44-ScriptCmd_fadetobg_25
	.align	2, 0
	.type	 task_p5_load_battle_screen_elements,function
	.thumb_func
task_p5_load_battle_screen_elements:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L434
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r6, [r4, #0x1c]
	mov	r0, #0x1c
	ldrsh	r3, [r4, r0]
	add	r7, r1, #0
	cmp	r3, #0
	bne	.L425	@cond_branch
	str	r3, [sp]
	mov	r0, #0xe8
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginHardwarePaletteFade
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	b	.L424
.L435:
	.align	2, 0
.L434:
	.word	gTasks
.L425:
	ldr	r2, .L436
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L424	@cond_branch
	cmp	r3, #0x1
	bne	.L427	@cond_branch
	add	r0, r6, #0x1
	strh	r0, [r4, #0x1c]
	ldr	r1, .L436+0x4
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L428
.L437:
	.align	2, 0
.L436:
	.word	gPaletteFade
	.word	gUnknown_0202F7C5
.L427:
	cmp	r3, #0x2
	bne	.L428	@cond_branch
	ldrh	r0, [r4, #0x8]
	lsl	r2, r0, #0x10
	asr	r1, r2, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L430	@cond_branch
	bl	dp01t_11_3_message_for_player_only
	b	.L431
.L430:
	lsr	r0, r2, #0x10
	bl	sub_8076DB8
.L431:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xe8
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginHardwarePaletteFade
	ldr	r1, .L438
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x1c]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x1c]
	b	.L424
.L439:
	.align	2, 0
.L438:
	.word	gTasks
.L428:
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L424	@cond_branch
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x1c
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x3
	bne	.L424	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r0, .L440
	strb	r4, [r0]
.L424:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	gUnknown_0202F7C5
.Lfe45:
	.size	 task_p5_load_battle_screen_elements,.Lfe45-task_p5_load_battle_screen_elements
	.align	2, 0
	.type	 sub_8076DB8,function
	.thumb_func
sub_8076DB8:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L443	@cond_branch
	ldr	r7, .L451
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r4, r0, #0x2
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r0, r4, r0
	ldr	r5, [r0]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	ldr	r1, .L451+0x4
	cmp	r0, #0
	beq	.L444	@cond_branch
	ldr	r0, .L451+0x8
	add	r1, r1, r0
.L444:
	add	r0, r5, #0
	bl	LZDecompressWram
	bl	sub_80789BC
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	ldr	r1, .L451+0x4
	cmp	r0, #0
	beq	.L446	@cond_branch
	ldr	r0, .L451+0x8
	add	r1, r1, r0
.L446:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r5, #0
	mov	r3, #0x0
	bl	sub_80763FC
	bl	NotInBattle
	lsl	r0, r0, #0x18
	ldr	r2, .L451+0x4
	cmp	r0, #0
	beq	.L448	@cond_branch
	ldr	r0, .L451+0x8
	add	r2, r2, r0
.L448:
	ldr	r1, .L451+0xc
	ldr	r0, .L451+0x10
	str	r2, [r0]
	str	r1, [r0, #0x4]
	ldr	r1, .L451+0x14
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	add	r0, r4, r7
	ldr	r0, [r0]
	ldr	r1, .L451+0x18
	bl	LZDecompressVram
	add	r0, r7, #0x4
	add	r0, r4, r0
	ldr	r4, [r0]
	bl	sub_80789BC
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x14
	add	r0, r4, #0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L450
.L452:
	.align	2, 0
.L451:
	.word	gBattleAnimBackgroundTable
	.word	gSharedMem+0x18000
	.word	0xffffc800
	.word	0x600d000
	.word	0x40000d4
	.word	0x84000200
	.word	0x6002000
.L443:
	ldr	r5, .L453
	lsl	r4, r6, #0x1
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r4, r0
	ldr	r0, [r0]
	ldr	r1, .L453+0x4
	bl	LZDecompressVram
	add	r0, r4, r5
	ldr	r0, [r0]
	ldr	r1, .L453+0x8
	bl	LZDecompressVram
	add	r5, r5, #0x4
	add	r4, r4, r5
	ldr	r0, [r4]
	mov	r1, #0x20
	mov	r2, #0x20
	bl	LoadCompressedPalette
.L450:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L454:
	.align	2, 0
.L453:
	.word	gBattleAnimBackgroundTable
	.word	0x600d000
	.word	0x6008000
.Lfe46:
	.size	 sub_8076DB8,.Lfe46-sub_8076DB8
	.align	2, 0
	.type	 dp01t_11_3_message_for_player_only,function
	.thumb_func
dp01t_11_3_message_for_player_only:
	push	{lr}
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L456	@cond_branch
	bl	sub_80AB2AC
	b	.L457
.L456:
	bl	sub_800D7B8
.L457:
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 dp01t_11_3_message_for_player_only,.Lfe47-dp01t_11_3_message_for_player_only
	.align	2, 0
	.type	 ScriptCmd_restorebg,function
	.thumb_func
ScriptCmd_restorebg:
	push	{lr}
	ldr	r1, .L459
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r0, .L459+0x4
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L459+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L459+0xc
	strh	r0, [r1, #0x8]
	ldr	r1, .L459+0x10
	mov	r0, #0x1
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	gBattleAnimScriptPtr
	.word	task_p5_load_battle_screen_elements
	.word	gTasks
	.word	0xffff
	.word	gUnknown_0202F7C5
.Lfe48:
	.size	 ScriptCmd_restorebg,.Lfe48-ScriptCmd_restorebg
	.align	2, 0
	.type	 ScriptCmd_waitbgfadeout,function
	.thumb_func
ScriptCmd_waitbgfadeout:
	push	{lr}
	ldr	r0, .L465
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L462	@cond_branch
	ldr	r1, .L465+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r1, .L465+0x8
	mov	r0, #0x0
	b	.L464
.L466:
	.align	2, 0
.L465:
	.word	gUnknown_0202F7C5
	.word	gBattleAnimScriptPtr
	.word	gAnimFramesToWait
.L462:
	ldr	r1, .L467
	mov	r0, #0x1
.L464:
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	gAnimFramesToWait
.Lfe49:
	.size	 ScriptCmd_waitbgfadeout,.Lfe49-ScriptCmd_waitbgfadeout
	.align	2, 0
	.type	 ScriptCmd_waitbgfadein,function
	.thumb_func
ScriptCmd_waitbgfadein:
	push	{lr}
	ldr	r0, .L472
	ldrb	r2, [r0]
	cmp	r2, #0
	bne	.L470	@cond_branch
	ldr	r0, .L472+0x4
	ldr	r1, [r0]
	add	r1, r1, #0x1
	str	r1, [r0]
	ldr	r0, .L472+0x8
	strb	r2, [r0]
	b	.L471
.L473:
	.align	2, 0
.L472:
	.word	gUnknown_0202F7C5
	.word	gBattleAnimScriptPtr
	.word	gAnimFramesToWait
.L470:
	ldr	r1, .L474
	mov	r0, #0x1
	strb	r0, [r1]
.L471:
	pop	{r0}
	bx	r0
.L475:
	.align	2, 0
.L474:
	.word	gAnimFramesToWait
.Lfe50:
	.size	 ScriptCmd_waitbgfadein,.Lfe50-ScriptCmd_waitbgfadein
	.align	2, 0
	.type	 ScriptCmd_changebg,function
	.thumb_func
ScriptCmd_changebg:
	push	{r4, lr}
	ldr	r4, .L477
	ldr	r1, [r4]
	add	r0, r1, #0x1
	str	r0, [r4]
	ldrb	r0, [r1, #0x1]
	bl	sub_8076DB8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L478:
	.align	2, 0
.L477:
	.word	gBattleAnimScriptPtr
.Lfe51:
	.size	 ScriptCmd_changebg,.Lfe51-ScriptCmd_changebg
	.align	2, 0
	.globl	sub_8076F98
	.type	 sub_8076F98,function
	.thumb_func
sub_8076F98:
	.syntax unified
    push {r4,lr}
    lsls r0, 24
    lsrs r4, r0, 24
    bl NotInBattle
    lsls r0, 24
    cmp r0, 0
    bne _08076FDC
    ldr r0, _08076FD4 @ =gBattleAnimBankAttacker
    ldrb r2, [r0]
    lsls r0, r2, 1
    adds r0, r2
    lsls r0, 2
    ldr r1, _08076FD8 @ =gSharedMem + 0x17810
    adds r0, r1
    ldrb r1, [r0]
    movs r0, 0x10
    ands r0, r1
    cmp r0, 0
    beq _08076FDC
    adds r0, r2, 0
    bl GetBankSide
    lsls r0, 24
    movs r4, 0xC0
    cmp r0, 0
    beq _0807706E
    movs r4, 0x3F
    b _0807706E
    .align 2, 0
_08076FD4: .4byte gBattleAnimBankAttacker
_08076FD8: .4byte gSharedMem + 0x17810
_08076FDC:
    bl NotInBattle
    lsls r0, 24
    cmp r0, 0
    beq _08077004
    ldr r0, _08076FFC @ =gBattleAnimBankAttacker
    ldr r1, _08077000 @ =gBattleAnimBankTarget
    ldrb r0, [r0]
    ldrb r1, [r1]
    cmp r0, r1
    bne _08077068
    cmp r0, 0x2
    bne _08077068
    cmp r4, 0x3F
    beq _0807707A
    b _08077068
    .align 2, 0
_08076FFC: .4byte gBattleAnimBankAttacker
_08077000: .4byte gBattleAnimBankTarget
_08077004:
    ldr r0, _0807702C @ =gBattleAnimBankAttacker
    ldrb r0, [r0]
    bl GetBankSide
    lsls r0, 24
    cmp r0, 0
    bne _08077042
    ldr r0, _08077030 @ =gBattleAnimBankTarget
    ldrb r0, [r0]
    bl GetBankSide
    lsls r0, 24
    cmp r0, 0
    bne _0807706E
    lsls r0, r4, 24
    asrs r1, r0, 24
    cmp r1, 0x3F
    bne _08077034
    movs r4, 0xC0
    b _0807706E
    .align 2, 0
_0807702C: .4byte gBattleAnimBankAttacker
_08077030: .4byte gBattleAnimBankTarget
_08077034:
    movs r0, 0x40
    negs r0, r0
    cmp r1, r0
    beq _0807706E
    negs r0, r1
    lsls r0, 24
    b _0807706C
_08077042:
    ldr r0, _08077064 @ =gBattleAnimBankTarget
    ldrb r0, [r0]
    bl GetBankSide
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    bne _08077068
    lsls r0, r4, 24
    asrs r0, 24
    movs r1, 0x40
    negs r1, r1
    cmp r0, r1
    bne _0807706E
    movs r4, 0x3F
    b _0807706E
    .align 2, 0
_08077064: .4byte gBattleAnimBankTarget
_08077068:
    lsls r0, r4, 24
    negs r0, r0
_0807706C:
    lsrs r4, r0, 24
_0807706E:
    lsls r0, r4, 24
    asrs r0, 24
    cmp r0, 0x3F
    ble _0807707A
    movs r4, 0x3F
    b _08077088
_0807707A:
    lsls r0, r4, 24
    asrs r0, 24
    movs r1, 0x40
    negs r1, r1
    cmp r0, r1
    bge _08077088
    movs r4, 0xC0
_08077088:
    lsls r0, r4, 24
    asrs r0, 24
    pop {r4}
    pop {r1}
    bx r1
    .syntax divided

	.code	16
.Lfe52:
	.size	 sub_8076F98,.Lfe52-sub_8076F98
	.align	2, 0
	.globl	sub_8077094
	.type	 sub_8077094,function
	.thumb_func
sub_8077094:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L481	@cond_branch
	ldr	r0, .L487
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L487+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L481	@cond_branch
	add	r0, r2, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r4, #0xc0
	cmp	r0, #0
	beq	.L484	@cond_branch
	mov	r4, #0x3f
	b	.L484
.L488:
	.align	2, 0
.L487:
	.word	gBattleAnimBankAttacker
	.word	gSharedMem+0x17810
.L481:
	ldr	r0, .L489
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L486	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L484	@cond_branch
.L486:
	lsl	r0, r4, #0x18
	neg	r0, r0
	lsr	r4, r0, #0x18
.L484:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L490:
	.align	2, 0
.L489:
	.word	gBattleAnimBankAttacker
.Lfe53:
	.size	 sub_8077094,.Lfe53-sub_8077094
	.align	2, 0
	.globl	sub_8077104
	.type	 sub_8077104,function
	.thumb_func
sub_8077104:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x3f
	ble	.L492	@cond_branch
	mov	r1, #0x3f
	b	.L493
.L492:
	mov	r0, #0x40
	neg	r0, r0
	cmp	r2, r0
	bge	.L493	@cond_branch
	ldr	r1, .L495
.L493:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L496:
	.align	2, 0
.L495:
	.word	0xffc0
.Lfe54:
	.size	 sub_8077104,.Lfe54-sub_8077104
	.align	2, 0
	.globl	sub_807712C
	.type	 sub_807712C,function
	.thumb_func
sub_807712C:
	push	{lr}
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r3, r2, #0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bge	.L498	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L504	@cond_branch
	b	.L502
.L498:
	cmp	r0, r1
	ble	.L501	@cond_branch
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L502	@cond_branch
	neg	r0, r0
.L502:
	neg	r0, r0
.L504:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L500
.L501:
	mov	r0, #0x0
.L500:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe55:
	.size	 sub_807712C,.Lfe55-sub_807712C
	.align	2, 0
	.type	 ScriptCmd_panse_19,function
	.thumb_func
ScriptCmd_panse_19:
	push	{r4, r5, lr}
	ldr	r5, .L506
	ldr	r0, [r5]
	add	r1, r0, #0x1
	str	r1, [r5]
	ldrb	r4, [r0, #0x1]
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	bl	sub_8076F98
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r4, #0
	bl	PlaySE12WithPanning
	ldr	r0, [r5]
	add	r0, r0, #0x3
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L507:
	.align	2, 0
.L506:
	.word	gBattleAnimScriptPtr
.Lfe56:
	.size	 ScriptCmd_panse_19,.Lfe56-ScriptCmd_panse_19
	.align	2, 0
	.type	 ScriptCmd_setpan,function
	.thumb_func
ScriptCmd_setpan:
	push	{r4, lr}
	ldr	r4, .L509
	ldr	r1, [r4]
	add	r0, r1, #0x1
	str	r0, [r4]
	mov	r0, #0x1
	ldrsb	r0, [r1, r0]
	bl	sub_8076F98
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	SE12PanpotControl
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L510:
	.align	2, 0
.L509:
	.word	gBattleAnimScriptPtr
.Lfe57:
	.size	 ScriptCmd_setpan,.Lfe57-ScriptCmd_setpan
	.align	2, 0
	.type	 ScriptCmd_panse_1B,function
	.thumb_func
ScriptCmd_panse_1B:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L512
	mov	sl, r0
	ldr	r0, [r0]
	add	r1, r0, #0x1
	mov	r2, sl
	str	r1, [r2]
	ldrb	r0, [r0, #0x1]
	mov	r9, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x8
	mov	r2, r9
	orr	r2, r2, r0
	mov	r9, r2
	ldrb	r4, [r1, #0x3]
	ldrb	r6, [r1, #0x4]
	ldrb	r7, [r1, #0x5]
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	bl	sub_8076F98
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	add	r0, r4, #0
	bl	sub_8076F98
	mov	r8, r0
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r8, r0
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	add	r0, r5, #0
	mov	r1, r8
	add	r2, r6, #0
	bl	sub_807712C
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L512+0x4
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L512+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r5, [r1, #0x8]
	mov	r2, r8
	strh	r2, [r1, #0xa]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	strh	r4, [r1, #0xc]
	strh	r7, [r1, #0xe]
	strh	r5, [r1, #0x10]
	mov	r0, r9
	add	r1, r5, #0
	bl	PlaySE12WithPanning
	ldr	r1, .L512+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, sl
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L513:
	.align	2, 0
.L512:
	.word	gBattleAnimScriptPtr
	.word	c3_08073CEC
	.word	gTasks
	.word	gAnimSoundTaskCount
.Lfe58:
	.size	 ScriptCmd_panse_1B,.Lfe58-ScriptCmd_panse_1B
	.align	2, 0
	.type	 c3_08073CEC,function
	.thumb_func
c3_08073CEC:
	.syntax unified
    push {r4-r7,lr}
    lsls r0, 24
    lsrs r5, r0, 24
    movs r7, 0
    ldr r1, _080772D4 @ =gTasks
    lsls r0, r5, 2
    adds r0, r5
    lsls r0, 3
    adds r2, r0, r1
    ldrh r0, [r2, 0x18]
    adds r1, r0, 0x1
    strh r1, [r2, 0x18]
    lsls r0, 16
    asrs r0, 16
    movs r3, 0xE
    ldrsh r1, [r2, r3]
    cmp r0, r1
    blt _08077314
    strh r7, [r2, 0x18]
    ldrh r6, [r2, 0x8]
    ldrh r3, [r2, 0xA]
    movs r4, 0x10
    ldrsh r0, [r2, r4]
    movs r4, 0xC
    ldrsh r1, [r2, r4]
    adds r0, r1
    lsls r0, 16
    lsrs r4, r0, 16
    strh r4, [r2, 0x10]
    cmp r1, 0
    bne _080772D8
    lsls r2, r3, 16
    b _080772FC
    .align 2, 0
_080772D4: .4byte gTasks
_080772D8:
    lsls r1, r6, 16
    lsls r0, r3, 16
    asrs r3, r0, 16
    adds r2, r0, 0
    cmp r1, r2
    bge _080772EE
    lsls r0, r4, 16
    asrs r0, 16
    cmp r0, r3
    blt _080772F8
    b _080772FC
_080772EE:
    lsls r0, r4, 16
    asrs r0, 16
    cmp r0, r3
    bgt _080772F8
    movs r7, 0x1
_080772F8:
    cmp r7, 0
    beq _0807730C
_080772FC:
    lsrs r4, r2, 16
    adds r0, r5, 0
    bl DestroyTask
    ldr r1, _0807731C @ =gAnimSoundTaskCount
    ldrb r0, [r1]
    subs r0, 0x1
    strb r0, [r1]
_0807730C:
    lsls r0, r4, 24
    asrs r0, 24
    bl SE12PanpotControl
_08077314:
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_0807731C: .4byte gAnimSoundTaskCount
    .syntax divided

	.code	16
.Lfe59:
	.size	 c3_08073CEC,.Lfe59-c3_08073CEC
	.align	2, 0
	.type	 ScriptCmd_panse_26,function
	.thumb_func
ScriptCmd_panse_26:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	ldr	r0, .L516
	mov	r9, r0
	ldr	r0, [r0]
	add	r1, r0, #0x1
	mov	r2, r9
	str	r1, [r2]
	ldrb	r0, [r0, #0x1]
	mov	r8, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x8
	mov	r2, r8
	orr	r2, r2, r0
	mov	r8, r2
	ldrb	r4, [r1, #0x2]
	ldrb	r5, [r1, #0x3]
	ldrb	r6, [r1, #0x4]
	ldrb	r1, [r1, #0x5]
	mov	sl, r1
	ldr	r0, .L516+0x4
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L516+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	strh	r4, [r1, #0x8]
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	strh	r5, [r1, #0xa]
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	strh	r6, [r1, #0xc]
	mov	r0, sl
	strh	r0, [r1, #0xe]
	strh	r4, [r1, #0x10]
	mov	r0, r8
	add	r1, r4, #0
	bl	PlaySE12WithPanning
	ldr	r1, .L516+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L517:
	.align	2, 0
.L516:
	.word	gBattleAnimScriptPtr
	.word	c3_08073CEC
	.word	gTasks
	.word	gAnimSoundTaskCount
.Lfe60:
	.size	 ScriptCmd_panse_26,.Lfe60-ScriptCmd_panse_26
	.align	2, 0
	.type	 ScriptCmd_panse_27,function
	.thumb_func
ScriptCmd_panse_27:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L519
	mov	sl, r0
	ldr	r0, [r0]
	add	r1, r0, #0x1
	mov	r2, sl
	str	r1, [r2]
	ldrb	r0, [r0, #0x1]
	mov	r9, r0
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x8
	mov	r2, r9
	orr	r2, r2, r0
	mov	r9, r2
	ldrb	r4, [r1, #0x3]
	ldrb	r0, [r1, #0x4]
	mov	r8, r0
	ldrb	r7, [r1, #0x5]
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	bl	sub_8077094
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	add	r0, r4, #0
	bl	sub_8077094
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, r8
	bl	sub_8077094
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L519+0x4
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L519+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	strh	r6, [r1, #0x8]
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	strh	r5, [r1, #0xa]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	strh	r4, [r1, #0xc]
	strh	r7, [r1, #0xe]
	strh	r6, [r1, #0x10]
	mov	r0, r9
	add	r1, r6, #0
	bl	PlaySE12WithPanning
	ldr	r1, .L519+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r2, sl
	ldr	r0, [r2]
	add	r0, r0, #0x6
	str	r0, [r2]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	gBattleAnimScriptPtr
	.word	c3_08073CEC
	.word	gTasks
	.word	gAnimSoundTaskCount
.Lfe61:
	.size	 ScriptCmd_panse_27,.Lfe61-ScriptCmd_panse_27
	.align	2, 0
	.type	 ScriptCmd_panse_1C,function
	.thumb_func
ScriptCmd_panse_1C:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r6, .L522
	ldr	r0, [r6]
	add	r1, r0, #0x1
	str	r1, [r6]
	ldrb	r5, [r0, #0x1]
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	ldrb	r0, [r1, #0x3]
	mov	r8, r0
	ldrb	r2, [r1, #0x4]
	mov	r9, r2
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	bl	sub_8076F98
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L522+0x4
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L522+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r5, [r1, #0x8]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	strh	r4, [r1, #0xa]
	mov	r2, r8
	strh	r2, [r1, #0xc]
	mov	r2, r9
	strh	r2, [r1, #0xe]
	mov	r2, r8
	strh	r2, [r1, #0x18]
	ldr	r1, [r1]
	bl	_call_via_r1
	ldr	r1, .L522+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, #0x5
	str	r0, [r6]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L523:
	.align	2, 0
.L522:
	.word	gBattleAnimScriptPtr
	.word	sub_80774FC
	.word	gTasks
	.word	gAnimSoundTaskCount
.Lfe62:
	.size	 ScriptCmd_panse_1C,.Lfe62-ScriptCmd_panse_1C
	.align	2, 0
	.type	 sub_80774FC,function
	.thumb_func
sub_80774FC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L527
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrh	r0, [r2, #0x18]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0xc
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	blt	.L525	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x18]
	ldrh	r0, [r2, #0x8]
	ldrb	r1, [r2, #0xa]
	ldrh	r4, [r2, #0xe]
	sub	r4, r4, #0x1
	strh	r4, [r2, #0xe]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	cmp	r4, #0
	bne	.L525	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r1, .L527+0x4
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L525:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gTasks
	.word	gAnimSoundTaskCount
.Lfe63:
	.size	 sub_80774FC,.Lfe63-sub_80774FC
	.align	2, 0
	.type	 ScriptCmd_panse_1D,function
	.thumb_func
ScriptCmd_panse_1D:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r6, .L530
	ldr	r0, [r6]
	add	r1, r0, #0x1
	str	r1, [r6]
	ldrb	r5, [r0, #0x1]
	ldrb	r0, [r1, #0x1]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	ldrb	r0, [r1, #0x3]
	mov	r8, r0
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	bl	sub_8076F98
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L530+0x4
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L530+0x8
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r5, [r1, #0x8]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	strh	r4, [r1, #0xa]
	mov	r0, r8
	strh	r0, [r1, #0xc]
	ldr	r1, .L530+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, #0x4
	str	r0, [r6]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L531:
	.align	2, 0
.L530:
	.word	gBattleAnimScriptPtr
	.word	sub_80775CC
	.word	gTasks
	.word	gAnimSoundTaskCount
.Lfe64:
	.size	 ScriptCmd_panse_1D,.Lfe64-ScriptCmd_panse_1D
	.align	2, 0
	.type	 sub_80775CC,function
	.thumb_func
sub_80775CC:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L534
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrh	r0, [r2, #0xc]
	sub	r1, r0, #0x1
	strh	r1, [r2, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L533	@cond_branch
	ldrh	r0, [r2, #0x8]
	mov	r1, #0xa
	ldrsb	r1, [r2, r1]
	bl	PlaySE12WithPanning
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r1, .L534+0x4
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L533:
	pop	{r4}
	pop	{r0}
	bx	r0
.L535:
	.align	2, 0
.L534:
	.word	gTasks
	.word	gAnimSoundTaskCount
.Lfe65:
	.size	 sub_80775CC,.Lfe65-sub_80775CC
	.align	2, 0
	.type	 ScriptCmd_createtask_1F,function
	.thumb_func
ScriptCmd_createtask_1F:
	push	{r4, r5, r6, lr}
	ldr	r4, .L542
	ldr	r1, [r4]
	add	r3, r1, #0x1
	str	r3, [r4]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r3, #0x1]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	add	r0, r1, #0x5
	str	r0, [r4]
	ldrb	r0, [r1, #0x5]
	add	r1, r1, #0x6
	str	r1, [r4]
	cmp	r0, #0
	beq	.L538	@cond_branch
	add	r5, r4, #0
	ldr	r4, .L542+0x4
	add	r3, r0, #0
.L540:
	ldr	r2, [r5]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r4]
	add	r2, r2, #0x2
	str	r2, [r5]
	add	r4, r4, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L540	@cond_branch
.L538:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	_call_via_r6
	ldr	r1, .L542+0x8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L543:
	.align	2, 0
.L542:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimArgs
	.word	gAnimSoundTaskCount
.Lfe66:
	.size	 ScriptCmd_createtask_1F,.Lfe66-ScriptCmd_createtask_1F
	.align	2, 0
	.type	 ScriptCmd_waitsound,function
	.thumb_func
ScriptCmd_waitsound:
	push	{r4, r5, lr}
	ldr	r0, .L551
	ldrb	r5, [r0]
	cmp	r5, #0
	bne	.L545	@cond_branch
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L547	@cond_branch
	ldr	r4, .L551+0x4
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5a
	bls	.L548	@cond_branch
	ldr	r0, .L551+0x8
	bl	m4aMPlayStop
	ldr	r0, .L551+0xc
	bl	m4aMPlayStop
	strh	r5, [r4]
	b	.L546
.L552:
	.align	2, 0
.L551:
	.word	gAnimSoundTaskCount
	.word	gSoundAnimFramesToWait
	.word	gMPlay_SE1
	.word	gMPlay_SE2
.L545:
	ldr	r1, .L553
	mov	r0, #0x0
	strh	r0, [r1]
.L548:
	ldr	r1, .L553+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L546
.L554:
	.align	2, 0
.L553:
	.word	gSoundAnimFramesToWait
	.word	gAnimFramesToWait
.L547:
	ldr	r0, .L555
	mov	r2, #0x0
	strh	r1, [r0]
	ldr	r1, .L555+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r0, .L555+0x8
	strb	r2, [r0]
.L546:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L556:
	.align	2, 0
.L555:
	.word	gSoundAnimFramesToWait
	.word	gBattleAnimScriptPtr
	.word	gAnimFramesToWait
.Lfe67:
	.size	 ScriptCmd_waitsound,.Lfe67-ScriptCmd_waitsound
	.align	2, 0
	.type	 ScriptCmd_jumpvareq,function
	.thumb_func
ScriptCmd_jumpvareq:
	push	{r4, r5, r6, lr}
	ldr	r5, .L560
	ldr	r4, [r5]
	add	r3, r4, #0x1
	str	r3, [r5]
	ldrb	r2, [r4, #0x1]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L560+0x4
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r6, #0x0
	ldrsh	r0, [r2, r6]
	cmp	r1, r0
	bne	.L558	@cond_branch
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r5]
	b	.L559
.L561:
	.align	2, 0
.L560:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimArgs
.L558:
	add	r0, r4, #0
	add	r0, r0, #0x8
	str	r0, [r5]
.L559:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 ScriptCmd_jumpvareq,.Lfe68-ScriptCmd_jumpvareq
	.align	2, 0
	.type	 ScriptCmd_jumpunkcond,function
	.thumb_func
ScriptCmd_jumpunkcond:
	push	{r4, lr}
	ldr	r4, .L565
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L563	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r4]
	b	.L564
.L566:
	.align	2, 0
.L565:
	.word	gBattleAnimScriptPtr
.L563:
	ldr	r0, [r4]
	add	r0, r0, #0x4
	str	r0, [r4]
.L564:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 ScriptCmd_jumpunkcond,.Lfe69-ScriptCmd_jumpunkcond
	.align	2, 0
	.type	 ScriptCmd_monbgprio_28,function
	.thumb_func
ScriptCmd_monbgprio_28:
	push	{r4, lr}
	ldr	r0, .L573
	ldr	r1, [r0]
	ldrb	r2, [r1, #0x1]
	add	r1, r1, #0x2
	str	r1, [r0]
	cmp	r2, #0
	beq	.L568	@cond_branch
	ldr	r0, .L573+0x4
	b	.L572
.L574:
	.align	2, 0
.L573:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimBankTarget
.L568:
	ldr	r0, .L575
.L572:
	ldrb	r0, [r0]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L570	@cond_branch
	cmp	r4, #0
	beq	.L571	@cond_branch
	cmp	r4, #0x3
	bne	.L570	@cond_branch
.L571:
	ldr	r3, .L575+0x4
	ldrb	r2, [r3]
	mov	r1, #0x4
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r2, .L575+0x8
	ldrb	r0, [r2]
	and	r1, r1, r0
	mov	r0, #0x2
	orr	r1, r1, r0
	strb	r1, [r2]
.L570:
	pop	{r4}
	pop	{r0}
	bx	r0
.L576:
	.align	2, 0
.L575:
	.word	gBattleAnimBankAttacker
	.word	0x400000a
	.word	0x400000c
.Lfe70:
	.size	 ScriptCmd_monbgprio_28,.Lfe70-ScriptCmd_monbgprio_28
	.align	2, 0
	.type	 ScriptCmd_monbgprio_29,function
	.thumb_func
ScriptCmd_monbgprio_29:
	push	{lr}
	ldr	r0, .L579
	ldr	r1, [r0]
	add	r1, r1, #0x1
	str	r1, [r0]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L578	@cond_branch
	ldr	r3, .L579+0x4
	ldrb	r2, [r3]
	mov	r1, #0x4
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r2, .L579+0x8
	ldrb	r0, [r2]
	and	r1, r1, r0
	mov	r0, #0x2
	orr	r1, r1, r0
	strb	r1, [r2]
.L578:
	pop	{r0}
	bx	r0
.L580:
	.align	2, 0
.L579:
	.word	gBattleAnimScriptPtr
	.word	0x400000a
	.word	0x400000c
.Lfe71:
	.size	 ScriptCmd_monbgprio_29,.Lfe71-ScriptCmd_monbgprio_29
	.align	2, 0
	.type	 ScriptCmd_monbgprio_2A,function
	.thumb_func
ScriptCmd_monbgprio_2A:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L587
	ldr	r0, [r1]
	ldrb	r6, [r0, #0x1]
	add	r0, r0, #0x2
	str	r0, [r1]
	ldr	r7, .L587+0x4
	ldrb	r0, [r7]
	bl	GetBankSide
	add	r4, r0, #0
	ldr	r5, .L587+0x8
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L582	@cond_branch
	cmp	r6, #0
	beq	.L583	@cond_branch
	ldrb	r0, [r5]
	b	.L584
.L588:
	.align	2, 0
.L587:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
.L583:
	ldrb	r0, [r7]
.L584:
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L582	@cond_branch
	cmp	r4, #0
	beq	.L586	@cond_branch
	cmp	r4, #0x3
	bne	.L582	@cond_branch
.L586:
	ldr	r3, .L589
	ldrb	r2, [r3]
	mov	r1, #0x4
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r2, .L589+0x4
	ldrb	r0, [r2]
	and	r1, r1, r0
	mov	r0, #0x2
	orr	r1, r1, r0
	strb	r1, [r2]
.L582:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L590:
	.align	2, 0
.L589:
	.word	0x400000a
	.word	0x400000c
.Lfe72:
	.size	 ScriptCmd_monbgprio_2A,.Lfe72-ScriptCmd_monbgprio_2A
	.align	2, 0
	.type	 ScriptCmd_invisible,function
	.thumb_func
ScriptCmd_invisible:
	push	{r4, lr}
	ldr	r4, .L593
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L592	@cond_branch
	ldr	r1, .L593+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L592:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	gBattleAnimScriptPtr
	.word	gSprites
.Lfe73:
	.size	 ScriptCmd_invisible,.Lfe73-ScriptCmd_invisible
	.align	2, 0
	.type	 ScriptCmd_visible,function
	.thumb_func
ScriptCmd_visible:
	push	{r4, lr}
	ldr	r4, .L597
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L596	@cond_branch
	ldr	r1, .L597+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L596:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L598:
	.align	2, 0
.L597:
	.word	gBattleAnimScriptPtr
	.word	gSprites
.Lfe74:
	.size	 ScriptCmd_visible,.Lfe74-ScriptCmd_visible
	.align	2, 0
	.type	 ScriptCmd_doublebattle_2D,function
	.thumb_func
ScriptCmd_doublebattle_2D:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L608
	ldr	r0, [r1]
	ldrb	r7, [r0, #0x1]
	add	r0, r0, #0x2
	str	r0, [r1]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L600	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L600	@cond_branch
	ldr	r6, .L608+0x4
	ldrb	r0, [r6]
	bl	GetBankSide
	add	r4, r0, #0
	ldr	r5, .L608+0x8
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L600	@cond_branch
	cmp	r7, #0
	bne	.L601	@cond_branch
	ldrb	r0, [r6]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	b	.L607
.L609:
	.align	2, 0
.L608:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
.L601:
	ldrb	r0, [r5]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
.L607:
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L600	@cond_branch
	ldr	r1, .L610
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	cmp	r4, #0x2
	bne	.L604	@cond_branch
	ldrb	r0, [r2, #0x5]
	mov	r1, #0xc
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L604:
	cmp	r4, #0x1
	bne	.L605	@cond_branch
	mov	r0, #0x0
	bl	sub_8076464
	b	.L600
.L611:
	.align	2, 0
.L610:
	.word	gSprites
.L605:
	mov	r0, #0x1
	bl	sub_8076464
.L600:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 ScriptCmd_doublebattle_2D,.Lfe75-ScriptCmd_doublebattle_2D
	.align	2, 0
	.type	 ScriptCmd_doublebattle_2E,function
	.thumb_func
ScriptCmd_doublebattle_2E:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L618
	ldr	r0, [r1]
	ldrb	r7, [r0, #0x1]
	add	r0, r0, #0x2
	str	r0, [r1]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L613	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L613	@cond_branch
	ldr	r6, .L618+0x4
	ldrb	r0, [r6]
	bl	GetBankSide
	add	r4, r0, #0
	ldr	r5, .L618+0x8
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L613	@cond_branch
	cmp	r7, #0
	bne	.L614	@cond_branch
	ldrb	r0, [r6]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	b	.L617
.L619:
	.align	2, 0
.L618:
	.word	gBattleAnimScriptPtr
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
.L614:
	ldrb	r0, [r5]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
.L617:
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L613	@cond_branch
	cmp	r4, #0x2
	bne	.L613	@cond_branch
	ldr	r1, .L620
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L613:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L621:
	.align	2, 0
.L620:
	.word	gSprites
.Lfe76:
	.size	 ScriptCmd_doublebattle_2E,.Lfe76-ScriptCmd_doublebattle_2E
	.align	2, 0
	.type	 ScriptCmd_stopsound,function
	.thumb_func
ScriptCmd_stopsound:
	push	{lr}
	ldr	r0, .L623
	bl	m4aMPlayStop
	ldr	r0, .L623+0x4
	bl	m4aMPlayStop
	ldr	r1, .L623+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L624:
	.align	2, 0
.L623:
	.word	gMPlay_SE1
	.word	gMPlay_SE2
	.word	gBattleAnimScriptPtr
.Lfe77:
	.size	 ScriptCmd_stopsound,.Lfe77-ScriptCmd_stopsound
	.comm	gSoundAnimFramesToWait, 4	@ 2
	.comm	gBattleAnimArgs, 16	@ 16
	.comm	gAnimSpriteIndexArray, 16	@ 16
.text
	.align	2, 0
