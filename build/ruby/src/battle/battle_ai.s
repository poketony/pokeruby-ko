@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gAIScriptPtr
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gAIScriptPtr,object
	.size	 gAIScriptPtr,4
gAIScriptPtr:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattleAICmdTable,object
sBattleAICmdTable:
	.word	BattleAICmd_if_random_less_than
	.word	BattleAICmd_if_random_greater_than
	.word	BattleAICmd_if_random_equal
	.word	BattleAICmd_if_random_not_equal
	.word	BattleAICmd_score
	.word	BattleAICmd_if_hp_less_than
	.word	BattleAICmd_if_hp_more_than
	.word	BattleAICmd_if_hp_equal
	.word	BattleAICmd_if_hp_not_equal
	.word	BattleAICmd_if_status
	.word	BattleAICmd_if_not_status
	.word	BattleAICmd_if_status2
	.word	BattleAICmd_if_not_status2
	.word	BattleAICmd_if_status3
	.word	BattleAICmd_if_not_status3
	.word	BattleAICmd_if_status4
	.word	BattleAICmd_if_not_status4
	.word	BattleAICmd_if_less_than
	.word	BattleAICmd_if_more_than
	.word	BattleAICmd_if_equal
	.word	BattleAICmd_if_not_equal
	.word	BattleAICmd_if_less_than_32
	.word	BattleAICmd_if_more_than_32
	.word	BattleAICmd_if_equal_32
	.word	BattleAICmd_if_not_equal_32
	.word	BattleAICmd_if_move
	.word	BattleAICmd_if_not_move
	.word	BattleAICmd_if_in_bytes
	.word	BattleAICmd_if_not_in_bytes
	.word	BattleAICmd_if_in_words
	.word	BattleAICmd_if_not_in_words
	.word	BattleAICmd_if_user_can_damage
	.word	BattleAICmd_if_user_cant_damage
	.word	BattleAICmd_get_turn_count
	.word	BattleAICmd_get_type
	.word	BattleAICmd_get_move_power
	.word	BattleAICmd_is_most_powerful_move
	.word	BattleAICmd_get_move
	.word	BattleAICmd_if_arg_equal
	.word	BattleAICmd_if_arg_not_equal
	.word	BattleAICmd_if_would_go_first
	.word	BattleAICmd_if_would_not_go_first
	.word	BattleAICmd_nullsub_2A
	.word	BattleAICmd_nullsub_2B
	.word	BattleAICmd_count_alive_pokemon
	.word	BattleAICmd_get_considered_move
	.word	BattleAICmd_get_considered_move_effect
	.word	BattleAICmd_get_ability
	.word	BattleAICmd_get_highest_possible_damage
	.word	BattleAICmd_if_damage_bonus
	.word	BattleAICmd_nullsub_32
	.word	BattleAICmd_nullsub_33
	.word	BattleAICmd_if_status_in_party
	.word	BattleAICmd_if_status_not_in_party
	.word	BattleAICmd_get_weather
	.word	BattleAICmd_if_effect
	.word	BattleAICmd_if_not_effect
	.word	BattleAICmd_if_stat_level_less_than
	.word	BattleAICmd_if_stat_level_more_than
	.word	BattleAICmd_if_stat_level_equal
	.word	BattleAICmd_if_stat_level_not_equal
	.word	BattleAICmd_if_can_faint
	.word	BattleAICmd_if_cant_faint
	.word	BattleAICmd_if_has_move
	.word	BattleAICmd_if_dont_have_move
	.word	BattleAICmd_if_move_effect
	.word	BattleAICmd_if_not_move_effect
	.word	BattleAICmd_if_last_move_did_damage
	.word	BattleAICmd_if_encored
	.word	BattleAICmd_flee
	.word	BattleAICmd_if_random_100
	.word	BattleAICmd_watch
	.word	BattleAICmd_get_hold_effect
	.word	BattleAICmd_get_gender
	.word	BattleAICmd_is_first_turn
	.word	BattleAICmd_get_stockpile_count
	.word	BattleAICmd_is_double_battle
	.word	BattleAICmd_get_used_item
	.word	BattleAICmd_get_move_type_from_result
	.word	BattleAICmd_get_move_power_from_result
	.word	BattleAICmd_get_move_effect_from_result
	.word	BattleAICmd_get_protect_count
	.word	BattleAICmd_nullsub_52
	.word	BattleAICmd_nullsub_53
	.word	BattleAICmd_nullsub_54
	.word	BattleAICmd_nullsub_55
	.word	BattleAICmd_nullsub_56
	.word	BattleAICmd_nullsub_57
	.word	BattleAICmd_call
	.word	BattleAICmd_jump
	.word	BattleAICmd_end
	.word	BattleAICmd_if_level_compare
	.word	BattleAICmd_if_taunted
	.word	BattleAICmd_if_not_taunted
	.size	 sBattleAICmdTable,376
	.globl	sDiscouragedPowerfulMoveEffects
	.align	1, 0
	.type	 sDiscouragedPowerfulMoveEffects,object
sDiscouragedPowerfulMoveEffects:
	.short	0x7
	.short	0x8
	.short	0x27
	.short	0x4b
	.short	0x50
	.short	0x91
	.short	0x97
	.short	0xa1
	.short	0xaa
	.short	0xb6
	.short	0xbe
	.short	0xcc
	.short	0xffff
	.size	 sDiscouragedPowerfulMoveEffects,26
.text
	.align	2, 0
	.globl	BattleAI_HandleItemUseBeforeAISetup
	.type	 BattleAI_HandleItemUseBeforeAISetup,function
	.thumb_func
BattleAI_HandleItemUseBeforeAISetup:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L15
	mov	r3, #0x0
	ldr	r4, .L15+0x4
	mov	r1, #0x0
.L6:
	add	r0, r2, r3
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x2f
	bls	.L6	@cond_branch
	ldrh	r2, [r4]
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L8	@cond_branch
	ldr	r5, .L15+0x8
	ldrh	r1, [r5]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L8	@cond_branch
	ldr	r0, .L15+0xc
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L8	@cond_branch
	mov	r3, #0x0
	ldr	r7, .L15+0x10
	ldr	r4, .L15+0x14
	add	r6, r4, #0
	sub	r6, r6, #0x8
.L12:
	lsl	r2, r3, #0x1
	ldrh	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r7
	ldrh	r2, [r2]
	cmp	r2, #0
	beq	.L11	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r2, [r0]
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L11:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L12	@cond_branch
.L8:
	bl	BattleAI_SetupAIData
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gSharedMem+0x16a00
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent
	.word	0x982
	.word	gTrainers+0x10
	.word	gSharedMem+0x16a2c
.Lfe1:
	.size	 BattleAI_HandleItemUseBeforeAISetup,.Lfe1-BattleAI_HandleItemUseBeforeAISetup
	.align	2, 0
	.globl	BattleAI_SetupAIData
	.type	 BattleAI_SetupAIData,function
	.thumb_func
BattleAI_SetupAIData:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L43
	mov	r4, #0x0
	ldr	r3, .L43+0x4
	mov	r1, #0x0
.L21:
	add	r0, r2, r4
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x1b
	bls	.L21	@cond_branch
	ldr	r0, .L43
	mov	r1, #0x64
	mov	r4, #0x3
	add	r0, r0, #0x7
.L26:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L26	@cond_branch
	ldrb	r0, [r3]
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L43
	add	r5, r0, #0x4
	ldr	r6, .L43+0x8
.L31:
	ldr	r0, [r6]
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L32	@cond_branch
	mov	r0, #0x0
	strb	r0, [r5]
.L32:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	strb	r1, [r5, #0x14]
	add	r5, r5, #0x1
	add	r6, r6, #0x4
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L31	@cond_branch
	ldr	r0, .L43+0xc
	add	r0, r0, #0x20
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L43+0x10
	ldr	r0, .L43+0x4
	ldrb	r2, [r0]
	strb	r2, [r1]
	ldr	r0, .L43+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldr	r4, .L43+0x18
	bl	Random
	mov	r5, #0x2
	and	r0, r0, r5
	strb	r0, [r4]
	ldr	r0, .L43+0x1c
	ldrb	r1, [r0]
	ldr	r2, .L43+0x8
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L36	@cond_branch
	eor	r3, r3, r5
	strb	r3, [r4]
	b	.L36
.L44:
	.align	2, 0
.L43:
	.word	gSharedMem+0x16800
	.word	gActiveBank
	.word	gBitTable
	.word	gSharedMem+0x16c00
	.word	gBankAttacker
	.word	gBattleTypeFlags
	.word	gBankTarget
	.word	gAbsentBankFlags
.L34:
	ldr	r0, .L45
	mov	r1, #0x1
	eor	r1, r1, r2
	strb	r1, [r0]
.L36:
	ldr	r0, .L45+0x4
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L37	@cond_branch
	ldr	r1, .L45+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x17
	str	r0, [r1, #0xc]
	b	.L38
.L46:
	.align	2, 0
.L45:
	.word	gBankTarget
	.word	gBattleTypeFlags
	.word	gSharedMem+0x16800
.L37:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L39	@cond_branch
	ldr	r1, .L47
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	str	r0, [r1, #0xc]
	b	.L38
.L48:
	.align	2, 0
.L47:
	.word	gSharedMem+0x16800
.L39:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldr	r1, .L49
	mov	r0, #0x80
	lsl	r0, r0, #0x18
	str	r0, [r1, #0xc]
	b	.L38
.L50:
	.align	2, 0
.L49:
	.word	gSharedMem+0x16800
.L41:
	ldr	r3, .L51
	ldr	r2, .L51+0x4
	ldr	r0, .L51+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3, #0xc]
.L38:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gSharedMem+0x16800
	.word	gTrainers
	.word	gTrainerBattleOpponent
.Lfe2:
	.size	 BattleAI_SetupAIData,.Lfe2-BattleAI_SetupAIData
	.align	2, 0
	.globl	BattleAI_GetAIActionToUse
	.type	 BattleAI_GetAIActionToUse,function
	.thumb_func
BattleAI_GetAIActionToUse:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	bl	sub_810745C
	ldr	r1, .L69
	ldr	r0, [r1, #0xc]
	cmp	r0, #0
	beq	.L55	@cond_branch
	add	r4, r1, #0
	mov	r5, #0x0
.L56:
	ldr	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L57	@cond_branch
	strb	r5, [r4]
	bl	BattleAI_DoAIProcessing
.L57:
	ldr	r1, [r4, #0xc]
	lsr	r1, r1, #0x1
	str	r1, [r4, #0xc]
	ldrb	r0, [r4, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x11]
	strb	r5, [r4, #0x1]
	cmp	r1, #0
	bne	.L56	@cond_branch
.L55:
	ldr	r7, .L69
	ldrb	r1, [r7, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L59	@cond_branch
	mov	r0, #0x4
	b	.L68
.L70:
	.align	2, 0
.L69:
	.word	gSharedMem+0x16800
.L59:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L60	@cond_branch
	mov	r0, #0x5
	b	.L68
.L60:
	mov	r5, #0x1
	mov	r0, sp
	ldrb	r1, [r7, #0x4]
	strb	r1, [r0]
	add	r0, sp, #0x4
	strb	r2, [r0]
	mov	r3, #0x1
	mov	r8, r0
	mov	r4, sp
	mov	r6, r8
	add	r2, r7, #0x5
.L64:
	ldrb	r1, [r4]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L65	@cond_branch
	mov	r5, #0x1
	ldrb	r0, [r2]
	strb	r0, [r4]
	strb	r3, [r6]
.L65:
	ldrb	r1, [r4]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L63	@cond_branch
	mov	r0, sp
	add	r1, r0, r5
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r1, r5, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r1, r6, r1
	strb	r3, [r1]
.L63:
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L64	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	add	r0, r0, r8
	ldrb	r0, [r0]
.L68:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 BattleAI_GetAIActionToUse,.Lfe3-BattleAI_GetAIActionToUse
	.align	2, 0
	.globl	BattleAI_DoAIProcessing
	.type	 BattleAI_DoAIProcessing,function
	.thumb_func
BattleAI_DoAIProcessing:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L91
	ldrb	r0, [r1]
	add	r6, r1, #0
	cmp	r0, #0x2
	beq	.L73	@cond_branch
	add	r4, r1, #0
	ldr	r7, .L91+0x4
.L74:
	ldrb	r0, [r4]
	cmp	r0, #0x1
	beq	.L80	@cond_branch
	cmp	r0, #0x1
	bgt	.L72	@cond_branch
	cmp	r0, #0
	bne	.L72	@cond_branch
	ldr	r1, .L91+0x8
	ldrb	r0, [r4, #0x11]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r7]
	ldr	r5, .L91+0xc
	ldrb	r3, [r4, #0x1]
	ldr	r0, .L91+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r3, r2
	add	r1, r5, #0
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L90	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
.L90:
	strh	r0, [r4, #0x2]
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L72
.L92:
	.align	2, 0
.L91:
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
	.word	BattleAIs
	.word	gBattleMons
	.word	gBankAttacker
.L80:
	ldrh	r1, [r1, #0x2]
	cmp	r1, #0
	beq	.L81	@cond_branch
	ldr	r1, .L93
	ldr	r0, [r7]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L82
.L94:
	.align	2, 0
.L93:
	.word	sBattleAICmdTable
.L81:
	add	r0, r4, #0x4
	ldrb	r2, [r4, #0x1]
	add	r0, r0, r2
	strb	r1, [r0]
	ldrb	r1, [r4, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r4, #0x10]
.L82:
	ldr	r1, .L95
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x1
	and	r0, r0, r2
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L72	@cond_branch
	ldrb	r0, [r6, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r6, #0x1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bhi	.L84	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L84	@cond_branch
	strb	r0, [r6]
	b	.L85
.L96:
	.align	2, 0
.L95:
	.word	gSharedMem+0x16800
.L84:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L85:
	ldrb	r1, [r4, #0x10]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r4, #0x10]
.L72:
	add	r1, r6, #0
	ldrb	r0, [r1]
	cmp	r0, #0x2
	bne	.L74	@cond_branch
.L73:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 BattleAI_DoAIProcessing,.Lfe4-BattleAI_DoAIProcessing
	.align	2, 0
	.globl	sub_810745C
	.type	 sub_810745C,function
	.thumb_func
sub_810745C:
	push	{r4, r5, r6, lr}
	mov	r2, #0x0
	ldr	r3, .L104
	ldr	r5, .L104+0x4
	ldr	r6, .L104+0x8
	add	r4, r3, #0
.L101:
	lsl	r0, r2, #0x1
	ldrb	r1, [r4]
	lsr	r1, r1, #0x1
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r1, r0, r5
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L100	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r1]
	b	.L97
.L105:
	.align	2, 0
.L104:
	.word	gBankTarget
	.word	gSharedMem+0x16a00
	.word	gLastUsedMove
.L100:
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L101	@cond_branch
.L97:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 sub_810745C,.Lfe5-sub_810745C
	.align	2, 0
	.globl	unref_sub_81074A0
	.type	 unref_sub_81074A0,function
	.thumb_func
unref_sub_81074A0:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L112
	lsr	r0, r0, #0x19
	mov	r2, #0x7
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	add	r0, r0, #0xe
	mov	r1, #0x0
.L110:
	strh	r1, [r0]
	sub	r0, r0, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L110	@cond_branch
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gSharedMem+0x16a00
.Lfe6:
	.size	 unref_sub_81074A0,.Lfe6-unref_sub_81074A0
	.align	2, 0
	.globl	RecordAbilityBattle
	.type	 RecordAbilityBattle,function
	.thumb_func
RecordAbilityBattle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L115	@cond_branch
	add	r0, r4, #0
	bl	GetBankIdentity
	ldr	r2, .L116
	mov	r1, #0x1
	and	r1, r1, r0
	add	r2, r2, #0x20
	add	r1, r1, r2
	strb	r5, [r1]
.L115:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	gSharedMem+0x16a00
.Lfe7:
	.size	 RecordAbilityBattle,.Lfe7-RecordAbilityBattle
	.align	2, 0
	.globl	RecordItemBattle
	.type	 RecordItemBattle,function
	.thumb_func
RecordItemBattle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L119	@cond_branch
	add	r0, r4, #0
	bl	GetBankIdentity
	ldr	r2, .L120
	mov	r1, #0x1
	and	r1, r1, r0
	add	r2, r2, #0x22
	add	r1, r1, r2
	strb	r5, [r1]
.L119:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gSharedMem+0x16a00
.Lfe8:
	.size	 RecordItemBattle,.Lfe8-RecordItemBattle
	.align	2, 0
	.type	 BattleAICmd_if_random_less_than,function
	.thumb_func
BattleAICmd_if_random_less_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L125
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bcs	.L123	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L124
.L126:
	.align	2, 0
.L125:
	.word	gAIScriptPtr
.L123:
	add	r0, r2, #0x6
	str	r0, [r3]
.L124:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 BattleAICmd_if_random_less_than,.Lfe9-BattleAICmd_if_random_less_than
	.align	2, 0
	.type	 BattleAICmd_if_random_greater_than,function
	.thumb_func
BattleAICmd_if_random_greater_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L130
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bls	.L128	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L129
.L131:
	.align	2, 0
.L130:
	.word	gAIScriptPtr
.L128:
	add	r0, r2, #0x6
	str	r0, [r3]
.L129:
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 BattleAICmd_if_random_greater_than,.Lfe10-BattleAICmd_if_random_greater_than
	.align	2, 0
	.type	 BattleAICmd_if_random_equal,function
	.thumb_func
BattleAICmd_if_random_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L135
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bne	.L133	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L134
.L136:
	.align	2, 0
.L135:
	.word	gAIScriptPtr
.L133:
	add	r0, r2, #0x6
	str	r0, [r3]
.L134:
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 BattleAICmd_if_random_equal,.Lfe11-BattleAICmd_if_random_equal
	.align	2, 0
	.type	 BattleAICmd_if_random_not_equal,function
	.thumb_func
BattleAICmd_if_random_not_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L140
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	beq	.L138	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L139
.L141:
	.align	2, 0
.L140:
	.word	gAIScriptPtr
.L138:
	add	r0, r2, #0x6
	str	r0, [r3]
.L139:
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 BattleAICmd_if_random_not_equal,.Lfe12-BattleAICmd_if_random_not_equal
	.align	2, 0
	.type	 BattleAICmd_score,function
	.thumb_func
BattleAICmd_score:
	push	{r4, r5, lr}
	ldr	r2, .L144
	ldrb	r1, [r2, #0x1]
	add	r3, r2, #0x4
	add	r1, r1, r3
	ldr	r4, .L144+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	ldrb	r5, [r1]
	add	r0, r0, r5
	strb	r0, [r1]
	ldrb	r0, [r2, #0x1]
	add	r1, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bge	.L143	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L143:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.Lfe13:
	.size	 BattleAICmd_score,.Lfe13-BattleAICmd_score
	.align	2, 0
	.type	 BattleAICmd_if_hp_less_than,function
	.thumb_func
BattleAICmd_if_hp_less_than:
	push	{r4, lr}
	ldr	r0, .L152
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L147	@cond_branch
	ldr	r0, .L152+0x4
	b	.L151
.L153:
	.align	2, 0
.L152:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L147:
	ldr	r0, .L154
.L151:
	ldrb	r1, [r0]
	ldr	r2, .L154+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bcs	.L149	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L150
.L155:
	.align	2, 0
.L154:
	.word	gBankTarget
	.word	gBattleMons
.L149:
	add	r0, r2, #0x7
	str	r0, [r4]
.L150:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 BattleAICmd_if_hp_less_than,.Lfe14-BattleAICmd_if_hp_less_than
	.align	2, 0
	.type	 BattleAICmd_if_hp_more_than,function
	.thumb_func
BattleAICmd_if_hp_more_than:
	push	{r4, lr}
	ldr	r0, .L162
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L157	@cond_branch
	ldr	r0, .L162+0x4
	b	.L161
.L163:
	.align	2, 0
.L162:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L157:
	ldr	r0, .L164
.L161:
	ldrb	r1, [r0]
	ldr	r2, .L164+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bls	.L159	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L160
.L165:
	.align	2, 0
.L164:
	.word	gBankTarget
	.word	gBattleMons
.L159:
	add	r0, r2, #0x7
	str	r0, [r4]
.L160:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 BattleAICmd_if_hp_more_than,.Lfe15-BattleAICmd_if_hp_more_than
	.align	2, 0
	.type	 BattleAICmd_if_hp_equal,function
	.thumb_func
BattleAICmd_if_hp_equal:
	push	{r4, lr}
	ldr	r0, .L172
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L167	@cond_branch
	ldr	r0, .L172+0x4
	b	.L171
.L173:
	.align	2, 0
.L172:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L167:
	ldr	r0, .L174
.L171:
	ldrb	r1, [r0]
	ldr	r2, .L174+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bne	.L169	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L170
.L175:
	.align	2, 0
.L174:
	.word	gBankTarget
	.word	gBattleMons
.L169:
	add	r0, r2, #0x7
	str	r0, [r4]
.L170:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 BattleAICmd_if_hp_equal,.Lfe16-BattleAICmd_if_hp_equal
	.align	2, 0
	.type	 BattleAICmd_if_hp_not_equal,function
	.thumb_func
BattleAICmd_if_hp_not_equal:
	push	{r4, lr}
	ldr	r0, .L182
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L177	@cond_branch
	ldr	r0, .L182+0x4
	b	.L181
.L183:
	.align	2, 0
.L182:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L177:
	ldr	r0, .L184
.L181:
	ldrb	r1, [r0]
	ldr	r2, .L184+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	beq	.L179	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L180
.L185:
	.align	2, 0
.L184:
	.word	gBankTarget
	.word	gBattleMons
.L179:
	add	r0, r2, #0x7
	str	r0, [r4]
.L180:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 BattleAICmd_if_hp_not_equal,.Lfe17-BattleAICmd_if_hp_not_equal
	.align	2, 0
	.type	 BattleAICmd_if_status,function
	.thumb_func
BattleAICmd_if_status:
	push	{r4, r5, lr}
	ldr	r0, .L192
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L187	@cond_branch
	ldr	r0, .L192+0x4
	b	.L191
.L193:
	.align	2, 0
.L192:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L187:
	ldr	r0, .L194
.L191:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L194+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L189	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L190
.L195:
	.align	2, 0
.L194:
	.word	gBankTarget
	.word	gBattleMons
.L189:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L190:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 BattleAICmd_if_status,.Lfe18-BattleAICmd_if_status
	.align	2, 0
	.type	 BattleAICmd_if_not_status,function
	.thumb_func
BattleAICmd_if_not_status:
	push	{r4, r5, lr}
	ldr	r0, .L202
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L197	@cond_branch
	ldr	r0, .L202+0x4
	b	.L201
.L203:
	.align	2, 0
.L202:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L197:
	ldr	r0, .L204
.L201:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L204+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L199	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L200
.L205:
	.align	2, 0
.L204:
	.word	gBankTarget
	.word	gBattleMons
.L199:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L200:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 BattleAICmd_if_not_status,.Lfe19-BattleAICmd_if_not_status
	.align	2, 0
	.type	 BattleAICmd_if_status2,function
	.thumb_func
BattleAICmd_if_status2:
	push	{r4, r5, lr}
	ldr	r0, .L212
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L207	@cond_branch
	ldr	r0, .L212+0x4
	b	.L211
.L213:
	.align	2, 0
.L212:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L207:
	ldr	r0, .L214
.L211:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L214+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L209	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L210
.L215:
	.align	2, 0
.L214:
	.word	gBankTarget
	.word	gBattleMons
.L209:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L210:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 BattleAICmd_if_status2,.Lfe20-BattleAICmd_if_status2
	.align	2, 0
	.type	 BattleAICmd_if_not_status2,function
	.thumb_func
BattleAICmd_if_not_status2:
	push	{r4, r5, lr}
	ldr	r0, .L222
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L217	@cond_branch
	ldr	r0, .L222+0x4
	b	.L221
.L223:
	.align	2, 0
.L222:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L217:
	ldr	r0, .L224
.L221:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L224+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L219	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L220
.L225:
	.align	2, 0
.L224:
	.word	gBankTarget
	.word	gBattleMons
.L219:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L220:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 BattleAICmd_if_not_status2,.Lfe21-BattleAICmd_if_not_status2
	.align	2, 0
	.type	 BattleAICmd_if_status3,function
	.thumb_func
BattleAICmd_if_status3:
	push	{r4, r5, lr}
	ldr	r0, .L232
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L227	@cond_branch
	ldr	r0, .L232+0x4
	b	.L231
.L233:
	.align	2, 0
.L232:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L227:
	ldr	r0, .L234
.L231:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r2, .L234+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L229	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L230
.L235:
	.align	2, 0
.L234:
	.word	gBankTarget
	.word	gStatuses3
.L229:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L230:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 BattleAICmd_if_status3,.Lfe22-BattleAICmd_if_status3
	.align	2, 0
	.type	 BattleAICmd_if_not_status3,function
	.thumb_func
BattleAICmd_if_not_status3:
	push	{r4, r5, lr}
	ldr	r0, .L242
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L237	@cond_branch
	ldr	r0, .L242+0x4
	b	.L241
.L243:
	.align	2, 0
.L242:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L237:
	ldr	r0, .L244
.L241:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r2, .L244+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L239	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L240
.L245:
	.align	2, 0
.L244:
	.word	gBankTarget
	.word	gStatuses3
.L239:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L240:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 BattleAICmd_if_not_status3,.Lfe23-BattleAICmd_if_not_status3
	.align	2, 0
	.type	 BattleAICmd_if_status4,function
	.thumb_func
BattleAICmd_if_status4:
	push	{r4, lr}
	ldr	r0, .L252
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L247	@cond_branch
	ldr	r0, .L252+0x4
	b	.L251
.L253:
	.align	2, 0
.L252:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L247:
	ldr	r0, .L254
.L251:
	ldrb	r0, [r0]
	bl	GetBankIdentity
	mov	r2, #0x1
	and	r2, r2, r0
	ldr	r4, .L254+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L254+0x8
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L249	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L250
.L255:
	.align	2, 0
.L254:
	.word	gBankTarget
	.word	gAIScriptPtr
	.word	gSideAffecting
.L249:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L250:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 BattleAICmd_if_status4,.Lfe24-BattleAICmd_if_status4
	.align	2, 0
	.type	 BattleAICmd_if_not_status4,function
	.thumb_func
BattleAICmd_if_not_status4:
	push	{r4, lr}
	ldr	r0, .L262
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L257	@cond_branch
	ldr	r0, .L262+0x4
	b	.L261
.L263:
	.align	2, 0
.L262:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L257:
	ldr	r0, .L264
.L261:
	ldrb	r0, [r0]
	bl	GetBankIdentity
	mov	r2, #0x1
	and	r2, r2, r0
	ldr	r4, .L264+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L264+0x8
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L259	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L260
.L265:
	.align	2, 0
.L264:
	.word	gBankTarget
	.word	gAIScriptPtr
	.word	gSideAffecting
.L259:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L260:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 BattleAICmd_if_not_status4,.Lfe25-BattleAICmd_if_not_status4
	.align	2, 0
	.type	 BattleAICmd_if_less_than,function
	.thumb_func
BattleAICmd_if_less_than:
	push	{lr}
	ldr	r0, .L269
	ldr	r3, .L269+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bcs	.L267	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L268
.L270:
	.align	2, 0
.L269:
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.L267:
	add	r0, r2, #0x6
	str	r0, [r3]
.L268:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 BattleAICmd_if_less_than,.Lfe26-BattleAICmd_if_less_than
	.align	2, 0
	.type	 BattleAICmd_if_more_than,function
	.thumb_func
BattleAICmd_if_more_than:
	push	{lr}
	ldr	r0, .L274
	ldr	r3, .L274+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bls	.L272	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L273
.L275:
	.align	2, 0
.L274:
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.L272:
	add	r0, r2, #0x6
	str	r0, [r3]
.L273:
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 BattleAICmd_if_more_than,.Lfe27-BattleAICmd_if_more_than
	.align	2, 0
	.type	 BattleAICmd_if_equal,function
	.thumb_func
BattleAICmd_if_equal:
	push	{lr}
	ldr	r0, .L279
	ldr	r3, .L279+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L277	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L278
.L280:
	.align	2, 0
.L279:
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.L277:
	add	r0, r2, #0x6
	str	r0, [r3]
.L278:
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 BattleAICmd_if_equal,.Lfe28-BattleAICmd_if_equal
	.align	2, 0
	.type	 BattleAICmd_if_not_equal,function
	.thumb_func
BattleAICmd_if_not_equal:
	push	{lr}
	ldr	r0, .L284
	ldr	r3, .L284+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L282	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L283
.L285:
	.align	2, 0
.L284:
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.L282:
	add	r0, r2, #0x6
	str	r0, [r3]
.L283:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 BattleAICmd_if_not_equal,.Lfe29-BattleAICmd_if_not_equal
	.align	2, 0
	.type	 BattleAICmd_if_less_than_32,function
	.thumb_func
BattleAICmd_if_less_than_32:
	push	{lr}
	ldr	r3, .L289
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L289+0x4
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L287	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L288
.L290:
	.align	2, 0
.L289:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L287:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L288:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 BattleAICmd_if_less_than_32,.Lfe30-BattleAICmd_if_less_than_32
	.align	2, 0
	.type	 BattleAICmd_if_more_than_32,function
	.thumb_func
BattleAICmd_if_more_than_32:
	push	{lr}
	ldr	r3, .L294
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L294+0x4
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L292	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L293
.L295:
	.align	2, 0
.L294:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L292:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L293:
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 BattleAICmd_if_more_than_32,.Lfe31-BattleAICmd_if_more_than_32
	.align	2, 0
	.type	 BattleAICmd_if_equal_32,function
	.thumb_func
BattleAICmd_if_equal_32:
	push	{lr}
	ldr	r3, .L299
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L299+0x4
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L297	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L298
.L300:
	.align	2, 0
.L299:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L297:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L298:
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 BattleAICmd_if_equal_32,.Lfe32-BattleAICmd_if_equal_32
	.align	2, 0
	.type	 BattleAICmd_if_not_equal_32,function
	.thumb_func
BattleAICmd_if_not_equal_32:
	push	{lr}
	ldr	r3, .L304
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L304+0x4
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L302	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L303
.L305:
	.align	2, 0
.L304:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L302:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L303:
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 BattleAICmd_if_not_equal_32,.Lfe33-BattleAICmd_if_not_equal_32
	.align	2, 0
	.type	 BattleAICmd_if_move,function
	.thumb_func
BattleAICmd_if_move:
	push	{lr}
	ldr	r3, .L309
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L309+0x4
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	bne	.L307	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L308
.L310:
	.align	2, 0
.L309:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L307:
	add	r0, r2, #0x7
	str	r0, [r3]
.L308:
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 BattleAICmd_if_move,.Lfe34-BattleAICmd_if_move
	.align	2, 0
	.type	 BattleAICmd_if_not_move,function
	.thumb_func
BattleAICmd_if_not_move:
	push	{lr}
	ldr	r3, .L314
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L314+0x4
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	beq	.L312	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L313
.L315:
	.align	2, 0
.L314:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L312:
	add	r0, r2, #0x7
	str	r0, [r3]
.L313:
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 BattleAICmd_if_not_move,.Lfe35-BattleAICmd_if_not_move
	.align	2, 0
	.type	 BattleAICmd_if_in_bytes,function
	.thumb_func
BattleAICmd_if_in_bytes:
	push	{r4, lr}
	ldr	r2, .L322
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L318	@cond_branch
	ldr	r0, .L322+0x4
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L319:
	ldrb	r0, [r3]
	cmp	r1, r0
	bne	.L320	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L316
.L323:
	.align	2, 0
.L322:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L320:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L319	@cond_branch
.L318:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L316:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 BattleAICmd_if_in_bytes,.Lfe36-BattleAICmd_if_in_bytes
	.align	2, 0
	.type	 BattleAICmd_if_not_in_bytes,function
	.thumb_func
BattleAICmd_if_not_in_bytes:
	push	{r4, lr}
	ldr	r2, .L330
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	add	r4, r2, #0
	cmp	r0, #0xff
	beq	.L326	@cond_branch
	ldr	r0, .L330+0x4
	ldr	r2, [r0, #0x8]
	add	r1, r4, #0
.L327:
	ldrb	r0, [r3]
	cmp	r2, r0
	bne	.L328	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L324
.L331:
	.align	2, 0
.L330:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L328:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L327	@cond_branch
.L326:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L324:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 BattleAICmd_if_not_in_bytes,.Lfe37-BattleAICmd_if_not_in_bytes
	.align	2, 0
	.type	 BattleAICmd_if_in_words,function
	.thumb_func
BattleAICmd_if_in_words:
	push	{r4, r5, lr}
	ldr	r2, .L338
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r5, .L338+0x4
	cmp	r0, r5
	beq	.L334	@cond_branch
	ldr	r0, .L338+0x8
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L335:
	ldrh	r0, [r3]
	cmp	r1, r0
	bne	.L336	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L332
.L339:
	.align	2, 0
.L338:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gSharedMem+0x16800
.L336:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r5
	bne	.L335	@cond_branch
.L334:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L332:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 BattleAICmd_if_in_words,.Lfe38-BattleAICmd_if_in_words
	.align	2, 0
	.type	 BattleAICmd_if_not_in_words,function
	.thumb_func
BattleAICmd_if_not_in_words:
	push	{r4, r5, lr}
	ldr	r2, .L346
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r4, .L346+0x4
	add	r5, r2, #0
	cmp	r0, r4
	beq	.L342	@cond_branch
	ldr	r0, .L346+0x8
	ldr	r2, [r0, #0x8]
	add	r1, r5, #0
.L343:
	ldrh	r0, [r3]
	cmp	r2, r0
	bne	.L344	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L340
.L347:
	.align	2, 0
.L346:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gSharedMem+0x16800
.L344:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L343	@cond_branch
.L342:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L340:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 BattleAICmd_if_not_in_words,.Lfe39-BattleAICmd_if_not_in_words
	.align	2, 0
	.type	 BattleAICmd_if_user_can_damage,function
	.thumb_func
BattleAICmd_if_user_can_damage:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L357
	ldr	r1, .L357+0x4
	ldr	r0, .L357+0x8
	ldrb	r2, [r0]
	ldr	r5, .L357+0xc
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L352:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L351	@cond_branch
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L350	@cond_branch
.L351:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L352	@cond_branch
.L350:
	cmp	r3, #0x4
	bne	.L355	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L356
.L358:
	.align	2, 0
.L357:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
.L355:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L356:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 BattleAICmd_if_user_can_damage,.Lfe40-BattleAICmd_if_user_can_damage
	.align	2, 0
	.type	 BattleAICmd_if_user_cant_damage,function
	.thumb_func
BattleAICmd_if_user_cant_damage:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L368
	ldr	r1, .L368+0x4
	ldr	r0, .L368+0x8
	ldrb	r2, [r0]
	ldr	r5, .L368+0xc
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L363:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L362	@cond_branch
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L361	@cond_branch
.L362:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L363	@cond_branch
.L361:
	cmp	r3, #0x4
	beq	.L366	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L367
.L369:
	.align	2, 0
.L368:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
.L366:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L367:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 BattleAICmd_if_user_cant_damage,.Lfe41-BattleAICmd_if_user_cant_damage
	.align	2, 0
	.type	 BattleAICmd_get_turn_count,function
	.thumb_func
BattleAICmd_get_turn_count:
	ldr	r1, .L371
	ldr	r0, .L371+0x4
	ldrb	r0, [r0, #0x13]
	str	r0, [r1, #0x8]
	ldr	r1, .L371+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L372:
	.align	2, 0
.L371:
	.word	gSharedMem+0x16800
	.word	gBattleResults
	.word	gAIScriptPtr
.Lfe42:
	.size	 BattleAICmd_get_turn_count,.Lfe42-BattleAICmd_get_turn_count
	.align	2, 0
	.type	 BattleAICmd_get_type,function
	.thumb_func
BattleAICmd_get_type:
	push	{r4, lr}
	ldr	r1, .L383
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x4
	bhi	.L374	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L383+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L384:
	.align	2, 0
.L383:
	.word	gAIScriptPtr
	.word	.L380
	.align	2, 0
	.align	2, 0
.L380:
	.word	.L376
	.word	.L375
	.word	.L378
	.word	.L377
	.word	.L379
.L375:
	ldr	r3, .L385
	ldr	r2, .L385+0x4
	ldr	r0, .L385+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	b	.L382
.L386:
	.align	2, 0
.L385:
	.word	gSharedMem+0x16800
	.word	gBattleMons
	.word	gBankAttacker
.L376:
	ldr	r3, .L387
	ldr	r2, .L387+0x4
	ldr	r0, .L387+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	b	.L382
.L388:
	.align	2, 0
.L387:
	.word	gSharedMem+0x16800
	.word	gBattleMons
	.word	gBankTarget
.L377:
	ldr	r3, .L389
	ldr	r2, .L389+0x4
	ldr	r0, .L389+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L382
.L390:
	.align	2, 0
.L389:
	.word	gSharedMem+0x16800
	.word	gBattleMons
	.word	gBankAttacker
.L378:
	ldr	r3, .L391
	ldr	r2, .L391+0x4
	ldr	r0, .L391+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L382
.L392:
	.align	2, 0
.L391:
	.word	gSharedMem+0x16800
	.word	gBattleMons
	.word	gBankTarget
.L379:
	ldr	r3, .L393
	ldr	r2, .L393+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
.L382:
	str	r0, [r3, #0x8]
.L374:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L394:
	.align	2, 0
.L393:
	.word	gSharedMem+0x16800
	.word	gBattleMoves
.Lfe43:
	.size	 BattleAICmd_get_type,.Lfe43-BattleAICmd_get_type
	.align	2, 0
	.type	 BattleAICmd_get_move_power,function
	.thumb_func
BattleAICmd_get_move_power:
	ldr	r3, .L396
	ldr	r2, .L396+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	str	r0, [r3, #0x8]
	ldr	r1, .L396+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L397:
	.align	2, 0
.L396:
	.word	gSharedMem+0x16800
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe44:
	.size	 BattleAICmd_get_move_power,.Lfe44-BattleAICmd_get_move_power
	.align	2, 0
	.type	 BattleAICmd_is_most_powerful_move,function
	.thumb_func
BattleAICmd_is_most_powerful_move:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x14
    movs r3, 0
    ldr r0, _08108328 @ =sDiscouragedPowerfulMoveEffects
    ldrh r1, [r0]
    ldr r4, _0810832C @ =0x0000ffff
    ldr r6, _08108330 @ =gBattleMoves
    ldr r5, _08108334 @ =gSharedMem + 0x16800
    cmp r1, r4
    beq _0810822E
    ldrh r1, [r5, 0x2]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r6
    ldrb r2, [r0]
    ldr r1, _08108328 @ =sDiscouragedPowerfulMoveEffects
_0810821E:
    ldrh r0, [r1]
    cmp r2, r0
    beq _0810822E
    adds r1, 0x2
    adds r3, 0x1
    ldrh r0, [r1]
    cmp r0, r4
    bne _0810821E
_0810822E:
    ldrh r0, [r5, 0x2]
    lsls r1, r0, 1
    adds r1, r0
    lsls r1, 2
    adds r1, r6
    ldrb r0, [r1, 0x1]
    cmp r0, 0x1
    bhi _08108240
    b _081083B2
_08108240:
    lsls r0, r3, 1
    ldr r1, _08108328 @ =sDiscouragedPowerfulMoveEffects
    adds r0, r1
    ldrh r3, [r0]
    ldr r0, _0810832C @ =0x0000ffff
    cmp r3, r0
    beq _08108250
    b _081083B2
_08108250:
    ldr r0, _08108338 @ =gDynamicBasePower
    movs r1, 0
    strh r1, [r0]
    ldr r2, _0810833C @ =0xfffff81c
    adds r0, r5, r2
    strb r1, [r0]
    adds r2, 0x3
    adds r0, r5, r2
    movs r2, 0x1
    strb r2, [r0]
    ldr r0, _08108340 @ =gBattleMoveFlags
    strb r1, [r0]
    ldr r0, _08108344 @ =gCritMultiplier
    strb r2, [r0]
    movs r6, 0
    mov r9, r3
    ldr r0, _08108328 @ =sDiscouragedPowerfulMoveEffects
    ldrh r0, [r0]
    str r0, [sp, 0x10]
_08108276:
    movs r3, 0
    ldr r5, _08108348 @ =gBattleMons
    lsls r4, r6, 1
    ldr r7, _0810834C @ =gBankAttacker
    lsls r1, r6, 2
    mov r8, r1
    adds r2, r6, 0x1
    mov r10, r2
    ldr r0, [sp, 0x10]
    cmp r0, r9
    beq _081082BA
    ldr r2, _08108330 @ =gBattleMoves
    ldrb r1, [r7]
    movs r0, 0x58
    muls r0, r1
    adds r0, r4, r0
    adds r1, r5, 0
    adds r1, 0xC
    adds r0, r1
    ldrh r1, [r0]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r2
    ldrb r2, [r0]
    ldr r1, _08108328 @ =sDiscouragedPowerfulMoveEffects
_081082AA:
    ldrh r0, [r1]
    cmp r2, r0
    beq _081082BA
    adds r1, 0x2
    adds r3, 0x1
    ldrh r0, [r1]
    cmp r0, r9
    bne _081082AA
_081082BA:
    ldrb r1, [r7]
    movs r0, 0x58
    muls r0, r1
    adds r0, r4, r0
    adds r1, r5, 0
    adds r1, 0xC
    adds r1, r0, r1
    ldrh r0, [r1]
    cmp r0, 0
    beq _0810835C
    lsls r0, r3, 1
    ldr r2, _08108328 @ =sDiscouragedPowerfulMoveEffects
    adds r0, r2
    ldrh r0, [r0]
    cmp r0, r9
    bne _0810835C
    ldr r0, _08108330 @ =gBattleMoves
    ldrh r2, [r1]
    lsls r1, r2, 1
    adds r1, r2
    lsls r1, 2
    adds r1, r0
    ldrb r0, [r1, 0x1]
    cmp r0, 0x1
    bls _0810835C
    ldr r5, _08108350 @ =gCurrentMove
    strh r2, [r5]
    ldrb r0, [r7]
    ldr r4, _08108354 @ =gBankTarget
    ldrb r1, [r4]
    bl AI_CalcDmg
    ldrh r0, [r5]
    ldrb r1, [r7]
    ldrb r2, [r4]
    bl TypeCalc
    mov r4, sp
    add r4, r8
    ldr r2, _08108358 @ =gBattleMoveDamage
    ldr r0, _08108334 @ =gSharedMem + 0x16800
    adds r0, 0x18
    adds r0, r6, r0
    ldrb r1, [r0]
    ldr r0, [r2]
    muls r0, r1
    movs r1, 0x64
    bl __divsi3
    str r0, [r4]
    cmp r0, 0
    bne _08108364
    movs r0, 0x1
    str r0, [r4]
    b _08108364
    .align 2, 0
_08108328: .4byte sDiscouragedPowerfulMoveEffects
_0810832C: .4byte 0x0000ffff
_08108330: .4byte gBattleMoves
_08108334: .4byte gSharedMem + 0x16800
_08108338: .4byte gDynamicBasePower
_0810833C: .4byte 0xfffff81c
_08108340: .4byte gBattleMoveFlags
_08108344: .4byte gCritMultiplier
_08108348: .4byte gBattleMons
_0810834C: .4byte gBankAttacker
_08108350: .4byte gCurrentMove
_08108354: .4byte gBankTarget
_08108358: .4byte gBattleMoveDamage
_0810835C:
    mov r1, sp
    add r1, r8
    movs r0, 0
    str r0, [r1]
_08108364:
    mov r6, r10
    cmp r6, 0x3
    ble _08108276
    movs r6, 0
    ldr r1, _081083A4 @ =gSharedMem + 0x16800
    ldrb r0, [r1, 0x1]
    lsls r0, 2
    add r0, sp
    ldr r2, [sp]
    ldr r0, [r0]
    adds r5, r1, 0
    ldr r4, _081083A8 @ =gAIScriptPtr
    cmp r2, r0
    bgt _0810839A
    adds r3, r5, 0
    mov r2, sp
_08108384:
    adds r2, 0x4
    adds r6, 0x1
    cmp r6, 0x3
    bgt _0810839A
    ldrb r0, [r3, 0x1]
    lsls r0, 2
    add r0, sp
    ldr r1, [r2]
    ldr r0, [r0]
    cmp r1, r0
    ble _08108384
_0810839A:
    cmp r6, 0x4
    bne _081083AC
    movs r0, 0x2
    str r0, [r5, 0x8]
    b _081083B8
    .align 2, 0
_081083A4: .4byte gSharedMem + 0x16800
_081083A8: .4byte gAIScriptPtr
_081083AC:
    movs r0, 0x1
    str r0, [r5, 0x8]
    b _081083B8
_081083B2:
    movs r0, 0
    str r0, [r5, 0x8]
    ldr r4, _081083D0 @ =gAIScriptPtr
_081083B8:
    ldr r0, [r4]
    adds r0, 0x1
    str r0, [r4]
    add sp, 0x14
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_081083D0: .4byte gAIScriptPtr
    .syntax divided

	.code	16
.Lfe45:
	.size	 BattleAICmd_is_most_powerful_move,.Lfe45-BattleAICmd_is_most_powerful_move
	.align	2, 0
	.type	 BattleAICmd_get_move,function
	.thumb_func
BattleAICmd_get_move:
	push	{lr}
	ldr	r0, .L403
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L400	@cond_branch
	ldr	r2, .L403+0x4
	ldr	r1, .L403+0x8
	ldr	r0, .L403+0xc
	b	.L402
.L404:
	.align	2, 0
.L403:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
	.word	gLastUsedMove
	.word	gBankAttacker
.L400:
	ldr	r2, .L405
	ldr	r1, .L405+0x4
	ldr	r0, .L405+0x8
.L402:
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r0}
	bx	r0
.L406:
	.align	2, 0
.L405:
	.word	gSharedMem+0x16800
	.word	gLastUsedMove
	.word	gBankTarget
.Lfe46:
	.size	 BattleAICmd_get_move,.Lfe46-BattleAICmd_get_move
	.align	2, 0
	.type	 BattleAICmd_if_arg_equal,function
	.thumb_func
BattleAICmd_if_arg_equal:
	push	{lr}
	ldr	r3, .L410
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	ldr	r1, .L410+0x4
	ldr	r1, [r1, #0x8]
	cmp	r0, r1
	bne	.L408	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L409
.L411:
	.align	2, 0
.L410:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L408:
	add	r0, r2, #0x6
	str	r0, [r3]
.L409:
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 BattleAICmd_if_arg_equal,.Lfe47-BattleAICmd_if_arg_equal
	.align	2, 0
	.type	 BattleAICmd_if_arg_not_equal,function
	.thumb_func
BattleAICmd_if_arg_not_equal:
	push	{lr}
	ldr	r3, .L415
	ldr	r2, [r3]
	ldrb	r0, [r2, #0x1]
	ldr	r1, .L415+0x4
	ldr	r1, [r1, #0x8]
	cmp	r0, r1
	beq	.L413	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L414
.L416:
	.align	2, 0
.L415:
	.word	gAIScriptPtr
	.word	gSharedMem+0x16800
.L413:
	add	r0, r2, #0x6
	str	r0, [r3]
.L414:
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 BattleAICmd_if_arg_not_equal,.Lfe48-BattleAICmd_if_arg_not_equal
	.align	2, 0
	.type	 BattleAICmd_if_would_go_first,function
	.thumb_func
BattleAICmd_if_would_go_first:
	push	{lr}
	ldr	r0, .L420
	ldrb	r0, [r0]
	ldr	r1, .L420+0x4
	ldrb	r1, [r1]
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r3, .L420+0x8
	ldr	r2, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L418	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L419
.L421:
	.align	2, 0
.L420:
	.word	gBankAttacker
	.word	gBankTarget
	.word	gAIScriptPtr
.L418:
	add	r0, r2, #0x6
	str	r0, [r3]
.L419:
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 BattleAICmd_if_would_go_first,.Lfe49-BattleAICmd_if_would_go_first
	.align	2, 0
	.type	 BattleAICmd_if_would_not_go_first,function
	.thumb_func
BattleAICmd_if_would_not_go_first:
	push	{lr}
	ldr	r0, .L425
	ldrb	r0, [r0]
	ldr	r1, .L425+0x4
	ldrb	r1, [r1]
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r3, .L425+0x8
	ldr	r2, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L423	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L424
.L426:
	.align	2, 0
.L425:
	.word	gBankAttacker
	.word	gBankTarget
	.word	gAIScriptPtr
.L423:
	add	r0, r2, #0x6
	str	r0, [r3]
.L424:
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 BattleAICmd_if_would_not_go_first,.Lfe50-BattleAICmd_if_would_not_go_first
	.align	2, 0
	.type	 BattleAICmd_nullsub_2A,function
	.thumb_func
BattleAICmd_nullsub_2A:
	bx	lr
.Lfe51:
	.size	 BattleAICmd_nullsub_2A,.Lfe51-BattleAICmd_nullsub_2A
	.align	2, 0
	.type	 BattleAICmd_nullsub_2B,function
	.thumb_func
BattleAICmd_nullsub_2B:
	bx	lr
.Lfe52:
	.size	 BattleAICmd_nullsub_2B,.Lfe52-BattleAICmd_nullsub_2B
	.align	2, 0
	.type	 BattleAICmd_count_alive_pokemon,function
	.thumb_func
BattleAICmd_count_alive_pokemon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r1, .L443
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	ldr	r0, .L443+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L430	@cond_branch
	ldr	r0, .L443+0x8
	b	.L442
.L444:
	.align	2, 0
.L443:
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
	.word	gBankAttacker
.L430:
	ldr	r0, .L445
.L442:
	ldrb	r5, [r0]
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	ldr	r1, .L445+0x4
	mov	r9, r1
	cmp	r0, #0
	bne	.L432	@cond_branch
	ldr	r0, .L445+0x8
	mov	r9, r0
.L432:
	ldr	r0, .L445+0xc
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L434	@cond_branch
	ldr	r4, .L445+0x10
	lsl	r0, r5, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r8, r0
	add	r0, r5, #0
	bl	GetBankIdentity
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrb	r6, [r0]
	b	.L435
.L446:
	.align	2, 0
.L445:
	.word	gBankTarget
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattlePartyID
.L434:
	ldr	r1, .L447
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrb	r6, [r0]
	mov	r8, r6
.L435:
	mov	r5, #0x0
	ldr	r7, .L447+0x4
.L439:
	cmp	r5, r8
	beq	.L438	@cond_branch
	cmp	r5, r6
	beq	.L438	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L438	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L438	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L438	@cond_branch
	ldr	r0, [r7, #0x8]
	add	r0, r0, #0x1
	str	r0, [r7, #0x8]
.L438:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L439	@cond_branch
	ldr	r1, .L447+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L448:
	.align	2, 0
.L447:
	.word	gBattlePartyID
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.Lfe53:
	.size	 BattleAICmd_count_alive_pokemon,.Lfe53-BattleAICmd_count_alive_pokemon
	.align	2, 0
	.type	 BattleAICmd_get_considered_move,function
	.thumb_func
BattleAICmd_get_considered_move:
	ldr	r1, .L450
	ldrh	r0, [r1, #0x2]
	str	r0, [r1, #0x8]
	ldr	r1, .L450+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L451:
	.align	2, 0
.L450:
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.Lfe54:
	.size	 BattleAICmd_get_considered_move,.Lfe54-BattleAICmd_get_considered_move
	.align	2, 0
	.type	 BattleAICmd_get_considered_move_effect,function
	.thumb_func
BattleAICmd_get_considered_move_effect:
	ldr	r3, .L453
	ldr	r2, .L453+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L453+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L454:
	.align	2, 0
.L453:
	.word	gSharedMem+0x16800
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe55:
	.size	 BattleAICmd_get_considered_move_effect,.Lfe55-BattleAICmd_get_considered_move_effect
	.align	2, 0
	.type	 BattleAICmd_get_ability,function
	.thumb_func
BattleAICmd_get_ability:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L471
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L456	@cond_branch
	ldr	r0, .L471+0x4
	b	.L469
.L472:
	.align	2, 0
.L471:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L456:
	ldr	r0, .L473
.L469:
	ldrb	r4, [r0]
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L458	@cond_branch
	add	r0, r4, #0
	bl	GetBankIdentity
	mov	r7, #0x1
	add	r1, r7, #0
	and	r1, r1, r0
	ldr	r6, .L473+0x4
	add	r0, r6, #0
	add	r0, r0, #0x20
	add	r3, r1, r0
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L459	@cond_branch
	ldr	r0, .L473+0x8
	add	r1, r6, r0
	ldrb	r0, [r3]
	str	r0, [r1, #0x8]
	b	.L468
.L474:
	.align	2, 0
.L473:
	.word	gBankTarget
	.word	gSharedMem+0x16a00
	.word	0xfffffe00
.L459:
	ldr	r1, .L475
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0x17
	beq	.L461	@cond_branch
	cmp	r0, #0x2a
	beq	.L461	@cond_branch
	cmp	r0, #0x47
	bne	.L460	@cond_branch
.L461:
	ldr	r1, .L475+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	str	r0, [r1, #0x8]
	b	.L468
.L476:
	.align	2, 0
.L475:
	.word	gBattleMons
	.word	gSharedMem+0x16800
.L460:
	ldr	r4, .L477
	ldrh	r0, [r5]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r3, r1, r4
	ldrb	r0, [r3, #0x16]
	cmp	r0, #0
	beq	.L462	@cond_branch
	ldrb	r0, [r3, #0x17]
	cmp	r0, #0
	beq	.L463	@cond_branch
	bl	Random
	add	r1, r7, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L464	@cond_branch
	ldr	r0, .L477+0x4
	add	r2, r6, r0
	ldrh	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x16]
	b	.L470
.L478:
	.align	2, 0
.L477:
	.word	gBaseStats
	.word	0xfffffe00
.L464:
	ldr	r0, .L479
	add	r2, r6, r0
	ldrh	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x17]
	b	.L470
.L480:
	.align	2, 0
.L479:
	.word	0xfffffe00
.L463:
	ldr	r0, .L481
	add	r1, r6, r0
	ldrb	r0, [r3, #0x16]
	str	r0, [r1, #0x8]
	b	.L468
.L482:
	.align	2, 0
.L481:
	.word	0xfffffe00
.L462:
	ldr	r0, .L483
	add	r1, r6, r0
	ldrb	r0, [r3, #0x17]
	str	r0, [r1, #0x8]
	b	.L468
.L484:
	.align	2, 0
.L483:
	.word	0xfffffe00
.L458:
	ldr	r2, .L485
	ldr	r1, .L485+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
.L470:
	str	r0, [r2, #0x8]
.L468:
	ldr	r1, .L485+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L486:
	.align	2, 0
.L485:
	.word	gSharedMem+0x16800
	.word	gBattleMons
	.word	gAIScriptPtr
.Lfe56:
	.size	 BattleAICmd_get_ability,.Lfe56-BattleAICmd_get_ability
	.align	2, 0
	.type	 BattleAICmd_get_highest_possible_damage,function
	.thumb_func
BattleAICmd_get_highest_possible_damage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L500
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L500+0x4
	ldr	r3, .L500+0x8
	add	r0, r1, r3
	mov	r4, #0x0
	strb	r2, [r0]
	add	r3, r3, #0x3
	add	r0, r1, r3
	mov	r3, #0x1
	strb	r3, [r0]
	ldr	r0, .L500+0xc
	strb	r2, [r0]
	ldr	r0, .L500+0x10
	strb	r3, [r0]
	mov	r0, #0xb4
	lsl	r0, r0, #0x9
	add	r1, r1, r0
	str	r4, [r1, #0x8]
	mov	r5, #0x0
	ldr	r4, .L500+0x14
	ldr	r7, .L500+0x18
	ldr	r3, .L500+0x1c
	mov	r8, r3
	ldr	r6, .L500+0x20
.L491:
	mov	r0, #0x28
	str	r0, [r4]
	lsl	r1, r5, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r0, [r1]
	strh	r0, [r7]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L490	@cond_branch
	ldrh	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, .L500+0x24
	ldrb	r2, [r2]
	bl	TypeCalc
	ldr	r0, [r4]
	cmp	r0, #0x78
	bne	.L493	@cond_branch
	mov	r0, #0x50
	str	r0, [r4]
.L493:
	ldr	r0, [r4]
	cmp	r0, #0xf0
	bne	.L494	@cond_branch
	mov	r0, #0xa0
	str	r0, [r4]
.L494:
	ldr	r0, [r4]
	cmp	r0, #0x1e
	bne	.L495	@cond_branch
	mov	r0, #0x14
	str	r0, [r4]
.L495:
	ldr	r0, [r4]
	cmp	r0, #0xf
	bne	.L496	@cond_branch
	mov	r0, #0xa
	str	r0, [r4]
.L496:
	ldr	r0, .L500+0xc
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L497	@cond_branch
	mov	r0, #0x0
	str	r0, [r4]
.L497:
	ldr	r2, .L500+0x28
	ldr	r0, [r2, #0x8]
	ldr	r1, [r4]
	cmp	r0, r1
	bcs	.L490	@cond_branch
	str	r1, [r2, #0x8]
.L490:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L491	@cond_branch
	ldr	r1, .L500+0x2c
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L501:
	.align	2, 0
.L500:
	.word	gDynamicBasePower
	.word	gSharedMem
	.word	0x1601c
	.word	gBattleMoveFlags
	.word	gCritMultiplier
	.word	gBattleMoveDamage
	.word	gCurrentMove
	.word	gBattleMons+0xc
	.word	gBankAttacker
	.word	gBankTarget
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.Lfe57:
	.size	 BattleAICmd_get_highest_possible_damage,.Lfe57-BattleAICmd_get_highest_possible_damage
	.align	2, 0
	.type	 BattleAICmd_if_damage_bonus,function
	.thumb_func
BattleAICmd_if_damage_bonus:
	push	{r4, r5, lr}
	ldr	r0, .L510
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r2, .L510+0x4
	ldr	r3, .L510+0x8
	add	r0, r2, r3
	strb	r1, [r0]
	add	r3, r3, #0x3
	add	r0, r2, r3
	mov	r3, #0x1
	strb	r3, [r0]
	ldr	r5, .L510+0xc
	strb	r1, [r5]
	ldr	r0, .L510+0x10
	strb	r3, [r0]
	ldr	r4, .L510+0x14
	mov	r0, #0x28
	str	r0, [r4]
	ldr	r1, .L510+0x18
	mov	r0, #0xb4
	lsl	r0, r0, #0x9
	add	r2, r2, r0
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1]
	ldrh	r0, [r1]
	ldr	r1, .L510+0x1c
	ldrb	r1, [r1]
	ldr	r2, .L510+0x20
	ldrb	r2, [r2]
	bl	TypeCalc
	ldr	r0, [r4]
	cmp	r0, #0x78
	bne	.L503	@cond_branch
	mov	r0, #0x50
	str	r0, [r4]
.L503:
	ldr	r0, [r4]
	cmp	r0, #0xf0
	bne	.L504	@cond_branch
	mov	r0, #0xa0
	str	r0, [r4]
.L504:
	ldr	r0, [r4]
	cmp	r0, #0x1e
	bne	.L505	@cond_branch
	mov	r0, #0x14
	str	r0, [r4]
.L505:
	ldr	r0, [r4]
	cmp	r0, #0xf
	bne	.L506	@cond_branch
	mov	r0, #0xa
	str	r0, [r4]
.L506:
	ldrb	r1, [r5]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L507	@cond_branch
	mov	r0, #0x0
	str	r0, [r4]
.L507:
	ldrb	r0, [r4]
	ldr	r3, .L510+0x24
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L508	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L509
.L511:
	.align	2, 0
.L510:
	.word	gDynamicBasePower
	.word	gSharedMem
	.word	0x1601c
	.word	gBattleMoveFlags
	.word	gCritMultiplier
	.word	gBattleMoveDamage
	.word	gCurrentMove
	.word	gBankAttacker
	.word	gBankTarget
	.word	gAIScriptPtr
.L508:
	add	r0, r2, #0x6
	str	r0, [r3]
.L509:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 BattleAICmd_if_damage_bonus,.Lfe58-BattleAICmd_if_damage_bonus
	.align	2, 0
	.type	 BattleAICmd_nullsub_32,function
	.thumb_func
BattleAICmd_nullsub_32:
	bx	lr
.Lfe59:
	.size	 BattleAICmd_nullsub_32,.Lfe59-BattleAICmd_nullsub_32
	.align	2, 0
	.type	 BattleAICmd_nullsub_33,function
	.thumb_func
BattleAICmd_nullsub_33:
	bx	lr
.Lfe60:
	.size	 BattleAICmd_nullsub_33,.Lfe60-BattleAICmd_nullsub_33
	.align	2, 0
	.type	 BattleAICmd_if_status_in_party,function
	.thumb_func
BattleAICmd_if_status_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L527
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	cmp	r1, #0x1
	bne	.L517	@cond_branch
	ldr	r1, .L527+0x4
	b	.L526
.L528:
	.align	2, 0
.L527:
	.word	gAIScriptPtr
	.word	gEnemyParty
.L525:
	ldr	r3, .L529
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L514
.L530:
	.align	2, 0
.L529:
	.word	gAIScriptPtr
.L517:
	ldr	r1, .L531
.L526:
	mov	r9, r1
	ldr	r1, [r0]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	mov	sl, r1
.L522:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, r9
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L521	@cond_branch
	cmp	r5, sl
	beq	.L521	@cond_branch
	cmp	r6, #0
	beq	.L521	@cond_branch
	cmp	r0, r7
	beq	.L525	@cond_branch
.L521:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L522	@cond_branch
	ldr	r1, .L531+0x4
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L514:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L532:
	.align	2, 0
.L531:
	.word	gPlayerParty
	.word	gAIScriptPtr
.Lfe61:
	.size	 BattleAICmd_if_status_in_party,.Lfe61-BattleAICmd_if_status_in_party
	.align	2, 0
	.type	 BattleAICmd_if_status_not_in_party,function
	.thumb_func
BattleAICmd_if_status_not_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L544
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r2, r0, #0
	cmp	r1, #0x1
	bne	.L536	@cond_branch
	ldr	r0, .L544+0x4
	mov	sl, r0
	b	.L534
.L545:
	.align	2, 0
.L544:
	.word	gAIScriptPtr
	.word	gEnemyParty
.L536:
	ldr	r1, .L546
	mov	sl, r1
.L534:
	ldr	r1, [r2]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r0, #0x0
	mov	r8, r0
	mov	r9, r2
.L541:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L540	@cond_branch
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r5, r1
	beq	.L540	@cond_branch
	cmp	r6, #0
	beq	.L540	@cond_branch
	cmp	r0, r7
	bne	.L540	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L540:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L541	@cond_branch
	ldr	r3, .L546+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L547:
	.align	2, 0
.L546:
	.word	gPlayerParty
	.word	gAIScriptPtr
.Lfe62:
	.size	 BattleAICmd_if_status_not_in_party,.Lfe62-BattleAICmd_if_status_not_in_party
	.align	2, 0
	.type	 BattleAICmd_get_weather,function
	.thumb_func
BattleAICmd_get_weather:
	push	{lr}
	ldr	r2, .L553
	ldrh	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L549	@cond_branch
	ldr	r1, .L553+0x4
	mov	r0, #0x1
	str	r0, [r1, #0x8]
.L549:
	ldrh	r2, [r2]
	mov	r0, #0x18
	and	r0, r0, r2
	add	r3, r2, #0
	cmp	r0, #0
	beq	.L550	@cond_branch
	ldr	r1, .L553+0x4
	mov	r0, #0x2
	str	r0, [r1, #0x8]
.L550:
	mov	r0, #0x60
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L551	@cond_branch
	ldr	r1, .L553+0x4
	mov	r0, #0x0
	str	r0, [r1, #0x8]
.L551:
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L552	@cond_branch
	ldr	r1, .L553+0x4
	mov	r0, #0x3
	str	r0, [r1, #0x8]
.L552:
	ldr	r1, .L553+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L554:
	.align	2, 0
.L553:
	.word	gBattleWeather
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.Lfe63:
	.size	 BattleAICmd_get_weather,.Lfe63-BattleAICmd_get_weather
	.align	2, 0
	.type	 BattleAICmd_if_effect,function
	.thumb_func
BattleAICmd_if_effect:
	push	{lr}
	ldr	r2, .L558
	ldr	r0, .L558+0x4
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r3, .L558+0x8
	ldr	r2, [r3]
	ldrb	r0, [r0]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L556	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L557
.L559:
	.align	2, 0
.L558:
	.word	gBattleMoves
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.L556:
	add	r0, r2, #0x6
	str	r0, [r3]
.L557:
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 BattleAICmd_if_effect,.Lfe64-BattleAICmd_if_effect
	.align	2, 0
	.type	 BattleAICmd_if_not_effect,function
	.thumb_func
BattleAICmd_if_not_effect:
	push	{lr}
	ldr	r2, .L563
	ldr	r0, .L563+0x4
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r3, .L563+0x8
	ldr	r2, [r3]
	ldrb	r0, [r0]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L561	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L562
.L564:
	.align	2, 0
.L563:
	.word	gBattleMoves
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.L561:
	add	r0, r2, #0x6
	str	r0, [r3]
.L562:
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 BattleAICmd_if_not_effect,.Lfe65-BattleAICmd_if_not_effect
	.align	2, 0
	.type	 BattleAICmd_if_stat_level_less_than,function
	.thumb_func
BattleAICmd_if_stat_level_less_than:
	push	{r4, lr}
	ldr	r0, .L571
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L566	@cond_branch
	ldr	r0, .L571+0x4
	b	.L570
.L572:
	.align	2, 0
.L571:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L566:
	ldr	r0, .L573
.L570:
	ldrb	r3, [r0]
	ldr	r1, .L573+0x4
	ldr	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bge	.L568	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L569
.L574:
	.align	2, 0
.L573:
	.word	gBankTarget
	.word	gBattleMons
.L568:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L569:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 BattleAICmd_if_stat_level_less_than,.Lfe66-BattleAICmd_if_stat_level_less_than
	.align	2, 0
	.type	 BattleAICmd_if_stat_level_more_than,function
	.thumb_func
BattleAICmd_if_stat_level_more_than:
	push	{r4, lr}
	ldr	r0, .L581
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L576	@cond_branch
	ldr	r0, .L581+0x4
	b	.L580
.L582:
	.align	2, 0
.L581:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L576:
	ldr	r0, .L583
.L580:
	ldrb	r3, [r0]
	ldr	r1, .L583+0x4
	ldr	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	ble	.L578	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L579
.L584:
	.align	2, 0
.L583:
	.word	gBankTarget
	.word	gBattleMons
.L578:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L579:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 BattleAICmd_if_stat_level_more_than,.Lfe67-BattleAICmd_if_stat_level_more_than
	.align	2, 0
	.type	 BattleAICmd_if_stat_level_equal,function
	.thumb_func
BattleAICmd_if_stat_level_equal:
	push	{r4, lr}
	ldr	r0, .L591
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L586	@cond_branch
	ldr	r0, .L591+0x4
	b	.L590
.L592:
	.align	2, 0
.L591:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L586:
	ldr	r0, .L593
.L590:
	ldrb	r3, [r0]
	ldr	r1, .L593+0x4
	ldr	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bne	.L588	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L589
.L594:
	.align	2, 0
.L593:
	.word	gBankTarget
	.word	gBattleMons
.L588:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L589:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 BattleAICmd_if_stat_level_equal,.Lfe68-BattleAICmd_if_stat_level_equal
	.align	2, 0
	.type	 BattleAICmd_if_stat_level_not_equal,function
	.thumb_func
BattleAICmd_if_stat_level_not_equal:
	push	{r4, lr}
	ldr	r0, .L601
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L596	@cond_branch
	ldr	r0, .L601+0x4
	b	.L600
.L602:
	.align	2, 0
.L601:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L596:
	ldr	r0, .L603
.L600:
	ldrb	r3, [r0]
	ldr	r1, .L603+0x4
	ldr	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	beq	.L598	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L599
.L604:
	.align	2, 0
.L603:
	.word	gBankTarget
	.word	gBattleMons
.L598:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L599:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 BattleAICmd_if_stat_level_not_equal,.Lfe69-BattleAICmd_if_stat_level_not_equal
	.align	2, 0
	.type	 BattleAICmd_if_can_faint,function
	.thumb_func
BattleAICmd_if_can_faint:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r2, .L610
	ldr	r6, .L610+0x4
	ldrh	r1, [r6, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bls	.L608	@cond_branch
	ldr	r0, .L610+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r2, .L610+0xc
	add	r0, r6, r2
	strb	r1, [r0]
	add	r2, r2, #0x3
	add	r0, r6, r2
	mov	r2, #0x1
	mov	r8, r2
	mov	r2, r8
	strb	r2, [r0]
	ldr	r0, .L610+0x10
	strb	r1, [r0]
	ldr	r0, .L610+0x14
	strb	r2, [r0]
	ldr	r5, .L610+0x18
	ldrh	r0, [r6, #0x2]
	strh	r0, [r5]
	ldr	r4, .L610+0x1c
	ldrb	r0, [r4]
	ldr	r7, .L610+0x20
	ldrb	r1, [r7]
	bl	AI_CalcDmg
	ldrh	r0, [r5]
	ldrb	r1, [r4]
	ldrb	r2, [r7]
	bl	TypeCalc
	ldr	r4, .L610+0x24
	add	r0, r6, #0
	add	r0, r0, #0x18
	ldrb	r6, [r6, #0x1]
	add	r0, r0, r6
	ldrb	r1, [r0]
	ldr	r0, [r4]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L607	@cond_branch
	mov	r0, r8
	str	r0, [r4]
.L607:
	ldr	r2, .L610+0x28
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x28]
	ldr	r0, [r4]
	cmp	r1, r0
	bgt	.L608	@cond_branch
	ldr	r3, .L610+0x2c
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L605
.L611:
	.align	2, 0
.L610:
	.word	gBattleMoves
	.word	gSharedMem+0x16800
	.word	gDynamicBasePower
	.word	0xfffff81c
	.word	gBattleMoveFlags
	.word	gCritMultiplier
	.word	gCurrentMove
	.word	gBankAttacker
	.word	gBankTarget
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gAIScriptPtr
.L608:
	ldr	r1, .L612
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L605:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L613:
	.align	2, 0
.L612:
	.word	gAIScriptPtr
.Lfe70:
	.size	 BattleAICmd_if_can_faint,.Lfe70-BattleAICmd_if_can_faint
	.align	2, 0
	.type	 BattleAICmd_if_cant_faint,function
	.thumb_func
BattleAICmd_if_cant_faint:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L618
	ldr	r7, .L618+0x4
	ldrh	r1, [r7, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bls	.L616	@cond_branch
	ldr	r0, .L618+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r2, .L618+0xc
	add	r0, r7, r2
	strb	r1, [r0]
	add	r2, r2, #0x3
	add	r0, r7, r2
	mov	r2, #0x1
	strb	r2, [r0]
	ldr	r0, .L618+0x10
	strb	r1, [r0]
	ldr	r0, .L618+0x14
	strb	r2, [r0]
	ldr	r6, .L618+0x18
	ldrh	r0, [r7, #0x2]
	strh	r0, [r6]
	ldr	r4, .L618+0x1c
	ldrb	r0, [r4]
	ldr	r5, .L618+0x20
	ldrb	r1, [r5]
	bl	AI_CalcDmg
	ldrh	r0, [r6]
	ldrb	r1, [r4]
	ldrb	r2, [r5]
	bl	TypeCalc
	ldr	r4, .L618+0x24
	add	r0, r7, #0
	add	r0, r0, #0x18
	ldrb	r7, [r7, #0x1]
	add	r0, r0, r7
	ldrb	r1, [r0]
	ldr	r0, [r4]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	ldr	r3, .L618+0x28
	ldrb	r2, [r5]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1, #0x28]
	cmp	r1, r0
	ble	.L616	@cond_branch
	ldr	r3, .L618+0x2c
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L614
.L619:
	.align	2, 0
.L618:
	.word	gBattleMoves
	.word	gSharedMem+0x16800
	.word	gDynamicBasePower
	.word	0xfffff81c
	.word	gBattleMoveFlags
	.word	gCritMultiplier
	.word	gCurrentMove
	.word	gBankAttacker
	.word	gBankTarget
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gAIScriptPtr
.L616:
	ldr	r1, .L620
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L614:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L621:
	.align	2, 0
.L620:
	.word	gAIScriptPtr
.Lfe71:
	.size	 BattleAICmd_if_cant_faint,.Lfe71-BattleAICmd_if_cant_faint
	.align	2, 0
	.type	 BattleAICmd_if_has_move,function
	.thumb_func
BattleAICmd_if_has_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L648
	ldr	r0, [r1]
	add	r6, r0, #0x2
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L625	@cond_branch
	cmp	r0, #0x1
	bgt	.L646	@cond_branch
	cmp	r0, #0
	beq	.L635	@cond_branch
	b	.L623
.L649:
	.align	2, 0
.L648:
	.word	gAIScriptPtr
.L646:
	cmp	r0, #0x2
	beq	.L635	@cond_branch
	cmp	r0, #0x3
	bne	.L623	@cond_branch
.L625:
	mov	r3, #0x0
	ldr	r2, .L650
	ldr	r5, .L650+0x4
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L627	@cond_branch
	add	r7, r5, #0
	mov	r6, #0x58
	add	r5, r2, #0
	add	r2, r1, #0
.L628:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L627	@cond_branch
	lsl	r1, r3, #0x1
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r1, r1, r0
	add	r1, r1, r5
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L628	@cond_branch
.L627:
	cmp	r3, #0x4
	beq	.L647	@cond_branch
	b	.L642
.L651:
	.align	2, 0
.L650:
	.word	gBattleMons
	.word	gBankAttacker
.L635:
	mov	r3, #0x0
	ldr	r5, .L652
	ldr	r1, .L652+0x4
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldrh	r2, [r6]
	cmp	r0, r2
	beq	.L637	@cond_branch
	add	r6, r5, #0
	add	r5, r1, #0
.L638:
	add	r3, r3, #0x1
	cmp	r3, #0x7
	bgt	.L637	@cond_branch
	lsl	r0, r3, #0x1
	ldrb	r1, [r5]
	lsr	r1, r1, #0x1
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L638	@cond_branch
.L637:
	cmp	r3, #0x8
	bne	.L642	@cond_branch
.L647:
	ldr	r0, [r4]
	add	r0, r0, #0x8
	str	r0, [r4]
	b	.L623
.L653:
	.align	2, 0
.L652:
	.word	gSharedMem+0x16a00
	.word	gBankTarget
.L642:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L623:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 BattleAICmd_if_has_move,.Lfe72-BattleAICmd_if_has_move
	.align	2, 0
	.type	 BattleAICmd_if_dont_have_move,function
	.thumb_func
BattleAICmd_if_dont_have_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L680
	ldr	r0, [r1]
	add	r6, r0, #0x2
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L657	@cond_branch
	cmp	r0, #0x1
	bgt	.L678	@cond_branch
	cmp	r0, #0
	beq	.L667	@cond_branch
	b	.L655
.L681:
	.align	2, 0
.L680:
	.word	gAIScriptPtr
.L678:
	cmp	r0, #0x2
	beq	.L667	@cond_branch
	cmp	r0, #0x3
	bne	.L655	@cond_branch
.L657:
	mov	r3, #0x0
	ldr	r2, .L682
	ldr	r5, .L682+0x4
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L659	@cond_branch
	add	r7, r5, #0
	mov	r6, #0x58
	add	r5, r2, #0
	add	r2, r1, #0
.L660:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L659	@cond_branch
	lsl	r1, r3, #0x1
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r1, r1, r0
	add	r1, r1, r5
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L660	@cond_branch
.L659:
	cmp	r3, #0x4
	bne	.L679	@cond_branch
	b	.L674
.L683:
	.align	2, 0
.L682:
	.word	gBattleMons
	.word	gBankAttacker
.L667:
	mov	r3, #0x0
	ldr	r5, .L684
	ldr	r1, .L684+0x4
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldrh	r2, [r6]
	cmp	r0, r2
	beq	.L669	@cond_branch
	add	r6, r5, #0
	add	r5, r1, #0
.L670:
	add	r3, r3, #0x1
	cmp	r3, #0x7
	bgt	.L669	@cond_branch
	lsl	r0, r3, #0x1
	ldrb	r1, [r5]
	lsr	r1, r1, #0x1
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L670	@cond_branch
.L669:
	cmp	r3, #0x8
	beq	.L674	@cond_branch
.L679:
	ldr	r0, [r4]
	add	r0, r0, #0x8
	str	r0, [r4]
	b	.L655
.L685:
	.align	2, 0
.L684:
	.word	gSharedMem+0x16a00
	.word	gBankTarget
.L674:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L655:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 BattleAICmd_if_dont_have_move,.Lfe73-BattleAICmd_if_dont_have_move
	.align	2, 0
	.type	 BattleAICmd_if_move_effect,function
	.thumb_func
BattleAICmd_if_move_effect:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L709
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L689	@cond_branch
	cmp	r0, #0x1
	bgt	.L708	@cond_branch
	cmp	r0, #0
	beq	.L699	@cond_branch
	b	.L687
.L710:
	.align	2, 0
.L709:
	.word	gAIScriptPtr
.L708:
	cmp	r0, #0x2
	beq	.L699	@cond_branch
	cmp	r0, #0x3
	bne	.L687	@cond_branch
.L689:
	mov	r3, #0x0
	ldr	r1, .L711
	ldr	r0, .L711+0x4
	ldrb	r2, [r0]
	ldr	r6, .L711+0x8
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r5, .L711+0xc
.L693:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L692	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L691	@cond_branch
.L692:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L693	@cond_branch
.L691:
	cmp	r3, #0x4
	bne	.L701	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	b	.L687
.L712:
	.align	2, 0
.L711:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gAIScriptPtr
.L699:
	mov	r3, #0x0
	ldr	r1, .L713
	ldr	r0, .L713+0x4
	ldrb	r2, [r0]
	ldr	r7, .L713+0x8
	ldr	r6, .L713+0xc
	ldr	r5, .L713+0x10
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L703:
	lsl	r1, r3, #0x1
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L702	@cond_branch
	ldrb	r0, [r5]
	lsr	r0, r0, #0x1
	lsl	r0, r0, #0x4
	add	r0, r1, r0
	add	r0, r0, r6
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, [r4]
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L701	@cond_branch
.L702:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x7
	ble	.L703	@cond_branch
.L701:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L687:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L714:
	.align	2, 0
.L713:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gSharedMem+0x16a00
	.word	gBankTarget
.Lfe74:
	.size	 BattleAICmd_if_move_effect,.Lfe74-BattleAICmd_if_move_effect
	.align	2, 0
	.type	 BattleAICmd_if_not_move_effect,function
	.thumb_func
BattleAICmd_if_not_move_effect:
	push	{r4, r5, r6, lr}
	ldr	r1, .L738
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L718	@cond_branch
	cmp	r0, #0x1
	bgt	.L737	@cond_branch
	cmp	r0, #0
	beq	.L728	@cond_branch
	b	.L716
.L739:
	.align	2, 0
.L738:
	.word	gAIScriptPtr
.L737:
	cmp	r0, #0x2
	beq	.L728	@cond_branch
	cmp	r0, #0x3
	bne	.L716	@cond_branch
.L718:
	mov	r3, #0x0
	ldr	r1, .L740
	ldr	r0, .L740+0x4
	ldrb	r2, [r0]
	ldr	r6, .L740+0x8
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r5, .L740+0xc
.L722:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L721	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L720	@cond_branch
.L721:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L722	@cond_branch
.L720:
	cmp	r3, #0x4
	bne	.L730	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L716
.L741:
	.align	2, 0
.L740:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gAIScriptPtr
.L728:
	mov	r3, #0x0
	ldr	r1, .L742
	ldr	r0, .L742+0x4
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	lsl	r0, r0, #0x4
	add	r2, r0, r1
	ldr	r5, .L742+0x8
.L732:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L731	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r4]
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L730	@cond_branch
.L731:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x7
	ble	.L732	@cond_branch
.L730:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
.L716:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	gSharedMem+0x16a00
	.word	gBankTarget
	.word	gBattleMoves
.Lfe75:
	.size	 BattleAICmd_if_not_move_effect,.Lfe75-BattleAICmd_if_not_move_effect
	.align	2, 0
	.type	 BattleAICmd_if_last_move_did_damage,function
	.thumb_func
BattleAICmd_if_last_move_did_damage:
	push	{r4, r5, lr}
	ldr	r0, .L756
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L745	@cond_branch
	ldr	r0, .L756+0x4
	b	.L753
.L757:
	.align	2, 0
.L756:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L745:
	ldr	r0, .L758
.L753:
	ldrb	r3, [r0]
	add	r4, r5, #0
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L747	@cond_branch
	ldr	r0, .L758+0x4
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L754	@cond_branch
	b	.L755
.L759:
	.align	2, 0
.L758:
	.word	gBankTarget
	.word	gDisableStructs
.L747:
	cmp	r0, #0x1
	beq	.L750	@cond_branch
.L754:
	add	r0, r2, #0x7
	str	r0, [r4]
	b	.L744
.L750:
	ldr	r0, .L760
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	beq	.L749	@cond_branch
.L755:
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L744
.L761:
	.align	2, 0
.L760:
	.word	gDisableStructs
.L749:
	add	r0, r2, #0x7
	str	r0, [r5]
.L744:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 BattleAICmd_if_last_move_did_damage,.Lfe76-BattleAICmd_if_last_move_did_damage
	.align	2, 0
	.type	 BattleAICmd_if_encored,function
	.thumb_func
BattleAICmd_if_encored:
	push	{r4, lr}
	ldr	r4, .L771
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0
	beq	.L764	@cond_branch
	cmp	r0, #0x1
	beq	.L766	@cond_branch
	b	.L767
.L772:
	.align	2, 0
.L771:
	.word	gAIScriptPtr
.L764:
	ldr	r2, .L773
	ldr	r0, .L773+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L773+0x8
	ldrh	r0, [r0, #0x4]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L770	@cond_branch
	b	.L767
.L774:
	.align	2, 0
.L773:
	.word	gDisableStructs
	.word	gActiveBank
	.word	gSharedMem+0x16800
.L766:
	ldr	r2, .L775
	ldr	r0, .L775+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L775+0x8
	ldrh	r0, [r0, #0x6]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	bne	.L767	@cond_branch
.L770:
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L762
.L776:
	.align	2, 0
.L775:
	.word	gDisableStructs
	.word	gActiveBank
	.word	gSharedMem+0x16800
.L767:
	add	r0, r3, #0x6
	str	r0, [r4]
.L762:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 BattleAICmd_if_encored,.Lfe77-BattleAICmd_if_encored
	.align	2, 0
	.type	 BattleAICmd_flee,function
	.thumb_func
BattleAICmd_flee:
	ldr	r2, .L778
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xb
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L779:
	.align	2, 0
.L778:
	.word	gSharedMem+0x16800
.Lfe78:
	.size	 BattleAICmd_flee,.Lfe78-BattleAICmd_flee
	.align	2, 0
	.type	 BattleAICmd_if_random_100,function
	.thumb_func
BattleAICmd_if_random_100:
	push	{r4, lr}
	ldr	r0, .L783
	ldr	r1, .L783+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L781	@cond_branch
	ldr	r3, .L783+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L782
.L784:
	.align	2, 0
.L783:
	.word	gSharedMem
	.word	0x16088
	.word	gAIScriptPtr
.L781:
	ldr	r1, .L785
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L782:
	pop	{r4}
	pop	{r0}
	bx	r0
.L786:
	.align	2, 0
.L785:
	.word	gAIScriptPtr
.Lfe79:
	.size	 BattleAICmd_if_random_100,.Lfe79-BattleAICmd_if_random_100
	.align	2, 0
	.type	 BattleAICmd_watch,function
	.thumb_func
BattleAICmd_watch:
	ldr	r2, .L788
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xd
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L789:
	.align	2, 0
.L788:
	.word	gSharedMem+0x16800
.Lfe80:
	.size	 BattleAICmd_watch,.Lfe80-BattleAICmd_watch
	.align	2, 0
	.type	 BattleAICmd_get_hold_effect,function
	.thumb_func
BattleAICmd_get_hold_effect:
	push	{r4, lr}
	ldr	r0, .L796
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L791	@cond_branch
	ldr	r0, .L796+0x4
	b	.L795
.L797:
	.align	2, 0
.L796:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L791:
	ldr	r0, .L798
.L795:
	ldrb	r4, [r0]
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L793	@cond_branch
	add	r0, r4, #0
	bl	GetBankIdentity
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r2, .L798+0x4
	ldr	r3, .L798+0x8
	add	r0, r2, r3
	add	r1, r1, r0
	ldrb	r0, [r1]
	str	r0, [r2, #0x8]
	b	.L794
.L799:
	.align	2, 0
.L798:
	.word	gBankTarget
	.word	gSharedMem+0x16800
	.word	0x222
.L793:
	ldr	r1, .L800
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffect
	ldr	r1, .L800+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
.L794:
	ldr	r1, .L800+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L801:
	.align	2, 0
.L800:
	.word	gBattleMons
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.Lfe81:
	.size	 BattleAICmd_get_hold_effect,.Lfe81-BattleAICmd_get_hold_effect
	.align	2, 0
	.type	 BattleAICmd_get_gender,function
	.thumb_func
BattleAICmd_get_gender:
	push	{lr}
	ldr	r0, .L806
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L803	@cond_branch
	ldr	r0, .L806+0x4
	b	.L805
.L807:
	.align	2, 0
.L806:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L803:
	ldr	r0, .L808
.L805:
	ldrb	r1, [r0]
	ldr	r2, .L808+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r2, r2, #0x48
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	ldr	r1, .L808+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L808+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L809:
	.align	2, 0
.L808:
	.word	gBankTarget
	.word	gBattleMons
	.word	gSharedMem+0x16800
	.word	gAIScriptPtr
.Lfe82:
	.size	 BattleAICmd_get_gender,.Lfe82-BattleAICmd_get_gender
	.align	2, 0
	.type	 BattleAICmd_is_first_turn,function
	.thumb_func
BattleAICmd_is_first_turn:
	push	{r4, lr}
	ldr	r0, .L814
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L811	@cond_branch
	ldr	r0, .L814+0x4
	b	.L813
.L815:
	.align	2, 0
.L814:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L811:
	ldr	r0, .L816
.L813:
	ldrb	r3, [r0]
	ldr	r2, .L816+0x4
	ldr	r1, .L816+0x8
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L817:
	.align	2, 0
.L816:
	.word	gBankTarget
	.word	gSharedMem+0x16800
	.word	gDisableStructs
.Lfe83:
	.size	 BattleAICmd_is_first_turn,.Lfe83-BattleAICmd_is_first_turn
	.align	2, 0
	.type	 BattleAICmd_get_stockpile_count,function
	.thumb_func
BattleAICmd_get_stockpile_count:
	push	{r4, lr}
	ldr	r0, .L822
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L819	@cond_branch
	ldr	r0, .L822+0x4
	b	.L821
.L823:
	.align	2, 0
.L822:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L819:
	ldr	r0, .L824
.L821:
	ldrb	r3, [r0]
	ldr	r2, .L824+0x4
	ldr	r1, .L824+0x8
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x9]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L825:
	.align	2, 0
.L824:
	.word	gBankTarget
	.word	gSharedMem+0x16800
	.word	gDisableStructs
.Lfe84:
	.size	 BattleAICmd_get_stockpile_count,.Lfe84-BattleAICmd_get_stockpile_count
	.align	2, 0
	.type	 BattleAICmd_is_double_battle,function
	.thumb_func
BattleAICmd_is_double_battle:
	ldr	r2, .L827
	ldr	r0, .L827+0x4
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r1, .L827+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L828:
	.align	2, 0
.L827:
	.word	gSharedMem+0x16800
	.word	gBattleTypeFlags
	.word	gAIScriptPtr
.Lfe85:
	.size	 BattleAICmd_is_double_battle,.Lfe85-BattleAICmd_is_double_battle
	.align	2, 0
	.type	 BattleAICmd_get_used_item,function
	.thumb_func
BattleAICmd_get_used_item:
	push	{lr}
	ldr	r0, .L833
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r2, r0, #0
	cmp	r1, #0x1
	bne	.L830	@cond_branch
	ldr	r0, .L833+0x4
	b	.L832
.L834:
	.align	2, 0
.L833:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L830:
	ldr	r0, .L835
.L832:
	ldrb	r0, [r0]
	ldr	r1, .L835+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r3, .L835+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	str	r0, [r1, #0x8]
	ldr	r0, [r2]
	add	r0, r0, #0x2
	str	r0, [r2]
	pop	{r0}
	bx	r0
.L836:
	.align	2, 0
.L835:
	.word	gBankTarget
	.word	gSharedMem+0x16800
	.word	0xfffff8cc
.Lfe86:
	.size	 BattleAICmd_get_used_item,.Lfe86-BattleAICmd_get_used_item
	.align	2, 0
	.type	 BattleAICmd_get_move_type_from_result,function
	.thumb_func
BattleAICmd_get_move_type_from_result:
	ldr	r3, .L838
	ldr	r2, .L838+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [r3, #0x8]
	ldr	r1, .L838+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L839:
	.align	2, 0
.L838:
	.word	gSharedMem+0x16800
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe87:
	.size	 BattleAICmd_get_move_type_from_result,.Lfe87-BattleAICmd_get_move_type_from_result
	.align	2, 0
	.type	 BattleAICmd_get_move_power_from_result,function
	.thumb_func
BattleAICmd_get_move_power_from_result:
	ldr	r3, .L841
	ldr	r2, .L841+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	str	r0, [r3, #0x8]
	ldr	r1, .L841+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L842:
	.align	2, 0
.L841:
	.word	gSharedMem+0x16800
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe88:
	.size	 BattleAICmd_get_move_power_from_result,.Lfe88-BattleAICmd_get_move_power_from_result
	.align	2, 0
	.type	 BattleAICmd_get_move_effect_from_result,function
	.thumb_func
BattleAICmd_get_move_effect_from_result:
	ldr	r3, .L844
	ldr	r2, .L844+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L844+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L845:
	.align	2, 0
.L844:
	.word	gSharedMem+0x16800
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe89:
	.size	 BattleAICmd_get_move_effect_from_result,.Lfe89-BattleAICmd_get_move_effect_from_result
	.align	2, 0
	.type	 BattleAICmd_get_protect_count,function
	.thumb_func
BattleAICmd_get_protect_count:
	push	{r4, lr}
	ldr	r0, .L850
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L847	@cond_branch
	ldr	r0, .L850+0x4
	b	.L849
.L851:
	.align	2, 0
.L850:
	.word	gAIScriptPtr
	.word	gBankAttacker
.L847:
	ldr	r0, .L852
.L849:
	ldrb	r3, [r0]
	ldr	r2, .L852+0x4
	ldr	r1, .L852+0x8
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L853:
	.align	2, 0
.L852:
	.word	gBankTarget
	.word	gSharedMem+0x16800
	.word	gDisableStructs
.Lfe90:
	.size	 BattleAICmd_get_protect_count,.Lfe90-BattleAICmd_get_protect_count
	.align	2, 0
	.type	 BattleAICmd_nullsub_52,function
	.thumb_func
BattleAICmd_nullsub_52:
	bx	lr
.Lfe91:
	.size	 BattleAICmd_nullsub_52,.Lfe91-BattleAICmd_nullsub_52
	.align	2, 0
	.type	 BattleAICmd_nullsub_53,function
	.thumb_func
BattleAICmd_nullsub_53:
	bx	lr
.Lfe92:
	.size	 BattleAICmd_nullsub_53,.Lfe92-BattleAICmd_nullsub_53
	.align	2, 0
	.type	 BattleAICmd_nullsub_54,function
	.thumb_func
BattleAICmd_nullsub_54:
	bx	lr
.Lfe93:
	.size	 BattleAICmd_nullsub_54,.Lfe93-BattleAICmd_nullsub_54
	.align	2, 0
	.type	 BattleAICmd_nullsub_55,function
	.thumb_func
BattleAICmd_nullsub_55:
	bx	lr
.Lfe94:
	.size	 BattleAICmd_nullsub_55,.Lfe94-BattleAICmd_nullsub_55
	.align	2, 0
	.type	 BattleAICmd_nullsub_56,function
	.thumb_func
BattleAICmd_nullsub_56:
	bx	lr
.Lfe95:
	.size	 BattleAICmd_nullsub_56,.Lfe95-BattleAICmd_nullsub_56
	.align	2, 0
	.type	 BattleAICmd_nullsub_57,function
	.thumb_func
BattleAICmd_nullsub_57:
	bx	lr
.Lfe96:
	.size	 BattleAICmd_nullsub_57,.Lfe96-BattleAICmd_nullsub_57
	.align	2, 0
	.type	 BattleAICmd_call,function
	.thumb_func
BattleAICmd_call:
	push	{r4, lr}
	ldr	r4, .L861
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L862:
	.align	2, 0
.L861:
	.word	gAIScriptPtr
.Lfe97:
	.size	 BattleAICmd_call,.Lfe97-BattleAICmd_call
	.align	2, 0
	.type	 BattleAICmd_jump,function
	.thumb_func
BattleAICmd_jump:
	ldr	r3, .L864
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L865:
	.align	2, 0
.L864:
	.word	gAIScriptPtr
.Lfe98:
	.size	 BattleAICmd_jump,.Lfe98-BattleAICmd_jump
	.align	2, 0
	.type	 BattleAICmd_end,function
	.thumb_func
BattleAICmd_end:
	push	{lr}
	bl	AIStackPop
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L867	@cond_branch
	ldr	r2, .L868
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L867:
	pop	{r0}
	bx	r0
.L869:
	.align	2, 0
.L868:
	.word	gSharedMem+0x16800
.Lfe99:
	.size	 BattleAICmd_end,.Lfe99-BattleAICmd_end
	.align	2, 0
	.type	 BattleAICmd_if_level_compare,function
	.thumb_func
BattleAICmd_if_level_compare:
	push	{r4, r5, lr}
	ldr	r5, .L882
	ldr	r4, [r5]
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	beq	.L874	@cond_branch
	cmp	r0, #0x1
	bgt	.L880	@cond_branch
	cmp	r0, #0
	beq	.L872	@cond_branch
	b	.L870
.L883:
	.align	2, 0
.L882:
	.word	gAIScriptPtr
.L880:
	cmp	r0, #0x2
	beq	.L876	@cond_branch
	b	.L870
.L872:
	ldr	r3, .L884
	ldr	r0, .L884+0x4
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2a
	ldr	r0, .L884+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bhi	.L881	@cond_branch
	b	.L877
.L885:
	.align	2, 0
.L884:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBankTarget
.L874:
	ldr	r3, .L886
	ldr	r0, .L886+0x4
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2a
	ldr	r0, .L886+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L881	@cond_branch
	b	.L877
.L887:
	.align	2, 0
.L886:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBankTarget
.L876:
	ldr	r3, .L888
	ldr	r0, .L888+0x4
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2a
	ldr	r0, .L888+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L877	@cond_branch
.L881:
	ldrb	r1, [r4, #0x2]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L870
.L889:
	.align	2, 0
.L888:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBankTarget
.L877:
	add	r0, r4, #0x6
	str	r0, [r5]
.L870:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe100:
	.size	 BattleAICmd_if_level_compare,.Lfe100-BattleAICmd_if_level_compare
	.align	2, 0
	.type	 BattleAICmd_if_taunted,function
	.thumb_func
BattleAICmd_if_taunted:
	push	{lr}
	ldr	r2, .L893
	ldr	r0, .L893+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L891	@cond_branch
	ldr	r3, .L893+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L892
.L894:
	.align	2, 0
.L893:
	.word	gDisableStructs
	.word	gBankTarget
	.word	gAIScriptPtr
.L891:
	ldr	r1, .L895
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L892:
	pop	{r0}
	bx	r0
.L896:
	.align	2, 0
.L895:
	.word	gAIScriptPtr
.Lfe101:
	.size	 BattleAICmd_if_taunted,.Lfe101-BattleAICmd_if_taunted
	.align	2, 0
	.type	 BattleAICmd_if_not_taunted,function
	.thumb_func
BattleAICmd_if_not_taunted:
	push	{lr}
	ldr	r2, .L900
	ldr	r0, .L900+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L898	@cond_branch
	ldr	r3, .L900+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L899
.L901:
	.align	2, 0
.L900:
	.word	gDisableStructs
	.word	gBankTarget
	.word	gAIScriptPtr
.L898:
	ldr	r1, .L902
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L899:
	pop	{r0}
	bx	r0
.L903:
	.align	2, 0
.L902:
	.word	gAIScriptPtr
.Lfe102:
	.size	 BattleAICmd_if_not_taunted,.Lfe102-BattleAICmd_if_not_taunted
	.align	2, 0
	.globl	AIStackPushVar
	.type	 AIStackPushVar,function
	.thumb_func
AIStackPushVar:
	push	{r4, lr}
	ldr	r4, .L905
	add	r3, r4, #0
	add	r3, r3, #0x20
	ldrb	r1, [r3]
	add	r2, r1, #0x1
	strb	r2, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r1, r1, r4
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L906:
	.align	2, 0
.L905:
	.word	gSharedMem+0x16c00
.Lfe103:
	.size	 AIStackPushVar,.Lfe103-AIStackPushVar
	.align	2, 0
	.globl	AIStackPushAIPtr
	.type	 AIStackPushAIPtr,function
	.thumb_func
AIStackPushAIPtr:
	ldr	r3, .L908
	add	r2, r3, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	add	r1, r0, #0x1
	strb	r1, [r2]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r3
	ldr	r1, .L908+0x4
	ldr	r1, [r1]
	str	r1, [r0]
	bx	lr
.L909:
	.align	2, 0
.L908:
	.word	gSharedMem+0x16c00
	.word	gAIScriptPtr
.Lfe104:
	.size	 AIStackPushAIPtr,.Lfe104-AIStackPushAIPtr
	.align	2, 0
	.globl	AIStackPop
	.type	 AIStackPop,function
	.thumb_func
AIStackPop:
	push	{lr}
	ldr	r3, .L914
	add	r2, r3, #0
	add	r2, r2, #0x20
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L911	@cond_branch
	mov	r0, #0x0
	b	.L913
.L915:
	.align	2, 0
.L914:
	.word	gSharedMem+0x16c00
.L911:
	sub	r0, r0, #0x1
	strb	r0, [r2]
	ldr	r1, .L916
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r0, #0x1
.L913:
	pop	{r1}
	bx	r1
.L917:
	.align	2, 0
.L916:
	.word	gAIScriptPtr
.Lfe105:
	.size	 AIStackPop,.Lfe105-AIStackPop
.text
	.align	2, 0
