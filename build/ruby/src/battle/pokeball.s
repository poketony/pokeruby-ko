@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sBallSpriteSheets,object
sBallSpriteSheets:
	.word	gInterfaceGfx_PokeBall
	.short	0x180
	.short	0xd6d8
	.word	gInterfaceGfx_GreatBall
	.short	0x180
	.short	0xd6d9
	.word	gInterfaceGfx_SafariBall
	.short	0x180
	.short	0xd6da
	.word	gInterfaceGfx_UltraBall
	.short	0x180
	.short	0xd6db
	.word	gInterfaceGfx_MasterBall
	.short	0x180
	.short	0xd6dc
	.word	gInterfaceGfx_NetBall
	.short	0x180
	.short	0xd6dd
	.word	gInterfaceGfx_DiveBall
	.short	0x180
	.short	0xd6de
	.word	gInterfaceGfx_NestBall
	.short	0x180
	.short	0xd6df
	.word	gInterfaceGfx_RepeatBall
	.short	0x180
	.short	0xd6e0
	.word	gInterfaceGfx_TimerBall
	.short	0x180
	.short	0xd6e1
	.word	gInterfaceGfx_LuxuryBall
	.short	0x180
	.short	0xd6e2
	.word	gInterfaceGfx_PremierBall
	.short	0x180
	.short	0xd6e3
	.size	 sBallSpriteSheets,96
	.align	2, 0
	.type	 sBallSpritePalettes,object
sBallSpritePalettes:
	.word	gInterfacePal_PokeBall
	.short	0xd6d8
	.space	2
	.word	gInterfacePal_GreatBall
	.short	0xd6d9
	.space	2
	.word	gInterfacePal_SafariBall
	.short	0xd6da
	.space	2
	.word	gInterfacePal_UltraBall
	.short	0xd6db
	.space	2
	.word	gInterfacePal_MasterBall
	.short	0xd6dc
	.space	2
	.word	gInterfacePal_NetBall
	.short	0xd6dd
	.space	2
	.word	gInterfacePal_DiveBall
	.short	0xd6de
	.space	2
	.word	gInterfacePal_NestBall
	.short	0xd6df
	.space	2
	.word	gInterfacePal_RepeatBall
	.short	0xd6e0
	.space	2
	.word	gInterfacePal_TimerBall
	.short	0xd6e1
	.space	2
	.word	gInterfacePal_LuxuryBall
	.short	0xd6e2
	.space	2
	.word	gInterfacePal_PremierBall
	.short	0xd6e3
	.space	2
	.size	 sBallSpritePalettes,96
	.align	2, 0
	.type	 sBallOamData,object
	.size	 sBallOamData,8
sBallOamData:
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sBallAnimSeq3,object
sBallAnimSeq3:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0xfffffffe
	.byte	0x0
	.space	1
	.size	 sBallAnimSeq3,8
	.align	2, 0
	.type	 sBallAnimSeq5,object
sBallAnimSeq5:
	.short	0x4
	.byte	0x1
	.space	1
	.short	0xfffffffe
	.byte	0x0
	.space	1
	.size	 sBallAnimSeq5,8
	.align	2, 0
	.type	 sBallAnimSeq4,object
sBallAnimSeq4:
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xfffffffe
	.byte	0x0
	.space	1
	.size	 sBallAnimSeq4,8
	.align	2, 0
	.type	 sBallAnimSeq6,object
sBallAnimSeq6:
	.short	0xc
	.byte	0x1
	.space	1
	.short	0xfffffffe
	.byte	0x0
	.space	1
	.size	 sBallAnimSeq6,8
	.align	2, 0
	.type	 sBallAnimSeq0,object
sBallAnimSeq0:
	.short	0x0
	.byte	0x1
	.space	1
	.short	0xffffffff
	.space	2
	.size	 sBallAnimSeq0,8
	.align	2, 0
	.type	 sBallAnimSeq1,object
sBallAnimSeq1:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 sBallAnimSeq1,12
	.align	2, 0
	.type	 sBallAnimSeq2,object
sBallAnimSeq2:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 sBallAnimSeq2,12
	.align	2, 0
	.type	 sBallAnimSequences,object
sBallAnimSequences:
	.word	sBallAnimSeq0
	.word	sBallAnimSeq1
	.word	sBallAnimSeq2
	.word	sBallAnimSeq3
	.word	sBallAnimSeq4
	.word	sBallAnimSeq5
	.word	sBallAnimSeq6
	.size	 sBallAnimSequences,28
	.align	2, 0
	.type	 sBallAffineAnimSeq0,object
sBallAffineAnimSeq0:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sBallAffineAnimSeq0,16
	.align	2, 0
	.type	 sBallAffineAnimSeq1,object
sBallAffineAnimSeq1:
	.short	0x0
	.short	0x0
	.byte	0xfd
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sBallAffineAnimSeq1,16
	.align	2, 0
	.type	 sBallAffineAnimSeq2,object
sBallAffineAnimSeq2:
	.short	0x0
	.short	0x0
	.byte	0x3
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sBallAffineAnimSeq2,16
	.align	2, 0
	.type	 sBallAffineAnimSeq3,object
sBallAffineAnimSeq3:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 sBallAffineAnimSeq3,16
	.align	2, 0
	.type	 sBallAffineAnimSeq4,object
sBallAffineAnimSeq4:
	.short	0x0
	.short	0x0
	.byte	0x19
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sBallAffineAnimSeq4,16
	.align	2, 0
	.type	 sBallAffineAnimSequences,object
sBallAffineAnimSequences:
	.word	sBallAffineAnimSeq0
	.word	sBallAffineAnimSeq1
	.word	sBallAffineAnimSeq2
	.word	sBallAffineAnimSeq3
	.word	sBallAffineAnimSeq4
	.size	 sBallAffineAnimSequences,20
	.globl	gBallSpriteTemplates
	.align	2, 0
	.type	 gBallSpriteTemplates,object
gBallSpriteTemplates:
	.short	0xd6d8
	.short	0xd6d8
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6d9
	.short	0xd6d9
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6da
	.short	0xd6da
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6db
	.short	0xd6db
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6dc
	.short	0xd6dc
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6dd
	.short	0xd6dd
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6de
	.short	0xd6de
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6df
	.short	0xd6df
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6e0
	.short	0xd6e0
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6e1
	.short	0xd6e1
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6e2
	.short	0xd6e2
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.short	0xd6e3
	.short	0xd6e3
	.word	sBallOamData
	.word	sBallAnimSequences
	.word	0x0
	.word	sBallAffineAnimSequences
	.word	objc_0804ABD4
	.size	 gBallSpriteTemplates,288
.text
	.align	2, 0
	.globl	sub_8046400
	.type	 sub_8046400,function
	.thumb_func
sub_8046400:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, .L3
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r6, .L3+0x4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L3+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L3+0xc
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L3+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0xa]
	strh	r5, [r1, #0xc]
	ldrb	r0, [r6]
	strh	r0, [r1, #0xe]
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L4:
	.align	2, 0
.L3:
	.word	gDoingBattleAnim
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	sub_8046464
	.word	gTasks
.Lfe1:
	.size	 sub_8046400,.Lfe1-sub_8046400
	.align	2, 0
	.type	 sub_8046464,function
	.thumb_func
sub_8046464:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L16
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0x8]
	mov	r3, #0x8
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L6	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x8]
	b	.L5
.L17:
	.align	2, 0
.L16:
	.word	gTasks
.L6:
	ldrh	r0, [r1, #0xc]
	mov	r8, r0
	ldrb	r5, [r1, #0xe]
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L7	@cond_branch
	ldr	r1, .L18
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L18+0x4
	b	.L15
.L19:
	.align	2, 0
.L18:
	.word	gBattlePartyID
	.word	gEnemyParty
.L7:
	ldr	r1, .L20
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L20+0x4
.L15:
	add	r0, r0, r1
	mov	r1, #0x26
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ball_number_to_ball_processing_index
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	sub_80478DC
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L20+0x8
	add	r0, r0, r1
	mov	r1, #0x20
	mov	r2, #0x50
	mov	r3, #0x1d
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r2, .L20+0xc
	mov	r9, r2
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r6, r0, #0x2
	add	r4, r6, r2
	mov	r0, #0x80
	strh	r0, [r4, #0x2e]
	mov	r3, #0x0
	strh	r3, [r4, #0x30]
	mov	r0, r8
	strh	r0, [r4, #0x3c]
	mov	r2, r8
	cmp	r2, #0xfe
	beq	.L11	@cond_branch
	cmp	r2, #0xff
	bne	.L12	@cond_branch
	ldr	r0, .L20+0x10
	strb	r5, [r0]
	mov	r0, #0x18
	strh	r0, [r4, #0x20]
	mov	r0, #0x44
	strh	r0, [r4, #0x22]
	mov	r0, r9
	add	r0, r0, #0x1c
	add	r0, r6, r0
	ldr	r1, .L20+0x14
	str	r1, [r0]
	b	.L9
.L21:
	.align	2, 0
.L20:
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	gBankTarget
	.word	sub_8047074
.L11:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r0, .L22
	strb	r5, [r0]
	mov	r3, #0x0
	strh	r3, [r4, #0x2e]
	mov	r0, r9
	add	r0, r0, #0x1c
	add	r0, r6, r0
	ldr	r1, .L22+0x4
	str	r1, [r0]
	b	.L9
.L23:
	.align	2, 0
.L22:
	.word	gBankTarget
	.word	sub_8047254
.L12:
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	ldr	r1, .L24
	strb	r0, [r1]
	mov	r0, #0x1
	str	r0, [sp]
.L9:
	ldr	r0, .L24+0x4
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r4, r1, r0
	ldr	r5, .L24
	ldrb	r0, [r5]
	strh	r0, [r4, #0x3a]
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L14	@cond_branch
	mov	r0, sl
	bl	DestroyTask
	b	.L5
.L25:
	.align	2, 0
.L24:
	.word	gBankTarget
	.word	gSprites
.L14:
	mov	r0, #0x22
	strh	r0, [r4, #0x2e]
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	strh	r0, [r4, #0x36]
	ldr	r0, .L26
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	sub_80786EC
	mov	r3, sl
	strh	r3, [r4, #0x6]
	ldr	r1, .L26+0x4
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r5]
	strh	r1, [r0, #0x10]
	ldr	r1, .L26+0x8
	str	r1, [r0]
	mov	r0, #0x3d
	bl	PlaySE
.L5:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	0xffd8
	.word	gTasks
	.word	TaskDummy
.Lfe2:
	.size	 sub_8046464,.Lfe2-sub_8046464
	.align	2, 0
	.type	 objc_0804ABD4,function
	.thumb_func
objc_0804ABD4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	add	r7, r0, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L29	@cond_branch
	ldrb	r6, [r7, #0x6]
	ldr	r1, .L30
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r5, [r0, #0x10]
	ldrb	r0, [r0, #0xc]
	mov	r8, r0
	add	r0, r7, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r2, r7, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r7, #0x24]
	ldrh	r1, [r7, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r7, #0x20]
	ldrh	r0, [r7, #0x26]
	ldrh	r2, [r7, #0x22]
	add	r0, r0, r2
	strh	r0, [r7, #0x22]
	strh	r1, [r7, #0x24]
	strh	r1, [r7, #0x26]
	strh	r1, [r7, #0x38]
	add	r0, r5, #0
	bl	sub_8047978
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ball_number_to_ball_processing_index
	add	r4, r0, #0
	ldrh	r0, [r7, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r7, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	sub_814086C
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0xe
	add	r3, r4, #0
	bl	sub_8141314
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x2e]
	strh	r5, [r7, #0x3a]
	mov	r0, r8
	strh	r0, [r7, #0x3c]
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r0, .L30+0x4
	str	r0, [r7, #0x1c]
.L29:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gTasks
	.word	sub_80466E8
.Lfe3:
	.size	 objc_0804ABD4,.Lfe3-objc_0804ABD4
	.align	2, 0
	.type	 sub_80466E8,function
	.thumb_func
sub_80466E8:
	ldr	r1, .L33
	str	r1, [r0, #0x1c]
	bx	lr
.L34:
	.align	2, 0
.L33:
	.word	sub_80466F4
.Lfe4:
	.size	 sub_80466E8,.Lfe4-sub_80466E8
	.align	2, 0
	.type	 sub_80466F4,function
	.thumb_func
sub_80466F4:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x38]
	add	r0, r0, #0x1
	mov	r7, #0x0
	strh	r0, [r6, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L36	@cond_branch
	strh	r7, [r6, #0x38]
	ldr	r0, .L37
	str	r0, [r6, #0x1c]
	ldr	r5, .L37+0x4
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L37+0x8
	add	r0, r0, r4
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	AnimateSprite
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r7, [r0, #0x30]
.L36:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	sub_8046760
	.word	gObjectBankIDs
	.word	gSprites
.Lfe5:
	.size	 sub_80466F4,.Lfe5-sub_80466F4
	.align	2, 0
	.type	 sub_8046760,function
	.thumb_func
sub_8046760:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L40	@cond_branch
	mov	r0, #0x3c
	bl	PlaySE
.L40:
	ldr	r6, .L43
	ldr	r5, .L43+0x4
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r6
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L41	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldr	r0, .L43+0x8
	str	r0, [r4, #0x1c]
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	gSprites
	.word	gObjectBankIDs
	.word	sub_80467F8
.L41:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x60
	strh	r0, [r1, #0x30]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r2, #0x30
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	asr	r0, r0, #0x8
	strh	r0, [r1, #0x26]
.L42:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_8046760,.Lfe6-sub_8046760
	.align	2, 0
	.type	 sub_80467F8,function
	.thumb_func
sub_80467F8:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L46	@cond_branch
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L46	@cond_branch
	strh	r1, [r4, #0x34]
	mov	r0, #0x20
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	mov	r0, #0x0
	mov	r1, #0x20
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x36
	ldrsh	r1, [r4, r0]
	mov	r0, #0x0
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldr	r0, .L48
	str	r0, [r4, #0x1c]
.L46:
	pop	{r4}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	sub_804684C
.Lfe7:
	.size	 sub_80467F8,.Lfe7-sub_80467F8
	.align	2, 0
	.type	 sub_804684C,function
	.thumb_func
sub_804684C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L52	@cond_branch
	cmp	r1, #0x1
	beq	.L62	@cond_branch
	b	.L51
.L52:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	add	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	add	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x3f
	ble	.L51	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x36]
	ldr	r1, .L69
	add	r0, r2, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L54	@cond_branch
	mov	r5, #0x1
.L54:
	cmp	r0, #0x2
	beq	.L57	@cond_branch
	cmp	r0, #0x2
	bgt	.L61	@cond_branch
	cmp	r0, #0x1
	beq	.L56	@cond_branch
	b	.L59
.L70:
	.align	2, 0
.L69:
	.word	0x101
.L61:
	cmp	r0, #0x3
	beq	.L58	@cond_branch
	b	.L59
.L56:
	mov	r0, #0x38
	bl	PlaySE
	b	.L51
.L57:
	mov	r0, #0x39
	bl	PlaySE
	b	.L51
.L58:
	mov	r0, #0x3a
	bl	PlaySE
	b	.L51
.L59:
	mov	r0, #0x3b
	bl	PlaySE
	b	.L51
.L62:
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	sub	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	sub	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L51	@cond_branch
	strh	r5, [r4, #0x38]
	ldr	r0, .L71
	and	r0, r0, r2
	strh	r0, [r4, #0x34]
.L51:
	cmp	r5, #0
	beq	.L66	@cond_branch
	mov	r5, #0x0
	strh	r5, [r4, #0x34]
	mov	r0, #0x40
	mov	r1, #0x20
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x26]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L67	@cond_branch
	ldr	r0, .L71+0x4
	str	r0, [r4, #0x1c]
	b	.L66
.L72:
	.align	2, 0
.L71:
	.word	0xffffff00
	.word	sub_8046C78
.L67:
	ldr	r0, .L73
	str	r0, [r4, #0x1c]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	strh	r5, [r4, #0x38]
.L66:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	sub_8046944
.Lfe8:
	.size	 sub_804684C,.Lfe8-sub_804684C
	.align	2, 0
	.type	 sub_8046944,function
	.thumb_func
sub_8046944:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L76	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L77
	str	r0, [r4, #0x1c]
	mov	r0, #0x17
	bl	PlaySE
.L76:
	pop	{r4}
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	sub_8046984
.Lfe9:
	.size	 sub_8046944,.Lfe9-sub_8046944
	.align	2, 0
	.type	 sub_8046984,function
	.thumb_func
sub_8046984:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0x4
	bhi	.L95	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L101
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L102:
	.align	2, 0
.L101:
	.word	.L99
	.align	2, 0
	.align	2, 0
.L99:
	.word	.L82
	.word	.L84
	.word	.L82
	.word	.L89
	.word	.L95
.L82:
	ldrh	r0, [r4, #0x36]
	ldrh	r2, [r4, #0x24]
	add	r1, r0, r2
	strh	r1, [r4, #0x24]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x6
	bls	.L80	@cond_branch
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	b	.L80
.L84:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L85	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bge	.L86	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	ChangeSpriteAffineAnim
	b	.L80
.L86:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	b	.L80
.L85:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L80
.L89:
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r2, [r4, #0x34]
	add	r0, r0, r2
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r2, #0x3c
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L90	@cond_branch
	ldr	r0, .L103
	str	r0, [r4, #0x1c]
	b	.L80
.L104:
	.align	2, 0
.L103:
	.word	sub_8046C78
.L90:
	cmp	r1, #0x4
	bne	.L92	@cond_branch
	cmp	r0, #0x3
	bne	.L92	@cond_branch
	ldr	r0, .L105
	str	r0, [r4, #0x1c]
	b	.L100
.L106:
	.align	2, 0
.L105:
	.word	sub_8046E7C
.L92:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
.L100:
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L80
.L95:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L80	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r1, [r4, #0x34]
	ldr	r0, .L107
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	StartSpriteAffineAnim
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L97	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	b	.L98
.L108:
	.align	2, 0
.L107:
	.word	0xffffff00
.L97:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L98:
	mov	r0, #0x17
	bl	PlaySE
.L80:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_8046984,.Lfe10-sub_8046984
	.align	2, 0
	.type	 sub_8046AD0,function
	.thumb_func
sub_8046AD0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L129
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r6, [r0, #0xc]
	ldrb	r3, [r0, #0xa]
	ldrh	r5, [r0, #0x8]
	mov	r2, #0x26
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x20
	bhi	.L112	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L129+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L130:
	.align	2, 0
.L129:
	.word	gTasks
	.word	.L126
	.align	2, 0
	.align	2, 0
.L126:
	.word	.L112
	.word	.L115
	.word	.L116
	.word	.L119
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L117
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L112
	.word	.L120
	.word	.L122
	.word	.L124
.L112:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r2, [r1, #0x18]
	mov	r3, #0x18
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x2
	bgt	.L113	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x18]
	b	.L110
.L113:
	add	r0, r6, #0x1
	strh	r0, [r1, #0x26]
	b	.L110
.L115:
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	PlayCry1
	b	.L127
.L116:
	bl	StopCryAndClearCrySongs
	ldr	r1, .L131
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3
	strh	r1, [r0, #0x1c]
	mov	r1, #0x14
	strh	r1, [r0, #0x26]
	b	.L110
.L132:
	.align	2, 0
.L131:
	.word	gTasks
.L117:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r2, [r1, #0x1c]
	mov	r6, #0x1c
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	bne	.L128	@cond_branch
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	mov	r2, #0x1
	bl	PlayCry4
.L127:
	add	r0, r4, #0
	bl	DestroyTask
	b	.L110
.L119:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x6
	strh	r1, [r0, #0x1c]
	mov	r1, #0x1e
	strh	r1, [r0, #0x26]
	b	.L110
.L120:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r2, [r1, #0x1c]
	mov	r3, #0x1c
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L128	@cond_branch
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
.L122:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L110	@cond_branch
	bl	StopCryAndClearCrySongs
	ldr	r0, .L133
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x3
	strh	r0, [r1, #0x1c]
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	b	.L110
.L134:
	.align	2, 0
.L133:
	.word	gTasks
.L124:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r2, [r1, #0x1c]
	mov	r6, #0x1c
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	beq	.L125	@cond_branch
.L128:
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x1c]
	b	.L110
.L125:
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	mov	r2, #0x0
	bl	PlayCry4
	add	r0, r4, #0
	bl	DestroyTask
.L110:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_8046AD0,.Lfe11-sub_8046AD0
	.align	2, 0
	.type	 sub_8046C78,function
	.thumb_func
sub_8046C78:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	ldrh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r0, r5, #0
	bl	sub_8047978
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ball_number_to_ball_processing_index
	add	r4, r0, #0
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	sub_814086C
	ldrh	r1, [r6, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0xe
	add	r3, r4, #0
	bl	sub_8141314
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x2e]
	ldr	r0, .L150
	str	r0, [r6, #0x1c]
	ldr	r0, .L150+0x4
	ldr	r1, .L150+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1377
	b	.L136	@long jump
.LCB1377:
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L137	@cond_branch
	ldr	r1, .L150+0xc
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L150+0x10
	add	r0, r1, r0
	mov	r3, #0x19
	mov	r8, r3
	b	.L138
.L151:
	.align	2, 0
.L150:
	.word	sub_8046E9C
	.word	gMain
	.word	0x43d
	.word	gBattlePartyID
	.word	gEnemyParty
.L137:
	ldr	r1, .L152
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L152+0x4
	add	r0, r1, r0
	mov	r1, #0xe7
	mov	r8, r1
.L138:
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L140	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	bne	.L139	@cond_branch
.L140:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L139	@cond_branch
	ldr	r0, .L152+0x8
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L139	@cond_branch
	ldr	r0, .L152+0xc
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L141	@cond_branch
	bl	IsBGMPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L139	@cond_branch
	ldr	r0, .L152+0x10
	bl	m4aMPlayStop
	b	.L139
.L153:
	.align	2, 0
.L152:
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gSharedMem+0x17840
	.word	gBattleTypeFlags
	.word	gMPlay_BGM
.L141:
	ldr	r0, .L154
	ldr	r1, .L154+0x4
	mov	r2, #0x80
	bl	m4aMPlayVolumeControl
.L139:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L145	@cond_branch
	ldr	r0, .L154+0x8
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L144	@cond_branch
.L145:
	mov	r4, #0x0
	b	.L146
.L155:
	.align	2, 0
.L154:
	.word	gMPlay_BGM
	.word	0xffff
	.word	gSharedMem+0x17840
.L144:
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L148	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	bne	.L147	@cond_branch
.L148:
	mov	r4, #0x1
	b	.L146
.L147:
	mov	r4, #0x2
.L146:
	ldr	r0, .L156
	mov	r1, #0x3
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L156+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r7, [r1, #0x8]
	mov	r3, r8
	lsl	r0, r3, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0xa]
	strh	r4, [r1, #0xc]
	strh	r2, [r1, #0x26]
.L136:
	ldr	r5, .L156+0x8
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L156+0xc
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r3, #0x3a
	ldrsh	r0, [r6, r3]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	AnimateSprite
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	strh	r1, [r0, #0x30]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L157:
	.align	2, 0
.L156:
	.word	sub_8046AD0
	.word	gTasks
	.word	gObjectBankIDs
	.word	gSprites
.Lfe12:
	.size	 sub_8046C78,.Lfe12-sub_8046C78
	.align	2, 0
	.type	 sub_8046E7C,function
	.thumb_func
sub_8046E7C:
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r1, .L159
	str	r1, [r0, #0x1c]
	mov	r1, #0x0
	strh	r1, [r0, #0x34]
	strh	r1, [r0, #0x36]
	strh	r1, [r0, #0x38]
	bx	lr
.L160:
	.align	2, 0
.L159:
	.word	sub_8046FBC
.Lfe13:
	.size	 sub_8046E7C,.Lfe13-sub_8046E7C
	.align	2, 0
	.type	 sub_8046E9C,function
	.thumb_func
sub_8046E9C:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r7, #0x0
	ldrh	r0, [r5, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r6, .L178
	ldr	r0, .L178+0x4
	add	r3, r4, r0
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L162	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L162:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L163	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r7, #0x1
	b	.L164
.L179:
	.align	2, 0
.L178:
	.word	gSprites
	.word	gObjectBankIDs
.L163:
	ldr	r2, .L180
	add	r0, r2, #0
	ldrh	r2, [r1, #0x30]
	add	r0, r0, r2
	strh	r0, [r1, #0x30]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
.L164:
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L165	@cond_branch
	cmp	r7, #0
	beq	.L165	@cond_branch
	ldr	r2, .L180+0x4
	ldr	r0, .L180+0x8
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x0
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	ldr	r0, .L180+0xc
	strb	r2, [r0]
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	ldr	r4, .L180+0x10
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r5, #0
	bl	FreeSpriteOamMatrix
	add	r0, r5, #0
	bl	DestroySprite
	mov	r3, #0x0
	mov	r5, #0x8
	add	r2, r4, #0
	mov	r4, #0x3
.L169:
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L168	@cond_branch
	add	r3, r3, #0x1
.L168:
	add	r2, r2, #0xc
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L169	@cond_branch
	cmp	r3, #0x4
	bne	.L165	@cond_branch
	mov	r4, #0x0
.L176:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_804794C
	add	r4, r4, #0x1
	cmp	r4, #0xb
	ble	.L176	@cond_branch
.L165:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	0xfffffee0
	.word	gSprites
	.word	gObjectBankIDs
	.word	gDoingBattleAnim
	.word	gSharedMem+0x17810
.Lfe14:
	.size	 sub_8046E9C,.Lfe14-sub_8046E9C
	.align	2, 0
	.type	 sub_8046FBC,function
	.thumb_func
sub_8046FBC:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r6, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x36]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0x28
	beq	.L182	@cond_branch
	cmp	r1, #0x5f
	bne	.L185	@cond_branch
	ldr	r0, .L189
	mov	r1, #0x0
	strb	r1, [r0]
	bl	m4aMPlayAllStop
	ldr	r0, .L189+0x4
	bl	PlaySE
	b	.L182
.L190:
	.align	2, 0
.L189:
	.word	gDoingBattleAnim
	.word	0x173
.L185:
	ldr	r0, .L191
	cmp	r1, r0
	bne	.L182	@cond_branch
	ldr	r5, .L191+0x4
	ldr	r4, .L191+0x8
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r0, r6, #0
	bl	DestroySpriteAndFreeResources
	ldr	r0, .L191+0xc
	ldr	r1, .L191+0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L182	@cond_branch
	lsl	r1, r7, #0x1
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	ldr	r0, .L191+0x14
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L182:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	0x13b
	.word	gSprites
	.word	gObjectBankIDs
	.word	gMain
	.word	0x43d
	.word	gSharedMem+0x17810
.Lfe15:
	.size	 sub_8046FBC,.Lfe15-sub_8046FBC
	.align	2, 0
	.type	 sub_8047074,function
	.thumb_func
sub_8047074:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x19
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L194
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x3a]
	strh	r0, [r4, #0x6]
	add	r0, r4, #0
	bl	sub_80786EC
	ldr	r0, .L194+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	0xffe2
	.word	sub_80470C4
.Lfe16:
	.size	 sub_8047074,.Lfe16-sub_8047074
	.align	2, 0
	.type	 sub_80470C4,function
	.thumb_func
sub_80470C4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x3c]
	mov	r1, #0xff
	mov	r8, r1
	lsr	r0, r0, #0x8
	sub	r0, r0, #0x23
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2c
	bhi	.L197	@cond_branch
	ldrh	r1, [r5, #0x6]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L198	@cond_branch
	ldrh	r0, [r5, #0x30]
	mov	r1, #0x1
	add	r6, r1, #0
	and	r6, r6, r0
	ldrh	r0, [r5, #0x32]
	add	r7, r1, #0
	and	r7, r7, r0
	mov	r2, #0x30
	ldrsh	r0, [r5, r2]
	mov	r1, #0x3
	bl	__divsi3
	mov	r1, #0x2
	neg	r1, r1
	add	r4, r1, #0
	and	r0, r0, r4
	orr	r6, r6, r0
	strh	r6, [r5, #0x30]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	mov	r1, #0x3
	bl	__divsi3
	and	r0, r0, r4
	orr	r7, r7, r0
	strh	r7, [r5, #0x32]
	add	r0, r5, #0
	mov	r1, #0x4
	bl	StartSpriteAffineAnim
.L198:
	ldrh	r4, [r5, #0x2e]
	add	r0, r5, #0
	bl	sub_8078B5C
	mov	r1, #0x3a
	ldrsh	r0, [r5, r1]
	mov	r1, #0x3
	bl	__divsi3
	add	r1, r0, #0
	ldrh	r0, [r5, #0x3c]
	add	r0, r0, r1
	strh	r0, [r5, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r2, r8
	and	r0, r0, r2
	mov	r2, #0x38
	ldrsh	r1, [r5, r2]
	bl	Sin
	ldrh	r1, [r5, #0x26]
	add	r0, r0, r1
	strh	r0, [r5, #0x26]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	ldrh	r1, [r5, #0x6]
	add	r0, r0, r1
	strh	r0, [r5, #0x6]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L199	@cond_branch
	strh	r4, [r5, #0x2e]
	b	.L200
.L199:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L200:
	ldrh	r0, [r5, #0x3c]
	lsr	r0, r0, #0x8
	cmp	r0, #0x4f
	ble	.L202	@cond_branch
	ldrh	r0, [r5, #0x30]
	mov	r1, #0x1
	add	r6, r1, #0
	and	r6, r6, r0
	ldrh	r0, [r5, #0x32]
	add	r7, r1, #0
	and	r7, r7, r0
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0x2
	neg	r1, r1
	add	r2, r1, #0
	and	r0, r0, r2
	orr	r0, r0, r6
	strh	r0, [r5, #0x30]
	mov	r0, #0x32
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	and	r0, r0, r2
	orr	r0, r0, r7
	strh	r0, [r5, #0x32]
	b	.L202
.L197:
	add	r0, r5, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L202	@cond_branch
	ldrh	r0, [r5, #0x24]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r1, [r5, #0x26]
	strh	r1, [r5, #0x24]
	ldrb	r0, [r5, #0x6]
	strh	r0, [r5, #0x3a]
	strh	r1, [r5, #0x2e]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L204	@cond_branch
	ldr	r0, .L207
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L204	@cond_branch
	mov	r0, #0x3a
	ldrsh	r4, [r5, r0]
	mov	r0, #0x2
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bne	.L204	@cond_branch
	ldr	r0, .L207+0x4
	b	.L206
.L208:
	.align	2, 0
.L207:
	.word	gSharedMem+0x17840
	.word	sub_8047230
.L204:
	ldr	r0, .L209
.L206:
	str	r0, [r5, #0x1c]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
.L202:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	sub_8046C78
.Lfe17:
	.size	 sub_80470C4,.Lfe17-sub_80470C4
	.align	2, 0
	.type	 sub_8047230,function
	.thumb_func
sub_8047230:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x18
	ble	.L212	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldr	r0, .L213
	str	r0, [r2, #0x1c]
.L212:
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	sub_8046C78
.Lfe18:
	.size	 sub_8047230,.Lfe18-sub_8047230
	.align	2, 0
	.type	 sub_8047254,function
	.thumb_func
sub_8047254:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L216	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L217	@cond_branch
	ldr	r0, .L220
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L217	@cond_branch
	mov	r0, #0x3a
	ldrsh	r4, [r5, r0]
	mov	r0, #0x3
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bne	.L217	@cond_branch
	ldr	r0, .L220+0x4
	b	.L219
.L221:
	.align	2, 0
.L220:
	.word	gSharedMem+0x17840
	.word	sub_8047230
.L217:
	ldr	r0, .L222
.L219:
	str	r0, [r5, #0x1c]
.L216:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	sub_8046C78
.Lfe19:
	.size	 sub_8047254,.Lfe19-sub_8047254
	.align	2, 0
	.type	 sub_80472B0,function
	.thumb_func
sub_80472B0:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r4, #0x0
	str	r4, [sp]
	bl	sub_814086C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 sub_80472B0,.Lfe20-sub_80472B0
	.align	2, 0
	.type	 sub_80472D8,function
	.thumb_func
sub_80472D8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x0
	bl	sub_8141314
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 sub_80472D8,.Lfe21-sub_80472D8
	.align	2, 0
	.globl	CreatePokeballSprite
	.type	 CreatePokeballSprite,function
	.thumb_func
CreatePokeballSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	mov	r9, r2
	mov	sl, r3
	ldr	r6, [sp, #0x24]
	ldr	r4, [sp, #0x28]
	ldr	r0, [sp, #0x2c]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r2, sl
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L227
	bl	LoadCompressedObjectPic
	ldr	r0, .L227+0x4
	bl	LoadCompressedObjectPalette
	ldr	r0, .L227+0x8
	mov	r1, r9
	mov	r2, sl
	add	r3, r4, #0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L227+0xc
	mov	r8, r3
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r1, r4, r3
	strh	r5, [r1, #0x2e]
	lsl	r2, r5, #0x4
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r0, [r2, #0x20]
	strh	r0, [r1, #0x38]
	ldrh	r0, [r2, #0x22]
	strh	r0, [r1, #0x3a]
	mov	r0, r9
	strh	r0, [r2, #0x20]
	mov	r3, sl
	strh	r3, [r2, #0x22]
	strh	r7, [r1, #0x30]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r1, #0x32]
	mov	r3, sp
	ldrh	r3, [r3, #0x30]
	strh	r3, [r1, #0x34]
	ldr	r3, [sp, #0x30]
	lsr	r0, r3, #0x10
	strh	r0, [r1, #0x36]
	mov	r0, #0x3
	and	r6, r6, r0
	lsl	r6, r6, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
	mov	r0, #0x1c
	add	r8, r8, r0
	add	r4, r4, r8
	ldr	r0, .L227+0x10
	str	r0, [r4]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L228:
	.align	2, 0
.L227:
	.word	sBallSpriteSheets
	.word	sBallSpritePalettes
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	sub_80473D0
.Lfe22:
	.size	 CreatePokeballSprite,.Lfe22-CreatePokeballSprite
	.align	2, 0
	.type	 sub_80473D0,function
	.thumb_func
sub_80473D0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldrh	r1, [r6, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	bne	.L230	@cond_branch
	ldrh	r0, [r6, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r6, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrh	r4, [r6, #0x34]
	ldrh	r0, [r6, #0x36]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	add	r0, r6, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L231	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L232
.L231:
	mov	r5, #0x0
.L232:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r6, #0x5]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1e
	add	r3, r5, #0
	bl	sub_80472B0
	mov	r0, #0x1
	mov	r1, r8
	add	r2, r4, #0
	bl	sub_80472D8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r6, #0x30]
	ldr	r0, .L234
	str	r0, [r6, #0x1c]
	ldr	r0, .L234+0x4
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	add	r0, r4, #0
	bl	AnimateSprite
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	strh	r0, [r4, #0x30]
	strh	r5, [r6, #0x3c]
	b	.L233
.L235:
	.align	2, 0
.L234:
	.word	sub_804748C
	.word	gSprites
.L230:
	sub	r0, r1, #0x1
	strh	r0, [r6, #0x30]
.L233:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_80473D0,.Lfe23-sub_80473D0
	.align	2, 0
	.type	 sub_804748C,function
	.thumb_func
sub_804748C:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	r0, #0x0
	mov	ip, r0
	mov	r6, #0x0
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L237	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L237:
	ldr	r0, .L245
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r5, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L238	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r1, #0x1
	mov	ip, r1
.L238:
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r7, #0x20
	ldrsh	r1, [r4, r7]
	sub	r0, r0, r1
	mov	r1, #0x3c
	ldrsh	r2, [r4, r1]
	mul	r0, r0, r2
	cmp	r0, #0
	bge	.L239	@cond_branch
	add	r0, r0, #0x7f
.L239:
	asr	r0, r0, #0x7
	ldrh	r7, [r4, #0x20]
	add	r0, r0, r7
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	mov	r7, #0x22
	ldrsh	r1, [r4, r7]
	sub	r0, r0, r1
	mul	r0, r0, r2
	cmp	r0, #0
	bge	.L240	@cond_branch
	add	r0, r0, #0x7f
.L240:
	asr	r0, r0, #0x7
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r3, [r5, #0x20]
	strh	r0, [r5, #0x22]
	ldrh	r2, [r4, #0x3c]
	mov	r7, #0x3c
	ldrsh	r0, [r4, r7]
	cmp	r0, #0x7f
	bgt	.L241	@cond_branch
	ldr	r1, .L245+0x4
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L242	@cond_branch
	add	r0, r0, #0x7
.L242:
	asr	r0, r0, #0x3
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r2, #0x4
	strh	r1, [r4, #0x3c]
	strh	r0, [r5, #0x24]
	strh	r0, [r5, #0x26]
	b	.L243
.L246:
	.align	2, 0
.L245:
	.word	gSprites
	.word	gSineTable
.L241:
	ldrh	r0, [r4, #0x38]
	strh	r0, [r5, #0x20]
	ldrh	r0, [r4, #0x3a]
	strh	r0, [r5, #0x22]
	strh	r6, [r5, #0x24]
	strh	r6, [r5, #0x26]
	mov	r6, #0x1
.L243:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L244	@cond_branch
	mov	r2, ip
	cmp	r2, #0
	beq	.L244	@cond_branch
	cmp	r6, #0
	beq	.L244	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndFreeResources
.L244:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 sub_804748C,.Lfe24-sub_804748C
	.align	2, 0
	.globl	sub_8047580
	.type	 sub_8047580,function
	.thumb_func
sub_8047580:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	add	r6, r2, #0
	mov	r8, r3
	ldr	r5, [sp, #0x20]
	ldr	r4, [sp, #0x24]
	ldr	r0, [sp, #0x28]
	mov	r9, r0
	mov	r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r1, r8
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L248
	bl	LoadCompressedObjectPic
	ldr	r0, .L248+0x4
	bl	LoadCompressedObjectPalette
	ldr	r0, .L248+0x8
	add	r1, r6, #0
	mov	r2, r8
	add	r3, r4, #0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L248+0xc
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r2, r3, r6
	mov	r1, sl
	strh	r1, [r2, #0x2e]
	mov	r4, r9
	strh	r4, [r2, #0x30]
	strh	r7, [r2, #0x32]
	mov	r1, sp
	ldrh	r1, [r1, #0x2c]
	strh	r1, [r2, #0x34]
	ldr	r4, [sp, #0x2c]
	lsr	r1, r4, #0x10
	strh	r1, [r2, #0x36]
	mov	r1, #0x3
	and	r5, r5, r1
	lsl	r5, r5, #0x2
	ldrb	r4, [r2, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r4
	orr	r1, r1, r5
	strb	r1, [r2, #0x5]
	add	r6, r6, #0x1c
	add	r3, r3, r6
	ldr	r1, .L248+0x10
	str	r1, [r3]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L249:
	.align	2, 0
.L248:
	.word	sBallSpriteSheets
	.word	sBallSpritePalettes
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	sub_8047638
.Lfe25:
	.size	 sub_8047580,.Lfe25-sub_8047580
	.align	2, 0
	.type	 sub_8047638,function
	.thumb_func
sub_8047638:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L251	@cond_branch
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrh	r5, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
	add	r0, r4, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L252	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L253
.L252:
	mov	r6, #0x0
.L253:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r4, #0x5]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1e
	add	r3, r6, #0
	bl	sub_80472B0
	mov	r0, #0x1
	mov	r1, r8
	add	r2, r5, #0
	bl	sub_80472D8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x30]
	ldr	r0, .L255
	str	r0, [r4, #0x1c]
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	ldr	r0, .L255+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	add	r0, r4, #0
	bl	AnimateSprite
	strh	r5, [r4, #0x30]
	b	.L254
.L256:
	.align	2, 0
.L255:
	.word	sub_80476E0
	.word	gSprites
.L251:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
.L254:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_8047638,.Lfe26-sub_8047638
	.align	2, 0
	.type	 sub_80476E0,function
	.thumb_func
sub_80476E0:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L258	@cond_branch
	mov	r0, #0x3c
	bl	PlaySE
.L258:
	ldrh	r1, [r5, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L261
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L259	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r5, #0x38]
	ldr	r0, .L261+0x4
	str	r0, [r5, #0x1c]
	b	.L260
.L262:
	.align	2, 0
.L261:
	.word	gSprites
	.word	sub_8047754
.L259:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x60
	strh	r0, [r4, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	asr	r0, r0, #0x8
	strh	r0, [r4, #0x26]
.L260:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_80476E0,.Lfe27-sub_80476E0
	.align	2, 0
	.type	 sub_8047754,function
	.thumb_func
sub_8047754:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L264	@cond_branch
	ldr	r0, .L265
	str	r0, [r2, #0x1c]
.L264:
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	SpriteCallbackDummy
.Lfe28:
	.size	 sub_8047754,.Lfe28-sub_8047754
	.align	2, 0
	.globl	obj_delete_and_free_associated_resources_
	.type	 obj_delete_and_free_associated_resources_,function
	.thumb_func
obj_delete_and_free_associated_resources_:
	push	{lr}
	bl	DestroySpriteAndFreeResources
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 obj_delete_and_free_associated_resources_,.Lfe29-obj_delete_and_free_associated_resources_
	.align	2, 0
	.globl	sub_804777C
	.type	 sub_804777C,function
	.thumb_func
sub_804777C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r0, .L271
	add	r0, r5, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r6, .L271+0x4
	add	r4, r0, r6
	mov	r1, #0x0
	mov	r0, #0x5
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r0, #0x73
	strh	r0, [r4, #0x24]
	strh	r1, [r4, #0x26]
	ldr	r0, .L271+0x8
	str	r0, [r4, #0x1c]
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L269	@cond_branch
	ldrh	r0, [r4, #0x2e]
	neg	r0, r0
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L269:
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r1, r0, r1
	add	r0, r0, r6
	ldr	r1, [r1]
	bl	_call_via_r1
	add	r0, r5, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L270	@cond_branch
	ldr	r0, .L271+0xc
	str	r0, [r4, #0x1c]
.L270:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	gHealthboxIDs
	.word	gSprites
	.word	sub_8047830
	.word	sub_804780C
.Lfe30:
	.size	 sub_804777C,.Lfe30-sub_804777C
	.align	2, 0
	.type	 sub_804780C,function
	.thumb_func
sub_804780C:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bne	.L274	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	ldr	r0, .L275
	str	r0, [r1, #0x1c]
.L274:
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	sub_8047830
.Lfe31:
	.size	 sub_804780C,.Lfe31-sub_804780C
	.align	2, 0
	.type	 sub_8047830,function
	.thumb_func
sub_8047830:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x2e]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x26]
	ldrh	r1, [r2, #0x30]
	sub	r0, r0, r1
	strh	r0, [r2, #0x26]
	ldr	r0, [r2, #0x24]
	cmp	r0, #0
	bne	.L278	@cond_branch
	ldr	r0, .L279
	str	r0, [r2, #0x1c]
.L278:
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	SpriteCallbackDummy
.Lfe32:
	.size	 sub_8047830,.Lfe32-sub_8047830
	.align	2, 0
	.globl	sub_8047858
	.type	 sub_8047858,function
	.thumb_func
sub_8047858:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L282
	add	r0, r5, #0
	bl	CreateInvisibleSpriteWithCallback
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L282+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r3, r1, r2
	mov	r0, #0x1
	strh	r0, [r3, #0x2e]
	ldr	r0, .L282+0x8
	add	r4, r4, r0
	ldrb	r0, [r4]
	strh	r0, [r3, #0x30]
	add	r2, r2, #0x1c
	add	r1, r1, r2
	str	r5, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L283:
	.align	2, 0
.L282:
	.word	oamc_804BEB4
	.word	gSprites
	.word	gHealthboxIDs
.Lfe33:
	.size	 sub_8047858,.Lfe33-sub_8047858
	.align	2, 0
	.type	 oamc_804BEB4,function
	.thumb_func
oamc_804BEB4:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L286
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrh	r0, [r3, #0x2e]
	mov	r2, #0x0
	strh	r0, [r1, #0x26]
	ldrh	r0, [r3, #0x2e]
	neg	r0, r0
	strh	r0, [r3, #0x2e]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L285	@cond_branch
	strh	r2, [r1, #0x24]
	strh	r2, [r1, #0x26]
	add	r0, r3, #0
	bl	DestroySprite
.L285:
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	gSprites
.Lfe34:
	.size	 oamc_804BEB4,.Lfe34-oamc_804BEB4
	.align	2, 0
	.globl	sub_80478DC
	.type	 sub_80478DC,function
	.thumb_func
sub_80478DC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L296
	lsl	r6, r4, #0x3
	add	r5, r6, r0
	ldrh	r0, [r5, #0x6]
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L296+0x4
	cmp	r0, r1
	bne	.L289	@cond_branch
	add	r0, r5, #0
	bl	LoadCompressedObjectPic
	ldr	r0, .L296+0x8
	add	r0, r6, r0
	bl	LoadCompressedObjectPalette
.L289:
	cmp	r4, #0x6
	beq	.L290	@cond_branch
	cmp	r4, #0x6
	blt	.L294	@cond_branch
	cmp	r4, #0xb
	bgt	.L294	@cond_branch
	cmp	r4, #0xa
	bge	.L290	@cond_branch
.L294:
	ldr	r1, .L296
	lsl	r0, r4, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	ldr	r0, .L296+0xc
	lsr	r1, r1, #0xb
	ldr	r2, .L296+0x10
	add	r1, r1, r2
	bl	LZDecompressVram
.L290:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L297:
	.align	2, 0
.L296:
	.word	sBallSpriteSheets
	.word	0xffff0000
	.word	sBallSpritePalettes
	.word	gUnknown_08D030D0
	.word	0x6010100
.Lfe35:
	.size	 sub_80478DC,.Lfe35-sub_80478DC
	.align	2, 0
	.globl	sub_804794C
	.type	 sub_804794C,function
	.thumb_func
sub_804794C:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r0, .L299
	lsr	r4, r4, #0x15
	add	r0, r4, r0
	ldrh	r0, [r0, #0x6]
	bl	FreeSpriteTilesByTag
	ldr	r0, .L299+0x4
	add	r4, r4, r0
	ldrh	r0, [r4, #0x4]
	bl	FreeSpritePaletteByTag
	pop	{r4}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	sBallSpriteSheets
	.word	sBallSpritePalettes
.Lfe36:
	.size	 sub_804794C,.Lfe36-sub_804794C
	.align	2, 0
	.type	 sub_8047978,function
	.thumb_func
sub_8047978:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L302	@cond_branch
	ldr	r1, .L307
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L307+0x4
	b	.L306
.L308:
	.align	2, 0
.L307:
	.word	gBattlePartyID
	.word	gEnemyParty
.L302:
	ldr	r1, .L309
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L309+0x4
.L306:
	add	r0, r0, r1
	mov	r1, #0x26
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.L310:
	.align	2, 0
.L309:
	.word	gBattlePartyID
	.word	gPlayerParty
.Lfe37:
	.size	 sub_8047978,.Lfe37-sub_8047978
.text
	.align	2, 0
