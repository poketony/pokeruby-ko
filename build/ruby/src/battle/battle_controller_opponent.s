@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 gOpponentBufferCommands,object
gOpponentBufferCommands:
	.word	OpponentHandleGetAttributes
	.word	OpponentHandlecmd1
	.word	OpponentHandleSetAttributes
	.word	OpponentHandlecmd3
	.word	OpponentHandleLoadPokeSprite
	.word	OpponentHandleSendOutPoke
	.word	OpponentHandleReturnPokeToBall
	.word	OpponentHandleTrainerThrow
	.word	OpponentHandleTrainerSlide
	.word	OpponentHandleTrainerSlideBack
	.word	OpponentHandlecmd10
	.word	OpponentHandlecmd11
	.word	OpponentHandlecmd12
	.word	OpponentHandleBallThrow
	.word	OpponentHandlePuase
	.word	OpponentHandleMoveAnimation
	.word	OpponentHandlePrintString
	.word	OpponentHandlePrintStringPlayerOnly
	.word	OpponentHandlecmd18
	.word	OpponentHandlecmd19
	.word	OpponentHandlecmd20
	.word	OpponentHandleOpenBag
	.word	OpponentHandlecmd22
	.word	OpponentHandlecmd23
	.word	OpponentHandleHealthBarUpdate
	.word	OpponentHandleExpBarUpdate
	.word	OpponentHandleStatusIconUpdate
	.word	OpponentHandleStatusAnimation
	.word	OpponentHandleStatusXor
	.word	OpponentHandlecmd29
	.word	OpponentHandleDMATransfer
	.word	OpponentHandlecmd31
	.word	OpponentHandlecmd32
	.word	OpponentHandlecmd33
	.word	OpponentHandlecmd34
	.word	OpponentHandlecmd35
	.word	OpponentHandlecmd36
	.word	OpponentHandlecmd37
	.word	OpponentHandlecmd38
	.word	OpponentHandlecmd39
	.word	OpponentHandlecmd40
	.word	OpponentHandleHitAnimation
	.word	OpponentHandlecmd42
	.word	OpponentHandleEffectivenessSound
	.word	OpponentHandlecmd44
	.word	OpponentHandleFaintingCry
	.word	OpponentHandleIntroSlide
	.word	OpponentHandleTrainerBallThrow
	.word	OpponentHandlecmd48
	.word	OpponentHandlecmd49
	.word	OpponentHandlecmd50
	.word	OpponentHandleSpriteInvisibility
	.word	OpponentHandleBattleAnimation
	.word	OpponentHandleLinkStandbyMsg
	.word	OpponentHandleResetActionMoveSelection
	.word	OpponentHandlecmd55
	.word	OpponentHandlecmd56
	.size	 gOpponentBufferCommands,228
	.type	 sUnknownBytes,object
sUnknownBytes:
	.byte	0xb0
	.byte	0xb0
	.byte	0xc8
	.byte	0x98
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x20
	.size	 sUnknownBytes,8
.text
	.align	2, 0
	.globl	nullsub_45
	.type	 nullsub_45,function
	.thumb_func
nullsub_45:
	bx	lr
.Lfe1:
	.size	 nullsub_45,.Lfe1-nullsub_45
	.align	2, 0
	.globl	SetBankFuncToOpponentBufferRunCommand
	.type	 SetBankFuncToOpponentBufferRunCommand,function
	.thumb_func
SetBankFuncToOpponentBufferRunCommand:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	OpponentBufferRunCommand
.Lfe2:
	.size	 SetBankFuncToOpponentBufferRunCommand,.Lfe2-SetBankFuncToOpponentBufferRunCommand
	.align	2, 0
	.globl	OpponentBufferRunCommand
	.type	 OpponentBufferRunCommand,function
	.thumb_func
OpponentBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleExecBuffer
	.word	gBitTable
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gOpponentBufferCommands
.L8:
	bl	OpponentBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 OpponentBufferRunCommand,.Lfe3-OpponentBufferRunCommand
	.align	2, 0
	.globl	sub_8032B4C
	.type	 sub_8032B4C,function
	.thumb_func
sub_8032B4C:
	push	{lr}
	ldr	r2, .L14
	ldr	r1, .L14+0x4
	ldr	r0, .L14+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L14+0xc
	cmp	r1, r0
	bne	.L13	@cond_branch
	bl	OpponentBufferExecCompleted
.L13:
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 sub_8032B4C,.Lfe4-sub_8032B4C
	.align	2, 0
	.globl	sub_8032B84
	.type	 sub_8032B84,function
	.thumb_func
sub_8032B84:
	push	{lr}
	ldr	r2, .L18
	ldr	r1, .L18+0x4
	ldr	r0, .L18+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	bl	OpponentBufferExecCompleted
.L17:
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 sub_8032B84,.Lfe5-sub_8032B84
	.align	2, 0
	.globl	sub_8032BBC
	.type	 sub_8032BBC,function
	.thumb_func
sub_8032BBC:
	push	{r4, r5, r6, lr}
	ldr	r4, .L22
	ldr	r6, .L22+0x4
	ldr	r5, .L22+0x8
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L22+0xc
	cmp	r1, r0
	bne	.L21	@cond_branch
	add	r0, r2, r4
	ldrh	r0, [r0, #0x6]
	bl	sub_8031B74
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x38]
	ldr	r2, .L22+0x10
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L22+0x14
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	bl	OpponentBufferExecCompleted
.L21:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	0x3ff
	.word	0xfffffc00
.Lfe6:
	.size	 sub_8032BBC,.Lfe6-sub_8032BBC
	.align	2, 0
	.globl	sub_8032C4C
	.type	 sub_8032C4C,function
	.thumb_func
sub_8032C4C:
	push	{lr}
	ldr	r3, .L26
	ldrb	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L26+0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L25	@cond_branch
	ldrb	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
	bl	OpponentBufferExecCompleted
.L25:
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe7:
	.size	 sub_8032C4C,.Lfe7-sub_8032C4C
	.align	2, 0
	.globl	sub_8032C88
	.type	 sub_8032C88,function
	.thumb_func
sub_8032C88:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L29	@cond_branch
	ldr	r0, .L39
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L29	@cond_branch
.L30:
	ldr	r2, .L39+0x4
	ldr	r1, .L39+0x8
	ldr	r0, .L39+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L39+0x10
	cmp	r1, r0
	bne	.L32	@cond_branch
	b	.L38
.L40:
	.align	2, 0
.L39:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.L29:
	ldr	r2, .L41
	ldr	r5, .L41+0x4
	ldr	r0, .L41+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L41+0xc
	cmp	r4, r0
	bne	.L32	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L32	@cond_branch
.L38:
	mov	r6, #0x1
.L32:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L34	@cond_branch
	mov	r6, #0x0
.L34:
	cmp	r6, #0
	beq	.L35	@cond_branch
	ldr	r7, .L41+0x8
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r5, .L41+0x10
	add	r4, r0, r5
	ldrb	r1, [r4, #0x1]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L35	@cond_branch
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L41+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L41+0x18
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L36	@cond_branch
	ldr	r0, .L41+0x1c
	bl	m4aMPlayContinue
	b	.L37
.L42:
	.align	2, 0
.L41:
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	gSharedMem+0x17810
	.word	0x27f9
	.word	gBattleTypeFlags
	.word	gMPlay_BGM
.L36:
	ldr	r0, .L43
	ldr	r1, .L43+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L37:
	ldr	r2, .L43+0x8
	ldrb	r1, [r2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L43+0xc
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L43+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L43+0x14
	str	r1, [r0]
.L35:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gMPlay_BGM
	.word	0xffff
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8032C4C
.Lfe8:
	.size	 sub_8032C88,.Lfe8-sub_8032C88
	.align	2, 0
	.globl	sub_8032E2C
	.type	 sub_8032E2C,function
	.thumb_func
sub_8032E2C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L50
	mov	r9, r0
	ldrb	r2, [r0]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L50+0x4
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r5, #0x88
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L46	@cond_branch
	ldr	r0, .L50+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L50+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L46:
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r7, #0x2
	add	r2, r7, #0
	eor	r2, r2, r0
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L47	@cond_branch
	ldr	r0, .L50+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L50+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L47:
	mov	r0, r9
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r3, #0x8
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB602
	b	.L48	@long jump
.LCB602:
	add	r1, r7, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB617
	b	.L48	@long jump
.LCB617:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L49	@cond_branch
	ldr	r0, .L50+0x10
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L49	@cond_branch
	ldr	r1, .L50+0x14
	mov	r2, r9
	ldrb	r0, [r2]
	eor	r0, r0, r7
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L50+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L50+0x1c
	mov	r1, r9
	ldrb	r0, [r1]
	add	r1, r7, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L50+0x8
	mov	r8, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r1, [r1]
	mov	r6, #0x64
	mul	r1, r1, r6
	ldr	r5, .L50+0xc
	add	r1, r1, r5
	mov	r2, #0x0
	bl	sub_8045A5C
	mov	r1, r9
	ldrb	r0, [r1]
	eor	r0, r0, r7
	bl	sub_804777C
	mov	r2, r9
	ldrb	r0, [r2]
	eor	r0, r0, r7
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	sub_8043DFC
	mov	r1, r9
	ldrb	r0, [r1]
	add	r4, r7, #0
	eor	r4, r4, r0
	lsl	r0, r4, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8032984
.L49:
	ldr	r1, .L50+0x14
	ldr	r4, .L50
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L50+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L50+0x1c
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L50+0x8
	mov	r9, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	ldrh	r1, [r1]
	mov	r2, #0x64
	mov	r8, r2
	mov	r2, r8
	mul	r2, r2, r1
	add	r1, r2, #0
	ldr	r6, .L50+0xc
	add	r1, r1, r6
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r4]
	bl	sub_804777C
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldrb	r5, [r4]
	lsl	r0, r5, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	sub_8032984
	ldr	r2, .L50+0x20
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L50+0x24
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L50+0x28
	str	r1, [r0]
.L48:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gUnknown_0300434C
	.word	gSprites
	.word	gHealthboxIDs
	.word	gSharedMem+0x17840
	.word	gBattleBankFunc
	.word	sub_8032C88
.Lfe9:
	.size	 sub_8032E2C,.Lfe9-sub_8032E2C
	.align	2, 0
	.globl	sub_8033018
	.type	 sub_8033018,function
	.thumb_func
sub_8033018:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L56
	ldr	r0, .L56+0x4
	ldr	r7, .L56+0x8
	ldrb	r3, [r7]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r2, r0, #0x1f
	cmp	r2, #0x1
	bne	.L52	@cond_branch
	mov	r4, #0x24
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L52	@cond_branch
	lsl	r4, r3, #0x1
	add	r0, r4, r3
	lsl	r0, r0, #0x2
	ldr	r6, .L56+0xc
	add	r1, r0, r6
	ldrb	r5, [r1]
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L54	@cond_branch
	ldr	r0, .L56+0x10
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L56+0x14
	add	r1, r1, r0
	add	r0, r3, #0
	bl	sub_8141828
	b	.L52
.L57:
	.align	2, 0
.L56:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gEnemyParty
.L54:
	ldrb	r0, [r1, #0x1]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L52	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r5
	strb	r0, [r1]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L58
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	bl	OpponentBufferExecCompleted
.L52:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	0x27f9
.Lfe10:
	.size	 sub_8033018,.Lfe10-sub_8033018
	.align	2, 0
	.globl	sub_80330C8
	.type	 sub_80330C8,function
	.thumb_func
sub_80330C8:
	push	{r4, r5, r6, lr}
	ldr	r6, .L63
	ldrb	r0, [r6]
	ldr	r5, .L63+0x4
	add	r1, r0, r5
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8045C78
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	sub_8043DFC
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L61	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	sub_80440EC
	b	.L62
.L64:
	.align	2, 0
.L63:
	.word	gActiveBank
	.word	gHealthboxIDs
.L61:
	bl	OpponentBufferExecCompleted
.L62:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_80330C8,.Lfe11-sub_80330C8
	.align	2, 0
	.globl	sub_803311C
	.type	 sub_803311C,function
	.thumb_func
sub_803311C:
	push	{lr}
	ldr	r2, .L67
	ldr	r0, .L67+0x4
	ldr	r1, .L67+0x8
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L66	@cond_branch
	ldr	r0, .L67+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	OpponentBufferExecCompleted
.L66:
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gHealthboxIDs
.Lfe12:
	.size	 sub_803311C,.Lfe12-sub_803311C
	.align	2, 0
	.globl	sub_8033160
	.type	 sub_8033160,function
	.thumb_func
sub_8033160:
	push	{r4, r5, r6, lr}
	ldr	r6, .L71
	ldrb	r2, [r6]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L71+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L70	@cond_branch
	ldr	r5, .L71+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L71+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	sub_8032A08
	ldr	r1, .L71+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	OpponentBufferExecCompleted
.L70:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L72:
	.align	2, 0
.L71:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
.Lfe13:
	.size	 sub_8033160,.Lfe13-sub_8033160
	.align	2, 0
	.globl	sub_80331D0
	.type	 sub_80331D0,function
	.thumb_func
sub_80331D0:
	push	{lr}
	ldr	r0, .L75
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	bne	.L74	@cond_branch
	bl	OpponentBufferExecCompleted
.L74:
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gUnknown_03004210
.Lfe14:
	.size	 sub_80331D0,.Lfe14-sub_80331D0
	.align	2, 0
	.globl	bx_blink_t7
	.type	 bx_blink_t7,function
	.thumb_func
bx_blink_t7:
	push	{r4, lr}
	ldr	r1, .L81
	ldr	r0, .L81+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L81+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L78	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L81+0xc
	strb	r3, [r0]
	bl	OpponentBufferExecCompleted
	b	.L79
.L82:
	.align	2, 0
.L81:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	gDoingBattleAnim
.L78:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L80	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L80:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L79:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 bx_blink_t7,.Lfe15-bx_blink_t7
	.align	2, 0
	.globl	sub_8033264
	.type	 sub_8033264,function
	.thumb_func
sub_8033264:
	push	{r4, lr}
	ldr	r2, .L86
	ldr	r0, .L86+0x4
	ldr	r4, .L86+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L86+0xc
	cmp	r1, r0
	bne	.L84	@cond_branch
	lsl	r0, r3, #0x2
	ldr	r1, .L86+0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L85	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x6
	bl	move_anim_start_t4
.L85:
	ldr	r0, .L86+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L86+0x18
	str	r0, [r1]
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.L87:
	.align	2, 0
.L86:
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	gSharedMem+0x17800
	.word	gBattleBankFunc
	.word	sub_80332D0
.Lfe16:
	.size	 sub_8033264,.Lfe16-sub_8033264
	.align	2, 0
	.globl	sub_80332D0
	.type	 sub_80332D0,function
	.thumb_func
sub_80332D0:
	push	{lr}
	ldr	r0, .L90
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L90+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L89	@cond_branch
	ldr	r0, .L90+0x8
	mov	r1, #0xa
	bl	CreateTask
	bl	OpponentBufferExecCompleted
.L89:
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	c3_0802FDF4
.Lfe17:
	.size	 sub_80332D0,.Lfe17-sub_80332D0
	.align	2, 0
	.globl	sub_8033308
	.type	 sub_8033308,function
	.thumb_func
sub_8033308:
	push	{r4, r5, lr}
	ldr	r5, .L94
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r3, .L94+0x4
	add	r2, r0, r3
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L93	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L94+0x8
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r1, .L94+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L94+0x10
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L94+0x14
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L94+0x18
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L94+0x1c
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r5]
	bl	sub_804777C
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldrb	r0, [r5]
	bl	sub_8031F88
	ldr	r1, .L94+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L94+0x24
	str	r1, [r0]
.L93:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	0x27f9
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gBattleBankFunc
	.word	sub_8033264
.Lfe18:
	.size	 sub_8033308,.Lfe18-sub_8033308
	.align	2, 0
	.globl	sub_80333D4
	.type	 sub_80333D4,function
	.thumb_func
sub_80333D4:
	push	{r4, r5, r6, lr}
	ldr	r5, .L99
	ldrb	r2, [r5]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	ldr	r6, .L99+0x4
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L97	@cond_branch
	ldr	r0, .L99+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L99+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L97:
	ldr	r4, .L99+0x10
	ldr	r0, .L99+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L99+0x18
	cmp	r1, r0
	bne	.L98	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L98	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldrb	r4, [r5]
	ldr	r1, .L99+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L99+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8032984
	ldr	r1, .L99+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L99+0x20
	str	r1, [r0]
.L98:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gSprites
	.word	gUnknown_0300434C
	.word	SpriteCallbackDummy
	.word	gBattleBankFunc
	.word	sub_8033308
.Lfe19:
	.size	 sub_80333D4,.Lfe19-sub_80333D4
	.align	2, 0
	.globl	sub_8033494
	.type	 sub_8033494,function
	.thumb_func
sub_8033494:
	push	{lr}
	ldr	r0, .L103
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L103+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L102	@cond_branch
	bl	OpponentBufferExecCompleted
.L102:
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe20:
	.size	 sub_8033494,.Lfe20-sub_8033494
	.align	2, 0
	.globl	sub_80334C0
	.type	 sub_80334C0,function
	.thumb_func
sub_80334C0:
	push	{lr}
	ldr	r0, .L107
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L107+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L106	@cond_branch
	bl	OpponentBufferExecCompleted
.L106:
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe21:
	.size	 sub_80334C0,.Lfe21-sub_80334C0
	.align	2, 0
	.globl	OpponentBufferExecCompleted
	.type	 OpponentBufferExecCompleted,function
	.thumb_func
OpponentBufferExecCompleted:
	ldr	r1, .L110
	ldr	r2, .L110+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L110+0x8
	str	r1, [r0]
	ldr	r3, .L110+0xc
	ldr	r1, .L110+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	bx	lr
.L111:
	.align	2, 0
.L110:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	OpponentBufferRunCommand
	.word	gBattleExecBuffer
	.word	gBitTable
.Lfe22:
	.size	 OpponentBufferExecCompleted,.Lfe22-OpponentBufferExecCompleted
	.align	2, 0
	.globl	OpponentHandleGetAttributes
	.type	 OpponentHandleGetAttributes,function
	.thumb_func
OpponentHandleGetAttributes:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xffffff00
	mov	r6, #0x0
	ldr	r1, .L121
	ldr	r0, .L121+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L113	@cond_branch
	ldr	r0, .L121+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	sub_8033598
	add	r6, r0, #0
	b	.L114
.L122:
	.align	2, 0
.L121:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattlePartyID
.L113:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L118:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L119	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	sub_8033598
	add	r6, r6, r0
.L119:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L118	@cond_branch
.L114:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	Emitcmd29
	bl	OpponentBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 OpponentHandleGetAttributes,.Lfe23-OpponentHandleGetAttributes
	.align	2, 0
	.globl	sub_8033598
	.type	 sub_8033598,function
	.thumb_func
sub_8033598:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffff70
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L212
	ldr	r3, .L212+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB1698
	bl	.L124	@far jump
.LCB1698:
	lsl	r0, r0, #0x2
	ldr	r1, .L212+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L213:
	.align	2, 0
.L212:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	.L206
	.align	2, 0
	.align	2, 0
.L206:
	.word	.L125
	.word	.L136
	.word	.L137
	.word	.L138
	.word	.L152
	.word	.L152
	.word	.L152
	.word	.L152
	.word	.L153
	.word	.L162
	.word	.L162
	.word	.L162
	.word	.L162
	.word	.L124
	.word	.L124
	.word	.L124
	.word	.L124
	.word	.L163
	.word	.L164
	.word	.L165
	.word	.L166
	.word	.L167
	.word	.L168
	.word	.L169
	.word	.L170
	.word	.L171
	.word	.L172
	.word	.L173
	.word	.L174
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
.L125:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L214
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L129:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L129	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L214
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L214+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L214+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L214+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L134:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L134	@cond_branch
	b	.L124
.L215:
	.align	2, 0
.L214:
	.word	gEnemyParty
	.word	0xfffffc1f
	.word	0xfff07fff
	.word	0xfffffe0f
.L136:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L216
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L208
.L217:
	.align	2, 0
.L216:
	.word	gEnemyParty
.L137:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L218
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L208
.L219:
	.align	2, 0
.L218:
	.word	gEnemyParty
.L138:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L220
	add	r4, r1, r0
	mov	r8, r9
.L142:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L142	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L220
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L147:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L147	@cond_branch
	b	.L124
.L221:
	.align	2, 0
.L220:
	.word	gEnemyParty
.L152:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L222
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L208
.L223:
	.align	2, 0
.L222:
	.word	gEnemyParty
.L153:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L224
	mov	r8, r2
.L157:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L157	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L224
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L124
.L225:
	.align	2, 0
.L224:
	.word	gEnemyParty
.L162:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L226
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L209
.L227:
	.align	2, 0
.L226:
	.word	gEnemyParty
.L163:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L228
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L210
.L229:
	.align	2, 0
.L228:
	.word	gEnemyParty
.L164:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L230
	add	r0, r0, r1
	mov	r1, #0x19
.L210:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L124
.L231:
	.align	2, 0
.L230:
	.word	gEnemyParty
.L165:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L232
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L209
.L233:
	.align	2, 0
.L232:
	.word	gEnemyParty
.L166:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L234
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L209
.L235:
	.align	2, 0
.L234:
	.word	gEnemyParty
.L167:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L236
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L209
.L237:
	.align	2, 0
.L236:
	.word	gEnemyParty
.L168:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L238
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L209
.L239:
	.align	2, 0
.L238:
	.word	gEnemyParty
.L169:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L240
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L209
.L241:
	.align	2, 0
.L240:
	.word	gEnemyParty
.L170:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L242
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L209
.L243:
	.align	2, 0
.L242:
	.word	gEnemyParty
.L171:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L244
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L209
.L245:
	.align	2, 0
.L244:
	.word	gEnemyParty
.L172:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L246
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L209
.L247:
	.align	2, 0
.L246:
	.word	gEnemyParty
.L173:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L248
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L209
.L249:
	.align	2, 0
.L248:
	.word	gEnemyParty
.L174:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L250
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L209
.L251:
	.align	2, 0
.L250:
	.word	gEnemyParty
.L175:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L252
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L209
.L253:
	.align	2, 0
.L252:
	.word	gEnemyParty
.L176:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L254
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L209
.L255:
	.align	2, 0
.L254:
	.word	gEnemyParty
.L177:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L256
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L124
.L257:
	.align	2, 0
.L256:
	.word	gEnemyParty
.L178:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L258
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L209
.L259:
	.align	2, 0
.L258:
	.word	gEnemyParty
.L179:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L260
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L209
.L261:
	.align	2, 0
.L260:
	.word	gEnemyParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L262
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L209
.L263:
	.align	2, 0
.L262:
	.word	gEnemyParty
.L181:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L264
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L209
.L265:
	.align	2, 0
.L264:
	.word	gEnemyParty
.L182:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L266
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L209
.L267:
	.align	2, 0
.L266:
	.word	gEnemyParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L268
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L209
.L269:
	.align	2, 0
.L268:
	.word	gEnemyParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L270
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L211
.L271:
	.align	2, 0
.L270:
	.word	gEnemyParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L272
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L208
.L273:
	.align	2, 0
.L272:
	.word	gEnemyParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L274
	add	r0, r0, r1
	mov	r1, #0x37
.L211:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L124
.L275:
	.align	2, 0
.L274:
	.word	gEnemyParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L276
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L209
.L277:
	.align	2, 0
.L276:
	.word	gEnemyParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L278
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L208
.L279:
	.align	2, 0
.L278:
	.word	gEnemyParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L280
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L208
.L281:
	.align	2, 0
.L280:
	.word	gEnemyParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L282
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L208
.L283:
	.align	2, 0
.L282:
	.word	gEnemyParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L284
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L208
.L285:
	.align	2, 0
.L284:
	.word	gEnemyParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L286
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L208
.L287:
	.align	2, 0
.L286:
	.word	gEnemyParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L288
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L208
.L289:
	.align	2, 0
.L288:
	.word	gEnemyParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L290
	add	r0, r0, r1
	mov	r1, #0x3f
.L208:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L124
.L291:
	.align	2, 0
.L290:
	.word	gEnemyParty
.L195:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L292
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L209
.L293:
	.align	2, 0
.L292:
	.word	gEnemyParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L294
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L209
.L295:
	.align	2, 0
.L294:
	.word	gEnemyParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L296
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L209
.L297:
	.align	2, 0
.L296:
	.word	gEnemyParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L298
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L209
.L299:
	.align	2, 0
.L298:
	.word	gEnemyParty
.L199:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L300
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L209
.L301:
	.align	2, 0
.L300:
	.word	gEnemyParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L302
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L209
.L303:
	.align	2, 0
.L302:
	.word	gEnemyParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L304
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L209
.L305:
	.align	2, 0
.L304:
	.word	gEnemyParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L306
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L209
.L307:
	.align	2, 0
.L306:
	.word	gEnemyParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L308
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L209
.L309:
	.align	2, 0
.L308:
	.word	gEnemyParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L310
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L209
.L311:
	.align	2, 0
.L310:
	.word	gEnemyParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L312
	add	r0, r0, r1
	mov	r1, #0x36
.L209:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L124:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L313:
	.align	2, 0
.L312:
	.word	gEnemyParty
.Lfe24:
	.size	 sub_8033598,.Lfe24-sub_8033598
	.align	2, 0
	.globl	OpponentHandlecmd1
	.type	 OpponentHandlecmd1,function
	.thumb_func
OpponentHandlecmd1:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffa8
	ldr	r2, .L320
	ldr	r5, .L320+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mov	r4, r2
	mul	r4, r4, r0
	ldr	r3, .L320+0x8
	lsl	r1, r1, #0x9
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r2, [r0]
	ldr	r0, .L320+0xc
	add	r0, r2, r0
	add	r6, r4, r0
	mov	r0, sp
	add	r4, r0, r2
	mov	r2, #0x0
	add	r0, r3, #0x2
	add	r1, r1, r0
	add	r7, r5, #0
	mov	ip, r3
	ldrb	r1, [r1]
	cmp	r2, r1
	bcs	.L316	@cond_branch
	add	r3, r0, #0
.L318:
	add	r1, r4, r2
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L318	@cond_branch
.L316:
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	mov	r1, ip
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	add	r2, r4, #0
	bl	Emitcmd29
	bl	OpponentBufferExecCompleted
	add	sp, sp, #0x58
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L321:
	.align	2, 0
.L320:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gEnemyParty
.Lfe25:
	.size	 OpponentHandlecmd1,.Lfe25-OpponentHandlecmd1
	.align	2, 0
	.globl	OpponentHandleSetAttributes
	.type	 OpponentHandleSetAttributes,function
	.thumb_func
OpponentHandleSetAttributes:
	push	{r4, r5, lr}
	ldr	r1, .L331
	ldr	r0, .L331+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L323	@cond_branch
	ldr	r0, .L331+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	sub_8033E24
	b	.L324
.L332:
	.align	2, 0
.L331:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattlePartyID
.L323:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L328:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L329	@cond_branch
	add	r0, r5, #0
	bl	sub_8033E24
.L329:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L328	@cond_branch
.L324:
	bl	OpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 OpponentHandleSetAttributes,.Lfe26-OpponentHandleSetAttributes
	.align	2, 0
	.globl	sub_8033E24
	.type	 sub_8033E24,function
	.thumb_func
sub_8033E24:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffc8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, .L405
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	ldr	r2, .L405+0x4
	add	r4, r0, r2
	add	r7, r4, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r6, r3, #0
	add	r3, r2, #0
	cmp	r0, #0x3b
	bls	.LCB3197
	bl	.L334	@far jump
.LCB3197:
	lsl	r0, r0, #0x2
	ldr	r1, .L405+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L406:
	.align	2, 0
.L405:
	.word	gActiveBank
	.word	gBattleBufferA+0x3
	.word	.L401
	.align	2, 0
	.align	2, 0
.L401:
	.word	.L335
	.word	.L341
	.word	.L342
	.word	.L343
	.word	.L352
	.word	.L352
	.word	.L352
	.word	.L352
	.word	.L353
	.word	.L357
	.word	.L357
	.word	.L357
	.word	.L357
	.word	.L334
	.word	.L334
	.word	.L334
	.word	.L334
	.word	.L358
	.word	.L359
	.word	.L360
	.word	.L361
	.word	.L362
	.word	.L363
	.word	.L364
	.word	.L365
	.word	.L366
	.word	.L367
	.word	.L368
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
.L335:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L407
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r7, #0
	bl	SetMonData
	add	r2, r7, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r7
	mov	sl, r0
	add	r0, r7, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r7, #0x2
	str	r0, [sp, #0x4]
	add	r0, r7, #0x4
	str	r0, [sp, #0x8]
	add	r0, r7, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r6, r7, #0
	add	r6, r6, #0x24
	add	r4, r7, #0
	add	r4, r4, #0xc
.L339:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L339	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L407
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r7, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r7, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r7, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r7, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r7, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r7, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L334
.L408:
	.align	2, 0
.L407:
	.word	gEnemyParty
.L341:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L409
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0xb
	bl	SetMonData
	b	.L334
.L410:
	.align	2, 0
.L409:
	.word	gEnemyParty
.L342:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L411
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0xc
	bl	SetMonData
	b	.L334
.L412:
	.align	2, 0
.L411:
	.word	gEnemyParty
.L343:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r4
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L413
	add	r7, r1, r0
	add	r6, r4, #0
	add	r6, r6, #0x8
.L347:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L347	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L413
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L334
.L414:
	.align	2, 0
.L413:
	.word	gEnemyParty
.L352:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L415
	add	r0, r0, r1
	ldr	r3, .L415+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L403
.L416:
	.align	2, 0
.L415:
	.word	gEnemyParty
	.word	gBattleBufferA
.L353:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L417
	add	r4, r4, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	add	r0, r4, #0
	mov	r1, #0x11
	str	r3, [sp, #0x34]
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L334
.L418:
	.align	2, 0
.L417:
	.word	gEnemyParty
.L357:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L419
	add	r0, r0, r1
	ldr	r3, .L419+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L403:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L334
.L420:
	.align	2, 0
.L419:
	.word	gEnemyParty
	.word	gBattleBufferA
.L358:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L421
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1
	bl	SetMonData
	b	.L334
.L422:
	.align	2, 0
.L421:
	.word	gEnemyParty
.L359:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L423
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x19
	bl	SetMonData
	b	.L334
.L424:
	.align	2, 0
.L423:
	.word	gEnemyParty
.L360:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L425
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L334
.L426:
	.align	2, 0
.L425:
	.word	gEnemyParty
.L361:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L427
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L334
.L428:
	.align	2, 0
.L427:
	.word	gEnemyParty
.L362:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L429
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L334
.L430:
	.align	2, 0
.L429:
	.word	gEnemyParty
.L363:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L431
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L334
.L432:
	.align	2, 0
.L431:
	.word	gEnemyParty
.L364:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L433
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L334
.L434:
	.align	2, 0
.L433:
	.word	gEnemyParty
.L365:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L435
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L334
.L436:
	.align	2, 0
.L435:
	.word	gEnemyParty
.L366:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L437
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x20
	bl	SetMonData
	b	.L334
.L438:
	.align	2, 0
.L437:
	.word	gEnemyParty
.L367:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L439
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x22
	bl	SetMonData
	b	.L334
.L440:
	.align	2, 0
.L439:
	.word	gEnemyParty
.L368:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L441
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x23
	bl	SetMonData
	b	.L334
.L442:
	.align	2, 0
.L441:
	.word	gEnemyParty
.L369:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L443
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x24
	bl	SetMonData
	b	.L334
.L444:
	.align	2, 0
.L443:
	.word	gEnemyParty
.L370:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L445
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x25
	bl	SetMonData
	b	.L334
.L446:
	.align	2, 0
.L445:
	.word	gEnemyParty
.L371:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L447
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x26
	bl	SetMonData
	b	.L334
.L448:
	.align	2, 0
.L447:
	.word	gEnemyParty
.L372:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L449
	add	r4, r4, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	add	r0, r4, #0
	mov	r1, #0x27
	str	r3, [sp, #0x34]
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L404
.L450:
	.align	2, 0
.L449:
	.word	gEnemyParty
.L373:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L451
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x27
	bl	SetMonData
	b	.L334
.L452:
	.align	2, 0
.L451:
	.word	gEnemyParty
.L374:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L453
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x28
	bl	SetMonData
	b	.L334
.L454:
	.align	2, 0
.L453:
	.word	gEnemyParty
.L375:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L455
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x29
	bl	SetMonData
	b	.L334
.L456:
	.align	2, 0
.L455:
	.word	gEnemyParty
.L376:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L457
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L334
.L458:
	.align	2, 0
.L457:
	.word	gEnemyParty
.L377:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L459
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L334
.L460:
	.align	2, 0
.L459:
	.word	gEnemyParty
.L378:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L461
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
.L404:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L334
.L462:
	.align	2, 0
.L461:
	.word	gEnemyParty
.L379:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L463
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x0
	bl	SetMonData
	b	.L334
.L464:
	.align	2, 0
.L463:
	.word	gEnemyParty
.L380:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L465
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x9
	bl	SetMonData
	b	.L334
.L466:
	.align	2, 0
.L465:
	.word	gEnemyParty
.L381:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L467
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x37
	bl	SetMonData
	b	.L334
.L468:
	.align	2, 0
.L467:
	.word	gEnemyParty
.L382:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L469
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x38
	bl	SetMonData
	b	.L334
.L470:
	.align	2, 0
.L469:
	.word	gEnemyParty
.L383:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L471
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x39
	bl	SetMonData
	b	.L334
.L472:
	.align	2, 0
.L471:
	.word	gEnemyParty
.L384:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L473
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L334
.L474:
	.align	2, 0
.L473:
	.word	gEnemyParty
.L385:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L475
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L334
.L476:
	.align	2, 0
.L475:
	.word	gEnemyParty
.L386:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L477
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L334
.L478:
	.align	2, 0
.L477:
	.word	gEnemyParty
.L387:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L479
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L334
.L480:
	.align	2, 0
.L479:
	.word	gEnemyParty
.L388:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L481
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L334
.L482:
	.align	2, 0
.L481:
	.word	gEnemyParty
.L389:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L483
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L334
.L484:
	.align	2, 0
.L483:
	.word	gEnemyParty
.L390:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L485
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x16
	bl	SetMonData
	b	.L334
.L486:
	.align	2, 0
.L485:
	.word	gEnemyParty
.L391:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L487
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x17
	bl	SetMonData
	b	.L334
.L488:
	.align	2, 0
.L487:
	.word	gEnemyParty
.L392:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L489
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x18
	bl	SetMonData
	b	.L334
.L490:
	.align	2, 0
.L489:
	.word	gEnemyParty
.L393:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L491
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x21
	bl	SetMonData
	b	.L334
.L492:
	.align	2, 0
.L491:
	.word	gEnemyParty
.L394:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L493
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L334
.L494:
	.align	2, 0
.L493:
	.word	gEnemyParty
.L395:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L495
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x30
	bl	SetMonData
	b	.L334
.L496:
	.align	2, 0
.L495:
	.word	gEnemyParty
.L396:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L497
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x32
	bl	SetMonData
	b	.L334
.L498:
	.align	2, 0
.L497:
	.word	gEnemyParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L499
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x33
	bl	SetMonData
	b	.L334
.L500:
	.align	2, 0
.L499:
	.word	gEnemyParty
.L398:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L501
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x34
	bl	SetMonData
	b	.L334
.L502:
	.align	2, 0
.L501:
	.word	gEnemyParty
.L399:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L503
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x35
	bl	SetMonData
	b	.L334
.L504:
	.align	2, 0
.L503:
	.word	gEnemyParty
.L400:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L505
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x36
	bl	SetMonData
.L334:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L506:
	.align	2, 0
.L505:
	.word	gEnemyParty
.Lfe27:
	.size	 sub_8033E24,.Lfe27-sub_8033E24
	.align	2, 0
	.globl	OpponentHandlecmd3
	.type	 OpponentHandlecmd3,function
	.thumb_func
OpponentHandlecmd3:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L513
	ldr	r7, .L513+0x4
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r3, r1
	mul	r3, r3, r0
	ldr	r4, .L513+0x8
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	ldr	r1, .L513+0xc
	add	r0, r0, r1
	add	r5, r3, r0
	mov	r3, #0x0
	add	r0, r4, #0x2
	add	r2, r2, r0
	ldrb	r2, [r2]
	cmp	r3, r2
	bcs	.L509	@cond_branch
	add	r6, r4, #0
	add	r2, r7, #0
	add	r4, r0, #0
.L511:
	add	r1, r5, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L511	@cond_branch
.L509:
	bl	OpponentBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L514:
	.align	2, 0
.L513:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gEnemyParty
.Lfe28:
	.size	 OpponentHandlecmd3,.Lfe28-OpponentHandlecmd3
	.align	2, 0
	.globl	OpponentHandleLoadPokeSprite
	.type	 OpponentHandleLoadPokeSprite,function
	.thumb_func
OpponentHandleLoadPokeSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r6, .L516
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	ldr	r1, .L516+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r2, .L516+0x8
	mov	sl, r2
	add	r0, r0, sl
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	ldr	r2, .L516+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, sl
	bl	BattleLoadOpponentMonSprite
	ldrb	r0, [r6]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L516+0xc
	mov	r9, r0
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	sub_8077ABC
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6]
	bl	sub_8077F68
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r9
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L516+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L516+0x14
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L516+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r6]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r3, [r6]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r6]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L516+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldrb	r4, [r6]
	lsl	r0, r4, #0x1
	ldr	r2, .L516+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, sl
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8032984
	ldr	r1, .L516+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L516+0x24
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L517:
	.align	2, 0
.L516:
	.word	gActiveBank
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gUnknown_02024E8C
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattleBankFunc
	.word	sub_8033018
.Lfe29:
	.size	 OpponentHandleLoadPokeSprite,.Lfe29-OpponentHandleLoadPokeSprite
	.align	2, 0
	.globl	OpponentHandleSendOutPoke
	.type	 OpponentHandleSendOutPoke,function
	.thumb_func
OpponentHandleSendOutPoke:
	push	{r4, lr}
	ldr	r1, .L519
	ldr	r4, .L519+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r1
	ldr	r3, .L519+0x8
	lsl	r0, r0, #0x9
	add	r1, r3, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x9
	add	r3, r3, #0x2
	add	r1, r1, r3
	ldrb	r1, [r1]
	bl	sub_803495C
	ldr	r1, .L519+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L519+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gBattleBankFunc
	.word	sub_80333D4
.Lfe30:
	.size	 OpponentHandleSendOutPoke,.Lfe30-OpponentHandleSendOutPoke
	.align	2, 0
	.globl	sub_803495C
	.type	 sub_803495C,function
	.thumb_func
sub_803495C:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	sub_8032AA8
	ldr	r0, .L522
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L522+0x4
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r9, r1
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L522+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L522+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L522+0x10
	mov	sl, r1
	add	sl, sl, r6
	mov	r1, sl
	strb	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	add	r1, r6, #0
	bl	BattleLoadOpponentMonSprite
	add	r0, r6, #0
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L522+0x14
	mov	r9, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	sub_8077ABC
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	sub_8077F68
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r9
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L522+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L522+0x1c
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	mov	r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L522+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L522+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xfe
	bl	sub_8046400
	mov	r1, sl
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L523:
	.align	2, 0
.L522:
	.word	gBattlePartyID
	.word	gBattleBufferA
	.word	gEnemyParty
	.word	sub_80312F0
	.word	gUnknown_0300434C
	.word	gUnknown_02024E8C
	.word	gObjectBankIDs
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe31:
	.size	 sub_803495C,.Lfe31-sub_803495C
	.align	2, 0
	.globl	OpponentHandleReturnPokeToBall
	.type	 OpponentHandleReturnPokeToBall,function
	.thumb_func
OpponentHandleReturnPokeToBall:
	push	{r4, r5, r6, lr}
	ldr	r1, .L527
	ldr	r6, .L527+0x4
	ldrb	r2, [r6]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L525	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L527+0x8
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L527+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L527+0x10
	str	r1, [r0]
	b	.L526
.L528:
	.align	2, 0
.L527:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8034B74
.L525:
	ldr	r5, .L529
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L529+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	sub_8032A08
	ldr	r1, .L529+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	OpponentBufferExecCompleted
.L526:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
.Lfe32:
	.size	 OpponentHandleReturnPokeToBall,.Lfe32-OpponentHandleReturnPokeToBall
	.align	2, 0
	.globl	sub_8034B74
	.type	 sub_8034B74,function
	.thumb_func
sub_8034B74:
	push	{r4, r5, lr}
	ldr	r5, .L539
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L539+0x4
	add	r3, r0, r4
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L533	@cond_branch
	cmp	r0, #0x1
	beq	.L535	@cond_branch
	b	.L532
.L540:
	.align	2, 0
.L539:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L533:
	lsl	r0, r2, #0x2
	add	r1, r4, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L534	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L534:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L532
.L535:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L532	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x2
	bl	move_anim_start_t4
	ldr	r1, .L541
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L541+0x4
	str	r1, [r0]
.L532:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L542:
	.align	2, 0
.L541:
	.word	gBattleBankFunc
	.word	sub_8033160
.Lfe33:
	.size	 sub_8034B74,.Lfe33-sub_8034B74
	.align	2, 0
	.globl	OpponentHandleTrainerThrow
	.type	 OpponentHandleTrainerThrow,function
	.thumb_func
OpponentHandleTrainerThrow:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r3, .L551
	ldrh	r1, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L544	@cond_branch
	bl	GetSecretBaseTrainerPicIndex
	b	.L550
.L552:
	.align	2, 0
.L551:
	.word	gTrainerBattleOpponent
.L544:
	ldr	r0, .L553
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L546	@cond_branch
	bl	get_trainer_class_pic_index
	b	.L550
.L554:
	.align	2, 0
.L553:
	.word	gBattleTypeFlags
.L546:
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L548	@cond_branch
	bl	GetEReaderTrainerPicIndex
.L550:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L545
.L548:
	ldr	r2, .L555
	ldrh	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L545:
	mov	r9, r0
	ldr	r0, .L555+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, r9
	bl	sub_8031A6C
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	bl	GetMonSpriteTemplate_803C5A0
	ldr	r5, .L555+0x8
	ldr	r1, .L555+0xc
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xe
	add	r4, r4, r0
	asr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r5, #0
	mov	r1, #0xb0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r5, .L555+0x10
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L555+0x14
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L555+0x18
	strh	r1, [r0, #0x24]
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldr	r0, .L555+0x1c
	mov	r1, r9
	lsl	r6, r1, #0x3
	add	r0, r6, r0
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	strh	r0, [r1, #0x38]
	ldr	r0, .L555+0x20
	add	r6, r6, r0
	ldrh	r0, [r6, #0x6]
	bl	GetSpriteTileStartByTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r2, .L555+0x24
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L555+0x28
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, r9
	strh	r2, [r0, #0x6]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L555+0x2c
	str	r1, [r0]
	ldr	r1, .L555+0x30
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L555+0x34
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L556:
	.align	2, 0
.L555:
	.word	gTrainers
	.word	gActiveBank
	.word	gUnknown_02024E8C
	.word	gTrainerFrontPicCoords
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xff10
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_80313A0
	.word	gBattleBankFunc
	.word	sub_8032B4C
.Lfe34:
	.size	 OpponentHandleTrainerThrow,.Lfe34-OpponentHandleTrainerThrow
	.align	2, 0
	.globl	OpponentHandleTrainerSlide
	.type	 OpponentHandleTrainerSlide,function
	.thumb_func
OpponentHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r3, .L565
	ldrh	r1, [r3]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L558	@cond_branch
	bl	GetSecretBaseTrainerPicIndex
	b	.L564
.L566:
	.align	2, 0
.L565:
	.word	gTrainerBattleOpponent
.L558:
	ldr	r0, .L567
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L560	@cond_branch
	bl	get_trainer_class_pic_index
	b	.L564
.L568:
	.align	2, 0
.L567:
	.word	gBattleTypeFlags
.L560:
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L562	@cond_branch
	bl	GetEReaderTrainerPicIndex
.L564:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L559
.L562:
	ldr	r2, .L569
	ldrh	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x3]
.L559:
	mov	r9, r0
	ldr	r0, .L569+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, r9
	bl	sub_8031A6C
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	bl	GetMonSpriteTemplate_803C5A0
	ldr	r0, .L569+0x8
	ldr	r2, .L569+0xc
	mov	r3, r9
	lsl	r1, r3, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xe
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0xb0
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r5, .L569+0x10
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L569+0x14
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x60
	strh	r1, [r0, #0x24]
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x20
	strh	r1, [r0, #0x20]
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L569+0x18
	strh	r1, [r0, #0x2e]
	ldr	r0, .L569+0x1c
	mov	r3, r9
	lsl	r6, r3, #0x3
	add	r0, r6, r0
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	strh	r0, [r1, #0x38]
	ldr	r0, .L569+0x20
	add	r6, r6, r0
	ldrh	r0, [r6, #0x6]
	bl	GetSpriteTileStartByTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r2, .L569+0x24
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L569+0x28
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, r9
	strh	r1, [r0, #0x6]
	ldrb	r0, [r3]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L569+0x2c
	str	r1, [r0]
	ldr	r1, .L569+0x30
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L569+0x34
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L570:
	.align	2, 0
.L569:
	.word	gTrainers
	.word	gActiveBank
	.word	gUnknown_02024E8C
	.word	gTrainerFrontPicCoords
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xfffe
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_80313A0
	.word	gBattleBankFunc
	.word	sub_8032B84
.Lfe35:
	.size	 OpponentHandleTrainerSlide,.Lfe35-OpponentHandleTrainerSlide
	.align	2, 0
	.globl	OpponentHandleTrainerSlideBack
	.type	 OpponentHandleTrainerSlideBack,function
	.thumb_func
OpponentHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L572
	ldr	r4, .L572+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L572+0x8
	add	r0, r0, r5
	bl	oamt_add_pos2_onto_pos1
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L572+0xc
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L572+0x10
	bl	StoreSpriteCallbackInData
	ldr	r1, .L572+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L572+0x18
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L573:
	.align	2, 0
.L572:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	sub_8078B34
	.word	SpriteCallbackDummy
	.word	gBattleBankFunc
	.word	sub_8032BBC
.Lfe36:
	.size	 OpponentHandleTrainerSlideBack,.Lfe36-OpponentHandleTrainerSlideBack
	.align	2, 0
	.globl	OpponentHandlecmd10
	.type	 OpponentHandlecmd10,function
	.thumb_func
OpponentHandlecmd10:
	push	{r4, r5, lr}
	ldr	r5, .L579
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L579+0x4
	add	r3, r0, r4
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L575	@cond_branch
	lsl	r0, r2, #0x2
	add	r1, r4, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L576	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L576:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x4]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L577
.L580:
	.align	2, 0
.L579:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L575:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L577	@cond_branch
	strb	r0, [r3, #0x4]
	mov	r0, #0x10
	mov	r1, #0x3f
	bl	PlaySE12WithPanning
	ldr	r2, .L581
	ldr	r1, .L581+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L581+0x8
	str	r1, [r0]
	ldr	r1, .L581+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L581+0x10
	str	r1, [r0]
.L577:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L582:
	.align	2, 0
.L581:
	.word	gSprites
	.word	gObjectBankIDs
	.word	sub_8010384
	.word	gBattleBankFunc
	.word	sub_803311C
.Lfe37:
	.size	 OpponentHandlecmd10,.Lfe37-OpponentHandlecmd10
	.align	2, 0
	.globl	OpponentHandlecmd11
	.type	 OpponentHandlecmd11,function
	.thumb_func
OpponentHandlecmd11:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 OpponentHandlecmd11,.Lfe38-OpponentHandlecmd11
	.align	2, 0
	.globl	OpponentHandlecmd12
	.type	 OpponentHandlecmd12,function
	.thumb_func
OpponentHandlecmd12:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 OpponentHandlecmd12,.Lfe39-OpponentHandlecmd12
	.align	2, 0
	.globl	OpponentHandleBallThrow
	.type	 OpponentHandleBallThrow,function
	.thumb_func
OpponentHandleBallThrow:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 OpponentHandleBallThrow,.Lfe40-OpponentHandleBallThrow
	.align	2, 0
	.globl	OpponentHandlePuase
	.type	 OpponentHandlePuase,function
	.thumb_func
OpponentHandlePuase:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 OpponentHandlePuase,.Lfe41-OpponentHandlePuase
	.align	2, 0
	.globl	OpponentHandleMoveAnimation
	.type	 OpponentHandleMoveAnimation,function
	.thumb_func
OpponentHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L591
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6069
	b	.L588	@long jump
.LCB6069:
	ldr	r0, .L591+0x4
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L591+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L591+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L591+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L591+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L591+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L591+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L591+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	sub_8031720
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L589	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L588
.L592:
	.align	2, 0
.L591:
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gUnknown_0202F7C4
	.word	gMovePowerMoveAnim
	.word	gMoveDmgMoveAnim
	.word	gHappinessMoveAnim
	.word	gWeatherMoveAnim
	.word	gDisableStructMoveAnim
	.word	gPID_perBank
.L589:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L593
	add	r0, r0, r1
	strb	r2, [r0, #0x4]
	ldr	r1, .L593+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L593+0x8
	str	r1, [r0]
.L588:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8035238
.Lfe42:
	.size	 OpponentHandleMoveAnimation,.Lfe42-OpponentHandleMoveAnimation
	.align	2, 0
	.globl	sub_8035238
	.type	 sub_8035238,function
	.thumb_func
sub_8035238:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r2, .L609
	ldr	r5, .L609+0x4
	ldrb	r3, [r5]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	r9, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r6, r2, #0x2
	mov	r8, r6
	add	r0, r1, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r2, r2, #0xb
	add	r1, r1, r2
	ldrb	r7, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r6, .L609+0x8
	add	r0, r0, r6
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L599	@cond_branch
	cmp	r2, #0x1
	bgt	.L608	@cond_branch
	cmp	r2, #0
	beq	.L597	@cond_branch
	b	.L596
.L610:
	.align	2, 0
.L609:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L608:
	cmp	r2, #0x2
	beq	.L601	@cond_branch
	cmp	r2, #0x3
	beq	.L604	@cond_branch
	b	.L596
.L597:
	lsl	r1, r3, #0x2
	add	r0, r6, #0
	sub	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0x4
	bne	.L598	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L598:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L596
.L599:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L596	@cond_branch
	mov	r0, #0x0
	bl	sub_80326EC
	add	r0, r4, #0
	bl	ExecuteMoveAnim
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x2
	strb	r0, [r1, #0x4]
	b	.L596
.L601:
	ldr	r0, .L611
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L611+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L596	@cond_branch
	mov	r0, #0x1
	bl	sub_80326EC
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r4, r6, #0
	sub	r4, r4, #0x10
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L603	@cond_branch
	cmp	r7, #0x1
	bhi	.L603	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	move_anim_start_t4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0]
	mov	r1, #0x9
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L603:
	ldr	r0, .L611+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L611+0xc
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L596
.L612:
	.align	2, 0
.L611:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L604:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L596	@cond_branch
	bl	sub_8031F24
	ldrb	r0, [r5]
	lsl	r2, r0, #0x9
	mov	r3, r9
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r8
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	sub_80324BC
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strb	r4, [r0, #0x4]
	bl	OpponentBufferExecCompleted
.L596:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 sub_8035238,.Lfe43-sub_8035238
	.align	2, 0
	.globl	OpponentHandlePrintString
	.type	 OpponentHandlePrintString,function
	.thumb_func
OpponentHandlePrintString:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L614
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L614+0x4
	strh	r1, [r0]
	ldr	r4, .L614+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	ldr	r1, .L614+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	BufferStringBattle
	ldr	r0, .L614+0x10
	ldr	r1, .L614+0x14
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L614+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L614+0x1c
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L615:
	.align	2, 0
.L614:
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gActiveBank
	.word	gBattleBufferA+0x2
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gBattleBankFunc
	.word	sub_80331D0
.Lfe44:
	.size	 OpponentHandlePrintString,.Lfe44-OpponentHandlePrintString
	.align	2, 0
	.globl	OpponentHandlePrintStringPlayerOnly
	.type	 OpponentHandlePrintStringPlayerOnly,function
	.thumb_func
OpponentHandlePrintStringPlayerOnly:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 OpponentHandlePrintStringPlayerOnly,.Lfe45-OpponentHandlePrintStringPlayerOnly
	.align	2, 0
	.globl	OpponentHandlecmd18
	.type	 OpponentHandlecmd18,function
	.thumb_func
OpponentHandlecmd18:
	push	{lr}
	bl	sub_8036B0C
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 OpponentHandlecmd18,.Lfe46-OpponentHandlecmd18
	.align	2, 0
	.globl	OpponentHandlecmd19
	.type	 OpponentHandlecmd19,function
	.thumb_func
OpponentHandlecmd19:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 OpponentHandlecmd19,.Lfe47-OpponentHandlecmd19
	.align	2, 0
	.globl	OpponentHandlecmd20
	.type	 OpponentHandlecmd20,function
	.thumb_func
OpponentHandlecmd20:
	.syntax unified
    push {r4-r6,lr}
    ldr r6, _0803545C @ =gActiveBank
    ldrb r0, [r6]
    lsls r0, 9
    ldr r1, _08035460 @ =gUnknown_02023A64
    adds r5, r0, r1
    ldr r0, _08035464 @ =gBattleTypeFlags
    ldrh r1, [r0]
    movs r0, 0x93
    lsls r0, 3
    ands r0, r1
    cmp r0, 0
    beq _080354F8
    bl BattleAI_SetupAIData
    bl BattleAI_GetAIActionToUse
    lsls r0, 24
    lsrs r4, r0, 24
    cmp r4, 0x4
    beq _08035468
    cmp r4, 0x5
    bne _08035474
    movs r0, 0x1
    movs r1, 0x4
    b _0803546C
    .align 2, 0
_0803545C: .4byte gActiveBank
_08035460: .4byte gUnknown_02023A64
_08035464: .4byte gBattleTypeFlags
_08035468:
    movs r0, 0x1
    movs r1, 0x3
_0803546C:
    movs r2, 0
    bl Emitcmd33
    b _080354E0
_08035474:
    ldr r3, _080354E8 @ =gBattleMoves
    lsls r0, r4, 1
    adds r2, r5, r0
    ldrh r1, [r2]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r3
    ldrb r1, [r0, 0x6]
    movs r0, 0x12
    ands r0, r1
    cmp r0, 0
    beq _08035494
    ldr r1, _080354EC @ =gBankTarget
    ldrb r0, [r6]
    strb r0, [r1]
_08035494:
    ldrh r1, [r2]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r3
    ldrb r1, [r0, 0x6]
    movs r0, 0x8
    ands r0, r1
    cmp r0, 0
    beq _080354CE
    movs r0, 0
    bl GetBankByPlayerAI
    ldr r5, _080354EC @ =gBankTarget
    strb r0, [r5]
    ldr r0, _080354F0 @ =gAbsentBankFlags
    ldrb r1, [r0]
    ldr r2, _080354F4 @ =gBitTable
    ldrb r0, [r5]
    lsls r0, 2
    adds r0, r2
    ldr r0, [r0]
    ands r1, r0
    cmp r1, 0
    beq _080354CE
    movs r0, 0x2
    bl GetBankByPlayerAI
    strb r0, [r5]
_080354CE:
    ldr r0, _080354EC @ =gBankTarget
    ldrb r0, [r0]
    lsls r0, 8
    orrs r4, r0
    movs r0, 0x1
    movs r1, 0xA
    adds r2, r4, 0
    bl Emitcmd33
_080354E0:
    bl OpponentBufferExecCompleted
    b _0803558A
    .align 2, 0
_080354E8: .4byte gBattleMoves
_080354EC: .4byte gBankTarget
_080354F0: .4byte gAbsentBankFlags
_080354F4: .4byte gBitTable
_080354F8:
    movs r6, 0x3
_080354FA:
    bl Random
    adds r4, r0, 0
    ands r4, r6
    lsls r0, r4, 1
    adds r0, r5, r0
    ldrh r2, [r0]
    cmp r2, 0
    beq _080354FA
    ldr r1, _08035534 @ =gBattleMoves
    lsls r0, r2, 1
    adds r0, r2
    lsls r0, 2
    adds r0, r1
    ldrb r1, [r0, 0x6]
    movs r0, 0x12
    ands r0, r1
    cmp r0, 0
    beq _0803553C
    ldr r0, _08035538 @ =gActiveBank
    ldrb r0, [r0]
    lsls r0, 8
    orrs r4, r0
    movs r0, 0x1
    movs r1, 0xA
    adds r2, r4, 0
    bl Emitcmd33
    b _08035586
    .align 2, 0
_08035534: .4byte gBattleMoves
_08035538: .4byte gActiveBank
_0803553C:
    ldr r0, _0803556C @ =gBattleTypeFlags
    ldrh r1, [r0]
    movs r0, 0x1
    ands r0, r1
    cmp r0, 0
    beq _08035570
    bl Random
    movs r1, 0x2
    ands r1, r0
    lsls r1, 24
    lsrs r1, 24
    adds r0, r1, 0
    bl GetBankByPlayerAI
    adds r2, r0, 0
    lsls r2, 24
    lsrs r2, 16
    orrs r2, r4
    movs r0, 0x1
    movs r1, 0xA
    bl Emitcmd33
    b _08035586
    .align 2, 0
_0803556C: .4byte gBattleTypeFlags
_08035570:
    movs r0, 0
    bl GetBankByPlayerAI
    adds r2, r0, 0
    lsls r2, 24
    lsrs r2, 16
    orrs r2, r4
    movs r0, 0x1
    movs r1, 0xA
    bl Emitcmd33
_08035586:
    bl OpponentBufferExecCompleted
_0803558A:
    pop {r4-r6}
    pop {r0}
    bx r0
    .syntax divided

	.code	16
.Lfe48:
	.size	 OpponentHandlecmd20,.Lfe48-OpponentHandlecmd20
	.align	2, 0
	.globl	OpponentHandleOpenBag
	.type	 OpponentHandleOpenBag,function
	.thumb_func
OpponentHandleOpenBag:
	push	{lr}
	ldr	r1, .L621
	ldr	r0, .L621+0x4
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r2, .L621+0x8
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	bl	Emitcmd35
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L622:
	.align	2, 0
.L621:
	.word	gSharedMem
	.word	gActiveBank
	.word	0x160d4
.Lfe49:
	.size	 OpponentHandleOpenBag,.Lfe49-OpponentHandleOpenBag
	.align	2, 0
	.globl	OpponentHandlecmd22
	.type	 OpponentHandlecmd22,function
	.thumb_func
OpponentHandlecmd22:
	push	{r4, r5, r6, lr}
	ldr	r6, .L635
	ldr	r5, .L635+0x4
	ldrb	r0, [r5]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L635+0x8
	add	r0, r0, r1
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L624	@cond_branch
	bl	sub_8036CD4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bne	.L634	@cond_branch
	ldr	r0, .L635+0xc
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L626	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	b	.L627
.L636:
	.align	2, 0
.L635:
	.word	gSharedMem
	.word	gActiveBank
	.word	0x160c8
	.word	gBattleTypeFlags
.L626:
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x3
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L627:
	mov	r4, #0x0
	b	.L628
.L630:
	add	r4, r4, #0x1
.L628:
	cmp	r4, #0x5
	bgt	.L634	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L637
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L630	@cond_branch
	ldr	r1, .L637+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L630	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L630	@cond_branch
	b	.L634
.L638:
	.align	2, 0
.L637:
	.word	gEnemyParty
	.word	gBattlePartyID
.L624:
	ldrb	r0, [r5]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r2, .L639
	add	r0, r0, r2
	add	r0, r0, r6
	ldrb	r4, [r0]
	ldrb	r0, [r5]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x19
	ldr	r1, .L639
	add	r0, r0, r1
	add	r0, r0, r6
	mov	r1, #0x6
	strb	r1, [r0]
.L634:
	ldr	r1, .L639+0x4
	ldr	r0, .L639+0x8
	ldrb	r0, [r0]
	ldr	r2, .L639+0xc
	add	r0, r0, r2
	add	r0, r0, r1
	strb	r4, [r0]
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, #0x0
	bl	Emitcmd34
	bl	OpponentBufferExecCompleted
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L640:
	.align	2, 0
.L639:
	.word	0x160c8
	.word	gSharedMem
	.word	gActiveBank
	.word	0x16068
.Lfe50:
	.size	 OpponentHandlecmd22,.Lfe50-OpponentHandlecmd22
	.align	2, 0
	.globl	OpponentHandlecmd23
	.type	 OpponentHandlecmd23,function
	.thumb_func
OpponentHandlecmd23:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 OpponentHandlecmd23,.Lfe51-OpponentHandlecmd23
	.align	2, 0
	.globl	OpponentHandleHealthBarUpdate
	.type	 OpponentHandleHealthBarUpdate,function
	.thumb_func
OpponentHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	bl	load_gfxc_health_bar
	ldr	r3, .L645
	ldr	r0, .L645+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r2, r4, #0x9
	add	r0, r3, #0x3
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r1, r1, #0x8
	add	r3, r3, #0x2
	add	r2, r2, r3
	ldrb	r0, [r2]
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r7, r0, #0x10
	ldr	r0, .L645+0x8
	cmp	r7, r0
	beq	.L643	@cond_branch
	ldr	r6, .L645+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L645+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L645+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	sub_8043D84
	b	.L644
.L646:
	.align	2, 0
.L645:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	0x7fff
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gHealthboxIDs
.L643:
	ldr	r1, .L647
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L647+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L647+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	sub_8043D84
.L644:
	ldr	r1, .L647+0xc
	ldr	r0, .L647+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L647+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L648:
	.align	2, 0
.L647:
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gHealthboxIDs
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_80330C8
.Lfe52:
	.size	 OpponentHandleHealthBarUpdate,.Lfe52-OpponentHandleHealthBarUpdate
	.align	2, 0
	.globl	OpponentHandleExpBarUpdate
	.type	 OpponentHandleExpBarUpdate,function
	.thumb_func
OpponentHandleExpBarUpdate:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 OpponentHandleExpBarUpdate,.Lfe53-OpponentHandleExpBarUpdate
	.align	2, 0
	.globl	OpponentHandleStatusIconUpdate
	.type	 OpponentHandleStatusIconUpdate,function
	.thumb_func
OpponentHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L652
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L651	@cond_branch
	ldr	r0, .L652+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L652+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L652+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	sub_8045A5C
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L652+0x10
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L652+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L652+0x18
	str	r1, [r0]
.L651:
	pop	{r4}
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gActiveBank
	.word	gHealthboxIDs
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8033494
.Lfe54:
	.size	 OpponentHandleStatusIconUpdate,.Lfe54-OpponentHandleStatusIconUpdate
	.align	2, 0
	.globl	OpponentHandleStatusAnimation
	.type	 OpponentHandleStatusAnimation,function
	.thumb_func
OpponentHandleStatusAnimation:
	push	{r4, r5, lr}
	ldr	r5, .L656
	ldrb	r0, [r5]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L655	@cond_branch
	ldr	r4, .L656+0x4
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	add	r2, r4, #0x4
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	add	r4, r4, #0x5
	add	r3, r3, r4
	ldrb	r2, [r3]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	move_anim_start_t2_for_situation
	ldr	r1, .L656+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L656+0xc
	str	r1, [r0]
.L655:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L657:
	.align	2, 0
.L656:
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gBattleBankFunc
	.word	sub_8033494
.Lfe55:
	.size	 OpponentHandleStatusAnimation,.Lfe55-OpponentHandleStatusAnimation
	.align	2, 0
	.globl	OpponentHandleStatusXor
	.type	 OpponentHandleStatusXor,function
	.thumb_func
OpponentHandleStatusXor:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 OpponentHandleStatusXor,.Lfe56-OpponentHandleStatusXor
	.align	2, 0
	.globl	OpponentHandlecmd29
	.type	 OpponentHandlecmd29,function
	.thumb_func
OpponentHandlecmd29:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 OpponentHandlecmd29,.Lfe57-OpponentHandlecmd29
	.align	2, 0
	.globl	OpponentHandleDMATransfer
	.type	 OpponentHandleDMATransfer,function
	.thumb_func
OpponentHandleDMATransfer:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 OpponentHandleDMATransfer,.Lfe58-OpponentHandleDMATransfer
	.align	2, 0
	.globl	OpponentHandlecmd31
	.type	 OpponentHandlecmd31,function
	.thumb_func
OpponentHandlecmd31:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 OpponentHandlecmd31,.Lfe59-OpponentHandlecmd31
	.align	2, 0
	.globl	OpponentHandlecmd32
	.type	 OpponentHandlecmd32,function
	.thumb_func
OpponentHandlecmd32:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 OpponentHandlecmd32,.Lfe60-OpponentHandlecmd32
	.align	2, 0
	.globl	OpponentHandlecmd33
	.type	 OpponentHandlecmd33,function
	.thumb_func
OpponentHandlecmd33:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 OpponentHandlecmd33,.Lfe61-OpponentHandlecmd33
	.align	2, 0
	.globl	OpponentHandlecmd34
	.type	 OpponentHandlecmd34,function
	.thumb_func
OpponentHandlecmd34:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 OpponentHandlecmd34,.Lfe62-OpponentHandlecmd34
	.align	2, 0
	.globl	OpponentHandlecmd35
	.type	 OpponentHandlecmd35,function
	.thumb_func
OpponentHandlecmd35:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 OpponentHandlecmd35,.Lfe63-OpponentHandlecmd35
	.align	2, 0
	.globl	OpponentHandlecmd36
	.type	 OpponentHandlecmd36,function
	.thumb_func
OpponentHandlecmd36:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 OpponentHandlecmd36,.Lfe64-OpponentHandlecmd36
	.align	2, 0
	.globl	OpponentHandlecmd37
	.type	 OpponentHandlecmd37,function
	.thumb_func
OpponentHandlecmd37:
	push	{lr}
	ldr	r2, .L668
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L669:
	.align	2, 0
.L668:
	.word	gUnknown_020238C8
.Lfe65:
	.size	 OpponentHandlecmd37,.Lfe65-OpponentHandlecmd37
	.align	2, 0
	.globl	OpponentHandlecmd38
	.type	 OpponentHandlecmd38,function
	.thumb_func
OpponentHandlecmd38:
	push	{lr}
	ldr	r3, .L671
	ldr	r1, .L671+0x4
	ldr	r0, .L671+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	gUnknown_020238C8
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe66:
	.size	 OpponentHandlecmd38,.Lfe66-OpponentHandlecmd38
	.align	2, 0
	.globl	OpponentHandlecmd39
	.type	 OpponentHandlecmd39,function
	.thumb_func
OpponentHandlecmd39:
	push	{lr}
	ldr	r2, .L674
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L675:
	.align	2, 0
.L674:
	.word	gUnknown_020238C8
.Lfe67:
	.size	 OpponentHandlecmd39,.Lfe67-OpponentHandlecmd39
	.align	2, 0
	.globl	OpponentHandlecmd40
	.type	 OpponentHandlecmd40,function
	.thumb_func
OpponentHandlecmd40:
	push	{lr}
	ldr	r3, .L677
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L678:
	.align	2, 0
.L677:
	.word	gUnknown_020238C8
.Lfe68:
	.size	 OpponentHandlecmd40,.Lfe68-OpponentHandlecmd40
	.align	2, 0
	.globl	OpponentHandleHitAnimation
	.type	 OpponentHandleHitAnimation,function
	.thumb_func
OpponentHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L682
	ldr	r2, .L682+0x4
	ldr	r4, .L682+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L680	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L681
.L683:
	.align	2, 0
.L682:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
.L680:
	ldr	r1, .L684
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	sub_8047858
	ldr	r1, .L684+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L684+0x8
	str	r1, [r0]
.L681:
	pop	{r4}
	pop	{r0}
	bx	r0
.L685:
	.align	2, 0
.L684:
	.word	gDoingBattleAnim
	.word	gBattleBankFunc
	.word	bx_blink_t7
.Lfe69:
	.size	 OpponentHandleHitAnimation,.Lfe69-OpponentHandleHitAnimation
	.align	2, 0
	.globl	OpponentHandlecmd42
	.type	 OpponentHandlecmd42,function
	.thumb_func
OpponentHandlecmd42:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 OpponentHandlecmd42,.Lfe70-OpponentHandlecmd42
	.align	2, 0
	.globl	OpponentHandleEffectivenessSound
	.type	 OpponentHandleEffectivenessSound,function
	.thumb_func
OpponentHandleEffectivenessSound:
	push	{r4, lr}
	ldr	r4, .L690
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L688	@cond_branch
	mov	r3, #0xc0
.L688:
	ldr	r2, .L690+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	OpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L691:
	.align	2, 0
.L690:
	.word	gActiveBank
	.word	gBattleBufferA
.Lfe71:
	.size	 OpponentHandleEffectivenessSound,.Lfe71-OpponentHandleEffectivenessSound
	.align	2, 0
	.globl	OpponentHandlecmd44
	.type	 OpponentHandlecmd44,function
	.thumb_func
OpponentHandlecmd44:
	push	{lr}
	ldr	r2, .L693
	ldr	r0, .L693+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L694:
	.align	2, 0
.L693:
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe72:
	.size	 OpponentHandlecmd44,.Lfe72-OpponentHandlecmd44
	.align	2, 0
	.globl	OpponentHandleFaintingCry
	.type	 OpponentHandleFaintingCry,function
	.thumb_func
OpponentHandleFaintingCry:
	push	{lr}
	ldr	r1, .L696
	ldr	r0, .L696+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L696+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	mov	r2, #0x5
	bl	PlayCry3
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L697:
	.align	2, 0
.L696:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gEnemyParty
.Lfe73:
	.size	 OpponentHandleFaintingCry,.Lfe73-OpponentHandleFaintingCry
	.align	2, 0
	.globl	OpponentHandleIntroSlide
	.type	 OpponentHandleIntroSlide,function
	.thumb_func
OpponentHandleIntroSlide:
	push	{lr}
	ldr	r1, .L699
	ldr	r0, .L699+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_80E43C0
	ldr	r2, .L699+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gUnknown_02024DE8
.Lfe74:
	.size	 OpponentHandleIntroSlide,.Lfe74-OpponentHandleIntroSlide
	.align	2, 0
	.globl	OpponentHandleTrainerBallThrow
	.type	 OpponentHandleTrainerBallThrow,function
	.thumb_func
OpponentHandleTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L703
	ldr	r6, .L703+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L703+0x8
	add	r0, r0, r4
	bl	oamt_add_pos2_onto_pos1
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L703+0xc
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L703+0x10
	bl	StoreSpriteCallbackInData
	ldr	r0, .L703+0x14
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L703+0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r6]
	strh	r0, [r1, #0x8]
	ldrb	r3, [r6]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r2, .L703+0x1c
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L702	@cond_branch
	ldr	r0, .L703+0x20
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L703+0x24
	str	r1, [r0]
.L702:
	add	r2, r2, #0x30
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L703+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L703+0x2c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L704:
	.align	2, 0
.L703:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	sub_8078B34
	.word	sub_8035C10
	.word	sub_8035C44
	.word	gTasks
	.word	gSharedMem+0x17810
	.word	gUnknown_02024E68
	.word	sub_8044CA0
	.word	gBattleBankFunc
	.word	nullsub_45
.Lfe75:
	.size	 OpponentHandleTrainerBallThrow,.Lfe75-OpponentHandleTrainerBallThrow
	.align	2, 0
	.globl	sub_8035C10
	.type	 sub_8035C10,function
	.thumb_func
sub_8035C10:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x6]
	bl	sub_8031B74
	ldrh	r0, [r4, #0x38]
	ldr	r1, .L706
	and	r1, r1, r0
	ldrh	r2, [r4, #0x4]
	ldr	r0, .L706+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L707:
	.align	2, 0
.L706:
	.word	0x3ff
	.word	0xfffffc00
.Lfe76:
	.size	 sub_8035C10,.Lfe76-sub_8035C10
	.align	2, 0
	.globl	sub_8035C44
	.type	 sub_8035C44,function
	.thumb_func
sub_8035C44:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r7, .L712
	ldrb	r0, [r7]
	mov	r9, r0
	ldr	r1, .L712+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L710	@cond_branch
	ldr	r0, .L712+0x8
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L709	@cond_branch
.L710:
	ldr	r0, .L712+0xc
	ldrb	r1, [r7]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L712+0x10
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_803495C
	b	.L711
.L713:
	.align	2, 0
.L712:
	.word	gActiveBank
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleBufferA
	.word	gBattlePartyID
.L709:
	ldr	r4, .L714
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r4, r4, #0x1
	add	r1, r1, r4
	ldr	r6, .L714+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_803495C
	ldrb	r0, [r7]
	mov	r5, #0x2
	eor	r0, r0, r5
	strb	r0, [r7]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r1, r1, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_803495C
	ldrb	r0, [r7]
	eor	r0, r0, r5
	strb	r0, [r7]
.L711:
	ldr	r1, .L714+0x8
	ldr	r2, .L714+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L714+0x10
	str	r1, [r0]
	mov	r0, r9
	strb	r0, [r2]
	mov	r0, r8
	bl	DestroyTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L715:
	.align	2, 0
.L714:
	.word	gBattleBufferA
	.word	gBattlePartyID
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_8032E2C
.Lfe77:
	.size	 sub_8035C44,.Lfe77-sub_8035C44
	.align	2, 0
	.globl	OpponentHandlecmd48
	.type	 OpponentHandlecmd48,function
	.thumb_func
OpponentHandlecmd48:
	push	{r4, r5, r6, lr}
	ldr	r1, .L722
	ldr	r0, .L722+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L717	@cond_branch
	add	r0, r2, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L717	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L716
.L723:
	.align	2, 0
.L722:
	.word	gBattleBufferA
	.word	gActiveBank
.L717:
	ldr	r3, .L724
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L724+0x4
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L724+0x8
	ldrb	r2, [r3]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r6, r3, #0
	cmp	r0, #0
	beq	.L718	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r4
	ldrb	r2, [r3, #0x1]
	lsl	r1, r2, #0x1a
	lsr	r0, r1, #0x1b
	cmp	r0, #0x1
	bhi	.L719	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	b	.L716
.L725:
	.align	2, 0
.L724:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBufferA
.L719:
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
.L718:
	add	r5, r6, #0
	ldrb	r0, [r5]
	lsl	r3, r0, #0x9
	ldr	r4, .L726
	add	r1, r3, r4
	sub	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	sub	r4, r4, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	sub_8044804
	ldr	r2, .L726+0x4
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r2, #0x0
	strb	r0, [r1]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r3, .L726+0x8
	add	r0, r0, r3
	strb	r2, [r0, #0x5]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L721	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L721:
	ldr	r0, .L726+0xc
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L726+0x10
	str	r0, [r1]
.L716:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L727:
	.align	2, 0
.L726:
	.word	gBattleBufferA+0x4
	.word	gUnknown_02024E68
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8035E2C
.Lfe78:
	.size	 OpponentHandlecmd48,.Lfe78-OpponentHandlecmd48
	.align	2, 0
	.globl	sub_8035E2C
	.type	 sub_8035E2C,function
	.thumb_func
sub_8035E2C:
	push	{r4, lr}
	ldr	r4, .L730
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r3, .L730+0x4
	add	r0, r0, r3
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L729	@cond_branch
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	bl	OpponentBufferExecCompleted
.L729:
	pop	{r4}
	pop	{r0}
	bx	r0
.L731:
	.align	2, 0
.L730:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe79:
	.size	 sub_8035E2C,.Lfe79-sub_8035E2C
	.align	2, 0
	.globl	OpponentHandlecmd49
	.type	 OpponentHandlecmd49,function
	.thumb_func
OpponentHandlecmd49:
	push	{lr}
	ldr	r0, .L734
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, .L734+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L733	@cond_branch
	ldr	r2, .L734+0x8
	ldr	r0, .L734+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L734+0x10
	str	r1, [r0]
.L733:
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L735:
	.align	2, 0
.L734:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gTasks
	.word	gUnknown_02024E68
	.word	sub_8044CA0
.Lfe80:
	.size	 OpponentHandlecmd49,.Lfe80-OpponentHandlecmd49
	.align	2, 0
	.globl	OpponentHandlecmd50
	.type	 OpponentHandlecmd50,function
	.thumb_func
OpponentHandlecmd50:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 OpponentHandlecmd50,.Lfe81-OpponentHandlecmd50
	.align	2, 0
	.globl	OpponentHandleSpriteInvisibility
	.type	 OpponentHandleSpriteInvisibility,function
	.thumb_func
OpponentHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L739
	ldrb	r0, [r4]
	bl	AnimBankSpriteExists
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L738	@cond_branch
	ldr	r3, .L739+0x4
	ldr	r0, .L739+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L739+0xc
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r1, [r1]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	sub_8031F88
.L738:
	bl	OpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L740:
	.align	2, 0
.L739:
	.word	gActiveBank
	.word	gSprites
	.word	gObjectBankIDs
	.word	gBattleBufferA
.Lfe82:
	.size	 OpponentHandleSpriteInvisibility,.Lfe82-OpponentHandleSpriteInvisibility
	.align	2, 0
	.globl	OpponentHandleBattleAnimation
	.type	 OpponentHandleBattleAnimation,function
	.thumb_func
OpponentHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L745
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L742	@cond_branch
	ldr	r5, .L745+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	move_anim_start_t3
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L743	@cond_branch
	bl	OpponentBufferExecCompleted
	b	.L742
.L746:
	.align	2, 0
.L745:
	.word	gActiveBank
	.word	gBattleBufferA
.L743:
	ldr	r0, .L747
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L747+0x4
	str	r0, [r1]
.L742:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	gBattleBankFunc
	.word	sub_80334C0
.Lfe83:
	.size	 OpponentHandleBattleAnimation,.Lfe83-OpponentHandleBattleAnimation
	.align	2, 0
	.globl	OpponentHandleLinkStandbyMsg
	.type	 OpponentHandleLinkStandbyMsg,function
	.thumb_func
OpponentHandleLinkStandbyMsg:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 OpponentHandleLinkStandbyMsg,.Lfe84-OpponentHandleLinkStandbyMsg
	.align	2, 0
	.globl	OpponentHandleResetActionMoveSelection
	.type	 OpponentHandleResetActionMoveSelection,function
	.thumb_func
OpponentHandleResetActionMoveSelection:
	push	{lr}
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 OpponentHandleResetActionMoveSelection,.Lfe85-OpponentHandleResetActionMoveSelection
	.align	2, 0
	.globl	OpponentHandlecmd55
	.type	 OpponentHandlecmd55,function
	.thumb_func
OpponentHandlecmd55:
	push	{lr}
	ldr	r0, .L753
	ldrh	r1, [r0]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L752	@cond_branch
	ldr	r2, .L753+0x4
	ldr	r0, .L753+0x8
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L753+0xc
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L752:
	bl	OpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L754:
	.align	2, 0
.L753:
	.word	gBattleTypeFlags
	.word	gMain
	.word	0x43d
	.word	gPreBattleCallback1
.Lfe86:
	.size	 OpponentHandlecmd55,.Lfe86-OpponentHandlecmd55
	.align	2, 0
	.globl	OpponentHandlecmd56
	.type	 OpponentHandlecmd56,function
	.thumb_func
OpponentHandlecmd56:
	bx	lr
.Lfe87:
	.size	 OpponentHandlecmd56,.Lfe87-OpponentHandlecmd56
.text
	.align	2, 0
