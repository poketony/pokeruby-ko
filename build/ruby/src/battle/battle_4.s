@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBattleScriptingCommandsTable
	.section .rodata
	.align	2, 0
	.type	 gBattleScriptingCommandsTable,object
gBattleScriptingCommandsTable:
	.word	atk00_attackcanceler
	.word	atk01_accuracycheck
	.word	atk02_attackstring
	.word	atk03_ppreduce
	.word	atk04_critcalc
	.word	atk05_damagecalc1
	.word	atk06_typecalc
	.word	atk07_dmg_adjustment
	.word	atk08_dmg_adjustment2
	.word	atk09_attackanimation
	.word	atk0A_waitanimation
	.word	atk0B_healthbarupdate
	.word	atk0C_datahpupdate
	.word	atk0D_critmessage
	.word	atk0E_effectiveness_sound
	.word	atk0F_resultmessage
	.word	atk10_printstring
	.word	atk11_printstring_playeronly
	.word	atk12_waitmessage
	.word	atk13_printfromtable
	.word	atk14_printfromtable_playeronly
	.word	atk15_seteffectwithchancetarget
	.word	atk16_seteffectprimary
	.word	atk17_seteffectsecondary
	.word	atk18_status_effect_clear
	.word	atk19_faint_pokemon
	.word	atk1A_faint_animation
	.word	atk1B_faint_effects_clear
	.word	atk1C_jumpifstatus
	.word	atk1D_jumpifstatus2
	.word	atk1E_jumpifability
	.word	atk1F_jumpifsideaffecting
	.word	atk20_jumpifstat
	.word	atk21_jumpifstatus3
	.word	atk22_jumpiftype
	.word	atk23_getexp
	.word	atk24
	.word	atk25_move_values_cleanup
	.word	atk26_set_multihit
	.word	atk27_decrement_multihit
	.word	atk28_goto
	.word	atk29_jumpifbyte
	.word	atk2A_jumpifhalfword
	.word	atk2B_jumpifword
	.word	atk2C_jumpifarrayequal
	.word	atk2D_jumpifarraynotequal
	.word	atk2E_setbyte
	.word	atk2F_addbyte
	.word	atk30_subbyte
	.word	atk31_copyarray
	.word	atk32_copyarray_withindex
	.word	atk33_orbyte
	.word	atk34_orhalfword
	.word	atk35_orword
	.word	atk36_bicbyte
	.word	atk37_bichalfword
	.word	atk38_bicword
	.word	atk39_pause
	.word	atk3A_waitstate
	.word	atk3B_healthbar_update
	.word	atk3C_return
	.word	atk3D_end
	.word	atk3E_end2
	.word	atk3F_end3
	.word	atk40_jump_if_move_affected_by_protect
	.word	atk41_call
	.word	atk42_jumpiftype2
	.word	atk43_jumpifabilitypresent
	.word	atk44
	.word	atk45_playanimation
	.word	atk46_playanimation2
	.word	atk47_setgraphicalstatchangevalues
	.word	atk48_playstatchangeanimation
	.word	atk49_moveendturn
	.word	atk4A_typecalc2
	.word	atk4B_return_atk_to_ball
	.word	atk4C_copy_poke_data
	.word	atk4D_switch_data_update
	.word	atk4E_switchin_anim
	.word	atk4F_jump_if_cannot_switch
	.word	atk50_openpartyscreen
	.word	atk51_switch_handle_order
	.word	atk52_switch_in_effects
	.word	atk53_trainer_slide
	.word	atk54_effectiveness_sound
	.word	atk55_play_sound
	.word	atk56_fainting_cry
	.word	atk57
	.word	atk58_return_to_ball
	.word	atk59_learnmove_inbattle
	.word	atk5A
	.word	atk5B_80256E0
	.word	atk5C_hitanimation
	.word	atk5D_getmoneyreward
	.word	atk5E_8025A70
	.word	atk5F_8025B24
	.word	atk60_increment_gamestat
	.word	atk61_8025BA4
	.word	atk62_08025C6C
	.word	atk63_jumptorandomattack
	.word	atk64_statusanimation
	.word	atk65_status2animation
	.word	atk66_chosenstatusanimation
	.word	atk67_8025ECC
	.word	atk68_80246A0
	.word	atk69_dmg_adjustment2
	.word	atk6A_removeitem
	.word	atk6B_atknameinbuff1
	.word	atk6C_lvlbox_display
	.word	atk6D_set_sentpokes_values
	.word	atk6E_set_atk_to_player0
	.word	atk6F_set_visible
	.word	atk70_record_ability
	.word	atk71_buffer_move_to_learn
	.word	atk72_jump_if_can_run_frombattle
	.word	atk73_hp_thresholds
	.word	atk74_hp_thresholds2
	.word	atk75_8026A58
	.word	atk76_various
	.word	atk77_setprotect
	.word	atk78_faintifabilitynotdamp
	.word	atk79_setatkhptozero
	.word	atk7A_jumpwhiletargetvalid
	.word	atk7B_healhalfHP_if_possible
	.word	atk7C_8025508
	.word	atk7D_set_rain
	.word	atk7E_setreflect
	.word	atk7F_setseeded
	.word	atk80_manipulatedamage
	.word	atk81_setrest
	.word	atk82_jumpifnotfirstturn
	.word	atk83_nop
	.word	atk84_jump_if_cant_sleep
	.word	atk85_stockpile
	.word	atk86_stockpiletobasedamage
	.word	atk87_stockpiletohpheal
	.word	atk88_negativedamage
	.word	atk89_statbuffchange
	.word	atk8A_normalisebuffs
	.word	atk8B_setbide
	.word	atk8C_confuseifrepeatingattackends
	.word	atk8D_setmultihit_counter
	.word	atk8E_prepare_multihit
	.word	atk8F_forcerandomswitch
	.word	atk90_conversion_type_change
	.word	atk91_givepaydaymoney
	.word	atk92_setlightscreen
	.word	atk93_ko_move
	.word	atk94_gethalfcurrentenemyhp
	.word	atk95_setsandstorm
	.word	atk96_weatherdamage
	.word	atk97_try_infatuation
	.word	atk98_status_icon_update
	.word	atk99_setmist
	.word	atk9A_set_focusenergy
	.word	atk9B_transformdataexecution
	.word	atk9C_set_substitute
	.word	atk9D_copyattack
	.word	atk9E_metronome
	.word	atk9F_dmgtolevel
	.word	atkA0_psywavedamageeffect
	.word	atkA1_counterdamagecalculator
	.word	atkA2_mirrorcoatdamagecalculator
	.word	atkA3_disablelastusedattack
	.word	atkA4_setencore
	.word	atkA5_painsplitdmgcalc
	.word	atkA6_settypetorandomresistance
	.word	atkA7_setalwayshitflag
	.word	atkA8_copymovepermanently
	.word	atkA9_sleeptalk_choose_move
	.word	atkAA_set_destinybond
	.word	atkAB_DestinyBondFlagUpdate
	.word	atkAC_remaininghptopower
	.word	atkAD_spite_ppreduce
	.word	atkAE_heal_party_status
	.word	atkAF_cursetarget
	.word	atkB0_set_spikes
	.word	atkB1_set_foresight
	.word	atkB2_setperishsong
	.word	atkB3_rolloutdamagecalculation
	.word	atkB4_jumpifconfusedandstatmaxed
	.word	atkB5_furycuttercalc
	.word	atkB6_happinesstodamagecalculation
	.word	atkB7_presentdamagecalculation
	.word	atkB8_set_safeguard
	.word	atkB9_magnitudedamagecalculation
	.word	atkBA_jumpifnopursuitswitchdmg
	.word	atkBB_setsunny
	.word	atkBC_maxattackhalvehp
	.word	atkBD_copyfoestats
	.word	atkBE_breakfree
	.word	atkBF_set_defense_curl
	.word	atkC0_recoverbasedonsunlight
	.word	atkC1_hidden_power
	.word	atkC2_selectnexttarget
	.word	atkC3_setfutureattack
	.word	atkC4_beat_up
	.word	atkC5_hidepreattack
	.word	atkC6_unhidepostattack
	.word	atkC7_setminimize
	.word	atkC8_sethail
	.word	atkC9_jumpifattackandspecialattackcannotfall
	.word	atkCA_setforcedtarget
	.word	atkCB_setcharge
	.word	atkCC_callterrainattack
	.word	atkCD_cureifburnedparalysedorpoisoned
	.word	atkCE_settorment
	.word	atkCF_jumpifnodamage
	.word	atkD0_settaunt
	.word	atkD1_set_helpinghand
	.word	atkD2_swap_items
	.word	atkD3_copy_ability
	.word	atkD4_wish_effect
	.word	atkD5_setroots
	.word	atkD6_doubledamagedealtifdamaged
	.word	atkD7_setyawn
	.word	atkD8_setdamagetohealthdifference
	.word	atkD9_scaledamagebyhealthratio
	.word	atkDA_abilityswap
	.word	atkDB_imprisoneffect
	.word	atkDC_setgrudge
	.word	atkDD_weightdamagecalculation
	.word	atkDE_asistattackselect
	.word	atkDF_setmagiccoat
	.word	atkE0_setstealstatchange
	.word	atkE1_intimidate_string_loader
	.word	atkE2_switchout_abilities
	.word	atkE3_jumpiffainted
	.word	atkE4_getsecretpowereffect
	.word	atkE5_pickup
	.word	atkE6_castform_change_animation
	.word	atkE7_castform_data_change
	.word	atkE8_settypebasedhalvers
	.word	atkE9_setweatherballtype
	.word	atkEA_recycleitem
	.word	atkEB_settypetoterrain
	.word	atkEC_pursuit_sth
	.word	atkED_802B4B4
	.word	atkEE_removelightscreenreflect
	.word	atkEF_pokeball_catch_calculation
	.word	atkF0_copy_caught_poke
	.word	atkF1_setpoke_as_caught
	.word	atkF2_display_dex_info
	.word	atkF3_nickname_caught_poke
	.word	atkF4_802BEF0
	.word	atkF5_removeattackerstatus1
	.word	atkF6_802BF48
	.word	atkF7_802BF54
	.size	 gBattleScriptingCommandsTable,992
	.align	2, 0
	.type	 gAccuracyStageRatios,object
gAccuracyStageRatios:
	.byte	0x21
	.byte	0x64
	.space	2
	.byte	0x24
	.byte	0x64
	.space	2
	.byte	0x2b
	.byte	0x64
	.space	2
	.byte	0x32
	.byte	0x64
	.space	2
	.byte	0x3c
	.byte	0x64
	.space	2
	.byte	0x4b
	.byte	0x64
	.space	2
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x85
	.byte	0x64
	.space	2
	.byte	0xa6
	.byte	0x64
	.space	2
	.byte	0x2
	.byte	0x1
	.space	2
	.byte	0xe9
	.byte	0x64
	.space	2
	.byte	0x85
	.byte	0x32
	.space	2
	.byte	0x3
	.byte	0x1
	.space	2
	.size	 gAccuracyStageRatios,52
	.align	1, 0
	.type	 gCriticalHitChance,object
gCriticalHitChance:
	.short	0x10
	.short	0x8
	.short	0x4
	.short	0x3
	.short	0x2
	.size	 gCriticalHitChance,10
	.align	2, 0
	.type	 gStatusFlagsForMoveEffects,object
gStatusFlagsForMoveEffects:
	.word	0x0
	.word	0x7
	.word	0x8
	.word	0x10
	.word	0x20
	.word	0x40
	.word	0x80
	.word	0x7
	.word	0x8
	.word	0x0
	.word	0x70
	.word	0x0
	.word	0x1000
	.word	0xe000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x400000
	.word	0x0
	.word	0x0
	.word	0x4000000
	.word	0x8000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0xc00
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.size	 gStatusFlagsForMoveEffects,240
	.globl	gMoveEffectBS_Ptrs
	.align	2, 0
	.type	 gMoveEffectBS_Ptrs,object
gMoveEffectBS_Ptrs:
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D965A
	.word	BattleScript_1D9669
	.word	BattleScript_1D9678
	.word	BattleScript_1D9687
	.word	BattleScript_1D969D
	.word	BattleScript_1D96BA
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D9696
	.word	BattleScript_1D96AA
	.word	BattleScript_1D963E
	.word	BattleScript_1D96B1
	.word	BattleScript_1D96C8
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D963E
	.word	BattleScript_1D96C8
	.size	 gMoveEffectBS_Ptrs,156
	.globl	sUnreferencedBitMask1
	.type	 sUnreferencedBitMask1,object
sUnreferencedBitMask1:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x7
	.byte	0xf
	.byte	0x1f
	.byte	0x3f
	.size	 sUnreferencedBitMask1,7
	.globl	gLevelUpStatBoxStats
	.type	 gLevelUpStatBoxStats,object
gLevelUpStatBoxStats:
	.byte	0x3a
	.byte	0x3e
	.byte	0x3b
	.byte	0x3f
	.byte	0x3c
	.byte	0x3d
	.size	 gLevelUpStatBoxStats,6
	.align	1, 0
	.type	 sProtectSuccessRates,object
sProtectSuccessRates:
	.short	0xffff
	.short	0x7fff
	.short	0x3fff
	.short	0x1fff
	.size	 sProtectSuccessRates,8
	.align	1, 0
	.type	 sUnknown_081FACFE,object
sUnknown_081FACFE:
	.short	0x76
	.short	0xa5
	.short	0xa6
	.short	0x66
	.short	0xfffe
	.short	0x44
	.short	0xf3
	.short	0xb6
	.short	0xc5
	.short	0xcb
	.short	0xc2
	.short	0xd6
	.short	0xa8
	.short	0x10a
	.short	0x121
	.short	0x10e
	.short	0x157
	.short	0x10f
	.short	0x108
	.short	0xffff
	.size	 sUnknown_081FACFE,40
	.type	 sUnknown_081FAD26,object
sUnknown_081FAD26:
	.byte	0x1
	.byte	0xc8
	.byte	0x4
	.byte	0x96
	.byte	0x9
	.byte	0x64
	.byte	0x10
	.byte	0x50
	.byte	0x20
	.byte	0x28
	.byte	0x30
	.byte	0x14
	.size	 sUnknown_081FAD26,12
	.align	1, 0
	.type	 sNaturePowerMoves,object
sNaturePowerMoves:
	.short	0x4e
	.short	0x4b
	.short	0x59
	.short	0x38
	.short	0x39
	.short	0x3d
	.short	0x9d
	.short	0xf7
	.short	0x81
	.short	0x81
	.size	 sNaturePowerMoves,20
	.align	1, 0
	.type	 sWeightDamage,object
sWeightDamage:
	.short	0x64
	.short	0x14
	.short	0xfa
	.short	0x28
	.short	0x1f4
	.short	0x3c
	.short	0x3e8
	.short	0x50
	.short	0x7d0
	.short	0x64
	.short	0xffff
	.short	0xffff
	.size	 sWeightDamage,24
	.align	1, 0
	.type	 sPickupItems,object
sPickupItems:
	.short	0x16
	.short	0x1e
	.short	0x17
	.short	0x28
	.short	0x2
	.short	0x32
	.short	0x44
	.short	0x3c
	.short	0x13
	.short	0x46
	.short	0x18
	.short	0x50
	.short	0x6e
	.short	0x5a
	.short	0x40
	.short	0x5f
	.short	0x45
	.short	0x63
	.short	0xbb
	.short	0x1
	.size	 sPickupItems,40
	.type	 sTerrainToType,object
sTerrainToType:
	.byte	0xc
	.byte	0xc
	.byte	0x4
	.byte	0xb
	.byte	0xb
	.byte	0xb
	.byte	0x5
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.size	 sTerrainToType,10
	.type	 sBallCatchBonuses,object
sBallCatchBonuses:
	.byte	0x14
	.byte	0xf
	.byte	0xa
	.byte	0xf
	.size	 sBallCatchBonuses,4
.text
	.align	2, 0
	.type	 atk00_attackcanceler,function
	.thumb_func
atk00_attackcanceler:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L27
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r1, .L27+0x4
	mov	r0, #0xc
	strb	r0, [r1]
	b	.L2
.L28:
	.align	2, 0
.L27:
	.word	gBattleOutcome
	.word	gFightStateTracker
.L3:
	ldr	r2, .L29
	ldr	r0, .L29+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L4	@cond_branch
	ldr	r2, .L29+0x8
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L29+0xc
	ldr	r0, .L29+0x10
	b	.L26
.L30:
	.align	2, 0
.L29:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_EndTurn
.L4:
	bl	AtkCanceller_UnableToUseMove
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB70
	b	.L2	@long jump
.LCB70:
	ldr	r0, .L31
	ldrb	r1, [r0]
	str	r2, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB83
	b	.L2	@long jump
.LCB83:
	ldr	r4, .L31+0x4
	ldr	r0, .L31+0x8
	ldrb	r1, [r0]
	ldr	r3, .L31+0xc
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r0, r4, #0
	add	r0, r0, #0x24
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldr	r5, .L31+0x10
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r0, .L31+0x14
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L7	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L31+0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r1, .L31+0x1c
	ldr	r0, .L31+0x20
	str	r0, [r1]
	ldr	r2, .L31+0x24
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L2
.L32:
	.align	2, 0
.L31:
	.word	gBankTarget
	.word	gBattleMons
	.word	gCurrMovePos
	.word	gBankAttacker
	.word	gHitMarker
	.word	gCurrentMove
	.word	0x800200
	.word	gBattlescriptCurrInstr
	.word	BattleScript_NoPPForMove
	.word	gBattleMoveFlags
.L7:
	ldr	r0, [r5]
	ldr	r1, .L33
	and	r0, r0, r1
	str	r0, [r5]
	mov	r6, #0x80
	lsl	r6, r6, #0x12
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L8	@cond_branch
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L8	@cond_branch
	bl	IsPokeDisobedient
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	.code	16
	cmp	r2, #0
	beq	.L8	@cond_branch
	cmp	r2, #0x2
	bne	.L10	@cond_branch
	ldr	r0, [r5]
	orr	r0, r0, r6
	str	r0, [r5]
	b	.L2
.L34:
	.align	2, 0
.L33:
	.word	0xff7fffff
.L10:
	ldr	r0, .L35
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2
.L36:
	.align	2, 0
.L35:
	.word	gBattleMoveFlags
.L8:
	ldr	r2, .L37
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L37+0x4
	ldr	r1, .L37+0x8
	ldrb	r3, [r1]
	lsl	r0, r3, #0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	mov	r8, r1
	mov	r9, r2
	cmp	r0, #0
	bge	.L12	@cond_branch
	ldr	r2, .L37+0xc
	ldr	r0, .L37+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L12	@cond_branch
	ldr	r0, .L37+0x14
	ldrb	r0, [r0]
	ldr	r2, .L37+0x18
	add	r1, r3, #0
	bl	PressurePPLose
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r9
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L37+0x1c
	ldr	r0, .L37+0x20
	b	.L26
.L38:
	.align	2, 0
.L37:
	.word	gHitMarker
	.word	gProtectStructs
	.word	gBankTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBankAttacker
	.word	0x115
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MagicCoatBounce
.L12:
	mov	r2, #0x0
	ldr	r0, .L39
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L14	@cond_branch
	ldr	r6, .L39+0x4
	ldr	r1, .L39+0x8
	mov	ip, r1
	add	r5, r0, #0
	ldr	r7, .L39+0xc
.L16:
	add	r4, r2, r7
	ldrb	r3, [r4]
	lsl	r0, r3, #0x4
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L15	@cond_branch
	ldr	r0, .L39+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB321
	b	.L25	@long jump
.LCB321:
.L15:
	add	r2, r2, #0x1
	cmp	r2, r5
	blt	.L16	@cond_branch
.L14:
	ldr	r0, .L39+0x14
	mov	r1, r8
	ldrb	r2, [r1]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1e
	cmp	r0, #0
	bge	.L19	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r3
	strb	r0, [r1]
	ldr	r4, .L39+0x18
	mov	r0, #0x1f
	strb	r0, [r4]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L39+0x1c
	ldr	r0, .L39+0x20
	str	r0, [r1]
	mov	r2, r8
	ldrb	r0, [r2]
	ldrb	r1, [r4]
	bl	RecordAbilityBattle
	b	.L2
.L40:
	.align	2, 0
.L39:
	.word	gNoOfAllBanks
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gTurnOrder
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TookAttack
.L19:
	lsl	r0, r2, #0x4
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.LCB388
	b	.L21	@long jump
.LCB388:
	ldr	r1, .L41
	ldr	r2, .L41+0x4
	ldrh	r3, [r2]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0
	beq	.L21	@cond_branch
	cmp	r3, #0xae
	bne	.L22	@cond_branch
	ldr	r2, .L41+0x8
	ldr	r0, .L41+0xc
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L22	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L21	@cond_branch
.L22:
	ldrh	r0, [r4]
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L23	@cond_branch
	ldr	r1, .L41+0x8
	ldr	r0, .L41+0xc
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
.L23:
	ldr	r0, .L41+0xc
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	ldr	r2, .L41+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L41+0x14
	ldr	r3, .L41+0x18
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L41+0x1c
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r1, .L41+0x20
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	b	.L21
.L42:
	.align	2, 0
.L41:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoveFlags
	.word	gMoveHitWith
	.word	gBankTarget
	.word	gUnknown_02024C44
	.word	gBattleCommunication
.L25:
	ldr	r0, .L43
	ldrb	r0, [r0]
	ldr	r2, .L43+0x4
	add	r1, r3, #0
	bl	PressurePPLose
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L43+0x8
	ldrb	r1, [r4]
	ldr	r2, .L43+0xc
	add	r0, r0, r2
	strb	r1, [r0]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L43+0x10
	ldr	r0, .L43+0x14
	b	.L26
.L44:
	.align	2, 0
.L43:
	.word	gBankAttacker
	.word	0x121
	.word	gSharedMem
	.word	0x16003
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SnatchedMove
.L21:
	ldr	r1, .L45
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L26:
	str	r0, [r1]
.L2:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gBattlescriptCurrInstr
.Lfe1:
	.size	 atk00_attackcanceler,.Lfe1-atk00_attackcanceler
	.align	2, 0
	.type	 JumpIfMoveFailed,function
	.thumb_func
JumpIfMoveFailed:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r1, .L51
	ldr	r5, [r1]
	add	r4, r5, r0
	ldr	r0, .L51+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L48	@cond_branch
	ldr	r1, .L51+0x8
	ldr	r3, .L51+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L51+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r4, [r5, #0x1]
	ldrb	r0, [r5, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	b	.L49
.L52:
	.align	2, 0
.L51:
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveFlags
	.word	gMoveHitWith
	.word	gBankTarget
	.word	gUnknown_02024C44
.L48:
	bl	DestinyBondFlagUpdate
	ldr	r0, .L53
	ldrb	r1, [r0]
	str	r6, [sp]
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L47	@cond_branch
.L49:
	ldr	r0, .L53+0x4
	str	r4, [r0]
.L47:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.Lfe2:
	.size	 JumpIfMoveFailed,.Lfe2-JumpIfMoveFailed
	.align	2, 0
	.type	 atk40_jump_if_move_affected_by_protect,function
	.thumb_func
atk40_jump_if_move_affected_by_protect:
	push	{lr}
	ldr	r1, .L58
	ldr	r0, .L58+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L56	@cond_branch
	ldr	r2, .L58+0x8
	ldr	r0, .L58+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L56	@cond_branch
	ldr	r2, .L58+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x5
	mov	r1, #0x0
	bl	JumpIfMoveFailed
	ldr	r1, .L58+0x14
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	b	.L57
.L59:
	.align	2, 0
.L58:
	.word	gProtectStructs
	.word	gBankTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L56:
	ldr	r1, .L60
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L57:
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gBattlescriptCurrInstr
.Lfe3:
	.size	 atk40_jump_if_move_affected_by_protect,.Lfe3-atk40_jump_if_move_affected_by_protect
	.align	2, 0
	.type	 JumpIfMoveAffectedByProtect,function
	.thumb_func
JumpIfMoveAffectedByProtect:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r4, #0x0
	ldr	r1, .L64
	ldr	r0, .L64+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L63	@cond_branch
	ldr	r2, .L64+0x8
	ldr	r0, .L64+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L63	@cond_branch
	ldr	r2, .L64+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x7
	add	r1, r3, #0
	bl	JumpIfMoveFailed
	ldr	r1, .L64+0x14
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	mov	r4, #0x1
.L63:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L65:
	.align	2, 0
.L64:
	.word	gProtectStructs
	.word	gBankTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.Lfe4:
	.size	 JumpIfMoveAffectedByProtect,.Lfe4-JumpIfMoveAffectedByProtect
	.align	2, 0
	.type	 AccuracyCalcHelper,function
	.thumb_func
AccuracyCalcHelper:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L76
	ldr	r3, .L76+0x4
	ldrb	r4, [r3]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	mov	r0, #0x18
	and	r1, r1, r0
	add	r6, r2, #0
	cmp	r1, #0
	beq	.L67	@cond_branch
	ldr	r1, .L76+0x8
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L76+0xc
	ldrb	r0, [r0, #0x15]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L72	@cond_branch
.L67:
	ldr	r0, .L76+0x10
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	and	r1, r1, r2
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L68	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L68	@cond_branch
.L75:
	ldr	r0, .L76+0x14
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L72
.L77:
	.align	2, 0
.L76:
	.word	gStatuses3
	.word	gBankTarget
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gHitMarker
	.word	gBattleMoveFlags
.L68:
	ldr	r0, [r2]
	ldr	r1, .L78
	and	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L75	@cond_branch
.L69:
	ldr	r0, [r2]
	ldr	r1, .L78+0x4
	and	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L70	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L75	@cond_branch
.L70:
	ldr	r0, [r2]
	ldr	r1, .L78+0x8
	and	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r5, #0x1
	cmp	r0, #0
	bne	.L73	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L73	@cond_branch
	ldr	r0, .L78+0xc
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L73	@cond_branch
	ldr	r0, .L78+0x10
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x98
	beq	.L72	@cond_branch
.L73:
	ldr	r1, .L78+0x10
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x11
	beq	.L72	@cond_branch
	cmp	r0, #0x4e
	bne	.L71	@cond_branch
.L72:
	mov	r0, #0x7
	add	r1, r5, #0
	bl	JumpIfMoveFailed
	mov	r0, #0x1
	b	.L74
.L79:
	.align	2, 0
.L78:
	.word	0xfffeffff
	.word	0xfffdffff
	.word	0xfffbffff
	.word	gBattleWeather
	.word	gBattleMoves
.L71:
	mov	r0, #0x0
.L74:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 AccuracyCalcHelper,.Lfe5-AccuracyCalcHelper
	.align	2, 0
	.type	 atk01_accuracycheck,function
	.thumb_func
atk01_accuracycheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	ldr	r0, .L109
	ldr	r5, [r0]
	ldrb	r6, [r5, #0x5]
	ldrb	r1, [r5, #0x6]
	lsl	r1, r1, #0x8
	orr	r6, r6, r1
	add	r1, r6, #0x2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r7, r0, #0
	cmp	r1, #0x1
	bhi	.L81	@cond_branch
	ldr	r2, .L109+0x4
	ldr	r3, .L109+0x8
	ldrb	r4, [r3]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	mov	r0, #0x18
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L82	@cond_branch
	ldr	r0, .L109+0xc
	cmp	r6, r0
	bne	.L82	@cond_branch
	ldr	r1, .L109+0x10
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L109+0x14
	ldrb	r0, [r0, #0x15]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L82	@cond_branch
	add	r0, r5, #0x7
	str	r0, [r7]
	b	.L80
.L110:
	.align	2, 0
.L109:
	.word	gBattlescriptCurrInstr
	.word	gStatuses3
	.word	gBankTarget
	.word	0xffff
	.word	gDisableStructs
	.word	gBankAttacker
.L82:
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldr	r1, .L111
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L84	@cond_branch
	ldr	r2, [r7]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L80
.L112:
	.align	2, 0
.L111:
	.word	0x400c0
.L84:
	mov	r0, #0x0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1103
	b	.L80	@long jump
.LCB1103:
	ldr	r1, .L113
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L80
.L114:
	.align	2, 0
.L113:
	.word	gBattlescriptCurrInstr
.L81:
	cmp	r6, #0
	bne	.L88	@cond_branch
	ldr	r0, .L115
	ldrh	r6, [r0]
.L88:
	ldr	r0, .L115+0x4
	ldr	r1, .L115+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L89	@cond_branch
	mov	r2, #0x3f
	mov	sl, r2
	mov	r3, sl
	and	r3, r3, r0
	mov	sl, r3
	b	.L90
.L116:
	.align	2, 0
.L115:
	.word	gCurrentMove
	.word	gSharedMem
	.word	0x1601c
.L89:
	ldr	r1, .L117
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	mov	sl, r0
.L90:
	add	r0, r6, #0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1165
	b	.L80	@long jump
.LCB1165:
	add	r0, r6, #0
	bl	AccuracyCalcHelper
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1172
	b	.L80	@long jump
.LCB1172:
	ldr	r3, .L117+0x4
	ldr	r0, .L117+0x8
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r4, r0
	mul	r4, r4, r2
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L93	@cond_branch
	ldr	r0, .L117+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrb	r5, [r0, #0x1e]
	b	.L94
.L118:
	.align	2, 0
.L117:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBankTarget
	.word	gBankAttacker
.L93:
	ldr	r0, .L119
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1e]
	add	r0, r0, #0x6
	add	r1, r4, r3
	ldrb	r1, [r1, #0x1f]
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L94:
	lsl	r0, r5, #0x18
	cmp	r0, #0
	bge	.L95	@cond_branch
	mov	r5, #0x0
.L95:
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0xc
	ble	.L96	@cond_branch
	mov	r5, #0xc
.L96:
	ldr	r1, .L119+0x4
	lsl	r4, r6, #0x1
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r7, r0, r1
	ldrb	r0, [r7, #0x3]
	mov	r8, r0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp, #0x4]
	cmp	r0, #0
	bne	.L97	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L97	@cond_branch
	ldr	r0, .L119+0x8
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L97	@cond_branch
	ldrb	r0, [r7]
	cmp	r0, #0x98
	bne	.L97	@cond_branch
	mov	r1, #0x32
	mov	r8, r1
.L97:
	ldr	r1, .L119+0xc
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r4, r8
	mul	r4, r4, r1
	ldrb	r1, [r0, #0x1]
	add	r0, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r7, .L119+0x10
	ldr	r0, .L119
	ldrb	r0, [r0]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0xe
	bne	.L98	@cond_branch
	lsl	r0, r4, #0x6
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L98:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L99	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L99	@cond_branch
	ldr	r0, .L119+0x14
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L99	@cond_branch
	ldr	r0, .L119+0x8
	ldrh	r1, [r0]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L99	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L99:
	ldr	r2, .L119+0x10
	ldr	r0, .L119
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	r9, r2
	cmp	r0, #0x37
	bne	.L100	@cond_branch
	mov	r2, sl
	cmp	r2, #0x8
	bhi	.L100	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L100:
	ldr	r3, .L119+0x14
	mov	r8, r3
	ldrb	r2, [r3]
	mov	r7, #0x58
	mov	r0, r2
	mul	r0, r0, r7
	mov	r3, r9
	add	r1, r0, r3
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L101	@cond_branch
	ldr	r1, .L119+0x18
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x7]
	ldrb	r2, [r0, #0x1a]
	b	.L102
.L120:
	.align	2, 0
.L119:
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gBattleWeather
	.word	gAccuracyStageRatios
	.word	gBattleMons
	.word	gBankTarget
	.word	gEnigmaBerries
.L101:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r7
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L102:
	ldr	r0, .L121
	ldr	r1, .L121+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	cmp	r5, #0x16
	bne	.L103	@cond_branch
	mov	r0, #0x64
	sub	r0, r0, r2
	mul	r0, r0, r4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L103:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x1
	cmp	r0, r4
	ble	.L104	@cond_branch
	ldr	r2, .L121+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L121+0xc
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L105	@cond_branch
	ldr	r1, .L121+0x10
	ldr	r2, [sp, #0x4]
	add	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x8
	beq	.L106	@cond_branch
	cmp	r0, #0x20
	bne	.L105	@cond_branch
.L106:
	ldr	r1, .L121+0x14
	mov	r0, #0x2
	b	.L108
.L122:
	.align	2, 0
.L121:
	.word	gStringBank
	.word	gBankTarget
	.word	gBattleMoveFlags
	.word	gBattleTypeFlags
	.word	gBattleMoves
	.word	gBattleCommunication
.L105:
	ldr	r1, .L123
	mov	r0, #0x0
.L108:
	strb	r0, [r1, #0x6]
	bl	b_wonderguard_and_levitate
.L104:
	mov	r0, #0x7
	add	r1, r6, #0
	bl	JumpIfMoveFailed
.L80:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	gBattleCommunication
.Lfe6:
	.size	 atk01_accuracycheck,.Lfe6-atk01_accuracycheck
	.align	2, 0
	.type	 atk02_attackstring,function
	.thumb_func
atk02_attackstring:
	push	{r4, r5, lr}
	ldr	r0, .L128
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L125	@cond_branch
	ldr	r4, .L128+0x4
	ldr	r0, [r4]
	mov	r1, #0xc0
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L127	@cond_branch
	ldr	r0, .L128+0x8
	ldrb	r1, [r0]
	mov	r0, #0x4
	bl	PrepareStringBattle
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	orr	r0, r0, r1
	str	r0, [r4]
.L127:
	ldr	r0, .L128+0xc
	ldr	r1, [r0]
	add	r1, r1, #0x1
	str	r1, [r0]
	ldr	r0, .L128+0x10
	strb	r5, [r0, #0x7]
.L125:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gBattleExecBuffer
	.word	gHitMarker
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.Lfe7:
	.size	 atk02_attackstring,.Lfe7-atk02_attackstring
	.align	2, 0
	.type	 atk03_ppreduce,function
	.thumb_func
atk03_ppreduce:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r6, #0x1
	ldr	r0, .L145
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB1609
	b	.L130	@long jump
.LCB1609:
	ldr	r1, .L145+0x4
	ldr	r2, .L145+0x8
	ldrb	r3, [r2]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r4, r0, #0x1f
	mov	r9, r2
	cmp	r4, #0
	bne	.L132	@cond_branch
	ldr	r2, .L145+0xc
	ldr	r0, .L145+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x20
	beq	.L134	@cond_branch
	cmp	r0, #0x20
	bgt	.L140	@cond_branch
	cmp	r0, #0x8
	beq	.L136	@cond_branch
	b	.L137
.L146:
	.align	2, 0
.L145:
	.word	gBattleExecBuffer
	.word	gSpecialStatuses
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L140:
	cmp	r0, #0x40
	beq	.L136	@cond_branch
	b	.L137
.L134:
	str	r4, [sp]
	mov	r0, #0x12
	add	r1, r3, #0
	mov	r2, #0x2e
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0x1
	b	.L132
.L136:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x10
	mov	r2, #0x2e
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r6, r0
	b	.L132
.L137:
	ldr	r1, .L147
	mov	r2, r9
	ldrb	r0, [r2]
	ldrb	r7, [r1]
	cmp	r0, r7
	beq	.L132	@cond_branch
	ldr	r2, .L147+0x4
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2e
	bne	.L132	@cond_branch
	add	r6, r6, #0x1
.L132:
	ldr	r0, .L147+0x8
	ldr	r4, [r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x4
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L141	@cond_branch
	ldr	r2, .L147+0x4
	ldr	r3, .L147+0xc
	ldr	r1, .L147+0x10
	ldrb	r5, [r1]
	mov	r0, #0x58
	mov	r8, r0
	mov	r0, r8
	mul	r0, r0, r5
	ldrb	r7, [r3]
	add	r0, r0, r7
	mov	r7, #0x24
	add	r7, r7, r2
	mov	ip, r7
	add	r0, r0, ip
	ldrb	r0, [r0]
	mov	r9, r1
	mov	sl, r2
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L141	@cond_branch
	ldr	r0, .L147+0x14
	lsl	r1, r5, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	ldrb	r1, [r7]
	add	r0, r0, r1
	mov	r1, ip
	add	r2, r0, r1
	ldrb	r0, [r2]
	cmp	r0, r6
	ble	.L142	@cond_branch
	sub	r0, r0, r6
	strb	r0, [r2]
	b	.L143
.L148:
	.align	2, 0
.L147:
	.word	gBankTarget
	.word	gBattleMons
	.word	gHitMarker
	.word	gCurrMovePos
	.word	gBankAttacker
	.word	gProtectStructs
.L142:
	strb	r4, [r2]
.L143:
	mov	r2, r9
	ldrb	r3, [r2]
	mov	r4, #0x58
	mov	r0, r3
	mul	r0, r0, r4
	mov	r1, sl
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L141	@cond_branch
	ldr	r1, .L149
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L149+0x4
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L141	@cond_branch
	ldr	r0, .L149+0x8
	strb	r3, [r0]
	ldrb	r1, [r7]
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	mov	r2, sl
	add	r2, r2, #0x24
	add	r0, r0, r2
	ldrb	r7, [r7]
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	EmitSetAttributes
	mov	r7, r9
	ldrb	r0, [r7]
	bl	MarkBufferBankForExecution
.L141:
	ldr	r2, .L149+0xc
	ldr	r0, [r2]
	ldr	r1, .L149+0x10
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L149+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L130:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBank
	.word	gHitMarker
	.word	0xfffff7ff
	.word	gBattlescriptCurrInstr
.Lfe8:
	.size	 atk03_ppreduce,.Lfe8-atk03_ppreduce
	.align	2, 0
	.type	 atk04_critcalc,function
	.thumb_func
atk04_critcalc:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L169
	ldr	r0, .L169+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0xaf
	bne	.L152	@cond_branch
	ldr	r1, .L169+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r6, [r0, #0x7]
	b	.L153
.L170:
	.align	2, 0
.L169:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gEnigmaBerries
.L152:
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L153:
	ldr	r1, .L171
	ldr	r3, .L171+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r4, .L171+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mov	r7, r1
	mul	r7, r7, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r7, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	neg	r0, r0
	asr	r5, r0, #0x1f
	mov	r0, #0x2
	and	r5, r5, r0
	ldr	r2, .L171+0xc
	ldr	r0, .L171+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	ip, r3
	cmp	r1, #0x2b
	bne	.L156	@cond_branch
	add	r5, r5, #0x1
.L156:
	add	r0, r5, #0
	cmp	r1, #0x4b
	bne	.L157	@cond_branch
	add	r0, r0, #0x1
.L157:
	cmp	r1, #0xc8
	bne	.L158	@cond_branch
	add	r0, r0, #0x1
.L158:
	add	r2, r0, #0
	cmp	r1, #0xd1
	bne	.L159	@cond_branch
	add	r2, r2, #0x1
.L159:
	mov	r1, #0x0
	cmp	r6, #0x3f
	bne	.L160	@cond_branch
	add	r0, r7, r4
	ldrh	r0, [r0]
	cmp	r0, #0x71
	bne	.L160	@cond_branch
	mov	r1, #0x1
.L160:
	lsl	r5, r1, #0x1
	mov	r3, #0x0
	cmp	r6, #0x42
	bne	.L161	@cond_branch
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, #0x53
	bne	.L161	@cond_branch
	mov	r3, #0x1
.L161:
	lsl	r1, r3, #0x1
	cmp	r6, #0x29
	bne	.L162	@cond_branch
	add	r0, r5, #0x1
	add	r0, r2, r0
	b	.L167
.L172:
	.align	2, 0
.L171:
	.word	gStringBank
	.word	gBankAttacker
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
.L162:
	add	r0, r2, r5
.L167:
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r5, r0, #0
	cmp	r5, #0x4
	bls	.L164	@cond_branch
	mov	r5, #0x4
.L164:
	ldr	r0, .L173
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r4, [r0]
	cmp	r4, #0x4
	beq	.L165	@cond_branch
	cmp	r4, #0x4b
	beq	.L165	@cond_branch
	ldr	r1, .L173+0x4
	mov	r2, ip
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L165	@cond_branch
	ldr	r0, .L173+0x8
	ldrh	r1, [r0]
	mov	r0, #0x84
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L165	@cond_branch
	bl	Random
	ldr	r2, .L173+0xc
	lsl	r1, r5, #0x1
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L165	@cond_branch
	ldr	r1, .L173+0x10
	mov	r0, #0x2
	b	.L168
.L174:
	.align	2, 0
.L173:
	.word	gBankTarget
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	gCriticalHitChance
	.word	gCritMultiplier
.L165:
	ldr	r1, .L175
	mov	r0, #0x1
.L168:
	strb	r0, [r1]
	ldr	r1, .L175+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	gCritMultiplier
	.word	gBattlescriptCurrInstr
.Lfe9:
	.size	 atk04_critcalc,.Lfe9-atk04_critcalc
	.align	2, 0
	.type	 atk05_damagecalc1,function
	.thumb_func
atk05_damagecalc1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff0
	ldr	r4, .L180
	ldr	r6, .L180+0x4
	ldrb	r0, [r6]
	bl	GetBankIdentity
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldr	r0, .L180+0x8
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L180+0xc
	add	r0, r0, r2
	ldrb	r1, [r6]
	mul	r1, r1, r4
	add	r1, r1, r2
	ldr	r2, .L180+0x10
	mov	r9, r2
	ldrh	r2, [r2]
	ldr	r4, .L180+0x14
	ldrh	r4, [r4]
	str	r4, [sp]
	ldr	r5, .L180+0x18
	ldr	r7, .L180+0x1c
	add	r4, r5, r7
	ldrb	r4, [r4]
	str	r4, [sp, #0x4]
	mov	r7, r8
	ldrb	r4, [r7]
	str	r4, [sp, #0x8]
	ldrb	r4, [r6]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldr	r4, .L180+0x20
	ldr	r1, .L180+0x24
	ldrb	r1, [r1]
	mul	r1, r1, r0
	ldr	r0, .L180+0x28
	add	r5, r5, r0
	ldrb	r0, [r5]
	mov	r3, r1
	mul	r3, r3, r0
	str	r3, [r4]
	ldr	r1, .L180+0x2c
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldr	r2, .L180+0x30
	mov	r7, r9
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0xd
	bne	.L178	@cond_branch
	lsl	r0, r3, #0x1
	str	r0, [r4]
.L178:
	ldr	r1, .L180+0x34
	ldr	r0, .L180+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L179	@cond_branch
	ldr	r4, .L180+0x20
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L179:
	ldr	r1, .L180+0x38
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	gSideAffecting
	.word	gBankTarget
	.word	gBankAttacker
	.word	gBattleMons
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gSharedMem
	.word	0x1601c
	.word	gBattleMoveDamage
	.word	gCritMultiplier
	.word	0x1601f
	.word	gStatuses3
	.word	gBattleMoves
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe10:
	.size	 atk05_damagecalc1,.Lfe10-atk05_damagecalc1
	.align	2, 0
	.globl	AI_CalcDmg
	.type	 AI_CalcDmg,function
	.thumb_func
AI_CalcDmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff0
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L185
	add	r0, r5, #0
	bl	GetBankIdentity
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x58
	mov	r0, r7
	mul	r0, r0, r1
	ldr	r2, .L185+0x4
	add	r0, r0, r2
	mul	r1, r1, r5
	add	r1, r1, r2
	ldr	r2, .L185+0x8
	mov	r9, r2
	ldrh	r2, [r2]
	ldr	r4, .L185+0xc
	mov	r8, r4
	ldrh	r4, [r4]
	str	r4, [sp]
	ldr	r6, .L185+0x10
	ldr	r4, .L185+0x14
	ldrb	r4, [r4, r6]
	str	r4, [sp, #0x4]
	str	r7, [sp, #0x8]
	str	r5, [sp, #0xc]
	bl	CalculateBaseDamage
	ldr	r4, .L185+0x18
	mov	r1, #0x0
	mov	r2, r8
	strh	r1, [r2]
	ldr	r1, .L185+0x1c
	ldrb	r1, [r1]
	mul	r1, r1, r0
	ldr	r0, .L185+0x20
	add	r6, r6, r0
	ldrb	r0, [r6]
	mov	r3, r1
	mul	r3, r3, r0
	str	r3, [r4]
	ldr	r1, .L185+0x24
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldr	r2, .L185+0x28
	mov	r6, r9
	ldrh	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0xd
	bne	.L183	@cond_branch
	lsl	r0, r3, #0x1
	str	r0, [r4]
.L183:
	ldr	r0, .L185+0x2c
	lsl	r1, r7, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L184	@cond_branch
	ldr	r4, .L185+0x18
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L184:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	gSideAffecting
	.word	gBattleMons
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gSharedMem
	.word	0x1601c
	.word	gBattleMoveDamage
	.word	gCritMultiplier
	.word	0x1601f
	.word	gStatuses3
	.word	gBattleMoves
	.word	gProtectStructs
.Lfe11:
	.size	 AI_CalcDmg,.Lfe11-AI_CalcDmg
	.align	2, 0
	.type	 ModulateDmgByType,function
	.thumb_func
ModulateDmgByType:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L204
	ldr	r0, [r5]
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L188	@cond_branch
	cmp	r4, #0
	beq	.L188	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L188:
	cmp	r4, #0x5
	beq	.L191	@cond_branch
	cmp	r4, #0x5
	bgt	.L201	@cond_branch
	cmp	r4, #0
	beq	.L190	@cond_branch
	b	.L189
.L205:
	.align	2, 0
.L204:
	.word	gBattleMoveDamage
.L201:
	cmp	r4, #0x14
	beq	.L195	@cond_branch
	b	.L189
.L190:
	ldr	r2, .L206
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	mov	r1, #0xfd
	and	r0, r0, r1
	b	.L202
.L207:
	.align	2, 0
.L206:
	.word	gBattleMoveFlags
.L191:
	ldr	r2, .L208
	ldr	r0, .L208+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L189	@cond_branch
	ldr	r2, .L208+0x8
	ldrb	r1, [r2]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L189	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L193	@cond_branch
	mov	r0, #0xfd
	and	r0, r0, r1
	b	.L202
.L209:
	.align	2, 0
.L208:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMoveFlags
.L193:
	mov	r0, #0x4
	b	.L203
.L195:
	ldr	r2, .L210
	ldr	r0, .L210+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L189	@cond_branch
	ldr	r2, .L210+0x8
	ldrb	r1, [r2]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L189	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L197	@cond_branch
	mov	r0, #0xfb
	and	r0, r0, r1
	b	.L202
.L211:
	.align	2, 0
.L210:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMoveFlags
.L197:
	mov	r0, #0x2
.L203:
	orr	r0, r0, r1
.L202:
	strb	r0, [r2]
.L189:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 ModulateDmgByType,.Lfe12-ModulateDmgByType
	.align	2, 0
	.type	 atk06_typecalc,function
	.thumb_func
atk06_typecalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	mov	r3, #0x0
	ldr	r1, .L234
	ldrh	r0, [r1]
	cmp	r0, #0xa5
	bne	.LCB2555
	b	.L213	@long jump
.LCB2555:
	ldr	r0, .L234+0x4
	ldr	r2, .L234+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L214	@cond_branch
	mov	r1, #0x3f
	mov	r8, r1
	mov	r2, r8
	and	r2, r2, r0
	mov	r8, r2
	b	.L215
.L235:
	.align	2, 0
.L234:
	.word	gCurrentMove
	.word	gSharedMem
	.word	0x1601c
.L214:
	ldr	r2, .L236
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r8, r0
.L215:
	ldr	r2, .L236+0x4
	ldr	r0, .L236+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	add	r5, r2, #0
	cmp	r0, r8
	beq	.L217	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L216	@cond_branch
.L217:
	ldr	r4, .L236+0xc
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0xa
	str	r3, [sp, #0x4]
	bl	__divsi3
	str	r0, [r4]
	ldr	r3, [sp, #0x4]
.L216:
	ldr	r2, .L236+0x10
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r4, r2, #0
	cmp	r0, #0x1a
	bne	.L218	@cond_branch
	mov	r1, r8
	cmp	r1, #0x4
	bne	.L218	@cond_branch
	ldr	r3, .L236+0x14
	strb	r0, [r3]
	ldr	r2, .L236+0x18
	ldrb	r0, [r2]
	mov	r1, #0x9
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L236+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L236+0x20
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r0, .L236+0x24
	mov	r2, r8
	strb	r2, [r0, #0x6]
	ldrb	r0, [r4]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
	b	.L219
.L237:
	.align	2, 0
.L236:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gBankTarget
	.word	gLastUsedAbility
	.word	gBattleMoveFlags
	.word	gMoveHitWith
	.word	gUnknown_02024C44
	.word	gBattleCommunication
.L218:
	ldr	r1, .L238
	add	r0, r3, r1
	ldrb	r0, [r0]
	add	r2, r1, #0
	b	.L233
.L239:
	.align	2, 0
.L238:
	.word	gTypeEffectiveness
.L224:
	add	r3, r3, #0x3
	b	.L220
.L223:
	ldr	r5, .L240
	add	r0, r3, r5
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L225	@cond_branch
	add	r1, r3, #0x1
	add	r1, r1, r5
	ldr	r2, .L240+0x4
	ldr	r7, .L240+0x8
	ldrb	r0, [r7]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r0, r0, r2
	add	r0, r0, #0x21
	ldrb	r4, [r1]
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L227	@cond_branch
	add	r0, r3, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	ModulateDmgByType
	ldr	r3, [sp, #0x4]
	ldr	r2, [sp]
.L227:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r1, [r1]
	cmp	r4, r1
	bne	.L225	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L225	@cond_branch
	add	r0, r3, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	str	r3, [sp, #0x4]
	bl	ModulateDmgByType
	ldr	r3, [sp, #0x4]
.L225:
	add	r3, r3, #0x3
	ldr	r5, .L240+0x4
	ldr	r4, .L240+0x8
	ldr	r2, .L240
.L220:
	add	r0, r3, r2
	ldrb	r0, [r0]
.L233:
	cmp	r0, #0xff
	beq	.L219	@cond_branch
	cmp	r0, #0xfe
	bne	.L223	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L224	@cond_branch
.L219:
	ldr	r2, .L240+0x4
	ldr	r5, .L240+0x8
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r6, [r0]
	cmp	r6, #0x19
	bne	.L230	@cond_branch
	ldr	r0, .L240+0xc
	ldrb	r0, [r0]
	ldr	r7, .L240+0x10
	ldrh	r1, [r7]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L230	@cond_branch
	ldr	r1, .L240+0x14
	mov	r8, r1
	ldrb	r4, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L231	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r4
	cmp	r0, #0x6
	bne	.L230	@cond_branch
.L231:
	ldr	r2, .L240+0x18
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L230	@cond_branch
	ldr	r3, .L240+0x1c
	strb	r6, [r3]
	mov	r0, #0x1
	orr	r0, r0, r4
	mov	r2, r8
	strb	r0, [r2]
	ldr	r1, .L240+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L240+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r1, .L240+0x28
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	ldrb	r0, [r5]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
.L230:
	ldr	r0, .L240+0x14
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L213	@cond_branch
	ldr	r2, .L240+0x2c
	ldr	r0, .L240+0xc
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
.L213:
	ldr	r1, .L240+0x30
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	gTypeEffectiveness
	.word	gBattleMons
	.word	gBankTarget
	.word	gBankAttacker
	.word	gCurrentMove
	.word	gBattleMoveFlags
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gMoveHitWith
	.word	gUnknown_02024C44
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe13:
	.size	 atk06_typecalc,.Lfe13-atk06_typecalc
	.align	2, 0
	.type	 b_wonderguard_and_levitate,function
	.thumb_func
b_wonderguard_and_levitate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L264
	ldrh	r1, [r0]
	mov	r9, r0
	cmp	r1, #0xa5
	bne	.LCB2950
	b	.L242	@long jump
.LCB2950:
	ldr	r2, .L264+0x4
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB2961
	b	.L242	@long jump
.LCB2961:
	ldr	r0, .L264+0x8
	ldr	r2, .L264+0xc
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L245	@cond_branch
	mov	r1, #0x3f
	mov	ip, r1
	mov	r2, ip
	and	r2, r2, r0
	mov	ip, r2
	b	.L246
.L265:
	.align	2, 0
.L264:
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gSharedMem
	.word	0x1601c
.L245:
	ldrb	r1, [r1, #0x2]
	mov	ip, r1
.L246:
	ldr	r2, .L266
	ldr	r3, .L266+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	add	r7, r2, #0
	mov	r8, r3
	cmp	r1, #0x1a
	bne	.L247	@cond_branch
	mov	r0, ip
	cmp	r0, #0x4
	bne	.L247	@cond_branch
	ldr	r0, .L266+0x8
	strb	r1, [r0]
	ldr	r0, .L266+0xc
	mov	r1, ip
	strb	r1, [r0, #0x6]
	ldrb	r0, [r3]
	mov	r1, #0x1a
	bl	RecordAbilityBattle
	b	.L242
.L267:
	.align	2, 0
.L266:
	.word	gBattleMons
	.word	gBankTarget
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L247:
	ldr	r1, .L268
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r4, r1, #0
	b	.L263
.L269:
	.align	2, 0
.L268:
	.word	gTypeEffectiveness
.L251:
	add	r0, r5, r4
	ldrb	r0, [r0]
	cmp	r0, ip
	beq	.LCB3056
	b	.L253	@long jump
.LCB3056:
	add	r2, r5, #0x1
	add	r3, r2, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r3]
	add	r3, r2, #0
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L254	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L254	@cond_branch
	ldr	r2, .L270
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L270+0x4
	ldr	r0, .L270+0x8
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	add	r2, r2, r1
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
.L254:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L255	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L255	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L255	@cond_branch
	ldr	r2, .L270
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L270+0x4
	ldr	r0, .L270+0x8
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	add	r2, r2, r1
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
.L255:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r2]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L256	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L256	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
.L256:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L257	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L257	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L257	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
.L257:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r2]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L258	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L258	@cond_branch
	mov	r0, #0x2
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L258:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L253	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L253	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L253	@cond_branch
	mov	r0, #0x2
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L253:
	add	r5, r5, #0x3
	add	r0, r5, r4
	ldrb	r0, [r0]
.L263:
	cmp	r0, #0xff
	beq	.L249	@cond_branch
	cmp	r0, #0xfe
	beq	.LCB3306
	b	.L251	@long jump
.LCB3306:
	mov	r2, r8
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L253	@cond_branch
.L249:
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r4, [r0]
	cmp	r4, #0x19
	bne	.L242	@cond_branch
	ldr	r0, .L270+0x8
	ldrb	r0, [r0]
	mov	r2, r9
	ldrh	r1, [r2]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L242	@cond_branch
	mov	r0, #0x3
	and	r6, r6, r0
	cmp	r6, #0x1
	beq	.L242	@cond_branch
	ldr	r2, .L270+0xc
	mov	r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L242	@cond_branch
	ldr	r0, .L270+0x10
	strb	r4, [r0]
	ldr	r1, .L270+0x14
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x19
	bl	RecordAbilityBattle
.L242:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gBattleMoveFlags
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gBattleCommunication
.Lfe14:
	.size	 b_wonderguard_and_levitate,.Lfe14-b_wonderguard_and_levitate
	.align	2, 0
	.type	 ModulateDmgByType2,function
	.thumb_func
ModulateDmgByType2:
	push	{r4, r5, r6, r7, lr}
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r7, .L289
	ldr	r0, [r7]
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r7]
	cmp	r0, #0
	bne	.L273	@cond_branch
	cmp	r4, #0
	beq	.L273	@cond_branch
	mov	r0, #0x1
	str	r0, [r7]
.L273:
	cmp	r4, #0x5
	beq	.L276	@cond_branch
	cmp	r4, #0x5
	bgt	.L286	@cond_branch
	cmp	r4, #0
	beq	.L275	@cond_branch
	b	.L274
.L290:
	.align	2, 0
.L289:
	.word	gBattleMoveDamage
.L286:
	cmp	r4, #0x14
	beq	.L280	@cond_branch
	b	.L274
.L275:
	ldrb	r0, [r6]
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	mov	r1, #0xfd
	and	r0, r0, r1
	b	.L287
.L276:
	ldr	r0, .L291
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L274	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L274	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L278	@cond_branch
	mov	r0, #0xfd
	and	r0, r0, r1
	b	.L287
.L292:
	.align	2, 0
.L291:
	.word	gBattleMoves
.L278:
	mov	r0, #0x4
	b	.L288
.L280:
	ldr	r0, .L293
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L274	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L274	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L282	@cond_branch
	mov	r0, #0xfb
	and	r0, r0, r1
	b	.L287
.L294:
	.align	2, 0
.L293:
	.word	gBattleMoves
.L282:
	mov	r0, #0x2
.L288:
	orr	r0, r0, r1
.L287:
	strb	r0, [r6]
.L274:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ModulateDmgByType2,.Lfe15-ModulateDmgByType2
	.align	2, 0
	.globl	TypeCalc
	.type	 TypeCalc,function
	.thumb_func
TypeCalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffec
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	mov	r7, #0x0
	mov	r0, sp
	strb	r7, [r0]
	mov	r0, sl
	cmp	r0, #0xa5
	bne	.L296	@cond_branch
	mov	r0, #0x0
	b	.L313
.L296:
	ldr	r1, .L315
	mov	r3, sl
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	str	r0, [sp, #0x8]
	ldr	r1, .L315+0x4
	mov	r0, #0x58
	ldr	r3, [sp, #0x4]
	mul	r0, r0, r3
	add	r3, r0, r1
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	str	r2, [sp, #0xc]
	add	r5, r1, #0
	ldr	r1, [sp, #0x8]
	cmp	r0, r1
	beq	.L298	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	bne	.L297	@cond_branch
.L298:
	ldr	r4, .L315+0x8
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L297:
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	bne	.L299	@cond_branch
	ldr	r3, [sp, #0x8]
	cmp	r3, #0x4
	bne	.L299	@cond_branch
	mov	r1, #0x9
	mov	r0, sp
	ldrb	r0, [r0]
	orr	r0, r0, r1
	mov	r1, sp
	strb	r0, [r1]
	b	.L300
.L316:
	.align	2, 0
.L315:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattleMoveDamage
.L299:
	ldr	r1, .L317
	add	r0, r7, r1
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0xff
	beq	.L300	@cond_branch
	cmp	r0, #0xfe
	bne	.L304	@cond_branch
	mov	r0, #0x58
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	b	.L314
.L318:
	.align	2, 0
.L317:
	.word	gTypeEffectiveness
.L305:
	add	r7, r7, #0x3
	b	.L301
.L304:
	ldr	r6, .L319
	add	r0, r7, r6
	ldrb	r0, [r0]
	ldr	r2, [sp, #0x8]
	cmp	r0, r2
	bne	.L306	@cond_branch
	add	r1, r7, #0x1
	add	r1, r1, r6
	ldr	r3, .L319+0x4
	mov	r8, r3
	mov	r3, #0x58
	mov	r0, r9
	mul	r0, r0, r3
	mov	r2, r8
	add	r5, r0, r2
	add	r0, r5, #0
	add	r0, r0, #0x21
	ldrb	r4, [r1]
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L308	@cond_branch
	add	r0, r7, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r1, sl
	mov	r2, sp
	str	r3, [sp, #0x10]
	bl	ModulateDmgByType2
	ldr	r3, [sp, #0x10]
.L308:
	add	r0, r5, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L306	@cond_branch
	ldr	r0, .L319+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L306	@cond_branch
	add	r0, r7, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r1, sl
	mov	r2, sp
	bl	ModulateDmgByType2
.L306:
	add	r7, r7, #0x3
	ldr	r5, .L319+0x4
	ldr	r2, .L319
.L301:
	add	r0, r7, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L300	@cond_branch
	cmp	r0, #0xfe
	bne	.L304	@cond_branch
	mov	r0, #0x58
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
.L314:
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L305	@cond_branch
.L300:
	mov	r0, #0x58
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x19
	bne	.L311	@cond_branch
	mov	r0, sp
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L311	@cond_branch
	ldr	r0, [sp, #0x4]
	mov	r1, sl
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L311	@cond_branch
	mov	r0, sp
	ldrb	r3, [r0]
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L312	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r3
	cmp	r0, #0x6
	bne	.L311	@cond_branch
.L312:
	ldr	r0, .L319+0xc
	ldr	r1, [sp, #0xc]
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L311	@cond_branch
	mov	r0, sp
	mov	r1, #0x1
	orr	r1, r1, r3
	strb	r1, [r0]
.L311:
	mov	r0, sp
	ldrb	r0, [r0]
.L313:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L320:
	.align	2, 0
.L319:
	.word	gTypeEffectiveness
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattleMoves
.Lfe16:
	.size	 TypeCalc,.Lfe16-TypeCalc
	.align	2, 0
	.globl	AI_TypeCalc
	.type	 AI_TypeCalc,function
	.thumb_func
AI_TypeCalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x4]
	mov	r7, #0x0
	mov	r0, sp
	strb	r7, [r0]
	ldr	r2, .L336
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x6]
	str	r1, [sp, #0x8]
	ldrb	r0, [r0, #0x7]
	mov	r8, r0
	cmp	r6, #0xa5
	bne	.L322	@cond_branch
	mov	r0, #0x0
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	gBaseStats
.L322:
	ldr	r2, .L338
	lsl	r1, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r9, r0
	str	r1, [sp, #0xc]
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x1a
	bne	.L323	@cond_branch
	cmp	r0, #0x4
	bne	.L323	@cond_branch
	mov	r1, #0x9
	mov	r0, sp
	strb	r1, [r0]
	b	.L324
.L339:
	.align	2, 0
.L338:
	.word	gBattleMoves
.L323:
	ldr	r0, .L340
	mov	sl, r0
	add	r1, r7, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L324	@cond_branch
	add	r4, r1, #0
.L327:
	ldrb	r0, [r4]
	cmp	r0, #0xfe
	beq	.L329	@cond_branch
	cmp	r0, r9
	bne	.L329	@cond_branch
	ldrb	r5, [r4, #0x1]
	ldr	r1, [sp, #0x8]
	cmp	r5, r1
	bne	.L330	@cond_branch
	ldrb	r0, [r4, #0x2]
	add	r1, r6, #0
	mov	r2, sp
	bl	ModulateDmgByType2
.L330:
	cmp	r5, r8
	bne	.L329	@cond_branch
	ldr	r0, .L340+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r3, .L340+0x8
	add	r0, r0, r3
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r8
	beq	.L329	@cond_branch
	ldrb	r0, [r4, #0x2]
	add	r1, r6, #0
	mov	r2, sp
	bl	ModulateDmgByType2
.L329:
	add	r4, r4, #0x3
	add	r7, r7, #0x3
	mov	r1, sl
	add	r0, r7, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L327	@cond_branch
.L324:
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x19
	bne	.L333	@cond_branch
	mov	r0, sp
	ldrb	r2, [r0]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L334	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r2
	cmp	r0, #0x6
	bne	.L333	@cond_branch
.L334:
	ldr	r0, .L340+0xc
	ldr	r3, [sp, #0xc]
	add	r1, r3, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L333	@cond_branch
	mov	r0, sp
	mov	r1, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L333:
	mov	r0, sp
	ldrb	r0, [r0]
.L335:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L341:
	.align	2, 0
.L340:
	.word	gTypeEffectiveness
	.word	gBankTarget
	.word	gBattleMons
	.word	gBattleMoves
.Lfe17:
	.size	 AI_TypeCalc,.Lfe17-AI_TypeCalc
	.align	2, 0
	.globl	Unused_ApplyRandomDmgMultiplier
	.type	 Unused_ApplyRandomDmgMultiplier,function
	.thumb_func
Unused_ApplyRandomDmgMultiplier:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L349
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L348	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L348	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L348:
	pop	{r4}
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	gBattleMoveDamage
.Lfe18:
	.size	 Unused_ApplyRandomDmgMultiplier,.Lfe18-Unused_ApplyRandomDmgMultiplier
	.align	2, 0
	.type	 atk07_dmg_adjustment,function
	.thumb_func
atk07_dmg_adjustment:
	push	{r4, r5, r6, r7, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L364
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L354	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L354	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L354:
	ldr	r7, .L364+0x4
	ldr	r6, .L364+0x8
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L355	@cond_branch
	ldr	r1, .L364+0xc
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L356
.L365:
	.align	2, 0
.L364:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBankTarget
	.word	gEnigmaBerries
.L355:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L356:
	ldr	r1, .L366
	ldr	r5, .L366+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L357	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L357	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemBattle
	ldr	r2, .L366+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L357:
	ldr	r2, .L366+0xc
	ldr	r3, .L366+0x4
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	add	r5, r2, #0
	cmp	r1, #0
	bne	.L359	@cond_branch
	ldr	r2, .L366+0x10
	ldr	r0, .L366+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x65
	beq	.L360	@cond_branch
	ldr	r0, .L366+0x18
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L360	@cond_branch
	ldr	r0, .L366+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L359	@cond_branch
.L360:
	ldrb	r0, [r3]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L366+0x1c
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L359	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldr	r1, .L366+0x18
	ldrb	r3, [r3]
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L362	@cond_branch
	ldr	r0, .L366+0x20
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L359
.L367:
	.align	2, 0
.L366:
	.word	gStringBank
	.word	gBankTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gBattleMoveFlags
.L362:
	ldr	r0, .L368
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L359	@cond_branch
	ldr	r2, .L368+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L368+0x8
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L359:
	ldr	r1, .L368+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gSpecialStatuses
	.word	gBattleMoveFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe19:
	.size	 atk07_dmg_adjustment,.Lfe19-atk07_dmg_adjustment
	.align	2, 0
	.type	 atk08_dmg_adjustment2,function
	.thumb_func
atk08_dmg_adjustment2:
	push	{r4, r5, r6, r7, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L383
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L373	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L373	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L373:
	ldr	r7, .L383+0x4
	ldr	r6, .L383+0x8
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L374	@cond_branch
	ldr	r1, .L383+0xc
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L375
.L384:
	.align	2, 0
.L383:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBankTarget
	.word	gEnigmaBerries
.L374:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L375:
	ldr	r1, .L385
	ldr	r5, .L385+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L376	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L376	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemBattle
	ldr	r2, .L385+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L376:
	ldr	r4, .L385+0xc
	ldr	r6, .L385+0x4
	ldrb	r2, [r6]
	mov	r7, #0x58
	mov	r3, r2
	mul	r3, r3, r7
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L378	@cond_branch
	ldr	r5, .L385+0x10
	lsl	r0, r2, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L379	@cond_branch
	ldr	r0, .L385+0x8
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L378	@cond_branch
.L379:
	add	r0, r3, r4
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L385+0x14
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L378	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldrb	r3, [r6]
	lsl	r0, r3, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L381	@cond_branch
	ldr	r0, .L385+0x18
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L378
.L386:
	.align	2, 0
.L385:
	.word	gStringBank
	.word	gBankTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gBattleMoveFlags
.L381:
	ldr	r0, .L387
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L378	@cond_branch
	ldr	r2, .L387+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L387+0x8
	mov	r0, r3
	mul	r0, r0, r7
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L378:
	ldr	r1, .L387+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L388:
	.align	2, 0
.L387:
	.word	gSpecialStatuses
	.word	gBattleMoveFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe20:
	.size	 atk08_dmg_adjustment2,.Lfe20-atk08_dmg_adjustment2
	.align	2, 0
	.type	 atk09_attackanimation,function
	.thumb_func
atk09_attackanimation:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffff4
	ldr	r0, .L398
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB4605
	b	.L389	@long jump
.LCB4605:
	ldr	r0, .L398+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	ldr	r3, .L398+0x8
	cmp	r0, #0
	beq	.L391	@cond_branch
	ldrh	r0, [r3]
	cmp	r0, #0x90
	beq	.L391	@cond_branch
	cmp	r0, #0xa4
	beq	.L391	@cond_branch
	ldr	r4, .L398+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	b_movescr_stack_push
	ldr	r0, .L398+0x10
	str	r0, [r4]
	ldr	r1, .L398+0x14
	ldr	r0, .L398+0x18
	add	r2, r1, r0
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	ldr	r2, .L398+0x1c
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L389
.L399:
	.align	2, 0
.L398:
	.word	gBattleExecBuffer
	.word	gHitMarker
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_Pausex20
	.word	gSharedMem
	.word	0x16002
	.word	0x160a1
.L391:
	ldr	r2, .L400
	ldrh	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L394	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L394	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L393	@cond_branch
.L394:
	ldr	r0, .L400+0x4
	ldr	r1, .L400+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L397	@cond_branch
.L393:
	ldr	r0, .L400+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L395	@cond_branch
	ldr	r1, .L400+0x10
	ldr	r2, .L400+0x14
	mov	r9, r2
	ldrb	r0, [r2]
	strb	r0, [r1]
	ldrh	r1, [r3]
	ldr	r6, .L400+0x4
	ldr	r0, .L400+0x18
	add	r0, r0, r6
	mov	r8, r0
	ldrb	r2, [r0]
	ldr	r0, .L400+0x1c
	ldrh	r3, [r0]
	ldr	r0, .L400+0x20
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r5, .L400+0x24
	mov	r0, r9
	ldrb	r4, [r0]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	str	r0, [sp, #0x4]
	mov	r0, r9
	ldrb	r4, [r0]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r4, .L400+0x28
	add	r0, r0, r4
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	bl	EmitMoveAnimation
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L400+0x8
	add	r6, r6, r2
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	mov	r1, r9
	ldrb	r0, [r1]
	bl	MarkBufferBankForExecution
.L397:
	ldr	r1, .L400+0x2c
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	b	.L389
.L401:
	.align	2, 0
.L400:
	.word	gBattleMoves
	.word	gSharedMem
	.word	0x160a1
	.word	gBattleMoveFlags
	.word	gActiveBank
	.word	gBankAttacker
	.word	0x16002
	.word	gBattleMovePower
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L395:
	ldr	r4, .L402
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	b_movescr_stack_push
	ldr	r0, .L402+0x4
	str	r0, [r4]
.L389:
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L403:
	.align	2, 0
.L402:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_Pausex20
.Lfe21:
	.size	 atk09_attackanimation,.Lfe21-atk09_attackanimation
	.align	2, 0
	.type	 atk0A_waitanimation,function
	.thumb_func
atk0A_waitanimation:
	push	{lr}
	ldr	r0, .L406
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L405	@cond_branch
	ldr	r1, .L406+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L405:
	pop	{r0}
	bx	r0
.L407:
	.align	2, 0
.L406:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
.Lfe22:
	.size	 atk0A_waitanimation,.Lfe22-atk0A_waitanimation
	.align	2, 0
	.type	 atk0B_healthbarupdate,function
	.thumb_func
atk0B_healthbarupdate:
	push	{r4, r5, lr}
	ldr	r0, .L414
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L408	@cond_branch
	ldr	r0, .L414+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L411	@cond_branch
	ldr	r0, .L414+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r2, .L414+0xc
	strb	r0, [r2]
	ldr	r1, .L414+0x10
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L412	@cond_branch
	ldr	r0, .L414+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	beq	.L412	@cond_branch
	ldr	r0, .L414+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L412	@cond_branch
	mov	r0, #0x80
	add	r1, r2, #0
	bl	PrepareStringBattle
	b	.L411
.L415:
	.align	2, 0
.L414:
	.word	gBattleExecBuffer
	.word	gBattleMoveFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
	.word	gDisableStructs
	.word	gHitMarker
.L412:
	ldr	r5, .L416
	ldrh	r1, [r5]
	mov	r0, #0x0
	bl	EmitHealthBarUpdate
	ldr	r4, .L416+0x4
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L411	@cond_branch
	ldr	r0, [r5]
	cmp	r0, #0
	ble	.L411	@cond_branch
	ldr	r0, .L416+0x8
	ldrb	r1, [r0, #0x5]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L411:
	ldr	r1, .L416+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L408:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L417:
	.align	2, 0
.L416:
	.word	gBattleMoveDamage
	.word	gActiveBank
	.word	gBattleResults
	.word	gBattlescriptCurrInstr
.Lfe23:
	.size	 atk0B_healthbarupdate,.Lfe23-atk0B_healthbarupdate
	.align	2, 0
	.type	 atk0C_datahpupdate,function
	.thumb_func
atk0C_datahpupdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L453
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB4962
	b	.L418	@long jump
.LCB4962:
	ldr	r0, .L453+0x4
	ldr	r1, .L453+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	cmp	r1, #0
	beq	.L420	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L420	@cond_branch
	mov	r6, #0x3f
	and	r6, r6, r1
	b	.L421
.L454:
	.align	2, 0
.L453:
	.word	gBattleExecBuffer
	.word	gSharedMem
	.word	0x1601c
.L420:
	ldr	r2, .L455
	ldr	r0, .L455+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r6, [r0, #0x2]
.L421:
	ldr	r0, .L455+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5009
	b	.L422	@long jump
.LCB5009:
	ldr	r0, .L455+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r7, .L455+0x10
	strb	r0, [r7]
	ldr	r1, .L455+0x14
	ldrb	r2, [r7]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L423	@cond_branch
	ldr	r0, .L455+0x18
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r4, r1, r0
	ldrb	r1, [r4, #0xa]
	mov	ip, r0
	cmp	r1, #0
	beq	.L423	@cond_branch
	ldr	r0, .L455+0x1c
	ldr	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L423	@cond_branch
	add	r5, r1, #0
	ldr	r6, .L455+0x20
	ldr	r4, [r6]
	cmp	r5, r4
	blt	.L424	@cond_branch
	ldr	r0, .L455+0x24
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L425	@cond_branch
	str	r4, [r1]
.L425:
	ldrb	r0, [r7]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r2, [r6]
	ldrb	r0, [r1, #0xa]
	sub	r0, r0, r2
	strb	r0, [r1, #0xa]
	ldr	r1, .L455+0x28
	ldr	r0, [r6]
	str	r0, [r1]
	b	.L426
.L456:
	.align	2, 0
.L455:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMoveFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMoveDamage
	.word	gSpecialStatuses
	.word	gHP_dealt
.L424:
	ldr	r0, .L457
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L427	@cond_branch
	str	r5, [r1]
.L427:
	ldr	r2, .L457+0x4
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0xa]
	str	r0, [r2]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	strb	r3, [r0, #0xa]
.L426:
	ldr	r0, .L457+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.LCB5136
	b	.L447	@long jump
.LCB5136:
	ldr	r4, .L457+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	bl	b_movescr_stack_push_cursor
	ldr	r0, .L457+0x10
	str	r0, [r4]
	b	.L418
.L458:
	.align	2, 0
.L457:
	.word	gSpecialStatuses
	.word	gHP_dealt
	.word	gActiveBank
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SubstituteFade
.L423:
	ldr	r0, .L459
	ldr	r2, [r0]
	ldr	r1, .L459+0x4
	and	r2, r2, r1
	str	r2, [r0]
	ldr	r1, .L459+0x8
	ldr	r5, [r1]
	mov	ip, r0
	add	r7, r1, #0
	cmp	r5, #0
	bge	.L430	@cond_branch
	ldr	r4, .L459+0xc
	ldr	r2, .L459+0x10
	ldrb	r0, [r2]
	mov	r3, #0x58
	mov	r1, r0
	mul	r1, r1, r3
	add	r1, r1, r4
	ldrh	r0, [r1, #0x28]
	sub	r0, r0, r5
	strh	r0, [r1, #0x28]
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r1, r0, r4
	ldrh	r3, [r1, #0x2c]
	ldrh	r0, [r1, #0x28]
	add	r5, r2, #0
	cmp	r0, r3
	bhi	.LCB5191
	b	.L432	@long jump
.LCB5191:
	strh	r3, [r1, #0x28]
	b	.L432
.L460:
	.align	2, 0
.L459:
	.word	gHitMarker
	.word	0xfffffeff
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gActiveBank
.L430:
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L433	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	mov	r0, ip
	str	r2, [r0]
	ldr	r5, .L461
	b	.L434
.L462:
	.align	2, 0
.L461:
	.word	gActiveBank
.L433:
	ldr	r0, .L463
	ldr	r2, .L463+0x4
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r0, r0, r5
	str	r0, [r1]
	ldr	r0, .L463+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	add	r5, r2, #0
	cmp	r0, #0
	bne	.L435	@cond_branch
	ldr	r1, .L463+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldr	r1, .L463+0x10
	b	.L450
.L464:
	.align	2, 0
.L463:
	.word	gTakenDmg
	.word	gActiveBank
	.word	gBattlescriptCurrInstr
	.word	gTakenDmgBanks
	.word	gBankAttacker
.L435:
	ldr	r1, .L465
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldr	r1, .L465+0x4
.L450:
	ldrb	r1, [r1]
	strb	r1, [r0]
.L434:
	ldr	r4, .L465+0x8
	ldrb	r0, [r5]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r0, r4
	ldrh	r0, [r2, #0x28]
	ldr	r1, [r7]
	cmp	r0, r1
	ble	.L437	@cond_branch
	sub	r0, r0, r1
	strh	r0, [r2, #0x28]
	ldr	r0, .L465+0xc
	str	r1, [r0]
	add	r7, r0, #0
	b	.L438
.L466:
	.align	2, 0
.L465:
	.word	gTakenDmgBanks
	.word	gBankTarget
	.word	gBattleMons
	.word	gHP_dealt
.L437:
	ldr	r2, .L467
	str	r0, [r2]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x28]
	add	r7, r2, #0
.L438:
	ldr	r2, .L467+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r2, #0x4
	add	r3, r0, r1
	ldr	r0, [r3]
	add	r4, r2, #0
	cmp	r0, #0
	bne	.L439	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L439	@cond_branch
	ldr	r0, [r7]
	str	r0, [r3]
.L439:
	cmp	r6, #0x8
	bhi	.L449	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L440	@cond_branch
	ldr	r0, .L467+0x8
	ldrh	r0, [r0]
	cmp	r0, #0xdc
	beq	.L440	@cond_branch
	ldr	r3, .L467+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r3, #0x4
	add	r0, r0, r1
	ldr	r2, [r7]
	str	r2, [r0]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, .L467+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L441	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L467+0x14
	b	.L451
.L468:
	.align	2, 0
.L467:
	.word	gHP_dealt
	.word	gSpecialStatuses
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	gBankAttacker
.L441:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L469
.L451:
	ldrb	r1, [r2]
	strb	r1, [r0, #0xc]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r2]
	strb	r1, [r0, #0x10]
	b	.L432
.L470:
	.align	2, 0
.L469:
	.word	gBankTarget
.L440:
	cmp	r6, #0x8
	bls	.L432	@cond_branch
.L449:
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L432	@cond_branch
	ldr	r3, .L471
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldr	r2, [r7]
	str	r2, [r0]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, .L471+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L445	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L471+0x8
	b	.L452
.L472:
	.align	2, 0
.L471:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	gBankAttacker
.L445:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L473
.L452:
	ldrb	r1, [r2]
	strb	r1, [r0, #0xd]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r2]
	strb	r1, [r0, #0x11]
.L432:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r1, .L473+0x4
	and	r0, r0, r1
	mov	r1, ip
	str	r0, [r1]
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L473+0x8
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r2, #0x0
	mov	r3, #0x2
	bl	EmitSetAttributes
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	b	.L447
.L474:
	.align	2, 0
.L473:
	.word	gBankTarget
	.word	0xffefffff
	.word	gBattleMons+0x28
.L422:
	ldr	r0, .L475
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r1, .L475+0x4
	strb	r0, [r1]
	ldr	r2, .L475+0x8
	ldrb	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r1, r0, r2
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L447	@cond_branch
	ldr	r0, .L475+0xc
	str	r0, [r1]
.L447:
	ldr	r1, .L475
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L418:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gSpecialStatuses
	.word	0xffff
.Lfe24:
	.size	 atk0C_datahpupdate,.Lfe24-atk0C_datahpupdate
	.align	2, 0
	.type	 atk0D_critmessage,function
	.thumb_func
atk0D_critmessage:
	push	{lr}
	ldr	r0, .L480
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L478	@cond_branch
	ldr	r0, .L480+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L479	@cond_branch
	ldr	r0, .L480+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L479	@cond_branch
	ldr	r0, .L480+0xc
	ldrb	r1, [r0]
	mov	r0, #0xd9
	bl	PrepareStringBattle
	ldr	r1, .L480+0x10
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
.L479:
	ldr	r1, .L480+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L478:
	pop	{r0}
	bx	r0
.L481:
	.align	2, 0
.L480:
	.word	gBattleExecBuffer
	.word	gCritMultiplier
	.word	gBattleMoveFlags
	.word	gBankAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe25:
	.size	 atk0D_critmessage,.Lfe25-atk0D_critmessage
	.align	2, 0
	.type	 atk0E_effectiveness_sound,function
	.thumb_func
atk0E_effectiveness_sound:
	push	{r4, lr}
	ldr	r0, .L505
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L482	@cond_branch
	ldr	r4, .L505+0x4
	ldr	r0, .L505+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L505+0xc
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L484	@cond_branch
	mov	r0, #0xfe
	and	r0, r0, r2
	cmp	r0, #0x10
	beq	.L493	@cond_branch
	cmp	r0, #0x10
	bgt	.L500	@cond_branch
	cmp	r0, #0x4
	beq	.L487	@cond_branch
	cmp	r0, #0x4
	bgt	.L501	@cond_branch
	cmp	r0, #0x2
	beq	.L486	@cond_branch
	b	.L493
.L506:
	.align	2, 0
.L505:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gBankTarget
	.word	gBattleMoveFlags
.L501:
	cmp	r0, #0x8
	beq	.L484	@cond_branch
	b	.L493
.L500:
	cmp	r0, #0x40
	beq	.L493	@cond_branch
	cmp	r0, #0x40
	bgt	.L493	@cond_branch
	cmp	r0, #0x20
	beq	.L484	@cond_branch
	b	.L493
.L486:
	mov	r0, #0x0
	mov	r1, #0xe
	b	.L503
.L487:
	mov	r0, #0x0
	mov	r1, #0xc
.L503:
	bl	EmitEffectivenessSound
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	b	.L484
.L493:
	ldrb	r1, [r1]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L494	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xe
	b	.L504
.L494:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L496	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xc
.L504:
	bl	EmitEffectivenessSound
	ldr	r0, .L507
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	b	.L484
.L508:
	.align	2, 0
.L507:
	.word	gActiveBank
.L496:
	mov	r0, #0x28
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L484	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xd
	bl	EmitEffectivenessSound
	ldr	r0, .L509
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
.L484:
	ldr	r1, .L509+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L482:
	pop	{r4}
	pop	{r0}
	bx	r0
.L510:
	.align	2, 0
.L509:
	.word	gActiveBank
	.word	gBattlescriptCurrInstr
.Lfe26:
	.size	 atk0E_effectiveness_sound,.Lfe26-atk0E_effectiveness_sound
	.align	2, 0
	.type	 atk0F_resultmessage,function
	.thumb_func
atk0F_resultmessage:
	push	{r4, r5, r6, r7, lr}
	mov	r3, #0x0
	ldr	r0, .L544
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB5782
	b	.L511	@long jump
.LCB5782:
	ldr	r1, .L544+0x4
	ldrb	r2, [r1]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r2
	add	r6, r1, #0
	ldr	r7, .L544+0x8
	cmp	r0, #0
	beq	.L513	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L514	@cond_branch
	ldrb	r0, [r7, #0x6]
	cmp	r0, #0x2
	bls	.L513	@cond_branch
.L514:
	ldr	r1, .L544+0xc
	ldrb	r0, [r7, #0x6]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r3, [r0]
	strb	r4, [r7, #0x7]
	b	.L515
.L545:
	.align	2, 0
.L544:
	.word	gBattleExecBuffer
	.word	gBattleMoveFlags
	.word	gBattleCommunication
	.word	gMissStrings
.L513:
	mov	r0, #0x1
	strb	r0, [r7, #0x7]
	ldrb	r5, [r6]
	mov	r0, #0xfe
	and	r0, r0, r5
	cmp	r0, #0x10
	beq	.L519	@cond_branch
	cmp	r0, #0x10
	bgt	.L538	@cond_branch
	cmp	r0, #0x4
	beq	.L518	@cond_branch
	cmp	r0, #0x4
	bgt	.L539	@cond_branch
	cmp	r0, #0x2
	beq	.L517	@cond_branch
	b	.L526
.L539:
	cmp	r0, #0x8
	beq	.L524	@cond_branch
	b	.L526
.L538:
	cmp	r0, #0x40
	beq	.L520	@cond_branch
	cmp	r0, #0x40
	bgt	.L540	@cond_branch
	cmp	r0, #0x20
	bne	.LCB5863
	b	.L522	@long jump
.LCB5863:
	b	.L526
.L540:
	cmp	r0, #0x80
	beq	.L525	@cond_branch
	b	.L526
.L517:
	mov	r3, #0xde
	b	.L542
.L518:
	mov	r3, #0xdd
	b	.L542
.L519:
	mov	r3, #0xda
	b	.L542
.L520:
	mov	r3, #0x99
	b	.L542
.L525:
	ldr	r4, .L546
	ldr	r2, .L546+0x4
	ldr	r3, .L546+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	ldr	r1, .L546+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r6]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L546+0x10
	ldr	r0, .L546+0x14
	b	.L543
.L547:
	.align	2, 0
.L546:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBankTarget
	.word	gStringBank
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HangedOnMsg
.L526:
	add	r2, r6, #0
	ldrb	r5, [r2]
	mov	r0, #0x8
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L527	@cond_branch
.L524:
	mov	r3, #0x1b
	b	.L542
.L527:
	mov	r0, #0x10
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L529	@cond_branch
	mov	r0, #0xef
	and	r0, r0, r5
	mov	r1, #0xfd
	and	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	strb	r0, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L548
	ldr	r0, .L548+0x4
	b	.L543
.L549:
	.align	2, 0
.L548:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_OneHitKOMsg
.L529:
	mov	r0, #0x40
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L531	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r2]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L550
	ldr	r0, .L550+0x4
	b	.L543
.L551:
	.align	2, 0
.L550:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_EnduredMsg
.L531:
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L533	@cond_branch
	ldr	r4, .L552
	ldr	r2, .L552+0x4
	ldr	r3, .L552+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	ldr	r1, .L552+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r6]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L552+0x10
	ldr	r0, .L552+0x14
	b	.L543
.L553:
	.align	2, 0
.L552:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBankTarget
	.word	gStringBank
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HangedOnMsg
.L533:
	mov	r0, #0x20
	and	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L535	@cond_branch
.L522:
	mov	r3, #0xe5
	b	.L542
.L535:
	strb	r0, [r7, #0x7]
.L515:
	cmp	r3, #0
	beq	.L541	@cond_branch
.L542:
	add	r0, r3, #0
	ldr	r1, .L554
	ldrb	r1, [r1]
	bl	PrepareStringBattle
.L541:
	ldr	r1, .L554+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L543:
	str	r0, [r1]
.L511:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe27:
	.size	 atk0F_resultmessage,.Lfe27-atk0F_resultmessage
	.align	2, 0
	.type	 atk10_printstring,function
	.thumb_func
atk10_printstring:
	push	{r4, lr}
	ldr	r0, .L558
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L557	@cond_branch
	ldr	r4, .L558+0x4
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1]
	ldrb	r1, [r1, #0x2]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r1, .L558+0x8
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r1, .L558+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
.L557:
	pop	{r4}
	pop	{r0}
	bx	r0
.L559:
	.align	2, 0
.L558:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gBankAttacker
	.word	gBattleCommunication
.Lfe28:
	.size	 atk10_printstring,.Lfe28-atk10_printstring
	.align	2, 0
	.type	 atk11_printstring_playeronly,function
	.thumb_func
atk11_printstring_playeronly:
	push	{r4, r5, lr}
	ldr	r5, .L561
	ldr	r0, .L561+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L561+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	EmitPrintStringPlayerOnly
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r1, .L561+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L562:
	.align	2, 0
.L561:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.Lfe29:
	.size	 atk11_printstring_playeronly,.Lfe29-atk11_printstring_playeronly
	.align	2, 0
	.type	 atk12_waitmessage,function
	.thumb_func
atk12_waitmessage:
	push	{r4, r5, r6, lr}
	ldr	r0, .L568
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L564	@cond_branch
	ldr	r6, .L568+0x4
	ldrb	r0, [r6, #0x7]
	cmp	r0, #0
	bne	.L565	@cond_branch
	ldr	r1, .L568+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	b	.L564
.L569:
	.align	2, 0
.L568:
	.word	gBattleExecBuffer
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L565:
	ldr	r5, .L570
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r3, .L570+0x4
	ldrh	r0, [r3]
	add	r0, r0, #0x1
	strh	r0, [r3]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r1
	bcc	.L564	@cond_branch
	mov	r1, #0x0
	strh	r4, [r3]
	add	r0, r2, #0x3
	str	r0, [r5]
	strb	r1, [r6, #0x7]
.L564:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L571:
	.align	2, 0
.L570:
	.word	gBattlescriptCurrInstr
	.word	gPauseCounterBattle
.Lfe30:
	.size	 atk12_waitmessage,.Lfe30-atk12_waitmessage
	.align	2, 0
	.type	 atk13_printfromtable,function
	.thumb_func
atk13_printfromtable:
	push	{r4, r5, lr}
	ldr	r0, .L574
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L573	@cond_branch
	ldr	r4, .L574+0x4
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r5, .L574+0x8
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L574+0xc
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	mov	r0, #0x1
	strb	r0, [r5, #0x7]
.L573:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L575:
	.align	2, 0
.L574:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gBankAttacker
.Lfe31:
	.size	 atk13_printfromtable,.Lfe31-atk13_printfromtable
	.align	2, 0
	.type	 atk14_printfromtable_playeronly,function
	.thumb_func
atk14_printfromtable_playeronly:
	push	{r4, r5, r6, lr}
	ldr	r0, .L578
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L577	@cond_branch
	ldr	r5, .L578+0x4
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r6, .L578+0x8
	ldrb	r0, [r6, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r4, .L578+0xc
	ldr	r0, .L578+0x10
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrh	r1, [r1]
	mov	r0, #0x0
	bl	EmitPrintStringPlayerOnly
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x5
	str	r0, [r5]
	mov	r0, #0x1
	strb	r0, [r6, #0x7]
.L577:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L579:
	.align	2, 0
.L578:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gActiveBank
	.word	gBankAttacker
.Lfe32:
	.size	 atk14_printfromtable_playeronly,.Lfe32-atk14_printfromtable_playeronly
	.align	2, 0
	.globl	BankGetTurnOrder
	.type	 BankGetTurnOrder,function
	.thumb_func
BankGetTurnOrder:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L587
	ldrb	r3, [r0]
	cmp	r1, r3
	bge	.L582	@cond_branch
	ldr	r4, .L587+0x4
	ldrb	r0, [r4]
	cmp	r0, r2
	beq	.L582	@cond_branch
.L583:
	add	r1, r1, #0x1
	cmp	r1, r3
	bge	.L582	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L583	@cond_branch
.L582:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L588:
	.align	2, 0
.L587:
	.word	gNoOfAllBanks
	.word	gTurnOrder
.Lfe33:
	.size	 BankGetTurnOrder,.Lfe33-BankGetTurnOrder
	.align	2, 0
	.globl	SetMoveEffect
	.type	 SetMoveEffect,function
	.thumb_func
SetMoveEffect:
	.syntax unified
            push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x8
    lsls r0, 24
    lsrs r4, r0, 24
    lsls r1, 24
    lsrs r5, r1, 24
    movs r0, 0
    mov r10, r0
    movs r6, 0
    movs r1, 0x1
    str r1, [sp, 0x4]
    ldr r1, _0801E430 @ =gBattleCommunication
    ldrb r3, [r1, 0x3]
    movs r0, 0x40
    ands r0, r3
    adds r7, r1, 0
    cmp r0, 0
    beq _0801E444
    ldr r2, _0801E434 @ =gEffectBank
    ldr r0, _0801E438 @ =gBankAttacker
    ldrb r0, [r0]
    strb r0, [r2]
    movs r0, 0xBF
    ands r0, r3
    strb r0, [r7, 0x3]
    movs r6, 0x40
    ldr r0, _0801E43C @ =gSharedMem
    ldr r1, _0801E440 @ =gBankTarget
    b _0801E450
    .align 2, 0
_0801E430: .4byte gBattleCommunication
_0801E434: .4byte gEffectBank
_0801E438: .4byte gBankAttacker
_0801E43C: .4byte gSharedMem
_0801E440: .4byte gBankTarget
_0801E444:
    ldr r2, _0801E538 @ =gEffectBank
    ldr r0, _0801E53C @ =gBankTarget
    ldrb r0, [r0]
    strb r0, [r2]
    ldr r0, _0801E540 @ =gSharedMem
    ldr r1, _0801E544 @ =gBankAttacker
_0801E450:
    ldrb r1, [r1]
    ldr r3, _0801E548 @ =0x00016003
    adds r0, r3
    strb r1, [r0]
    mov r8, r2
    ldr r2, _0801E54C @ =gBattleMons
    mov r0, r8
    ldrb r1, [r0]
    movs r0, 0x58
    muls r0, r1
    adds r0, r2
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x13
    bne _0801E48A
    ldr r0, _0801E550 @ =gHitMarker
    ldr r0, [r0]
    movs r1, 0x80
    lsls r1, 6
    ands r0, r1
    cmp r0, 0
    bne _0801E48A
    cmp r4, 0
    bne _0801E48A
    ldrb r0, [r7, 0x3]
    cmp r0, 0x9
    bhi _0801E48A
    bl _0801F5DC
_0801E48A:
    mov r1, r8
    ldrb r0, [r1]
    bl GetBankIdentity
    ldr r2, _0801E554 @ =gSideAffecting
    movs r1, 0x1
    ands r1, r0
    lsls r1, 1
    adds r1, r2
    ldrh r1, [r1]
    movs r0, 0x20
    ands r0, r1
    cmp r0, 0
    beq _0801E4C4
    ldr r0, _0801E550 @ =gHitMarker
    ldr r0, [r0]
    movs r1, 0x80
    lsls r1, 6
    ands r0, r1
    cmp r0, 0
    bne _0801E4C4
    cmp r4, 0
    bne _0801E4C4
    ldr r0, _0801E558 @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    cmp r0, 0x7
    bhi _0801E4C4
    bl _0801F5DC
_0801E4C4:
    ldr r3, _0801E54C @ =gBattleMons
    ldr r2, _0801E538 @ =gEffectBank
    ldrb r1, [r2]
    movs r0, 0x58
    muls r0, r1
    adds r0, r3
    ldrh r0, [r0, 0x28]
    mov r8, r2
    mov r9, r3
    cmp r0, 0
    bne _0801E4EA
    ldr r0, _0801E558 @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    cmp r0, 0xB
    beq _0801E4EA
    cmp r0, 0x1F
    beq _0801E4EA
    bl _0801F5DC
_0801E4EA:
    mov r2, r8
    ldrb r1, [r2]
    movs r0, 0x58
    muls r0, r1
    mov r1, r9
    adds r1, 0x50
    adds r0, r1
    ldr r0, [r0]
    movs r1, 0x80
    lsls r1, 17
    ands r0, r1
    cmp r0, 0
    beq _0801E50C
    cmp r6, 0x40
    beq _0801E50C
    bl _0801F5DC
_0801E50C:
    ldr r0, _0801E558 @ =gBattleCommunication
    ldrb r1, [r0, 0x3]
    adds r7, r0, 0
    cmp r1, 0x6
    bls _0801E518
    b _0801EB4A
_0801E518:
    ldr r1, _0801E55C @ =gStatusFlagsForMoveEffects
    ldrb r0, [r7, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    cmp r0, 0x10
    bne _0801E528
    b _0801E714
_0801E528:
    cmp r0, 0x10
    bhi _0801E560
    cmp r0, 0x7
    beq _0801E57A
    cmp r0, 0x8
    bne _0801E536
    b _0801E630
_0801E536:
    b _0801EA14
    .align 2, 0
_0801E538: .4byte gEffectBank
_0801E53C: .4byte gBankTarget
_0801E540: .4byte gSharedMem
_0801E544: .4byte gBankAttacker
_0801E548: .4byte 0x00016003
_0801E54C: .4byte gBattleMons
_0801E550: .4byte gHitMarker
_0801E554: .4byte gSideAffecting
_0801E558: .4byte gBattleCommunication
_0801E55C: .4byte gStatusFlagsForMoveEffects
_0801E560:
    cmp r0, 0x40
    bne _0801E566
    b _0801E888
_0801E566:
    cmp r0, 0x40
    bhi _0801E572
    cmp r0, 0x20
    bne _0801E570
    b _0801E7EA
_0801E570:
    b _0801EA14
_0801E572:
    cmp r0, 0x80
    bne _0801E578
    b _0801E8E4
_0801E578:
    b _0801EA14
_0801E57A:
    mov r3, r8
    ldrb r1, [r3]
    movs r0, 0x58
    muls r0, r1
    add r0, r9
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x2B
    beq _0801E5DC
    ldr r0, _0801E5D4 @ =gActiveBank
    movs r1, 0
    strb r1, [r0]
    ldr r1, _0801E5D8 @ =gNoOfAllBanks
    ldrb r3, [r1]
    adds r7, r0, 0
    mov r12, r1
    cmp r3, 0
    beq _0801E5E8
    mov r4, r9
    ldr r0, [r4, 0x50]
    movs r1, 0x70
    ands r0, r1
    cmp r0, 0
    bne _0801E5E8
    adds r1, r7, 0
    mov r6, r9
    adds r6, 0x50
    movs r5, 0x58
    movs r4, 0x70
_0801E5B4:
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
    lsls r0, 24
    lsrs r0, 24
    cmp r0, r3
    bcs _0801E5E8
    ldrb r0, [r7]
    muls r0, r5
    adds r0, r6
    ldr r0, [r0]
    ands r0, r4
    cmp r0, 0
    beq _0801E5B4
    b _0801E5E8
    .align 2, 0
_0801E5D4: .4byte gActiveBank
_0801E5D8: .4byte gNoOfAllBanks
_0801E5DC:
    ldr r0, _0801E628 @ =gActiveBank
    ldr r2, _0801E62C @ =gNoOfAllBanks
    ldrb r1, [r2]
    strb r1, [r0]
    adds r7, r0, 0
    mov r12, r2
_0801E5E8:
    mov r0, r8
    ldrb r2, [r0]
    movs r0, 0x58
    adds r1, r2, 0
    muls r1, r0
    mov r0, r9
    adds r0, 0x4C
    adds r0, r1, r0
    ldr r0, [r0]
    cmp r0, 0
    beq _0801E600
    b _0801EA14
_0801E600:
    ldrb r0, [r7]
    mov r3, r12
    ldrb r3, [r3]
    cmp r0, r3
    beq _0801E60C
    b _0801EA14
_0801E60C:
    mov r4, r9
    adds r0, r1, r4
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x48
    bne _0801E61A
    b _0801EA14
_0801E61A:
    cmp r0, 0xF
    bne _0801E620
    b _0801EA14
_0801E620:
    adds r0, r2, 0
    bl CancelMultiTurnMoves
    b _0801EA04
    .align 2, 0
_0801E628: .4byte gActiveBank
_0801E62C: .4byte gNoOfAllBanks
_0801E630:
    mov r2, r8
    ldrb r1, [r2]
    movs r0, 0x58
    muls r0, r1
    add r0, r9
    adds r0, 0x20
    ldrb r1, [r0]
    cmp r1, 0x11
    bne _0801E688
    cmp r4, 0x1
    beq _0801E64A
    cmp r5, 0x80
    bne _0801E688
_0801E64A:
    ldr r0, _0801E678 @ =gLastUsedAbility
    strb r1, [r0]
    mov r3, r8
    ldrb r0, [r3]
    movs r1, 0x11
    bl RecordAbilityBattle
    ldr r4, _0801E67C @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801E680 @ =BattleScript_PSNPrevention
_0801E664:
    str r0, [r4]
    ldr r2, _0801E684 @ =gHitMarker
    ldr r1, [r2]
    movs r0, 0x80
    lsls r0, 6
    ands r0, r1
    cmp r0, 0
    beq _0801E676
    b _0801E928
_0801E676:
    b _0801E94C
    .align 2, 0
_0801E678: .4byte gLastUsedAbility
_0801E67C: .4byte gBattlescriptCurrInstr
_0801E680: .4byte BattleScript_PSNPrevention
_0801E684: .4byte gHitMarker
_0801E688:
    mov r1, r8
    ldrb r0, [r1]
    movs r1, 0x58
    muls r0, r1
    add r0, r9
    adds r1, r0, 0
    adds r1, 0x21
    ldrb r1, [r1]
    cmp r1, 0x3
    beq _0801E6AC
    adds r0, 0x22
    ldrb r0, [r0]
    cmp r0, 0x3
    beq _0801E6AC
    cmp r1, 0x8
    beq _0801E6AC
    cmp r0, 0x8
    bne _0801E6C6
_0801E6AC:
    ldr r0, _0801E710 @ =gHitMarker
    ldr r0, [r0]
    movs r1, 0x80
    lsls r1, 6
    ands r0, r1
    cmp r0, 0
    beq _0801E6C6
    cmp r4, 0x1
    bne _0801E6C0
    b _0801E98C
_0801E6C0:
    cmp r5, 0x80
    bne _0801E6C6
    b _0801E98C
_0801E6C6:
    mov r2, r8
    ldrb r1, [r2]
    movs r0, 0x58
    muls r1, r0
    mov r4, r9
    adds r3, r1, r4
    adds r0, r3, 0
    adds r0, 0x21
    ldrb r4, [r0]
    cmp r4, 0x3
    bne _0801E6DE
    b _0801EA14
_0801E6DE:
    adds r0, 0x1
    ldrb r0, [r0]
    cmp r0, 0x3
    bne _0801E6E8
    b _0801EA14
_0801E6E8:
    cmp r4, 0x8
    bne _0801E6EE
    b _0801EA14
_0801E6EE:
    cmp r0, 0x8
    bne _0801E6F4
    b _0801EA14
_0801E6F4:
    mov r0, r9
    adds r0, 0x4C
    adds r0, r1, r0
    ldr r0, [r0]
    cmp r0, 0
    beq _0801E702
    b _0801EA14
_0801E702:
    adds r0, r3, 0
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x11
    bne _0801E70E
    b _0801EA14
_0801E70E:
    b _0801EA04
    .align 2, 0
_0801E710: .4byte gHitMarker
_0801E714:
    mov r2, r8
    ldrb r1, [r2]
    movs r0, 0x58
    muls r0, r1
    add r0, r9
    adds r0, 0x20
    ldrb r1, [r0]
    cmp r1, 0x29
    bne _0801E758
    cmp r4, 0x1
    beq _0801E72E
    cmp r5, 0x80
    bne _0801E758
_0801E72E:
    ldr r0, _0801E74C @ =gLastUsedAbility
    strb r1, [r0]
    mov r3, r8
    ldrb r0, [r3]
    movs r1, 0x29
    bl RecordAbilityBattle
    ldr r4, _0801E750 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801E754 @ =BattleScript_BRNPrevention
    b _0801E664
    .align 2, 0
_0801E74C: .4byte gLastUsedAbility
_0801E750: .4byte gBattlescriptCurrInstr
_0801E754: .4byte BattleScript_BRNPrevention
_0801E758:
    mov r0, r8
    ldrb r1, [r0]
    movs r0, 0x58
    muls r0, r1
    mov r2, r9
    adds r1, r0, r2
    adds r0, r1, 0
    adds r0, 0x21
    ldrb r0, [r0]
    cmp r0, 0xA
    beq _0801E778
    adds r0, r1, 0
    adds r0, 0x22
    ldrb r0, [r0]
    cmp r0, 0xA
    bne _0801E7A8
_0801E778:
    ldr r0, _0801E79C @ =gHitMarker
    ldr r0, [r0]
    movs r1, 0x80
    lsls r1, 6
    ands r0, r1
    cmp r0, 0
    beq _0801E7A8
    cmp r4, 0x1
    beq _0801E78E
    cmp r5, 0x80
    bne _0801E7A8
_0801E78E:
    ldr r4, _0801E7A0 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801E7A4 @ =BattleScript_BRNPrevention
    b _0801E998
    .align 2, 0
_0801E79C: .4byte gHitMarker
_0801E7A0: .4byte gBattlescriptCurrInstr
_0801E7A4: .4byte BattleScript_BRNPrevention
_0801E7A8:
    mov r3, r8
    ldrb r0, [r3]
    movs r1, 0x58
    adds r2, r0, 0
    muls r2, r1
    mov r4, r9
    adds r1, r2, r4
    adds r0, r1, 0
    adds r0, 0x21
    ldrb r0, [r0]
    cmp r0, 0xA
    bne _0801E7C2
    b _0801EA14
_0801E7C2:
    adds r0, r1, 0
    adds r0, 0x22
    ldrb r0, [r0]
    cmp r0, 0xA
    bne _0801E7CE
    b _0801EA14
_0801E7CE:
    adds r0, r1, 0
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x29
    bne _0801E7DA
    b _0801EA14
_0801E7DA:
    mov r0, r9
    adds r0, 0x4C
    adds r0, r2, r0
    ldr r0, [r0]
    cmp r0, 0
    beq _0801E7E8
    b _0801EA14
_0801E7E8:
    b _0801EA04
_0801E7EA:
    movs r0, 0
    str r0, [sp]
    movs r0, 0x13
    movs r1, 0
    movs r2, 0xD
    movs r3, 0
    bl AbilityBattleEffects
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0
    bne _0801E826
    str r0, [sp]
    movs r0, 0x13
    movs r1, 0
    movs r2, 0x4D
    movs r3, 0
    bl AbilityBattleEffects
    lsls r0, 24
    cmp r0, 0
    bne _0801E826
    ldr r0, _0801E87C @ =gBattleWeather
    ldrh r1, [r0]
    movs r0, 0x60
    ands r0, r1
    cmp r0, 0
    beq _0801E826
    movs r1, 0
    str r1, [sp, 0x4]
_0801E826:
    ldr r4, _0801E880 @ =gBattleMons
    ldr r0, _0801E884 @ =gEffectBank
    ldrb r3, [r0]
    movs r0, 0x58
    adds r2, r3, 0
    muls r2, r0
    adds r1, r2, r4
    adds r0, r1, 0
    adds r0, 0x21
    ldrb r0, [r0]
    cmp r0, 0xF
    bne _0801E840
    b _0801EA14
_0801E840:
    adds r0, r1, 0
    adds r0, 0x22
    ldrb r0, [r0]
    cmp r0, 0xF
    bne _0801E84C
    b _0801EA14
_0801E84C:
    adds r0, r4, 0
    adds r0, 0x4C
    adds r0, r2, r0
    ldr r0, [r0]
    cmp r0, 0
    beq _0801E85A
    b _0801EA14
_0801E85A:
    ldr r2, [sp, 0x4]
    cmp r2, 0
    bne _0801E862
    b _0801EA14
_0801E862:
    adds r0, r1, 0
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x28
    bne _0801E86E
    b _0801EA14
_0801E86E:
    adds r0, r3, 0
    bl CancelMultiTurnMoves
    movs r3, 0x1
    mov r10, r3
    b _0801EA14
    .align 2, 0
_0801E87C: .4byte gBattleWeather
_0801E880: .4byte gBattleMons
_0801E884: .4byte gEffectBank
_0801E888:
    mov r0, r8
    ldrb r1, [r0]
    movs r0, 0x58
    muls r1, r0
    mov r2, r9
    adds r0, r1, r2
    adds r0, 0x20
    ldrb r2, [r0]
    cmp r2, 0x7
    bne _0801E8D0
    cmp r4, 0x1
    beq _0801E8A6
    cmp r5, 0x80
    beq _0801E8A6
    b _0801EA14
_0801E8A6:
    ldr r0, _0801E8C4 @ =gLastUsedAbility
    strb r2, [r0]
    mov r3, r8
    ldrb r0, [r3]
    movs r1, 0x7
    bl RecordAbilityBattle
    ldr r4, _0801E8C8 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801E8CC @ =BattleScript_PRLZPrevention
    b _0801E664
    .align 2, 0
_0801E8C4: .4byte gLastUsedAbility
_0801E8C8: .4byte gBattlescriptCurrInstr
_0801E8CC: .4byte BattleScript_PRLZPrevention
_0801E8D0:
    mov r0, r9
    adds r0, 0x4C
    adds r0, r1, r0
    ldr r0, [r0]
    cmp r0, 0
    beq _0801E8DE
    b _0801EA14
_0801E8DE:
    movs r4, 0x1
    mov r10, r4
    b _0801EA14
_0801E8E4:
    mov r0, r8
    ldrb r1, [r0]
    movs r0, 0x58
    muls r0, r1
    add r0, r9
    adds r0, 0x20
    ldrb r1, [r0]
    cmp r1, 0x11
    bne _0801E952
    cmp r4, 0x1
    beq _0801E8FE
    cmp r5, 0x80
    bne _0801E952
_0801E8FE:
    ldr r0, _0801E938 @ =gLastUsedAbility
    strb r1, [r0]
    mov r1, r8
    ldrb r0, [r1]
    movs r1, 0x11
    bl RecordAbilityBattle
    ldr r4, _0801E93C @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801E940 @ =BattleScript_PSNPrevention
    str r0, [r4]
    ldr r2, _0801E944 @ =gHitMarker
    ldr r1, [r2]
    movs r0, 0x80
    lsls r0, 6
    ands r0, r1
    cmp r0, 0
    beq _0801E94C
_0801E928:
    movs r0, 0x1
    strb r0, [r7, 0x5]
    ldr r0, _0801E948 @ =0xffffdfff
    ands r1, r0
    str r1, [r2]
    bl _0801F5FA
    .align 2, 0
_0801E938: .4byte gLastUsedAbility
_0801E93C: .4byte gBattlescriptCurrInstr
_0801E940: .4byte BattleScript_PSNPrevention
_0801E944: .4byte gHitMarker
_0801E948: .4byte 0xffffdfff
_0801E94C:
    strb r0, [r7, 0x5]
    bl _0801F5FA
_0801E952:
    mov r2, r8
    ldrb r0, [r2]
    movs r1, 0x58
    muls r0, r1
    add r0, r9
    adds r1, r0, 0
    adds r1, 0x21
    ldrb r1, [r1]
    cmp r1, 0x3
    beq _0801E976
    adds r0, 0x22
    ldrb r0, [r0]
    cmp r0, 0x3
    beq _0801E976
    cmp r1, 0x8
    beq _0801E976
    cmp r0, 0x8
    bne _0801E9B4
_0801E976:
    ldr r0, _0801E9A4 @ =gHitMarker
    ldr r0, [r0]
    movs r1, 0x80
    lsls r1, 6
    ands r0, r1
    cmp r0, 0
    beq _0801E9B4
    cmp r4, 0x1
    beq _0801E98C
    cmp r5, 0x80
    bne _0801E9B4
_0801E98C:
    ldr r4, _0801E9A8 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801E9AC @ =BattleScript_PSNPrevention
_0801E998:
    str r0, [r4]
    ldr r1, _0801E9B0 @ =gBattleCommunication
    movs r0, 0x2
    strb r0, [r1, 0x5]
    bl _0801F5FA
    .align 2, 0
_0801E9A4: .4byte gHitMarker
_0801E9A8: .4byte gBattlescriptCurrInstr
_0801E9AC: .4byte BattleScript_PSNPrevention
_0801E9B0: .4byte gBattleCommunication
_0801E9B4:
    mov r3, r8
    ldrb r0, [r3]
    movs r6, 0x58
    muls r0, r6
    mov r2, r9
    adds r2, 0x4C
    adds r5, r0, r2
    ldr r4, [r5]
    cmp r4, 0
    bne _0801EA14
    mov r3, r9
    adds r1, r0, r3
    adds r0, r1, 0
    adds r0, 0x21
    ldrb r3, [r0]
    cmp r3, 0x3
    beq _0801EA0A
    adds r0, 0x1
    ldrb r0, [r0]
    cmp r0, 0x3
    beq _0801EA0A
    cmp r3, 0x8
    beq _0801EA0A
    cmp r0, 0x8
    beq _0801EA0A
    adds r0, r1, 0
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x11
    beq _0801EA14
    mov r4, r8
    ldrb r0, [r4]
    adds r1, r0, 0
    muls r1, r6
    adds r1, r2
    ldr r0, [r1]
    movs r2, 0x9
    negs r2, r2
    ands r0, r2
    str r0, [r1]
_0801EA04:
    movs r0, 0x1
    mov r10, r0
    b _0801EA14
_0801EA0A:
    ldr r0, _0801EA58 @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r2, 0x8
    orrs r1, r2
    strb r1, [r0]
_0801EA14:
    mov r1, r10
    cmp r1, 0x1
    beq _0801EA1C
    b _0801EB3C
_0801EA1C:
    ldr r0, _0801EA5C @ =gBattlescriptCurrInstr
    ldr r0, [r0]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r1, _0801EA60 @ =gStatusFlagsForMoveEffects
    ldr r0, _0801EA64 @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r3, [r0]
    cmp r3, 0x7
    bne _0801EA70
    bl Random
    ldr r2, _0801EA68 @ =gBattleMons
    ldr r1, _0801EA6C @ =gEffectBank
    ldrb r3, [r1]
    movs r1, 0x58
    muls r3, r1
    adds r2, 0x4C
    adds r3, r2
    movs r1, 0x3
    ands r1, r0
    adds r1, 0x2
    ldr r0, [r3]
    orrs r0, r1
    str r0, [r3]
    b _0801EA84
    .align 2, 0
_0801EA58: .4byte gBattleMoveFlags
_0801EA5C: .4byte gBattlescriptCurrInstr
_0801EA60: .4byte gStatusFlagsForMoveEffects
_0801EA64: .4byte gBattleCommunication
_0801EA68: .4byte gBattleMons
_0801EA6C: .4byte gEffectBank
_0801EA70:
    ldr r2, _0801EAD4 @ =gBattleMons
    ldr r0, _0801EAD8 @ =gEffectBank
    ldrb r1, [r0]
    movs r0, 0x58
    muls r1, r0
    adds r2, 0x4C
    adds r1, r2
    ldr r0, [r1]
    orrs r0, r3
    str r0, [r1]
_0801EA84:
    ldr r2, _0801EADC @ =gBattlescriptCurrInstr
    ldr r1, _0801EAE0 @ =gMoveEffectBS_Ptrs
    ldr r5, _0801EAE4 @ =gBattleCommunication
    ldrb r0, [r5, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    str r0, [r2]
    ldr r4, _0801EAE8 @ =gActiveBank
    ldr r1, _0801EAD8 @ =gEffectBank
    ldrb r0, [r1]
    strb r0, [r4]
    ldrb r1, [r1]
    movs r0, 0x58
    muls r0, r1
    ldr r1, _0801EAEC @ =gUnknown_02024ACC
    adds r0, r1
    str r0, [sp]
    movs r0, 0
    movs r1, 0x28
    movs r2, 0
    movs r3, 0x4
    bl EmitSetAttributes
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    ldr r2, _0801EAF0 @ =gHitMarker
    ldr r1, [r2]
    movs r0, 0x80
    lsls r0, 6
    ands r0, r1
    cmp r0, 0
    beq _0801EAF8
    movs r0, 0x1
    strb r0, [r5, 0x5]
    ldr r0, _0801EAF4 @ =0xffffdfff
    ands r1, r0
    str r1, [r2]
    b _0801EAFA
    .align 2, 0
_0801EAD4: .4byte gBattleMons
_0801EAD8: .4byte gEffectBank
_0801EADC: .4byte gBattlescriptCurrInstr
_0801EAE0: .4byte gMoveEffectBS_Ptrs
_0801EAE4: .4byte gBattleCommunication
_0801EAE8: .4byte gActiveBank
_0801EAEC: .4byte gUnknown_02024ACC
_0801EAF0: .4byte gHitMarker
_0801EAF4: .4byte 0xffffdfff
_0801EAF8:
    strb r0, [r5, 0x5]
_0801EAFA:
    ldr r0, _0801EB2C @ =gBattleCommunication
    ldrb r2, [r0, 0x3]
    adds r7, r0, 0
    cmp r2, 0x2
    beq _0801EB14
    cmp r2, 0x6
    beq _0801EB14
    cmp r2, 0x5
    beq _0801EB14
    cmp r2, 0x3
    beq _0801EB14
    bl _0801F5FA
_0801EB14:
    ldr r0, _0801EB30 @ =gSharedMem
    ldrb r1, [r7, 0x3]
    ldr r2, _0801EB34 @ =0x000160ca
    adds r0, r2
    strb r1, [r0]
    ldr r2, _0801EB38 @ =gHitMarker
    ldr r0, [r2]
    movs r1, 0x80
    lsls r1, 7
    bl _0801F4F2
    .align 2, 0
_0801EB2C: .4byte gBattleCommunication
_0801EB30: .4byte gSharedMem
_0801EB34: .4byte 0x000160ca
_0801EB38: .4byte gHitMarker
_0801EB3C:
    mov r3, r10
    cmp r3, 0
    beq _0801EB46
    bl _0801F5FA
_0801EB46:
    bl _0801F5DC
_0801EB4A:
    mov r0, r8
    ldrb r1, [r0]
    movs r0, 0x58
    muls r1, r0
    mov r0, r9
    adds r0, 0x50
    adds r1, r0
    ldr r2, _0801EB84 @ =gStatusFlagsForMoveEffects
    ldrb r3, [r7, 0x3]
    lsls r0, r3, 2
    adds r0, r2
    ldr r1, [r1]
    ldr r0, [r0]
    ands r1, r0
    cmp r1, 0
    beq _0801EB6E
    bl _0801F5DC
_0801EB6E:
    subs r0, r3, 0x7
    cmp r0, 0x34
    bls _0801EB78
    bl _0801F5FA
_0801EB78:
    lsls r0, 2
    ldr r1, _0801EB88 @ =_0801EB8C
    adds r0, r1
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_0801EB84: .4byte gStatusFlagsForMoveEffects
_0801EB88: .4byte _0801EB8C
    .align 2, 0
_0801EB8C:
    .4byte _0801EC60
    .4byte _0801ECD4
    .4byte _0801EE4C
    .4byte _0801ED60
    .4byte _0801EDDC
    .4byte _0801EE84
    .4byte _0801EECC
    .4byte _0801EFA8
    .4byte _0801EFEC
    .4byte _0801EFEC
    .4byte _0801EFEC
    .4byte _0801EFEC
    .4byte _0801EFEC
    .4byte _0801EFEC
    .4byte _0801EFEC
    .4byte _0801F040
    .4byte _0801F040
    .4byte _0801F040
    .4byte _0801F040
    .4byte _0801F040
    .4byte _0801F040
    .4byte _0801F040
    .4byte _0801F13C
    .4byte _0801F184
    .4byte _0801F1A4
    .4byte _0801F364
    .4byte _0801F3A0
    .4byte _0801F3BC
    .4byte _0801F3D4
    .4byte _0801F3EC
    .4byte _0801F44C
    .4byte _0801F464
    .4byte _0801F094
    .4byte _0801F094
    .4byte _0801F094
    .4byte _0801F094
    .4byte _0801F094
    .4byte _0801F094
    .4byte _0801F094
    .4byte _0801F0E8
    .4byte _0801F0E8
    .4byte _0801F0E8
    .4byte _0801F0E8
    .4byte _0801F0E8
    .4byte _0801F0E8
    .4byte _0801F0E8
    .4byte _0801F4A8
    .4byte _0801F500
    .4byte _0801F5FA
    .4byte _0801F5FA
    .4byte _0801F5FA
    .4byte _0801F5FA
    .4byte _0801F5EC
_0801EC60:
    mov r1, r8
    ldrb r0, [r1]
    movs r5, 0x58
    adds r1, r0, 0
    muls r1, r5
    mov r2, r9
    adds r0, r1, r2
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x14
    bne _0801EC7A
    bl _0801F5DC
_0801EC7A:
    mov r4, r9
    adds r4, 0x50
    adds r0, r1, r4
    ldr r0, [r0]
    movs r1, 0x7
    ands r0, r1
    cmp r0, 0
    beq _0801EC8E
    bl _0801F5DC
_0801EC8E:
    bl Random
    mov r3, r8
    ldrb r1, [r3]
    adds r2, r1, 0
    muls r2, r5
    adds r2, r4
    lsls r0, 16
    movs r1, 0xC0
    lsls r1, 10
    ands r1, r0
    lsrs r1, 16
    adds r1, 0x2
    ldr r0, [r2]
    orrs r0, r1
    str r0, [r2]
    ldr r4, _0801ECC8 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r1, _0801ECCC @ =gMoveEffectBS_Ptrs
    ldr r0, _0801ECD0 @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    bl _0801F5F8
    .align 2, 0
_0801ECC8: .4byte gBattlescriptCurrInstr
_0801ECCC: .4byte gMoveEffectBS_Ptrs
_0801ECD0: .4byte gBattleCommunication
_0801ECD4:
    mov r0, r8
    ldrb r2, [r0]
    movs r6, 0x58
    adds r0, r2, 0
    muls r0, r6
    add r0, r9
    adds r0, 0x20
    ldrb r1, [r0]
    cmp r1, 0x27
    bne _0801ED18
    cmp r4, 0x1
    beq _0801ECF4
    cmp r5, 0x80
    beq _0801ECF4
    bl _0801F5DC
_0801ECF4:
    ldr r0, _0801ED0C @ =gLastUsedAbility
    strb r1, [r0]
    mov r1, r8
    ldrb r0, [r1]
    movs r1, 0x27
    bl RecordAbilityBattle
    ldr r1, _0801ED10 @ =gBattlescriptCurrInstr
    ldr r0, _0801ED14 @ =BattleScript_FlinchPrevention
    str r0, [r1]
    bl _0801F5FA
    .align 2, 0
_0801ED0C: .4byte gLastUsedAbility
_0801ED10: .4byte gBattlescriptCurrInstr
_0801ED14: .4byte BattleScript_FlinchPrevention
_0801ED18:
    adds r0, r2, 0
    bl BankGetTurnOrder
    ldr r1, _0801ED54 @ =gCurrentMoveTurn
    lsls r0, 24
    lsrs r0, 24
    ldrb r1, [r1]
    cmp r0, r1
    bhi _0801ED2E
    bl _0801F5DC
_0801ED2E:
    mov r2, r8
    ldrb r0, [r2]
    adds r2, r0, 0
    muls r2, r6
    mov r0, r9
    adds r0, 0x50
    adds r2, r0
    ldr r1, _0801ED58 @ =gStatusFlagsForMoveEffects
    ldr r0, _0801ED5C @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r1, [r2]
    ldr r0, [r0]
    orrs r1, r0
    str r1, [r2]
    bl _0801F5DC
    .align 2, 0
_0801ED54: .4byte gCurrentMoveTurn
_0801ED58: .4byte gStatusFlagsForMoveEffects
_0801ED5C: .4byte gBattleCommunication
_0801ED60:
    mov r3, r8
    ldrb r0, [r3]
    movs r5, 0x58
    muls r0, r5
    mov r4, r9
    adds r4, 0x50
    adds r2, r0, r4
    ldr r1, [r2]
    movs r0, 0x70
    ands r0, r1
    cmp r0, 0
    beq _0801ED7C
    bl _0801F5DC
_0801ED7C:
    movs r0, 0x80
    lsls r0, 5
    orrs r1, r0
    str r1, [r2]
    ldr r1, _0801EDC8 @ =gLockedMove
    ldrb r0, [r3]
    lsls r0, 1
    adds r0, r1
    ldr r1, _0801EDCC @ =gCurrentMove
    ldrh r1, [r1]
    strh r1, [r0]
    bl Random
    mov r2, r8
    ldrb r1, [r2]
    adds r2, r1, 0
    muls r2, r5
    adds r2, r4
    movs r1, 0x3
    ands r1, r0
    adds r1, 0x2
    lsls r1, 4
    ldr r0, [r2]
    orrs r0, r1
    str r0, [r2]
    ldr r4, _0801EDD0 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r1, _0801EDD4 @ =gMoveEffectBS_Ptrs
    ldr r0, _0801EDD8 @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    bl _0801F5F8
    .align 2, 0
_0801EDC8: .4byte gLockedMove
_0801EDCC: .4byte gCurrentMove
_0801EDD0: .4byte gBattlescriptCurrInstr
_0801EDD4: .4byte gMoveEffectBS_Ptrs
_0801EDD8: .4byte gBattleCommunication
_0801EDDC:
    ldr r5, _0801EE30 @ =gBankAttacker
    ldrb r0, [r5]
    bl GetBankIdentity
    movs r1, 0x1
    ands r1, r0
    cmp r1, 0
    bne _0801EE14
    ldr r4, _0801EE34 @ =gPaydayMoney
    ldrh r3, [r4]
    ldr r2, _0801EE38 @ =gBattleMons
    ldrb r1, [r5]
    movs r0, 0x58
    muls r0, r1
    adds r0, r2
    adds r0, 0x2A
    ldrb r1, [r0]
    lsls r0, r1, 2
    adds r0, r1
    adds r0, r3, r0
    strh r0, [r4]
    lsls r0, 16
    lsrs r0, 16
    cmp r3, r0
    bls _0801EE14
    ldr r3, _0801EE3C @ =0x0000ffff
    adds r0, r3, 0
    strh r0, [r4]
_0801EE14:
    ldr r4, _0801EE40 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r1, _0801EE44 @ =gMoveEffectBS_Ptrs
    ldr r0, _0801EE48 @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    bl _0801F5F8
    .align 2, 0
_0801EE30: .4byte gBankAttacker
_0801EE34: .4byte gPaydayMoney
_0801EE38: .4byte gBattleMons
_0801EE3C: .4byte 0x0000ffff
_0801EE40: .4byte gBattlescriptCurrInstr
_0801EE44: .4byte gMoveEffectBS_Ptrs
_0801EE48: .4byte gBattleCommunication
_0801EE4C:
    mov r4, r8
    ldrb r1, [r4]
    movs r0, 0x58
    muls r0, r1
    mov r1, r9
    adds r1, 0x4C
    adds r0, r1
    ldr r0, [r0]
    cmp r0, 0
    beq _0801EE62
    b _0801F5DC
_0801EE62:
    bl Random
    ldr r4, _0801EE80 @ =gBattleCommunication
    lsls r0, 16
    lsrs r0, 16
    movs r1, 0x3
    bl __umodsi3
    adds r0, 0x3
    strb r0, [r4, 0x3]
    movs r0, 0
    movs r1, 0
    bl SetMoveEffect
    b _0801F5FA
    .align 2, 0
_0801EE80: .4byte gBattleCommunication
_0801EE84:
    mov r0, r8
    ldrb r1, [r0]
    movs r0, 0x58
    adds r2, r1, 0
    muls r2, r0
    mov r0, r9
    adds r0, 0x50
    adds r2, r0
    ldr r0, [r2]
    movs r1, 0x80
    lsls r1, 5
    orrs r0, r1
    str r0, [r2]
    ldr r1, _0801EEC0 @ =gLockedMove
    mov r2, r8
    ldrb r0, [r2]
    lsls r0, 1
    adds r0, r1
    ldr r1, _0801EEC4 @ =gCurrentMove
    ldrh r1, [r1]
    strh r1, [r0]
    ldr r0, _0801EEC8 @ =gProtectStructs
    ldrb r1, [r2]
    lsls r1, 4
    adds r1, r0
    ldrb r0, [r1, 0x1]
    movs r2, 0x4
    orrs r0, r2
    strb r0, [r1, 0x1]
    b _0801F5DC
    .align 2, 0
_0801EEC0: .4byte gLockedMove
_0801EEC4: .4byte gCurrentMove
_0801EEC8: .4byte gProtectStructs
_0801EECC:
    mov r3, r8
    ldrb r0, [r3]
    movs r6, 0x58
    muls r0, r6
    mov r4, r9
    adds r4, 0x50
    adds r0, r4
    ldr r5, [r0]
    movs r0, 0xE0
    lsls r0, 8
    ands r5, r0
    cmp r5, 0
    beq _0801EEE8
    b _0801F5DC
_0801EEE8:
    bl Random
    mov r2, r8
    ldrb r1, [r2]
    adds r2, r1, 0
    muls r2, r6
    adds r2, r4
    movs r1, 0x3
    ands r1, r0
    adds r1, 0x3
    lsls r1, 13
    ldr r0, [r2]
    orrs r0, r1
    str r0, [r2]
    ldr r2, _0801EF80 @ =gSharedMem
    mov r3, r8
    ldrb r0, [r3]
    lsls r0, 1
    ldr r4, _0801EF84 @ =0x00016004
    adds r0, r4
    adds r0, r2
    ldr r6, _0801EF88 @ =gCurrentMove
    ldrh r1, [r6]
    strb r1, [r0]
    ldrb r0, [r3]
    lsls r0, 1
    ldr r1, _0801EF8C @ =0x00016005
    adds r0, r1
    adds r0, r2
    ldrh r1, [r6]
    lsrs r1, 8
    strb r1, [r0]
    ldrb r0, [r3]
    ldr r3, _0801EF90 @ =0x00016020
    adds r0, r3
    adds r0, r2
    ldr r1, _0801EF94 @ =gBankAttacker
    ldrb r1, [r1]
    strb r1, [r0]
    ldr r4, _0801EF98 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r1, _0801EF9C @ =gMoveEffectBS_Ptrs
    ldr r2, _0801EFA0 @ =gBattleCommunication
    ldrb r0, [r2, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    str r0, [r4]
    strb r5, [r2, 0x5]
    ldr r1, _0801EFA4 @ =gTrappingMoves
    ldrh r0, [r1]
    ldrh r4, [r6]
    cmp r0, r4
    bne _0801EF5C
    b _0801F5FA
_0801EF5C:
    adds r3, r1, 0
    adds r1, r6, 0
_0801EF60:
    ldrb r0, [r2, 0x5]
    adds r0, 0x1
    strb r0, [r2, 0x5]
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x4
    bls _0801EF70
    b _0801F5FA
_0801EF70:
    ldrb r0, [r2, 0x5]
    lsls r0, 1
    adds r0, r3
    ldrh r0, [r0]
    ldrh r4, [r1]
    cmp r0, r4
    bne _0801EF60
    b _0801F5FA
    .align 2, 0
_0801EF80: .4byte gSharedMem
_0801EF84: .4byte 0x00016004
_0801EF88: .4byte gCurrentMove
_0801EF8C: .4byte 0x00016005
_0801EF90: .4byte 0x00016020
_0801EF94: .4byte gBankAttacker
_0801EF98: .4byte gBattlescriptCurrInstr
_0801EF9C: .4byte gMoveEffectBS_Ptrs
_0801EFA0: .4byte gBattleCommunication
_0801EFA4: .4byte gTrappingMoves
_0801EFA8:
    ldr r1, _0801EFD8 @ =gBattleMoveDamage
    ldr r0, _0801EFDC @ =gHP_dealt
    ldr r0, [r0]
    cmp r0, 0
    bge _0801EFB4
    adds r0, 0x3
_0801EFB4:
    asrs r0, 2
    str r0, [r1]
    cmp r0, 0
    bne _0801EFC0
    movs r0, 0x1
    str r0, [r1]
_0801EFC0:
    ldr r4, _0801EFE0 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r1, _0801EFE4 @ =gMoveEffectBS_Ptrs
    ldr r0, _0801EFE8 @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    b _0801F5F8
    .align 2, 0
_0801EFD8: .4byte gBattleMoveDamage
_0801EFDC: .4byte gHP_dealt
_0801EFE0: .4byte gBattlescriptCurrInstr
_0801EFE4: .4byte gMoveEffectBS_Ptrs
_0801EFE8: .4byte gBattleCommunication
_0801EFEC:
    ldrb r1, [r7, 0x3]
    adds r1, 0xF2
    lsls r1, 24
    lsrs r1, 24
    movs r0, 0x10
    adds r2, r6, 0
    movs r3, 0
    bl ChangeStatBuffs
    lsls r0, 24
    lsrs r3, r0, 24
    cmp r3, 0
    beq _0801F008
    b _0801F5DC
_0801F008:
    ldr r2, _0801F02C @ =gSharedMem
    ldrb r1, [r7, 0x3]
    movs r0, 0x3F
    ands r0, r1
    ldr r4, _0801F030 @ =0x000160a4
    adds r1, r2, r4
    strb r0, [r1]
    ldr r0, _0801F034 @ =0x000160a5
    adds r2, r0
    strb r3, [r2]
    ldr r4, _0801F038 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F03C @ =BattleScript_StatUp
    b _0801F5F8
    .align 2, 0
_0801F02C: .4byte gSharedMem
_0801F030: .4byte 0x000160a4
_0801F034: .4byte 0x000160a5
_0801F038: .4byte gBattlescriptCurrInstr
_0801F03C: .4byte BattleScript_StatUp
_0801F040:
    movs r0, 0x70
    negs r0, r0
    ldrb r1, [r7, 0x3]
    adds r1, 0xEB
    lsls r1, 24
    lsrs r1, 24
    adds r2, r6, 0
    movs r3, 0
    bl ChangeStatBuffs
    lsls r0, 24
    lsrs r3, r0, 24
    cmp r3, 0
    beq _0801F05E
    b _0801F5DC
_0801F05E:
    ldr r2, _0801F080 @ =gSharedMem
    ldrb r1, [r7, 0x3]
    movs r0, 0x3F
    ands r0, r1
    ldr r4, _0801F084 @ =0x000160a4
    adds r1, r2, r4
    strb r0, [r1]
    ldr r0, _0801F088 @ =0x000160a5
    adds r2, r0
    strb r3, [r2]
    ldr r4, _0801F08C @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F090 @ =BattleScript_StatDown
    b _0801F5F8
    .align 2, 0
_0801F080: .4byte gSharedMem
_0801F084: .4byte 0x000160a4
_0801F088: .4byte 0x000160a5
_0801F08C: .4byte gBattlescriptCurrInstr
_0801F090: .4byte BattleScript_StatDown
_0801F094:
    ldrb r1, [r7, 0x3]
    adds r1, 0xDA
    lsls r1, 24
    lsrs r1, 24
    movs r0, 0x20
    adds r2, r6, 0
    movs r3, 0
    bl ChangeStatBuffs
    lsls r0, 24
    lsrs r3, r0, 24
    cmp r3, 0
    beq _0801F0B0
    b _0801F5DC
_0801F0B0:
    ldr r2, _0801F0D4 @ =gSharedMem
    ldrb r1, [r7, 0x3]
    movs r0, 0x3F
    ands r0, r1
    ldr r4, _0801F0D8 @ =0x000160a4
    adds r1, r2, r4
    strb r0, [r1]
    ldr r0, _0801F0DC @ =0x000160a5
    adds r2, r0
    strb r3, [r2]
    ldr r4, _0801F0E0 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F0E4 @ =BattleScript_StatUp
    b _0801F5F8
    .align 2, 0
_0801F0D4: .4byte gSharedMem
_0801F0D8: .4byte 0x000160a4
_0801F0DC: .4byte 0x000160a5
_0801F0E0: .4byte gBattlescriptCurrInstr
_0801F0E4: .4byte BattleScript_StatUp
_0801F0E8:
    movs r0, 0x60
    negs r0, r0
    ldrb r1, [r7, 0x3]
    adds r1, 0xD3
    lsls r1, 24
    lsrs r1, 24
    adds r2, r6, 0
    movs r3, 0
    bl ChangeStatBuffs
    lsls r0, 24
    lsrs r3, r0, 24
    cmp r3, 0
    beq _0801F106
    b _0801F5DC
_0801F106:
    ldr r2, _0801F128 @ =gSharedMem
    ldrb r1, [r7, 0x3]
    movs r0, 0x3F
    ands r0, r1
    ldr r4, _0801F12C @ =0x000160a4
    adds r1, r2, r4
    strb r0, [r1]
    ldr r0, _0801F130 @ =0x000160a5
    adds r2, r0
    strb r3, [r2]
    ldr r4, _0801F134 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F138 @ =BattleScript_StatDown
    b _0801F5F8
    .align 2, 0
_0801F128: .4byte gSharedMem
_0801F12C: .4byte 0x000160a4
_0801F130: .4byte 0x000160a5
_0801F134: .4byte gBattlescriptCurrInstr
_0801F138: .4byte BattleScript_StatDown
_0801F13C:
    mov r2, r8
    ldrb r1, [r2]
    movs r0, 0x58
    adds r2, r1, 0
    muls r2, r0
    mov r0, r9
    adds r0, 0x50
    adds r2, r0
    ldr r0, [r2]
    movs r1, 0x80
    lsls r1, 15
    orrs r0, r1
    str r0, [r2]
    ldr r2, _0801F178 @ =gDisableStructs
    mov r3, r8
    ldrb r1, [r3]
    lsls r0, r1, 3
    subs r0, r1
    lsls r0, 2
    adds r0, r2
    movs r1, 0x2
    strb r1, [r0, 0x19]
    ldr r1, _0801F17C @ =gLockedMove
    ldrb r0, [r3]
    lsls r0, 1
    adds r0, r1
    ldr r1, _0801F180 @ =gCurrentMove
    ldrh r1, [r1]
    strh r1, [r0]
    b _0801F5DC
    .align 2, 0
_0801F178: .4byte gDisableStructs
_0801F17C: .4byte gLockedMove
_0801F180: .4byte gCurrentMove
_0801F184:
    ldr r0, _0801F1A0 @ =gBankAttacker
    ldrb r1, [r0]
    movs r0, 0x58
    adds r2, r1, 0
    muls r2, r0
    mov r0, r9
    adds r0, 0x50
    adds r2, r0
    ldr r0, [r2]
    movs r1, 0x80
    lsls r1, 16
_0801F19A:
    orrs r0, r1
    str r0, [r2]
    b _0801F5DC
    .align 2, 0
_0801F1A0: .4byte gBankAttacker
_0801F1A4:
    ldr r4, _0801F254 @ =gBankAttacker
    ldrb r0, [r4]
    bl GetBankSide
    lsls r0, 24
    lsrs r6, r0, 24
    ldrb r0, [r4]
    bl GetBankSide
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    bne _0801F1D8
    ldr r0, _0801F258 @ =gBattleTypeFlags
    ldrh r1, [r0]
    ldr r0, _0801F25C @ =0x00000902
    ands r0, r1
    cmp r0, 0
    bne _0801F214
    ldr r0, _0801F260 @ =gTrainerBattleOpponent
    ldrh r1, [r0]
    movs r0, 0x80
    lsls r0, 3
    cmp r1, r0
    beq _0801F1D8
    b _0801F5DC
_0801F1D8:
    ldr r0, _0801F258 @ =gBattleTypeFlags
    ldrh r1, [r0]
    ldr r0, _0801F25C @ =0x00000902
    ands r0, r1
    cmp r0, 0
    bne _0801F214
    ldr r0, _0801F260 @ =gTrainerBattleOpponent
    ldrh r1, [r0]
    movs r0, 0x80
    lsls r0, 3
    cmp r1, r0
    beq _0801F214
    ldr r0, _0801F264 @ =gWishFutureKnock
    adds r0, 0x29
    adds r0, r6, r0
    ldrb r1, [r0]
    ldr r3, _0801F268 @ =gBitTable
    ldr r2, _0801F26C @ =gBattlePartyID
    ldr r0, _0801F254 @ =gBankAttacker
    ldrb r0, [r0]
    lsls r0, 1
    adds r0, r2
    ldrh r0, [r0]
    lsls r0, 2
    adds r0, r3
    ldr r0, [r0]
    ands r1, r0
    cmp r1, 0
    beq _0801F214
    b _0801F5DC
_0801F214:
    ldr r2, _0801F270 @ =gBattleMons
    ldr r1, _0801F274 @ =gBankTarget
    ldrb r0, [r1]
    movs r3, 0x58
    muls r0, r3
    adds r4, r0, r2
    ldrh r0, [r4, 0x2E]
    adds r7, r1, 0
    mov r9, r2
    cmp r0, 0
    beq _0801F284
    adds r0, r4, 0
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x3C
    bne _0801F284
    ldr r1, _0801F278 @ =gBattlescriptCurrInstr
    ldr r0, _0801F27C @ =BattleScript_NoItemSteal
    str r0, [r1]
    ldr r1, _0801F280 @ =gLastUsedAbility
    ldrb r0, [r7]
    muls r0, r3
    add r0, r9
    adds r0, 0x20
    ldrb r0, [r0]
    strb r0, [r1]
    ldrb r0, [r7]
    ldrb r1, [r1]
    bl RecordAbilityBattle
    b _0801F5FA
    .align 2, 0
_0801F254: .4byte gBankAttacker
_0801F258: .4byte gBattleTypeFlags
_0801F25C: .4byte 0x00000902
_0801F260: .4byte gTrainerBattleOpponent
_0801F264: .4byte gWishFutureKnock
_0801F268: .4byte gBitTable
_0801F26C: .4byte gBattlePartyID
_0801F270: .4byte gBattleMons
_0801F274: .4byte gBankTarget
_0801F278: .4byte gBattlescriptCurrInstr
_0801F27C: .4byte BattleScript_NoItemSteal
_0801F280: .4byte gLastUsedAbility
_0801F284:
    ldr r4, _0801F340 @ =gBankAttacker
    mov r10, r4
    ldrb r1, [r4]
    movs r0, 0x58
    mov r8, r0
    mov r0, r8
    muls r0, r1
    add r0, r9
    ldrh r3, [r0, 0x2E]
    cmp r3, 0
    beq _0801F29C
    b _0801F5DC
_0801F29C:
    ldrb r0, [r7]
    mov r2, r8
    muls r2, r0
    adds r0, r2, 0
    add r0, r9
    ldrh r2, [r0, 0x2E]
    adds r0, r2, 0
    cmp r0, 0xAF
    bne _0801F2B0
    b _0801F5DC
_0801F2B0:
    cmp r0, 0
    bne _0801F2B6
    b _0801F5DC
_0801F2B6:
    lsls r0, r1, 1
    ldr r5, _0801F344 @ =gSharedMem + 0x160F0
    adds r0, r5
    ldr r1, _0801F348 @ =gLastUsedItem
    strh r2, [r0]
    strh r2, [r1]
    ldrb r0, [r7]
    mov r4, r8
    muls r4, r0
    adds r0, r4, 0
    add r0, r9
    movs r6, 0
    strh r3, [r0, 0x2E]
    ldr r4, _0801F34C @ =gActiveBank
    mov r2, r10
    ldrb r0, [r2]
    strb r0, [r4]
    str r1, [sp]
    movs r0, 0
    movs r1, 0x2
    movs r2, 0
    movs r3, 0x2
    bl EmitSetAttributes
    mov r3, r10
    ldrb r0, [r3]
    bl MarkBufferBankForExecution
    ldrb r0, [r7]
    strb r0, [r4]
    ldrb r0, [r7]
    mov r4, r8
    muls r4, r0
    adds r0, r4, 0
    mov r1, r9
    adds r1, 0x2E
    adds r0, r1
    str r0, [sp]
    movs r0, 0
    movs r1, 0x2
    movs r2, 0
    movs r3, 0x2
    bl EmitSetAttributes
    ldrb r0, [r7]
    bl MarkBufferBankForExecution
    ldr r4, _0801F350 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F354 @ =BattleScript_ItemSteal
    str r0, [r4]
    ldr r0, _0801F358 @ =0xfffe9f10
    adds r5, r0
    ldrb r0, [r7]
    lsls r0, 1
    ldr r1, _0801F35C @ =0x000160e8
    adds r0, r1
    adds r0, r5
    strb r6, [r0]
    ldrb r0, [r7]
    lsls r0, 1
    ldr r2, _0801F360 @ =0x000160e9
    adds r0, r2
    adds r0, r5
    strb r6, [r0]
    b _0801F5FA
    .align 2, 0
_0801F340: .4byte gBankAttacker
_0801F344: .4byte gSharedMem + 0x160F0
_0801F348: .4byte gLastUsedItem
_0801F34C: .4byte gActiveBank
_0801F350: .4byte gBattlescriptCurrInstr
_0801F354: .4byte BattleScript_ItemSteal
_0801F358: .4byte 0xfffe9f10
_0801F35C: .4byte 0x000160e8
_0801F360: .4byte 0x000160e9
_0801F364:
    ldr r3, _0801F394 @ =gBankTarget
    ldrb r1, [r3]
    movs r0, 0x58
    adds r2, r1, 0
    muls r2, r0
    mov r0, r9
    adds r0, 0x50
    adds r2, r0
    ldr r0, [r2]
    movs r1, 0x80
    lsls r1, 19
    orrs r0, r1
    str r0, [r2]
    ldr r2, _0801F398 @ =gDisableStructs
    ldrb r1, [r3]
    lsls r0, r1, 3
    subs r0, r1
    lsls r0, 2
    adds r0, r2
    ldr r1, _0801F39C @ =gBankAttacker
    ldrb r1, [r1]
    strb r1, [r0, 0x14]
    b _0801F5DC
    .align 2, 0
_0801F394: .4byte gBankTarget
_0801F398: .4byte gDisableStructs
_0801F39C: .4byte gBankAttacker
_0801F3A0:
    ldr r0, _0801F3B8 @ =gBankTarget
    ldrb r1, [r0]
    movs r0, 0x58
    adds r2, r1, 0
    muls r2, r0
    mov r0, r9
    adds r0, 0x50
    adds r2, r0
    ldr r0, [r2]
    movs r1, 0x80
    lsls r1, 20
    b _0801F19A
    .align 2, 0
_0801F3B8: .4byte gBankTarget
_0801F3BC:
    ldr r4, _0801F3CC @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F3D0 @ =BattleScript_AllStatsUp
    b _0801F5F8
    .align 2, 0
_0801F3CC: .4byte gBattlescriptCurrInstr
_0801F3D0: .4byte BattleScript_AllStatsUp
_0801F3D4:
    ldr r4, _0801F3E4 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F3E8 @ =BattleScript_RapidSpinAway
    b _0801F5F8
    .align 2, 0
_0801F3E4: .4byte gBattlescriptCurrInstr
_0801F3E8: .4byte BattleScript_RapidSpinAway
_0801F3EC:
    ldr r6, _0801F43C @ =gBankTarget
    ldrb r0, [r6]
    movs r2, 0x58
    muls r0, r2
    mov r1, r9
    adds r1, 0x4C
    adds r5, r0, r1
    ldr r4, [r5]
    movs r0, 0x40
    ands r0, r4
    cmp r0, 0
    bne _0801F406
    b _0801F5DC
_0801F406:
    movs r0, 0x41
    negs r0, r0
    ands r4, r0
    str r4, [r5]
    ldr r4, _0801F440 @ =gActiveBank
    ldrb r0, [r6]
    strb r0, [r4]
    ldrb r0, [r4]
    muls r0, r2
    adds r0, r1
    str r0, [sp]
    movs r0, 0
    movs r1, 0x28
    movs r2, 0
    movs r3, 0x4
    bl EmitSetAttributes
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    ldr r4, _0801F444 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F448 @ =BattleScript_TargetPRLZHeal
    b _0801F5F8
    .align 2, 0
_0801F43C: .4byte gBankTarget
_0801F440: .4byte gActiveBank
_0801F444: .4byte gBattlescriptCurrInstr
_0801F448: .4byte BattleScript_TargetPRLZHeal
_0801F44C:
    ldr r4, _0801F45C @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F460 @ =BattleScript_AtkDefDown
    b _0801F5F8
    .align 2, 0
_0801F45C: .4byte gBattlescriptCurrInstr
_0801F460: .4byte BattleScript_AtkDefDown
_0801F464:
    ldr r4, _0801F494 @ =gBattleMoveDamage
    ldr r0, _0801F498 @ =gHP_dealt
    ldr r0, [r0]
    movs r1, 0x3
    bl __divsi3
    str r0, [r4]
    cmp r0, 0
    bne _0801F47A
    movs r0, 0x1
    str r0, [r4]
_0801F47A:
    ldr r4, _0801F49C @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r1, _0801F4A0 @ =gMoveEffectBS_Ptrs
    ldr r0, _0801F4A4 @ =gBattleCommunication
    ldrb r0, [r0, 0x3]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    b _0801F5F8
    .align 2, 0
_0801F494: .4byte gBattleMoveDamage
_0801F498: .4byte gHP_dealt
_0801F49C: .4byte gBattlescriptCurrInstr
_0801F4A0: .4byte gMoveEffectBS_Ptrs
_0801F4A4: .4byte gBattleCommunication
_0801F4A8:
    mov r3, r8
    ldrb r0, [r3]
    movs r5, 0x58
    muls r0, r5
    mov r4, r9
    adds r4, 0x50
    adds r2, r0, r4
    ldr r1, [r2]
    movs r0, 0xC0
    lsls r0, 4
    ands r0, r1
    cmp r0, 0
    beq _0801F4C4
    b _0801F5DC
_0801F4C4:
    movs r0, 0x80
    lsls r0, 5
    orrs r1, r0
    str r1, [r2]
    ldr r1, _0801F4F8 @ =gLockedMove
    ldrb r0, [r3]
    lsls r0, 1
    adds r0, r1
    ldr r1, _0801F4FC @ =gCurrentMove
    ldrh r1, [r1]
    strh r1, [r0]
    bl Random
    mov r2, r8
    ldrb r1, [r2]
    adds r2, r1, 0
    muls r2, r5
    adds r2, r4
    movs r1, 0x1
    ands r1, r0
    adds r1, 0x2
    lsls r1, 10
    ldr r0, [r2]
_0801F4F2:
    orrs r0, r1
    str r0, [r2]
    b _0801F5FA
    .align 2, 0
_0801F4F8: .4byte gLockedMove
_0801F4FC: .4byte gCurrentMove
_0801F500:
    mov r5, r8
    ldrb r3, [r5]
    movs r4, 0x58
    adds r0, r3, 0
    muls r0, r4
    mov r2, r9
    adds r1, r0, r2
    adds r0, r1, 0
    adds r0, 0x20
    ldrb r2, [r0]
    cmp r2, 0x3C
    bne _0801F540
    ldrh r0, [r1, 0x2E]
    cmp r0, 0
    beq _0801F5DC
    ldr r0, _0801F534 @ =gLastUsedAbility
    strb r2, [r0]
    ldr r1, _0801F538 @ =gBattlescriptCurrInstr
    ldr r0, _0801F53C @ =BattleScript_NoItemSteal
    str r0, [r1]
    ldrb r0, [r5]
    movs r1, 0x3C
    bl RecordAbilityBattle
    b _0801F5FA
    .align 2, 0
_0801F534: .4byte gLastUsedAbility
_0801F538: .4byte gBattlescriptCurrInstr
_0801F53C: .4byte BattleScript_NoItemSteal
_0801F540:
    ldrh r0, [r1, 0x2E]
    cmp r0, 0
    beq _0801F5DC
    adds r0, r3, 0
    bl GetBankSide
    lsls r0, 24
    lsrs r6, r0, 24
    ldr r1, _0801F5B8 @ =gLastUsedItem
    mov r3, r8
    ldrb r0, [r3]
    muls r0, r4
    add r0, r9
    ldrh r0, [r0, 0x2E]
    strh r0, [r1]
    ldrb r0, [r3]
    muls r0, r4
    add r0, r9
    movs r5, 0
    movs r1, 0
    strh r1, [r0, 0x2E]
    ldr r2, _0801F5BC @ =gWishFutureKnock
    adds r2, 0x29
    adds r2, r6, r2
    ldr r3, _0801F5C0 @ =gBitTable
    ldr r1, _0801F5C4 @ =gBattlePartyID
    mov r4, r8
    ldrb r0, [r4]
    lsls r0, 1
    adds r0, r1
    ldrh r0, [r0]
    lsls r0, 2
    adds r0, r3
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldr r4, _0801F5C8 @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F5CC @ =BattleScript_KnockedOff
    str r0, [r4]
    ldr r1, _0801F5D0 @ =gSharedMem
    mov r2, r8
    ldrb r0, [r2]
    lsls r0, 1
    ldr r3, _0801F5D4 @ =0x000160e8
    adds r0, r3
    adds r0, r1
    strb r5, [r0]
    ldrb r0, [r2]
    lsls r0, 1
    ldr r4, _0801F5D8 @ =0x000160e9
    adds r0, r4
    adds r0, r1
    strb r5, [r0]
    b _0801F5FA
    .align 2, 0
_0801F5B8: .4byte gLastUsedItem
_0801F5BC: .4byte gWishFutureKnock
_0801F5C0: .4byte gBitTable
_0801F5C4: .4byte gBattlePartyID
_0801F5C8: .4byte gBattlescriptCurrInstr
_0801F5CC: .4byte BattleScript_KnockedOff
_0801F5D0: .4byte gSharedMem
_0801F5D4: .4byte 0x000160e8
_0801F5D8: .4byte 0x000160e9
_0801F5DC:
    ldr r1, _0801F5E8 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x1
    str r0, [r1]
    b _0801F5FA
    .align 2, 0
_0801F5E8: .4byte gBattlescriptCurrInstr
_0801F5EC:
    ldr r4, _0801F60C @ =gBattlescriptCurrInstr
    ldr r0, [r4]
    adds r0, 0x1
    bl b_movescr_stack_push
    ldr r0, _0801F610 @ =BattleScript_SAtkDown2
_0801F5F8:
    str r0, [r4]
_0801F5FA:
    add sp, 0x8
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_0801F60C: .4byte gBattlescriptCurrInstr
_0801F610: .4byte BattleScript_SAtkDown2
        .syntax divided

	.code	16
.Lfe34:
	.size	 SetMoveEffect,.Lfe34-SetMoveEffect
	.align	2, 0
	.type	 atk15_seteffectwithchancetarget,function
	.thumb_func
atk15_seteffectwithchancetarget:
	push	{r4, lr}
	ldr	r2, .L600
	ldr	r0, .L600+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x20
	bne	.L591	@cond_branch
	ldr	r2, .L600+0x8
	ldr	r0, .L600+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	lsl	r4, r0, #0x1
	b	.L592
.L601:
	.align	2, 0
.L600:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L591:
	ldr	r2, .L602
	ldr	r0, .L602+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x5]
.L592:
	ldr	r3, .L602+0x8
	ldrb	r2, [r3, #0x3]
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldr	r0, .L602+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L593	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r3, #0x3]
	b	.L599
.L603:
	.align	2, 0
.L602:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleCommunication
	.word	gBattleMoveFlags
.L593:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r4
	bhi	.L595	@cond_branch
	ldr	r0, .L604
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0
	beq	.L595	@cond_branch
	ldr	r0, .L604+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L595	@cond_branch
	cmp	r4, #0x63
	bls	.L596	@cond_branch
.L599:
	mov	r0, #0x0
	mov	r1, #0x80
	bl	SetMoveEffect
	b	.L594
.L605:
	.align	2, 0
.L604:
	.word	gBattleCommunication
	.word	gBattleMoveFlags
.L596:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	b	.L594
.L595:
	ldr	r1, .L606
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L594:
	ldr	r0, .L606+0x4
	mov	r1, #0x0
	strb	r1, [r0, #0x3]
	ldr	r0, .L606+0x8
	ldr	r2, .L606+0xc
	add	r0, r0, r2
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L607:
	.align	2, 0
.L606:
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gSharedMem
	.word	0x16112
.Lfe35:
	.size	 atk15_seteffectwithchancetarget,.Lfe35-atk15_seteffectwithchancetarget
	.align	2, 0
	.type	 atk16_seteffectprimary,function
	.thumb_func
atk16_seteffectprimary:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	SetMoveEffect
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 atk16_seteffectprimary,.Lfe36-atk16_seteffectprimary
	.align	2, 0
	.type	 atk17_seteffectsecondary,function
	.thumb_func
atk17_seteffectsecondary:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 atk17_seteffectsecondary,.Lfe37-atk17_seteffectsecondary
	.align	2, 0
	.type	 atk18_status_effect_clear,function
	.thumb_func
atk18_status_effect_clear:
	push	{lr}
	ldr	r0, .L614
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r2, .L614+0x4
	strb	r0, [r2]
	ldr	r3, .L614+0x8
	ldrb	r0, [r3, #0x3]
	cmp	r0, #0x6
	bhi	.L611	@cond_branch
	ldr	r1, .L614+0xc
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x4c
	b	.L613
.L615:
	.align	2, 0
.L614:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleCommunication
	.word	gBattleMons
.L611:
	ldr	r1, .L616
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
.L613:
	add	r2, r2, r1
	ldr	r1, .L616+0x4
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L616+0x8
	mov	r2, #0x0
	strb	r2, [r0, #0x3]
	ldr	r1, .L616+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	ldr	r0, .L616+0x10
	ldr	r1, .L616+0x14
	add	r0, r0, r1
	strb	r2, [r0]
	pop	{r0}
	bx	r0
.L617:
	.align	2, 0
.L616:
	.word	gBattleMons
	.word	gStatusFlagsForMoveEffects
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	gSharedMem
	.word	0x16112
.Lfe38:
	.size	 atk18_status_effect_clear,.Lfe38-atk18_status_effect_clear
	.align	2, 0
	.type	 atk19_faint_pokemon,function
	.thumb_func
atk19_faint_pokemon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L636
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x2]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L619	@cond_branch
	ldrb	r0, [r2, #0x1]
	bl	GetBattleBank
	ldr	r5, .L636+0x4
	strb	r0, [r5]
	ldr	r2, .L636+0x8
	ldr	r1, .L636+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB6696
	b	.L625	@long jump
.LCB6696:
	ldr	r1, [r6]
	ldrb	r4, [r1, #0x3]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	bl	b_movescr_stack_pop_cursor
	str	r4, [r6]
	ldrb	r0, [r5]
	bl	GetBankSide
	ldr	r1, .L636+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r1, .L636+0x14
	and	r1, r1, r2
	strh	r1, [r0]
	b	.L622
.L637:
	.align	2, 0
.L636:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gHitMarker
	.word	gBitTable
	.word	gSideAffecting
	.word	0xfdff
.L619:
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x1
	bne	.L623	@cond_branch
	ldr	r1, .L638
	ldr	r0, .L638+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L638+0x8
	ldrb	r7, [r0]
	ldr	r4, .L638+0xc
	b	.L624
.L639:
	.align	2, 0
.L638:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBankTarget
	.word	gUnknown_081D8C58
.L623:
	ldr	r1, .L640
	ldr	r0, .L640+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L640+0x8
	ldrb	r7, [r0]
	ldr	r4, .L640+0xc
.L624:
	ldr	r0, .L640+0x10
	ldrb	r1, [r0]
	ldr	r0, .L640+0x14
	mov	ip, r0
	ldr	r2, .L640
	mov	r8, r2
	ldrb	r2, [r2]
	lsl	r0, r2, #0x2
	add	r0, r0, ip
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB6789
	b	.L625	@long jump
.LCB6789:
	ldr	r3, .L640+0x18
	mov	sl, r3
	mov	r5, #0x58
	mov	r9, r5
	mov	r0, r9
	mul	r0, r0, r2
	add	r0, r0, sl
	ldrh	r3, [r0, #0x28]
	cmp	r3, #0
	beq	.LCB6800
	b	.L625	@long jump
.LCB6800:
	ldr	r2, .L640+0x1c
	lsl	r1, r7, #0x1
	ldr	r5, .L640+0x20
	add	r0, r1, r5
	add	r0, r0, r2
	strb	r3, [r0]
	ldr	r0, .L640+0x24
	add	r1, r1, r0
	add	r1, r1, r2
	strb	r3, [r1]
	lsl	r1, r7, #0x2
	add	r5, r5, #0x54
	add	r0, r1, r5
	add	r0, r0, r2
	strb	r3, [r0]
	add	r5, r5, #0x1
	add	r0, r1, r5
	add	r0, r0, r2
	strb	r3, [r0]
	add	r5, r5, #0x1
	add	r0, r1, r5
	add	r0, r0, r2
	strb	r3, [r0]
	ldr	r0, .L640+0x28
	add	r1, r1, r0
	add	r1, r1, r2
	strb	r3, [r1]
	ldr	r5, .L640+0x2c
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r5]
	orr	r0, r0, r1
	str	r0, [r5]
	ldr	r0, [r6]
	add	r0, r0, #0x7
	bl	b_movescr_stack_push
	str	r4, [r6]
	mov	r2, r8
	ldrb	r0, [r2]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L626	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r5]
	ldr	r1, .L640+0x30
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L627	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L627:
	mov	r0, r9
	mul	r0, r0, r7
	add	r0, r0, sl
	add	r3, r0, #0
	add	r3, r3, #0x2a
	mov	r4, r8
	ldrb	r2, [r4]
	mov	r0, r9
	mul	r0, r0, r2
	add	r0, r0, sl
	add	r1, r0, #0
	add	r1, r1, #0x2a
	ldrb	r0, [r3]
	ldrb	r5, [r1]
	cmp	r0, r5
	bls	.L631	@cond_branch
	ldrb	r1, [r1]
	sub	r0, r0, r1
	cmp	r0, #0x1d
	ble	.L629	@cond_branch
	ldr	r1, .L640+0x34
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L640+0x38
	add	r0, r0, r1
	mov	r1, #0x8
	bl	AdjustFriendship
	b	.L631
.L641:
	.align	2, 0
.L640:
	.word	gActiveBank
	.word	gBankTarget
	.word	gBankAttacker
	.word	gUnknown_081D8C65
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gSharedMem
	.word	0x160ac
	.word	0x160ad
	.word	0x16103
	.word	gHitMarker
	.word	gBattleResults
	.word	gBattlePartyID
	.word	gPlayerParty
.L629:
	ldr	r1, .L642
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L642+0x4
	add	r0, r0, r1
	mov	r1, #0x6
	bl	AdjustFriendship
	b	.L631
.L643:
	.align	2, 0
.L642:
	.word	gBattlePartyID
	.word	gPlayerParty
.L626:
	ldr	r1, .L644
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0xfe
	bhi	.L632	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
.L632:
	ldr	r2, .L644+0x4
	ldrb	r0, [r2]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, sl
	ldrh	r0, [r0]
	strh	r0, [r1, #0x20]
.L631:
	ldr	r0, .L644+0x8
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L633	@cond_branch
	ldr	r6, .L644+0xc
	ldr	r0, .L644+0x10
	ldrb	r0, [r0]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L633	@cond_branch
	ldr	r4, .L644+0x14
	ldr	r0, [r4]
	bl	b_movescr_stack_push
	ldr	r1, .L644+0x18
	mov	r0, r7
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	str	r0, [r1]
	ldr	r0, .L644+0x1c
	str	r0, [r4]
.L633:
	ldr	r1, .L644+0x20
	ldr	r6, .L644+0x24
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB7013
	b	.L622	@long jump
.LCB7013:
	ldr	r0, .L644+0x8
	ldr	r5, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r5, r5, r0
	cmp	r5, #0
	bne	.L622	@cond_branch
	ldr	r4, .L644+0x10
	mov	r8, r4
	ldrb	r0, [r4]
	bl	GetBankSide
	add	r4, r0, #0
	ldrb	r0, [r6]
	bl	GetBankSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L622	@cond_branch
	ldr	r0, .L644+0xc
	mov	r9, r0
	mov	r1, r8
	ldrb	r2, [r1]
	mov	r7, #0x58
	mov	r3, r2
	mul	r3, r3, r7
	add	r0, r3, r0
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L622	@cond_branch
	ldr	r0, .L644+0x28
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L622	@cond_branch
	ldr	r1, .L644+0x2c
	ldr	r4, .L644+0x30
	add	r0, r2, r4
	add	r0, r0, r1
	ldrb	r4, [r0]
	add	r0, r4, r3
	mov	r6, r9
	add	r6, r6, #0x24
	add	r0, r0, r6
	strb	r5, [r0]
	ldr	r5, .L644+0x14
	ldr	r0, [r5]
	bl	b_movescr_stack_push
	ldr	r0, .L644+0x34
	str	r0, [r5]
	ldr	r5, .L644+0x4
	mov	r1, r8
	ldrb	r0, [r1]
	strb	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	EmitSetAttributes
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	ldr	r1, .L644+0x38
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	lsl	r4, r4, #0x1
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r7
	add	r0, r4, r0
	mov	r2, r9
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r3, r8
	ldrb	r0, [r3]
	mul	r0, r0, r7
	add	r4, r4, r0
	add	r4, r4, r2
	ldrh	r0, [r4]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	b	.L622
.L645:
	.align	2, 0
.L644:
	.word	gBattleResults
	.word	gActiveBank
	.word	gHitMarker
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveDamage
	.word	gUnknown_081D9156
	.word	gStatuses3
	.word	gBankTarget
	.word	gCurrentMove
	.word	gSharedMem
	.word	0x1608c
	.word	gUnknown_081D9468
	.word	gBattleTextBuff1
.L625:
	ldr	r0, [r6]
	add	r0, r0, #0x7
	str	r0, [r6]
.L622:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 atk19_faint_pokemon,.Lfe39-atk19_faint_pokemon
	.align	2, 0
	.type	 atk1A_faint_animation,function
	.thumb_func
atk1A_faint_animation:
	push	{r4, r5, lr}
	ldr	r0, .L648
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L647	@cond_branch
	ldr	r5, .L648+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L648+0x8
	strb	r0, [r4]
	mov	r0, #0x0
	bl	Emitcmd10
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L647:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.Lfe40:
	.size	 atk1A_faint_animation,.Lfe40-atk1A_faint_animation
	.align	2, 0
	.type	 atk1B_faint_effects_clear,function
	.thumb_func
atk1B_faint_effects_clear:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L652
	ldr	r6, [r0]
	cmp	r6, #0
	bne	.L651	@cond_branch
	ldr	r5, .L652+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L652+0x8
	strb	r0, [r4]
	ldr	r1, .L652+0xc
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	str	r6, [r0]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	bl	UndoEffectsAfterFainting
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L651:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
.Lfe41:
	.size	 atk1B_faint_effects_clear,.Lfe41-atk1B_faint_effects_clear
	.align	2, 0
	.type	 atk1C_jumpifstatus,function
	.thumb_func
atk1C_jumpifstatus:
	push	{r4, r5, lr}
	ldr	r5, .L657
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	add	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	add	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	add	r4, r4, r1
	ldrb	r3, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	lsl	r1, r1, #0x8
	add	r3, r3, r1
	ldrb	r1, [r2, #0x8]
	lsl	r1, r1, #0x10
	add	r3, r3, r1
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x18
	add	r3, r3, r1
	ldr	r2, .L657+0x4
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L655	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L655	@cond_branch
	str	r3, [r5]
	b	.L656
.L658:
	.align	2, 0
.L657:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L655:
	ldr	r1, .L659
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L656:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L660:
	.align	2, 0
.L659:
	.word	gBattlescriptCurrInstr
.Lfe42:
	.size	 atk1C_jumpifstatus,.Lfe42-atk1C_jumpifstatus
	.align	2, 0
	.type	 atk1D_jumpifstatus2,function
	.thumb_func
atk1D_jumpifstatus2:
	push	{r4, r5, lr}
	ldr	r5, .L664
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	add	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	add	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	add	r4, r4, r1
	ldrb	r3, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	lsl	r1, r1, #0x8
	add	r3, r3, r1
	ldrb	r1, [r2, #0x8]
	lsl	r1, r1, #0x10
	add	r3, r3, r1
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x18
	add	r3, r3, r1
	ldr	r2, .L664+0x4
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L662	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L662	@cond_branch
	str	r3, [r5]
	b	.L663
.L665:
	.align	2, 0
.L664:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L662:
	ldr	r1, .L666
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L663:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L667:
	.align	2, 0
.L666:
	.word	gBattlescriptCurrInstr
.Lfe43:
	.size	 atk1D_jumpifstatus2,.Lfe43-atk1D_jumpifstatus2
	.align	2, 0
	.type	 atk1E_jumpifability,function
	.thumb_func
atk1E_jumpifability:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L680
	ldr	r2, [r6]
	ldrb	r5, [r2, #0x2]
	mov	r8, r5
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	add	r7, r1, r0
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x8
	bne	.L669	@cond_branch
	ldr	r0, .L680+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xd
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L677	@cond_branch
	ldr	r1, .L680+0x8
	strb	r5, [r1]
	str	r7, [r6]
	sub	r4, r4, #0x1
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	b	.L679
.L681:
	.align	2, 0
.L680:
	.word	gBattlescriptCurrInstr
	.word	gBankAttacker
	.word	gLastUsedAbility
.L669:
	cmp	r0, #0x9
	bne	.L673	@cond_branch
	ldr	r0, .L682
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xc
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L677	@cond_branch
	ldr	r1, .L682+0x4
	strb	r5, [r1]
	str	r7, [r6]
	sub	r4, r4, #0x1
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	b	.L679
.L683:
	.align	2, 0
.L682:
	.word	gBankAttacker
	.word	gLastUsedAbility
.L673:
	ldrb	r0, [r2, #0x1]
	bl	GetBattleBank
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L684
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, r8
	bne	.L677	@cond_branch
	ldr	r0, .L684+0x4
	strb	r1, [r0]
	str	r7, [r6]
	ldrb	r1, [r0]
	add	r0, r4, #0
.L679:
	bl	RecordAbilityBattle
	ldr	r0, .L684+0x8
	ldr	r1, .L684+0xc
	add	r0, r0, r1
	strb	r4, [r0]
	b	.L672
.L685:
	.align	2, 0
.L684:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gSharedMem
	.word	0x160f8
.L677:
	ldr	r0, [r6]
	add	r0, r0, #0x7
	str	r0, [r6]
.L672:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 atk1E_jumpifability,.Lfe44-atk1E_jumpifability
	.align	2, 0
	.type	 atk1F_jumpifsideaffecting,function
	.thumb_func
atk1F_jumpifsideaffecting:
	push	{r4, r5, r6, lr}
	ldr	r0, .L692
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x1]
	cmp	r4, #0x1
	bne	.L687	@cond_branch
	ldr	r0, .L692+0x4
	ldrb	r0, [r0]
	bl	GetBankIdentity
	b	.L691
.L693:
	.align	2, 0
.L692:
	.word	gBattlescriptCurrInstr
	.word	gBankAttacker
.L687:
	ldr	r0, .L694
	ldrb	r0, [r0]
	bl	GetBankIdentity
	mov	r4, #0x1
.L691:
	and	r4, r4, r0
	ldr	r6, .L694+0x4
	ldr	r3, [r6]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r1, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x18
	add	r5, r1, r0
	ldr	r1, .L694+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L689	@cond_branch
	str	r5, [r6]
	b	.L690
.L695:
	.align	2, 0
.L694:
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
	.word	gSideAffecting
.L689:
	add	r0, r3, #0
	add	r0, r0, #0x8
	str	r0, [r6]
.L690:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 atk1F_jumpifsideaffecting,.Lfe45-atk1F_jumpifsideaffecting
	.align	2, 0
	.type	 atk20_jumpifstat,function
	.thumb_func
atk20_jumpifstat:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L715
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L715+0x4
	ldr	r3, [r4]
	mov	r1, #0x58
	mul	r0, r0, r1
	ldrb	r1, [r3, #0x3]
	add	r0, r0, r1
	add	r2, r2, #0x18
	add	r0, r0, r2
	ldrb	r2, [r0]
	ldrb	r0, [r3, #0x2]
	cmp	r0, #0x5
	bhi	.L697	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L715+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L716:
	.align	2, 0
.L715:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	.L710
	.align	2, 0
	.align	2, 0
.L710:
	.word	.L698
	.word	.L700
	.word	.L702
	.word	.L704
	.word	.L706
	.word	.L708
.L698:
	ldr	r0, .L717
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bne	.L697	@cond_branch
	b	.L714
.L718:
	.align	2, 0
.L717:
	.word	gBattlescriptCurrInstr
.L700:
	ldr	r0, .L719
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	beq	.L697	@cond_branch
	b	.L714
.L720:
	.align	2, 0
.L719:
	.word	gBattlescriptCurrInstr
.L702:
	ldr	r0, .L721
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bls	.L697	@cond_branch
	b	.L714
.L722:
	.align	2, 0
.L721:
	.word	gBattlescriptCurrInstr
.L704:
	ldr	r0, .L723
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bcs	.L697	@cond_branch
	b	.L714
.L724:
	.align	2, 0
.L723:
	.word	gBattlescriptCurrInstr
.L706:
	ldr	r0, .L725
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L697	@cond_branch
	b	.L714
.L726:
	.align	2, 0
.L725:
	.word	gBattlescriptCurrInstr
.L708:
	ldr	r0, .L727
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L697	@cond_branch
.L714:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L697:
	cmp	r5, #0
	beq	.L712	@cond_branch
	ldr	r3, .L727
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	b	.L713
.L728:
	.align	2, 0
.L727:
	.word	gBattlescriptCurrInstr
.L712:
	ldr	r1, .L729
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
.L713:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L730:
	.align	2, 0
.L729:
	.word	gBattlescriptCurrInstr
.Lfe46:
	.size	 atk20_jumpifstat,.Lfe46-atk20_jumpifstat
	.align	2, 0
	.type	 atk21_jumpifstatus3,function
	.thumb_func
atk21_jumpifstatus3:
	push	{r4, r5, r6, lr}
	ldr	r4, .L739
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r5, .L739+0x4
	strb	r0, [r5]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	add	r6, r1, r0
	ldrb	r1, [r2, #0x7]
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0xa]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r0, [r2, #0x6]
	cmp	r0, #0
	beq	.L732	@cond_branch
	ldr	r0, .L739+0x8
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L736	@cond_branch
	b	.L738
.L740:
	.align	2, 0
.L739:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gStatuses3
.L732:
	ldr	r0, .L741
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L736	@cond_branch
.L738:
	str	r3, [r4]
	b	.L735
.L742:
	.align	2, 0
.L741:
	.word	gStatuses3
.L736:
	add	r0, r2, #0
	add	r0, r0, #0xb
	str	r0, [r4]
.L735:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 atk21_jumpifstatus3,.Lfe47-atk21_jumpifstatus3
	.align	2, 0
	.type	 atk22_jumpiftype,function
	.thumb_func
atk22_jumpiftype:
	push	{r4, r5, r6, lr}
	ldr	r4, .L747
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r5, [r3, #0x2]
	ldrb	r2, [r3, #0x3]
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x8
	add	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x10
	add	r2, r2, r1
	ldrb	r1, [r3, #0x6]
	lsl	r1, r1, #0x18
	add	r6, r2, r1
	ldr	r2, .L747+0x4
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r5
	beq	.L745	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r5
	bne	.L744	@cond_branch
.L745:
	str	r6, [r4]
	b	.L746
.L748:
	.align	2, 0
.L747:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L744:
	add	r0, r3, #0x7
	str	r0, [r4]
.L746:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 atk22_jumpiftype,.Lfe48-atk22_jumpiftype
	.align	2, 0
	.type	 atk23_getexp,function
	.thumb_func
atk23_getexp:
	.syntax unified
            push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    movs r6, 0
    ldr r0, _0802004C @ =gSharedMem + 0x1605C
    mov r10, r0
    ldr r0, _08020050 @ =gBattlescriptCurrInstr
    ldr r0, [r0]
    ldrb r0, [r0, 0x1]
    bl GetBattleBank
    ldr r1, _08020054 @ =gBank1
    strb r0, [r1]
    ldr r2, _08020058 @ =gSentPokesToOpponent
    movs r1, 0x2
    ands r1, r0
    lsls r1, 24
    lsrs r1, 25
    adds r1, r2
    ldrb r1, [r1]
    mov r8, r1
    mov r0, r10
    subs r0, 0x4D
    ldrb r0, [r0]
    cmp r0, 0x6
    bls _08020040
    bl _08020996
_08020040:
    lsls r0, 2
    ldr r1, _0802005C @ =_08020060
    adds r0, r1
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_0802004C: .4byte gSharedMem + 0x1605C
_08020050: .4byte gBattlescriptCurrInstr
_08020054: .4byte gBank1
_08020058: .4byte gSentPokesToOpponent
_0802005C: .4byte _08020060
    .align 2, 0
_08020060:
    .4byte _0802007C
    .4byte _080200FC
    .4byte _08020216
    .4byte _0802055C
    .4byte _08020648
    .4byte _08020910
    .4byte _0802096C
_0802007C:
    ldr r4, _080200A8 @ =gBank1
    ldrb r0, [r4]
    bl GetBankSide
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    bne _08020098
    ldr r0, _080200AC @ =gBattleTypeFlags
    ldrh r1, [r0]
    ldr r0, _080200B0 @ =0x00000982
    ands r0, r1
    cmp r0, 0
    beq _080200BC
_08020098:
    ldr r0, _080200B4 @ =gSharedMem
    ldr r1, _080200B8 @ =0x0001600f
    adds r0, r1
    movs r1, 0x6
    strb r1, [r0]
    bl _08020996
    .align 2, 0
_080200A8: .4byte gBank1
_080200AC: .4byte gBattleTypeFlags
_080200B0: .4byte 0x00000982
_080200B4: .4byte gSharedMem
_080200B8: .4byte 0x0001600f
_080200BC:
    ldr r2, _080200E8 @ =gSharedMem
    ldr r3, _080200EC @ =0x0001600f
    adds r1, r2, r3
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
    ldr r0, _080200F0 @ =0x00016113
    adds r2, r0
    ldr r3, _080200F4 @ =gBitTable
    ldr r1, _080200F8 @ =gBattlePartyID
    ldrb r0, [r4]
    lsls r0, 1
    adds r0, r1
    ldrh r0, [r0]
    lsls r0, 2
    adds r0, r3
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    bl _08020996
    .align 2, 0
_080200E8: .4byte gSharedMem
_080200EC: .4byte 0x0001600f
_080200F0: .4byte 0x00016113
_080200F4: .4byte gBitTable
_080200F8: .4byte gBattlePartyID
_080200FC:
    movs r5, 0
    movs r7, 0
    ldr r1, _08020150 @ =gSaveBlock1 + 0x3688
    mov r9, r1
_08020104:
    movs r0, 0x64
    adds r1, r7, 0
    muls r1, r0
    ldr r0, _08020154 @ =gPlayerParty
    adds r4, r1, r0
    adds r0, r4, 0
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _0802016A
    adds r0, r4, 0
    movs r1, 0x39
    bl GetMonData
    cmp r0, 0
    beq _0802016A
    ldr r0, _08020158 @ =gBitTable
    lsls r1, r7, 2
    adds r1, r0
    ldr r0, [r1]
    mov r2, r8
    ands r0, r2
    cmp r0, 0
    beq _08020138
    adds r5, 0x1
_08020138:
    adds r0, r4, 0
    movs r1, 0xC
    bl GetMonData
    lsls r0, 16
    lsrs r0, 16
    cmp r0, 0xAF
    bne _0802015C
    mov r3, r9
    ldrb r4, [r3]
    b _08020164
    .align 2, 0
_08020150: .4byte gSaveBlock1 + 0x3688
_08020154: .4byte gPlayerParty
_08020158: .4byte gBitTable
_0802015C:
    bl ItemId_GetHoldEffect
    lsls r0, 24
    lsrs r4, r0, 24
_08020164:
    cmp r4, 0x19
    bne _0802016A
    adds r6, 0x1
_0802016A:
    adds r7, 0x1
    cmp r7, 0x5
    ble _08020104
    ldr r3, _080201D0 @ =gBaseStats
    ldr r2, _080201D4 @ =gBattleMons
    ldr r0, _080201D8 @ =gBank1
    ldrb r1, [r0]
    movs r0, 0x58
    muls r1, r0
    adds r1, r2
    ldrh r2, [r1]
    lsls r0, r2, 3
    subs r0, r2
    lsls r0, 2
    adds r0, r3
    ldrb r2, [r0, 0x9]
    adds r1, 0x2A
    ldrb r0, [r1]
    muls r0, r2
    movs r1, 0x7
    bl __divsi3
    lsls r0, 16
    lsrs r1, r0, 16
    cmp r6, 0
    beq _080201E0
    lsrs r4, r0, 17
    adds r0, r4, 0
    adds r1, r5, 0
    bl __divsi3
    mov r1, r10
    strh r0, [r1]
    lsls r0, 16
    cmp r0, 0
    bne _080201B6
    movs r0, 0x1
    strh r0, [r1]
_080201B6:
    ldr r5, _080201DC @ =gExpShareExp
    adds r0, r4, 0
    adds r1, r6, 0
    bl __divsi3
    strh r0, [r5]
    lsls r0, 16
    cmp r0, 0
    bne _080201FA
    movs r0, 0x1
    strh r0, [r5]
    b _080201FA
    .align 2, 0
_080201D0: .4byte gBaseStats
_080201D4: .4byte gBattleMons
_080201D8: .4byte gBank1
_080201DC: .4byte gExpShareExp
_080201E0:
    adds r0, r1, 0
    adds r1, r5, 0
    bl __divsi3
    mov r2, r10
    strh r0, [r2]
    lsls r0, 16
    cmp r0, 0
    bne _080201F6
    movs r0, 0x1
    strh r0, [r2]
_080201F6:
    ldr r0, _08020248 @ =gExpShareExp
    strh r6, [r0]
_080201FA:
    ldr r1, _0802024C @ =gSharedMem
    ldr r3, _08020250 @ =0x0001600f
    adds r2, r1, r3
    ldrb r0, [r2]
    adds r0, 0x1
    movs r3, 0
    strb r0, [r2]
    ldr r2, _08020254 @ =0x00016018
    adds r0, r1, r2
    strb r3, [r0]
    ldr r3, _08020258 @ =0x0001605f
    adds r1, r3
    mov r0, r8
    strb r0, [r1]
_08020216:
    ldr r0, _0802025C @ =gBattleExecBuffer
    ldr r0, [r0]
    cmp r0, 0
    beq _08020220
    b _08020996
_08020220:
    ldr r0, _0802024C @ =gSharedMem
    ldr r1, _08020254 @ =0x00016018
    adds r0, r1
    ldrb r1, [r0]
    movs r0, 0x64
    muls r0, r1
    ldr r1, _08020260 @ =gPlayerParty
    adds r0, r1
    movs r1, 0xC
    bl GetMonData
    lsls r0, 16
    lsrs r0, 16
    cmp r0, 0xAF
    bne _0802026C
    ldr r0, _08020264 @ =gSaveBlock1
    ldr r2, _08020268 @ =0x00003688
    adds r0, r2
    ldrb r4, [r0]
    b _08020274
    .align 2, 0
_08020248: .4byte gExpShareExp
_0802024C: .4byte gSharedMem
_08020250: .4byte 0x0001600f
_08020254: .4byte 0x00016018
_08020258: .4byte 0x0001605f
_0802025C: .4byte gBattleExecBuffer
_08020260: .4byte gPlayerParty
_08020264: .4byte gSaveBlock1
_08020268: .4byte 0x00003688
_0802026C:
    bl ItemId_GetHoldEffect
    lsls r0, 24
    lsrs r4, r0, 24
_08020274:
    ldr r5, _08020294 @ =gSharedMem
    cmp r4, 0x19
    beq _080202A0
    ldr r3, _08020298 @ =0x0001605f
    adds r1, r5, r3
    ldrb r0, [r1]
    movs r2, 0x1
    ands r2, r0
    cmp r2, 0
    bne _080202A0
    lsrs r0, 1
    strb r0, [r1]
    ldr r0, _0802029C @ =0x0001600f
    adds r1, r5, r0
    b _080202C8
    .align 2, 0
_08020294: .4byte gSharedMem
_08020298: .4byte 0x0001605f
_0802029C: .4byte 0x0001600f
_080202A0:
    ldr r1, _080202D4 @ =0x00016018
    adds r0, r5, r1
    ldrb r1, [r0]
    movs r0, 0x64
    muls r0, r1
    ldr r1, _080202D8 @ =gPlayerParty
    adds r0, r1
    movs r1, 0x38
    bl GetMonData
    cmp r0, 0x64
    bne _080202E8
    ldr r2, _080202DC @ =0x0001605f
    adds r1, r5, r2
    ldrb r0, [r1]
    lsrs r0, 1
    movs r2, 0
    strb r0, [r1]
    ldr r3, _080202E0 @ =0x0001600f
    adds r1, r5, r3
_080202C8:
    movs r0, 0x5
    strb r0, [r1]
    ldr r0, _080202E4 @ =gBattleMoveDamage
    str r2, [r0]
    b _08020996
    .align 2, 0
_080202D4: .4byte 0x00016018
_080202D8: .4byte gPlayerParty
_080202DC: .4byte 0x0001605f
_080202E0: .4byte 0x0001600f
_080202E4: .4byte gBattleMoveDamage
_080202E8:
    ldr r0, _0802034C @ =gBattleTypeFlags
    ldrh r1, [r0]
    movs r0, 0x8
    ands r0, r1
    cmp r0, 0
    bne _08020316
    ldr r0, _08020350 @ =gBattleMons
    ldrh r0, [r0, 0x28]
    cmp r0, 0
    beq _08020316
    ldr r0, _08020354 @ =0x0001601b
    adds r5, r0
    ldrb r0, [r5]
    cmp r0, 0
    bne _08020316
    bl BattleMusicStop
    ldr r0, _08020358 @ =0x00000161
    bl PlayBGM
    ldrb r0, [r5]
    adds r0, 0x1
    strb r0, [r5]
_08020316:
    ldr r5, _0802035C @ =gSharedMem
    ldr r1, _08020360 @ =0x00016018
    adds r0, r5, r1
    ldrb r1, [r0]
    movs r0, 0x64
    muls r0, r1
    ldr r1, _08020364 @ =gPlayerParty
    adds r0, r1
    movs r1, 0x39
    bl GetMonData
    cmp r0, 0
    bne _08020332
    b _0802051E
_08020332:
    ldr r2, _08020368 @ =0x0001605f
    adds r0, r5, r2
    ldrb r0, [r0]
    movs r3, 0x1
    ands r3, r0
    cmp r3, 0
    beq _08020370
    ldr r1, _0802036C @ =gBattleMoveDamage
    mov r3, r10
    ldrh r0, [r3]
    str r0, [r1]
    mov r8, r1
    b _08020376
    .align 2, 0
_0802034C: .4byte gBattleTypeFlags
_08020350: .4byte gBattleMons
_08020354: .4byte 0x0001601b
_08020358: .4byte 0x00000161
_0802035C: .4byte gSharedMem
_08020360: .4byte 0x00016018
_08020364: .4byte gPlayerParty
_08020368: .4byte 0x0001605f
_0802036C: .4byte gBattleMoveDamage
_08020370:
    ldr r0, _080203EC @ =gBattleMoveDamage
    str r3, [r0]
    mov r8, r0
_08020376:
    cmp r4, 0x19
    bne _08020386
    ldr r0, _080203F0 @ =gExpShareExp
    ldrh r1, [r0]
    mov r2, r8
    ldr r0, [r2]
    adds r0, r1
    str r0, [r2]
_08020386:
    cmp r4, 0x28
    bne _0802039C
    mov r3, r8
    ldr r1, [r3]
    movs r0, 0x96
    muls r0, r1
    movs r1, 0x64
    bl __divsi3
    mov r1, r8
    str r0, [r1]
_0802039C:
    ldr r0, _080203F4 @ =gBattleTypeFlags
    ldrh r1, [r0]
    movs r0, 0x8
    ands r0, r1
    cmp r0, 0
    beq _080203B8
    ldr r4, _080203EC @ =gBattleMoveDamage
    ldr r1, [r4]
    movs r0, 0x96
    muls r0, r1
    movs r1, 0x64
    bl __divsi3
    str r0, [r4]
_080203B8:
    ldr r0, _080203F8 @ =gSharedMem
    ldr r2, _080203FC @ =0x00016018
    adds r0, r2
    ldrb r1, [r0]
    movs r0, 0x64
    muls r0, r1
    ldr r1, _08020400 @ =gPlayerParty
    adds r0, r1
    bl IsTradedMon
    lsls r0, 24
    cmp r0, 0
    beq _08020404
    ldr r4, _080203EC @ =gBattleMoveDamage
    ldr r1, [r4]
    movs r0, 0x96
    muls r0, r1
    movs r1, 0x64
    bl __divsi3
    str r0, [r4]
    movs r7, 0xA5
    lsls r7, 1
    mov r8, r4
    b _0802040A
    .align 2, 0
_080203EC: .4byte gBattleMoveDamage
_080203F0: .4byte gExpShareExp
_080203F4: .4byte gBattleTypeFlags
_080203F8: .4byte gSharedMem
_080203FC: .4byte 0x00016018
_08020400: .4byte gPlayerParty
_08020404:
    ldr r7, _0802043C @ =0x00000149
    ldr r3, _08020440 @ =gBattleMoveDamage
    mov r8, r3
_0802040A:
    ldr r0, _08020444 @ =gBattleTypeFlags
    ldrh r0, [r0]
    movs r1, 0x1
    ands r1, r0
    cmp r1, 0
    beq _08020488
    ldr r1, _08020448 @ =gBattlePartyID
    ldr r0, _0802044C @ =gSharedMem
    ldr r3, _08020450 @ =0x00016018
    adds r2, r0, r3
    ldrh r1, [r1, 0x4]
    adds r5, r0, 0
    ldr r4, _08020454 @ =gBitTable
    ldr r3, _08020458 @ =gAbsentBankFlags
    ldrb r2, [r2]
    cmp r1, r2
    bne _08020460
    ldrb r1, [r3]
    ldr r0, [r4, 0x8]
    ands r1, r0
    cmp r1, 0
    bne _08020460
    ldr r0, _0802045C @ =0x000160a2
    adds r1, r5, r0
    b _0802047C
    .align 2, 0
_0802043C: .4byte 0x00000149
_08020440: .4byte gBattleMoveDamage
_08020444: .4byte gBattleTypeFlags
_08020448: .4byte gBattlePartyID
_0802044C: .4byte gSharedMem
_08020450: .4byte 0x00016018
_08020454: .4byte gBitTable
_08020458: .4byte gAbsentBankFlags
_0802045C: .4byte 0x000160a2
_08020460:
    ldrb r2, [r3]
    ldr r0, [r4]
    ands r2, r0
    cmp r2, 0
    bne _08020478
    ldr r1, _08020474 @ =0x000160a2
    adds r0, r5, r1
    strb r2, [r0]
    b _08020490
    .align 2, 0
_08020474: .4byte 0x000160a2
_08020478:
    ldr r2, _08020484 @ =0x000160a2
    adds r1, r5, r2
_0802047C:
    movs r0, 0x2
    strb r0, [r1]
    b _08020490
    .align 2, 0
_08020484: .4byte 0x000160a2
_08020488:
    ldr r0, _08020530 @ =gSharedMem
    ldr r3, _08020534 @ =0x000160a2
    adds r0, r3
    strb r1, [r0]
_08020490:
    ldr r1, _08020538 @ =gBattleTextBuff1
    movs r3, 0
    movs r2, 0xFD
    strb r2, [r1]
    movs r5, 0x4
    strb r5, [r1, 0x1]
    ldr r4, _08020530 @ =gSharedMem
    ldr r0, _08020534 @ =0x000160a2
    adds r6, r4, r0
    ldrb r0, [r6]
    strb r0, [r1, 0x2]
    ldr r0, _0802053C @ =0x00016018
    adds r4, r0
    ldrb r0, [r4]
    strb r0, [r1, 0x3]
    movs r0, 0xFF
    strb r0, [r1, 0x4]
    ldr r1, _08020540 @ =gBattleTextBuff2
    strb r2, [r1]
    strb r3, [r1, 0x1]
    strb r7, [r1, 0x2]
    movs r3, 0xFF
    lsls r3, 8
    ands r7, r3
    asrs r0, r7, 8
    strb r0, [r1, 0x3]
    movs r0, 0x1
    negs r0, r0
    strb r0, [r1, 0x4]
    ldr r1, _08020544 @ =gBattleTextBuff3
    strb r2, [r1]
    movs r0, 0x1
    strb r0, [r1, 0x1]
    strb r5, [r1, 0x2]
    movs r0, 0x5
    strb r0, [r1, 0x3]
    mov r0, r8
    ldr r2, [r0]
    strb r2, [r1, 0x4]
    adds r0, r2, 0
    ands r0, r3
    asrs r0, 8
    strb r0, [r1, 0x5]
    movs r0, 0xFF
    lsls r0, 16
    ands r0, r2
    asrs r0, 16
    strb r0, [r1, 0x6]
    lsrs r2, 24
    strb r2, [r1, 0x7]
    movs r0, 0x1
    negs r0, r0
    strb r0, [r1, 0x8]
    ldrb r1, [r6]
    movs r0, 0xD
    bl PrepareStringBattle
    ldrb r1, [r4]
    movs r0, 0x64
    muls r0, r1
    ldr r1, _08020548 @ =gPlayerParty
    adds r0, r1
    ldr r3, _0802054C @ =gBattleMons
    ldr r1, _08020550 @ =gBank1
    ldrb r2, [r1]
    movs r1, 0x58
    muls r1, r2
    adds r1, r3
    ldrh r1, [r1]
    bl MonGainEVs
_0802051E:
    ldr r1, _08020530 @ =gSharedMem
    ldr r3, _08020554 @ =0x0001605f
    adds r2, r1, r3
    ldrb r0, [r2]
    lsrs r0, 1
    strb r0, [r2]
    ldr r0, _08020558 @ =0x0001600f
    adds r1, r0
    b _08020618
    .align 2, 0
_08020530: .4byte gSharedMem
_08020534: .4byte 0x000160a2
_08020538: .4byte gBattleTextBuff1
_0802053C: .4byte 0x00016018
_08020540: .4byte gBattleTextBuff2
_08020544: .4byte gBattleTextBuff3
_08020548: .4byte gPlayerParty
_0802054C: .4byte gBattleMons
_08020550: .4byte gBank1
_08020554: .4byte 0x0001605f
_08020558: .4byte 0x0001600f
_0802055C:
    ldr r0, _08020620 @ =gBattleExecBuffer
    ldr r2, [r0]
    cmp r2, 0
    beq _08020566
    b _08020996
_08020566:
    ldr r1, _08020624 @ =gBattleBufferB
    ldr r4, _08020628 @ =gSharedMem
    ldr r3, _0802062C @ =0x000160a2
    adds r3, r4
    mov r8, r3
    ldrb r0, [r3]
    lsls r0, 9
    adds r0, r1
    strb r2, [r0]
    ldr r0, _08020630 @ =0x00016018
    adds r7, r4, r0
    ldrb r0, [r7]
    movs r6, 0x64
    muls r0, r6
    ldr r5, _08020634 @ =gPlayerParty
    adds r0, r5
    movs r1, 0x39
    bl GetMonData
    cmp r0, 0
    beq _08020612
    ldrb r0, [r7]
    muls r0, r6
    adds r0, r5
    movs r1, 0x38
    bl GetMonData
    cmp r0, 0x64
    beq _08020612
    ldrb r0, [r7]
    muls r0, r6
    adds r0, r5
    movs r1, 0x3A
    bl GetMonData
    ldr r1, _08020638 @ =0x00017180
    adds r4, r1
    strh r0, [r4]
    ldrb r0, [r7]
    muls r0, r6
    adds r0, r5
    movs r1, 0x3B
    bl GetMonData
    strh r0, [r4, 0x2]
    ldrb r0, [r7]
    muls r0, r6
    adds r0, r5
    movs r1, 0x3C
    bl GetMonData
    strh r0, [r4, 0x4]
    ldrb r0, [r7]
    muls r0, r6
    adds r0, r5
    movs r1, 0x3D
    bl GetMonData
    strh r0, [r4, 0x6]
    ldrb r0, [r7]
    muls r0, r6
    adds r0, r5
    movs r1, 0x3E
    bl GetMonData
    strh r0, [r4, 0x8]
    ldrb r0, [r7]
    muls r0, r6
    adds r0, r5
    movs r1, 0x3F
    bl GetMonData
    strh r0, [r4, 0xA]
    ldr r4, _0802063C @ =gActiveBank
    mov r2, r8
    ldrb r0, [r2]
    strb r0, [r4]
    ldrb r1, [r7]
    ldr r0, _08020640 @ =gBattleMoveDamage
    ldrh r2, [r0]
    movs r0, 0
    bl EmitExpBarUpdate
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
_08020612:
    ldr r1, _08020628 @ =gSharedMem
    ldr r3, _08020644 @ =0x0001600f
    adds r1, r3
_08020618:
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
    b _08020996
    .align 2, 0
_08020620: .4byte gBattleExecBuffer
_08020624: .4byte gBattleBufferB
_08020628: .4byte gSharedMem
_0802062C: .4byte 0x000160a2
_08020630: .4byte 0x00016018
_08020634: .4byte gPlayerParty
_08020638: .4byte 0x00017180
_0802063C: .4byte gActiveBank
_08020640: .4byte gBattleMoveDamage
_08020644: .4byte 0x0001600f
_08020648:
    ldr r0, _080208AC @ =gBattleExecBuffer
    ldr r0, [r0]
    cmp r0, 0
    beq _08020652
    b _08020996
_08020652:
    ldr r1, _080208B0 @ =gActiveBank
    ldr r4, _080208B4 @ =gSharedMem
    ldr r2, _080208B8 @ =0x000160a2
    adds r0, r4, r2
    ldrb r0, [r0]
    strb r0, [r1]
    ldr r2, _080208BC @ =gBattleBufferB
    ldrb r3, [r1]
    lsls r1, r3, 9
    adds r0, r1, r2
    ldrb r0, [r0]
    cmp r0, 0x21
    beq _0802066E
    b _080208F0
_0802066E:
    adds r0, r2, 0x1
    adds r0, r1, r0
    ldrb r0, [r0]
    cmp r0, 0xB
    beq _0802067A
    b _080208F0
_0802067A:
    ldr r0, _080208C0 @ =gBattleTypeFlags
    ldrh r1, [r0]
    movs r0, 0x8
    ands r0, r1
    cmp r0, 0
    beq _080206A8
    ldr r1, _080208C4 @ =gBattlePartyID
    lsls r0, r3, 1
    adds r2, r0, r1
    ldr r0, _080208C8 @ =0x00016018
    adds r1, r4, r0
    ldrh r0, [r2]
    ldrb r1, [r1]
    cmp r0, r1
    bne _080206A8
    adds r1, r0, 0
    movs r0, 0x64
    muls r0, r1
    ldr r1, _080208CC @ =gPlayerParty
    adds r0, r1
    adds r1, r3, 0
    bl sub_80324F8
_080206A8:
    ldr r1, _080208D0 @ =gBattleTextBuff1
    movs r2, 0xFD
    strb r2, [r1]
    movs r0, 0x4
    strb r0, [r1, 0x1]
    ldr r5, _080208B0 @ =gActiveBank
    ldrb r0, [r5]
    strb r0, [r1, 0x2]
    ldr r0, _080208B4 @ =gSharedMem
    ldr r3, _080208C8 @ =0x00016018
    adds r6, r0, r3
    ldrb r0, [r6]
    strb r0, [r1, 0x3]
    movs r0, 0xFF
    strb r0, [r1, 0x4]
    ldr r4, _080208D4 @ =gBattleTextBuff2
    strb r2, [r4]
    movs r0, 0x1
    strb r0, [r4, 0x1]
    strb r0, [r4, 0x2]
    movs r0, 0x3
    strb r0, [r4, 0x3]
    ldrb r0, [r6]
    movs r1, 0x64
    mov r8, r1
    mov r2, r8
    muls r2, r0
    adds r0, r2, 0
    ldr r7, _080208CC @ =gPlayerParty
    adds r0, r7
    movs r1, 0x38
    bl GetMonData
    strb r0, [r4, 0x4]
    movs r0, 0x1
    negs r0, r0
    strb r0, [r4, 0x5]
    bl b_movescr_stack_push_cursor
    ldr r2, _080208D8 @ =gLeveledUpInBattle
    ldr r1, _080208DC @ =gBitTable
    ldrb r0, [r6]
    lsls r0, 2
    adds r0, r1
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldr r1, _080208E0 @ =gBattlescriptCurrInstr
    ldr r0, _080208E4 @ =BattleScript_LevelUp
    str r0, [r1]
    ldr r4, _080208E8 @ =gBattleMoveDamage
    ldr r2, _080208BC @ =gBattleBufferB
    ldrb r1, [r5]
    lsls r1, 9
    adds r0, r2, 0x2
    adds r0, r1, r0
    ldrb r3, [r0]
    adds r2, 0x3
    adds r1, r2
    ldrb r0, [r1]
    lsls r0, 8
    orrs r3, r0
    str r3, [r4]
    ldrb r0, [r6]
    mov r3, r8
    muls r3, r0
    adds r0, r3, 0
    adds r0, r7
    movs r1, 0
    bl AdjustFriendship
    ldr r0, _080208C4 @ =gBattlePartyID
    ldrb r1, [r6]
    ldrh r0, [r0]
    cmp r0, r1
    bne _080207EC
    ldr r4, _080208EC @ =gBattleMons
    ldrh r0, [r4, 0x28]
    cmp r0, 0
    beq _080207EC
    mov r0, r8
    muls r0, r1
    adds r0, r7
    movs r1, 0x38
    bl GetMonData
    adds r1, r4, 0
    adds r1, 0x2A
    strb r0, [r1]
    ldrb r0, [r6]
    mov r1, r8
    muls r1, r0
    adds r0, r1, 0
    adds r0, r7
    movs r1, 0x39
    bl GetMonData
    strh r0, [r4, 0x28]
    ldrb r0, [r6]
    mov r2, r8
    muls r2, r0
    adds r0, r2, 0
    adds r0, r7
    movs r1, 0x3A
    bl GetMonData
    strh r0, [r4, 0x2C]
    ldrb r0, [r6]
    mov r3, r8
    muls r3, r0
    adds r0, r3, 0
    adds r0, r7
    movs r1, 0x3B
    bl GetMonData
    strh r0, [r4, 0x2]
    ldrb r0, [r6]
    mov r1, r8
    muls r1, r0
    adds r0, r1, 0
    adds r0, r7
    movs r1, 0x3C
    bl GetMonData
    strh r0, [r4, 0x4]
    ldrb r0, [r6]
    mov r2, r8
    muls r2, r0
    adds r0, r2, 0
    adds r0, r7
    movs r1, 0x3D
    bl GetMonData
    strh r0, [r4, 0x6]
    ldrb r0, [r6]
    mov r3, r8
    muls r3, r0
    adds r0, r3, 0
    adds r0, r7
    movs r1, 0x3D
    bl GetMonData
    strh r0, [r4, 0x6]
    ldrb r0, [r6]
    mov r1, r8
    muls r1, r0
    adds r0, r1, 0
    adds r0, r7
    movs r1, 0x3E
    bl GetMonData
    strh r0, [r4, 0x8]
    ldrb r0, [r6]
    mov r2, r8
    muls r2, r0
    adds r0, r2, 0
    adds r0, r7
    movs r1, 0x3F
    bl GetMonData
    strh r0, [r4, 0xA]
_080207EC:
    ldr r0, _080208C4 @ =gBattlePartyID
    ldr r1, _080208B4 @ =gSharedMem
    ldr r3, _080208C8 @ =0x00016018
    adds r7, r1, r3
    ldrb r2, [r7]
    ldrh r0, [r0, 0x4]
    cmp r0, r2
    bne _080208F6
    ldr r6, _080208EC @ =gBattleMons
    movs r0, 0xD8
    adds r0, r6
    mov r8, r0
    ldrh r0, [r0]
    cmp r0, 0
    beq _080208F6
    ldr r0, _080208C0 @ =gBattleTypeFlags
    ldrh r1, [r0]
    movs r0, 0x1
    ands r0, r1
    cmp r0, 0
    beq _080208F6
    movs r5, 0x64
    adds r0, r2, 0
    muls r0, r5
    ldr r4, _080208CC @ =gPlayerParty
    adds r0, r4
    movs r1, 0x38
    bl GetMonData
    adds r1, r6, 0
    adds r1, 0xDA
    strb r0, [r1]
    ldrb r0, [r7]
    muls r0, r5
    adds r0, r4
    movs r1, 0x39
    bl GetMonData
    mov r1, r8
    strh r0, [r1]
    ldrb r0, [r7]
    muls r0, r5
    adds r0, r4
    movs r1, 0x3A
    bl GetMonData
    adds r1, r6, 0
    adds r1, 0xDC
    strh r0, [r1]
    ldrb r0, [r7]
    muls r0, r5
    adds r0, r4
    movs r1, 0x3B
    bl GetMonData
    adds r1, r6, 0
    adds r1, 0xB2
    strh r0, [r1]
    ldrb r0, [r7]
    muls r0, r5
    adds r0, r4
    movs r1, 0x3C
    bl GetMonData
    adds r1, r6, 0
    adds r1, 0xB4
    strh r0, [r1]
    ldrb r0, [r7]
    muls r0, r5
    adds r0, r4
    movs r1, 0x3D
    bl GetMonData
    movs r2, 0xB6
    adds r2, r6
    mov r8, r2
    strh r0, [r2]
    ldrb r0, [r7]
    muls r0, r5
    adds r0, r4
    movs r1, 0x3D
    bl GetMonData
    mov r3, r8
    strh r0, [r3]
    ldrb r0, [r7]
    muls r0, r5
    adds r0, r4
    movs r1, 0x3E
    bl GetMonData
    adds r1, r6, 0
    adds r1, 0xB8
    strh r0, [r1]
    b _080208F6
    .align 2, 0
_080208AC: .4byte gBattleExecBuffer
_080208B0: .4byte gActiveBank
_080208B4: .4byte gSharedMem
_080208B8: .4byte 0x000160a2
_080208BC: .4byte gBattleBufferB
_080208C0: .4byte gBattleTypeFlags
_080208C4: .4byte gBattlePartyID
_080208C8: .4byte 0x00016018
_080208CC: .4byte gPlayerParty
_080208D0: .4byte gBattleTextBuff1
_080208D4: .4byte gBattleTextBuff2
_080208D8: .4byte gLeveledUpInBattle
_080208DC: .4byte gBitTable
_080208E0: .4byte gBattlescriptCurrInstr
_080208E4: .4byte BattleScript_LevelUp
_080208E8: .4byte gBattleMoveDamage
_080208EC: .4byte gBattleMons
_080208F0:
    ldr r1, _08020904 @ =gBattleMoveDamage
    movs r0, 0
    str r0, [r1]
_080208F6:
    ldr r0, _08020908 @ =gSharedMem
    ldr r1, _0802090C @ =0x0001600f
    adds r0, r1
    movs r1, 0x5
    strb r1, [r0]
    b _08020996
    .align 2, 0
_08020904: .4byte gBattleMoveDamage
_08020908: .4byte gSharedMem
_0802090C: .4byte 0x0001600f
_08020910:
    ldr r0, _08020924 @ =gBattleMoveDamage
    ldr r0, [r0]
    cmp r0, 0
    beq _08020930
    ldr r0, _08020928 @ =gSharedMem
    ldr r2, _0802092C @ =0x0001600f
    adds r0, r2
    movs r1, 0x3
    strb r1, [r0]
    b _08020996
    .align 2, 0
_08020924: .4byte gBattleMoveDamage
_08020928: .4byte gSharedMem
_0802092C: .4byte 0x0001600f
_08020930:
    ldr r2, _08020950 @ =gSharedMem
    ldr r3, _08020954 @ =0x00016018
    adds r1, r2, r3
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x5
    bhi _0802095C
    ldr r0, _08020958 @ =0x0001600f
    adds r1, r2, r0
    movs r0, 0x2
    strb r0, [r1]
    b _08020996
    .align 2, 0
_08020950: .4byte gSharedMem
_08020954: .4byte 0x00016018
_08020958: .4byte 0x0001600f
_0802095C:
    ldr r3, _08020968 @ =0x0001600f
    adds r1, r2, r3
    movs r0, 0x6
    strb r0, [r1]
    b _08020996
    .align 2, 0
_08020968: .4byte 0x0001600f
_0802096C:
    ldr r0, _080209A4 @ =gBattleExecBuffer
    ldr r5, [r0]
    cmp r5, 0
    bne _08020996
    ldr r4, _080209A8 @ =gBattleMons
    ldr r2, _080209AC @ =gBank1
    ldrb r0, [r2]
    movs r1, 0x58
    muls r0, r1
    adds r0, r4
    movs r3, 0
    strh r5, [r0, 0x2E]
    ldrb r0, [r2]
    muls r0, r1
    adds r0, r4
    adds r0, 0x20
    strb r3, [r0]
    ldr r1, _080209B0 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x2
    str r0, [r1]
_08020996:
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_080209A4: .4byte gBattleExecBuffer
_080209A8: .4byte gBattleMons
_080209AC: .4byte gBank1
_080209B0: .4byte gBattlescriptCurrInstr
        .syntax divided

	.code	16
.Lfe49:
	.size	 atk23_getexp,.Lfe49-atk23_getexp
	.align	2, 0
	.type	 atk24,function
	.thumb_func
atk24:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r8
    push {r7}
    movs r6, 0
    ldr r0, _08020AF0 @ =gBattleExecBuffer
    ldr r0, [r0]
    cmp r0, 0
    beq _080209C6
    b _08020B46
_080209C6:
    movs r5, 0
_080209C8:
    movs r0, 0x64
    adds r1, r5, 0
    muls r1, r0
    ldr r0, _08020AF4 @ =gPlayerParty
    adds r4, r1, r0
    adds r0, r4, 0
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _080209F8
    adds r0, r4, 0
    movs r1, 0x2D
    bl GetMonData
    cmp r0, 0
    bne _080209F8
    adds r0, r4, 0
    movs r1, 0x39
    bl GetMonData
    adds r0, r6, r0
    lsls r0, 16
    lsrs r6, r0, 16
_080209F8:
    adds r5, 0x1
    cmp r5, 0x5
    ble _080209C8
    cmp r6, 0
    bne _08020A0C
    ldr r0, _08020AF8 @ =gBattleOutcome
    ldrb r1, [r0]
    movs r2, 0x2
    orrs r1, r2
    strb r1, [r0]
_08020A0C:
    movs r6, 0
    movs r5, 0
_08020A10:
    movs r0, 0x64
    adds r1, r5, 0
    muls r1, r0
    ldr r0, _08020AFC @ =gEnemyParty
    adds r4, r1, r0
    adds r0, r4, 0
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _08020A40
    adds r0, r4, 0
    movs r1, 0x2D
    bl GetMonData
    cmp r0, 0
    bne _08020A40
    adds r0, r4, 0
    movs r1, 0x39
    bl GetMonData
    adds r0, r6, r0
    lsls r0, 16
    lsrs r6, r0, 16
_08020A40:
    adds r5, 0x1
    cmp r5, 0x5
    ble _08020A10
    ldr r2, _08020AF8 @ =gBattleOutcome
    cmp r6, 0
    bne _08020A54
    ldrb r0, [r2]
    movs r1, 0x1
    orrs r0, r1
    strb r0, [r2]
_08020A54:
    ldrb r0, [r2]
    cmp r0, 0
    bne _08020B3E
    ldr r2, _08020B00 @ =gBattleTypeFlags
    ldrh r1, [r2]
    movs r0, 0x2
    ands r0, r1
    mov r8, r2
    cmp r0, 0
    beq _08020B3E
    movs r2, 0
    movs r5, 0
    ldr r0, _08020B04 @ =gNoOfAllBanks
    ldrb r3, [r0]
    mov r12, r0
    ldr r7, _08020B08 @ =gBattlescriptCurrInstr
    cmp r2, r3
    bge _08020AA0
    ldr r0, _08020B0C @ =gHitMarker
    movs r1, 0x80
    lsls r1, 21
    ldr r6, [r0]
    adds r4, r3, 0
    ldr r3, _08020B10 @ =gSpecialStatuses
_08020A84:
    adds r0, r1, 0
    lsls r0, r5
    ands r0, r6
    cmp r0, 0
    beq _08020A98
    ldrb r0, [r3]
    lsls r0, 25
    cmp r0, 0
    blt _08020A98
    adds r2, 0x1
_08020A98:
    adds r3, 0x28
    adds r5, 0x2
    cmp r5, r4
    blt _08020A84
_08020AA0:
    movs r4, 0
    movs r5, 0x1
    mov r0, r12
    ldrb r3, [r0]
    cmp r5, r3
    bge _08020ADA
    ldr r0, _08020B0C @ =gHitMarker
    movs r1, 0x80
    lsls r1, 21
    mov r12, r1
    ldr r1, [r0]
    ldr r0, _08020B10 @ =gSpecialStatuses
    adds r6, r3, 0
    adds r3, r0, 0
    adds r3, 0x14
_08020ABE:
    mov r0, r12
    lsls r0, r5
    ands r0, r1
    cmp r0, 0
    beq _08020AD2
    ldrb r0, [r3]
    lsls r0, 25
    cmp r0, 0
    blt _08020AD2
    adds r4, 0x1
_08020AD2:
    adds r3, 0x28
    adds r5, 0x2
    cmp r5, r6
    blt _08020ABE
_08020ADA:
    mov r0, r8
    ldrh r1, [r0]
    movs r0, 0x40
    ands r0, r1
    cmp r0, 0
    beq _08020B14
    adds r0, r4, r2
    cmp r0, 0x1
    bgt _08020B1C
    b _08020B36
    .align 2, 0
_08020AF0: .4byte gBattleExecBuffer
_08020AF4: .4byte gPlayerParty
_08020AF8: .4byte gBattleOutcome
_08020AFC: .4byte gEnemyParty
_08020B00: .4byte gBattleTypeFlags
_08020B04: .4byte gNoOfAllBanks
_08020B08: .4byte gBattlescriptCurrInstr
_08020B0C: .4byte gHitMarker
_08020B10: .4byte gSpecialStatuses
_08020B14:
    cmp r4, 0
    beq _08020B36
    cmp r2, 0
    beq _08020B36
_08020B1C:
    ldr r2, [r7]
    ldrb r1, [r2, 0x1]
    ldrb r0, [r2, 0x2]
    lsls r0, 8
    adds r1, r0
    ldrb r0, [r2, 0x3]
    lsls r0, 16
    adds r1, r0
    ldrb r0, [r2, 0x4]
    lsls r0, 24
    adds r1, r0
    str r1, [r7]
    b _08020B46
_08020B36:
    ldr r0, [r7]
    adds r0, 0x5
    str r0, [r7]
    b _08020B46
_08020B3E:
    ldr r1, _08020B50 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x5
    str r0, [r1]
_08020B46:
    pop {r3}
    mov r8, r3
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08020B50: .4byte gBattlescriptCurrInstr
        .syntax divided

	.code	16
.Lfe50:
	.size	 atk24,.Lfe50-atk24
	.align	2, 0
	.type	 MoveValuesCleanUp,function
	.thumb_func
MoveValuesCleanUp:
	ldr	r1, .L752
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L752+0x4
	ldr	r1, .L752+0x8
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L752+0xc
	strb	r1, [r0]
	ldr	r0, .L752+0x10
	strb	r2, [r0, #0x3]
	strb	r2, [r0, #0x6]
	ldr	r2, .L752+0x14
	ldr	r0, [r2]
	sub	r1, r1, #0x42
	and	r0, r0, r1
	ldr	r1, .L752+0x18
	and	r0, r0, r1
	str	r0, [r2]
	bx	lr
.L753:
	.align	2, 0
.L752:
	.word	gBattleMoveFlags
	.word	gSharedMem
	.word	0x1601f
	.word	gCritMultiplier
	.word	gBattleCommunication
	.word	gHitMarker
	.word	0xffffbfff
.Lfe51:
	.size	 MoveValuesCleanUp,.Lfe51-MoveValuesCleanUp
	.align	2, 0
	.type	 atk25_move_values_cleanup,function
	.thumb_func
atk25_move_values_cleanup:
	push	{lr}
	bl	MoveValuesCleanUp
	ldr	r1, .L755
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L756:
	.align	2, 0
.L755:
	.word	gBattlescriptCurrInstr
.Lfe52:
	.size	 atk25_move_values_cleanup,.Lfe52-atk25_move_values_cleanup
	.align	2, 0
	.type	 atk26_set_multihit,function
	.thumb_func
atk26_set_multihit:
	ldr	r3, .L758
	ldr	r2, .L758+0x4
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x1]
	strb	r1, [r3]
	add	r0, r0, #0x2
	str	r0, [r2]
	bx	lr
.L759:
	.align	2, 0
.L758:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.Lfe53:
	.size	 atk26_set_multihit,.Lfe53-atk26_set_multihit
	.align	2, 0
	.type	 atk27_decrement_multihit,function
	.thumb_func
atk27_decrement_multihit:
	push	{lr}
	ldr	r1, .L763
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L761	@cond_branch
	ldr	r1, .L763+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L762
.L764:
	.align	2, 0
.L763:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.L761:
	ldr	r3, .L765
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
.L762:
	pop	{r0}
	bx	r0
.L766:
	.align	2, 0
.L765:
	.word	gBattlescriptCurrInstr
.Lfe54:
	.size	 atk27_decrement_multihit,.Lfe54-atk27_decrement_multihit
	.align	2, 0
	.type	 atk28_goto,function
	.thumb_func
atk28_goto:
	ldr	r3, .L768
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L769:
	.align	2, 0
.L768:
	.word	gBattlescriptCurrInstr
.Lfe55:
	.size	 atk28_goto,.Lfe55-atk28_goto
	.align	2, 0
	.type	 atk29_jumpifbyte,function
	.thumb_func
atk29_jumpifbyte:
	push	{r4, r5, r6, lr}
	ldr	r3, .L787
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r2, [r1, #0x7]
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xb
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L771	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L787+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L788:
	.align	2, 0
.L787:
	.word	gBattlescriptCurrInstr
	.word	.L784
	.align	2, 0
	.align	2, 0
.L784:
	.word	.L772
	.word	.L774
	.word	.L776
	.word	.L778
	.word	.L780
	.word	.L782
.L772:
	ldrb	r0, [r5]
	cmp	r0, r4
	bne	.L771	@cond_branch
	b	.L786
.L774:
	ldrb	r0, [r5]
	cmp	r0, r4
	beq	.L771	@cond_branch
	b	.L786
.L776:
	ldrb	r0, [r5]
	cmp	r0, r4
	bls	.L771	@cond_branch
	b	.L786
.L778:
	ldrb	r0, [r5]
	cmp	r0, r4
	bcs	.L771	@cond_branch
	b	.L786
.L780:
	ldrb	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L771	@cond_branch
	b	.L786
.L782:
	ldrb	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L771	@cond_branch
.L786:
	str	r2, [r3]
.L771:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 atk29_jumpifbyte,.Lfe56-atk29_jumpifbyte
	.align	2, 0
	.type	 atk2A_jumpifhalfword,function
	.thumb_func
atk2A_jumpifhalfword:
	push	{r4, r5, r6, lr}
	ldr	r3, .L806
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r2, [r1, #0x8]
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xc
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L790	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L806+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L807:
	.align	2, 0
.L806:
	.word	gBattlescriptCurrInstr
	.word	.L803
	.align	2, 0
	.align	2, 0
.L803:
	.word	.L791
	.word	.L793
	.word	.L795
	.word	.L797
	.word	.L799
	.word	.L801
.L791:
	ldrh	r0, [r5]
	cmp	r0, r4
	bne	.L790	@cond_branch
	b	.L805
.L793:
	ldrh	r0, [r5]
	cmp	r0, r4
	beq	.L790	@cond_branch
	b	.L805
.L795:
	ldrh	r0, [r5]
	cmp	r0, r4
	bls	.L790	@cond_branch
	b	.L805
.L797:
	ldrh	r0, [r5]
	cmp	r0, r4
	bcs	.L790	@cond_branch
	b	.L805
.L799:
	ldrh	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L790	@cond_branch
	b	.L805
.L801:
	ldrh	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L790	@cond_branch
.L805:
	str	r2, [r3]
.L790:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 atk2A_jumpifhalfword,.Lfe57-atk2A_jumpifhalfword
	.align	2, 0
	.type	 atk2B_jumpifword,function
	.thumb_func
atk2B_jumpifword:
	push	{r4, r5, r6, lr}
	ldr	r3, .L825
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xe
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L809	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L825+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L826:
	.align	2, 0
.L825:
	.word	gBattlescriptCurrInstr
	.word	.L822
	.align	2, 0
	.align	2, 0
.L822:
	.word	.L810
	.word	.L812
	.word	.L814
	.word	.L816
	.word	.L818
	.word	.L820
.L810:
	ldr	r0, [r5]
	cmp	r0, r4
	bne	.L809	@cond_branch
	b	.L824
.L812:
	ldr	r0, [r5]
	cmp	r0, r4
	beq	.L809	@cond_branch
	b	.L824
.L814:
	ldr	r0, [r5]
	cmp	r0, r4
	bls	.L809	@cond_branch
	b	.L824
.L816:
	ldr	r0, [r5]
	cmp	r0, r4
	bcs	.L809	@cond_branch
	b	.L824
.L818:
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L809	@cond_branch
	b	.L824
.L820:
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L809	@cond_branch
.L824:
	str	r2, [r3]
.L809:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 atk2B_jumpifword,.Lfe58-atk2B_jumpifword
	.align	2, 0
	.type	 atk2C_jumpifarrayequal,function
	.thumb_func
atk2C_jumpifarrayequal:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L836
	ldr	r3, [r2]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r5, r1, r0
	ldrb	r1, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x18
	add	r4, r1, r0
	ldrb	r6, [r3, #0x9]
	ldrb	r1, [r3, #0xa]
	ldrb	r0, [r3, #0xb]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0xd]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	mov	ip, r1
	mov	r1, #0x0
	cmp	r1, r6
	bcs	.L829	@cond_branch
	ldrb	r0, [r5]
	ldrb	r7, [r4]
	cmp	r0, r7
	beq	.L832	@cond_branch
	add	r0, r3, #0
	b	.L835
.L837:
	.align	2, 0
.L836:
	.word	gBattlescriptCurrInstr
.L832:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcs	.L829	@cond_branch
	ldrb	r0, [r5]
	ldrb	r3, [r4]
	cmp	r0, r3
	beq	.L832	@cond_branch
	ldr	r0, [r2]
.L835:
	add	r0, r0, #0xe
	str	r0, [r2]
.L829:
	cmp	r1, r6
	bne	.L834	@cond_branch
	mov	r7, ip
	str	r7, [r2]
.L834:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 atk2C_jumpifarrayequal,.Lfe59-atk2C_jumpifarrayequal
	.align	2, 0
	.type	 atk2D_jumpifarraynotequal,function
	.thumb_func
atk2D_jumpifarraynotequal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	ldr	r3, .L848
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r4, r2, r0
	ldrb	r6, [r1, #0x9]
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	mov	ip, r2
	mov	r1, #0x0
	cmp	r7, r6
	bcs	.L840	@cond_branch
.L842:
	ldrb	r0, [r5]
	ldrb	r2, [r4]
	cmp	r0, r2
	bne	.L843	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L843:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcc	.L842	@cond_branch
.L840:
	cmp	r7, r6
	beq	.L845	@cond_branch
	mov	r0, ip
	b	.L847
.L849:
	.align	2, 0
.L848:
	.word	gBattlescriptCurrInstr
.L845:
	ldr	r0, [r3]
	add	r0, r0, #0xe
.L847:
	str	r0, [r3]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 atk2D_jumpifarraynotequal,.Lfe60-atk2D_jumpifarraynotequal
	.align	2, 0
	.type	 atk2E_setbyte,function
	.thumb_func
atk2E_setbyte:
	ldr	r3, .L851
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L852:
	.align	2, 0
.L851:
	.word	gBattlescriptCurrInstr
.Lfe61:
	.size	 atk2E_setbyte,.Lfe61-atk2E_setbyte
	.align	2, 0
	.type	 atk2F_addbyte,function
	.thumb_func
atk2F_addbyte:
	ldr	r3, .L854
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	ldrb	r2, [r1]
	add	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L855:
	.align	2, 0
.L854:
	.word	gBattlescriptCurrInstr
.Lfe62:
	.size	 atk2F_addbyte,.Lfe62-atk2F_addbyte
	.align	2, 0
	.type	 atk30_subbyte,function
	.thumb_func
atk30_subbyte:
	ldr	r3, .L857
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r2, #0x5]
	sub	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L858:
	.align	2, 0
.L857:
	.word	gBattlescriptCurrInstr
.Lfe63:
	.size	 atk30_subbyte,.Lfe63-atk30_subbyte
	.align	2, 0
	.type	 atk31_copyarray,function
	.thumb_func
atk31_copyarray:
	push	{r4, r5, r6, lr}
	ldr	r3, .L865
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x9]
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L861	@cond_branch
.L863:
	add	r0, r6, r2
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L863	@cond_branch
.L861:
	ldr	r0, [r3]
	add	r0, r0, #0xa
	str	r0, [r3]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L866:
	.align	2, 0
.L865:
	.word	gBattlescriptCurrInstr
.Lfe64:
	.size	 atk31_copyarray,.Lfe64-atk31_copyarray
	.align	2, 0
	.type	 atk32_copyarray_withindex,function
	.thumb_func
atk32_copyarray_withindex:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L873
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r7, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	ldrb	r2, [r1, #0x9]
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0xd]
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L869	@cond_branch
.L871:
	add	r0, r7, r2
	ldrb	r1, [r5]
	add	r1, r2, r1
	add	r1, r6, r1
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L871	@cond_branch
.L869:
	ldr	r0, [r3]
	add	r0, r0, #0xe
	str	r0, [r3]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L874:
	.align	2, 0
.L873:
	.word	gBattlescriptCurrInstr
.Lfe65:
	.size	 atk32_copyarray_withindex,.Lfe65-atk32_copyarray_withindex
	.align	2, 0
	.type	 atk33_orbyte,function
	.thumb_func
atk33_orbyte:
	ldr	r3, .L876
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r2, #0x5]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L877:
	.align	2, 0
.L876:
	.word	gBattlescriptCurrInstr
.Lfe66:
	.size	 atk33_orbyte,.Lfe66-atk33_orbyte
	.align	2, 0
	.type	 atk34_orhalfword,function
	.thumb_func
atk34_orhalfword:
	push	{r4, lr}
	ldr	r4, .L879
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	ldrb	r1, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrh	r0, [r2]
	orr	r1, r1, r0
	strh	r1, [r2]
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L880:
	.align	2, 0
.L879:
	.word	gBattlescriptCurrInstr
.Lfe67:
	.size	 atk34_orhalfword,.Lfe67-atk34_orhalfword
	.align	2, 0
	.type	 atk35_orword,function
	.thumb_func
atk35_orword:
	push	{r4, lr}
	ldr	r4, .L882
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r3, r3, r0
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x9
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L883:
	.align	2, 0
.L882:
	.word	gBattlescriptCurrInstr
.Lfe68:
	.size	 atk35_orword,.Lfe68-atk35_orword
	.align	2, 0
	.type	 atk36_bicbyte,function
	.thumb_func
atk36_bicbyte:
	ldr	r3, .L885
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r2, [r2, #0x5]
	ldrb	r0, [r1]
	bic	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L886:
	.align	2, 0
.L885:
	.word	gBattlescriptCurrInstr
.Lfe69:
	.size	 atk36_bicbyte,.Lfe69-atk36_bicbyte
	.align	2, 0
	.type	 atk37_bichalfword,function
	.thumb_func
atk37_bichalfword:
	push	{r4, lr}
	ldr	r4, .L888
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r2, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrh	r0, [r1]
	bic	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L889:
	.align	2, 0
.L888:
	.word	gBattlescriptCurrInstr
.Lfe70:
	.size	 atk37_bichalfword,.Lfe70-atk37_bichalfword
	.align	2, 0
	.type	 atk38_bicword,function
	.thumb_func
atk38_bicword:
	push	{r4, lr}
	ldr	r4, .L891
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r3, r3, r0
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x9
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L892:
	.align	2, 0
.L891:
	.word	gBattlescriptCurrInstr
.Lfe71:
	.size	 atk38_bicword,.Lfe71-atk38_bicword
	.align	2, 0
	.type	 atk39_pause,function
	.thumb_func
atk39_pause:
	push	{r4, r5, lr}
	ldr	r0, .L896
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L894	@cond_branch
	ldr	r5, .L896+0x4
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r3, .L896+0x8
	ldrh	r0, [r3]
	add	r0, r0, #0x1
	strh	r0, [r3]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r1
	bcc	.L894	@cond_branch
	strh	r4, [r3]
	add	r0, r2, #0x3
	str	r0, [r5]
.L894:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L897:
	.align	2, 0
.L896:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gPauseCounterBattle
.Lfe72:
	.size	 atk39_pause,.Lfe72-atk39_pause
	.align	2, 0
	.type	 atk3A_waitstate,function
	.thumb_func
atk3A_waitstate:
	push	{lr}
	ldr	r0, .L900
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L899	@cond_branch
	ldr	r1, .L900+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L899:
	pop	{r0}
	bx	r0
.L901:
	.align	2, 0
.L900:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
.Lfe73:
	.size	 atk3A_waitstate,.Lfe73-atk3A_waitstate
	.align	2, 0
	.type	 atk3B_healthbar_update,function
	.thumb_func
atk3B_healthbar_update:
	push	{lr}
	ldr	r0, .L906
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L903	@cond_branch
	ldr	r0, .L906+0x4
	ldr	r1, .L906+0x8
	b	.L905
.L907:
	.align	2, 0
.L906:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBankTarget
.L903:
	ldr	r0, .L908
	ldr	r1, .L908+0x4
.L905:
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldr	r0, .L908+0x8
	ldrh	r1, [r0]
	mov	r0, #0x0
	bl	EmitHealthBarUpdate
	ldr	r0, .L908
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	ldr	r1, .L908+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L909:
	.align	2, 0
.L908:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe74:
	.size	 atk3B_healthbar_update,.Lfe74-atk3B_healthbar_update
	.align	2, 0
	.type	 atk3C_return,function
	.thumb_func
atk3C_return:
	push	{lr}
	bl	b_movescr_stack_pop_cursor
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 atk3C_return,.Lfe75-atk3C_return
	.align	2, 0
	.type	 atk3D_end,function
	.thumb_func
atk3D_end:
	ldr	r0, .L912
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L912+0x4
	strb	r1, [r0]
	ldr	r1, .L912+0x8
	mov	r0, #0xb
	strb	r0, [r1]
	bx	lr
.L913:
	.align	2, 0
.L912:
	.word	gBattleMoveFlags
	.word	gActiveBank
	.word	gFightStateTracker
.Lfe76:
	.size	 atk3D_end,.Lfe76-atk3D_end
	.align	2, 0
	.type	 atk3E_end2,function
	.thumb_func
atk3E_end2:
	ldr	r1, .L915
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L915+0x4
	mov	r0, #0xb
	strb	r0, [r1]
	bx	lr
.L916:
	.align	2, 0
.L915:
	.word	gActiveBank
	.word	gFightStateTracker
.Lfe77:
	.size	 atk3E_end2,.Lfe77-atk3E_end2
	.align	2, 0
	.type	 atk3F_end3,function
	.thumb_func
atk3F_end3:
	push	{lr}
	bl	b_movescr_stack_pop_cursor
	ldr	r2, .L919
	add	r1, r2, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L918	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L918:
	ldr	r0, .L919+0x4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L920:
	.align	2, 0
.L919:
	.word	gSharedMem+0x17140
	.word	gBattleMainFunc
.Lfe78:
	.size	 atk3F_end3,.Lfe78-atk3F_end3
	.align	2, 0
	.type	 atk41_call,function
	.thumb_func
atk41_call:
	push	{r4, lr}
	ldr	r4, .L922
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	b_movescr_stack_push
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L923:
	.align	2, 0
.L922:
	.word	gBattlescriptCurrInstr
.Lfe79:
	.size	 atk41_call,.Lfe79-atk41_call
	.align	2, 0
	.type	 atk42_jumpiftype2,function
	.thumb_func
atk42_jumpiftype2:
	push	{r4, lr}
	ldr	r4, .L928
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [r4]
	ldr	r2, .L928+0x4
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L926	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L925	@cond_branch
.L926:
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L927
.L929:
	.align	2, 0
.L928:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L925:
	add	r0, r3, #0x7
	str	r0, [r4]
.L927:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 atk42_jumpiftype2,.Lfe80-atk42_jumpiftype2
	.align	2, 0
	.type	 atk43_jumpifabilitypresent,function
	.thumb_func
atk43_jumpifabilitypresent:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r4, .L933
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x1]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L931	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L932
.L934:
	.align	2, 0
.L933:
	.word	gBattlescriptCurrInstr
.L931:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L932:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 atk43_jumpifabilitypresent,.Lfe81-atk43_jumpifabilitypresent
	.align	2, 0
	.type	 atk44,function
	.thumb_func
atk44:
	ldr	r1, .L936
	ldr	r0, .L936+0x4
	ldrb	r0, [r0]
	ldr	r2, .L936+0x8
	add	r0, r0, r2
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L937:
	.align	2, 0
.L936:
	.word	gSharedMem
	.word	gBankAttacker
	.word	0x16060
.Lfe82:
	.size	 atk44,.Lfe82-atk44
	.align	2, 0
	.type	 atk45_playanimation,function
	.thumb_func
atk45_playanimation:
	push	{r4, r5, r6, lr}
	ldr	r5, .L949
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r6, .L949+0x4
	strb	r0, [r6]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r4, [r2, #0x2]
	add	r0, r4, #0
	cmp	r0, #0x1
	beq	.L940	@cond_branch
	cmp	r0, #0x11
	beq	.L940	@cond_branch
	cmp	r0, #0x2
	bne	.L939	@cond_branch
.L940:
	ldr	r4, .L949
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x2]
	ldrh	r2, [r3]
	mov	r0, #0x0
	bl	EmitBattleAnimation
	ldr	r0, .L949+0x4
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	b	.L941
.L950:
	.align	2, 0
.L949:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.L939:
	ldr	r0, .L951
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L942	@cond_branch
	add	r0, r2, #0x7
	bl	b_movescr_stack_push
	ldr	r0, .L951+0x4
	b	.L948
.L952:
	.align	2, 0
.L951:
	.word	gHitMarker
	.word	BattleScript_Pausex20
.L942:
	add	r0, r4, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L946	@cond_branch
	ldr	r1, .L953
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L953+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L946	@cond_branch
	add	r0, r2, #0x7
	b	.L948
.L954:
	.align	2, 0
.L953:
	.word	gStatuses3
	.word	0x400c0
.L946:
	ldrb	r1, [r2, #0x2]
	ldrh	r2, [r3]
	mov	r0, #0x0
	bl	EmitBattleAnimation
	ldrb	r0, [r6]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x7
.L948:
	str	r0, [r5]
.L941:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 atk45_playanimation,.Lfe83-atk45_playanimation
	.align	2, 0
	.type	 atk46_playanimation2,function
	.thumb_func
atk46_playanimation2:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L966
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r7, .L966+0x4
	strb	r0, [r7]
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	add	r4, r1, r0
	ldrb	r5, [r3]
	add	r0, r5, #0
	cmp	r0, #0x1
	beq	.L957	@cond_branch
	cmp	r0, #0x11
	beq	.L957	@cond_branch
	cmp	r0, #0x2
	bne	.L956	@cond_branch
.L957:
	ldrb	r1, [r3]
	ldrh	r2, [r4]
	mov	r0, #0x0
	bl	EmitBattleAnimation
	ldr	r0, .L966+0x4
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	ldr	r1, .L966
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L958
.L967:
	.align	2, 0
.L966:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.L956:
	ldr	r0, .L968
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L959	@cond_branch
	add	r0, r2, #0
	b	.L965
.L969:
	.align	2, 0
.L968:
	.word	gHitMarker
.L959:
	add	r0, r5, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L963	@cond_branch
	ldr	r1, .L970
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L970+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L963	@cond_branch
	add	r0, r2, #0
	b	.L965
.L971:
	.align	2, 0
.L970:
	.word	gStatuses3
	.word	0x400c0
.L963:
	ldrb	r1, [r3]
	ldrh	r2, [r4]
	mov	r0, #0x0
	bl	EmitBattleAnimation
	ldrb	r0, [r7]
	bl	MarkBufferBankForExecution
	ldr	r0, [r6]
.L965:
	add	r0, r0, #0xa
	str	r0, [r6]
.L958:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 atk46_playanimation2,.Lfe84-atk46_playanimation2
	.align	2, 0
	.type	 atk47_setgraphicalstatchangevalues,function
	.thumb_func
atk47_setgraphicalstatchangevalues:
	push	{r4, lr}
	mov	r3, #0x0
	ldr	r0, .L981
	ldr	r2, .L981+0x4
	add	r1, r0, r2
	ldrb	r1, [r1]
	mov	r2, #0xf0
	and	r2, r2, r1
	add	r4, r0, #0
	cmp	r2, #0x20
	beq	.L975	@cond_branch
	cmp	r2, #0x20
	bgt	.L980	@cond_branch
	cmp	r2, #0x10
	beq	.L974	@cond_branch
	b	.L973
.L982:
	.align	2, 0
.L981:
	.word	gSharedMem
	.word	0x1601e
.L980:
	cmp	r2, #0x90
	beq	.L976	@cond_branch
	cmp	r2, #0xa0
	beq	.L977	@cond_branch
	b	.L973
.L974:
	mov	r3, #0xf
	b	.L973
.L975:
	mov	r3, #0x27
	b	.L973
.L976:
	mov	r3, #0x16
	b	.L973
.L977:
	mov	r3, #0x2e
.L973:
	ldr	r1, .L983
	add	r0, r4, r1
	ldrb	r1, [r0]
	mov	r0, #0xf
	and	r0, r0, r1
	add	r0, r3, r0
	sub	r0, r0, #0x1
	ldr	r2, .L983+0x4
	add	r1, r4, r2
	mov	r2, #0x0
	strb	r0, [r1]
	ldr	r1, .L983+0x8
	add	r0, r4, r1
	strb	r2, [r0]
	ldr	r1, .L983+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L984:
	.align	2, 0
.L983:
	.word	0x1601e
	.word	0x160a4
	.word	0x160a5
	.word	gBattlescriptCurrInstr
.Lfe85:
	.size	 atk47_setgraphicalstatchangevalues,.Lfe85-atk47_setgraphicalstatchangevalues
	.align	2, 0
	.type	 atk48_playstatchangeanimation,function
	.thumb_func
atk48_playstatchangeanimation:
	.syntax unified
push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x4
    movs r7, 0
    movs r0, 0
    mov r8, r0
    movs r3, 0
    ldr r5, _08021670 @ =gBattlescriptCurrInstr
    ldr r0, [r5]
    ldrb r0, [r0, 0x1]
    str r3, [sp]
    bl GetBattleBank
    ldr r2, _08021674 @ =gActiveBank
    strb r0, [r2]
    ldr r0, [r5]
    ldrb r4, [r0, 0x2]
    ldrb r1, [r0, 0x3]
    movs r0, 0x1
    ands r0, r1
    ldr r3, [sp]
    cmp r0, 0
    beq _08021710
    movs r0, 0x2
    ands r0, r1
    movs r1, 0x15
    cmp r0, 0
    beq _0802163C
    movs r1, 0x2D
_0802163C:
    cmp r4, 0
    beq _080216E4
    movs r0, 0x1
    mov r10, r0
    ldr r0, _08021678 @ =gUnknown_02024A98
    mov r9, r0
    lsls r5, r1, 16
_0802164A:
    adds r0, r4, 0
    mov r1, r10
    ands r0, r1
    cmp r0, 0
    beq _080216D6
    ldr r0, _08021670 @ =gBattlescriptCurrInstr
    ldr r0, [r0]
    ldrb r1, [r0, 0x3]
    movs r0, 0x8
    ands r0, r1
    cmp r0, 0
    beq _0802167C
    ldr r0, _08021674 @ =gActiveBank
    ldrb r1, [r0]
    movs r0, 0x58
    muls r0, r1
    adds r0, r7, r0
    b _080216C4
    .align 2, 0
_08021670: .4byte gBattlescriptCurrInstr
_08021674: .4byte gActiveBank
_08021678: .4byte gUnknown_02024A98
_0802167C:
    ldr r6, _08021700 @ =gActiveBank
    ldrb r0, [r6]
    str r3, [sp]
    bl GetBankIdentity
    mov r1, r10
    ands r1, r0
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    ldr r1, _08021704 @ =gSideTimer
    adds r0, r1
    ldrb r0, [r0, 0x2]
    ldr r3, [sp]
    cmp r0, 0
    bne _080216D6
    ldr r0, _08021708 @ =gBattleMons
    ldrb r2, [r6]
    movs r1, 0x58
    muls r2, r1
    adds r0, r2, r0
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x1D
    beq _080216D6
    cmp r0, 0x49
    beq _080216D6
    cmp r0, 0x33
    bne _080216BA
    cmp r7, 0x6
    beq _080216D6
_080216BA:
    cmp r0, 0x34
    bne _080216C2
    cmp r7, 0x1
    beq _080216D6
_080216C2:
    adds r0, r7, r2
_080216C4:
    add r0, r9
    ldrb r0, [r0]
    lsls r0, 24
    asrs r0, 24
    cmp r0, 0
    ble _080216D6
    lsrs r0, r5, 16
    mov r8, r0
    adds r3, 0x1
_080216D6:
    lsrs r4, 1
    movs r1, 0x80
    lsls r1, 9
    adds r5, r1
    adds r7, 0x1
    cmp r4, 0
    bne _0802164A
_080216E4:
    ldr r0, _0802170C @ =gBattlescriptCurrInstr
    mov r9, r0
    cmp r3, 0x1
    ble _08021772
    ldr r0, [r0]
    ldrb r1, [r0, 0x3]
    movs r0, 0x2
    ands r0, r1
    movs r1, 0x39
    mov r8, r1
    cmp r0, 0
    beq _08021772
    movs r0, 0x3A
    b _08021770
    .align 2, 0
_08021700: .4byte gActiveBank
_08021704: .4byte gSideTimer
_08021708: .4byte gBattleMons
_0802170C: .4byte gBattlescriptCurrInstr
_08021710:
    movs r0, 0x2
    ands r0, r1
    movs r1, 0xE
    cmp r0, 0
    beq _0802171C
    movs r1, 0x26
_0802171C:
    mov r9, r5
    cmp r4, 0
    beq _08021758
    ldr r6, _0802178C @ =gUnknown_02024A98
    adds r5, r2, 0
    lsls r2, r1, 16
_08021728:
    movs r0, 0x1
    ands r0, r4
    cmp r0, 0
    beq _0802174A
    ldrb r1, [r5]
    movs r0, 0x58
    muls r0, r1
    adds r0, r7, r0
    adds r0, r6
    ldrb r0, [r0]
    lsls r0, 24
    asrs r0, 24
    cmp r0, 0xB
    bgt _0802174A
    lsrs r1, r2, 16
    mov r8, r1
    adds r3, 0x1
_0802174A:
    lsrs r4, 1
    movs r0, 0x80
    lsls r0, 9
    adds r2, r0
    adds r7, 0x1
    cmp r4, 0
    bne _08021728
_08021758:
    cmp r3, 0x1
    ble _08021772
    mov r1, r9
    ldr r0, [r1]
    ldrb r1, [r0, 0x3]
    movs r0, 0x2
    ands r0, r1
    movs r1, 0x37
    mov r8, r1
    cmp r0, 0
    beq _08021772
    movs r0, 0x38
_08021770:
    mov r8, r0
_08021772:
    mov r1, r9
    ldr r2, [r1]
    ldrb r1, [r2, 0x3]
    movs r0, 0x4
    ands r0, r1
    cmp r0, 0
    beq _08021790
    cmp r3, 0x1
    bgt _08021790
    adds r0, r2, 0x4
    mov r1, r9
    b _080217E6
    .align 2, 0
_0802178C: .4byte gUnknown_02024A98
_08021790:
    cmp r3, 0
    beq _080217E0
    ldr r0, _080217D0 @ =gSharedMem
    ldr r1, _080217D4 @ =0x000160dc
    adds r4, r0, r1
    ldrb r0, [r4]
    cmp r0, 0
    bne _080217E0
    movs r0, 0
    movs r1, 0x1
    mov r2, r8
    str r3, [sp]
    bl EmitBattleAnimation
    ldr r0, _080217D8 @ =gActiveBank
    ldrb r0, [r0]
    bl MarkBufferBankForExecution
    ldr r0, _080217DC @ =gBattlescriptCurrInstr
    ldr r0, [r0]
    ldrb r1, [r0, 0x3]
    movs r0, 0x4
    ands r0, r1
    ldr r3, [sp]
    cmp r0, 0
    beq _080217CC
    cmp r3, 0x1
    ble _080217CC
    movs r0, 0x1
    strb r0, [r4]
_080217CC:
    ldr r1, _080217DC @ =gBattlescriptCurrInstr
    b _080217E2
    .align 2, 0
_080217D0: .4byte gSharedMem
_080217D4: .4byte 0x000160dc
_080217D8: .4byte gActiveBank
_080217DC: .4byte gBattlescriptCurrInstr
_080217E0:
    mov r1, r9
_080217E2:
    ldr r0, [r1]
    adds r0, 0x4
_080217E6:
    str r0, [r1]
    add sp, 0x4
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
        .syntax divided
	.code	16
.Lfe86:
	.size	 atk48_playstatchangeanimation,.Lfe86-atk48_playstatchangeanimation
	.align	2, 0
	.type	 atk49_moveendturn,function
	.thumb_func
atk49_moveendturn:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x18
    movs r0, 0
    mov r10, r0
    ldr r0, _08021834 @ =gBattlescriptCurrInstr
    ldr r0, [r0]
    ldrb r1, [r0, 0x1]
    str r1, [sp, 0x10]
    ldrb r0, [r0, 0x2]
    str r0, [sp, 0x14]
    ldr r1, _08021838 @ =gBattleMons
    ldr r0, _0802183C @ =gBankAttacker
    ldrb r2, [r0]
    movs r0, 0x58
    muls r0, r2
    adds r1, r0, r1
    ldrh r0, [r1, 0x2E]
    cmp r0, 0xAF
    bne _08021844
    ldr r1, _08021840 @ =gEnigmaBerries
    lsls r0, r2, 3
    subs r0, r2
    lsls r0, 2
    adds r0, r1
    ldrb r0, [r0, 0x7]
    b _0802184E
    .align 2, 0
_08021834: .4byte gBattlescriptCurrInstr
_08021838: .4byte gBattleMons
_0802183C: .4byte gBankAttacker
_08021840: .4byte gEnigmaBerries
_08021844:
    ldrh r0, [r1, 0x2E]
    bl ItemId_GetHoldEffect
    lsls r0, 24
    lsrs r0, 24
_0802184E:
    str r0, [sp, 0x8]
    ldr r0, _0802186C @ =gBankAttacker
    ldrb r1, [r0]
    lsls r1, 1
    ldr r0, _08021870 @ =gSharedMem + 0x160E8
    adds r1, r0
    str r1, [sp, 0xC]
    subs r0, 0xCC
    ldrb r0, [r0]
    cmp r0, 0
    beq _080218C0
    movs r2, 0x3F
    ands r2, r0
    str r2, [sp, 0x4]
    b _080218D2
    .align 2, 0
_0802186C: .4byte gBankAttacker
_08021870: .4byte gSharedMem + 0x160E8
_08021874:
    strb r2, [r7]
    ldr r0, [r5]
    orrs r0, r6
    str r0, [r5]
    ldr r0, _080218AC @ =gSharedMem
    ldr r3, _080218B0 @ =0x0001600c
    adds r0, r3
    strb r4, [r0]
    bl MoveValuesCleanUp
    ldr r2, _080218B4 @ =gBattleScriptsEffectsTable
    mov r4, r8
    ldrh r1, [r4]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    add r0, r9
    ldrb r0, [r0]
    lsls r0, 2
    adds r0, r2
    ldr r0, [r0]
    bl b_movescr_stack_push
    ldr r1, _080218B8 @ =gBattlescriptCurrInstr
    ldr r0, _080218BC @ =gUnknown_081D9B2D
    bl _0802229C
    .align 2, 0
_080218AC: .4byte gSharedMem
_080218B0: .4byte 0x0001600c
_080218B4: .4byte gBattleScriptsEffectsTable
_080218B8: .4byte gBattlescriptCurrInstr
_080218BC: .4byte gUnknown_081D9B2D
_080218C0:
    ldr r2, _080218D8 @ =gBattleMoves
    ldr r0, _080218DC @ =gCurrentMove
    ldrh r1, [r0]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r2
    ldrb r0, [r0, 0x2]
    str r0, [sp, 0x4]
_080218D2:
    ldr r5, _080218E0 @ =gSharedMem
    mov r12, r5
    b _080218EE
    .align 2, 0
_080218D8: .4byte gBattleMoves
_080218DC: .4byte gCurrentMove
_080218E0: .4byte gSharedMem
_080218E4:
    mov r0, r10
    cmp r0, 0
    beq _080218EE
    bl _08022286
_080218EE:
    ldr r0, _08021908 @ =0x0001600c
    add r0, r12
    ldrb r0, [r0]
    cmp r0, 0x11
    bls _080218FC
    bl _0802224E
_080218FC:
    lsls r0, 2
    ldr r1, _0802190C @ =_08021910
    adds r0, r1
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_08021908: .4byte 0x0001600c
_0802190C: .4byte _08021910
    .align 2, 0
_08021910:
    .4byte _08021958
    .4byte _08021A34
    .4byte _08021AF0
    .4byte _08021B20
    .4byte _08021B44
    .4byte _08021B78
    .4byte _08021B9C
    .4byte _08021C40
    .4byte _08021C78
    .4byte _08021CA8
    .4byte _08021CCC
    .4byte _08021D18
    .4byte _08021DAC
    .4byte _08021E30
    .4byte _08021E70
    .4byte _08022068
    .4byte _080221C0
    .4byte _0802224E
_08021958:
    ldr r5, _08021A08 @ =gBattleMons
    ldr r2, _08021A0C @ =gBankTarget
    ldrb r4, [r2]
    movs r6, 0x58
    adds r3, r4, 0
    muls r3, r6
    adds r0, r5, 0
    adds r0, 0x50
    adds r0, r3, r0
    ldr r1, [r0]
    movs r0, 0x80
    lsls r0, 16
    ands r1, r0
    cmp r1, 0
    beq _080219FE
    adds r0, r3, r5
    ldrh r0, [r0, 0x28]
    cmp r0, 0
    beq _080219FE
    ldr r0, _08021A10 @ =gBankAttacker
    ldrb r1, [r0]
    cmp r1, r4
    beq _080219FE
    adds r0, r1, 0
    bl GetBankSide
    adds r4, r0, 0
    ldr r1, _08021A0C @ =gBankTarget
    ldrb r0, [r1]
    bl GetBankSide
    lsls r4, 24
    lsls r0, 24
    cmp r4, r0
    beq _080219FE
    ldr r0, _08021A14 @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r0, 0x29
    ands r0, r1
    cmp r0, 0
    bne _080219FE
    ldr r2, _08021A18 @ =gProtectStructs
    ldr r4, _08021A0C @ =gBankTarget
    ldrb r3, [r4]
    lsls r1, r3, 4
    adds r0, r2, 0x4
    adds r0, r1, r0
    ldr r0, [r0]
    cmp r0, 0
    bne _080219C8
    adds r0, r2, 0
    adds r0, 0x8
    adds r0, r1, r0
    ldr r0, [r0]
    cmp r0, 0
    beq _080219FE
_080219C8:
    ldr r2, _08021A1C @ =gBattleMoves
    ldr r0, _08021A20 @ =gCurrentMove
    ldrh r1, [r0]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r2
    ldrb r0, [r0, 0x1]
    cmp r0, 0
    beq _080219FE
    adds r0, r3, 0
    muls r0, r6
    adds r1, r0, r5
    ldrb r2, [r1, 0x19]
    movs r0, 0x19
    ldrsb r0, [r1, r0]
    cmp r0, 0xB
    bgt _080219FE
    adds r0, r2, 0x1
    strb r0, [r1, 0x19]
    bl b_movescr_stack_push_cursor
    ldr r1, _08021A24 @ =gBattlescriptCurrInstr
    ldr r0, _08021A28 @ =gUnknown_081D9132
    str r0, [r1]
    movs r5, 0x1
    mov r10, r5
_080219FE:
    ldr r2, _08021A2C @ =gSharedMem
    ldr r0, _08021A30 @ =0x0001600c
    adds r1, r2, r0
    b _08021E00
    .align 2, 0
_08021A08: .4byte gBattleMons
_08021A0C: .4byte gBankTarget
_08021A10: .4byte gBankAttacker
_08021A14: .4byte gBattleMoveFlags
_08021A18: .4byte gProtectStructs
_08021A1C: .4byte gBattleMoves
_08021A20: .4byte gCurrentMove
_08021A24: .4byte gBattlescriptCurrInstr
_08021A28: .4byte gUnknown_081D9132
_08021A2C: .4byte gSharedMem
_08021A30: .4byte 0x0001600c
_08021A34:
    ldr r2, _08021AD0 @ =gBattleMons
    ldr r1, _08021AD4 @ =gBankTarget
    ldrb r4, [r1]
    movs r3, 0x58
    mov r12, r3
    mov r3, r12
    muls r3, r4
    adds r7, r2, 0
    adds r7, 0x4C
    adds r6, r3, r7
    ldr r5, [r6]
    movs r0, 0x20
    ands r0, r5
    cmp r0, 0
    bne _08021A54
    b _08021DFA
_08021A54:
    adds r0, r3, r2
    ldrh r0, [r0, 0x28]
    cmp r0, 0
    bne _08021A5E
    b _08021DFA
_08021A5E:
    ldr r0, _08021AD8 @ =gBankAttacker
    ldrb r0, [r0]
    cmp r0, r4
    bne _08021A68
    b _08021DFA
_08021A68:
    ldr r0, _08021ADC @ =gSpecialStatuses
    lsls r1, r4, 2
    adds r1, r4
    lsls r1, 2
    adds r0, 0xC
    adds r1, r0
    ldr r0, [r1]
    cmp r0, 0
    bne _08021A7C
    b _08021DFA
_08021A7C:
    ldr r0, _08021AE0 @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r0, 0x29
    ands r0, r1
    cmp r0, 0
    beq _08021A8A
    b _08021DFA
_08021A8A:
    ldr r4, [sp, 0x4]
    cmp r4, 0xA
    beq _08021A92
    b _08021DFA
_08021A92:
    movs r0, 0x21
    negs r0, r0
    ands r5, r0
    str r5, [r6]
    ldr r4, _08021AE4 @ =gActiveBank
    ldr r5, _08021AD4 @ =gBankTarget
    ldrb r0, [r5]
    strb r0, [r4]
    ldrb r0, [r5]
    mov r1, r12
    muls r1, r0
    adds r0, r1, 0
    adds r0, r7
    str r0, [sp]
    movs r0, 0
    movs r1, 0x28
    movs r2, 0
    movs r3, 0x4
    bl EmitSetAttributes
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    bl b_movescr_stack_push_cursor
    ldr r1, _08021AE8 @ =gBattlescriptCurrInstr
    ldr r0, _08021AEC @ =gUnknown_081D955D
    str r0, [r1]
    movs r2, 0x1
    mov r10, r2
    b _08021DFA
    .align 2, 0
_08021AD0: .4byte gBattleMons
_08021AD4: .4byte gBankTarget
_08021AD8: .4byte gBankAttacker
_08021ADC: .4byte gSpecialStatuses
_08021AE0: .4byte gBattleMoveFlags
_08021AE4: .4byte gActiveBank
_08021AE8: .4byte gBattlescriptCurrInstr
_08021AEC: .4byte gUnknown_081D955D
_08021AF0:
    ldr r0, _08021B14 @ =gBankTarget
    ldrb r1, [r0]
    movs r0, 0
    str r0, [sp]
    movs r0, 0x7
    movs r2, 0
    movs r3, 0
    bl AbilityBattleEffects
    lsls r0, 24
    cmp r0, 0
    beq _08021B0C
    movs r4, 0x1
    mov r10, r4
_08021B0C:
    ldr r2, _08021B18 @ =gSharedMem
    ldr r5, _08021B1C @ =0x0001600c
    adds r1, r2, r5
    b _08021E00
    .align 2, 0
_08021B14: .4byte gBankTarget
_08021B18: .4byte gSharedMem
_08021B1C: .4byte 0x0001600c
_08021B20:
    ldr r0, _08021B40 @ =gBankTarget
    ldrb r1, [r0]
    movs r0, 0
    str r0, [sp]
    movs r0, 0x4
    movs r2, 0
    movs r3, 0
    bl AbilityBattleEffects
    lsls r0, 24
    cmp r0, 0
    bne _08021B3A
    b _08021DFA
_08021B3A:
    movs r0, 0x1
    mov r10, r0
    b _08021DFA
    .align 2, 0
_08021B40: .4byte gBankTarget
_08021B44:
    movs r0, 0
    str r0, [sp]
    movs r0, 0x5
    movs r1, 0
    movs r2, 0
    movs r3, 0
    bl AbilityBattleEffects
    lsls r0, 24
    cmp r0, 0
    beq _08021B68
    movs r4, 0x1
    mov r10, r4
    ldr r5, _08021B64 @ =gSharedMem
    mov r12, r5
    b _0802224E
    .align 2, 0
_08021B64: .4byte gSharedMem
_08021B68:
    ldr r2, _08021B70 @ =gSharedMem
    ldr r0, _08021B74 @ =0x0001600c
    adds r1, r2, r0
    b _08021E00
    .align 2, 0
_08021B70: .4byte gSharedMem
_08021B74: .4byte 0x0001600c
_08021B78:
    ldr r0, _08021B98 @ =gBankAttacker
    ldrb r1, [r0]
    movs r0, 0
    str r0, [sp]
    movs r0, 0x8
    movs r2, 0
    movs r3, 0
    bl AbilityBattleEffects
    lsls r0, 24
    cmp r0, 0
    bne _08021B92
    b _08021DFA
_08021B92:
    movs r1, 0x1
    mov r10, r1
    b _08021DFA
    .align 2, 0
_08021B98: .4byte gBankAttacker
_08021B9C:
    ldr r0, _08021C28 @ =gHitMarker
    ldr r0, [r0]
    movs r1, 0x80
    lsls r1, 18
    ands r0, r1
    cmp r0, 0
    beq _08021BE0
    ldr r4, [sp, 0x8]
    cmp r4, 0x1D
    bne _08021BE0
    ldr r0, _08021C2C @ =gUnknown_02024BE8
    ldrh r2, [r0]
    adds r7, r0, 0
    cmp r2, 0xA5
    beq _08021BE0
    ldr r5, [sp, 0xC]
    ldrh r1, [r5]
    cmp r1, 0
    beq _08021BC8
    ldr r0, _08021C30 @ =0x0000ffff
    cmp r1, r0
    bne _08021BE0
_08021BC8:
    cmp r2, 0xE2
    bne _08021BDA
    ldr r0, _08021C34 @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r0, 0x20
    ands r0, r1
    cmp r0, 0
    bne _08021BDA
    b _08022244
_08021BDA:
    ldrh r0, [r7]
    ldr r1, [sp, 0xC]
    strh r0, [r1]
_08021BE0:
    movs r4, 0
    ldr r2, _08021C38 @ =gBattleMons
    ldr r3, _08021C3C @ =gBankAttacker
    ldrb r1, [r3]
    movs r0, 0x58
    muls r0, r1
    adds r2, 0xC
    adds r0, r2
    ldrh r0, [r0]
    ldr r5, [sp, 0xC]
    ldrh r1, [r5]
    mov r9, r3
    cmp r0, r1
    beq _08021C18
    mov r6, r9
    movs r3, 0x58
    adds r5, r1, 0
_08021C02:
    adds r4, 0x1
    cmp r4, 0x3
    bgt _08021C18
    lsls r0, r4, 1
    ldrb r1, [r6]
    muls r1, r3
    adds r0, r1
    adds r0, r2
    ldrh r0, [r0]
    cmp r0, r5
    bne _08021C02
_08021C18:
    cmp r4, 0x4
    beq _08021C1E
    b _08022244
_08021C1E:
    movs r0, 0
    ldr r1, [sp, 0xC]
_08021C22:
    strh r0, [r1]
    b _08022244
    .align 2, 0
_08021C28: .4byte gHitMarker
_08021C2C: .4byte gUnknown_02024BE8
_08021C30: .4byte 0x0000ffff
_08021C34: .4byte gBattleMoveFlags
_08021C38: .4byte gBattleMons
_08021C3C: .4byte gBankAttacker
_08021C40:
    movs r4, 0
    ldr r0, _08021C6C @ =gNoOfAllBanks
    ldrb r2, [r0]
    cmp r4, r2
    blt _08021C4C
    b _08022244
_08021C4C:
    movs r5, 0
    ldr r2, _08021C70 @ =gSharedMem + 0x160F0
    ldr r3, _08021C74 @ =gBattleMons
_08021C52:
    ldrh r1, [r2]
    cmp r1, 0
    beq _08021C5C
    strh r1, [r3, 0x2E]
    strh r5, [r2]
_08021C5C:
    adds r2, 0x2
    adds r3, 0x58
    adds r4, 0x1
    ldrb r1, [r0]
    cmp r4, r1
    blt _08021C52
    b _08022244
    .align 2, 0
_08021C6C: .4byte gNoOfAllBanks
_08021C70: .4byte gSharedMem + 0x160F0
_08021C74: .4byte gBattleMons
_08021C78:
    movs r0, 0x3
    movs r1, 0
    movs r2, 0
    bl ItemBattleEffects
    lsls r0, 24
    cmp r0, 0
    beq _08021C98
    movs r2, 0x1
    mov r10, r2
    ldr r3, _08021C94 @ =gSharedMem
    mov r12, r3
    b _0802224E
    .align 2, 0
_08021C94: .4byte gSharedMem
_08021C98:
    ldr r2, _08021CA0 @ =gSharedMem
    ldr r4, _08021CA4 @ =0x0001600c
    adds r1, r2, r4
    b _08021E00
    .align 2, 0
_08021CA0: .4byte gSharedMem
_08021CA4: .4byte 0x0001600c
_08021CA8:
    movs r0, 0x4
    movs r1, 0
    movs r2, 0
    bl ItemBattleEffects
    lsls r0, 24
    cmp r0, 0
    beq _08021CBC
    movs r5, 0x1
    mov r10, r5
_08021CBC:
    ldr r2, _08021CC4 @ =gSharedMem
    ldr r0, _08021CC8 @ =0x0001600c
    adds r1, r2, r0
    b _08021E00
    .align 2, 0
_08021CC4: .4byte gSharedMem
_08021CC8: .4byte 0x0001600c
_08021CCC:
    ldr r1, _08021D04 @ =gStatuses3
    ldr r0, _08021D08 @ =gBankAttacker
    ldrb r2, [r0]
    lsls r0, r2, 2
    adds r0, r1
    ldr r0, [r0]
    ldr r1, _08021D0C @ =0x000400c0
    ands r0, r1
    cmp r0, 0
    bne _08021CE2
    b _08021DFA
_08021CE2:
    ldr r0, _08021D10 @ =gHitMarker
    ldr r0, [r0]
    movs r1, 0x80
    ands r0, r1
    cmp r0, 0
    bne _08021CF0
    b _08021DFA
_08021CF0:
    ldr r4, _08021D14 @ =gActiveBank
    strb r2, [r4]
    movs r0, 0
    movs r1, 0x1
    bl EmitSpriteInvisibility
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    b _08021DFA
    .align 2, 0
_08021D04: .4byte gStatuses3
_08021D08: .4byte gBankAttacker
_08021D0C: .4byte 0x000400c0
_08021D10: .4byte gHitMarker
_08021D14: .4byte gActiveBank
_08021D18:
    ldr r0, _08021D88 @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r0, 0x29
    ands r0, r1
    cmp r0, 0
    bne _08021D44
    ldr r1, _08021D8C @ =gStatuses3
    ldr r0, _08021D90 @ =gBankAttacker
    ldrb r2, [r0]
    lsls r0, r2, 2
    adds r0, r1
    ldr r0, [r0]
    ldr r1, _08021D94 @ =0x000400c0
    ands r0, r1
    cmp r0, 0
    beq _08021D44
    adds r0, r2, 0
    bl sub_8015660
    lsls r0, 24
    cmp r0, 0
    beq _08021D7E
_08021D44:
    ldr r4, _08021D98 @ =gActiveBank
    ldr r5, _08021D90 @ =gBankAttacker
    ldrb r0, [r5]
    strb r0, [r4]
    movs r0, 0
    movs r1, 0
    bl EmitSpriteInvisibility
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    ldr r0, _08021D8C @ =gStatuses3
    ldrb r2, [r5]
    lsls r2, 2
    adds r2, r0
    ldr r0, [r2]
    ldr r1, _08021D9C @ =0xfffbff3f
    ands r0, r1
    str r0, [r2]
    ldr r2, _08021DA0 @ =gSpecialStatuses
    ldrb r1, [r5]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r2
    ldrb r1, [r0]
    movs r2, 0x4
    orrs r1, r2
    strb r1, [r0]
_08021D7E:
    ldr r2, _08021DA4 @ =gSharedMem
    ldr r4, _08021DA8 @ =0x0001600c
    adds r1, r2, r4
    b _08021E00
    .align 2, 0
_08021D88: .4byte gBattleMoveFlags
_08021D8C: .4byte gStatuses3
_08021D90: .4byte gBankAttacker
_08021D94: .4byte 0x000400c0
_08021D98: .4byte gActiveBank
_08021D9C: .4byte 0xfffbff3f
_08021DA0: .4byte gSpecialStatuses
_08021DA4: .4byte gSharedMem
_08021DA8: .4byte 0x0001600c
_08021DAC:
    ldr r2, _08021E0C @ =gSpecialStatuses
    ldr r1, _08021E10 @ =gBankTarget
    ldrb r3, [r1]
    lsls r4, r3, 2
    adds r0, r4, r3
    lsls r0, 2
    adds r0, r2
    ldrb r0, [r0]
    lsls r0, 29
    cmp r0, 0
    blt _08021DFA
    ldr r0, _08021E14 @ =gNoOfAllBanks
    ldrb r0, [r0]
    cmp r3, r0
    bcs _08021DFA
    ldr r5, _08021E18 @ =gStatuses3
    adds r0, r4, r5
    ldr r0, [r0]
    ldr r1, _08021E1C @ =0x000400c0
    ands r0, r1
    cmp r0, 0
    bne _08021DFA
    ldr r4, _08021E20 @ =gActiveBank
    strb r3, [r4]
    movs r0, 0
    movs r1, 0
    bl EmitSpriteInvisibility
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    ldr r0, _08021E10 @ =gBankTarget
    ldrb r2, [r0]
    lsls r2, 2
    adds r2, r5
    ldr r0, [r2]
    ldr r1, _08021E24 @ =0xfffbff3f
    ands r0, r1
    str r0, [r2]
_08021DFA:
    ldr r2, _08021E28 @ =gSharedMem
    ldr r3, _08021E2C @ =0x0001600c
    adds r1, r2, r3
_08021E00:
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
    mov r12, r2
    b _0802224E
    .align 2, 0
_08021E0C: .4byte gSpecialStatuses
_08021E10: .4byte gBankTarget
_08021E14: .4byte gNoOfAllBanks
_08021E18: .4byte gStatuses3
_08021E1C: .4byte 0x000400c0
_08021E20: .4byte gActiveBank
_08021E24: .4byte 0xfffbff3f
_08021E28: .4byte gSharedMem
_08021E2C: .4byte 0x0001600c
_08021E30:
    movs r4, 0
    ldr r0, _08021E60 @ =gNoOfAllBanks
    ldrb r5, [r0]
    cmp r4, r5
    blt _08021E3C
    b _08022244
_08021E3C:
    ldr r2, _08021E64 @ =gDisableStructs
    ldr r5, _08021E68 @ =0xfeffffff
    adds r3, r0, 0
    ldr r1, _08021E6C @ =gUnknown_02024AD0
_08021E44:
    ldrb r0, [r2, 0xA]
    cmp r0, 0
    bne _08021E50
    ldr r0, [r1]
    ands r0, r5
    str r0, [r1]
_08021E50:
    adds r2, 0x1C
    adds r1, 0x58
    adds r4, 0x1
    ldrb r0, [r3]
    cmp r4, r0
    blt _08021E44
    b _08022244
    .align 2, 0
_08021E60: .4byte gNoOfAllBanks
_08021E64: .4byte gDisableStructs
_08021E68: .4byte 0xfeffffff
_08021E6C: .4byte gUnknown_02024AD0
_08021E70:
    ldr r1, _08021F2C @ =gHitMarker
    ldr r3, [r1]
    movs r0, 0x80
    lsls r0, 5
    ands r0, r3
    ldr r2, _08021F30 @ =gBankAttacker
    mov r9, r2
    adds r5, r1, 0
    cmp r0, 0
    beq _08021E9A
    ldr r0, _08021F34 @ =gActiveBank
    ldrb r2, [r2]
    strb r2, [r0]
    ldr r1, _08021F38 @ =gBankTarget
    ldrb r0, [r1]
    mov r4, r9
    strb r0, [r4]
    strb r2, [r1]
    ldr r0, _08021F3C @ =0xffffefff
    ands r3, r0
    str r3, [r5]
_08021E9A:
    ldr r1, _08021F40 @ =gBattleMoves
    ldr r2, _08021F44 @ =gUnknown_02024BE8
    ldrh r3, [r2]
    lsls r0, r3, 1
    adds r0, r3
    lsls r0, 2
    adds r0, r1
    ldrb r0, [r0]
    mov r8, r1
    adds r7, r2, 0
    cmp r0, 0x7F
    bne _08021EBE
    ldr r0, _08021F48 @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r0, 0x29
    ands r0, r1
    cmp r0, 0
    beq _08021ECA
_08021EBE:
    ldr r1, _08021F4C @ =gUnknown_02024C2C
    mov r2, r9
    ldrb r0, [r2]
    lsls r0, 1
    adds r0, r1
    strh r3, [r0]
_08021ECA:
    ldr r0, _08021F50 @ =gAbsentBankFlags
    ldrb r1, [r0]
    ldr r2, _08021F54 @ =gBitTable
    mov r3, r9
    ldrb r4, [r3]
    lsls r0, r4, 2
    adds r0, r2
    ldr r3, [r0]
    ands r1, r3
    adds r6, r2, 0
    cmp r1, 0
    beq _08021EE4
    b _08022244
_08021EE4:
    ldr r0, _08021F58 @ =0x000160a6
    add r0, r12
    ldrb r0, [r0]
    ands r0, r3
    cmp r0, 0
    beq _08021EF2
    b _08022244
_08021EF2:
    ldrh r2, [r7]
    lsls r0, r2, 1
    adds r0, r2
    lsls r0, 2
    add r0, r8
    ldrb r0, [r0]
    cmp r0, 0x7F
    bne _08021F04
    b _08022244
_08021F04:
    ldr r0, [r5]
    movs r1, 0x80
    lsls r1, 18
    ands r0, r1
    cmp r0, 0
    beq _08021F68
    ldr r1, _08021F5C @ =gLastUsedMove
    lsls r0, r4, 1
    adds r0, r1
    strh r2, [r0]
    ldr r0, _08021F60 @ =gUnknown_02024C4C
    mov r4, r9
    ldrb r1, [r4]
    lsls r1, 1
    adds r1, r0
    ldr r0, _08021F64 @ =gCurrentMove
    ldrh r0, [r0]
    strh r0, [r1]
    b _08021F82
    .align 2, 0
_08021F2C: .4byte gHitMarker
_08021F30: .4byte gBankAttacker
_08021F34: .4byte gActiveBank
_08021F38: .4byte gBankTarget
_08021F3C: .4byte 0xffffefff
_08021F40: .4byte gBattleMoves
_08021F44: .4byte gUnknown_02024BE8
_08021F48: .4byte gBattleMoveFlags
_08021F4C: .4byte gUnknown_02024C2C
_08021F50: .4byte gAbsentBankFlags
_08021F54: .4byte gBitTable
_08021F58: .4byte 0x000160a6
_08021F5C: .4byte gLastUsedMove
_08021F60: .4byte gUnknown_02024C4C
_08021F64: .4byte gCurrentMove
_08021F68:
    ldr r1, _08021FD0 @ =gLastUsedMove
    lsls r0, r4, 1
    adds r0, r1
    ldr r1, _08021FD4 @ =0x0000ffff
    strh r1, [r0]
    ldr r1, _08021FD8 @ =gUnknown_02024C4C
    mov r2, r9
    ldrb r0, [r2]
    lsls r0, 1
    adds r0, r1
    movs r1, 0x1
    negs r1, r1
    strh r1, [r0]
_08021F82:
    ldr r2, _08021FDC @ =gBankTarget
    ldrb r3, [r2]
    lsls r0, r3, 2
    adds r0, r6
    ldr r0, [r0]
    lsls r0, 28
    ldr r1, [r5]
    ands r1, r0
    cmp r1, 0
    bne _08021FA0
    ldr r0, _08021FE0 @ =gUnknown_02024C5C
    adds r0, r3, r0
    mov r3, r9
    ldrb r1, [r3]
    strb r1, [r0]
_08021FA0:
    ldr r0, [r5]
    movs r1, 0x80
    lsls r1, 18
    ands r0, r1
    cmp r0, 0
    beq _0802204C
    ldr r0, _08021FE4 @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r0, 0x29
    ands r0, r1
    cmp r0, 0
    bne _0802204C
    ldrh r2, [r7]
    ldr r0, _08021FD4 @ =0x0000ffff
    cmp r2, r0
    bne _08021FEC
    ldr r1, _08021FE8 @ =gMoveHitWith
    ldr r4, _08021FDC @ =gBankTarget
    ldrb r0, [r4]
    lsls r0, 1
    adds r0, r1
    strh r2, [r0]
    b _08022244
    .align 2, 0
_08021FD0: .4byte gLastUsedMove
_08021FD4: .4byte 0x0000ffff
_08021FD8: .4byte gUnknown_02024C4C
_08021FDC: .4byte gBankTarget
_08021FE0: .4byte gUnknown_02024C5C
_08021FE4: .4byte gBattleMoveFlags
_08021FE8: .4byte gMoveHitWith
_08021FEC:
    ldr r0, _08022014 @ =gMoveHitWith
    ldr r5, _08022018 @ =gBankTarget
    ldrb r1, [r5]
    lsls r1, 1
    adds r1, r0
    ldr r4, _0802201C @ =gCurrentMove
    ldrh r0, [r4]
    strh r0, [r1]
    ldr r0, _08022020 @ =0x0001601c
    add r0, r12
    ldrb r3, [r0]
    cmp r3, 0
    beq _08022028
    ldr r0, _08022024 @ =gUnknown_02024C44
    ldrb r1, [r5]
    lsls r1, 1
    adds r1, r0
    movs r0, 0x3F
    ands r0, r3
    b _08021C22
    .align 2, 0
_08022014: .4byte gMoveHitWith
_08022018: .4byte gBankTarget
_0802201C: .4byte gCurrentMove
_08022020: .4byte 0x0001601c
_08022024: .4byte gUnknown_02024C44
_08022028:
    ldr r0, _08022044 @ =gUnknown_02024C44
    ldr r1, _08022048 @ =gBankTarget
    ldrb r2, [r1]
    lsls r2, 1
    adds r2, r0
    ldrh r1, [r4]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    add r0, r8
    ldrb r0, [r0, 0x2]
    strh r0, [r2]
    b _08022244
    .align 2, 0
_08022044: .4byte gUnknown_02024C44
_08022048: .4byte gBankTarget
_0802204C:
    ldr r0, _0802205C @ =gMoveHitWith
    ldr r2, _08022060 @ =gBankTarget
    ldrb r1, [r2]
    lsls r1, 1
    adds r1, r0
    ldr r0, _08022064 @ =0x0000ffff
    b _08021C22
    .align 2, 0
_0802205C: .4byte gMoveHitWith
_08022060: .4byte gBankTarget
_08022064: .4byte 0x0000ffff
_08022068:
    ldr r0, _0802212C @ =gAbsentBankFlags
    ldrb r1, [r0]
    ldr r6, _08022130 @ =gBitTable
    ldr r2, _08022134 @ =gBankAttacker
    ldrb r5, [r2]
    lsls r0, r5, 2
    adds r0, r6
    ldr r4, [r0]
    ands r1, r4
    mov r9, r2
    cmp r1, 0
    beq _08022082
    b _08022244
_08022082:
    ldr r0, _08022138 @ =0x000160a6
    add r0, r12
    ldrb r0, [r0]
    ands r0, r4
    cmp r0, 0
    beq _08022090
    b _08022244
_08022090:
    ldr r1, _0802213C @ =gBattleMoves
    ldr r4, _08022140 @ =gUnknown_02024BE8
    ldrh r3, [r4]
    lsls r0, r3, 1
    adds r0, r3
    lsls r0, 2
    adds r0, r1
    ldrb r1, [r0, 0x8]
    movs r0, 0x10
    ands r0, r1
    cmp r0, 0
    beq _0802215C
    ldr r0, _08022144 @ =gHitMarker
    ldr r1, [r0]
    movs r0, 0x80
    lsls r0, 18
    ands r0, r1
    cmp r0, 0
    beq _0802215C
    ldr r2, _08022148 @ =gBankTarget
    ldrb r0, [r2]
    cmp r5, r0
    bne _080220C0
    b _08022244
_080220C0:
    adds r2, r0, 0
    lsls r0, r2, 2
    adds r0, r6
    ldr r0, [r0]
    lsls r0, 28
    ands r1, r0
    cmp r1, 0
    bne _0802215C
    ldr r0, _0802214C @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r0, 0x29
    ands r0, r1
    cmp r0, 0
    bne _0802215C
    lsls r0, r2, 1
    ldr r5, _08022150 @ =0x000160ac
    adds r0, r5
    add r0, r12
    strb r3, [r0]
    ldr r0, _08022148 @ =gBankTarget
    ldrb r1, [r0]
    lsls r1, 1
    ldr r2, _08022154 @ =0x000160ad
    adds r1, r2
    add r1, r12
    ldrh r0, [r4]
    lsrs r0, 8
    strb r0, [r1]
    ldr r3, _08022148 @ =gBankTarget
    ldrb r2, [r3]
    lsls r2, 2
    mov r5, r9
    ldrb r0, [r5]
    lsrs r0, 1
    lsls r0, 1
    ldr r1, _08022158 @ =0x00016100
    adds r0, r1
    adds r2, r0
    add r2, r12
    ldrh r0, [r4]
    strb r0, [r2]
    ldrb r2, [r3]
    lsls r2, 2
    ldrb r0, [r5]
    lsrs r0, 1
    lsls r0, 1
    adds r1, 0x1
    adds r0, r1
    adds r2, r0
    add r2, r12
    ldrh r0, [r4]
    lsrs r0, 8
    strb r0, [r2]
    b _08022244
    .align 2, 0
_0802212C: .4byte gAbsentBankFlags
_08022130: .4byte gBitTable
_08022134: .4byte gBankAttacker
_08022138: .4byte 0x000160a6
_0802213C: .4byte gBattleMoves
_08022140: .4byte gUnknown_02024BE8
_08022144: .4byte gHitMarker
_08022148: .4byte gBankTarget
_0802214C: .4byte gBattleMoveFlags
_08022150: .4byte 0x000160ac
_08022154: .4byte 0x000160ad
_08022158: .4byte 0x00016100
_0802215C:
    mov r1, r9
    ldrb r0, [r1]
    ldr r2, _080221B4 @ =gBankTarget
    ldrb r2, [r2]
    cmp r0, r2
    beq _08022244
    ldr r3, _080221B4 @ =gBankTarget
    ldrb r0, [r3]
    lsls r0, 1
    ldr r4, _080221B8 @ =0x000160ac
    adds r0, r4
    add r0, r12
    movs r3, 0
    strb r3, [r0]
    ldr r5, _080221B4 @ =gBankTarget
    ldrb r0, [r5]
    lsls r0, 1
    ldr r1, _080221BC @ =0x000160ad
    adds r0, r1
    add r0, r12
    strb r3, [r0]
    ldrb r2, [r5]
    lsls r2, 2
    mov r4, r9
    ldrb r0, [r4]
    lsrs r0, 1
    lsls r0, 1
    adds r1, 0x53
    adds r0, r1
    adds r2, r0
    add r2, r12
    strb r3, [r2]
    ldrb r2, [r5]
    lsls r2, 2
    ldrb r0, [r4]
    lsrs r0, 1
    lsls r0, 1
    adds r1, 0x1
    adds r0, r1
    adds r2, r0
    add r2, r12
    strb r3, [r2]
    b _08022244
    .align 2, 0
_080221B4: .4byte gBankTarget
_080221B8: .4byte 0x000160ac
_080221BC: .4byte 0x000160ad
_080221C0:
    ldr r5, _080222B0 @ =gHitMarker
    ldr r2, [r5]
    movs r0, 0x80
    lsls r0, 12
    ands r0, r2
    cmp r0, 0
    bne _08022244
    ldr r0, _080222B4 @ =gBattleTypeFlags
    ldrh r1, [r0]
    movs r0, 0x1
    ands r0, r1
    cmp r0, 0
    beq _08022244
    ldr r1, _080222B8 @ =gProtectStructs
    ldr r0, _080222BC @ =gBankAttacker
    ldrb r0, [r0]
    lsls r0, 4
    adds r0, r1
    ldrb r0, [r0, 0x1]
    lsls r0, 29
    cmp r0, 0
    blt _08022244
    ldr r0, _080222C0 @ =gBattleMoves
    mov r9, r0
    ldr r1, _080222C4 @ =gCurrentMove
    mov r8, r1
    ldrh r0, [r1]
    lsls r1, r0, 1
    adds r1, r0
    lsls r1, 2
    add r1, r9
    ldrb r0, [r1, 0x6]
    cmp r0, 0x8
    bne _08022244
    movs r6, 0x80
    lsls r6, 2
    adds r4, r6, 0
    ands r4, r2
    cmp r4, 0
    bne _08022244
    ldr r7, _080222C8 @ =gBankTarget
    ldrb r0, [r7]
    bl GetBankIdentity
    movs r1, 0x2
    eors r0, r1
    lsls r0, 24
    lsrs r0, 24
    bl GetBankByPlayerAI
    lsls r0, 24
    lsrs r2, r0, 24
    ldr r1, _080222CC @ =gBattleMons
    movs r0, 0x58
    muls r0, r2
    adds r0, r1
    ldrh r0, [r0, 0x28]
    cmp r0, 0
    beq _0802223A
    bl _08021874
_0802223A:
    ldr r0, [r5]
    orrs r0, r6
    str r0, [r5]
    ldr r2, _080222D0 @ =gSharedMem
    mov r12, r2
_08022244:
    ldr r1, _080222D4 @ =0x0001600c
    add r1, r12
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
_0802224E:
    ldr r3, [sp, 0x10]
    cmp r3, 0x1
    bne _08022262
    mov r4, r10
    cmp r4, 0
    bne _08022262
    ldr r1, _080222D4 @ =0x0001600c
    add r1, r12
    movs r0, 0x11
    strb r0, [r1]
_08022262:
    ldr r5, [sp, 0x10]
    cmp r5, 0x2
    bne _08022278
    ldr r1, _080222D4 @ =0x0001600c
    add r1, r12
    ldr r0, [sp, 0x14]
    ldrb r2, [r1]
    cmp r0, r2
    bne _08022278
    movs r0, 0x11
    strb r0, [r1]
_08022278:
    ldr r0, _080222D4 @ =0x0001600c
    add r0, r12
    ldrb r0, [r0]
    cmp r0, 0x11
    beq _08022286
    bl _080218E4
_08022286:
    ldr r0, _080222D4 @ =0x0001600c
    add r0, r12
    ldrb r0, [r0]
    cmp r0, 0x11
    bne _0802229E
    mov r3, r10
    cmp r3, 0
    bne _0802229E
    ldr r1, _080222D8 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x3
_0802229C:
    str r0, [r1]
_0802229E:
    add sp, 0x18
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_080222B0: .4byte gHitMarker
_080222B4: .4byte gBattleTypeFlags
_080222B8: .4byte gProtectStructs
_080222BC: .4byte gBankAttacker
_080222C0: .4byte gBattleMoves
_080222C4: .4byte gCurrentMove
_080222C8: .4byte gBankTarget
_080222CC: .4byte gBattleMons
_080222D0: .4byte gSharedMem
_080222D4: .4byte 0x0001600c
_080222D8: .4byte gBattlescriptCurrInstr
        .syntax divided
	.code	16
.Lfe87:
	.size	 atk49_moveendturn,.Lfe87-atk49_moveendturn
	.align	2, 0
	.type	 atk4A_typecalc2,function
	.thumb_func
atk4A_typecalc2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	mov	r5, #0x0
	ldr	r2, .L1012
	ldr	r0, .L1012+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r8, r0
	ldr	r2, .L1012+0x8
	ldr	r3, .L1012+0xc
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	ip, r2
	add	r7, r3, #0
	cmp	r0, #0x1a
	bne	.L988	@cond_branch
	mov	r1, r8
	cmp	r1, #0x4
	bne	.L988	@cond_branch
	ldr	r3, .L1012+0x10
	strb	r0, [r3]
	ldr	r2, .L1012+0x14
	ldrb	r0, [r2]
	mov	r1, #0x9
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1012+0x18
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r4, [r0]
	ldr	r0, .L1012+0x1c
	mov	r2, r8
	strb	r2, [r0, #0x6]
	ldrb	r0, [r7]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
	b	.L989
.L1013:
	.align	2, 0
.L1012:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBankTarget
	.word	gLastUsedAbility
	.word	gBattleMoveFlags
	.word	gMoveHitWith
	.word	gBattleCommunication
.L1009:
.L1010:
	ldr	r0, .L1014
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L989
.L1015:
	.align	2, 0
.L1014:
	.word	gBattleMoveFlags
.L988:
	ldr	r1, .L1016
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r6, r1, #0
	b	.L1011
.L1017:
	.align	2, 0
.L1016:
	.word	gTypeEffectiveness
.L993:
	add	r0, r5, r6
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L996	@cond_branch
	add	r2, r5, #0x1
	add	r3, r2, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r0, r0, #0x21
	ldrb	r1, [r3]
	add	r3, r2, #0
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L997	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	cmp	r1, #0
	beq	.L1009	@cond_branch
	cmp	r1, #0x5
	bne	.L999	@cond_branch
	mov	r0, #0x4
	orr	r4, r4, r0
.L999:
	cmp	r1, #0x14
	bne	.L997	@cond_branch
	mov	r0, #0x2
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L997:
	add	r2, r3, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L996	@cond_branch
	add	r0, r0, #0x21
	ldrb	r1, [r0]
	cmp	r1, r2
	beq	.L1002	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1010	@cond_branch
.L1002:
	cmp	r1, r2
	beq	.L1003	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L1003	@cond_branch
	mov	r0, #0x4
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L1003:
	add	r2, r3, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L996	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L996	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L996	@cond_branch
	mov	r0, #0x2
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L996:
	add	r5, r5, #0x3
	add	r0, r5, r6
	ldrb	r0, [r0]
.L1011:
	cmp	r0, #0xff
	beq	.L989	@cond_branch
	cmp	r0, #0xfe
	bne	.L993	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L996	@cond_branch
.L989:
	ldr	r2, .L1018
	ldr	r0, .L1018+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r6, [r0]
	cmp	r6, #0x19
	bne	.L1006	@cond_branch
	mov	r5, #0x29
	and	r5, r5, r4
	cmp	r5, #0
	bne	.L1006	@cond_branch
	ldr	r0, .L1018+0x8
	ldrb	r0, [r0]
	ldr	r7, .L1018+0xc
	ldrh	r1, [r7]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L1006	@cond_branch
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1007	@cond_branch
	mov	r0, #0x6
	and	r4, r4, r0
	cmp	r4, #0x6
	bne	.L1006	@cond_branch
.L1007:
	ldr	r2, .L1018+0x10
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L1006	@cond_branch
	ldr	r3, .L1018+0x14
	strb	r6, [r3]
	ldr	r2, .L1018+0x18
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1018+0x1c
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r5, [r0]
	ldr	r1, .L1018+0x20
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	ldrb	r0, [r2]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
.L1006:
	ldr	r0, .L1018+0x18
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1008	@cond_branch
	ldr	r2, .L1018+0x24
	ldr	r0, .L1018+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
.L1008:
	ldr	r1, .L1018+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1019:
	.align	2, 0
.L1018:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBankAttacker
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gBattleMoveFlags
	.word	gMoveHitWith
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe88:
	.size	 atk4A_typecalc2,.Lfe88-atk4A_typecalc2
	.align	2, 0
	.type	 atk4B_return_atk_to_ball,function
	.thumb_func
atk4B_return_atk_to_ball:
	push	{r4, lr}
	ldr	r4, .L1022
	ldr	r0, .L1022+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L1022+0x8
	ldr	r1, .L1022+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1021	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	EmitReturnPokeToBall
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L1021:
	ldr	r1, .L1022+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1023:
	.align	2, 0
.L1022:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gHitMarker
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe89:
	.size	 atk4B_return_atk_to_ball,.Lfe89-atk4B_return_atk_to_ball
	.align	2, 0
	.type	 atk4C_copy_poke_data,function
	.thumb_func
atk4C_copy_poke_data:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1026
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1024	@cond_branch
	ldr	r5, .L1026+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1026+0x8
	strb	r0, [r4]
	ldr	r3, .L1026+0xc
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	ldr	r2, .L1026+0x10
	ldr	r6, .L1026+0x14
	add	r0, r0, r6
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L1026+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	EmitGetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L1024:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1027:
	.align	2, 0
.L1026:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattlePartyID
	.word	gSharedMem
	.word	0x16068
	.word	gBitTable
.Lfe90:
	.size	 atk4C_copy_poke_data,.Lfe90-atk4C_copy_poke_data
	.align	2, 0
	.type	 atk4D_switch_data_update,function
	.thumb_func
atk4D_switch_data_update:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffa8
	ldr	r0, .L1044
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB10521
	b	.L1029	@long jump
.LCB10521:
	ldr	r0, .L1044+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1044+0x8
	strb	r0, [r4]
	ldr	r6, .L1044+0xc
	ldrb	r0, [r4]
	mov	r5, #0x58
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	mov	r0, sp
	mov	r2, #0x58
	bl	memcpy
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r3, r0, r6
	mov	r2, #0x0
	ldr	r5, .L1044+0x10
	add	r7, r4, #0
.L1034:
	add	r0, r3, r2
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x57
	bls	.L1034	@cond_branch
	ldr	r4, .L1044+0xc
	ldrb	r0, [r7]
	mov	r6, #0x58
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r4
	ldr	r3, .L1044+0x14
	ldrh	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x6]
	add	r2, r2, #0x21
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r4
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x7]
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r4
	ldrh	r0, [r1]
	ldrb	r1, [r1, #0x17]
	lsr	r1, r1, #0x7
	bl	GetAbilityBySpecies
	ldrb	r1, [r7]
	mul	r1, r1, r6
	add	r1, r1, r4
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrb	r0, [r7]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L1044+0x18
	add	r0, r0, #0x29
	add	r0, r2, r0
	ldrb	r1, [r0]
	ldr	r3, .L1044+0x1c
	ldr	r2, .L1044+0x20
	ldrb	r5, [r7]
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	mov	ip, r4
	cmp	r1, #0
	beq	.L1036	@cond_branch
	mov	r0, r5
	mul	r0, r0, r6
	add	r0, r0, ip
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
.L1036:
	ldr	r2, .L1044+0x24
	ldr	r0, .L1044+0x28
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x7f
	bne	.L1038	@cond_branch
	mov	r2, #0x0
	add	r4, r7, #0
	mov	r6, #0x58
	mov	r5, ip
	add	r5, r5, #0x18
	add	r3, sp, #0x18
.L1042:
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r2, r1
	add	r1, r1, r5
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L1042	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [sp, #0x50]
	str	r1, [r0]
.L1038:
	bl	SwitchInClearStructs
	ldr	r0, .L1044+0x2c
	ldr	r3, .L1044+0x8
	ldrb	r2, [r3]
	ldr	r1, .L1044+0x30
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r1, .L1044+0x34
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	ldr	r2, .L1044+0x20
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1044+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1029:
	add	sp, sp, #0x58
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1045:
	.align	2, 0
.L1044:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
	.word	gBattleBufferB
	.word	gBaseStats
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlePartyID
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gSharedMem
	.word	0x16003
	.word	gBattleTextBuff1
.Lfe91:
	.size	 atk4D_switch_data_update,.Lfe91-atk4D_switch_data_update
	.align	2, 0
	.type	 atk4E_switchin_anim,function
	.thumb_func
atk4E_switchin_anim:
	push	{r4, r5, lr}
	ldr	r0, .L1049
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1046	@cond_branch
	ldr	r0, .L1049+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1049+0x8
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1048	@cond_branch
	ldr	r0, .L1049+0xc
	ldrh	r1, [r0]
	ldr	r0, .L1049+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1048	@cond_branch
	ldr	r2, .L1049+0x14
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
.L1048:
	ldr	r2, .L1049+0x18
	ldr	r1, .L1049+0x1c
	ldr	r5, .L1049+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1049+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r4, .L1049+0x4
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x2]
	mov	r0, #0x0
	bl	EmitSendOutPoke
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
.L1046:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1050:
	.align	2, 0
.L1049:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleTypeFlags
	.word	0x902
	.word	gBattleMons
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gBattlePartyID
.Lfe92:
	.size	 atk4E_switchin_anim,.Lfe92-atk4E_switchin_anim
	.align	2, 0
	.type	 atk4F_jump_if_cannot_switch,function
	.thumb_func
atk4F_jump_if_cannot_switch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L1082
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r1
	bl	GetBattleBank
	ldr	r3, .L1082+0x4
	strb	r0, [r3]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1052	@cond_branch
	ldr	r1, .L1082+0x8
	ldrb	r3, [r3]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1082+0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1053	@cond_branch
	ldr	r1, .L1082+0x10
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1052	@cond_branch
.L1053:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1051
.L1083:
	.align	2, 0
.L1082:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
	.word	0x400e000
	.word	gStatuses3
.L1052:
	ldr	r5, .L1084
	ldrh	r1, [r5]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1054	@cond_branch
	ldr	r4, .L1084+0x4
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1084+0x8
	mov	r8, r1
	cmp	r0, #0x1
	bne	.L1055	@cond_branch
	ldr	r0, .L1084+0xc
	mov	r8, r0
.L1055:
	mov	r5, #0x0
	ldrb	r0, [r4]
	bl	sub_803FC34
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_803FBFC
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1057	@cond_branch
	mov	r5, #0x3
.L1057:
	add	r6, r5, #0x3
	cmp	r5, r6
	bge	.L1059	@cond_branch
	ldr	r7, .L1084+0x10
.L1061:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1060	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1060	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1060	@cond_branch
	ldr	r0, .L1084+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L1059	@cond_branch
.L1060:
	add	r5, r5, #0x1
	cmp	r5, r6
	blt	.L1061	@cond_branch
.L1059:
	cmp	r5, r6
	beq	.L1081	@cond_branch
	b	.L1079
.L1085:
	.align	2, 0
.L1084:
	.word	gBattleTypeFlags
	.word	gActiveBank
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlePartyID
.L1054:
	ldr	r0, .L1086
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bne	.L1067	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r1, [r5]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1068	@cond_branch
	mov	r0, #0x3
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1069
.L1087:
	.align	2, 0
.L1086:
	.word	gActiveBank
.L1068:
	add	r6, r7, #0
.L1069:
	ldr	r0, .L1088
	mov	r8, r0
	b	.L1070
.L1089:
	.align	2, 0
.L1088:
	.word	gEnemyParty
.L1067:
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r1, [r5]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1071	@cond_branch
	mov	r0, #0x2
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1072
.L1071:
	add	r6, r7, #0
.L1072:
	ldr	r1, .L1090
	mov	r8, r1
.L1070:
	mov	r5, #0x0
.L1076:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1075	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1075	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1075	@cond_branch
	ldr	r1, .L1090+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L1075	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	bne	.L1074	@cond_branch
.L1075:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L1076	@cond_branch
.L1074:
	cmp	r5, #0x6
	bne	.L1079	@cond_branch
.L1081:
	ldr	r3, .L1090+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1051
.L1091:
	.align	2, 0
.L1090:
	.word	gPlayerParty
	.word	gBattlePartyID
	.word	gBattlescriptCurrInstr
.L1079:
	ldr	r1, .L1092
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
.L1051:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1093:
	.align	2, 0
.L1092:
	.word	gBattlescriptCurrInstr
.Lfe93:
	.size	 atk4F_jump_if_cannot_switch,.Lfe93-atk4F_jump_if_cannot_switch
	.align	2, 0
	.globl	sub_8022A3C
	.type	 sub_8022A3C,function
	.thumb_func
sub_8022A3C:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, .L1095
	ldr	r5, .L1095+0x4
	ldrb	r0, [r5]
	ldr	r3, .L1095+0x8
	add	r1, r0, r3
	add	r1, r1, r4
	ldr	r3, .L1095+0xc
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldr	r1, .L1095+0x10
	add	r4, r4, r1
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	EmitChoosePokemon
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1096:
	.align	2, 0
.L1095:
	.word	gSharedMem
	.word	gActiveBank
	.word	0x16064
	.word	gBattlePartyID
	.word	0x1606c
.Lfe94:
	.size	 sub_8022A3C,.Lfe94-sub_8022A3C
	.align	2, 0
	.type	 atk50_openpartyscreen,function
	.thumb_func
atk50_openpartyscreen:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r9
    mov r6, r8
    push {r6,r7}
    sub sp, 0x4
    movs r7, 0
    movs r0, 0
    mov r9, r0
    ldr r6, _08022B44 @ =gBattlescriptCurrInstr
    ldr r1, [r6]
    ldrb r2, [r1, 0x2]
    ldrb r0, [r1, 0x3]
    lsls r0, 8
    orrs r2, r0
    ldrb r0, [r1, 0x4]
    lsls r0, 16
    orrs r2, r0
    ldrb r0, [r1, 0x5]
    lsls r0, 24
    orrs r2, r0
    mov r8, r2
    ldrb r2, [r1, 0x1]
    adds r0, r2, 0
    mov r12, r6
    cmp r0, 0x5
    beq _08022ACE
    b _08022F74
_08022ACE:
    ldr r0, _08022B48 @ =gBattleTypeFlags
    ldrh r0, [r0]
    movs r1, 0x41
    ands r1, r0
    cmp r1, 0x1
    beq _08022BBC
    ldr r1, _08022B4C @ =gActiveBank
    strb r7, [r1]
    ldr r0, _08022B50 @ =gNoOfAllBanks
    ldrb r0, [r0]
    cmp r7, r0
    bcc _08022AE8
    b _08022F62
_08022AE8:
    ldr r7, _08022B54 @ =gHitMarker
    ldr r6, _08022B58 @ =gBitTable
    adds r4, r1, 0
    ldr r0, _08022B5C @ =gAbsentBankFlags
    mov r8, r0
_08022AF2:
    ldrb r2, [r4]
    lsls r0, r2, 2
    adds r0, r6
    ldr r1, [r0]
    lsls r1, 28
    ldr r0, [r7]
    ands r0, r1
    cmp r0, 0
    beq _08022B94
    adds r0, r2, 0
    movs r1, 0x6
    movs r2, 0x6
    bl sub_8018018
    lsls r0, 24
    cmp r0, 0
    beq _08022B60
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r0, [r0]
    mov r2, r8
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r1, [r0]
    lsls r1, 28
    ldr r0, [r7]
    bics r0, r1
    str r0, [r7]
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    b _08022BA2
    .align 2, 0
_08022B44: .4byte gBattlescriptCurrInstr
_08022B48: .4byte gBattleTypeFlags
_08022B4C: .4byte gActiveBank
_08022B50: .4byte gNoOfAllBanks
_08022B54: .4byte gHitMarker
_08022B58: .4byte gBitTable
_08022B5C: .4byte gAbsentBankFlags
_08022B60:
    ldr r5, _08022B90 @ =gSpecialStatuses
    ldrb r0, [r4]
    lsls r1, r0, 2
    adds r1, r0
    lsls r1, 2
    adds r1, r5
    ldrb r0, [r1]
    lsls r0, 25
    cmp r0, 0
    blt _08022BA2
    movs r0, 0x6
    bl sub_8022A3C
    ldrb r1, [r4]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r5
    ldrb r1, [r0]
    movs r2, 0x40
    orrs r1, r2
    strb r1, [r0]
    b _08022BA2
    .align 2, 0
_08022B90: .4byte gSpecialStatuses
_08022B94:
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
_08022BA2:
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    ldr r1, _08022BB8 @ =gNoOfAllBanks
    lsls r0, 24
    lsrs r0, 24
    ldrb r1, [r1]
    cmp r0, r1
    bcc _08022AF2
    b _08022F62
    .align 2, 0
_08022BB8: .4byte gNoOfAllBanks
_08022BBC:
    ands r1, r0
    cmp r1, 0
    bne _08022BC4
    b _08022F62
_08022BC4:
    ldr r0, _08022C1C @ =gHitMarker
    mov r8, r0
    ldr r0, [r0]
    lsrs r5, r0, 28
    ldr r6, _08022C20 @ =gBitTable
    ldr r0, [r6]
    ands r0, r5
    cmp r0, 0
    beq _08022C7E
    ldr r4, _08022C24 @ =gActiveBank
    strb r7, [r4]
    movs r0, 0
    movs r1, 0x6
    movs r2, 0x6
    bl sub_8018018
    lsls r0, 24
    cmp r0, 0
    beq _08022C2C
    ldr r2, _08022C28 @ =gAbsentBankFlags
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r1, [r0]
    lsls r1, 28
    mov r2, r8
    ldr r0, [r2]
    bics r0, r1
    str r0, [r2]
    movs r0, 0
    bl Emitcmd42
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    b _08022C7E
    .align 2, 0
_08022C1C: .4byte gHitMarker
_08022C20: .4byte gBitTable
_08022C24: .4byte gActiveBank
_08022C28: .4byte gAbsentBankFlags
_08022C2C:
    ldr r6, _08022C60 @ =gSpecialStatuses
    ldrb r0, [r4]
    lsls r1, r0, 2
    adds r1, r0
    lsls r1, 2
    adds r1, r6
    ldrb r0, [r1]
    lsls r0, 25
    cmp r0, 0
    blt _08022C6C
    ldr r0, _08022C64 @ =gSharedMem
    ldr r1, _08022C68 @ =0x0001606a
    adds r0, r1
    ldrb r0, [r0]
    bl sub_8022A3C
    ldrb r1, [r4]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r6
    ldrb r1, [r0]
    movs r2, 0x40
    orrs r1, r2
    strb r1, [r0]
    b _08022C7E
    .align 2, 0
_08022C60: .4byte gSpecialStatuses
_08022C64: .4byte gSharedMem
_08022C68: .4byte 0x0001606a
_08022C6C:
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    movs r2, 0x1
    mov r9, r2
_08022C7E:
    ldr r6, _08022CD8 @ =gBitTable
    ldr r0, [r6, 0x8]
    ands r0, r5
    cmp r0, 0
    beq _08022D40
    ldr r0, [r6]
    ands r0, r5
    cmp r0, 0
    bne _08022D40
    ldr r4, _08022CDC @ =gActiveBank
    movs r0, 0x2
    strb r0, [r4]
    movs r0, 0x2
    movs r1, 0x6
    movs r2, 0x6
    bl sub_8018018
    lsls r0, 24
    cmp r0, 0
    beq _08022CE8
    ldr r2, _08022CE0 @ =gAbsentBankFlags
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldr r2, _08022CE4 @ =gHitMarker
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r1, [r0]
    lsls r1, 28
    ldr r0, [r2]
    bics r0, r1
    str r0, [r2]
    movs r0, 0
    bl Emitcmd42
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    b _08022D40
    .align 2, 0
_08022CD8: .4byte gBitTable
_08022CDC: .4byte gActiveBank
_08022CE0: .4byte gAbsentBankFlags
_08022CE4: .4byte gHitMarker
_08022CE8:
    ldr r6, _08022D1C @ =gSpecialStatuses
    ldrb r0, [r4]
    lsls r1, r0, 2
    adds r1, r0
    lsls r1, 2
    adds r1, r6
    ldrb r0, [r1]
    lsls r0, 25
    cmp r0, 0
    blt _08022D28
    ldr r0, _08022D20 @ =gSharedMem
    ldr r1, _08022D24 @ =0x00016068
    adds r0, r1
    ldrb r0, [r0]
    bl sub_8022A3C
    ldrb r1, [r4]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r6
    ldrb r1, [r0]
    movs r2, 0x40
    orrs r1, r2
    strb r1, [r0]
    b _08022D40
    .align 2, 0
_08022D1C: .4byte gSpecialStatuses
_08022D20: .4byte gSharedMem
_08022D24: .4byte 0x00016068
_08022D28:
    movs r0, 0x1
    mov r2, r9
    ands r0, r2
    cmp r0, 0
    bne _08022D40
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
_08022D40:
    ldr r6, _08022D90 @ =gBitTable
    ldr r0, [r6, 0x4]
    ands r0, r5
    cmp r0, 0
    beq _08022DF6
    ldr r4, _08022D94 @ =gActiveBank
    movs r0, 0x1
    strb r0, [r4]
    movs r0, 0x1
    movs r1, 0x6
    movs r2, 0x6
    bl sub_8018018
    lsls r0, 24
    cmp r0, 0
    beq _08022DA0
    ldr r2, _08022D98 @ =gAbsentBankFlags
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldr r2, _08022D9C @ =gHitMarker
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r1, [r0]
    lsls r1, 28
    ldr r0, [r2]
    bics r0, r1
    str r0, [r2]
    movs r0, 0
    bl Emitcmd42
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    b _08022DF6
    .align 2, 0
_08022D90: .4byte gBitTable
_08022D94: .4byte gActiveBank
_08022D98: .4byte gAbsentBankFlags
_08022D9C: .4byte gHitMarker
_08022DA0:
    ldr r6, _08022DD4 @ =gSpecialStatuses
    ldrb r0, [r4]
    lsls r1, r0, 2
    adds r1, r0
    lsls r1, 2
    adds r1, r6
    ldrb r0, [r1]
    lsls r0, 25
    cmp r0, 0
    blt _08022DE0
    ldr r0, _08022DD8 @ =gSharedMem
    ldr r1, _08022DDC @ =0x0001606b
    adds r0, r1
    ldrb r0, [r0]
    bl sub_8022A3C
    ldrb r1, [r4]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r6
    ldrb r1, [r0]
    movs r2, 0x40
    orrs r1, r2
    strb r1, [r0]
    b _08022DF6
    .align 2, 0
_08022DD4: .4byte gSpecialStatuses
_08022DD8: .4byte gSharedMem
_08022DDC: .4byte 0x0001606b
_08022DE0:
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    movs r0, 0x2
    mov r2, r9
    orrs r2, r0
    mov r9, r2
_08022DF6:
    ldr r6, _08022E50 @ =gBitTable
    ldr r0, [r6, 0xC]
    ands r0, r5
    cmp r0, 0
    beq _08022EB8
    ldr r0, [r6, 0x4]
    ands r0, r5
    cmp r0, 0
    bne _08022EB8
    ldr r4, _08022E54 @ =gActiveBank
    movs r0, 0x3
    strb r0, [r4]
    movs r0, 0x3
    movs r1, 0x6
    movs r2, 0x6
    bl sub_8018018
    lsls r0, 24
    cmp r0, 0
    beq _08022E60
    ldr r2, _08022E58 @ =gAbsentBankFlags
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldr r2, _08022E5C @ =gHitMarker
    ldrb r0, [r4]
    lsls r0, 2
    adds r0, r6
    ldr r1, [r0]
    lsls r1, 28
    ldr r0, [r2]
    bics r0, r1
    str r0, [r2]
    movs r0, 0
    bl Emitcmd42
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    b _08022EB8
    .align 2, 0
_08022E50: .4byte gBitTable
_08022E54: .4byte gActiveBank
_08022E58: .4byte gAbsentBankFlags
_08022E5C: .4byte gHitMarker
_08022E60:
    ldr r6, _08022E94 @ =gSpecialStatuses
    ldrb r0, [r4]
    lsls r1, r0, 2
    adds r1, r0
    lsls r1, 2
    adds r1, r6
    ldrb r0, [r1]
    lsls r0, 25
    cmp r0, 0
    blt _08022EA0
    ldr r0, _08022E98 @ =gSharedMem
    ldr r1, _08022E9C @ =0x00016069
    adds r0, r1
    ldrb r0, [r0]
    bl sub_8022A3C
    ldrb r1, [r4]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r6
    ldrb r1, [r0]
    movs r2, 0x40
    orrs r1, r2
    strb r1, [r0]
    b _08022EB8
    .align 2, 0
_08022E94: .4byte gSpecialStatuses
_08022E98: .4byte gSharedMem
_08022E9C: .4byte 0x00016069
_08022EA0:
    movs r0, 0x2
    mov r2, r9
    ands r2, r0
    cmp r2, 0
    bne _08022EB8
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
_08022EB8:
    ldr r1, _08022EE8 @ =gSpecialStatuses
    ldrb r0, [r1]
    lsls r0, 25
    cmp r0, 0
    blt _08022F0C
    adds r0, r1, 0
    adds r0, 0x28
    ldrb r0, [r0]
    lsls r0, 25
    cmp r0, 0
    blt _08022F0C
    cmp r5, 0
    beq _08022F0C
    ldr r0, _08022EEC @ =gAbsentBankFlags
    ldrb r1, [r0]
    ldr r0, _08022EF0 @ =gBitTable
    ldr r0, [r0]
    ands r1, r0
    cmp r1, 0
    beq _08022EF8
    ldr r1, _08022EF4 @ =gActiveBank
    movs r0, 0x2
    strb r0, [r1]
    b _08022EFC
    .align 2, 0
_08022EE8: .4byte gSpecialStatuses
_08022EEC: .4byte gAbsentBankFlags
_08022EF0: .4byte gBitTable
_08022EF4: .4byte gActiveBank
_08022EF8:
    ldr r0, _08022F3C @ =gActiveBank
    strb r1, [r0]
_08022EFC:
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldr r0, _08022F3C @ =gActiveBank
    ldrb r0, [r0]
    bl MarkBufferBankForExecution
_08022F0C:
    ldr r1, _08022F40 @ =gSpecialStatuses
    ldrb r0, [r1, 0x14]
    lsls r0, 25
    cmp r0, 0
    blt _08022F62
    adds r0, r1, 0
    adds r0, 0x3C
    ldrb r0, [r0]
    lsls r0, 25
    cmp r0, 0
    blt _08022F62
    cmp r5, 0
    beq _08022F62
    ldr r0, _08022F44 @ =gAbsentBankFlags
    ldrb r0, [r0]
    ldr r1, _08022F48 @ =gBitTable
    ldr r1, [r1, 0x4]
    ands r0, r1
    cmp r0, 0
    beq _08022F4C
    ldr r1, _08022F3C @ =gActiveBank
    movs r0, 0x3
    b _08022F50
    .align 2, 0
_08022F3C: .4byte gActiveBank
_08022F40: .4byte gSpecialStatuses
_08022F44: .4byte gAbsentBankFlags
_08022F48: .4byte gBitTable
_08022F4C:
    ldr r1, _08022F6C @ =gActiveBank
    movs r0, 0x1
_08022F50:
    strb r0, [r1]
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldr r0, _08022F6C @ =gActiveBank
    ldrb r0, [r0]
    bl MarkBufferBankForExecution
_08022F62:
    ldr r1, _08022F70 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x6
    str r0, [r1]
    b _08023302
    .align 2, 0
_08022F6C: .4byte gActiveBank
_08022F70: .4byte gBattlescriptCurrInstr
_08022F74:
    cmp r0, 0x6
    beq _08022F7A
    b _08023170
_08022F7A:
    ldr r0, _08022FF0 @ =gBattleTypeFlags
    ldrh r2, [r0]
    movs r0, 0x40
    ands r0, r2
    cmp r0, 0
    beq _08022F88
    b _0802310C
_08022F88:
    movs r0, 0x1
    ands r0, r2
    cmp r0, 0
    bne _08022F92
    b _0802310C
_08022F92:
    ldr r7, _08022FF4 @ =gHitMarker
    ldr r0, [r7]
    lsrs r5, r0, 28
    ldr r4, _08022FF8 @ =gBitTable
    ldr r0, [r4, 0x8]
    ands r0, r5
    cmp r0, 0
    beq _0802303A
    ldr r0, [r4]
    ands r0, r5
    cmp r0, 0
    beq _0802303A
    ldr r6, _08022FFC @ =gActiveBank
    movs r0, 0x2
    strb r0, [r6]
    ldr r0, _08023000 @ =gBattleBufferB
    ldrb r1, [r0, 0x1]
    movs r0, 0x2
    movs r2, 0x6
    bl sub_8018018
    lsls r0, 24
    cmp r0, 0
    beq _08023008
    ldr r2, _08023004 @ =gAbsentBankFlags
    ldrb r0, [r6]
    lsls r0, 2
    adds r0, r4
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldrb r0, [r6]
    lsls r0, 2
    adds r0, r4
    ldr r1, [r0]
    lsls r1, 28
    ldr r0, [r7]
    bics r0, r1
    str r0, [r7]
    movs r0, 0
    bl Emitcmd42
    ldrb r0, [r6]
    bl MarkBufferBankForExecution
    b _0802303A
    .align 2, 0
_08022FF0: .4byte gBattleTypeFlags
_08022FF4: .4byte gHitMarker
_08022FF8: .4byte gBitTable
_08022FFC: .4byte gActiveBank
_08023000: .4byte gBattleBufferB
_08023004: .4byte gAbsentBankFlags
_08023008:
    ldr r4, _08023098 @ =gSpecialStatuses
    ldrb r0, [r6]
    lsls r1, r0, 2
    adds r1, r0
    lsls r1, 2
    adds r1, r4
    ldrb r0, [r1]
    lsls r0, 25
    cmp r0, 0
    blt _0802303A
    ldr r0, _0802309C @ =gSharedMem
    ldr r1, _080230A0 @ =0x00016068
    adds r0, r1
    ldrb r0, [r0]
    bl sub_8022A3C
    ldrb r1, [r6]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r4
    ldrb r1, [r0]
    movs r2, 0x40
    orrs r1, r2
    strb r1, [r0]
_0802303A:
    ldr r4, _080230A4 @ =gBitTable
    ldr r0, [r4, 0xC]
    ands r0, r5
    cmp r0, 0
    beq _080230EE
    ldr r0, [r4, 0x4]
    ands r5, r0
    cmp r5, 0
    beq _080230EE
    ldr r5, _080230A8 @ =gActiveBank
    movs r0, 0x3
    strb r0, [r5]
    ldr r0, _080230AC @ =gBattleBufferB
    ldr r2, _080230B0 @ =0x00000201
    adds r0, r2
    ldrb r1, [r0]
    movs r0, 0x3
    movs r2, 0x6
    bl sub_8018018
    lsls r0, 24
    cmp r0, 0
    beq _080230BC
    ldr r2, _080230B4 @ =gAbsentBankFlags
    ldrb r0, [r5]
    lsls r0, 2
    adds r0, r4
    ldr r0, [r0]
    ldrb r1, [r2]
    orrs r0, r1
    strb r0, [r2]
    ldr r2, _080230B8 @ =gHitMarker
    ldrb r0, [r5]
    lsls r0, 2
    adds r0, r4
    ldr r1, [r0]
    lsls r1, 28
    ldr r0, [r2]
    bics r0, r1
    str r0, [r2]
    movs r0, 0
    bl Emitcmd42
    ldrb r0, [r5]
    bl MarkBufferBankForExecution
    b _080230EE
    .align 2, 0
_08023098: .4byte gSpecialStatuses
_0802309C: .4byte gSharedMem
_080230A0: .4byte 0x00016068
_080230A4: .4byte gBitTable
_080230A8: .4byte gActiveBank
_080230AC: .4byte gBattleBufferB
_080230B0: .4byte 0x00000201
_080230B4: .4byte gAbsentBankFlags
_080230B8: .4byte gHitMarker
_080230BC:
    ldr r4, _080230FC @ =gSpecialStatuses
    ldrb r0, [r5]
    lsls r1, r0, 2
    adds r1, r0
    lsls r1, 2
    adds r1, r4
    ldrb r0, [r1]
    lsls r0, 25
    cmp r0, 0
    blt _080230EE
    ldr r0, _08023100 @ =gSharedMem
    ldr r1, _08023104 @ =0x00016069
    adds r0, r1
    ldrb r0, [r0]
    bl sub_8022A3C
    ldrb r1, [r5]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r4
    ldrb r1, [r0]
    movs r2, 0x40
    orrs r1, r2
    strb r1, [r0]
_080230EE:
    ldr r1, _08023108 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x6
    str r0, [r1]
    mov r12, r1
    b _08023110
    .align 2, 0
_080230FC: .4byte gSpecialStatuses
_08023100: .4byte gSharedMem
_08023104: .4byte 0x00016069
_08023108: .4byte gBattlescriptCurrInstr
_0802310C:
    adds r0, r1, 0x6
    str r0, [r6]
_08023110:
    ldr r0, _08023160 @ =gHitMarker
    ldr r0, [r0]
    lsrs r5, r0, 28
    ldr r1, _08023164 @ =gBank1
    movs r0, 0
    strb r0, [r1]
    ldr r4, _08023168 @ =gBitTable
    ldr r2, [r4]
    ands r2, r5
    ldr r6, _0802316C @ =gNoOfAllBanks
    cmp r2, 0
    bne _0802314C
    adds r7, r6, 0
    ldrb r0, [r6]
    cmp r2, r0
    bcs _0802314C
    adds r3, r1, 0
_08023132:
    ldrb r0, [r3]
    adds r0, 0x1
    strb r0, [r3]
    ldrb r2, [r3]
    lsls r0, r2, 2
    adds r0, r4
    ldr r0, [r0]
    ands r0, r5
    cmp r0, 0
    bne _0802314C
    ldrb r0, [r7]
    cmp r2, r0
    bcc _08023132
_0802314C:
    ldrb r0, [r1]
    ldrb r6, [r6]
    cmp r0, r6
    beq _08023156
    b _08023302
_08023156:
    mov r1, r8
    mov r2, r12
    str r1, [r2]
    b _08023302
    .align 2, 0
_08023160: .4byte gHitMarker
_08023164: .4byte gBank1
_08023168: .4byte gBitTable
_0802316C: .4byte gNoOfAllBanks
_08023170:
    movs r0, 0x80
    ands r0, r2
    movs r5, 0x1
    cmp r0, 0
    beq _0802317C
    movs r5, 0
_0802317C:
    movs r0, 0x7F
    ands r0, r2
    bl GetBattleBank
    lsls r0, 24
    lsrs r7, r0, 24
    ldr r1, _080231A4 @ =gSpecialStatuses
    lsls r0, r7, 2
    adds r0, r7
    lsls r0, 2
    adds r0, r1
    ldrb r0, [r0]
    lsls r0, 25
    cmp r0, 0
    bge _080231A8
    ldr r0, [r6]
    adds r0, 0x6
    str r0, [r6]
    b _08023302
    .align 2, 0
_080231A4: .4byte gSpecialStatuses
_080231A8:
    adds r0, r7, 0
    movs r1, 0x6
    movs r2, 0x6
    bl sub_8018018
    lsls r0, 24
    cmp r0, 0
    beq _080231F8
    ldr r2, _080231E8 @ =gActiveBank
    strb r7, [r2]
    ldr r3, _080231EC @ =gAbsentBankFlags
    ldr r4, _080231F0 @ =gBitTable
    ldrb r0, [r2]
    lsls r0, 2
    adds r0, r4
    ldr r0, [r0]
    ldrb r1, [r3]
    orrs r0, r1
    strb r0, [r3]
    ldr r3, _080231F4 @ =gHitMarker
    ldrb r0, [r2]
    lsls r0, 2
    adds r0, r4
    ldr r1, [r0]
    lsls r1, 28
    ldr r0, [r3]
    bics r0, r1
    str r0, [r3]
    mov r0, r8
    str r0, [r6]
    b _08023302
    .align 2, 0
_080231E8: .4byte gActiveBank
_080231EC: .4byte gAbsentBankFlags
_080231F0: .4byte gBitTable
_080231F4: .4byte gHitMarker
_080231F8:
    ldr r4, _080232A0 @ =gActiveBank
    strb r7, [r4]
    ldr r3, _080232A4 @ =gSharedMem
    ldrb r0, [r4]
    ldr r2, _080232A8 @ =0x00016064
    adds r1, r0, r2
    adds r1, r3
    ldr r2, _080232AC @ =gBattlePartyID
    lsls r0, 1
    adds r0, r2
    ldrh r0, [r0]
    strb r0, [r1]
    ldrb r1, [r4]
    movs r0, 0x2
    eors r0, r1
    ldr r1, _080232B0 @ =0x00016068
    adds r0, r1
    adds r0, r3
    ldrb r2, [r0]
    ldrb r1, [r4]
    lsls r0, r1, 1
    adds r0, r1
    ldr r1, _080232B4 @ =0x0001606c
    adds r3, r1
    adds r0, r3
    str r0, [sp]
    movs r0, 0
    adds r1, r5, 0
    movs r3, 0
    bl EmitChoosePokemon
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
    ldr r0, [r6]
    adds r0, 0x6
    str r0, [r6]
    ldrb r0, [r4]
    bl GetBankIdentity
    lsls r0, 24
    cmp r0, 0
    bne _0802325A
    ldr r1, _080232B8 @ =gBattleResults
    ldrb r0, [r1, 0x2]
    cmp r0, 0xFE
    bhi _0802325A
    adds r0, 0x1
    strb r0, [r1, 0x2]
_0802325A:
    ldr r0, _080232BC @ =gBattleTypeFlags
    ldrh r1, [r0]
    movs r0, 0x40
    ands r0, r1
    cmp r0, 0
    beq _080232C4
    ldr r1, _080232A0 @ =gActiveBank
    movs r0, 0
    strb r0, [r1]
    ldr r0, _080232C0 @ =gNoOfAllBanks
    ldrb r0, [r0]
    cmp r0, 0
    beq _08023302
    adds r4, r1, 0
_08023276:
    ldrb r0, [r4]
    cmp r0, r7
    beq _0802328A
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
_0802328A:
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    ldr r1, _080232C0 @ =gNoOfAllBanks
    lsls r0, 24
    lsrs r0, 24
    ldrb r1, [r1]
    cmp r0, r1
    bcc _08023276
    b _08023302
    .align 2, 0
_080232A0: .4byte gActiveBank
_080232A4: .4byte gSharedMem
_080232A8: .4byte 0x00016064
_080232AC: .4byte gBattlePartyID
_080232B0: .4byte 0x00016068
_080232B4: .4byte 0x0001606c
_080232B8: .4byte gBattleResults
_080232BC: .4byte gBattleTypeFlags
_080232C0: .4byte gNoOfAllBanks
_080232C4:
    adds r0, r7, 0
    bl GetBankIdentity
    movs r1, 0x1
    eors r0, r1
    lsls r0, 24
    lsrs r0, 24
    bl GetBankByPlayerAI
    ldr r4, _08023310 @ =gActiveBank
    strb r0, [r4]
    ldr r0, _08023314 @ =gAbsentBankFlags
    ldrb r1, [r0]
    ldr r2, _08023318 @ =gBitTable
    ldrb r3, [r4]
    lsls r0, r3, 2
    adds r0, r2
    ldr r0, [r0]
    ands r1, r0
    cmp r1, 0
    beq _080232F4
    movs r0, 0x2
    eors r3, r0
    strb r3, [r4]
_080232F4:
    movs r0, 0
    movs r1, 0x2
    bl EmitLinkStandbyMsg
    ldrb r0, [r4]
    bl MarkBufferBankForExecution
_08023302:
    add sp, 0x4
    pop {r3,r4}
    mov r8, r3
    mov r9, r4
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08023310: .4byte gActiveBank
_08023314: .4byte gAbsentBankFlags
_08023318: .4byte gBitTable
        .syntax divided
	.code	16
.Lfe95:
	.size	 atk50_openpartyscreen,.Lfe95-atk50_openpartyscreen
	.align	2, 0
	.type	 atk51_switch_handle_order,function
	.thumb_func
atk51_switch_handle_order:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L1116
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB11265
	b	.L1098	@long jump
.LCB11265:
	ldr	r4, .L1116+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r7, .L1116+0x8
	strb	r0, [r7]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1
	beq	.L1108	@cond_branch
	cmp	r0, #0x1
	bgt	.L1115	@cond_branch
	cmp	r0, #0
	beq	.L1101	@cond_branch
	b	.L1100
.L1117:
	.align	2, 0
.L1116:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.L1115:
	cmp	r0, #0x2
	beq	.L1110	@cond_branch
	b	.L1100
.L1101:
	mov	r3, #0x0
	ldr	r2, .L1118
	ldrb	r0, [r2]
	cmp	r3, r0
	blt	.LCB11306
	b	.L1100	@long jump
.LCB11306:
	ldr	r0, .L1118+0x4
	ldr	r1, .L1118+0x8
	mov	r5, #0x80
	lsl	r5, r5, #0x2
	add	r4, r2, #0
	ldr	r6, .L1118+0xc
	add	r2, r0, r6
.L1105:
	ldrb	r0, [r1]
	cmp	r0, #0x22
	bne	.L1104	@cond_branch
	ldrb	r0, [r1, #0x1]
	strb	r0, [r2]
.L1104:
	add	r1, r1, r5
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	ldrb	r0, [r4]
	cmp	r3, r0
	blt	.L1105	@cond_branch
	b	.L1100
.L1119:
	.align	2, 0
.L1118:
	.word	gNoOfAllBanks
	.word	gSharedMem
	.word	gBattleBufferB
	.word	0x16068
.L1108:
	ldr	r0, .L1120
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB11358
	b	.L1100	@long jump
.LCB11358:
	ldrb	r0, [r7]
	bl	sub_8012258
	b	.L1100
.L1121:
	.align	2, 0
.L1120:
	.word	gBattleTypeFlags
.L1110:
	ldr	r1, .L1122
	ldr	r4, .L1122+0x4
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r2, r4, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r6, .L1122+0x8
	ldrb	r0, [r7]
	ldr	r3, .L1122+0xc
	add	r1, r0, r3
	add	r1, r1, r6
	lsl	r0, r0, #0x9
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L1122+0x10
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1111	@cond_branch
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldr	r5, .L1122+0x14
	add	r1, r1, r5
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r0, r0, #0x9
	add	r2, r4, #0x2
	mov	ip, r2
	add	r0, r0, ip
	ldrb	r2, [r0]
	mov	r3, #0xf0
	add	r0, r3, #0
	and	r0, r0, r2
	ldrb	r2, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldr	r2, .L1122+0x18
	add	r1, r1, r2
	add	r1, r1, r6
	lsl	r0, r0, #0x9
	add	r4, r4, #0x3
	mov	r8, r4
	add	r0, r0, r8
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r5
	add	r1, r1, r6
	ldrb	r2, [r1]
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	eor	r0, r0, r4
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r5
	add	r1, r1, r6
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r0, r0, ip
	ldrb	r0, [r0]
	and	r3, r3, r0
	lsr	r3, r3, #0x4
	ldrb	r0, [r1]
	orr	r3, r3, r0
	strb	r3, [r1]
	ldrb	r0, [r7]
	eor	r4, r4, r0
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	ldr	r3, .L1122+0x1c
	add	r1, r1, r3
	add	r1, r1, r6
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r0, r0, r8
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L1112
.L1123:
	.align	2, 0
.L1122:
	.word	gBattleCommunication
	.word	gBattleBufferB
	.word	gSharedMem
	.word	0x16068
	.word	gBattleTypeFlags
	.word	0x1606c
	.word	0x1606d
	.word	0x1606e
.L1111:
	ldrb	r0, [r7]
	bl	sub_8012258
.L1112:
	ldr	r1, .L1124
	mov	r5, #0xfd
	strb	r5, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	ldr	r4, .L1124+0x4
	ldr	r3, .L1124+0x8
	ldrb	r0, [r3]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r2, .L1124+0xc
	strb	r5, [r2]
	mov	r0, #0x7
	strb	r0, [r2, #0x1]
	ldr	r3, .L1124+0x10
	ldrb	r0, [r3]
	strb	r0, [r2, #0x2]
	ldr	r1, .L1124+0x14
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r2, #0x4]
.L1100:
	ldr	r1, .L1124+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
.L1098:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1125:
	.align	2, 0
.L1124:
	.word	gBattleTextBuff1
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleTextBuff2
	.word	gActiveBank
	.word	gBattleBufferB
	.word	gBattlescriptCurrInstr
.Lfe96:
	.size	 atk51_switch_handle_order,.Lfe96-atk51_switch_handle_order
	.align	2, 0
	.type	 atk52_switch_in_effects,function
	.thumb_func
atk52_switch_in_effects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L1155
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1155+0x4
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	sub_80157C4
	ldr	r2, .L1155+0x8
	ldr	r1, .L1155+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1155+0x10
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBankSide
	ldr	r5, .L1155+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1127	@cond_branch
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1127	@cond_branch
	ldr	r1, .L1155+0x18
	mov	r9, r1
	ldrb	r2, [r4]
	mov	r7, #0x58
	mov	r0, r2
	mul	r0, r0, r7
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1127	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1127	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	beq	.L1127	@cond_branch
	add	r0, r2, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r1, r8
	orr	r1, r1, r2
	strh	r1, [r0]
	ldrb	r0, [r4]
	bl	GetBankSide
	ldr	r2, .L1155+0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x6]
	mov	r1, #0x5
	sub	r1, r1, r0
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x18
	ldr	r5, .L1155+0x20
	ldrb	r0, [r4]
	mul	r0, r0, r7
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2c]
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L1128	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L1128:
	ldr	r0, .L1155+0x24
	ldrb	r1, [r4]
	ldr	r2, .L1155+0x28
	add	r0, r0, r2
	strb	r1, [r0]
	bl	b_movescr_stack_push_cursor
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L1129	@cond_branch
	ldr	r0, .L1155+0x2c
	str	r0, [r6]
	b	.L1133
.L1156:
	.align	2, 0
.L1155:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gHitMarker
	.word	gBitTable
	.word	gSpecialStatuses
	.word	gSideAffecting
	.word	gBattleMons
	.word	gSideTimer
	.word	gBattleMoveDamage
	.word	gSharedMem
	.word	0x16003
	.word	gUnknown_081D919F
.L1129:
	cmp	r0, #0x1
	bne	.L1131	@cond_branch
	ldr	r0, .L1157
	str	r0, [r6]
	b	.L1133
.L1158:
	.align	2, 0
.L1157:
	.word	gUnknown_081D9171
.L1131:
	ldr	r0, .L1159
	str	r0, [r6]
	b	.L1133
.L1160:
	.align	2, 0
.L1159:
	.word	gUnknown_081D91CD
.L1127:
	ldr	r1, .L1161
	ldr	r5, .L1161+0x4
	ldrb	r2, [r5]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x36
	bne	.L1134	@cond_branch
	ldr	r1, .L1161+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x18]
.L1134:
	ldrb	r1, [r5]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB11814
	b	.L1133	@long jump
.LCB11814:
	ldrb	r1, [r5]
	mov	r0, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1133	@cond_branch
	ldrb	r0, [r5]
	bl	GetBankSide
	ldr	r1, .L1161+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r1, .L1161+0x10
	and	r1, r1, r2
	strh	r1, [r0]
	mov	r4, #0x0
	ldr	r0, .L1161+0x14
	ldrb	r3, [r0]
	cmp	r4, r3
	bge	.L1137	@cond_branch
	ldr	r6, .L1161+0x18
	ldr	r3, .L1161+0x1c
	mov	r2, #0xc
	add	r1, r0, #0
.L1139:
	add	r0, r4, r6
	ldrb	r0, [r0]
	ldrb	r7, [r5]
	cmp	r0, r7
	bne	.L1138	@cond_branch
	add	r0, r4, r3
	strb	r2, [r0]
.L1138:
	add	r4, r4, #0x1
	ldrb	r0, [r1]
	cmp	r4, r0
	blt	.L1139	@cond_branch
.L1137:
	mov	r4, #0x0
	ldr	r0, .L1161+0x14
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.L1143	@cond_branch
	ldr	r5, .L1161
.L1145:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	ldr	r1, .L1161+0x20
	add	r0, r0, r1
	mov	r1, #0x58
	mul	r1, r1, r4
	add	r1, r1, r5
	ldrh	r1, [r1, #0x28]
	strh	r1, [r0]
	add	r4, r4, #0x1
	ldr	r0, .L1161+0x14
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L1145	@cond_branch
.L1143:
	ldr	r0, .L1161+0x24
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x5
	bne	.L1147	@cond_branch
	ldr	r0, .L1161+0x28
	ldr	r0, [r0]
	lsr	r4, r0, #0x1c
	ldr	r1, .L1161+0x2c
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L1161+0x30
	b	.L1154
.L1162:
	.align	2, 0
.L1161:
	.word	gBattleMons
	.word	gActiveBank
	.word	gDisableStructs
	.word	gSideAffecting
	.word	0xfdff
	.word	gNoOfAllBanks
	.word	gTurnOrder
	.word	gUnknown_02024A76
	.word	0x20160bc
	.word	gBattlescriptCurrInstr
	.word	gHitMarker
	.word	gBank1
	.word	gBitTable
.L1151:
	ldr	r0, .L1163
	ldrb	r3, [r1]
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L1147	@cond_branch
	add	r0, r3, #0x1
	strb	r0, [r1]
.L1154:
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r3, [r0]
	add	r0, r4, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1151	@cond_branch
	ldr	r0, .L1163+0x4
	ldrb	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L1151	@cond_branch
.L1147:
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L1133:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1164:
	.align	2, 0
.L1163:
	.word	gNoOfAllBanks
	.word	gAbsentBankFlags
.Lfe97:
	.size	 atk52_switch_in_effects,.Lfe97-atk52_switch_in_effects
	.align	2, 0
	.type	 atk53_trainer_slide,function
	.thumb_func
atk53_trainer_slide:
	push	{lr}
	ldr	r0, .L1169
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L1166	@cond_branch
	mov	r0, #0x0
	b	.L1168
.L1170:
	.align	2, 0
.L1169:
	.word	gBattlescriptCurrInstr
.L1166:
	mov	r0, #0x1
.L1168:
	bl	GetBankByPlayerAI
	ldr	r1, .L1171
	strb	r0, [r1]
	mov	r0, #0x0
	bl	EmitTrainerSlide
	ldr	r0, .L1171
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	ldr	r1, .L1171+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1172:
	.align	2, 0
.L1171:
	.word	gActiveBank
	.word	gBattlescriptCurrInstr
.Lfe98:
	.size	 atk53_trainer_slide,.Lfe98-atk53_trainer_slide
	.align	2, 0
	.type	 atk54_effectiveness_sound,function
	.thumb_func
atk54_effectiveness_sound:
	push	{r4, r5, lr}
	ldr	r5, .L1174
	ldr	r0, .L1174+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L1174+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	EmitEffectivenessSound
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1175:
	.align	2, 0
.L1174:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe99:
	.size	 atk54_effectiveness_sound,.Lfe99-atk54_effectiveness_sound
	.align	2, 0
	.type	 atk55_play_sound,function
	.thumb_func
atk55_play_sound:
	push	{r4, r5, lr}
	ldr	r5, .L1177
	ldr	r0, .L1177+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L1177+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	Emitcmd44
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1178:
	.align	2, 0
.L1177:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe100:
	.size	 atk55_play_sound,.Lfe100-atk55_play_sound
	.align	2, 0
	.type	 atk56_fainting_cry,function
	.thumb_func
atk56_fainting_cry:
	push	{r4, r5, lr}
	ldr	r5, .L1180
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1180+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	EmitFaintingCry
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1181:
	.align	2, 0
.L1180:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.Lfe101:
	.size	 atk56_fainting_cry,.Lfe101-atk56_fainting_cry
	.align	2, 0
	.type	 atk57,function
	.thumb_func
atk57:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	ldr	r4, .L1183
	strb	r0, [r4]
	ldr	r0, .L1183+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	Emitcmd55
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r1, .L1183+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1184:
	.align	2, 0
.L1183:
	.word	gActiveBank
	.word	gBattleOutcome
	.word	gBattlescriptCurrInstr
.Lfe102:
	.size	 atk57,.Lfe102-atk57
	.align	2, 0
	.type	 atk58_return_to_ball,function
	.thumb_func
atk58_return_to_ball:
	push	{r4, r5, lr}
	ldr	r5, .L1186
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1186+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	EmitReturnPokeToBall
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1187:
	.align	2, 0
.L1186:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.Lfe103:
	.size	 atk58_return_to_ball,.Lfe103-atk58_return_to_ball
	.align	2, 0
	.globl	atk59_learnmove_inbattle
	.type	 atk59_learnmove_inbattle,function
	.thumb_func
atk59_learnmove_inbattle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L1200
	ldr	r2, [r0]
	ldrb	r6, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r6, r6, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r6, r6, r0
	ldrb	r4, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r0, .L1200+0x4
	ldr	r1, .L1200+0x8
	add	r7, r0, r1
	ldrb	r1, [r7]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1200+0xc
	add	r0, r0, r1
	ldrb	r1, [r2, #0x9]
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L1200+0x10
	cmp	r5, r0
	bne	.L1190	@cond_branch
	mov	r9, r7
	mov	r8, r5
	mov	r7, #0x64
.L1191:
	mov	r3, r9
	ldrb	r0, [r3]
	mul	r0, r0, r7
	ldr	r1, .L1200+0xc
	add	r0, r0, r1
	mov	r1, #0x0
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r8
	beq	.L1191	@cond_branch
.L1190:
	cmp	r5, #0
	bne	.L1193	@cond_branch
	ldr	r0, .L1200
	str	r4, [r0]
	b	.L1194
.L1201:
	.align	2, 0
.L1200:
	.word	gBattlescriptCurrInstr
	.word	gSharedMem
	.word	0x16018
	.word	gPlayerParty
	.word	0xfffe
.L1193:
	ldr	r0, .L1202
	cmp	r5, r0
	bne	.L1195	@cond_branch
	ldr	r1, .L1202+0x4
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L1194
.L1203:
	.align	2, 0
.L1202:
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L1195:
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	ldr	r1, .L1204
	strb	r0, [r1]
	ldr	r0, .L1204+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldr	r0, .L1204+0x8
	ldr	r3, .L1204+0xc
	add	r0, r0, r3
	ldrh	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1197	@cond_branch
	ldr	r3, .L1204+0x10
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1197	@cond_branch
	add	r0, r2, r3
	add	r1, r5, #0
	bl	GiveMoveToBattleMon
.L1197:
	ldr	r0, .L1204+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1198	@cond_branch
	mov	r0, #0x2
	bl	GetBankByPlayerAI
	ldr	r1, .L1204
	strb	r0, [r1]
	ldr	r0, .L1204+0x4
	ldrb	r2, [r1]
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldr	r0, .L1204+0x8
	ldr	r3, .L1204+0xc
	add	r0, r0, r3
	ldrh	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1198	@cond_branch
	ldr	r3, .L1204+0x10
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1198	@cond_branch
	add	r0, r2, r3
	add	r1, r5, #0
	bl	GiveMoveToBattleMon
.L1198:
	ldr	r0, .L1204+0x18
	str	r6, [r0]
.L1194:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1205:
	.align	2, 0
.L1204:
	.word	gActiveBank
	.word	gBattlePartyID
	.word	gSharedMem
	.word	0x16018
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.Lfe104:
	.size	 atk59_learnmove_inbattle,.Lfe104-atk59_learnmove_inbattle
	.align	2, 0
	.globl	sub_8023A80
	.type	 sub_8023A80,function
	.thumb_func
sub_8023A80:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	sub_802BBD4
	ldr	r4, .L1207
	ldr	r1, .L1207+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x9
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x19
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
	ldr	r1, .L1207+0x8
	ldr	r3, .L1207+0xc
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0xc
	bl	sub_814A5C0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1208:
	.align	2, 0
.L1207:
	.word	gUnknown_03004210
	.word	BattleText_YesNo
	.word	0xffff
	.word	0x2d9f
.Lfe105:
	.size	 sub_8023A80,.Lfe105-sub_8023A80
	.align	2, 0
	.globl	sub_8023AD8
	.type	 sub_8023AD8,function
	.thumb_func
sub_8023AD8:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x17
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	sub_802BBD4
	bl	DestroyMenuCursor
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 sub_8023AD8,.Lfe106-sub_8023AD8
	.align	2, 0
	.type	 atk5A,function
	.thumb_func
atk5A:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L1237
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1237+0x4
	ldr	r2, .L1237+0x8
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r5, r1, #0
	cmp	r0, #0x5
	bls	.LCB12539
	b	.L1210	@long jump
.LCB12539:
	lsl	r0, r0, #0x2
	ldr	r1, .L1237+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1238:
	.align	2, 0
.L1237:
	.word	gActiveBank
	.word	gSharedMem
	.word	0x1601a
	.word	.L1234
	.align	2, 0
	.align	2, 0
.L1234:
	.word	.L1212
	.word	.L1213
	.word	.L1221
	.word	.L1223
	.word	.L1231
	.word	.L1232
.L1212:
	bl	sub_8023A80
	ldr	r1, .L1239
	ldr	r0, .L1239+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r1]
	ldr	r0, .L1239+0x8
	strb	r2, [r0, #0x1]
	bl	sub_802BC6C
	b	.L1210
.L1240:
	.align	2, 0
.L1239:
	.word	gSharedMem
	.word	0x1601a
	.word	gBattleCommunication
.L1213:
	ldr	r0, .L1241
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1214	@cond_branch
	ldr	r4, .L1241+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L1214	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L1214:
	ldr	r0, .L1241
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1215	@cond_branch
	ldr	r4, .L1241+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L1215	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L1215:
	ldr	r0, .L1241
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1216	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1241+0x4
	ldrb	r4, [r0, #0x1]
	cmp	r4, #0
	bne	.L1218	@cond_branch
	bl	sub_8023AD8
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1241+0x8
	ldr	r2, .L1241+0xc
	add	r1, r1, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L1236
.L1242:
	.align	2, 0
.L1241:
	.word	gMain
	.word	gBattleCommunication
	.word	gSharedMem
	.word	0x1601a
.L1216:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB12680
	b	.L1210	@long jump
.LCB12680:
	mov	r0, #0x5
	bl	PlaySE
.L1218:
	ldr	r0, .L1243
	ldr	r1, .L1243+0x4
	add	r0, r0, r1
	mov	r1, #0x4
	strb	r1, [r0]
	b	.L1210
.L1244:
	.align	2, 0
.L1243:
	.word	gSharedMem
	.word	0x1601a
.L1221:
	ldr	r0, .L1245
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB12709
	b	.L1210	@long jump
.LCB12709:
	ldr	r0, .L1245+0x4
	ldr	r2, .L1245+0x8
	add	r1, r5, r2
	ldrb	r1, [r1]
	ldr	r2, .L1245+0xc
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L1245+0x10
	ldr	r4, .L1245+0x14
	ldrh	r4, [r4]
	str	r4, [sp]
	bl	sub_809D9F0
	ldr	r0, .L1245+0x18
	add	r1, r5, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L1236
.L1246:
	.align	2, 0
.L1245:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	0x16018
	.word	gPlayerPartyCount
	.word	ReshowBattleScreenAfterMenu
	.word	gMoveToLearn
	.word	0x1601a
.L1223:
	ldr	r0, .L1247
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB12758
	b	.L1210	@long jump
.LCB12758:
	ldr	r0, .L1247+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L1247+0x8
	cmp	r1, r0
	beq	.LCB12763
	b	.L1210	@long jump
.LCB12763:
	bl	sub_809FA30
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bne	.L1225	@cond_branch
	ldr	r0, .L1247+0xc
	ldr	r1, .L1247+0x10
	add	r0, r0, r1
	strb	r5, [r0]
	b	.L1210
.L1248:
	.align	2, 0
.L1247:
	.word	gPaletteFade
	.word	gMain
	.word	sub_800F808
	.word	gSharedMem
	.word	0x1601a
.L1225:
	ldr	r2, .L1249
	mov	r9, r2
	ldr	r6, .L1249+0x4
	add	r6, r6, r9
	ldrb	r0, [r6]
	mov	r1, #0x64
	mov	r8, r1
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r7, .L1249+0x8
	add	r0, r0, r7
	add	r1, r5, #0
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsHMMove2
	cmp	r0, #0
	beq	.L1227	@cond_branch
	ldr	r0, .L1249+0xc
	ldr	r1, .L1249+0x10
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r1, .L1249+0x14
	add	r1, r1, r9
	mov	r0, #0x5
	b	.L1236
.L1250:
	.align	2, 0
.L1249:
	.word	gSharedMem
	.word	0x16018
	.word	gPlayerParty
	.word	0x13f
	.word	gActiveBank
	.word	0x1601a
.L1227:
	ldr	r3, .L1251
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	ldr	r1, .L1251+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r0, [r6]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	add	r1, r5, #0
	bl	RemoveMonPPBonus
	ldrb	r0, [r6]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	ldr	r7, .L1251+0x8
	ldrh	r1, [r7]
	add	r2, r5, #0
	bl	SetMonMoveSlot
	ldr	r0, .L1251+0xc
	ldrh	r0, [r0]
	ldrb	r6, [r6]
	cmp	r0, r6
	bne	.L1229	@cond_branch
	ldr	r4, .L1251+0x10
	ldr	r0, [r4, #0x50]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1229	@cond_branch
	ldr	r0, .L1251+0x14
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L1251+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1229	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	RemoveBattleMonPPBonus
	ldrh	r1, [r7]
	add	r0, r4, #0
	add	r2, r5, #0
	bl	SetBattleMonMoveSlot
.L1229:
	ldr	r0, .L1251+0x1c
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1210	@cond_branch
	ldr	r0, .L1251+0xc
	ldr	r1, .L1251+0x20
	ldr	r2, .L1251+0x24
	add	r1, r1, r2
	ldrh	r0, [r0, #0x4]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L1210	@cond_branch
	ldr	r4, .L1251+0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1210	@cond_branch
	ldr	r0, .L1251+0x14
	add	r0, r0, #0x50
	ldrb	r1, [r0]
	lsr	r1, r1, #0x4
	ldr	r2, .L1251+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1210	@cond_branch
	add	r4, r4, #0xb0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	RemoveBattleMonPPBonus
	ldr	r0, .L1251+0x8
	ldrh	r1, [r0]
	add	r0, r4, #0
	add	r2, r5, #0
	bl	SetBattleMonMoveSlot
	b	.L1210
.L1252:
	.align	2, 0
.L1251:
	.word	gBattlescriptCurrInstr
	.word	gBattleTextBuff2
	.word	gMoveToLearn
	.word	gBattlePartyID
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattleTypeFlags
	.word	gSharedMem
	.word	0x16018
.L1231:
	bl	sub_8023AD8
	ldr	r1, .L1253
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L1210
.L1254:
	.align	2, 0
.L1253:
	.word	gBattlescriptCurrInstr
.L1232:
	ldr	r0, .L1255
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1210	@cond_branch
	ldr	r2, .L1255+0x4
	add	r1, r5, r2
	mov	r0, #0x2
.L1236:
	strb	r0, [r1]
.L1210:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1256:
	.align	2, 0
.L1255:
	.word	gBattleExecBuffer
	.word	0x1601a
.Lfe107:
	.size	 atk5A,.Lfe107-atk5A
	.align	2, 0
	.type	 atk5B_80256E0,function
	.thumb_func
atk5B_80256E0:
	push	{r4, r5, lr}
	ldr	r0, .L1270
	ldr	r1, .L1270+0x4
	add	r5, r0, r1
	ldrb	r4, [r5]
	cmp	r4, #0
	beq	.L1259	@cond_branch
	cmp	r4, #0x1
	beq	.L1260	@cond_branch
	b	.L1258
.L1271:
	.align	2, 0
.L1270:
	.word	gSharedMem
	.word	0x1601a
.L1259:
	bl	sub_8023A80
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	ldr	r0, .L1272
	strb	r4, [r0, #0x1]
	bl	sub_802BC6C
	b	.L1258
.L1273:
	.align	2, 0
.L1272:
	.word	gBattleCommunication
.L1260:
	ldr	r0, .L1274
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1261	@cond_branch
	ldr	r4, .L1274+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L1261	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L1261:
	ldr	r0, .L1274
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1262	@cond_branch
	ldr	r4, .L1274+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L1262	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L1262:
	ldr	r0, .L1274
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1263	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1274+0x4
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L1264	@cond_branch
	ldr	r3, .L1274+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1265
.L1275:
	.align	2, 0
.L1274:
	.word	gMain
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L1264:
	ldr	r1, .L1276
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1265:
	bl	sub_8023AD8
	b	.L1258
.L1277:
	.align	2, 0
.L1276:
	.word	gBattlescriptCurrInstr
.L1263:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1258	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r3, .L1278
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	bl	sub_8023AD8
.L1258:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1279:
	.align	2, 0
.L1278:
	.word	gBattlescriptCurrInstr
.Lfe108:
	.size	 atk5B_80256E0,.Lfe108-atk5B_80256E0
	.align	2, 0
	.type	 atk5C_hitanimation,function
	.thumb_func
atk5C_hitanimation:
	push	{r4, lr}
	ldr	r4, .L1286
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r2, .L1286+0x4
	strb	r0, [r2]
	ldr	r0, .L1286+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1283	@cond_branch
	ldr	r0, .L1286+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1284	@cond_branch
	ldr	r1, .L1286+0x10
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1284	@cond_branch
	ldr	r0, .L1286+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L1283	@cond_branch
.L1284:
	mov	r0, #0x0
	bl	EmitHitAnimation
	ldr	r0, .L1286+0x4
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	ldr	r1, .L1286
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	b	.L1282
.L1287:
	.align	2, 0
.L1286:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMoveFlags
	.word	gHitMarker
	.word	gBattleMons
	.word	gDisableStructs
.L1283:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
.L1282:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe109:
	.size	 atk5C_hitanimation,.Lfe109-atk5C_hitanimation
	.align	2, 0
	.type	 atk5D_getmoneyreward,function
	.thumb_func
atk5D_getmoneyreward:
	.syntax unified
        push {r4-r7,lr}
    mov r7, r8
    push {r7}
    movs r6, 0
    movs r5, 0
    ldr r0, _08024048 @ =gTrainerBattleOpponent
    ldrh r2, [r0]
    movs r1, 0x80
    lsls r1, 3
    cmp r2, r1
    bne _08024058
    ldr r0, _0802404C @ =gSharedMem + 0x17000
    adds r1, r0, 0
    adds r1, 0x94
    ldrb r2, [r1]
    ldr r1, _08024050 @ =0xfffff056
    adds r0, r1
    ldrb r1, [r0]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r4, r2, 0
    muls r4, r0
    ldr r0, _08024054 @ =gSaveBlock1 + 0x490
    mov r8, r0
    b _08024140
    .align 2, 0
_08024048: .4byte gTrainerBattleOpponent
_0802404C: .4byte gSharedMem + 0x17000
_08024050: .4byte 0xfffff056
_08024054: .4byte gSaveBlock1 + 0x490
_08024058:
    ldr r2, _08024074 @ =gTrainers
    ldrh r1, [r0]
    lsls r0, r1, 2
    adds r0, r1
    lsls r3, r0, 3
    adds r4, r3, r2
    ldrb r1, [r4]
    cmp r1, 0x1
    beq _080240AE
    cmp r1, 0x1
    bgt _08024078
    cmp r1, 0
    beq _08024082
    b _080240C4
    .align 2, 0
_08024074: .4byte gTrainers
_08024078:
    cmp r1, 0x2
    beq _08024098
    cmp r1, 0x3
    beq _080240AE
    b _080240C4
_08024082:
    adds r0, r2, 0
    adds r0, 0x24
    adds r0, r3, r0
    ldr r1, [r0]
    adds r0, r4, 0
    adds r0, 0x20
    ldrb r0, [r0]
    lsls r0, 3
    adds r0, r1
    subs r0, 0x8
    b _080240C2
_08024098:
    adds r0, r2, 0
    adds r0, 0x24
    adds r0, r3, r0
    ldr r1, [r0]
    adds r0, r4, 0
    adds r0, 0x20
    ldrb r0, [r0]
    lsls r0, 3
    adds r0, r1
    subs r0, 0x8
    b _080240C2
_080240AE:
    adds r0, r2, 0
    adds r0, 0x24
    adds r0, r3, r0
    ldr r1, [r0]
    adds r0, r4, 0
    adds r0, 0x20
    ldrb r0, [r0]
    lsls r0, 4
    adds r0, r1
    subs r0, 0x10
_080240C2:
    ldrb r5, [r0, 0x2]
_080240C4:
    ldr r0, _08024120 @ =gTrainerMoney
    lsls r1, r6, 2
    adds r3, r1, r0
    ldrb r1, [r3]
    mov r12, r0
    lsls r4, r5, 2
    ldr r5, _08024124 @ =gSharedMem
    ldr r7, _08024128 @ =gBattleTypeFlags
    ldr r0, _0802412C @ =gSaveBlock1 + 0x490
    mov r8, r0
    cmp r1, 0xFF
    beq _080240FE
    ldr r2, _08024130 @ =gTrainers
    ldr r0, _08024134 @ =gTrainerBattleOpponent
    ldrh r1, [r0]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 3
    adds r0, r2
    ldrb r2, [r0, 0x1]
    adds r1, r3, 0
_080240EE:
    ldrb r0, [r1]
    cmp r0, r2
    beq _080240FE
    adds r1, 0x4
    adds r6, 0x1
    ldrb r0, [r1]
    cmp r0, 0xFF
    bne _080240EE
_080240FE:
    ldr r1, _08024138 @ =0x00016056
    adds r0, r5, r1
    ldrb r0, [r0]
    adds r3, r4, 0
    muls r3, r0
    lsls r0, r6, 2
    add r0, r12
    ldrb r2, [r0, 0x1]
    ldrh r1, [r7]
    movs r0, 0x1
    ands r0, r1
    cmp r0, 0
    beq _0802413C
    lsls r0, r2, 1
    adds r4, r3, 0
    muls r4, r0
    b _08024140
    .align 2, 0
_08024120: .4byte gTrainerMoney
_08024124: .4byte gSharedMem
_08024128: .4byte gBattleTypeFlags
_0802412C: .4byte gSaveBlock1 + 0x490
_08024130: .4byte gTrainers
_08024134: .4byte gTrainerBattleOpponent
_08024138: .4byte 0x00016056
_0802413C:
    adds r4, r3, 0
    muls r4, r2
_08024140:
    mov r0, r8
    adds r1, r4, 0
    bl AddMoney
    ldr r1, _0802418C @ =gBattleTextBuff1
    movs r0, 0xFD
    strb r0, [r1]
    movs r0, 0x1
    strb r0, [r1, 0x1]
    movs r0, 0x4
    strb r0, [r1, 0x2]
    movs r0, 0x5
    strb r0, [r1, 0x3]
    strb r4, [r1, 0x4]
    movs r0, 0xFF
    lsls r0, 8
    ands r0, r4
    lsrs r0, 8
    strb r0, [r1, 0x5]
    movs r0, 0xFF
    lsls r0, 16
    ands r0, r4
    lsrs r0, 16
    strb r0, [r1, 0x6]
    lsrs r0, r4, 24
    strb r0, [r1, 0x7]
    movs r0, 0xFF
    strb r0, [r1, 0x8]
    ldr r1, _08024190 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x1
    str r0, [r1]
    pop {r3}
    mov r8, r3
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_0802418C: .4byte gBattleTextBuff1
_08024190: .4byte gBattlescriptCurrInstr
        .syntax divided
	.code	16
.Lfe110:
	.size	 atk5D_getmoneyreward,.Lfe110-atk5D_getmoneyreward
	.align	2, 0
	.type	 atk5E_8025A70,function
	.thumb_func
atk5E_8025A70:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L1301
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r6, .L1301+0x4
	strb	r0, [r6]
	ldr	r5, .L1301+0x8
	ldrb	r0, [r5]
	mov	r8, r4
	cmp	r0, #0
	beq	.L1291	@cond_branch
	cmp	r0, #0x1
	beq	.L1292	@cond_branch
	b	.L1290
.L1302:
	.align	2, 0
.L1301:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleCommunication
.L1291:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	EmitGetAttributes
	ldrb	r0, [r6]
	bl	MarkBufferBankForExecution
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L1290
.L1292:
	ldr	r0, .L1303
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1290	@cond_branch
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	ldr	r1, .L1303+0x4
	add	r0, r0, r1
	mov	ip, r0
	mov	r2, #0x0
	add	r4, r6, #0
	mov	r5, #0x58
	ldr	r6, .L1303+0x8
	add	r7, r6, #0
	sub	r7, r7, #0x18
	mov	r3, ip
	add	r3, r3, #0xc
.L1297:
	lsl	r1, r2, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r7
	ldrh	r0, [r3]
	strh	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r2, r1
	add	r1, r1, r6
	mov	r0, ip
	add	r0, r0, #0x24
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1297	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1290:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1304:
	.align	2, 0
.L1303:
	.word	gBattleExecBuffer
	.word	gBattleBufferB+0x4
	.word	gBattleMons+0x24
.Lfe111:
	.size	 atk5E_8025A70,.Lfe111-atk5E_8025A70
	.align	2, 0
	.type	 atk5F_8025B24,function
	.thumb_func
atk5F_8025B24:
	push	{lr}
	ldr	r0, .L1309
	ldr	r2, .L1309+0x4
	ldrb	r3, [r2]
	strb	r3, [r0]
	ldr	r1, .L1309+0x8
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	ldr	r2, .L1309+0xc
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1306	@cond_branch
	ldr	r0, .L1309+0x10
	and	r1, r1, r0
	b	.L1308
.L1310:
	.align	2, 0
.L1309:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBankTarget
	.word	gHitMarker
	.word	0xffffefff
.L1306:
	orr	r1, r1, r3
.L1308:
	str	r1, [r2]
	ldr	r1, .L1311
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1312:
	.align	2, 0
.L1311:
	.word	gBattlescriptCurrInstr
.Lfe112:
	.size	 atk5F_8025B24,.Lfe112-atk5F_8025B24
	.align	2, 0
	.type	 atk60_increment_gamestat,function
	.thumb_func
atk60_increment_gamestat:
	push	{lr}
	ldr	r0, .L1315
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1314	@cond_branch
	ldr	r0, .L1315+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	IncrementGameStat
.L1314:
	ldr	r1, .L1315+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1316:
	.align	2, 0
.L1315:
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe113:
	.size	 atk60_increment_gamestat,.Lfe113-atk60_increment_gamestat
	.align	2, 0
	.type	 atk61_8025BA4,function
	.thumb_func
atk61_8025BA4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xffffffd0
	ldr	r0, .L1330
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1317	@cond_branch
	ldr	r0, .L1330+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r1, .L1330+0x8
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	ldr	r1, .L1330+0xc
	mov	r8, r1
	cmp	r0, #0
	bne	.L1319	@cond_branch
	ldr	r0, .L1330+0x10
	mov	r8, r0
.L1319:
	mov	r7, #0x0
	add	r6, sp, #0x4
	mov	r5, sp
.L1324:
	mov	r0, #0x64
	mul	r0, r0, r7
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L1326	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L1325	@cond_branch
.L1326:
	ldr	r0, .L1330+0x14
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L1329
.L1331:
	.align	2, 0
.L1330:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0xffff
.L1325:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L1329:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L1324	@cond_branch
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x1
	bl	EmitDrawPartyStatusSummary
	ldr	r0, .L1332
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	ldr	r1, .L1332+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1317:
	add	sp, sp, #0x30
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1333:
	.align	2, 0
.L1332:
	.word	gActiveBank
	.word	gBattlescriptCurrInstr
.Lfe114:
	.size	 atk61_8025BA4,.Lfe114-atk61_8025BA4
	.align	2, 0
	.type	 atk62_08025C6C,function
	.thumb_func
atk62_08025C6C:
	push	{r4, r5, lr}
	ldr	r5, .L1335
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1335+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	Emitcmd49
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1336:
	.align	2, 0
.L1335:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.Lfe115:
	.size	 atk62_08025C6C,.Lfe115-atk62_08025C6C
	.align	2, 0
	.type	 atk63_jumptorandomattack,function
	.thumb_func
atk63_jumptorandomattack:
	push	{r4, lr}
	ldr	r0, .L1340
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0
	beq	.L1338	@cond_branch
	ldr	r0, .L1340+0x4
	ldr	r1, .L1340+0x8
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L1339
.L1341:
	.align	2, 0
.L1340:
	.word	gBattlescriptCurrInstr
	.word	gCurrentMove
	.word	gRandomMove
.L1338:
	ldr	r2, .L1342
	ldr	r1, .L1342+0x4
	ldr	r0, .L1342+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	strh	r0, [r2]
	add	r0, r1, #0
.L1339:
	ldr	r3, .L1342+0xc
	ldr	r2, .L1342+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1343:
	.align	2, 0
.L1342:
	.word	gUnknown_02024BE8
	.word	gCurrentMove
	.word	gRandomMove
	.word	gBattleScriptsEffectsTable
	.word	gBattleMoves
.Lfe116:
	.size	 atk63_jumptorandomattack,.Lfe116-atk63_jumptorandomattack
	.align	2, 0
	.type	 atk64_statusanimation,function
	.thumb_func
atk64_statusanimation:
	push	{r4, lr}
	ldr	r0, .L1347
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1345	@cond_branch
	ldr	r0, .L1347+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1347+0x8
	strb	r0, [r4]
	ldr	r1, .L1347+0xc
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1347+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1346	@cond_branch
	ldr	r0, .L1347+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L1346	@cond_branch
	ldr	r0, .L1347+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1346	@cond_branch
	ldr	r1, .L1347+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	EmitStatusAnimation
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L1346:
	ldr	r1, .L1347+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1345:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1348:
	.align	2, 0
.L1347:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMons
.Lfe117:
	.size	 atk64_statusanimation,.Lfe117-atk64_statusanimation
	.align	2, 0
	.type	 atk65_status2animation,function
	.thumb_func
atk65_status2animation:
	push	{r4, r5, lr}
	ldr	r0, .L1352
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1350	@cond_branch
	ldr	r4, .L1352+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r5, .L1352+0x8
	strb	r0, [r5]
	ldr	r1, [r4]
	ldrb	r3, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r1, .L1352+0xc
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1352+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1351	@cond_branch
	ldr	r0, .L1352+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L1351	@cond_branch
	ldr	r0, .L1352+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1351	@cond_branch
	ldr	r1, .L1352+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r2, [r0]
	and	r2, r2, r3
	mov	r0, #0x0
	mov	r1, #0x1
	bl	EmitStatusAnimation
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
.L1351:
	ldr	r1, .L1352+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
.L1350:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1353:
	.align	2, 0
.L1352:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMons
.Lfe118:
	.size	 atk65_status2animation,.Lfe118-atk65_status2animation
	.align	2, 0
	.type	 atk66_chosenstatusanimation,function
	.thumb_func
atk66_chosenstatusanimation:
	push	{r4, r5, lr}
	ldr	r0, .L1357
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1355	@cond_branch
	ldr	r4, .L1357+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r5, .L1357+0x8
	strb	r0, [r5]
	ldr	r4, [r4]
	ldrb	r2, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x6]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L1357+0xc
	ldrb	r3, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1357+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1356	@cond_branch
	ldr	r0, .L1357+0x14
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L1356	@cond_branch
	ldr	r0, .L1357+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1356	@cond_branch
	ldrb	r1, [r4, #0x2]
	mov	r0, #0x0
	bl	EmitStatusAnimation
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
.L1356:
	ldr	r1, .L1357+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
.L1355:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1358:
	.align	2, 0
.L1357:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
.Lfe119:
	.size	 atk66_chosenstatusanimation,.Lfe119-atk66_chosenstatusanimation
	.align	2, 0
	.type	 atk67_8025ECC,function
	.thumb_func
atk67_8025ECC:
	push	{r4, r5, lr}
	ldr	r5, .L1371
	ldrb	r4, [r5]
	cmp	r4, #0
	beq	.L1361	@cond_branch
	cmp	r4, #0x1
	beq	.L1362	@cond_branch
	b	.L1360
.L1372:
	.align	2, 0
.L1371:
	.word	gBattleCommunication
.L1361:
	bl	sub_8023A80
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	strb	r4, [r5, #0x1]
	bl	sub_802BC6C
	b	.L1360
.L1362:
	ldr	r0, .L1373
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1363	@cond_branch
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0
	beq	.L1363	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x0
	strb	r0, [r5, #0x1]
	bl	sub_802BC6C
.L1363:
	ldr	r0, .L1373
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1364	@cond_branch
	ldr	r4, .L1373+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L1364	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L1364:
	ldr	r0, .L1373
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1365	@cond_branch
	ldr	r1, .L1373+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	b	.L1370
.L1374:
	.align	2, 0
.L1373:
	.word	gMain
	.word	gBattleCommunication
.L1365:
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1360	@cond_branch
.L1370:
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_8023AD8
	ldr	r1, .L1375
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L1360:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1376:
	.align	2, 0
.L1375:
	.word	gBattlescriptCurrInstr
.Lfe120:
	.size	 atk67_8025ECC,.Lfe120-atk67_8025ECC
	.align	2, 0
	.type	 atk68_80246A0,function
	.thumb_func
atk68_80246A0:
	push	{r4, r5, lr}
	mov	r1, #0x0
	ldr	r2, .L1383
	ldr	r5, .L1383+0x4
	ldrb	r0, [r2]
	cmp	r1, r0
	bge	.L1379	@cond_branch
	ldr	r4, .L1383+0x8
	mov	r3, #0xc
.L1381:
	add	r0, r1, r4
	strb	r3, [r0]
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L1381	@cond_branch
.L1379:
	ldr	r0, [r5]
	add	r0, r0, #0x1
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1384:
	.align	2, 0
.L1383:
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
	.word	gUnknown_02024A76
.Lfe121:
	.size	 atk68_80246A0,.Lfe121-atk68_80246A0
	.align	2, 0
	.type	 atk69_dmg_adjustment2,function
	.thumb_func
atk69_dmg_adjustment2:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L1395
	ldr	r6, .L1395+0x4
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L1386	@cond_branch
	ldr	r1, .L1395+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L1387
.L1396:
	.align	2, 0
.L1395:
	.word	gBattleMons
	.word	gBankTarget
	.word	gEnigmaBerries
.L1386:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1387:
	ldr	r1, .L1397
	ldr	r5, .L1397+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L1388	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L1388	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemBattle
	ldr	r2, .L1397+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L1388:
	ldr	r2, .L1397+0xc
	ldr	r3, .L1397+0x4
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	add	r5, r2, #0
	cmp	r1, #0
	bne	.L1390	@cond_branch
	ldr	r2, .L1397+0x10
	ldr	r0, .L1397+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x65
	beq	.L1391	@cond_branch
	ldr	r0, .L1397+0x18
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L1391	@cond_branch
	ldr	r0, .L1397+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L1390	@cond_branch
.L1391:
	ldrb	r0, [r3]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L1397+0x1c
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L1390	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldr	r1, .L1397+0x18
	ldrb	r3, [r3]
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L1393	@cond_branch
	ldr	r0, .L1397+0x20
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1390
.L1398:
	.align	2, 0
.L1397:
	.word	gStringBank
	.word	gBankTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gBattleMoveFlags
.L1393:
	ldr	r0, .L1399
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L1390	@cond_branch
	ldr	r2, .L1399+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1399+0x8
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L1390:
	ldr	r1, .L1399+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1400:
	.align	2, 0
.L1399:
	.word	gSpecialStatuses
	.word	gBattleMoveFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe122:
	.size	 atk69_dmg_adjustment2,.Lfe122-atk69_dmg_adjustment2
	.align	2, 0
	.globl	atk6A_removeitem
	.type	 atk6A_removeitem,function
	.thumb_func
atk6A_removeitem:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L1402
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r5, .L1402+0x4
	strb	r0, [r5]
	ldrb	r4, [r5]
	lsl	r1, r4, #0x1
	ldr	r0, .L1402+0x8
	add	r1, r1, r0
	ldr	r2, .L1402+0xc
	mov	r3, #0x58
	mov	r0, r4
	mul	r0, r0, r3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r2, r2, #0x2e
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	EmitSetAttributes
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	ldr	r0, [r6]
	add	r0, r0, #0x2
	str	r0, [r6]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1403:
	.align	2, 0
.L1402:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gSharedMem+0x160cc
	.word	gBattleMons
.Lfe123:
	.size	 atk6A_removeitem,.Lfe123-atk6A_removeitem
	.align	2, 0
	.type	 atk6B_atknameinbuff1,function
	.thumb_func
atk6B_atknameinbuff1:
	ldr	r1, .L1405
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	ldr	r2, .L1405+0x4
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r3, .L1405+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1405+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1406:
	.align	2, 0
.L1405:
	.word	gBattleTextBuff1
	.word	gBankAttacker
	.word	gBattlePartyID
	.word	gBattlescriptCurrInstr
.Lfe124:
	.size	 atk6B_atknameinbuff1,.Lfe124-atk6B_atknameinbuff1
	.align	2, 0
	.type	 atk6C_lvlbox_display,function
	.thumb_func
atk6C_lvlbox_display:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x4
    movs r1, 0
    movs r7, 0
    ldr r0, _08024928 @ =gSharedMem
    mov r10, r0
    ldr r4, _0802492C @ =0x0001609c
    add r4, r10
    ldrb r0, [r4]
    cmp r0, 0x1
    bne _0802491C
    b _08024AF4
_0802491C:
    cmp r0, 0x1
    bgt _08024930
    cmp r0, 0
    beq _0802493E
    b _08024C38
    .align 2, 0
_08024928: .4byte gSharedMem
_0802492C: .4byte 0x0001609c
_08024930:
    cmp r0, 0x2
    bne _08024936
    b _08024C04
_08024936:
    cmp r0, 0x3
    bne _0802493C
    b _08024C30
_0802493C:
    b _08024C38
_0802493E:
    str r1, [sp]
    movs r0, 0xB
    movs r1, 0
    movs r2, 0x1D
    movs r3, 0x7
    bl sub_802BBD4
    ldr r0, _0802499C @ =gStringVar4
    ldr r1, _080249A0 @ =BattleText_Format2
    bl StringCopy
    adds r5, r0, 0
    movs r1, 0
    mov r8, r1
_0802495A:
    movs r2, 0
    mov r9, r2
    ldr r0, _080249A4 @ =gUnknown_0840165C
    mov r1, r8
    lsls r4, r1, 2
    adds r0, r4, r0
    ldr r1, [r0]
    adds r0, r5, 0
    bl StringAppend
    adds r5, r0, 0
    ldr r0, _080249A8 @ =gSharedMem
    ldr r2, _080249AC @ =0x00016018
    adds r0, r2
    ldrb r1, [r0]
    movs r0, 0x64
    muls r0, r1
    ldr r1, _080249B0 @ =gPlayerParty
    adds r0, r1
    ldr r1, _080249B4 @ =gLevelUpStatBoxStats
    add r1, r8
    ldrb r1, [r1]
    bl GetMonData
    lsls r0, 16
    lsrs r1, r0, 16
    mov r0, r8
    cmp r0, 0x5
    bhi _08024A1A
    ldr r0, _080249B8 @ =_080249BC
    adds r0, r4, r0
    ldr r0, [r0]
    mov pc, r0
    .align 2, 0
_0802499C: .4byte gStringVar4
_080249A0: .4byte BattleText_Format2
_080249A4: .4byte gUnknown_0840165C
_080249A8: .4byte gSharedMem
_080249AC: .4byte 0x00016018
_080249B0: .4byte gPlayerParty
_080249B4: .4byte gLevelUpStatBoxStats
_080249B8: .4byte _080249BC
    .align 2, 0
_080249BC:
    .4byte _080249D4
    .4byte _080249E0
    .4byte _080249EC
    .4byte _080249F8
    .4byte _08024A04
    .4byte _08024A10
_080249D4:
    ldr r0, _080249DC @ =gSharedMem + 0x17180
    ldrh r0, [r0]
    b _08024A14
    .align 2, 0
_080249DC: .4byte gSharedMem + 0x17180
_080249E0:
    ldr r0, _080249E8 @ =gSharedMem + 0x17180
    ldrh r0, [r0, 0x8]
    b _08024A14
    .align 2, 0
_080249E8: .4byte gSharedMem + 0x17180
_080249EC:
    ldr r0, _080249F4 @ =gSharedMem + 0x17180
    ldrh r0, [r0, 0x2]
    b _08024A14
    .align 2, 0
_080249F4: .4byte gSharedMem + 0x17180
_080249F8:
    ldr r0, _08024A00 @ =gSharedMem + 0x17180
    ldrh r0, [r0, 0xA]
    b _08024A14
    .align 2, 0
_08024A00: .4byte gSharedMem + 0x17180
_08024A04:
    ldr r0, _08024A0C @ =gSharedMem + 0x17180
    ldrh r0, [r0, 0x4]
    b _08024A14
    .align 2, 0
_08024A0C: .4byte gSharedMem + 0x17180
_08024A10:
    ldr r0, _08024A54 @ =gSharedMem + 0x17180
    ldrh r0, [r0, 0x6]
_08024A14:
    subs r0, r1, r0
    lsls r0, 16
    lsrs r7, r0, 16
_08024A1A:
    lsls r0, r7, 16
    asrs r0, 16
    cmp r0, 0
    bge _08024A2C
    negs r0, r0
    lsls r0, 16
    lsrs r7, r0, 16
    movs r1, 0x1
    add r9, r1
_08024A2C:
    movs r0, 0xFC
    strb r0, [r5]
    movs r0, 0x13
    strb r0, [r5, 0x1]
    movs r1, 0x1
    mov r2, r8
    ands r1, r2
    lsls r0, r1, 3
    adds r0, r1
    adds r0, 0x5
    lsls r0, 3
    adds r0, 0x6
    strb r0, [r5, 0x2]
    adds r5, 0x3
    mov r0, r9
    cmp r0, 0
    beq _08024A5C
    ldr r1, _08024A58 @ =BattleText_Dash
    b _08024A5E
    .align 2, 0
_08024A54: .4byte gSharedMem + 0x17180
_08024A58: .4byte BattleText_Dash
_08024A5C:
    ldr r1, _08024AA4 @ =BattleText_Plus
_08024A5E:
    adds r0, r5, 0
    bl StringCopy
    adds r5, r0, 0
    movs r6, 0xFC
    strb r6, [r5]
    movs r4, 0x14
    strb r4, [r5, 0x1]
    movs r0, 0x6
    strb r0, [r5, 0x2]
    adds r5, 0x3
    lsls r1, r7, 16
    asrs r1, 16
    adds r0, r5, 0
    movs r2, 0x1
    movs r3, 0x2
    bl ConvertIntToDecimalStringN
    adds r5, r0, 0
    strb r6, [r5]
    strb r4, [r5, 0x1]
    movs r0, 0
    strb r0, [r5, 0x2]
    adds r5, 0x3
    movs r0, 0x1
    mov r1, r8
    ands r0, r1
    cmp r0, 0
    beq _08024AA8
    movs r0, 0xFE
    strb r0, [r5]
    movs r0, 0xFF
    strb r0, [r5, 0x1]
    adds r5, 0x1
    b _08024AB8
    .align 2, 0
_08024AA4: .4byte BattleText_Plus
_08024AA8:
    strb r6, [r5]
    movs r0, 0x11
    strb r0, [r5, 0x1]
    movs r0, 0x8
    strb r0, [r5, 0x2]
    adds r5, 0x3
    movs r0, 0xFF
    strb r0, [r5]
_08024AB8:
    movs r2, 0x1
    add r8, r2
    mov r0, r8
    cmp r0, 0x5
    bgt _08024AC4
    b _0802495A
_08024AC4:
    ldr r4, _08024AE4 @ =gUnknown_03004210
    ldr r1, _08024AE8 @ =gStringVar4
    adds r2, 0xFF
    movs r0, 0x1
    str r0, [sp]
    adds r0, r4, 0
    movs r3, 0xC
    bl InitWindow
    adds r0, r4, 0
    bl sub_8002F44
    ldr r1, _08024AEC @ =gSharedMem
    ldr r2, _08024AF0 @ =0x0001609c
    adds r1, r2
    b _08024BEA
    .align 2, 0
_08024AE4: .4byte gUnknown_03004210
_08024AE8: .4byte gStringVar4
_08024AEC: .4byte gSharedMem
_08024AF0: .4byte 0x0001609c
_08024AF4:
    ldr r0, _08024B94 @ =gMain
    ldrh r0, [r0, 0x2E]
    cmp r0, 0
    bne _08024AFE
    b _08024C38
_08024AFE:
    movs r0, 0x5
    bl PlaySE
    ldr r0, _08024B98 @ =gStringVar4
    ldr r1, _08024B9C @ =BattleText_Format2
    bl StringCopy
    adds r5, r0, 0
    movs r0, 0
    mov r8, r0
    mov r9, r0
    movs r6, 0xFC
    movs r7, 0x14
    ldr r1, _08024BA0 @ =0x00016018
    add r10, r1
_08024B1C:
    ldr r1, _08024BA4 @ =gUnknown_0840165C
    mov r2, r8
    lsls r0, r2, 2
    adds r0, r1
    ldr r1, [r0]
    adds r0, r5, 0
    bl StringAppend
    adds r5, r0, 0
    mov r0, r10
    ldrb r1, [r0]
    movs r0, 0x64
    muls r0, r1
    ldr r1, _08024BA8 @ =gPlayerParty
    adds r0, r1
    ldr r1, _08024BAC @ =gLevelUpStatBoxStats
    add r1, r8
    ldrb r1, [r1]
    bl GetMonData
    adds r1, r0, 0
    strb r6, [r5]
    movs r0, 0x13
    strb r0, [r5, 0x1]
    movs r4, 0x1
    mov r2, r8
    ands r4, r2
    lsls r0, r4, 3
    adds r0, r4
    adds r0, 0x5
    lsls r0, 3
    adds r0, 0x6
    strb r0, [r5, 0x2]
    adds r5, 0x3
    strb r6, [r5]
    strb r7, [r5, 0x1]
    movs r0, 0x6
    strb r0, [r5, 0x2]
    adds r5, 0x3
    lsls r1, 16
    asrs r1, 16
    adds r0, r5, 0
    movs r2, 0x1
    movs r3, 0x3
    bl ConvertIntToDecimalStringN
    adds r5, r0, 0
    strb r6, [r5]
    strb r7, [r5, 0x1]
    mov r0, r9
    strb r0, [r5, 0x2]
    adds r5, 0x3
    cmp r4, 0
    beq _08024BB0
    movs r0, 0xFE
    strb r0, [r5]
    movs r0, 0xFF
    strb r0, [r5, 0x1]
    adds r5, 0x1
    b _08024BC0
    .align 2, 0
_08024B94: .4byte gMain
_08024B98: .4byte gStringVar4
_08024B9C: .4byte BattleText_Format2
_08024BA0: .4byte 0x00016018
_08024BA4: .4byte gUnknown_0840165C
_08024BA8: .4byte gPlayerParty
_08024BAC: .4byte gLevelUpStatBoxStats
_08024BB0:
    strb r6, [r5]
    movs r0, 0x11
    strb r0, [r5, 0x1]
    movs r0, 0x8
    strb r0, [r5, 0x2]
    adds r5, 0x3
    movs r0, 0xFF
    strb r0, [r5]
_08024BC0:
    movs r1, 0x1
    add r8, r1
    mov r2, r8
    cmp r2, 0x5
    ble _08024B1C
    ldr r4, _08024BF4 @ =gUnknown_03004210
    ldr r1, _08024BF8 @ =gStringVar4
    movs r2, 0x80
    lsls r2, 1
    movs r0, 0x1
    str r0, [sp]
    adds r0, r4, 0
    movs r3, 0xC
    bl InitWindow
    adds r0, r4, 0
    bl sub_8002F44
    ldr r1, _08024BFC @ =gSharedMem
    ldr r0, _08024C00 @ =0x0001609c
    adds r1, r0
_08024BEA:
    ldrb r0, [r1]
    adds r0, 0x1
    strb r0, [r1]
    b _08024C38
    .align 2, 0
_08024BF4: .4byte gUnknown_03004210
_08024BF8: .4byte gStringVar4
_08024BFC: .4byte gSharedMem
_08024C00: .4byte 0x0001609c
_08024C04:
    ldr r0, _08024C2C @ =gMain
    ldrh r0, [r0, 0x2E]
    cmp r0, 0
    beq _08024C38
    movs r0, 0x5
    bl PlaySE
    movs r0, 0x1
    str r0, [sp]
    movs r0, 0xB
    movs r1, 0
    movs r2, 0x1D
    movs r3, 0x7
    bl sub_802BBD4
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    b _08024C38
    .align 2, 0
_08024C2C: .4byte gMain
_08024C30:
    ldr r1, _08024C48 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x1
    str r0, [r1]
_08024C38:
    add sp, 0x4
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08024C48: .4byte gBattlescriptCurrInstr
        .syntax divided
	.code	16
.Lfe125:
	.size	 atk6C_lvlbox_display,.Lfe125-atk6C_lvlbox_display
	.align	2, 0
	.type	 atk6D_set_sentpokes_values,function
	.thumb_func
atk6D_set_sentpokes_values:
	push	{lr}
	bl	sub_80156DC
	ldr	r1, .L1409
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1410:
	.align	2, 0
.L1409:
	.word	gBattlescriptCurrInstr
.Lfe126:
	.size	 atk6D_set_sentpokes_values,.Lfe126-atk6D_set_sentpokes_values
	.align	2, 0
	.type	 atk6E_set_atk_to_player0,function
	.thumb_func
atk6E_set_atk_to_player0:
	push	{lr}
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	ldr	r1, .L1412
	strb	r0, [r1]
	ldr	r1, .L1412+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1413:
	.align	2, 0
.L1412:
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe127:
	.size	 atk6E_set_atk_to_player0,.Lfe127-atk6E_set_atk_to_player0
	.align	2, 0
	.type	 atk6F_set_visible,function
	.thumb_func
atk6F_set_visible:
	push	{r4, r5, lr}
	ldr	r5, .L1415
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r4, .L1415+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1416:
	.align	2, 0
.L1415:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.Lfe128:
	.size	 atk6F_set_visible,.Lfe128-atk6F_set_visible
	.align	2, 0
	.type	 atk70_record_ability,function
	.thumb_func
atk70_record_ability:
	push	{r4, lr}
	ldr	r4, .L1418
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r1, .L1418+0x4
	strb	r0, [r1]
	ldrb	r0, [r1]
	ldr	r1, .L1418+0x8
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1419:
	.align	2, 0
.L1418:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gLastUsedAbility
.Lfe129:
	.size	 atk70_record_ability,.Lfe129-atk70_record_ability
	.align	2, 0
	.globl	sub_8024CEC
	.type	 sub_8024CEC,function
	.thumb_func
sub_8024CEC:
	ldr	r2, .L1421
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x2
	strb	r0, [r2, #0x1]
	ldr	r0, .L1421+0x4
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bx	lr
.L1422:
	.align	2, 0
.L1421:
	.word	gBattleTextBuff2
	.word	gMoveToLearn
.Lfe130:
	.size	 sub_8024CEC,.Lfe130-sub_8024CEC
	.align	2, 0
	.type	 atk71_buffer_move_to_learn,function
	.thumb_func
atk71_buffer_move_to_learn:
	push	{lr}
	bl	sub_8024CEC
	ldr	r1, .L1424
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1425:
	.align	2, 0
.L1424:
	.word	gBattlescriptCurrInstr
.Lfe131:
	.size	 atk71_buffer_move_to_learn,.Lfe131-atk71_buffer_move_to_learn
	.align	2, 0
	.type	 atk72_jump_if_can_run_frombattle,function
	.thumb_func
atk72_jump_if_can_run_frombattle:
	push	{lr}
	ldr	r0, .L1429
	ldrb	r0, [r0]
	bl	sub_8014AB8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1427	@cond_branch
	ldr	r3, .L1429+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1428
.L1430:
	.align	2, 0
.L1429:
	.word	gBank1
	.word	gBattlescriptCurrInstr
.L1427:
	ldr	r1, .L1431
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1428:
	pop	{r0}
	bx	r0
.L1432:
	.align	2, 0
.L1431:
	.word	gBattlescriptCurrInstr
.Lfe132:
	.size	 atk72_jump_if_can_run_frombattle,.Lfe132-atk72_jump_if_can_run_frombattle
	.align	2, 0
	.type	 atk73_hp_thresholds,function
	.thumb_func
atk73_hp_thresholds:
	push	{r4, r5, lr}
	ldr	r0, .L1444
	ldrh	r0, [r0]
	mov	r5, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	bne	.L1434	@cond_branch
	ldr	r0, .L1444+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r1, .L1444+0x8
	strb	r0, [r1]
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1444+0xc
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r4, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r4
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	cmp	r0, #0
	bne	.L1435	@cond_branch
	mov	r0, #0x1
.L1435:
	cmp	r0, #0x45
	bgt	.L1437	@cond_branch
	cmp	r4, #0
	bne	.L1436	@cond_branch
.L1437:
	ldr	r0, .L1444+0x10
	ldr	r1, .L1444+0x14
	add	r0, r0, r1
	strb	r5, [r0]
	b	.L1434
.L1445:
	.align	2, 0
.L1444:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
	.word	gSharedMem
	.word	0x160c1
.L1436:
	cmp	r0, #0x27
	ble	.L1439	@cond_branch
	ldr	r0, .L1446
	ldr	r1, .L1446+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L1443
.L1447:
	.align	2, 0
.L1446:
	.word	gSharedMem
	.word	0x160c1
.L1439:
	cmp	r0, #0x9
	ble	.L1441	@cond_branch
	ldr	r0, .L1448
	ldr	r1, .L1448+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	b	.L1443
.L1449:
	.align	2, 0
.L1448:
	.word	gSharedMem
	.word	0x160c1
.L1441:
	ldr	r0, .L1450
	ldr	r1, .L1450+0x4
	add	r0, r0, r1
	mov	r1, #0x3
.L1443:
	strb	r1, [r0]
.L1434:
	ldr	r1, .L1450+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1451:
	.align	2, 0
.L1450:
	.word	gSharedMem
	.word	0x160c1
	.word	gBattlescriptCurrInstr
.Lfe133:
	.size	 atk73_hp_thresholds,.Lfe133-atk73_hp_thresholds
	.align	2, 0
	.type	 atk74_hp_thresholds2,function
	.thumb_func
atk74_hp_thresholds2:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1461
	ldrh	r0, [r0]
	mov	r7, #0x1
	and	r7, r7, r0
	cmp	r7, #0
	bne	.L1453	@cond_branch
	ldr	r0, .L1461+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	add	r4, r0, #0
	ldr	r0, .L1461+0x8
	strb	r4, [r0]
	mov	r0, #0x1
	eor	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L1461+0xc
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	ldr	r1, .L1461+0x10
	add	r0, r0, r1
	add	r0, r0, r6
	ldrb	r5, [r0]
	ldr	r1, .L1461+0x14
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r4, [r0, #0x28]
	sub	r1, r5, r4
	mov	r0, #0x64
	mul	r0, r0, r1
	add	r1, r5, #0
	bl	__divsi3
	add	r1, r0, #0
	cmp	r4, r5
	bcc	.L1454	@cond_branch
	ldr	r1, .L1461+0x18
	add	r0, r6, r1
	strb	r7, [r0]
	b	.L1453
.L1462:
	.align	2, 0
.L1461:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gSharedMem
	.word	0x160bc
	.word	gBattleMons
	.word	0x160c1
.L1454:
	cmp	r0, #0x1d
	bgt	.L1456	@cond_branch
	ldr	r0, .L1463
	add	r1, r6, r0
	mov	r0, #0x1
	b	.L1460
.L1464:
	.align	2, 0
.L1463:
	.word	0x160c1
.L1456:
	cmp	r1, #0x45
	bgt	.L1458	@cond_branch
	ldr	r0, .L1465
	add	r1, r6, r0
	mov	r0, #0x2
	b	.L1460
.L1466:
	.align	2, 0
.L1465:
	.word	0x160c1
.L1458:
	ldr	r0, .L1467
	add	r1, r6, r0
	mov	r0, #0x3
.L1460:
	strb	r0, [r1]
.L1453:
	ldr	r1, .L1467+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1468:
	.align	2, 0
.L1467:
	.word	0x160c1
	.word	gBattlescriptCurrInstr
.Lfe134:
	.size	 atk74_hp_thresholds2,.Lfe134-atk74_hp_thresholds2
	.align	2, 0
	.type	 atk75_8026A58,function
	.thumb_func
atk75_8026A58:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r2, .L1470
	ldr	r1, .L1470+0x4
	ldrb	r0, [r1]
	strb	r0, [r2]
	ldr	r2, .L1470+0x8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r1, .L1470+0xc
	add	r0, r0, r1
	ldr	r1, .L1470+0x10
	ldrh	r1, [r1]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x1
	str	r3, [sp]
	mov	r3, #0x0
	bl	sub_803E1B0
	ldr	r1, .L1470+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L1471:
	.align	2, 0
.L1470:
	.word	gBankInMenu
	.word	gBankAttacker
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe135:
	.size	 atk75_8026A58,.Lfe135-atk75_8026A58
	.align	2, 0
	.type	 atk76_various,function
	.thumb_func
atk76_various:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1500
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r1, .L1500+0x4
	strb	r0, [r1]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x6
	bls	.LCB15073
	b	.L1473	@long jump
.LCB15073:
	lsl	r0, r0, #0x2
	ldr	r1, .L1500+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1501:
	.align	2, 0
.L1500:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	.L1497
	.align	2, 0
	.align	2, 0
.L1497:
	.word	.L1474
	.word	.L1475
	.word	.L1478
	.word	.L1479
	.word	.L1480
	.word	.L1483
	.word	.L1484
.L1474:
	ldr	r0, .L1502
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	b	.L1473
.L1503:
	.align	2, 0
.L1502:
	.word	gActiveBank
.L1475:
	ldr	r1, .L1504
	ldr	r4, .L1504+0x4
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBankSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1504+0x8
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L1476	@cond_branch
	ldr	r1, .L1504+0xc
	ldrb	r2, [r2, #0x9]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1476	@cond_branch
	strb	r2, [r4]
	b	.L1473
.L1505:
	.align	2, 0
.L1504:
	.word	gBankAttacker
	.word	gBankTarget
	.word	gSideTimer
	.word	gBattleMons
.L1476:
	ldr	r0, .L1506
	ldr	r1, .L1506+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L1473
.L1507:
	.align	2, 0
.L1506:
	.word	gBankTarget
	.word	gActiveBank
.L1478:
	bl	CanRunFromBattle
	ldr	r1, .L1508
	strb	r0, [r1]
	b	.L1473
.L1509:
	.align	2, 0
.L1508:
	.word	gBattleCommunication
.L1479:
	ldr	r0, .L1510
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L1510+0x4
	strb	r0, [r1]
	b	.L1473
.L1511:
	.align	2, 0
.L1510:
	.word	gCurrentMove
	.word	gBankTarget
.L1480:
	ldr	r2, .L1512
	ldr	r1, .L1512+0x4
	ldr	r0, .L1512+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	ldr	r2, [r2]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1481	@cond_branch
	ldr	r1, .L1512+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L1473
.L1513:
	.align	2, 0
.L1512:
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBank
	.word	gBattleCommunication
.L1481:
	ldr	r0, .L1514
	strb	r2, [r0]
	b	.L1473
.L1515:
	.align	2, 0
.L1514:
	.word	gBattleCommunication
.L1483:
	ldr	r4, .L1516
	ldr	r3, .L1516+0x4
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	b	.L1473
.L1517:
	.align	2, 0
.L1516:
	.word	gSpecialStatuses
	.word	gActiveBank
.L1484:
	ldr	r3, .L1518
	ldr	r0, .L1518+0x4
	ldr	r1, .L1518+0x8
	add	r0, r0, r1
	ldrh	r2, [r3]
	ldrb	r1, [r0]
	cmp	r2, r1
	beq	.L1486	@cond_branch
	ldrh	r0, [r3, #0x4]
	cmp	r0, r1
	bne	.L1473	@cond_branch
	cmp	r2, r0
	bne	.L1488	@cond_branch
.L1486:
	ldr	r1, .L1518+0xc
	mov	r0, #0x0
	b	.L1499
.L1519:
	.align	2, 0
.L1518:
	.word	gBattlePartyID
	.word	gSharedMem
	.word	0x16018
	.word	gActiveBank
.L1488:
	ldr	r1, .L1520
	mov	r0, #0x2
.L1499:
	strb	r0, [r1]
	add	r5, r1, #0
	ldrb	r2, [r5]
	lsl	r1, r2, #0x1
	ldr	r0, .L1520+0x4
	add	r4, r1, r0
	mov	r3, #0x0
	ldr	r1, .L1520+0x8
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldrh	r2, [r4]
	cmp	r0, r2
	beq	.L1491	@cond_branch
	add	r6, r5, #0
	mov	r5, #0x58
	add	r2, r1, #0
.L1492:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L1491	@cond_branch
	lsl	r1, r3, #0x1
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1]
	ldrh	r1, [r4]
	cmp	r0, r1
	bne	.L1492	@cond_branch
.L1491:
	cmp	r3, #0x4
	bne	.L1473	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4]
.L1473:
	ldr	r1, .L1520+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1521:
	.align	2, 0
.L1520:
	.word	gActiveBank
	.word	gSharedMem+0x160e8
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.Lfe136:
	.size	 atk76_various,.Lfe136-atk76_various
	.align	2, 0
	.type	 atk77_setprotect,function
	.thumb_func
atk77_setprotect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x1
	ldr	r2, .L1529
	ldr	r1, .L1529+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r8, r1
	ldr	r7, .L1529+0x8
	cmp	r0, #0xb6
	beq	.L1523	@cond_branch
	cmp	r0, #0xc5
	beq	.L1523	@cond_branch
	cmp	r0, #0xcb
	beq	.L1523	@cond_branch
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x0
	strb	r1, [r0, #0x8]
.L1523:
	ldr	r0, .L1529+0xc
	ldrb	r1, [r0]
	ldr	r0, .L1529+0x10
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L1524	@cond_branch
	mov	r6, #0x0
.L1524:
	ldr	r2, .L1529+0x14
	mov	r5, r8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r4, [r0, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r2
	bl	Random
	ldrh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bls	.L1525	@cond_branch
	cmp	r6, #0
	beq	.L1525	@cond_branch
	ldr	r4, .L1529+0x18
	ldr	r3, .L1529+0x1c
	ldrh	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	cmp	r0, #0x6f
	bne	.L1526	@cond_branch
	ldr	r0, .L1529+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L1529+0x24
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L1526:
	ldrh	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	cmp	r0, #0x74
	bne	.L1527	@cond_branch
	ldr	r0, .L1529+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L1529+0x24
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L1527:
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x8]
	b	.L1528
.L1530:
	.align	2, 0
.L1529:
	.word	gUnknown_02024C4C
	.word	gBankAttacker
	.word	gDisableStructs
	.word	gCurrentMoveTurn
	.word	gNoOfAllBanks
	.word	sProtectSuccessRates
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleCommunication
.L1525:
	ldr	r2, .L1531
	ldr	r0, .L1531+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x8]
	ldr	r1, .L1531+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	ldr	r2, .L1531+0xc
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L1528:
	ldr	r1, .L1531+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1532:
	.align	2, 0
.L1531:
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gBattleCommunication
	.word	gBattleMoveFlags
	.word	gBattlescriptCurrInstr
.Lfe137:
	.size	 atk77_setprotect,.Lfe137-atk77_setprotect
	.align	2, 0
	.type	 atk78_faintifabilitynotdamp,function
	.thumb_func
atk78_faintifabilitynotdamp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L1550
	ldr	r2, [r0]
	cmp	r2, #0
	bne	.L1533	@cond_branch
	ldr	r1, .L1550+0x4
	strb	r2, [r1]
	ldr	r0, .L1550+0x8
	ldrb	r3, [r0]
	add	r5, r1, #0
	mov	r8, r0
	ldr	r6, .L1550+0xc
	cmp	r2, r3
	bcs	.L1536	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x6
	beq	.L1536	@cond_branch
	add	r2, r3, #0
	add	r4, r6, #0
	mov	r3, #0x58
.L1537:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r2
	bcs	.L1536	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L1537	@cond_branch
.L1536:
	ldrb	r0, [r5]
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L1541	@cond_branch
	ldr	r4, .L1550+0x10
	ldr	r7, .L1550+0x14
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldr	r2, .L1550+0x18
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	str	r0, [r2]
	ldr	r1, .L1550+0x1c
	mov	r0, #0x0
	bl	EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r1, .L1550+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r5]
	mov	r2, r8
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L1533	@cond_branch
	add	r3, r5, #0
	ldrb	r5, [r7]
	ldr	r7, .L1550+0x24
	add	r4, r0, #0
	ldr	r6, .L1550+0x28
.L1545:
	ldrb	r2, [r3]
	cmp	r2, r5
	beq	.L1544	@cond_branch
	ldrb	r0, [r6]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1533	@cond_branch
.L1544:
	add	r0, r2, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcc	.L1545	@cond_branch
	b	.L1533
.L1551:
	.align	2, 0
.L1550:
	.word	gBattleExecBuffer
	.word	gBankTarget
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	0x7fff
	.word	gBattlescriptCurrInstr
	.word	gBitTable
	.word	gAbsentBankFlags
.L1541:
	ldr	r1, .L1552
	mov	r0, #0x6
	strb	r0, [r1]
	ldrb	r0, [r5]
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r1, r1, r6
	add	r1, r1, #0x20
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r1, .L1552+0x4
	ldr	r0, .L1552+0x8
	str	r0, [r1]
.L1533:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1553:
	.align	2, 0
.L1552:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D9834
.Lfe138:
	.size	 atk78_faintifabilitynotdamp,.Lfe138-atk78_faintifabilitynotdamp
	.align	2, 0
	.type	 atk79_setatkhptozero,function
	.thumb_func
atk79_setatkhptozero:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L1556
	ldr	r3, [r0]
	cmp	r3, #0
	bne	.L1554	@cond_branch
	ldr	r4, .L1556+0x4
	ldr	r0, .L1556+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L1556+0xc
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	strh	r3, [r0, #0x28]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r1, r1, #0x28
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r2, #0x0
	mov	r3, #0x2
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r1, .L1556+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L1554:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L1557:
	.align	2, 0
.L1556:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.Lfe139:
	.size	 atk79_setatkhptozero,.Lfe139-atk79_setatkhptozero
	.align	2, 0
	.type	 atk7A_jumpwhiletargetvalid,function
	.thumb_func
atk7A_jumpwhiletargetvalid:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L1571
	ldr	r2, [r3]
	ldrb	r4, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r0, .L1571+0x4
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L1559	@cond_branch
	ldr	r0, .L1571+0x8
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r2, .L1571+0xc
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r3, r0, #0
	ldr	r6, .L1571+0x10
	ldr	r5, .L1571+0x14
	ldr	r0, .L1571+0x18
	mov	ip, r0
	ldrb	r0, [r2]
	cmp	r1, r0
	bne	.L1570	@cond_branch
.L1562:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L1562	@cond_branch
.L1570:
	ldrb	r0, [r6]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1562	@cond_branch
	ldrb	r0, [r3]
	mov	r2, ip
	ldrb	r2, [r2]
	cmp	r0, r2
	bcc	.L1566	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	b	.L1568
.L1572:
	.align	2, 0
.L1571:
	.word	gBattlescriptCurrInstr
	.word	gBattleTypeFlags
	.word	gBankTarget
	.word	gBankAttacker
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gNoOfAllBanks
.L1566:
	str	r4, [r7]
	b	.L1568
.L1559:
	add	r0, r2, #0x5
	str	r0, [r3]
.L1568:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 atk7A_jumpwhiletargetvalid,.Lfe140-atk7A_jumpwhiletargetvalid
	.align	2, 0
	.type	 atk7B_healhalfHP_if_possible,function
	.thumb_func
atk7B_healhalfHP_if_possible:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1578
	ldr	r1, [r4]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	ldr	r3, .L1578+0x4
	cmp	r0, #0x1
	bne	.L1574	@cond_branch
	ldr	r0, .L1578+0x8
	ldrb	r0, [r0]
	strb	r0, [r3]
.L1574:
	ldr	r1, .L1578+0xc
	ldr	r6, .L1578+0x10
	ldrb	r0, [r3]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L1575	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L1575:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	bne	.L1576	@cond_branch
	str	r2, [r4]
	b	.L1577
.L1579:
	.align	2, 0
.L1578:
	.word	gBattlescriptCurrInstr
	.word	gBankTarget
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
.L1576:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1577:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe141:
	.size	 atk7B_healhalfHP_if_possible,.Lfe141-atk7B_healhalfHP_if_possible
	.align	2, 0
	.type	 atk7C_8025508,function
	.thumb_func
atk7C_8025508:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L1593
	ldr	r4, .L1593+0x4
	ldrb	r2, [r4]
	lsl	r1, r2, #0x1
	ldr	r5, .L1593+0x8
	add	r0, r1, r5
	add	r0, r0, r3
	ldrb	r7, [r0]
	ldr	r0, .L1593+0xc
	add	r1, r1, r0
	add	r1, r1, r3
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	lsl	r2, r2, #0x2
	ldr	r1, .L1593+0x10
	add	r0, r2, r1
	add	r0, r0, r3
	ldrb	r6, [r0]
	add	r5, r5, #0x55
	add	r0, r2, r5
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	add	r1, r1, #0x2
	add	r0, r2, r1
	add	r0, r0, r3
	ldrb	r5, [r0]
	ldr	r0, .L1593+0x14
	add	r2, r2, r0
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	cmp	r7, #0
	beq	.L1581	@cond_branch
	ldr	r0, .L1593+0x18
	cmp	r7, r0
	beq	.L1581	@cond_branch
	ldr	r2, .L1593+0x1c
	ldr	r0, [r2]
	ldr	r1, .L1593+0x20
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L1593+0x24
	strh	r7, [r4]
	b	.L1591
.L1594:
	.align	2, 0
.L1593:
	.word	gSharedMem
	.word	gBankAttacker
	.word	0x160ac
	.word	0x160ad
	.word	0x16100
	.word	0x16103
	.word	0xffff
	.word	gHitMarker
	.word	0xfffffbff
	.word	gCurrentMove
.L1581:
	cmp	r6, #0
	beq	.L1587	@cond_branch
	cmp	r5, #0
	beq	.L1583	@cond_branch
	ldr	r0, .L1595
	cmp	r6, r0
	beq	.L1583	@cond_branch
	cmp	r5, r0
	beq	.L1583	@cond_branch
	ldr	r2, .L1595+0x4
	ldr	r0, [r2]
	ldr	r1, .L1595+0x8
	and	r0, r0, r1
	str	r0, [r2]
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1584	@cond_branch
	ldr	r0, .L1595+0xc
	strh	r6, [r0]
	b	.L1592
.L1596:
	.align	2, 0
.L1595:
	.word	0xffff
	.word	gHitMarker
	.word	0xfffffbff
	.word	gCurrentMove
.L1584:
	ldr	r0, .L1597
	strh	r5, [r0]
.L1592:
	add	r5, r0, #0
	ldrh	r0, [r5]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L1597+0x4
	strb	r0, [r1]
	ldr	r4, .L1597+0x8
	ldr	r3, .L1597+0xc
	ldr	r2, .L1597+0x10
	ldrh	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r4]
	b	.L1582
.L1598:
	.align	2, 0
.L1597:
	.word	gCurrentMove
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
	.word	gBattleScriptsEffectsTable
	.word	gBattleMoves
.L1583:
	cmp	r6, #0
	beq	.L1587	@cond_branch
	ldr	r0, .L1599
	cmp	r6, r0
	beq	.L1587	@cond_branch
	ldr	r2, .L1599+0x4
	ldr	r0, [r2]
	ldr	r1, .L1599+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L1599+0xc
	strh	r6, [r4]
	b	.L1591
.L1600:
	.align	2, 0
.L1599:
	.word	0xffff
	.word	gHitMarker
	.word	0xfffffbff
	.word	gCurrentMove
.L1587:
	cmp	r5, #0
	beq	.L1589	@cond_branch
	ldr	r0, .L1601
	cmp	r5, r0
	beq	.L1589	@cond_branch
	ldr	r2, .L1601+0x4
	ldr	r0, [r2]
	ldr	r1, .L1601+0x8
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L1601+0xc
	strh	r5, [r4]
.L1591:
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L1601+0x10
	strb	r0, [r1]
	ldr	r5, .L1601+0x14
	ldr	r3, .L1601+0x18
	ldr	r2, .L1601+0x1c
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r5]
	b	.L1582
.L1602:
	.align	2, 0
.L1601:
	.word	0xffff
	.word	gHitMarker
	.word	0xfffffbff
	.word	gCurrentMove
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
	.word	gBattleScriptsEffectsTable
	.word	gBattleMoves
.L1589:
	ldr	r2, .L1603
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L1603+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L1582:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1604:
	.align	2, 0
.L1603:
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.Lfe142:
	.size	 atk7C_8025508,.Lfe142-atk7C_8025508
	.align	2, 0
	.type	 atk7D_set_rain,function
	.thumb_func
atk7D_set_rain:
	push	{lr}
	ldr	r2, .L1608
	ldrh	r0, [r2]
	mov	r1, #0x7
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1606	@cond_branch
	ldr	r2, .L1608+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1608+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L1607
.L1609:
	.align	2, 0
.L1608:
	.word	gBattleWeather
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L1606:
	mov	r0, #0x1
	strh	r0, [r2]
	ldr	r0, .L1610
	strb	r1, [r0, #0x5]
	ldr	r0, .L1610+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L1607:
	ldr	r1, .L1610+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1611:
	.align	2, 0
.L1610:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe143:
	.size	 atk7D_set_rain,.Lfe143-atk7D_set_rain
	.align	2, 0
	.type	 atk7E_setreflect,function
	.thumb_func
atk7E_setreflect:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1618
	ldrb	r0, [r5]
	bl	GetBankIdentity
	ldr	r6, .L1618+0x4
	mov	r4, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1613	@cond_branch
	ldr	r2, .L1618+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1618+0xc
	mov	r0, #0x0
	b	.L1617
.L1619:
	.align	2, 0
.L1618:
	.word	gBankAttacker
	.word	gSideAffecting
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L1613:
	ldrb	r0, [r5]
	bl	GetBankIdentity
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r5]
	bl	GetBankIdentity
	ldr	r2, .L1620
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strb	r1, [r0]
	ldr	r0, .L1620+0x4
	ldrh	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1615	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMons
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L1615	@cond_branch
	ldr	r0, .L1620+0x8
	strb	r1, [r0, #0x5]
	b	.L1614
.L1621:
	.align	2, 0
.L1620:
	.word	gSideTimer
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L1615:
	ldr	r1, .L1622
	mov	r0, #0x1
.L1617:
	strb	r0, [r1, #0x5]
.L1614:
	ldr	r1, .L1622+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1623:
	.align	2, 0
.L1622:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe144:
	.size	 atk7E_setreflect,.Lfe144-atk7E_setreflect
	.align	2, 0
	.type	 atk7F_setseeded,function
	.thumb_func
atk7F_setseeded:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L1631
	ldrb	r5, [r7]
	mov	r0, #0x29
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1626	@cond_branch
	ldr	r0, .L1631+0x4
	mov	r9, r0
	ldr	r1, .L1631+0x8
	mov	r8, r1
	ldrb	r4, [r1]
	lsl	r0, r4, #0x2
	mov	r2, r9
	add	r6, r0, r2
	ldr	r2, [r6]
	mov	r0, #0x4
	mov	ip, r0
	add	r3, r2, #0
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L1625	@cond_branch
.L1626:
	mov	r0, #0x1
	orr	r0, r0, r5
	strb	r0, [r7]
	ldr	r1, .L1631+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L1627
.L1632:
	.align	2, 0
.L1631:
	.word	gBattleMoveFlags
	.word	gStatuses3
	.word	gBankTarget
	.word	gBattleCommunication
.L1625:
	ldr	r1, .L1633
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L1629	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.L1628	@cond_branch
.L1629:
	mov	r0, #0x1
	orr	r0, r0, r5
	strb	r0, [r7]
	ldr	r1, .L1633+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L1627
.L1634:
	.align	2, 0
.L1633:
	.word	gBattleMons
	.word	gBattleCommunication
.L1628:
	ldr	r0, .L1635
	ldrb	r0, [r0]
	orr	r2, r2, r0
	str	r2, [r6]
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldr	r0, [r1]
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L1635+0x4
	strb	r3, [r0, #0x5]
.L1627:
	ldr	r1, .L1635+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1636:
	.align	2, 0
.L1635:
	.word	gBankAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe145:
	.size	 atk7F_setseeded,.Lfe145-atk7F_setseeded
	.align	2, 0
	.type	 atk80_manipulatedamage,function
	.thumb_func
atk80_manipulatedamage:
	push	{r4, lr}
	ldr	r1, .L1648
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x1]
	add	r4, r1, #0
	cmp	r2, #0x1
	beq	.L1640	@cond_branch
	cmp	r2, #0x1
	bgt	.L1646	@cond_branch
	cmp	r2, #0
	beq	.L1639	@cond_branch
	b	.L1638
.L1649:
	.align	2, 0
.L1648:
	.word	gBattlescriptCurrInstr
.L1646:
	cmp	r2, #0x2
	beq	.L1643	@cond_branch
	b	.L1638
.L1639:
	ldr	r1, .L1650
	ldr	r0, [r1]
	neg	r0, r0
	b	.L1647
.L1651:
	.align	2, 0
.L1650:
	.word	gBattleMoveDamage
.L1640:
	ldr	r3, .L1652
	ldr	r0, [r3]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	str	r0, [r3]
	cmp	r0, #0
	bne	.L1641	@cond_branch
	str	r2, [r3]
.L1641:
	ldr	r2, .L1652+0x4
	ldr	r0, .L1652+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r1, r0, #0x1
	ldr	r0, [r3]
	cmp	r1, r0
	bge	.L1638	@cond_branch
	str	r1, [r3]
	b	.L1638
.L1653:
	.align	2, 0
.L1652:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBankTarget
.L1643:
	ldr	r1, .L1654
	ldr	r0, [r1]
	lsl	r0, r0, #0x1
.L1647:
	str	r0, [r1]
.L1638:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1655:
	.align	2, 0
.L1654:
	.word	gBattleMoveDamage
.Lfe146:
	.size	 atk80_manipulatedamage,.Lfe146-atk80_manipulatedamage
	.align	2, 0
	.type	 atk81_setrest,function
	.thumb_func
atk81_setrest:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L1661
	mov	ip, r0
	ldr	r1, [r0]
	ldrb	r6, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r6, r6, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r6, r6, r0
	ldr	r5, .L1661+0x4
	ldr	r2, .L1661+0x8
	ldr	r0, .L1661+0xc
	ldrb	r0, [r0]
	strb	r0, [r2]
	strb	r0, [r5]
	ldr	r4, .L1661+0x10
	ldr	r1, .L1661+0x14
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2c]
	neg	r0, r0
	str	r0, [r4]
	ldrb	r0, [r2]
	mov	r4, r0
	mul	r4, r4, r3
	add	r0, r4, r1
	ldrh	r3, [r0, #0x28]
	add	r7, r5, #0
	add	r5, r2, #0
	add	r2, r1, #0
	ldrh	r0, [r0, #0x2c]
	cmp	r3, r0
	bne	.L1657	@cond_branch
	mov	r0, ip
	str	r6, [r0]
	b	.L1658
.L1662:
	.align	2, 0
.L1661:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBankTarget
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
.L1657:
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0xf8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1659	@cond_branch
	ldr	r1, .L1663
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L1660
.L1664:
	.align	2, 0
.L1663:
	.word	gBattleCommunication
.L1659:
	ldr	r0, .L1665
	strb	r1, [r0, #0x5]
.L1660:
	ldrb	r0, [r5]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r2, #0x4c
	add	r0, r0, r2
	mov	r1, #0x3
	str	r1, [r0]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r7]
	bl	MarkBufferBankForExecution
	ldr	r1, .L1665+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1658:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1666:
	.align	2, 0
.L1665:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe147:
	.size	 atk81_setrest,.Lfe147-atk81_setrest
	.align	2, 0
	.type	 atk82_jumpifnotfirstturn,function
	.thumb_func
atk82_jumpifnotfirstturn:
	push	{r4, r5, lr}
	ldr	r5, .L1670
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r2, .L1670+0x4
	ldr	r0, .L1670+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.L1668	@cond_branch
	add	r0, r4, #0x5
	str	r0, [r5]
	b	.L1669
.L1671:
	.align	2, 0
.L1670:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBankAttacker
.L1668:
	str	r3, [r5]
.L1669:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe148:
	.size	 atk82_jumpifnotfirstturn,.Lfe148-atk82_jumpifnotfirstturn
	.align	2, 0
	.type	 atk83_nop,function
	.thumb_func
atk83_nop:
	ldr	r1, .L1673
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1674:
	.align	2, 0
.L1673:
	.word	gBattlescriptCurrInstr
.Lfe149:
	.size	 atk83_nop,.Lfe149-atk83_nop
	.align	2, 0
	.globl	UproarWakeUpCheck
	.type	 UproarWakeUpCheck,function
	.thumb_func
UproarWakeUpCheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, #0x0
	ldr	r0, .L1692
	ldrb	r1, [r0]
	mov	r8, r0
	cmp	r2, r1
	bge	.L1677	@cond_branch
	ldr	r0, .L1692+0x4
	mov	ip, r0
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, ip
	add	r5, r0, #0
	add	r5, r5, #0x20
	ldr	r6, .L1692+0x8
	mov	r3, #0x0
	ldr	r7, .L1692+0xc
	add	r4, r1, #0
.L1679:
	mov	r0, ip
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1678	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0x2b
	beq	.L1678	@cond_branch
	mov	r3, #0x0
	strb	r2, [r6]
	ldr	r1, .L1692+0x10
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1690	@cond_branch
	cmp	r0, r2
	beq	.L1691	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7, #0x5]
	b	.L1677
.L1693:
	.align	2, 0
.L1692:
	.word	gNoOfAllBanks
	.word	gBattleMons
	.word	gSharedMem+0x16003
	.word	gBattleCommunication
	.word	gBankTarget
.L1678:
	add	r3, r3, #0x58
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L1679	@cond_branch
.L1677:
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L1687	@cond_branch
	mov	r0, #0x1
	b	.L1689
.L1691:
	ldr	r0, .L1694
	strb	r3, [r0, #0x5]
	b	.L1677
.L1695:
	.align	2, 0
.L1694:
	.word	gBattleCommunication
.L1690:
	strb	r2, [r1]
	b	.L1677
.L1687:
	mov	r0, #0x0
.L1689:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe150:
	.size	 UproarWakeUpCheck,.Lfe150-UproarWakeUpCheck
	.align	2, 0
	.type	 atk84_jump_if_cant_sleep,function
	.thumb_func
atk84_jump_if_cant_sleep:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1702
	ldr	r1, [r5]
	ldrb	r4, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r6, .L1702+0x4
	ldrb	r0, [r6]
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1697	@cond_branch
	str	r4, [r5]
	b	.L1698
.L1703:
	.align	2, 0
.L1702:
	.word	gBattlescriptCurrInstr
	.word	gBankTarget
.L1697:
	ldr	r1, .L1704
	ldrb	r3, [r6]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r1, #0xf
	beq	.L1700	@cond_branch
	cmp	r1, #0x48
	bne	.L1699	@cond_branch
.L1700:
	ldr	r2, .L1704+0x4
	strb	r0, [r2]
	ldr	r1, .L1704+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	str	r4, [r5]
	ldrb	r1, [r2]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	b	.L1698
.L1705:
	.align	2, 0
.L1704:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L1699:
	ldr	r0, [r5]
	add	r0, r0, #0x5
	str	r0, [r5]
.L1698:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe151:
	.size	 atk84_jump_if_cant_sleep,.Lfe151-atk84_jump_if_cant_sleep
	.align	2, 0
	.type	 atk85_stockpile,function
	.thumb_func
atk85_stockpile:
	push	{r4, r5, lr}
	ldr	r5, .L1709
	ldr	r4, .L1709+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1, #0x9]
	cmp	r0, #0x3
	bne	.L1707	@cond_branch
	ldr	r2, .L1709+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1709+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L1708
.L1710:
	.align	2, 0
.L1709:
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L1707:
	add	r0, r0, #0x1
	mov	r3, #0x0
	strb	r0, [r1, #0x9]
	ldr	r2, .L1711
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x1
	strb	r0, [r2, #0x1]
	strb	r0, [r2, #0x2]
	strb	r0, [r2, #0x3]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x9]
	strb	r0, [r2, #0x4]
	mov	r0, #0xff
	strb	r0, [r2, #0x5]
	ldr	r0, .L1711+0x4
	strb	r3, [r0, #0x5]
.L1708:
	ldr	r1, .L1711+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1712:
	.align	2, 0
.L1711:
	.word	gBattleTextBuff1
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe152:
	.size	 atk85_stockpile,.Lfe152-atk85_stockpile
	.align	2, 0
	.type	 atk86_stockpiletobasedamage,function
	.thumb_func
atk86_stockpiletobasedamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff0
	ldr	r3, .L1718
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r7, .L1718+0x4
	ldr	r6, .L1718+0x8
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	bne	.L1714	@cond_branch
	str	r2, [r3]
	b	.L1715
.L1719:
	.align	2, 0
.L1718:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBankAttacker
.L1714:
	ldr	r0, .L1720
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L1716	@cond_branch
	ldr	r0, .L1720+0x4
	mov	r8, r0
	ldr	r4, .L1720+0x8
	ldr	r5, .L1720+0xc
	ldrb	r0, [r5]
	bl	GetBankIdentity
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldrb	r0, [r6]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L1720+0x10
	add	r0, r0, r2
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r1, r1, r2
	ldr	r2, .L1720+0x14
	ldrh	r2, [r2]
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	ldrb	r4, [r6]
	str	r4, [sp, #0x8]
	ldrb	r4, [r5]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldrb	r2, [r6]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r1, [r1, #0x9]
	mov	r3, r0
	mul	r3, r3, r1
	mov	r1, r8
	str	r3, [r1]
	ldr	r2, .L1720+0x18
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L1720+0x1c
	add	r2, r2, r1
	strb	r0, [r2]
	ldr	r1, .L1720+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L1716	@cond_branch
	lsl	r0, r3, #0x4
	sub	r0, r0, r3
	mov	r1, #0xa
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
.L1716:
	ldr	r2, .L1720+0x24
	ldr	r0, .L1720+0x28
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	ldr	r1, .L1720+0x2c
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1715:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1721:
	.align	2, 0
.L1720:
	.word	gBattleCommunication
	.word	gBattleMoveDamage
	.word	gSideAffecting
	.word	gBankTarget
	.word	gBattleMons
	.word	gCurrentMove
	.word	gSharedMem
	.word	0x16002
	.word	gProtectStructs
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe153:
	.size	 atk86_stockpiletobasedamage,.Lfe153-atk86_stockpiletobasedamage
	.align	2, 0
	.type	 atk87_stockpiletohpheal,function
	.thumb_func
atk87_stockpiletohpheal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L1728
	ldr	r1, [r7]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r0, .L1728+0x4
	mov	r8, r0
	ldr	r6, .L1728+0x8
	ldrb	r3, [r6]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	mov	r1, r8
	add	r4, r0, r1
	ldrb	r1, [r4, #0x9]
	cmp	r1, #0
	bne	.L1723	@cond_branch
	str	r2, [r7]
	ldr	r0, .L1728+0xc
	strb	r1, [r0, #0x5]
	b	.L1724
.L1729:
	.align	2, 0
.L1728:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gBattleCommunication
.L1723:
	ldr	r1, .L1730
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2c]
	ldrh	r3, [r1, #0x28]
	cmp	r0, r3
	bne	.L1725	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x9]
	str	r2, [r7]
	ldr	r1, .L1730+0x4
	ldrb	r0, [r6]
	strb	r0, [r1]
	ldr	r1, .L1730+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L1724
.L1731:
	.align	2, 0
.L1730:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattleCommunication
.L1725:
	ldr	r5, .L1732
	ldrh	r0, [r1, #0x2c]
	ldrb	r1, [r4, #0x9]
	mov	r2, #0x3
	sub	r2, r2, r1
	mov	r4, #0x1
	add	r1, r4, #0
	lsl	r1, r1, r2
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L1727	@cond_branch
	str	r4, [r5]
.L1727:
	ldr	r0, [r5]
	neg	r0, r0
	str	r0, [r5]
	ldr	r2, .L1732+0x4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L1732+0x8
	add	r2, r2, r1
	mov	r3, #0x0
	strb	r0, [r2]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	strb	r3, [r0, #0x9]
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	ldr	r1, .L1732+0xc
	ldrb	r0, [r6]
	strb	r0, [r1]
.L1724:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1733:
	.align	2, 0
.L1732:
	.word	gBattleMoveDamage
	.word	gSharedMem
	.word	0x16002
	.word	gBankTarget
.Lfe154:
	.size	 atk87_stockpiletohpheal,.Lfe154-atk87_stockpiletohpheal
	.align	2, 0
	.type	 atk88_negativedamage,function
	.thumb_func
atk88_negativedamage:
	push	{lr}
	ldr	r2, .L1736
	ldr	r0, .L1736+0x4
	ldr	r0, [r0]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	neg	r0, r0
	str	r0, [r2]
	cmp	r0, #0
	bne	.L1735	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r2]
.L1735:
	ldr	r1, .L1736+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1737:
	.align	2, 0
.L1736:
	.word	gBattleMoveDamage
	.word	gHP_dealt
	.word	gBattlescriptCurrInstr
.Lfe155:
	.size	 atk88_negativedamage,.Lfe155-atk88_negativedamage
	.align	2, 0
	.type	 ChangeStatBuffs,function
	.thumb_func
ChangeStatBuffs:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    mov r8, r3
    lsls r0, 24
    lsrs r6, r0, 24
    lsls r1, 24
    lsrs r7, r1, 24
    lsls r2, 24
    lsrs r5, r2, 24
    movs r0, 0
    mov r9, r0
    mov r10, r0
    movs r0, 0x40
    ands r0, r5
    cmp r0, 0
    beq _08025E54
    ldr r0, _08025E4C @ =gActiveBank
    ldr r1, _08025E50 @ =gBankAttacker
    b _08025E58
    .align 2, 0
_08025E4C: .4byte gActiveBank
_08025E50: .4byte gBankAttacker
_08025E54:
    ldr r0, _08025EF8 @ =gActiveBank
    ldr r1, _08025EFC @ =gBankTarget
_08025E58:
    ldrb r1, [r1]
    strb r1, [r0]
    movs r0, 0xBF
    ands r5, r0
    movs r0, 0x80
    ands r0, r5
    cmp r0, 0
    beq _08025E72
    mov r0, r9
    adds r0, 0x1
    lsls r0, 24
    lsrs r0, 24
    mov r9, r0
_08025E72:
    movs r0, 0x7F
    ands r5, r0
    movs r0, 0x20
    ands r0, r5
    cmp r0, 0
    beq _08025E88
    mov r0, r10
    adds r0, 0x1
    lsls r0, 24
    lsrs r0, 24
    mov r10, r0
_08025E88:
    movs r0, 0xDF
    ands r5, r0
    ldr r1, _08025F00 @ =gBattleTextBuff1
    movs r4, 0
    movs r2, 0xFD
    strb r2, [r1]
    movs r0, 0x5
    strb r0, [r1, 0x1]
    strb r7, [r1, 0x2]
    movs r3, 0x1
    negs r3, r3
    mov r12, r3
    movs r0, 0xFF
    strb r0, [r1, 0x3]
    lsls r0, r6, 24
    cmp r0, 0
    blt _08025EAC
    b _080261B0
_08025EAC:
    ldr r4, _08025F04 @ =gSideTimer
    ldr r1, _08025EF8 @ =gActiveBank
    ldrb r0, [r1]
    bl GetBankIdentity
    movs r1, 0x1
    ands r1, r0
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r4
    ldrb r0, [r0, 0x2]
    cmp r0, 0
    beq _08025F54
    mov r2, r9
    cmp r2, 0
    bne _08025F54
    ldr r0, _08025F08 @ =gCurrentMove
    ldrh r0, [r0]
    cmp r0, 0xAE
    beq _08025F84
    cmp r5, 0x1
    bne _08025F74
    ldr r4, _08025F0C @ =gSpecialStatuses
    ldr r3, _08025EF8 @ =gActiveBank
    ldrb r0, [r3]
    lsls r1, r0, 2
    adds r1, r0
    lsls r1, 2
    adds r1, r4
    ldrb r0, [r1]
    lsls r0, 31
    cmp r0, 0
    beq _08025F14
    ldr r0, _08025F10 @ =gBattlescriptCurrInstr
    mov r4, r8
    str r4, [r0]
    b _08025F74
    .align 2, 0
_08025EF8: .4byte gActiveBank
_08025EFC: .4byte gBankTarget
_08025F00: .4byte gBattleTextBuff1
_08025F04: .4byte gSideTimer
_08025F08: .4byte gCurrentMove
_08025F0C: .4byte gSpecialStatuses
_08025F10: .4byte gBattlescriptCurrInstr
_08025F14:
    mov r0, r8
    bl b_movescr_stack_push
    ldr r0, _08025F40 @ =gSharedMem
    ldr r6, _08025F44 @ =gActiveBank
    ldrb r1, [r6]
    ldr r2, _08025F48 @ =0x00016003
    adds r0, r2
    strb r1, [r0]
    ldr r1, _08025F4C @ =gBattlescriptCurrInstr
    ldr r0, _08025F50 @ =BattleScript_MistProtected
    str r0, [r1]
    ldrb r1, [r6]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r4
    ldrb r1, [r0]
    movs r2, 0x1
    orrs r1, r2
    strb r1, [r0]
    b _08025F74
    .align 2, 0
_08025F40: .4byte gSharedMem
_08025F44: .4byte gActiveBank
_08025F48: .4byte 0x00016003
_08025F4C: .4byte gBattlescriptCurrInstr
_08025F50: .4byte BattleScript_MistProtected
_08025F54:
    ldr r0, _08025F78 @ =gCurrentMove
    ldrh r0, [r0]
    cmp r0, 0xAE
    beq _08025F84
    mov r3, r10
    cmp r3, 0x1
    beq _08025F84
    movs r0, 0
    bl JumpIfMoveAffectedByProtect
    lsls r0, 24
    cmp r0, 0
    beq _08025F84
    ldr r1, _08025F7C @ =gBattlescriptCurrInstr
    ldr r0, _08025F80 @ =BattleScript_ButItFailed
    str r0, [r1]
_08025F74:
    movs r0, 0x1
    b _080262A4
    .align 2, 0
_08025F78: .4byte gCurrentMove
_08025F7C: .4byte gBattlescriptCurrInstr
_08025F80: .4byte BattleScript_ButItFailed
_08025F84:
    ldr r2, _08025FCC @ =gBattleMons
    ldr r1, _08025FD0 @ =gActiveBank
    ldrb r3, [r1]
    movs r4, 0x58
    adds r0, r3, 0
    muls r0, r4
    adds r0, r2
    adds r0, 0x20
    ldrb r0, [r0]
    mov r10, r2
    cmp r0, 0x1D
    beq _08025FA0
    cmp r0, 0x49
    bne _08026040
_08025FA0:
    mov r0, r9
    cmp r0, 0
    bne _08026040
    ldr r0, _08025FD4 @ =gCurrentMove
    ldrh r0, [r0]
    cmp r0, 0xAE
    beq _08026040
    cmp r5, 0x1
    bne _08025F74
    ldr r4, _08025FD8 @ =gSpecialStatuses
    lsls r0, r3, 2
    adds r0, r3
    lsls r0, 2
    adds r0, r4
    ldrb r0, [r0]
    lsls r0, 31
    cmp r0, 0
    beq _08025FE0
    ldr r0, _08025FDC @ =gBattlescriptCurrInstr
    mov r1, r8
    str r1, [r0]
    b _08025F74
    .align 2, 0
_08025FCC: .4byte gBattleMons
_08025FD0: .4byte gActiveBank
_08025FD4: .4byte gCurrentMove
_08025FD8: .4byte gSpecialStatuses
_08025FDC: .4byte gBattlescriptCurrInstr
_08025FE0:
    mov r0, r8
    bl b_movescr_stack_push
    ldr r0, _08026028 @ =gSharedMem
    ldr r2, _0802602C @ =gActiveBank
    ldrb r1, [r2]
    ldr r3, _08026030 @ =0x00016003
    adds r0, r3
    strb r1, [r0]
    ldr r1, _08026034 @ =gBattlescriptCurrInstr
    ldr r0, _08026038 @ =BattleScript_AbilityNoStatLoss
    str r0, [r1]
    ldr r1, _0802603C @ =gLastUsedAbility
    ldrb r0, [r2]
    movs r6, 0x58
    muls r0, r6
    add r0, r10
    adds r0, 0x20
    ldrb r0, [r0]
    strb r0, [r1]
    ldrb r0, [r2]
    ldrb r1, [r1]
    bl RecordAbilityBattle
    ldr r0, _0802602C @ =gActiveBank
    ldrb r1, [r0]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r4
    ldrb r1, [r0]
    movs r2, 0x1
    orrs r1, r2
    strb r1, [r0]
    b _08025F74
    .align 2, 0
_08026028: .4byte gSharedMem
_0802602C: .4byte gActiveBank
_08026030: .4byte 0x00016003
_08026034: .4byte gBattlescriptCurrInstr
_08026038: .4byte BattleScript_AbilityNoStatLoss
_0802603C: .4byte gLastUsedAbility
_08026040:
    ldr r1, _08026090 @ =gActiveBank
    ldrb r0, [r1]
    movs r4, 0x58
    muls r0, r4
    add r0, r10
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x33
    bne _080260A8
    mov r2, r9
    cmp r2, 0
    bne _080260A8
    cmp r7, 0x6
    bne _080260A8
    cmp r5, 0x1
    bne _08025F74
    mov r0, r8
    bl b_movescr_stack_push
    ldr r0, _08026094 @ =gSharedMem
    ldr r3, _08026090 @ =gActiveBank
    ldrb r1, [r3]
    ldr r6, _08026098 @ =0x00016003
    adds r0, r6
    strb r1, [r0]
    ldr r1, _0802609C @ =gBattlescriptCurrInstr
    ldr r0, _080260A0 @ =BattleScript_AbilityNoSpecificStatLoss
    str r0, [r1]
    ldr r1, _080260A4 @ =gLastUsedAbility
    ldrb r0, [r3]
    muls r0, r4
    add r0, r10
    adds r0, 0x20
    ldrb r0, [r0]
    strb r0, [r1]
    ldrb r0, [r3]
    ldrb r1, [r1]
    bl RecordAbilityBattle
    b _08025F74
    .align 2, 0
_08026090: .4byte gActiveBank
_08026094: .4byte gSharedMem
_08026098: .4byte 0x00016003
_0802609C: .4byte gBattlescriptCurrInstr
_080260A0: .4byte BattleScript_AbilityNoSpecificStatLoss
_080260A4: .4byte gLastUsedAbility
_080260A8:
    ldr r1, _080260FC @ =gActiveBank
    ldrb r0, [r1]
    movs r4, 0x58
    muls r0, r4
    add r0, r10
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x34
    bne _08026114
    mov r2, r9
    cmp r2, 0
    bne _08026114
    cmp r7, 0x1
    bne _08026114
    cmp r5, 0x1
    beq _080260CA
    b _08025F74
_080260CA:
    mov r0, r8
    bl b_movescr_stack_push
    ldr r0, _08026100 @ =gSharedMem
    ldr r3, _080260FC @ =gActiveBank
    ldrb r1, [r3]
    ldr r6, _08026104 @ =0x00016003
    adds r0, r6
    strb r1, [r0]
    ldr r1, _08026108 @ =gBattlescriptCurrInstr
    ldr r0, _0802610C @ =BattleScript_AbilityNoSpecificStatLoss
    str r0, [r1]
    ldr r1, _08026110 @ =gLastUsedAbility
    ldrb r0, [r3]
    muls r0, r4
    add r0, r10
    adds r0, 0x20
    ldrb r0, [r0]
    strb r0, [r1]
    ldrb r0, [r3]
    ldrb r1, [r1]
    bl RecordAbilityBattle
    b _08025F74
    .align 2, 0
_080260FC: .4byte gActiveBank
_08026100: .4byte gSharedMem
_08026104: .4byte 0x00016003
_08026108: .4byte gBattlescriptCurrInstr
_0802610C: .4byte BattleScript_AbilityNoSpecificStatLoss
_08026110: .4byte gLastUsedAbility
_08026114:
    ldr r0, _080261A0 @ =gActiveBank
    ldrb r1, [r0]
    movs r0, 0x58
    muls r0, r1
    add r0, r10
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x13
    bne _0802612C
    cmp r5, 0
    bne _0802612C
    b _08025F74
_0802612C:
    lsls r0, r6, 24
    asrs r0, 28
    movs r1, 0x7
    ands r0, r1
    negs r0, r0
    lsls r0, 24
    ldr r3, _080261A4 @ =gBattleTextBuff2
    movs r4, 0
    movs r1, 0xFD
    strb r1, [r3]
    movs r2, 0x1
    lsrs r6, r0, 24
    asrs r0, 24
    subs r1, 0xFF
    cmp r0, r1
    bne _08026156
    strb r4, [r3, 0x1]
    movs r0, 0xD3
    strb r0, [r3, 0x2]
    strb r4, [r3, 0x3]
    movs r2, 0x4
_08026156:
    adds r0, r2, r3
    strb r4, [r0]
    adds r2, 0x1
    adds r1, r2, r3
    movs r0, 0xD4
    strb r0, [r1]
    adds r2, 0x1
    adds r0, r2, r3
    strb r4, [r0]
    adds r2, 0x1
    adds r1, r2, r3
    movs r0, 0xFF
    strb r0, [r1]
    ldr r1, _080261A0 @ =gActiveBank
    ldrb r2, [r1]
    movs r0, 0x58
    muls r0, r2
    adds r0, r7, r0
    mov r1, r10
    adds r1, 0x18
    adds r0, r1
    ldrb r0, [r0]
    lsls r0, 24
    asrs r0, 24
    cmp r0, 0
    beq _08026206
    movs r1, 0
    ldr r0, _080261A8 @ =gBankTarget
    ldrb r0, [r0]
    ldr r3, _080261AC @ =gBattleCommunication
    mov r8, r3
    cmp r0, r2
    bne _0802619A
    movs r1, 0x1
_0802619A:
    mov r4, r8
    strb r1, [r4, 0x5]
    b _08026234
    .align 2, 0
_080261A0: .4byte gActiveBank
_080261A4: .4byte gBattleTextBuff2
_080261A8: .4byte gBankTarget
_080261AC: .4byte gBattleCommunication
_080261B0:
    asrs r6, r0, 28
    movs r0, 0x7
    ands r6, r0
    ldr r3, _08026210 @ =gBattleTextBuff2
    strb r2, [r3]
    movs r2, 0x1
    cmp r6, 0x2
    bne _080261CA
    strb r4, [r3, 0x1]
    movs r0, 0xD1
    strb r0, [r3, 0x2]
    strb r4, [r3, 0x3]
    movs r2, 0x4
_080261CA:
    adds r0, r2, r3
    strb r4, [r0]
    adds r2, 0x1
    adds r1, r2, r3
    movs r0, 0xD2
    strb r0, [r1]
    adds r2, 0x1
    adds r0, r2, r3
    strb r4, [r0]
    adds r2, 0x1
    adds r1, r2, r3
    ldrb r0, [r1]
    mov r2, r12
    orrs r0, r2
    strb r0, [r1]
    ldr r2, _08026214 @ =gBattleMons
    ldr r4, _08026218 @ =gActiveBank
    ldrb r3, [r4]
    movs r0, 0x58
    muls r0, r3
    adds r0, r7, r0
    adds r1, r2, 0
    adds r1, 0x18
    adds r0, r1
    ldrb r0, [r0]
    lsls r0, 24
    asrs r0, 24
    mov r10, r2
    cmp r0, 0xC
    bne _08026220
_08026206:
    ldr r1, _0802621C @ =gBattleCommunication
    movs r0, 0x2
    strb r0, [r1, 0x5]
    mov r8, r1
    b _08026234
    .align 2, 0
_08026210: .4byte gBattleTextBuff2
_08026214: .4byte gBattleMons
_08026218: .4byte gActiveBank
_0802621C: .4byte gBattleCommunication
_08026220:
    movs r1, 0
    ldr r0, _080262B4 @ =gBankTarget
    ldrb r0, [r0]
    ldr r2, _080262B8 @ =gBattleCommunication
    mov r8, r2
    cmp r0, r3
    bne _08026230
    movs r1, 0x1
_08026230:
    mov r3, r8
    strb r1, [r3, 0x5]
_08026234:
    ldr r2, _080262BC @ =gActiveBank
    ldrb r0, [r2]
    movs r4, 0x58
    adds r1, r0, 0
    muls r1, r4
    adds r1, r7, r1
    mov r3, r10
    adds r3, 0x18
    adds r1, r3
    lsls r0, r6, 24
    asrs r0, 24
    ldrb r6, [r1]
    adds r0, r6
    strb r0, [r1]
    ldrb r0, [r2]
    muls r0, r4
    adds r0, r7, r0
    adds r1, r0, r3
    movs r0, 0
    ldrsb r0, [r1, r0]
    cmp r0, 0
    bge _08026264
    movs r0, 0
    strb r0, [r1]
_08026264:
    ldr r1, _080262BC @ =gActiveBank
    ldrb r0, [r1]
    muls r0, r4
    adds r0, r7, r0
    adds r1, r0, r3
    movs r0, 0
    ldrsb r0, [r1, r0]
    cmp r0, 0xC
    ble _0802627A
    movs r0, 0xC
    strb r0, [r1]
_0802627A:
    mov r2, r8
    ldrb r0, [r2, 0x5]
    cmp r0, 0x2
    bne _080262A2
    movs r3, 0x1
    ands r3, r5
    cmp r3, 0
    beq _08026294
    ldr r0, _080262C0 @ =gBattleMoveFlags
    ldrb r1, [r0]
    movs r2, 0x1
    orrs r1, r2
    strb r1, [r0]
_08026294:
    mov r4, r8
    ldrb r0, [r4, 0x5]
    cmp r0, 0x2
    bne _080262A2
    cmp r3, 0
    bne _080262A2
    b _08025F74
_080262A2:
    movs r0, 0
_080262A4:
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r1}
    bx r1
    .align 2, 0
_080262B4: .4byte gBankTarget
_080262B8: .4byte gBattleCommunication
_080262BC: .4byte gActiveBank
_080262C0: .4byte gBattleMoveFlags
        .syntax divided
	.code	16
.Lfe156:
	.size	 ChangeStatBuffs,.Lfe156-ChangeStatBuffs
	.align	2, 0
	.type	 atk89_statbuffchange,function
	.thumb_func
atk89_statbuffchange:
	push	{r4, r5, lr}
	ldr	r5, .L1741
	ldr	r2, [r5]
	ldrb	r3, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r0, .L1741+0x4
	ldr	r1, .L1741+0x8
	add	r0, r0, r1
	ldrb	r4, [r0]
	mov	r0, #0xf0
	and	r0, r0, r4
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0xf
	and	r1, r1, r4
	ldrb	r2, [r2, #0x1]
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1740	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, #0x6
	str	r0, [r5]
.L1740:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1742:
	.align	2, 0
.L1741:
	.word	gBattlescriptCurrInstr
	.word	gSharedMem
	.word	0x1601e
.Lfe157:
	.size	 atk89_statbuffchange,.Lfe157-atk89_statbuffchange
	.align	2, 0
	.type	 atk8A_normalisebuffs,function
	.thumb_func
atk8A_normalisebuffs:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r0, .L1754
	ldrb	r1, [r0]
	ldr	r0, .L1754+0x4
	mov	ip, r0
	cmp	r2, r1
	bge	.L1745	@cond_branch
	ldr	r0, .L1754+0x8
	mov	r4, #0x6
	add	r5, r1, #0
	mov	r7, #0x58
	add	r6, r0, #0
	add	r6, r6, #0x18
.L1747:
	add	r3, r2, #0x1
	mov	r1, #0x7
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r0, r6
	add	r0, r0, #0x7
.L1751:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1751	@cond_branch
	add	r2, r3, #0
	cmp	r2, r5
	blt	.L1747	@cond_branch
.L1745:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1755:
	.align	2, 0
.L1754:
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.Lfe158:
	.size	 atk8A_normalisebuffs,.Lfe158-atk8A_normalisebuffs
	.align	2, 0
	.type	 atk8B_setbide,function
	.thumb_func
atk8B_setbide:
	push	{r4, r5, lr}
	ldr	r4, .L1757
	ldr	r3, .L1757+0x4
	ldrb	r0, [r3]
	mov	r5, #0x58
	mov	r2, r0
	mul	r2, r2, r5
	add	r4, r4, #0x50
	add	r2, r2, r4
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L1757+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L1757+0xc
	ldrh	r1, [r1]
	mov	r2, #0x0
	strh	r1, [r0]
	ldr	r1, .L1757+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	str	r2, [r0]
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L1757+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1758:
	.align	2, 0
.L1757:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gLockedMove
	.word	gCurrentMove
	.word	gTakenDmg
	.word	gBattlescriptCurrInstr
.Lfe159:
	.size	 atk8B_setbide,.Lfe159-atk8B_setbide
	.align	2, 0
	.type	 atk8C_confuseifrepeatingattackends,function
	.thumb_func
atk8C_confuseifrepeatingattackends:
	push	{lr}
	ldr	r1, .L1761
	ldr	r0, .L1761+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1760	@cond_branch
	ldr	r1, .L1761+0x8
	mov	r0, #0x75
	strb	r0, [r1, #0x3]
.L1760:
	ldr	r1, .L1761+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1762:
	.align	2, 0
.L1761:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe160:
	.size	 atk8C_confuseifrepeatingattackends,.Lfe160-atk8C_confuseifrepeatingattackends
	.align	2, 0
	.type	 atk8D_setmultihit_counter,function
	.thumb_func
atk8D_setmultihit_counter:
	push	{r4, r5, lr}
	ldr	r0, .L1768
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x1]
	cmp	r1, #0
	beq	.L1764	@cond_branch
	ldr	r0, .L1768+0x4
	strb	r1, [r0]
	b	.L1765
.L1769:
	.align	2, 0
.L1768:
	.word	gBattlescriptCurrInstr
	.word	gMultiHitCounter
.L1764:
	ldr	r4, .L1770
	bl	Random
	mov	r5, #0x3
	and	r0, r0, r5
	strb	r0, [r4]
	cmp	r0, #0x1
	bls	.L1766	@cond_branch
	bl	Random
	and	r0, r0, r5
.L1766:
	add	r0, r0, #0x2
	strb	r0, [r4]
.L1765:
	ldr	r1, .L1770+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1771:
	.align	2, 0
.L1770:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.Lfe161:
	.size	 atk8D_setmultihit_counter,.Lfe161-atk8D_setmultihit_counter
	.align	2, 0
	.type	 atk8E_prepare_multihit,function
	.thumb_func
atk8E_prepare_multihit:
	push	{r4, lr}
	ldr	r1, .L1773
	ldr	r0, .L1773+0x4
	add	r2, r1, r0
	mov	r3, #0x0
	mov	r0, #0xfd
	strb	r0, [r2]
	ldr	r2, .L1773+0x8
	add	r0, r1, r2
	mov	r2, #0x1
	strb	r2, [r0]
	ldr	r4, .L1773+0xc
	add	r0, r1, r4
	strb	r2, [r0]
	add	r4, r4, #0x1
	add	r0, r1, r4
	strb	r2, [r0]
	ldr	r2, .L1773+0x10
	add	r0, r1, r2
	strb	r3, [r0]
	add	r4, r4, #0x2
	add	r1, r1, r4
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r1, .L1773+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1774:
	.align	2, 0
.L1773:
	.word	gSharedMem
	.word	0x160e0
	.word	0x160e1
	.word	0x160e2
	.word	0x160e4
	.word	gBattlescriptCurrInstr
.Lfe162:
	.size	 atk8E_prepare_multihit,.Lfe162-atk8E_prepare_multihit
	.align	2, 0
	.type	 sub_80264C0,function
	.thumb_func
sub_80264C0:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L1781
	ldr	r7, .L1781+0x4
	ldrb	r0, [r7]
	mov	r5, #0x58
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	add	r1, r1, #0x2a
	ldr	r4, .L1781+0x8
	ldrb	r3, [r4]
	mov	r0, r3
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L1776	@cond_branch
	ldr	r0, .L1781+0xc
	ldr	r2, .L1781+0x10
	add	r1, r3, r2
	add	r1, r1, r0
	ldr	r2, .L1781+0x14
	lsl	r0, r3, #0x1
	b	.L1780
.L1782:
	.align	2, 0
.L1781:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBankTarget
	.word	gSharedMem
	.word	0x16064
	.word	gBattlePartyID
.L1776:
	bl	Random
	mov	r3, #0xff
	and	r3, r3, r0
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r2, [r0]
	ldrb	r4, [r4]
	mov	r0, r4
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	add	r2, r2, r1
	mov	r0, r3
	mul	r0, r0, r2
	asr	r0, r0, #0x8
	add	r0, r0, #0x1
	lsr	r1, r1, #0x2
	cmp	r0, r1
	bhi	.L1778	@cond_branch
	ldr	r3, .L1783
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	mov	r0, #0x0
	b	.L1779
.L1784:
	.align	2, 0
.L1783:
	.word	gBattlescriptCurrInstr
.L1778:
	ldr	r0, .L1785
	ldr	r2, .L1785+0x4
	add	r1, r4, r2
	add	r1, r1, r0
	ldr	r2, .L1785+0x8
	lsl	r0, r4, #0x1
.L1780:
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L1785+0xc
	ldr	r0, .L1785+0x10
	str	r0, [r1]
	mov	r0, #0x1
.L1779:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1786:
	.align	2, 0
.L1785:
	.word	gSharedMem
	.word	0x16064
	.word	gBattlePartyID
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D90FC
.Lfe163:
	.size	 sub_80264C0,.Lfe163-sub_80264C0
	.align	2, 0
	.type	 atk8F_forcerandomswitch,function
	.thumb_func
atk8F_forcerandomswitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L1834
	ldrh	r1, [r4]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB18009
	b	.L1788	@long jump
.LCB18009:
	ldr	r5, .L1834+0x4
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	ldr	r1, .L1834+0x8
	mov	r8, r1
	cmp	r0, #0
	bne	.L1789	@cond_branch
	ldr	r2, .L1834+0xc
	mov	r8, r2
.L1789:
	ldrh	r1, [r4]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1791	@cond_branch
	mov	r7, #0x0
	mov	r6, #0x0
	ldrb	r0, [r5]
	bl	sub_803FC34
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_803FBFC
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1792	@cond_branch
	mov	r6, #0x3
.L1792:
	add	r5, r6, #0
	add	r0, r5, #0x3
	cmp	r5, r0
	bge	.L1799	@cond_branch
.L1796:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1795	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1795	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1795	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L1795:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r6, #0x3
	cmp	r5, r0
	blt	.L1796	@cond_branch
	b	.L1799
.L1835:
	.align	2, 0
.L1834:
	.word	gBattleTypeFlags
	.word	gBankTarget
	.word	gEnemyParty
	.word	gPlayerParty
.L1791:
	mov	r7, #0x0
	mov	r5, #0x0
.L1803:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r2, r8
	add	r4, r2, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1802	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1802	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1802	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L1802:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L1803	@cond_branch
.L1799:
	cmp	r7, #0x1
	bhi	.L1808	@cond_branch
	ldr	r0, .L1836
	ldrh	r1, [r0]
	mov	r0, #0x41
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L1807	@cond_branch
.L1808:
	cmp	r7, #0x2
	bhi	.L1806	@cond_branch
	ldr	r0, .L1836
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1806	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1806	@cond_branch
.L1807:
	ldr	r3, .L1836+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1833
.L1837:
	.align	2, 0
.L1836:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.L1806:
	bl	sub_80264C0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB18204
	b	.L1833	@long jump
.LCB18204:
	ldr	r0, .L1838
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1811	@cond_branch
.L1812:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1838+0x4
	ldrb	r0, [r0]
	bl	sub_803FC34
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_803FBFC
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1815	@cond_branch
	add	r0, r6, #0x3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L1814
.L1839:
	.align	2, 0
.L1838:
	.word	gBattleTypeFlags
	.word	gBankTarget
.L1815:
	add	r5, r6, #0
.L1814:
	ldr	r4, .L1840
	ldr	r0, .L1840+0x4
	ldrb	r2, [r0]
	lsl	r1, r2, #0x1
	add	r1, r1, r4
	lsl	r0, r5, #0x10
	lsr	r3, r0, #0x10
	ldrh	r1, [r1]
	cmp	r3, r1
	beq	.L1812	@cond_branch
	mov	r0, #0x2
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r3, r0
	beq	.L1812	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1812	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L1812	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1812	@cond_branch
	b	.L1819
.L1841:
	.align	2, 0
.L1840:
	.word	gBattlePartyID
	.word	gBankTarget
.L1811:
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1820	@cond_branch
	ldr	r6, .L1842
.L1821:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x6
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1842+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r6
	add	r2, r5, #0
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L1821	@cond_branch
	mov	r0, #0x2
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L1821	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r2, r8
	add	r4, r2, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1821	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L1821	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1821	@cond_branch
	b	.L1819
.L1843:
	.align	2, 0
.L1842:
	.word	gBattlePartyID
	.word	gBankTarget
.L1820:
	ldr	r6, .L1844
.L1827:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x6
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L1844+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L1827	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1827	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L1827	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1827	@cond_branch
.L1819:
	ldr	r0, .L1844+0x8
	ldr	r4, .L1844+0x4
	ldrb	r1, [r4]
	ldr	r2, .L1844+0xc
	add	r1, r1, r2
	add	r1, r1, r0
	strb	r5, [r1]
	bl	IsLinkDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1832	@cond_branch
	ldrb	r0, [r4]
	bl	sub_8012258
.L1832:
	ldrb	r0, [r4]
	add	r1, r5, #0
	mov	r2, #0x0
	bl	sub_8094B6C
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r1, r5, #0
	mov	r2, #0x1
	bl	sub_8094B6C
	b	.L1833
.L1845:
	.align	2, 0
.L1844:
	.word	gBattlePartyID
	.word	gBankTarget
	.word	gSharedMem
	.word	0x16068
.L1788:
	bl	sub_80264C0
.L1833:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe164:
	.size	 atk8F_forcerandomswitch,.Lfe164-atk8F_forcerandomswitch
	.align	2, 0
	.type	 atk90_conversion_type_change,function
	.thumb_func
atk90_conversion_type_change:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	ldr	r2, .L1877
	ldr	r3, .L1877+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r8, r2
	cmp	r0, #0
	beq	.L1848	@cond_branch
	mov	r5, #0x58
	add	r2, r1, #0
.L1850:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bhi	.L1848	@cond_branch
	lsl	r1, r6, #0x1
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L1850	@cond_branch
.L1848:
	mov	r3, #0x0
	cmp	r3, r6
	bcs	.L1853	@cond_branch
	ldr	r0, .L1877+0x8
	mov	sl, r0
	ldr	r5, .L1877
	mov	ip, r5
	ldr	r7, .L1877+0x4
	ldrb	r0, [r7]
	mov	r4, #0x58
	mov	r5, r0
	mul	r5, r5, r4
	mov	r0, #0xc
	add	r0, r0, ip
	mov	r9, r0
.L1855:
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrb	r2, [r0, #0x2]
	cmp	r2, #0x9
	bne	.L1856	@cond_branch
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L1858	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L1857	@cond_branch
.L1858:
	mov	r2, #0x7
	b	.L1856
.L1878:
	.align	2, 0
.L1877:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoves
.L1857:
	mov	r2, #0x0
.L1856:
	ldrb	r0, [r7]
	mul	r0, r0, r4
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L1854	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L1853	@cond_branch
.L1854:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r6
	bcc	.L1855	@cond_branch
.L1853:
	cmp	r3, r6
	bne	.L1862	@cond_branch
	ldr	r3, .L1879
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1863
.L1880:
	.align	2, 0
.L1879:
	.word	gBattlescriptCurrInstr
.L1862:
	mov	r7, #0x3
	ldr	r5, .L1881
	mov	r9, r5
.L1867:
	bl	Random
	add	r3, r0, #0
	and	r3, r3, r7
	cmp	r3, r6
	bcs	.L1867	@cond_branch
	ldr	r4, .L1881+0x4
	lsl	r1, r3, #0x1
	ldr	r3, .L1881+0x8
	ldrb	r2, [r3]
	mov	r0, #0x58
	mov	r5, r2
	mul	r5, r5, r0
	add	r1, r1, r5
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r2, [r0, #0x2]
	mov	r8, r4
	add	r4, r3, #0
	cmp	r2, #0x9
	bne	.L1866	@cond_branch
	mov	r0, r8
	add	r2, r5, r0
	add	r0, r2, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L1873	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L1872	@cond_branch
.L1873:
	mov	r2, #0x7
	b	.L1866
.L1882:
	.align	2, 0
.L1881:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBankAttacker
.L1872:
	mov	r2, #0x0
.L1866:
	ldrb	r0, [r4]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r5, [r1]
	cmp	r2, r5
	beq	.L1867	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L1867	@cond_branch
	strb	r2, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r0, r0, #0x22
	strb	r2, [r0]
	ldr	r1, .L1883
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L1883+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1863:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1884:
	.align	2, 0
.L1883:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.Lfe165:
	.size	 atk90_conversion_type_change,.Lfe165-atk90_conversion_type_change
	.align	2, 0
	.type	 atk91_givepaydaymoney,function
	.thumb_func
atk91_givepaydaymoney:
	push	{r4, lr}
	ldr	r0, .L1888
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1886	@cond_branch
	ldr	r4, .L1888+0x4
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1886	@cond_branch
	ldr	r0, .L1888+0x8
	ldrh	r2, [r4]
	ldr	r1, .L1888+0xc
	ldr	r3, .L1888+0x10
	add	r1, r1, r3
	ldrb	r1, [r1]
	mul	r1, r1, r2
	bl	AddMoney
	ldr	r1, .L1888+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	ldrh	r2, [r4]
	strb	r2, [r1, #0x4]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r2
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	ldr	r4, .L1888+0x18
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	b_movescr_stack_push
	ldr	r0, .L1888+0x1c
	str	r0, [r4]
	b	.L1887
.L1889:
	.align	2, 0
.L1888:
	.word	gBattleTypeFlags
	.word	gPaydayMoney
	.word	gSaveBlock1+0x490
	.word	gSharedMem
	.word	0x16056
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	gUnknown_081D95DB
.L1886:
	ldr	r1, .L1890
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L1887:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1891:
	.align	2, 0
.L1890:
	.word	gBattlescriptCurrInstr
.Lfe166:
	.size	 atk91_givepaydaymoney,.Lfe166-atk91_givepaydaymoney
	.align	2, 0
	.type	 atk92_setlightscreen,function
	.thumb_func
atk92_setlightscreen:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1898
	ldrb	r0, [r4]
	bl	GetBankIdentity
	ldr	r6, .L1898+0x4
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r1, [r1]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1893	@cond_branch
	ldr	r2, .L1898+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1898+0xc
	mov	r0, #0x0
	b	.L1897
.L1899:
	.align	2, 0
.L1898:
	.word	gBankAttacker
	.word	gSideAffecting
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L1893:
	ldrb	r0, [r4]
	bl	GetBankIdentity
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBankIdentity
	ldr	r2, .L1900
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strb	r1, [r0, #0x1]
	ldr	r0, .L1900+0x4
	ldrh	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1895	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMons
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L1895	@cond_branch
	ldr	r1, .L1900+0x8
	mov	r0, #0x4
	b	.L1897
.L1901:
	.align	2, 0
.L1900:
	.word	gSideTimer
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L1895:
	ldr	r1, .L1902
	mov	r0, #0x3
.L1897:
	strb	r0, [r1, #0x5]
	ldr	r1, .L1902+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1903:
	.align	2, 0
.L1902:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe167:
	.size	 atk92_setlightscreen,.Lfe167-atk92_setlightscreen
	.align	2, 0
	.type	 atk93_ko_move,function
	.thumb_func
atk93_ko_move:
	.syntax unified
        push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    ldr r7, _08026BA8 @ =gBattleMons
    ldr r6, _08026BAC @ =gBankTarget
    ldrb r2, [r6]
    movs r5, 0x58
    adds r0, r2, 0
    muls r0, r5
    adds r1, r0, r7
    ldrh r0, [r1, 0x2E]
    cmp r0, 0xAF
    bne _08026BB4
    ldr r1, _08026BB0 @ =gEnigmaBerries
    lsls r0, r2, 3
    subs r0, r2
    lsls r0, 2
    adds r0, r1
    ldrb r4, [r0, 0x7]
    ldrb r6, [r0, 0x1A]
    b _08026BCE
    .align 2, 0
_08026BA8: .4byte gBattleMons
_08026BAC: .4byte gBankTarget
_08026BB0: .4byte gEnigmaBerries
_08026BB4:
    ldrh r0, [r1, 0x2E]
    bl ItemId_GetHoldEffect
    lsls r0, 24
    lsrs r4, r0, 24
    ldrb r0, [r6]
    muls r0, r5
    adds r0, r7
    ldrh r0, [r0, 0x2E]
    bl ItemId_GetHoldEffectParam
    lsls r0, 24
    lsrs r6, r0, 24
_08026BCE:
    ldr r1, _08026C4C @ =gStringBank
    ldr r5, _08026C50 @ =gBankTarget
    ldrb r0, [r5]
    strb r0, [r1]
    cmp r4, 0x27
    bne _08026C0C
    bl Random
    lsls r0, 16
    lsrs r0, 16
    movs r1, 0x64
    bl __umodsi3
    lsls r0, 16
    lsrs r0, 16
    cmp r0, r6
    bcs _08026C0C
    ldrb r0, [r5]
    movs r1, 0x27
    bl RecordItemBattle
    ldr r2, _08026C54 @ =gSpecialStatuses
    ldrb r1, [r5]
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 2
    adds r0, r2
    ldrb r1, [r0]
    movs r2, 0x80
    orrs r1, r2
    strb r1, [r0]
_08026C0C:
    ldr r0, _08026C58 @ =gBattleMons
    mov r8, r0
    ldr r1, _08026C50 @ =gBankTarget
    ldrb r2, [r1]
    movs r6, 0x58
    adds r0, r2, 0
    muls r0, r6
    mov r3, r8
    adds r5, r0, r3
    adds r0, r5, 0
    adds r0, 0x20
    ldrb r3, [r0]
    mov r10, r8
    cmp r3, 0x5
    bne _08026C6C
    ldr r2, _08026C5C @ =gBattleMoveFlags
    ldrb r0, [r2]
    movs r1, 0x1
    orrs r0, r1
    strb r0, [r2]
    ldr r0, _08026C60 @ =gLastUsedAbility
    strb r3, [r0]
    ldr r1, _08026C64 @ =gBattlescriptCurrInstr
    ldr r0, _08026C68 @ =gUnknown_081D9826
    str r0, [r1]
    ldr r1, _08026C50 @ =gBankTarget
    ldrb r0, [r1]
    movs r1, 0x5
    bl RecordAbilityBattle
    b _08026E40
    .align 2, 0
_08026C4C: .4byte gStringBank
_08026C50: .4byte gBankTarget
_08026C54: .4byte gSpecialStatuses
_08026C58: .4byte gBattleMons
_08026C5C: .4byte gBattleMoveFlags
_08026C60: .4byte gLastUsedAbility
_08026C64: .4byte gBattlescriptCurrInstr
_08026C68: .4byte gUnknown_081D9826
_08026C6C:
    ldr r1, _08026CE0 @ =gStatuses3
    lsls r0, r2, 2
    adds r0, r1
    ldr r0, [r0]
    movs r1, 0x18
    ands r0, r1
    cmp r0, 0
    bne _08026CF4
    ldr r1, _08026CE4 @ =gBattleMoves
    ldr r0, _08026CE8 @ =gCurrentMove
    ldrh r0, [r0]
    lsls r2, r0, 1
    adds r2, r0
    lsls r2, 2
    adds r2, r1
    ldr r7, _08026CEC @ =gBankAttacker
    ldrb r0, [r7]
    muls r0, r6
    add r0, r10
    adds r0, 0x2A
    ldrb r0, [r0]
    adds r1, r5, 0
    adds r1, 0x2A
    ldrb r1, [r1]
    subs r0, r1
    ldrb r2, [r2, 0x3]
    adds r0, r2
    lsls r0, 16
    lsrs r4, r0, 16
    bl Random
    lsls r0, 16
    lsrs r0, 16
    movs r1, 0x64
    bl __umodsi3
    lsls r0, 16
    lsrs r0, 16
    adds r0, 0x1
    cmp r0, r4
    bge _08026CDC
    ldrb r0, [r7]
    adds r1, r0, 0
    muls r1, r6
    add r1, r10
    adds r1, 0x2A
    ldr r2, _08026CF0 @ =gBankTarget
    ldrb r0, [r2]
    muls r0, r6
    add r0, r10
    adds r0, 0x2A
    ldrb r1, [r1]
    movs r4, 0x1
    ldrb r0, [r0]
    cmp r1, r0
    bcs _08026D20
_08026CDC:
    mov r10, r8
    b _08026DE0
    .align 2, 0
_08026CE0: .4byte gStatuses3
_08026CE4: .4byte gBattleMoves
_08026CE8: .4byte gCurrentMove
_08026CEC: .4byte gBankAttacker
_08026CF0: .4byte gBankTarget
_08026CF4:
    ldr r0, _08026D4C @ =gDisableStructs
    lsls r1, r2, 3
    subs r1, r2
    lsls r1, 2
    adds r1, r0
    ldr r2, _08026D50 @ =gBankAttacker
    ldrb r0, [r1, 0x15]
    movs r4, 0
    ldrb r3, [r2]
    cmp r0, r3
    bne _08026D20
    ldrb r0, [r2]
    muls r0, r6
    add r0, r10
    adds r0, 0x2A
    adds r1, r5, 0
    adds r1, 0x2A
    ldrb r0, [r0]
    ldrb r1, [r1]
    cmp r0, r1
    bcc _08026D20
    movs r4, 0x1
_08026D20:
    cmp r4, 0
    beq _08026DE0
    ldr r0, _08026D54 @ =gProtectStructs
    ldr r1, _08026D58 @ =gBankTarget
    ldrb r2, [r1]
    lsls r1, r2, 4
    adds r1, r0
    ldrb r0, [r1]
    lsls r0, 30
    cmp r0, 0
    bge _08026D64
    ldr r1, _08026D5C @ =gBattleMoveDamage
    movs r0, 0x58
    muls r0, r2
    add r0, r10
    ldrh r0, [r0, 0x28]
    subs r0, 0x1
    str r0, [r1]
    ldr r2, _08026D60 @ =gBattleMoveFlags
    ldrb r0, [r2]
    movs r1, 0x40
    b _08026DC6
    .align 2, 0
_08026D4C: .4byte gDisableStructs
_08026D50: .4byte gBankAttacker
_08026D54: .4byte gProtectStructs
_08026D58: .4byte gBankTarget
_08026D5C: .4byte gBattleMoveDamage
_08026D60: .4byte gBattleMoveFlags
_08026D64:
    ldr r0, _08026DA0 @ =gSpecialStatuses
    lsls r1, r2, 2
    adds r1, r2
    lsls r1, 2
    adds r1, r0
    ldrb r0, [r1]
    lsrs r0, 7
    cmp r0, 0
    beq _08026DB4
    ldr r1, _08026DA4 @ =gBattleMoveDamage
    movs r3, 0x58
    adds r0, r2, 0
    muls r0, r3
    add r0, r10
    ldrh r0, [r0, 0x28]
    subs r0, 0x1
    str r0, [r1]
    ldr r2, _08026DA8 @ =gBattleMoveFlags
    ldrb r0, [r2]
    movs r1, 0x80
    orrs r0, r1
    strb r0, [r2]
    ldr r1, _08026DAC @ =gLastUsedItem
    ldr r2, _08026DB0 @ =gBankTarget
    ldrb r0, [r2]
    muls r0, r3
    add r0, r10
    ldrh r0, [r0, 0x2E]
    strh r0, [r1]
    b _08026DCA
    .align 2, 0
_08026DA0: .4byte gSpecialStatuses
_08026DA4: .4byte gBattleMoveDamage
_08026DA8: .4byte gBattleMoveFlags
_08026DAC: .4byte gLastUsedItem
_08026DB0: .4byte gBankTarget
_08026DB4:
    ldr r1, _08026DD4 @ =gBattleMoveDamage
    movs r0, 0x58
    muls r0, r2
    add r0, r10
    ldrh r0, [r0, 0x28]
    str r0, [r1]
    ldr r2, _08026DD8 @ =gBattleMoveFlags
    ldrb r0, [r2]
    movs r1, 0x10
_08026DC6:
    orrs r0, r1
    strb r0, [r2]
_08026DCA:
    ldr r1, _08026DDC @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x5
    str r0, [r1]
    b _08026E40
    .align 2, 0
_08026DD4: .4byte gBattleMoveDamage
_08026DD8: .4byte gBattleMoveFlags
_08026DDC: .4byte gBattlescriptCurrInstr
_08026DE0:
    ldr r2, _08026E10 @ =gBattleMoveFlags
    ldrb r0, [r2]
    movs r1, 0x1
    orrs r0, r1
    strb r0, [r2]
    ldr r0, _08026E14 @ =gBankAttacker
    ldrb r0, [r0]
    movs r2, 0x58
    adds r1, r0, 0
    muls r1, r2
    add r1, r10
    adds r1, 0x2A
    ldr r3, _08026E18 @ =gBankTarget
    ldrb r0, [r3]
    muls r0, r2
    add r0, r10
    adds r0, 0x2A
    ldrb r1, [r1]
    ldrb r0, [r0]
    cmp r1, r0
    bcc _08026E20
    ldr r1, _08026E1C @ =gBattleCommunication
    movs r0, 0
    b _08026E24
    .align 2, 0
_08026E10: .4byte gBattleMoveFlags
_08026E14: .4byte gBankAttacker
_08026E18: .4byte gBankTarget
_08026E1C: .4byte gBattleCommunication
_08026E20:
    ldr r1, _08026E50 @ =gBattleCommunication
    movs r0, 0x1
_08026E24:
    strb r0, [r1, 0x5]
    ldr r3, _08026E54 @ =gBattlescriptCurrInstr
    ldr r2, [r3]
    ldrb r1, [r2, 0x1]
    ldrb r0, [r2, 0x2]
    lsls r0, 8
    orrs r1, r0
    ldrb r0, [r2, 0x3]
    lsls r0, 16
    orrs r1, r0
    ldrb r0, [r2, 0x4]
    lsls r0, 24
    orrs r1, r0
    str r1, [r3]
_08026E40:
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08026E50: .4byte gBattleCommunication
_08026E54: .4byte gBattlescriptCurrInstr
        .syntax divided
	.code	16
.Lfe168:
	.size	 atk93_ko_move,.Lfe168-atk93_ko_move
	.align	2, 0
	.type	 atk94_gethalfcurrentenemyhp,function
	.thumb_func
atk94_gethalfcurrentenemyhp:
	push	{lr}
	ldr	r3, .L1907
	ldr	r2, .L1907+0x4
	ldr	r0, .L1907+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	lsr	r0, r0, #0x1
	str	r0, [r3]
	cmp	r0, #0
	bne	.L1906	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L1906:
	ldr	r1, .L1907+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1908:
	.align	2, 0
.L1907:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.Lfe169:
	.size	 atk94_gethalfcurrentenemyhp,.Lfe169-atk94_gethalfcurrentenemyhp
	.align	2, 0
	.type	 atk95_setsandstorm,function
	.thumb_func
atk95_setsandstorm:
	push	{lr}
	ldr	r2, .L1912
	ldrh	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1910	@cond_branch
	ldr	r2, .L1912+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1912+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L1911
.L1913:
	.align	2, 0
.L1912:
	.word	gBattleWeather
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L1910:
	mov	r0, #0x8
	strh	r0, [r2]
	ldr	r1, .L1914
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	ldr	r0, .L1914+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L1911:
	ldr	r1, .L1914+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1915:
	.align	2, 0
.L1914:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe170:
	.size	 atk95_setsandstorm,.Lfe170-atk95_setsandstorm
	.align	2, 0
	.type	 atk96_weatherdamage,function
	.thumb_func
atk96_weatherdamage:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB19147
	b	.L1917	@long jump
.LCB19147:
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB19158
	b	.L1917	@long jump
.LCB19158:
	ldr	r2, .L1929
	ldrh	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	add	r4, r2, #0
	ldr	r5, .L1929+0x4
	cmp	r0, #0
	beq	.L1918	@cond_branch
	ldr	r0, .L1929+0x8
	ldrb	r2, [r5]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r3, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L1919	@cond_branch
	cmp	r0, #0x8
	beq	.L1919	@cond_branch
	cmp	r0, #0x4
	beq	.L1919	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L1919	@cond_branch
	cmp	r0, #0x8
	beq	.L1919	@cond_branch
	cmp	r0, #0x4
	beq	.L1919	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x8
	beq	.L1919	@cond_branch
	ldr	r0, .L1929+0xc
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1919	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1919	@cond_branch
	ldr	r1, .L1929+0x10
	ldrh	r0, [r3, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L1918	@cond_branch
	mov	r0, #0x1
	b	.L1928
.L1930:
	.align	2, 0
.L1929:
	.word	gBattleWeather
	.word	gBankAttacker
	.word	gBattleMons
	.word	gStatuses3
	.word	gBattleMoveDamage
.L1919:
	ldr	r1, .L1931
	mov	r0, #0x0
.L1928:
	str	r0, [r1]
.L1918:
	ldrh	r1, [r4]
	mov	r4, #0x80
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1926	@cond_branch
	ldr	r1, .L1931+0x4
	ldrb	r3, [r5]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r2, r0, r1
	add	r0, r2, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L1923	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L1923	@cond_branch
	ldr	r0, .L1931+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L1923	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1923	@cond_branch
	ldr	r1, .L1931
	ldrh	r0, [r2, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L1926	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
	b	.L1926
.L1932:
	.align	2, 0
.L1931:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gStatuses3
.L1923:
	ldr	r1, .L1933
	mov	r0, #0x0
	str	r0, [r1]
	b	.L1926
.L1934:
	.align	2, 0
.L1933:
	.word	gBattleMoveDamage
.L1917:
	ldr	r1, .L1935
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r5, .L1935+0x4
.L1926:
	ldr	r0, .L1935+0x8
	ldrb	r1, [r0]
	ldr	r2, .L1935+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1927	@cond_branch
	ldr	r1, .L1935
	mov	r0, #0x0
	str	r0, [r1]
.L1927:
	ldr	r1, .L1935+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1936:
	.align	2, 0
.L1935:
	.word	gBattleMoveDamage
	.word	gBankAttacker
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe171:
	.size	 atk96_weatherdamage,.Lfe171-atk96_weatherdamage
	.align	2, 0
	.type	 atk97_try_infatuation,function
	.thumb_func
atk97_try_infatuation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L1949
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1938	@cond_branch
	ldr	r1, .L1949+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1949+0x8
	b	.L1947
.L1950:
	.align	2, 0
.L1949:
	.word	gBankAttacker
	.word	gBattlePartyID
	.word	gPlayerParty
.L1938:
	ldr	r1, .L1951
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1951+0x4
.L1947:
	add	r5, r1, r0
	ldr	r4, .L1951+0x8
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1940	@cond_branch
	ldr	r1, .L1951
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1951+0xc
	b	.L1948
.L1952:
	.align	2, 0
.L1951:
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gBankTarget
	.word	gPlayerParty
.L1940:
	ldr	r1, .L1953
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L1953+0x4
.L1948:
	add	r4, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	mov	r9, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r7, r0, #0
	ldr	r5, .L1953+0x8
	ldrb	r0, [r5]
	mov	r6, #0x58
	mul	r0, r0, r6
	ldr	r1, .L1953+0xc
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r2, [r0]
	cmp	r2, #0xc
	bne	.L1942	@cond_branch
	ldr	r1, .L1953+0x10
	ldr	r0, .L1953+0x14
	str	r0, [r1]
	ldr	r0, .L1953+0x18
	strb	r2, [r0]
	ldrb	r0, [r5]
	mov	r1, #0xc
	bl	RecordAbilityBattle
	b	.L1943
.L1954:
	.align	2, 0
.L1953:
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gBankTarget
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ObliviousPreventsAttraction
	.word	gLastUsedAbility
.L1942:
	mov	r0, sl
	mov	r1, r9
	bl	GetGenderFromSpeciesAndPersonality
	add	r4, r0, #0
	mov	r0, r8
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L1945	@cond_branch
	ldr	r1, .L1955
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1955+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1945	@cond_branch
	mov	r0, r2
	mul	r0, r0, r6
	ldr	r4, .L1955+0x8
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1945	@cond_branch
	mov	r0, sl
	mov	r1, r9
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1945	@cond_branch
	mov	r0, r8
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L1944	@cond_branch
.L1945:
	ldr	r3, .L1955+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1943
.L1956:
	.align	2, 0
.L1955:
	.word	gStatuses3
	.word	0x400c0
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L1944:
	ldrb	r0, [r5]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r4
	ldr	r1, .L1957
	ldr	r0, .L1957+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L1957+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1943:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1958:
	.align	2, 0
.L1957:
	.word	gBitTable
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe172:
	.size	 atk97_try_infatuation,.Lfe172-atk97_try_infatuation
	.align	2, 0
	.type	 atk98_status_icon_update,function
	.thumb_func
atk98_status_icon_update:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1966
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1959	@cond_branch
	ldr	r5, .L1966+0x4
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x4
	beq	.L1961	@cond_branch
	bl	GetBattleBank
	ldr	r4, .L1966+0x8
	strb	r0, [r4]
	ldr	r3, .L1966+0xc
	ldrb	r1, [r4]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	b	.L1959
.L1967:
	.align	2, 0
.L1966:
	.word	gBattleExecBuffer
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
.L1961:
	ldr	r4, .L1968
	ldr	r5, .L1968+0x4
	ldrb	r0, [r5]
	strb	r0, [r4]
	ldr	r6, .L1968+0x8
	ldrb	r1, [r6]
	ldr	r7, .L1968+0xc
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1963	@cond_branch
	ldr	r3, .L1968+0x10
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L1963:
	ldr	r0, .L1968+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1964	@cond_branch
	ldrb	r0, [r5]
	bl	GetBankIdentity
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankByPlayerAI
	strb	r0, [r4]
	ldrb	r1, [r6]
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1964	@cond_branch
	ldr	r3, .L1968+0x10
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L1964:
	ldr	r1, .L1968+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1959:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1969:
	.align	2, 0
.L1968:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.Lfe173:
	.size	 atk98_status_icon_update,.Lfe173-atk98_status_icon_update
	.align	2, 0
	.type	 atk99_setmist,function
	.thumb_func
atk99_setmist:
	push	{r4, r5, r6, lr}
	ldr	r6, .L1973
	ldr	r4, .L1973+0x4
	ldrb	r0, [r4]
	bl	GetBankIdentity
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L1971	@cond_branch
	ldr	r2, .L1973+0x8
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L1973+0xc
	strb	r5, [r0, #0x5]
	b	.L1972
.L1974:
	.align	2, 0
.L1973:
	.word	gSideTimer
	.word	gBankAttacker
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L1971:
	ldrb	r0, [r4]
	bl	GetBankIdentity
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	strb	r1, [r0, #0x2]
	ldrb	r0, [r4]
	bl	GetBankIdentity
	ldr	r2, .L1975
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	mov	r3, #0x0
	orr	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, .L1975+0x4
	strb	r3, [r0, #0x5]
.L1972:
	ldr	r1, .L1975+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1976:
	.align	2, 0
.L1975:
	.word	gSideAffecting
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe174:
	.size	 atk99_setmist,.Lfe174-atk99_setmist
	.align	2, 0
	.type	 atk9A_set_focusenergy,function
	.thumb_func
atk9A_set_focusenergy:
	push	{lr}
	ldr	r1, .L1980
	ldr	r0, .L1980+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0xd
	add	r2, r1, #0
	and	r2, r2, r3
	cmp	r2, #0
	beq	.L1978	@cond_branch
	ldr	r2, .L1980+0x8
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1980+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L1979
.L1981:
	.align	2, 0
.L1980:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L1978:
	orr	r1, r1, r3
	str	r1, [r0]
	ldr	r0, .L1982
	strb	r2, [r0, #0x5]
.L1979:
	ldr	r1, .L1982+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1983:
	.align	2, 0
.L1982:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe175:
	.size	 atk9A_set_focusenergy,.Lfe175-atk9A_set_focusenergy
	.align	2, 0
	.type	 atk9B_transformdataexecution,function
	.thumb_func
atk9B_transformdataexecution:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L2002
	ldr	r2, .L2002+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L2002+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r7, .L2002+0xc
	ldr	r0, .L2002+0x10
	mov	ip, r0
	ldrb	r1, [r0]
	mov	r6, #0x58
	mov	r0, r1
	mul	r0, r0, r6
	add	r5, r7, #0
	add	r5, r5, #0x50
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r4, #0x80
	lsl	r4, r4, #0xe
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L1986	@cond_branch
	ldr	r0, .L2002+0x14
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	ldr	r0, .L2002+0x18
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1985	@cond_branch
.L1986:
	ldr	r2, .L2002+0x1c
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2002+0x20
	mov	r0, #0x1
	b	.L2000
.L2003:
	.align	2, 0
.L2002:
	.word	gUnknown_02024BE8
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gBankTarget
	.word	gStatuses3
	.word	0x400c0
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L1985:
	ldr	r3, .L2004
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	ldr	r0, [r1]
	orr	r0, r0, r4
	str	r0, [r1]
	ldr	r4, .L2004+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x4]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0xb]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, ip
	ldrb	r1, [r2]
	mul	r1, r1, r6
	add	r2, r7, #0
	add	r2, r2, #0x48
	add	r1, r1, r2
	ldr	r1, [r1]
	str	r1, [r0]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x18]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1, #0x18]
	ldr	r1, .L2004+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	mov	r2, ip
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r0, [r3]
	mul	r0, r0, r6
	add	r5, r0, r7
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r2, r0, r7
	mov	r4, #0x0
	add	r6, r3, #0
	ldr	r0, .L2004+0xc
	mov	r8, r0
.L1991:
	add	r0, r5, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x23
	bls	.L1991	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L2004+0x10
	ldr	r3, .L2004+0x14
	add	r5, r3, #0
	add	r5, r5, #0x18
.L1996:
	lsl	r1, r4, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x4]
	cmp	r1, #0x4
	bhi	.L1997	@cond_branch
	add	r0, r4, r2
	add	r0, r0, r5
	b	.L2001
.L2005:
	.align	2, 0
.L2004:
	.word	gBankAttacker
	.word	gDisableStructs
	.word	gBattleTextBuff1
	.word	gActiveBank
	.word	gBattleMoves
	.word	gBattleMons+0xc
.L1997:
	add	r0, r4, r2
	add	r0, r0, r5
	mov	r1, #0x5
.L2001:
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1996	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r8
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	EmitResetActionMoveSelection
	mov	r2, r8
	ldrb	r0, [r2]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2006
	mov	r0, #0x0
.L2000:
	strb	r0, [r1, #0x5]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2007:
	.align	2, 0
.L2006:
	.word	gBattleCommunication
.Lfe176:
	.size	 atk9B_transformdataexecution,.Lfe176-atk9B_transformdataexecution
	.align	2, 0
	.type	 atk9C_set_substitute,function
	.thumb_func
atk9C_set_substitute:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L2013
	ldr	r6, .L2013+0x4
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r3, r0, r7
	ldrh	r0, [r3, #0x2c]
	lsr	r1, r0, #0x2
	add	r2, r1, #0
	cmp	r1, #0
	bne	.L2009	@cond_branch
	mov	r2, #0x1
.L2009:
	ldrh	r0, [r3, #0x28]
	cmp	r0, r2
	bhi	.L2010	@cond_branch
	ldr	r1, .L2013+0x8
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r1, .L2013+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2011
.L2014:
	.align	2, 0
.L2013:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gBattleCommunication
.L2010:
	ldr	r4, .L2015
	str	r1, [r4]
	cmp	r1, #0
	bne	.L2012	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L2012:
	ldrb	r0, [r6]
	mov	r2, r0
	mul	r2, r2, r5
	add	r3, r7, #0
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	orr	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r3
	ldr	r0, [r1]
	ldr	r2, .L2015+0x4
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r2, .L2015+0x8
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r4]
	mov	r2, #0x0
	strb	r1, [r0, #0xa]
	ldr	r0, .L2015+0xc
	strb	r2, [r0, #0x5]
	ldr	r2, .L2015+0x10
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	orr	r0, r0, r1
	str	r0, [r2]
.L2011:
	ldr	r1, .L2015+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2016:
	.align	2, 0
.L2015:
	.word	gBattleMoveDamage
	.word	0xffff1fff
	.word	gDisableStructs
	.word	gBattleCommunication
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
.Lfe177:
	.size	 atk9C_set_substitute,.Lfe177-atk9C_set_substitute
	.align	2, 0
	.type	 IsMoveUncopyable,function
	.thumb_func
IsMoveUncopyable:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r3, #0x0
	ldr	r0, .L2025
	ldrh	r1, [r0]
	ldr	r4, .L2025+0x4
	add	r5, r0, #0
	cmp	r1, r4
	beq	.L2019	@cond_branch
	cmp	r1, r2
	beq	.L2019	@cond_branch
	add	r1, r5, #0
.L2020:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	ldrh	r0, [r1]
	cmp	r0, r4
	beq	.L2019	@cond_branch
	cmp	r0, r2
	bne	.L2020	@cond_branch
.L2019:
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L2025+0x4
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L2026:
	.align	2, 0
.L2025:
	.word	sUnknown_081FACFE
	.word	0xfffe
.Lfe178:
	.size	 IsMoveUncopyable,.Lfe178-IsMoveUncopyable
	.align	2, 0
	.type	 atk9D_copyattack,function
	.thumb_func
atk9D_copyattack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L2041
	ldr	r1, .L2041+0x4
	add	r7, r1, #0
	strh	r7, [r0]
	ldr	r5, .L2041+0x8
	ldr	r6, .L2041+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	bl	IsMoveUncopyable
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2029	@cond_branch
	ldr	r3, .L2041+0x10
	ldr	r2, .L2041+0x14
	ldrb	r1, [r2]
	mov	r0, #0x58
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r1, r1, r0
	mov	ip, r3
	mov	r9, r2
	cmp	r1, #0
	bne	.L2029	@cond_branch
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L2029	@cond_branch
	cmp	r1, r7
	bne	.L2028	@cond_branch
.L2029:
	ldr	r3, .L2041+0x18
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2030
.L2042:
	.align	2, 0
.L2041:
	.word	gUnknown_02024BE8
	.word	0xffff
	.word	gLastUsedMove
	.word	gBankTarget
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.L2028:
	mov	r2, #0x0
	mov	r3, ip
	add	r3, r3, #0xc
	add	r0, r4, r3
	ldrh	r0, [r0]
	ldr	r4, .L2043
	mov	sl, r4
	cmp	r0, r1
	beq	.L2032	@cond_branch
	mov	r8, r3
	add	r7, r5, #0
	add	r5, r6, #0
	mov	r4, r9
	mov	r3, #0x58
.L2033:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L2032	@cond_branch
	lsl	r1, r2, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r1, [r1]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L2033	@cond_branch
.L2032:
	cmp	r2, #0x4
	bne	.L2037	@cond_branch
	ldr	r5, .L2043+0x4
	ldrb	r1, [r5]
	lsl	r1, r1, #0x1
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r1, r1, r0
	mov	r0, ip
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r2, .L2043+0x8
	ldr	r3, .L2043+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r4, .L2043+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r4, [r0, #0x4]
	cmp	r4, #0x4
	bhi	.L2038	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mul	r0, r0, r6
	ldrb	r1, [r5]
	add	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x24
	add	r0, r0, r1
	strb	r4, [r0]
	b	.L2039
.L2044:
	.align	2, 0
.L2043:
	.word	gBattlescriptCurrInstr
	.word	gCurrMovePos
	.word	gLastUsedMove
	.word	gBankTarget
	.word	gBattleMoves
.L2038:
	mov	r4, r9
	ldrb	r0, [r4]
	mul	r0, r0, r6
	ldrb	r1, [r5]
	add	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x24
	add	r0, r0, r1
	mov	r1, #0x5
	strb	r1, [r0]
.L2039:
	ldr	r1, .L2045
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L2045+0x4
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r4, [r2, #0x18]
	lsr	r3, r4, #0x4
	ldr	r1, .L2045+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	orr	r1, r1, r3
	lsl	r1, r1, #0x4
	mov	r0, #0xf
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r2, #0x18]
	mov	r4, sl
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L2030
.L2046:
	.align	2, 0
.L2045:
	.word	gBattleTextBuff1
	.word	gDisableStructs
	.word	gBitTable
.L2037:
	mov	r0, sl
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r2, sl
	str	r1, [r2]
.L2030:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe179:
	.size	 atk9D_copyattack,.Lfe179-atk9D_copyattack
	.align	2, 0
	.type	 atk9E_metronome,function
	.thumb_func
atk9E_metronome:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r8
    push {r7}
    ldr r7, _08027938 @ =gCurrentMove
    movs r6, 0xB1
    lsls r6, 1
    ldr r5, _0802793C @ =sUnknown_081FACFE
    ldr r0, _08027940 @ =gBattlescriptCurrInstr
    mov r8, r0
_080278CA:
    bl Random
    ldr r2, _08027944 @ =0x000001ff
    adds r1, r2, 0
    ands r0, r1
    adds r0, 0x1
    strh r0, [r7]
    cmp r0, r6
    bhi _080278CA
    movs r0, 0x3
_080278DE:
    subs r0, 0x1
    cmp r0, 0
    bge _080278DE
    ldr r4, _08027938 @ =gCurrentMove
    ldrh r2, [r4]
    ldr r3, _08027948 @ =0x0000ffff
    subs r0, r5, 0x2
_080278EC:
    adds r0, 0x2
    ldrh r1, [r0]
    cmp r1, r2
    beq _080278F8
    cmp r1, r3
    bne _080278EC
_080278F8:
    ldr r0, _08027948 @ =0x0000ffff
    cmp r1, r0
    bne _080278CA
    ldr r2, _0802794C @ =gHitMarker
    ldr r0, [r2]
    ldr r1, _08027950 @ =0xfffffbff
    ands r0, r1
    str r0, [r2]
    ldr r3, _08027954 @ =gBattleScriptsEffectsTable
    ldr r2, _08027958 @ =gBattleMoves
    ldrh r1, [r4]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r2
    ldrb r0, [r0]
    lsls r0, 2
    adds r0, r3
    ldr r0, [r0]
    mov r1, r8
    str r0, [r1]
    ldrh r0, [r4]
    movs r1, 0
    bl GetMoveTarget
    ldr r1, _0802795C @ =gBankTarget
    strb r0, [r1]
    pop {r3}
    mov r8, r3
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08027938: .4byte gCurrentMove
_0802793C: .4byte sUnknown_081FACFE
_08027940: .4byte gBattlescriptCurrInstr
_08027944: .4byte 0x000001ff
_08027948: .4byte 0x0000ffff
_0802794C: .4byte gHitMarker
_08027950: .4byte 0xfffffbff
_08027954: .4byte gBattleScriptsEffectsTable
_08027958: .4byte gBattleMoves
_0802795C: .4byte gBankTarget
        .syntax divided
	.code	16
.Lfe180:
	.size	 atk9E_metronome,.Lfe180-atk9E_metronome
	.align	2, 0
	.type	 atk9F_dmgtolevel,function
	.thumb_func
atk9F_dmgtolevel:
	ldr	r3, .L2049
	ldr	r2, .L2049+0x4
	ldr	r0, .L2049+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	str	r0, [r3]
	ldr	r1, .L2049+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2050:
	.align	2, 0
.L2049:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe181:
	.size	 atk9F_dmgtolevel,.Lfe181-atk9F_dmgtolevel
	.align	2, 0
	.type	 atkA0_psywavedamageeffect,function
	.thumb_func
atkA0_psywavedamageeffect:
	push	{r4, lr}
	mov	r4, #0xf
.L2052:
	bl	Random
	add	r3, r4, #0
	and	r3, r3, r0
	cmp	r3, #0xa
	bgt	.L2052	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r3, r0, #0x1
	ldr	r4, .L2056
	ldr	r2, .L2056+0x4
	ldr	r0, .L2056+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x32
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	ldr	r1, .L2056+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2057:
	.align	2, 0
.L2056:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe182:
	.size	 atkA0_psywavedamageeffect,.Lfe182-atkA0_psywavedamageeffect
	.align	2, 0
	.type	 atkA1_counterdamagecalculator,function
	.thumb_func
atkA1_counterdamagecalculator:
	push	{r4, r5, r6, lr}
	ldr	r4, .L2063
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L2063+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0xc]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r0, r5, #0x4
	add	r0, r1, r0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L2059	@cond_branch
	cmp	r6, r2
	beq	.L2059	@cond_branch
	ldr	r6, .L2063+0x8
	add	r0, r1, r5
	ldrb	r0, [r0, #0xc]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2059	@cond_branch
	ldr	r1, .L2063+0xc
	lsl	r0, r3, #0x1
	str	r0, [r1]
	ldr	r1, .L2063+0x10
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L2060	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2060	@cond_branch
	ldr	r0, .L2063+0x14
	strb	r1, [r0]
	b	.L2061
.L2064:
	.align	2, 0
.L2063:
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimer
	.word	gBankTarget
.L2060:
	ldr	r2, .L2065
	ldr	r1, .L2065+0x4
	ldr	r0, .L2065+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	strb	r0, [r2]
.L2061:
	ldr	r1, .L2065+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2062
.L2066:
	.align	2, 0
.L2065:
	.word	gBankTarget
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.L2059:
	ldr	r2, .L2067
	ldr	r0, .L2067+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L2067+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2062:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2068:
	.align	2, 0
.L2067:
	.word	gSpecialStatuses
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe183:
	.size	 atkA1_counterdamagecalculator,.Lfe183-atkA1_counterdamagecalculator
	.align	2, 0
	.type	 atkA2_mirrorcoatdamagecalculator,function
	.thumb_func
atkA2_mirrorcoatdamagecalculator:
	push	{r4, r5, r6, lr}
	ldr	r4, .L2074
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L2074+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0xd]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L2070	@cond_branch
	cmp	r6, r2
	beq	.L2070	@cond_branch
	ldr	r6, .L2074+0x8
	add	r0, r1, r5
	ldrb	r0, [r0, #0xd]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2070	@cond_branch
	ldr	r1, .L2074+0xc
	lsl	r0, r3, #0x1
	str	r0, [r1]
	ldr	r1, .L2074+0x10
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L2071	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2071	@cond_branch
	ldr	r0, .L2074+0x14
	strb	r1, [r0]
	b	.L2072
.L2075:
	.align	2, 0
.L2074:
	.word	gBankAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimer
	.word	gBankTarget
.L2071:
	ldr	r2, .L2076
	ldr	r1, .L2076+0x4
	ldr	r0, .L2076+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xd]
	strb	r0, [r2]
.L2072:
	ldr	r1, .L2076+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2073
.L2077:
	.align	2, 0
.L2076:
	.word	gBankTarget
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.L2070:
	ldr	r2, .L2078
	ldr	r0, .L2078+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L2078+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2073:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2079:
	.align	2, 0
.L2078:
	.word	gSpecialStatuses
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe184:
	.size	 atkA2_mirrorcoatdamagecalculator,.Lfe184-atkA2_mirrorcoatdamagecalculator
	.align	2, 0
	.type	 atkA3_disablelastusedattack,function
	.thumb_func
atkA3_disablelastusedattack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r4, #0x0
	ldr	r2, .L2089
	ldr	r3, .L2089+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r7, r2, #0
	add	r7, r7, #0xc
	add	r0, r0, r7
	ldr	r5, .L2089+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r0]
	mov	r9, r2
	add	r6, r3, #0
	ldr	r2, .L2089+0xc
	mov	r8, r2
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L2082	@cond_branch
	mov	ip, r6
	mov	r3, #0x58
.L2083:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L2082	@cond_branch
	lsl	r2, r4, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r3
	add	r2, r2, r0
	add	r2, r2, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L2083	@cond_branch
.L2082:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L2087	@cond_branch
	cmp	r4, #0x4
	beq	.L2087	@cond_branch
	mov	r5, #0x58
	mov	r0, r1
	mul	r0, r0, r5
	add	r0, r4, r0
	mov	r1, r9
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2087	@cond_branch
	ldr	r1, .L2089+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	lsl	r2, r4, #0x1
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r2, r0
	mov	r3, r9
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r2, r0
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mul	r1, r1, r5
	add	r2, r2, r1
	add	r2, r2, r3
	ldrh	r1, [r2]
	strh	r1, [r0, #0x4]
	bl	Random
	ldrb	r2, [r6]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	mov	r2, #0x3
	and	r2, r2, r0
	add	r2, r2, #0x2
	ldrb	r3, [r1, #0xb]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r3, [r1, #0xb]
	lsl	r2, r3, #0x1c
	lsr	r2, r2, #0x18
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldr	r1, .L2089+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2088
.L2090:
	.align	2, 0
.L2089:
	.word	gBattleMons
	.word	gBankTarget
	.word	gLastUsedMove
	.word	gDisableStructs
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L2087:
	ldr	r3, .L2091
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2088:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2092:
	.align	2, 0
.L2091:
	.word	gBattlescriptCurrInstr
.Lfe185:
	.size	 atkA3_disablelastusedattack,.Lfe185-atkA3_disablelastusedattack
	.align	2, 0
	.type	 atkA4_setencore,function
	.thumb_func
atkA4_setencore:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r5, #0x0
	ldr	r3, .L2104
	ldr	r4, .L2104+0x4
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r6, r3, #0
	add	r6, r6, #0xc
	add	r0, r0, r6
	ldr	r2, .L2104+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r0, [r0]
	mov	sl, r3
	mov	r8, r2
	ldr	r2, .L2104+0xc
	mov	r9, r2
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L2095	@cond_branch
	mov	ip, r4
	add	r7, r6, #0
	mov	r6, r8
	mov	r3, #0x58
.L2096:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bgt	.L2095	@cond_branch
	lsl	r2, r5, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r3
	add	r2, r2, r0
	add	r2, r2, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L2096	@cond_branch
.L2095:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r2, [r0]
	cmp	r2, #0xa5
	beq	.L2101	@cond_branch
	cmp	r2, #0xe3
	beq	.L2101	@cond_branch
	cmp	r2, #0x77
	bne	.L2100	@cond_branch
.L2101:
	mov	r5, #0x4
.L2100:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, r9
	add	r3, r0, r2
	ldrh	r0, [r3, #0x6]
	cmp	r0, #0
	bne	.L2102	@cond_branch
	cmp	r5, #0x4
	beq	.L2102	@cond_branch
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r5, r2
	mov	r1, sl
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2102	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	sub	r1, r1, #0x18
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3, #0x6]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	strb	r5, [r0, #0xc]
	bl	Random
	ldrb	r2, [r4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	mov	r2, #0x3
	and	r2, r2, r0
	add	r2, r2, #0x3
	ldrb	r3, [r1, #0xe]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r3, [r1, #0xe]
	lsl	r2, r3, #0x1c
	lsr	r2, r2, #0x18
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldr	r1, .L2104+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2103
.L2105:
	.align	2, 0
.L2104:
	.word	gBattleMons
	.word	gBankTarget
	.word	gLastUsedMove
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L2102:
	ldr	r3, .L2106
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2103:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2107:
	.align	2, 0
.L2106:
	.word	gBattlescriptCurrInstr
.Lfe186:
	.size	 atkA4_setencore,.Lfe186-atkA4_setencore
	.align	2, 0
	.type	 atkA5_painsplitdmgcalc,function
	.thumb_func
atkA5_painsplitdmgcalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L2111
	ldr	r0, .L2111+0x4
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r6, #0x58
	mov	r2, r0
	mul	r2, r2, r6
	add	r0, r7, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2109	@cond_branch
	ldr	r1, .L2111+0x8
	mov	ip, r1
	ldrb	r0, [r1]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r4, [r0, #0x28]
	add	r0, r2, r7
	ldrh	r2, [r0, #0x28]
	add	r4, r4, r2
	asr	r4, r4, #0x1
	ldr	r5, .L2111+0xc
	mov	r9, r5
	sub	r2, r2, r4
	str	r2, [r5]
	ldr	r3, .L2111+0x10
	ldr	r1, .L2111+0x14
	add	r0, r3, r1
	strb	r2, [r0]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r2
	asr	r0, r0, #0x8
	ldr	r5, .L2111+0x18
	add	r1, r3, r5
	strb	r0, [r1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r2
	asr	r0, r0, #0x10
	add	r5, r5, #0x1
	add	r1, r3, r5
	strb	r0, [r1]
	lsr	r2, r2, #0x18
	ldr	r0, .L2111+0x1c
	add	r3, r3, r0
	strb	r2, [r3]
	mov	r1, ip
	ldrb	r0, [r1]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x28]
	sub	r0, r0, r4
	mov	r5, r9
	str	r0, [r5]
	ldr	r2, .L2111+0x20
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, .L2111+0x24
	str	r1, [r0]
	ldr	r1, .L2111+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2110
.L2112:
	.align	2, 0
.L2111:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gSharedMem
	.word	0x16014
	.word	0x16015
	.word	0x16017
	.word	gSpecialStatuses
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L2109:
	ldr	r3, .L2113
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2110:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2114:
	.align	2, 0
.L2113:
	.word	gBattlescriptCurrInstr
.Lfe187:
	.size	 atkA5_painsplitdmgcalc,.Lfe187-atkA5_painsplitdmgcalc
	.align	2, 0
	.type	 atkA6_settypetorandomresistance,function
	.thumb_func
atkA6_settypetorandomresistance:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    ldr r1, _08027FA8 @ =gMoveHitWith
    ldr r4, _08027FAC @ =gBankAttacker
    ldrb r0, [r4]
    lsls r0, 1
    adds r2, r0, r1
    ldrh r1, [r2]
    cmp r1, 0
    beq _08027F8C
    ldr r0, _08027FB0 @ =0x0000ffff
    cmp r1, r0
    beq _08027F8C
    ldrh r0, [r2]
    bl IsTwoTurnsMove
    lsls r0, 24
    cmp r0, 0
    beq _08028024
    ldr r2, _08027FB4 @ =gProtectStructs
    ldrb r0, [r4]
    lsls r1, r0, 4
    adds r0, r2, 0x4
    adds r0, r1, r0
    ldr r0, [r0]
    cmp r0, 0
    bne _08028024
    adds r0, r2, 0
    adds r0, 0x8
    adds r0, r1, r0
    ldr r0, [r0]
    cmp r0, 0
    bne _08028024
_08027F8C:
    ldr r3, _08027FB8 @ =gBattlescriptCurrInstr
    ldr r2, [r3]
    ldrb r1, [r2, 0x1]
    ldrb r0, [r2, 0x2]
    lsls r0, 8
    orrs r1, r0
    ldrb r0, [r2, 0x3]
    lsls r0, 16
    orrs r1, r0
    ldrb r0, [r2, 0x4]
    lsls r0, 24
    orrs r1, r0
    str r1, [r3]
    b _08028110
    .align 2, 0
_08027FA8: .4byte gMoveHitWith
_08027FAC: .4byte gBankAttacker
_08027FB0: .4byte 0x0000ffff
_08027FB4: .4byte gProtectStructs
_08027FB8: .4byte gBattlescriptCurrInstr
_08027FBC:
    mov r0, r12
    strb r5, [r0]
    mov r1, r10
    ldrb r0, [r1]
    muls r0, r2
    adds r0, r7
    adds r0, 0x22
    strb r5, [r0]
    ldr r1, _08027FE0 @ =gBattleTextBuff1
    movs r0, 0xFD
    strb r0, [r1]
    movs r0, 0x3
    strb r0, [r1, 0x1]
    strb r5, [r1, 0x2]
    movs r0, 0xFF
    strb r0, [r1, 0x3]
    ldr r1, _08027FE4 @ =gBattlescriptCurrInstr
    b _08028012
    .align 2, 0
_08027FE0: .4byte gBattleTextBuff1
_08027FE4: .4byte gBattlescriptCurrInstr
_08027FE8:
    mov r0, r8
    adds r0, 0x1
    adds r0, r3
    ldrb r2, [r0]
    strb r2, [r4]
    mov r4, r10
    ldrb r0, [r4]
    muls r0, r6
    ldr r7, _0802801C @ =gBattleMons
    adds r0, r7
    adds r0, 0x22
    strb r2, [r0]
    ldr r1, _08028020 @ =gBattleTextBuff1
    movs r0, 0xFD
    strb r0, [r1]
    movs r0, 0x3
    strb r0, [r1, 0x1]
    strb r2, [r1, 0x2]
    movs r0, 0xFF
    strb r0, [r1, 0x3]
    mov r1, r12
_08028012:
    ldr r0, [r1]
    adds r0, 0x5
    str r0, [r1]
    b _08028110
    .align 2, 0
_0802801C: .4byte gBattleMons
_08028020: .4byte gBattleTextBuff1
_08028024:
    movs r4, 0
    mov r8, r4
    movs r7, 0x7F
    mov r9, r7
_0802802C:
    bl Random
    mov r4, r9
    ands r4, r0
    cmp r4, 0x70
    bhi _0802802C
    lsls r0, r4, 1
    adds r4, r0, r4
    ldr r6, _08028120 @ =gTypeEffectiveness
    adds r3, r4, r6
    ldr r1, _08028124 @ =gUnknown_02024C44
    ldr r2, _08028128 @ =gBankAttacker
    ldrb r5, [r2]
    lsls r0, r5, 1
    adds r0, r1
    ldrb r1, [r3]
    mov r10, r2
    ldrh r0, [r0]
    cmp r1, r0
    bne _08028088
    adds r0, r4, 0x2
    adds r0, r6
    ldrb r0, [r0]
    cmp r0, 0x5
    bhi _08028088
    ldr r7, _0802812C @ =gBattleMons
    movs r2, 0x58
    adds r0, r5, 0
    muls r0, r2
    adds r3, r0, r7
    movs r0, 0x21
    adds r0, r3
    mov r12, r0
    adds r0, r4, 0x1
    adds r0, r6
    ldrb r5, [r0]
    mov r1, r12
    ldrb r0, [r1]
    adds r1, r5, 0
    cmp r0, r1
    beq _08028088
    adds r0, r3, 0
    adds r0, 0x22
    ldrb r0, [r0]
    cmp r0, r1
    bne _08027FBC
_08028088:
    movs r7, 0x1
    add r8, r7
    ldr r0, _08028130 @ =0x000003e7
    cmp r8, r0
    ble _0802802C
    movs r0, 0
    mov r8, r0
    ldr r1, _08028134 @ =gBattlescriptCurrInstr
    mov r12, r1
    ldr r3, _08028120 @ =gTypeEffectiveness
    adds r0, r4, 0x1
    adds r0, r3
    mov r9, r0
    adds r5, r3, 0
_080280A4:
    ldrb r1, [r5]
    cmp r1, 0xFF
    bgt _080280AE
    cmp r1, 0xFE
    bge _080280E8
_080280AE:
    mov r4, r10
    ldrb r2, [r4]
    lsls r0, r2, 1
    ldr r7, _08028124 @ =gUnknown_02024C44
    adds r0, r7
    ldrh r0, [r0]
    cmp r1, r0
    bne _080280E8
    ldrb r0, [r5, 0x2]
    cmp r0, 0x5
    bhi _080280E8
    movs r6, 0x58
    adds r0, r2, 0
    muls r0, r6
    ldr r1, _0802812C @ =gBattleMons
    adds r2, r0, r1
    adds r4, r2, 0
    adds r4, 0x21
    ldrb r0, [r4]
    mov r7, r9
    ldrb r1, [r7]
    cmp r0, r1
    beq _080280E8
    adds r0, r2, 0
    adds r0, 0x22
    ldrb r0, [r0]
    cmp r0, r1
    beq _080280E8
    b _08027FE8
_080280E8:
    adds r5, 0x3
    movs r0, 0x3
    add r8, r0
    ldr r0, _08028138 @ =0x0000014f
    cmp r8, r0
    bls _080280A4
    mov r1, r12
    ldr r2, [r1]
    ldrb r1, [r2, 0x1]
    ldrb r0, [r2, 0x2]
    lsls r0, 8
    orrs r1, r0
    ldrb r0, [r2, 0x3]
    lsls r0, 16
    orrs r1, r0
    ldrb r0, [r2, 0x4]
    lsls r0, 24
    orrs r1, r0
    mov r4, r12
    str r1, [r4]
_08028110:
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08028120: .4byte gTypeEffectiveness
_08028124: .4byte gUnknown_02024C44
_08028128: .4byte gBankAttacker
_0802812C: .4byte gBattleMons
_08028130: .4byte 0x000003e7
_08028134: .4byte gBattlescriptCurrInstr
_08028138: .4byte 0x0000014f
        .syntax divided
	.code	16
.Lfe188:
	.size	 atkA6_settypetorandomresistance,.Lfe188-atkA6_settypetorandomresistance
	.align	2, 0
	.type	 atkA7_setalwayshitflag,function
	.thumb_func
atkA7_setalwayshitflag:
	push	{r4, lr}
	ldr	r4, .L2117
	ldr	r3, .L2117+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r2, .L2117+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L2117+0xc
	ldrb	r1, [r1]
	strb	r1, [r0, #0x15]
	ldr	r1, .L2117+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2118:
	.align	2, 0
.L2117:
	.word	gStatuses3
	.word	gBankTarget
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe189:
	.size	 atkA7_setalwayshitflag,.Lfe189-atkA7_setalwayshitflag
	.align	2, 0
	.type	 atkA8_copymovepermanently,function
	.thumb_func
atkA8_copymovepermanently:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffec
	ldr	r0, .L2136
	ldr	r1, .L2136+0x4
	add	r5, r1, #0
	strh	r5, [r0]
	ldr	r3, .L2136+0x8
	ldr	r2, .L2136+0xc
	ldrb	r1, [r2]
	mov	r0, #0x58
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r1, r1, r0
	mov	ip, r3
	mov	sl, r2
	cmp	r1, #0
	beq	.LCB21657
	b	.L2120	@long jump
.LCB21657:
	ldr	r0, .L2136+0x10
	ldr	r2, .L2136+0x14
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r9, r0
	mov	r8, r2
	cmp	r1, #0xa5
	bne	.LCB21669
	b	.L2120	@long jump
.LCB21669:
	cmp	r1, #0
	bne	.LCB21671
	b	.L2120	@long jump
.LCB21671:
	cmp	r1, r5
	bne	.LCB21675
	b	.L2120	@long jump
.LCB21675:
	cmp	r1, #0xa6
	bne	.LCB21677
	b	.L2120	@long jump
.LCB21677:
	mov	r7, #0x0
	mov	r5, r9
	mov	r0, ip
	add	r0, r0, #0xc
	add	r1, r4, r0
	mov	r3, r8
.L2124:
	ldrh	r2, [r1]
	cmp	r2, #0xa6
	beq	.L2123	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L2122	@cond_branch
.L2123:
	add	r1, r1, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L2124	@cond_branch
.L2122:
	cmp	r7, #0x4
	beq	.LCB21719
	b	.L2120	@long jump
.LCB21719:
	ldr	r4, .L2136+0x18
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	mov	r2, sl
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r1, r1, r0
	mov	r6, ip
	add	r6, r6, #0xc
	add	r1, r1, r6
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r1, sl
	ldrb	r0, [r1]
	mov	r2, r0
	mul	r2, r2, r3
	ldrb	r4, [r4]
	add	r2, r2, r4
	mov	r5, ip
	add	r5, r5, #0x24
	add	r2, r2, r5
	ldr	r4, .L2136+0x1c
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x4]
	strb	r0, [r2]
	ldr	r1, .L2136+0x20
	mov	r2, sl
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r7, #0x0
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r4, r0, r5
	add	r3, r0, #0
	add	r2, sp, #0x4
	add	r5, sp, #0xc
.L2133:
	add	r0, r3, r6
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	r1, r5, r7
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L2133	@cond_branch
	add	r2, sp, #0x4
	mov	r0, sl
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r0, r0, #0x3b
	ldrb	r0, [r0]
	strb	r0, [r2, #0xc]
	str	r2, [sp]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x10
	bl	EmitSetAttributes
	ldr	r0, .L2136+0x20
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2136+0x24
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldr	r3, .L2136+0x10
	ldr	r2, .L2136+0x14
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L2136+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2135
.L2137:
	.align	2, 0
.L2136:
	.word	gUnknown_02024BE8
	.word	0xffff
	.word	gBattleMons
	.word	gBankAttacker
	.word	gUnknown_02024C2C
	.word	gBankTarget
	.word	gCurrMovePos
	.word	gBattleMoves
	.word	gActiveBank
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L2120:
	ldr	r3, .L2138
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2135:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2139:
	.align	2, 0
.L2138:
	.word	gBattlescriptCurrInstr
.Lfe190:
	.size	 atkA8_copymovepermanently,.Lfe190-atkA8_copymovepermanently
	.align	2, 0
	.type	 IsTwoTurnsMove,function
	.thumb_func
IsTwoTurnsMove:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L2145
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, #0x91
	beq	.L2142	@cond_branch
	cmp	r0, #0x27
	beq	.L2142	@cond_branch
	cmp	r0, #0x4b
	beq	.L2142	@cond_branch
	cmp	r0, #0x97
	beq	.L2142	@cond_branch
	cmp	r0, #0x9b
	beq	.L2142	@cond_branch
	cmp	r0, #0x1a
	bne	.L2141	@cond_branch
.L2142:
	mov	r0, #0x1
	b	.L2144
.L2146:
	.align	2, 0
.L2145:
	.word	gBattleMoves
.L2141:
	mov	r0, #0x0
.L2144:
	pop	{r1}
	bx	r1
.Lfe191:
	.size	 IsTwoTurnsMove,.Lfe191-IsTwoTurnsMove
	.align	2, 0
	.type	 IsMoveUnchoosable,function
	.thumb_func
IsMoveUnchoosable:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L2149	@cond_branch
	cmp	r1, #0xd6
	beq	.L2149	@cond_branch
	mov	r0, #0x89
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L2149	@cond_branch
	cmp	r1, #0x77
	beq	.L2149	@cond_branch
	cmp	r1, #0x76
	bne	.L2148	@cond_branch
.L2149:
	mov	r0, #0x1
	b	.L2151
.L2148:
	mov	r0, #0x0
.L2151:
	pop	{r1}
	bx	r1
.Lfe192:
	.size	 IsMoveUnchoosable,.Lfe192-IsMoveUnchoosable
	.align	2, 0
	.type	 AttacksThisTurn,function
	.thumb_func
AttacksThisTurn:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	ldr	r1, .L2158
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r3, r1, #0
	cmp	r0, #0x97
	bne	.L2153	@cond_branch
	ldr	r0, .L2158+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2154	@cond_branch
.L2153:
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, #0x91
	beq	.L2155	@cond_branch
	cmp	r0, #0x27
	beq	.L2155	@cond_branch
	cmp	r0, #0x4b
	beq	.L2155	@cond_branch
	cmp	r0, #0x97
	beq	.L2155	@cond_branch
	cmp	r0, #0x9b
	beq	.L2155	@cond_branch
	cmp	r0, #0x1a
	bne	.L2154	@cond_branch
.L2155:
	ldr	r0, .L2158+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2154	@cond_branch
	mov	r0, #0x1
	b	.L2157
.L2159:
	.align	2, 0
.L2158:
	.word	gBattleMoves
	.word	gBattleWeather
	.word	gHitMarker
.L2154:
	mov	r0, #0x2
.L2157:
	pop	{r1}
	bx	r1
.Lfe193:
	.size	 AttacksThisTurn,.Lfe193-AttacksThisTurn
	.align	2, 0
	.type	 atkA9_sleeptalk_choose_move,function
	.thumb_func
atkA9_sleeptalk_choose_move:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L2175
	mov	r9, r0
	mov	r1, #0x58
	mov	r8, r1
	ldr	r7, .L2175+0x4
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	mov	sl, r0
.L2164:
	lsl	r4, r5, #0x1
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r4, r0
	add	r0, r0, r7
	ldrh	r0, [r0]
	bl	IsMoveUnchoosable
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2166	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r4, r0
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, sl
	beq	.L2166	@cond_branch
	cmp	r1, #0xfd
	beq	.L2166	@cond_branch
	add	r0, r1, #0
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2163	@cond_branch
.L2166:
	ldr	r1, .L2175+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L2163:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L2164	@cond_branch
	ldr	r0, .L2175
	ldrb	r0, [r0]
	add	r1, r6, #0
	mov	r2, #0xfd
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xf
	bne	.L2168	@cond_branch
	ldr	r1, .L2175+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2169
.L2176:
	.align	2, 0
.L2175:
	.word	gBankAttacker
	.word	gBattleMons+0xc
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.L2168:
	mov	r7, #0x3
	ldr	r4, .L2177
.L2170:
	bl	Random
	add	r5, r7, #0
	and	r5, r5, r0
	lsl	r0, r5, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L2170	@cond_branch
	ldr	r4, .L2177+0x4
	ldr	r2, .L2177+0x8
	lsl	r1, r5, #0x1
	ldr	r0, .L2177+0xc
	ldrb	r3, [r0]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r4]
	ldr	r0, .L2177+0x10
	strb	r5, [r0]
	ldr	r2, .L2177+0x14
	ldr	r0, [r2]
	ldr	r1, .L2177+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L2177+0x1c
	strb	r0, [r1]
	ldr	r3, .L2177+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2169:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2178:
	.align	2, 0
.L2177:
	.word	gBitTable
	.word	gRandomMove
	.word	gBattleMons
	.word	gBankAttacker
	.word	gCurrMovePos
	.word	gHitMarker
	.word	0xfffffbff
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.Lfe194:
	.size	 atkA9_sleeptalk_choose_move,.Lfe194-atkA9_sleeptalk_choose_move
	.align	2, 0
	.type	 atkAA_set_destinybond,function
	.thumb_func
atkAA_set_destinybond:
	ldr	r1, .L2180
	ldr	r0, .L2180+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L2180+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2181:
	.align	2, 0
.L2180:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe195:
	.size	 atkAA_set_destinybond,.Lfe195-atkAA_set_destinybond
	.align	2, 0
	.type	 DestinyBondFlagUpdate,function
	.thumb_func
DestinyBondFlagUpdate:
	push	{r4, r5, lr}
	ldr	r0, .L2184
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L2184+0x4
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L2184+0x8
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2183	@cond_branch
	cmp	r5, r3
	beq	.L2183	@cond_branch
	ldr	r2, .L2184+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2183	@cond_branch
	mov	r0, #0x40
	orr	r1, r1, r0
	str	r1, [r2]
.L2183:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2185:
	.align	2, 0
.L2184:
	.word	gBankAttacker
	.word	gBankTarget
	.word	gBattleMons
	.word	gHitMarker
.Lfe196:
	.size	 DestinyBondFlagUpdate,.Lfe196-DestinyBondFlagUpdate
	.align	2, 0
	.type	 atkAB_DestinyBondFlagUpdate,function
	.thumb_func
atkAB_DestinyBondFlagUpdate:
	push	{lr}
	bl	DestinyBondFlagUpdate
	ldr	r1, .L2187
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2188:
	.align	2, 0
.L2187:
	.word	gBattlescriptCurrInstr
.Lfe197:
	.size	 atkAB_DestinyBondFlagUpdate,.Lfe197-atkAB_DestinyBondFlagUpdate
	.align	2, 0
	.type	 atkAC_remaininghptopower,function
	.thumb_func
atkAC_remaininghptopower:
	push	{lr}
	ldr	r2, .L2196
	ldr	r0, .L2196+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	mov	r2, #0x28
	ldrsh	r0, [r1, r2]
	mov	r2, #0x2c
	ldrsh	r1, [r1, r2]
	mov	r2, #0x30
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r3, #0x0
	ldr	r0, .L2196+0x8
	ldrb	r2, [r0]
	cmp	r1, r2
	ble	.L2191	@cond_branch
	add	r2, r0, #0
.L2192:
	add	r3, r3, #0x2
	cmp	r3, #0xb
	bgt	.L2191	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	bgt	.L2192	@cond_branch
.L2191:
	ldr	r2, .L2196+0xc
	ldr	r1, .L2196+0x8
	add	r0, r3, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldr	r1, .L2196+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2197:
	.align	2, 0
.L2196:
	.word	gBattleMons
	.word	gBankAttacker
	.word	sUnknown_081FAD26
	.word	gDynamicBasePower
	.word	gBattlescriptCurrInstr
.Lfe198:
	.size	 atkAC_remaininghptopower,.Lfe198-atkAC_remaininghptopower
	.align	2, 0
	.type	 atkAD_spite_ppreduce,function
	.thumb_func
atkAD_spite_ppreduce:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r4, .L2210
	ldr	r1, .L2210+0x4
	ldrb	r2, [r1]
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r3, [r0]
	mov	r8, r1
	cmp	r3, #0
	bne	.LCB22429
	b	.L2199	@long jump
.LCB22429:
	ldr	r0, .L2210+0x8
	cmp	r3, r0
	bne	.LCB22434
	b	.L2199	@long jump
.LCB22434:
	ldr	r1, .L2210+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2210+0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB22442
	b	.L2199	@long jump
.LCB22442:
	mov	r7, #0x0
	ldr	r0, .L2210+0x14
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r2, r0, #0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r1, [r1]
	cmp	r3, r1
	beq	.L2201	@cond_branch
	add	r6, r4, #0
	mov	r5, r8
	add	r4, r2, #0
	mov	r3, #0x58
.L2202:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L2201	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x1
	add	r2, r2, r6
	lsl	r1, r7, #0x1
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L2202	@cond_branch
.L2201:
	cmp	r7, #0x4
	bne	.LCB22491
	b	.L2199	@long jump
.LCB22491:
	mov	r4, r8
	ldrb	r0, [r4]
	mov	r1, #0x58
	mov	r9, r1
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r7, r0
	ldr	r1, .L2210+0x14
	add	r1, r1, #0x24
	mov	sl, r1
	add	r0, r0, sl
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.LCB22508
	b	.L2199	@long jump
.LCB22508:
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	add	r6, r1, #0x2
	ldrb	r0, [r4]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r7, r0
	add	r0, r0, sl
	ldrb	r0, [r0]
	cmp	r0, r6
	bge	.L2207	@cond_branch
	add	r6, r0, #0
.L2207:
	ldr	r1, .L2210+0x18
	mov	r5, #0xfd
	strb	r5, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldr	r2, .L2210
	mov	r3, r8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r4, .L2210+0x1c
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	strb	r5, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	strb	r6, [r4, #0x4]
	sub	r0, r0, #0x2
	strb	r0, [r4, #0x5]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, r9
	mul	r1, r1, r0
	add	r1, r7, r1
	add	r1, r1, sl
	ldrb	r0, [r1]
	sub	r0, r0, r6
	strb	r0, [r1]
	ldr	r4, .L2210+0x20
	mov	r3, r8
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldr	r1, .L2210+0x24
	ldrb	r3, [r4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L2210+0x28
	lsl	r0, r7, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2208	@cond_branch
	mov	r2, r9
	mul	r2, r2, r3
	ldr	r0, .L2210+0x14
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2208	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, sl
	add	r0, r2, r3
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
.L2208:
	ldr	r1, .L2210+0x2c
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L2210+0x14
	ldr	r0, .L2210+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r7, r0
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2198	@cond_branch
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	b	.L2198
.L2211:
	.align	2, 0
.L2210:
	.word	gLastUsedMove
	.word	gBankTarget
	.word	0xffff
	.word	gStatuses3
	.word	0x400c0
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gActiveBank
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.L2199:
	ldr	r3, .L2212
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2198:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2213:
	.align	2, 0
.L2212:
	.word	gBattlescriptCurrInstr
.Lfe199:
	.size	 atkAD_spite_ppreduce,.Lfe199-atkAD_spite_ppreduce
	.align	2, 0
	.type	 atkAE_heal_party_status,function
	.thumb_func
atkAE_heal_party_status:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff8
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	mov	r7, #0x0
	ldr	r0, .L2237
	ldrh	r0, [r0]
	cmp	r0, #0xd7
	beq	.LCB22707
	b	.L2215	@long jump
.LCB22707:
	ldr	r5, .L2237+0x4
	strb	r7, [r5, #0x5]
	ldr	r6, .L2237+0x8
	ldrb	r0, [r6]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2237+0xc
	mov	r9, r1
	cmp	r0, #0
	bne	.L2216	@cond_branch
	ldr	r2, .L2237+0x10
	mov	r9, r2
.L2216:
	ldr	r4, .L2237+0x14
	ldrb	r3, [r6]
	mov	r0, #0x58
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r2, r4
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0x2b
	beq	.L2218	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	str	r7, [r0]
	b	.L2219
.L2238:
	.align	2, 0
.L2237:
	.word	gCurrentMove
	.word	gBattleCommunication
	.word	gBankAttacker
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleMons
.L2218:
	ldrb	r1, [r1]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	ldrb	r0, [r5, #0x5]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
.L2219:
	ldr	r4, .L2239
	ldr	r0, .L2239+0x4
	ldrb	r0, [r0]
	bl	GetBankIdentity
	mov	r6, #0x2
	eor	r0, r0, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankByPlayerAI
	ldr	r1, .L2239+0x8
	ldr	r2, .L2239+0xc
	add	r1, r1, r2
	strb	r0, [r1]
	strb	r0, [r4]
	ldr	r0, .L2239+0x10
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2220	@cond_branch
	ldr	r0, .L2239+0x14
	ldrb	r2, [r0]
	ldr	r1, .L2239+0x18
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L2220	@cond_branch
	ldr	r5, .L2239+0x1c
	mov	r0, #0x58
	mov	r4, r3
	mul	r4, r4, r0
	add	r0, r4, r5
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0x2b
	beq	.L2221	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x4c
	add	r0, r4, r0
	str	r2, [r0]
	b	.L2220
.L2240:
	.align	2, 0
.L2239:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gSharedMem
	.word	0x16003
	.word	gBattleTypeFlags
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gBattleMons
.L2221:
	ldrb	r1, [r1]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	ldr	r1, .L2241
	ldrb	r0, [r1, #0x5]
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
.L2220:
	mov	r6, #0x0
	ldr	r0, .L2241+0x4
	mov	r8, r0
.L2226:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	add	r4, r4, r9
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r5, #0
	beq	.L2225	@cond_branch
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	beq	.L2225	@cond_branch
	ldr	r2, .L2241+0x8
	ldr	r0, .L2241+0xc
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L2228	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r1
	b	.L2236
.L2242:
	.align	2, 0
.L2241:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gBattlePartyID
	.word	gBankAttacker
.L2228:
	ldr	r0, .L2243
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2230	@cond_branch
	ldr	r0, .L2243+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L2230	@cond_branch
	ldr	r0, .L2243+0x8
	ldrb	r1, [r0]
	ldr	r2, .L2243+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2230	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r3
.L2236:
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	b	.L2229
.L2244:
	.align	2, 0
.L2243:
	.word	gBattleTypeFlags
	.word	gActiveBank
	.word	gAbsentBankFlags
	.word	gBitTable
.L2230:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetAbilityBySpecies
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L2229:
	cmp	r0, #0x2b
	beq	.L2225	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r6
	orr	r7, r7, r0
	lsl	r0, r7, #0x18
	lsr	r7, r0, #0x18
.L2225:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L2226	@cond_branch
	b	.L2234
.L2215:
	ldr	r1, .L2245
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	mov	r7, #0x3f
	ldr	r2, .L2245+0x4
	ldr	r1, .L2245+0x8
	ldrb	r0, [r1]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r5, r2, #0
	add	r5, r5, #0x4c
	add	r0, r0, r5
	str	r4, [r0]
	ldrb	r0, [r1]
	bl	GetBankIdentity
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankByPlayerAI
	ldr	r3, .L2245+0xc
	strb	r0, [r3]
	ldr	r0, .L2245+0x10
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2234	@cond_branch
	ldr	r0, .L2245+0x14
	ldrb	r2, [r0]
	ldr	r1, .L2245+0x18
	ldrb	r3, [r3]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L2234	@cond_branch
	mov	r0, r3
	mul	r0, r0, r6
	add	r0, r0, r5
	str	r2, [r0]
.L2234:
	ldr	r4, .L2245+0xc
	ldr	r0, .L2245+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	add	r1, sp, #0x4
	str	r1, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	add	r2, r7, #0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2245+0x1c
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2246:
	.align	2, 0
.L2245:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gBankAttacker
	.word	gActiveBank
	.word	gBattleTypeFlags
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe200:
	.size	 atkAE_heal_party_status,.Lfe200-atkAE_heal_party_status
	.align	2, 0
	.type	 atkAF_cursetarget,function
	.thumb_func
atkAF_cursetarget:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L2252
	ldr	r0, .L2252+0x4
	ldrb	r3, [r0]
	mov	r6, #0x58
	mov	r1, r3
	mul	r1, r1, r6
	add	r0, r7, #0
	add	r0, r0, #0x50
	add	r4, r1, r0
	ldr	r2, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x15
	add	r0, r2, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L2249	@cond_branch
	ldr	r1, .L2252+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2252+0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2248	@cond_branch
.L2249:
	ldr	r3, .L2252+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2250
.L2253:
	.align	2, 0
.L2252:
	.word	gBattleMons
	.word	gBankTarget
	.word	gStatuses3
	.word	0x400c0
	.word	gBattlescriptCurrInstr
.L2248:
	orr	r2, r2, r5
	str	r2, [r4]
	ldr	r1, .L2254
	ldr	r0, .L2254+0x4
	ldrb	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2251	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L2251:
	ldr	r1, .L2254+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2250:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2255:
	.align	2, 0
.L2254:
	.word	gBattleMoveDamage
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe201:
	.size	 atkAF_cursetarget,.Lfe201-atkAF_cursetarget
	.align	2, 0
	.type	 atkB0_set_spikes,function
	.thumb_func
atkB0_set_spikes:
	push	{r4, lr}
	ldr	r4, .L2259
	ldrb	r0, [r4]
	bl	GetBankSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L2259+0x4
	lsl	r2, r0, #0x1
	add	r0, r2, r0
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x6]
	cmp	r0, #0x3
	bne	.L2257	@cond_branch
	ldr	r2, .L2259+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L2259+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2258
.L2260:
	.align	2, 0
.L2259:
	.word	gBankAttacker
	.word	gSideTimer
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L2257:
	ldr	r1, .L2261
	add	r1, r2, r1
	ldrh	r2, [r1]
	mov	r0, #0x10
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r3, #0x6]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x6]
	ldr	r1, .L2261+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2258:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2262:
	.align	2, 0
.L2261:
	.word	gSideAffecting
	.word	gBattlescriptCurrInstr
.Lfe202:
	.size	 atkB0_set_spikes,.Lfe202-atkB0_set_spikes
	.align	2, 0
	.type	 atkB1_set_foresight,function
	.thumb_func
atkB1_set_foresight:
	ldr	r1, .L2264
	ldr	r0, .L2264+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L2264+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2265:
	.align	2, 0
.L2264:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.Lfe203:
	.size	 atkB1_set_foresight,.Lfe203-atkB1_set_foresight
	.align	2, 0
	.type	 atkB2_setperishsong,function
	.thumb_func
atkB2_setperishsong:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r3, #0x0
	ldr	r0, .L2277
	add	r7, r0, #0
	ldr	r0, .L2277+0x4
	mov	r8, r0
	ldrb	r1, [r7]
	cmp	r6, r1
	bge	.L2268	@cond_branch
	mov	r5, #0x20
	ldr	r0, .L2277+0x8
	mov	ip, r0
	ldr	r0, .L2277+0xc
	add	r4, r0, #0
	add	r4, r4, #0xf
	ldr	r2, .L2277+0x10
.L2270:
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L2272	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, ip
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2b
	bne	.L2271	@cond_branch
.L2272:
	add	r6, r6, #0x1
	b	.L2269
.L2278:
	.align	2, 0
.L2277:
	.word	gNoOfAllBanks
	.word	gBankAttacker
	.word	gBattleMons
	.word	gDisableStructs
	.word	gStatuses3
.L2271:
	orr	r1, r1, r5
	str	r1, [r2]
	mov	r0, #0x33
	strb	r0, [r4]
.L2269:
	add	r4, r4, #0x1c
	add	r2, r2, #0x4
	add	r3, r3, #0x1
	ldrb	r0, [r7]
	cmp	r3, r0
	blt	.L2270	@cond_branch
.L2268:
	mov	r1, r8
	ldrb	r0, [r1]
	bl	sub_80153D0
	ldr	r0, .L2279
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L2275	@cond_branch
	ldr	r3, .L2279+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2276
.L2280:
	.align	2, 0
.L2279:
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
.L2275:
	ldr	r1, .L2281
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2276:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2282:
	.align	2, 0
.L2281:
	.word	gBattlescriptCurrInstr
.Lfe204:
	.size	 atkB2_setperishsong,.Lfe204-atkB2_setperishsong
	.align	2, 0
	.type	 atkB3_rolloutdamagecalculation,function
	.thumb_func
atkB3_rolloutdamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L2294
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2284	@cond_branch
	ldr	r0, .L2294+0x4
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	ldr	r1, .L2294+0x8
	ldr	r0, .L2294+0xc
	str	r0, [r1]
	b	.L2285
.L2295:
	.align	2, 0
.L2294:
	.word	gBattleMoveFlags
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_1D6F74
.L2284:
	ldr	r2, .L2296
	ldr	r1, .L2296+0x4
	ldrb	r3, [r1]
	mov	r5, #0x58
	mov	r0, r3
	mul	r0, r0, r5
	add	r4, r2, #0
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r7, #0x80
	lsl	r7, r7, #0x5
	and	r0, r0, r7
	add	r6, r1, #0
	mov	r9, r2
	ldr	r1, .L2296+0x8
	mov	ip, r1
	ldr	r2, .L2296+0xc
	mov	r8, r2
	cmp	r0, #0
	bne	.L2286	@cond_branch
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r2, [r0, #0x11]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x5
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r2, [r0, #0x11]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x50
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	orr	r0, r0, r7
	str	r0, [r1]
	ldr	r1, .L2296+0x10
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, r8
	ldrh	r1, [r2]
	strh	r1, [r0]
.L2286:
	ldrb	r0, [r6]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	ldrb	r3, [r2, #0x11]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x11]
	cmp	r1, #0
	bne	.L2287	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	ldr	r2, .L2296+0x14
	and	r0, r0, r2
	str	r0, [r1]
.L2287:
	ldr	r3, .L2296+0x18
	ldr	r2, .L2296+0x1c
	mov	r0, r8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	strh	r0, [r3]
	mov	r2, #0x1
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, ip
	add	r4, r0, r1
	ldrb	r0, [r4, #0x11]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	mov	r1, #0x5
	sub	r1, r1, r0
	ldr	r7, .L2296+0x20
	add	r5, r3, #0
	cmp	r2, r1
	bge	.L2289	@cond_branch
	add	r1, r5, #0
	add	r3, r4, #0
	mov	r4, #0x5
.L2291:
	ldrh	r0, [r1]
	lsl	r0, r0, #0x1
	strh	r0, [r1]
	add	r2, r2, #0x1
	ldrb	r0, [r3, #0x11]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	sub	r0, r4, r0
	cmp	r2, r0
	blt	.L2291	@cond_branch
.L2289:
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, r9
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2293	@cond_branch
	ldrh	r0, [r5]
	lsl	r0, r0, #0x1
	strh	r0, [r5]
.L2293:
	ldr	r0, [r7]
	add	r0, r0, #0x1
	str	r0, [r7]
.L2285:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2297:
	.align	2, 0
.L2296:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gDisableStructs
	.word	gCurrentMove
	.word	gLockedMove
	.word	0xffffefff
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gBattlescriptCurrInstr
.Lfe205:
	.size	 atkB3_rolloutdamagecalculation,.Lfe205-atkB3_rolloutdamagecalculation
	.align	2, 0
	.type	 atkB4_jumpifconfusedandstatmaxed,function
	.thumb_func
atkB4_jumpifconfusedandstatmaxed:
	push	{r4, r5, lr}
	ldr	r5, .L2301
	ldr	r0, .L2301+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r4, .L2301+0x8
	cmp	r0, #0
	beq	.L2299	@cond_branch
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x1]
	add	r0, r0, r3
	add	r1, r5, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.L2299	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L2300
.L2302:
	.align	2, 0
.L2301:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.L2299:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L2300:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe206:
	.size	 atkB4_jumpifconfusedandstatmaxed,.Lfe206-atkB4_jumpifconfusedandstatmaxed
	.align	2, 0
	.type	 atkB5_furycuttercalc,function
	.thumb_func
atkB5_furycuttercalc:
	push	{r4, r5, lr}
	ldr	r0, .L2312
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2304	@cond_branch
	ldr	r2, .L2312+0x4
	ldr	r0, .L2312+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x10]
	ldr	r1, .L2312+0xc
	ldr	r0, .L2312+0x10
	str	r0, [r1]
	b	.L2305
.L2313:
	.align	2, 0
.L2312:
	.word	gBattleMoveFlags
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_1D6F74
.L2304:
	ldr	r5, .L2314
	ldr	r4, .L2314+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0x5
	beq	.L2306	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
.L2306:
	ldr	r3, .L2314+0x8
	ldr	r2, .L2314+0xc
	ldr	r0, .L2314+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	strh	r0, [r3]
	mov	r2, #0x1
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r4, .L2314+0x14
	ldrb	r1, [r0, #0x10]
	cmp	r2, r1
	bge	.L2308	@cond_branch
	add	r1, r3, #0
	add	r3, r0, #0
.L2310:
	ldrh	r0, [r1]
	lsl	r0, r0, #0x1
	strh	r0, [r1]
	add	r2, r2, #0x1
	ldrb	r0, [r3, #0x10]
	cmp	r2, r0
	blt	.L2310	@cond_branch
.L2308:
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
.L2305:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2315:
	.align	2, 0
.L2314:
	.word	gDisableStructs
	.word	gBankAttacker
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
.Lfe207:
	.size	 atkB5_furycuttercalc,.Lfe207-atkB5_furycuttercalc
	.align	2, 0
	.type	 atkB6_happinesstodamagecalculation,function
	.thumb_func
atkB6_happinesstodamagecalculation:
	push	{r4, lr}
	ldr	r2, .L2320
	ldr	r0, .L2320+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x79
	bne	.L2317	@cond_branch
	ldr	r4, .L2320+0x8
	ldr	r2, .L2320+0xc
	ldr	r0, .L2320+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r1, [r0]
	b	.L2319
.L2321:
	.align	2, 0
.L2320:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gBattleMons
	.word	gBankAttacker
.L2317:
	ldr	r4, .L2322
	ldr	r2, .L2322+0x4
	ldr	r0, .L2322+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	mov	r1, #0xff
	sub	r1, r1, r0
.L2319:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x19
	bl	__divsi3
	strh	r0, [r4]
	ldr	r1, .L2322+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2323:
	.align	2, 0
.L2322:
	.word	gDynamicBasePower
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe208:
	.size	 atkB6_happinesstodamagecalculation,.Lfe208-atkB6_happinesstodamagecalculation
	.align	2, 0
	.type	 atkB7_presentdamagecalculation,function
	.thumb_func
atkB7_presentdamagecalculation:
	push	{r4, lr}
	bl	Random
	mov	r4, #0xff
	and	r4, r4, r0
	cmp	r4, #0x65
	bgt	.L2325	@cond_branch
	ldr	r1, .L2337
	mov	r0, #0x28
	strh	r0, [r1]
	b	.L2326
.L2338:
	.align	2, 0
.L2337:
	.word	gDynamicBasePower
.L2325:
	cmp	r4, #0xb1
	bgt	.L2327	@cond_branch
	ldr	r1, .L2339
	mov	r0, #0x50
	strh	r0, [r1]
	b	.L2326
.L2340:
	.align	2, 0
.L2339:
	.word	gDynamicBasePower
.L2327:
	cmp	r4, #0xcb
	bgt	.L2329	@cond_branch
	ldr	r1, .L2341
	mov	r0, #0x78
	strh	r0, [r1]
	b	.L2326
.L2342:
	.align	2, 0
.L2341:
	.word	gDynamicBasePower
.L2329:
	ldr	r3, .L2343
	ldr	r2, .L2343+0x4
	ldr	r0, .L2343+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r3]
	cmp	r0, #0
	bne	.L2331	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L2331:
	ldr	r0, [r3]
	neg	r0, r0
	str	r0, [r3]
.L2326:
	cmp	r4, #0xcb
	bgt	.L2332	@cond_branch
	ldr	r1, .L2343+0xc
	ldr	r0, .L2343+0x10
	b	.L2336
.L2344:
	.align	2, 0
.L2343:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_1D6F44
.L2332:
	ldr	r2, .L2345
	ldr	r0, .L2345+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2c]
	ldrh	r0, [r0, #0x28]
	cmp	r1, r0
	bne	.L2334	@cond_branch
	ldr	r1, .L2345+0x8
	ldr	r0, .L2345+0xc
	b	.L2336
.L2346:
	.align	2, 0
.L2345:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_1D83B5
.L2334:
	ldr	r1, .L2347
	ldr	r0, .L2347+0x4
.L2336:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2348:
	.align	2, 0
.L2347:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_1D839B
.Lfe209:
	.size	 atkB7_presentdamagecalculation,.Lfe209-atkB7_presentdamagecalculation
	.align	2, 0
	.type	 atkB8_set_safeguard,function
	.thumb_func
atkB8_set_safeguard:
	push	{r4, r5, r6, lr}
	ldr	r4, .L2352
	ldrb	r0, [r4]
	bl	GetBankIdentity
	ldr	r6, .L2352+0x4
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r1, [r1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2350	@cond_branch
	ldr	r2, .L2352+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2352+0xc
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L2351
.L2353:
	.align	2, 0
.L2352:
	.word	gBankAttacker
	.word	gSideAffecting
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L2350:
	ldrb	r0, [r4]
	bl	GetBankIdentity
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r1]
	mov	r2, #0x20
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBankIdentity
	ldr	r2, .L2354
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strb	r1, [r0, #0x7]
	ldr	r0, .L2354+0x4
	strb	r1, [r0, #0x5]
.L2351:
	ldr	r1, .L2354+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2355:
	.align	2, 0
.L2354:
	.word	gSideTimer
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe210:
	.size	 atkB8_set_safeguard,.Lfe210-atkB8_set_safeguard
	.align	2, 0
	.type	 atkB9_magnitudedamagecalculation,function
	.thumb_func
atkB9_magnitudedamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bgt	.L2357	@cond_branch
	ldr	r1, .L2376
	mov	r0, #0xa
	strh	r0, [r1]
	mov	r3, #0x4
	b	.L2358
.L2377:
	.align	2, 0
.L2376:
	.word	gDynamicBasePower
.L2357:
	cmp	r3, #0xe
	bgt	.L2359	@cond_branch
	ldr	r1, .L2378
	mov	r0, #0x1e
	strh	r0, [r1]
	mov	r3, #0x5
	b	.L2358
.L2379:
	.align	2, 0
.L2378:
	.word	gDynamicBasePower
.L2359:
	cmp	r3, #0x22
	bgt	.L2361	@cond_branch
	ldr	r1, .L2380
	mov	r0, #0x32
	strh	r0, [r1]
	mov	r3, #0x6
	b	.L2358
.L2381:
	.align	2, 0
.L2380:
	.word	gDynamicBasePower
.L2361:
	cmp	r3, #0x40
	bgt	.L2363	@cond_branch
	ldr	r1, .L2382
	mov	r0, #0x46
	strh	r0, [r1]
	mov	r3, #0x7
	b	.L2358
.L2383:
	.align	2, 0
.L2382:
	.word	gDynamicBasePower
.L2363:
	cmp	r3, #0x54
	bgt	.L2365	@cond_branch
	ldr	r1, .L2384
	mov	r0, #0x5a
	strh	r0, [r1]
	mov	r3, #0x8
	b	.L2358
.L2385:
	.align	2, 0
.L2384:
	.word	gDynamicBasePower
.L2365:
	cmp	r3, #0x5e
	bgt	.L2367	@cond_branch
	ldr	r1, .L2386
	mov	r0, #0x6e
	strh	r0, [r1]
	mov	r3, #0x9
	b	.L2358
.L2387:
	.align	2, 0
.L2386:
	.word	gDynamicBasePower
.L2367:
	ldr	r1, .L2388
	mov	r0, #0x96
	strh	r0, [r1]
	mov	r3, #0xa
.L2358:
	ldr	r1, .L2388+0x4
	mov	r2, #0x0
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r0, [r1, #0x2]
	mov	r0, #0x2
	strb	r0, [r1, #0x3]
	strb	r3, [r1, #0x4]
	mov	r0, #0xff
	strb	r0, [r1, #0x5]
	ldr	r1, .L2388+0x8
	strb	r2, [r1]
	ldr	r0, .L2388+0xc
	ldrb	r3, [r0]
	add	r6, r1, #0
	ldr	r0, .L2388+0x10
	mov	r8, r0
	cmp	r2, r3
	bcs	.L2370	@cond_branch
	add	r4, r6, #0
	ldr	r0, .L2388+0x14
	ldrb	r5, [r0]
	ldr	r1, .L2388+0x18
	mov	ip, r1
	ldr	r7, .L2388+0x1c
.L2372:
	ldrb	r2, [r4]
	cmp	r2, r5
	beq	.L2371	@cond_branch
	ldrb	r0, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2370	@cond_branch
.L2371:
	add	r0, r2, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcc	.L2372	@cond_branch
.L2370:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2389:
	.align	2, 0
.L2388:
	.word	gDynamicBasePower
	.word	gBattleTextBuff1
	.word	gBankTarget
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
	.word	gBankAttacker
	.word	gBitTable
	.word	gAbsentBankFlags
.Lfe211:
	.size	 atkB9_magnitudedamagecalculation,.Lfe211-atkB9_magnitudedamagecalculation
	.align	2, 0
	.type	 atkBA_jumpifnopursuitswitchdmg,function
	.thumb_func
atkBA_jumpifnopursuitswitchdmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L2406
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L2391	@cond_branch
	ldr	r0, .L2406+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2392	@cond_branch
	mov	r0, #0x1
	b	.L2405
.L2407:
	.align	2, 0
.L2406:
	.word	gMultiHitCounter
	.word	gBankAttacker
.L2392:
	mov	r0, #0x0
	b	.L2405
.L2391:
	ldr	r0, .L2408
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2395	@cond_branch
	mov	r0, #0x3
	b	.L2405
.L2409:
	.align	2, 0
.L2408:
	.word	gBankAttacker
.L2395:
	mov	r0, #0x2
.L2405:
	bl	GetBankByPlayerAI
	ldr	r1, .L2410
	strb	r0, [r1]
	ldr	r0, .L2410+0x4
	ldr	r1, .L2410
	mov	r9, r1
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2397	@cond_branch
	ldr	r5, .L2410+0x8
	ldr	r0, .L2410+0xc
	ldr	r2, .L2410+0x10
	add	r1, r3, r2
	add	r1, r1, r0
	ldrb	r2, [r5]
	mov	sl, r0
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L2397	@cond_branch
	ldr	r4, .L2410+0x14
	mov	r2, #0x58
	mov	r0, r3
	mul	r0, r0, r2
	add	r1, r4, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x27
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2397	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2397	@cond_branch
	ldr	r0, .L2410+0x18
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x18]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L2397	@cond_branch
	ldr	r0, .L2410+0x1c
	lsl	r1, r3, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0xe4
	bne	.L2397	@cond_branch
	mov	r1, #0x0
	ldr	r0, .L2410+0x20
	ldr	r7, .L2410+0x24
	mov	r8, r7
	ldr	r2, .L2410+0x28
	mov	ip, r2
	ldrb	r7, [r0]
	cmp	r1, r7
	bge	.L2399	@cond_branch
	ldr	r6, .L2410+0x2c
	mov	r5, r9
	ldr	r4, .L2410+0x30
	mov	r3, #0xb
	add	r2, r0, #0
.L2401:
	add	r0, r1, r6
	ldrb	r0, [r0]
	ldrb	r7, [r5]
	cmp	r0, r7
	bne	.L2400	@cond_branch
	add	r0, r1, r4
	strb	r3, [r0]
.L2400:
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L2401	@cond_branch
.L2399:
	mov	r0, #0xe4
	mov	r1, r8
	strh	r0, [r1]
	ldr	r2, .L2410+0x34
	ldr	r0, [r2]
	add	r0, r0, #0x5
	str	r0, [r2]
	ldr	r1, .L2410+0x38
	add	r1, r1, sl
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r7, ip
	ldr	r0, [r7]
	ldr	r1, .L2410+0x3c
	and	r0, r0, r1
	str	r0, [r7]
	b	.L2404
.L2411:
	.align	2, 0
.L2410:
	.word	gBankTarget
	.word	gActionForBanks
	.word	gBankAttacker
	.word	gSharedMem
	.word	0x16010
	.word	gBattleMons
	.word	gDisableStructs
	.word	gChosenMovesByBanks
	.word	gNoOfAllBanks
	.word	gCurrentMove
	.word	gHitMarker
	.word	gTurnOrder
	.word	gUnknown_02024A76
	.word	gBattlescriptCurrInstr
	.word	0x16002
	.word	0xfffffbff
.L2397:
	ldr	r3, .L2412
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2404:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2413:
	.align	2, 0
.L2412:
	.word	gBattlescriptCurrInstr
.Lfe212:
	.size	 atkBA_jumpifnopursuitswitchdmg,.Lfe212-atkBA_jumpifnopursuitswitchdmg
	.align	2, 0
	.type	 atkBB_setsunny,function
	.thumb_func
atkBB_setsunny:
	push	{lr}
	ldr	r2, .L2417
	ldrh	r1, [r2]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2415	@cond_branch
	ldr	r2, .L2417+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2417+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L2416
.L2418:
	.align	2, 0
.L2417:
	.word	gBattleWeather
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L2415:
	mov	r0, #0x20
	strh	r0, [r2]
	ldr	r1, .L2419
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	ldr	r0, .L2419+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L2416:
	ldr	r1, .L2419+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2420:
	.align	2, 0
.L2419:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe213:
	.size	 atkBB_setsunny,.Lfe213-atkBB_setsunny
	.align	2, 0
	.type	 atkBC_maxattackhalvehp,function
	.thumb_func
atkBC_maxattackhalvehp:
	push	{r4, r5, lr}
	ldr	r5, .L2426
	ldr	r4, .L2426+0x4
	ldrb	r0, [r4]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r0, r5
	ldrh	r0, [r2, #0x2c]
	lsr	r1, r0, #0x1
	cmp	r1, #0
	bne	.L2422	@cond_branch
	mov	r1, #0x1
.L2422:
	mov	r0, #0x19
	ldrsb	r0, [r2, r0]
	cmp	r0, #0xb
	bgt	.L2423	@cond_branch
	ldrh	r0, [r2, #0x28]
	cmp	r0, r1
	bls	.L2423	@cond_branch
	mov	r0, #0xc
	strb	r0, [r2, #0x19]
	ldr	r1, .L2426+0x8
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2424	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L2424:
	ldr	r1, .L2426+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2425
.L2427:
	.align	2, 0
.L2426:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L2423:
	ldr	r3, .L2428
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2425:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2429:
	.align	2, 0
.L2428:
	.word	gBattlescriptCurrInstr
.Lfe214:
	.size	 atkBC_maxattackhalvehp,.Lfe214-atkBC_maxattackhalvehp
	.align	2, 0
	.type	 atkBD_copyfoestats,function
	.thumb_func
atkBD_copyfoestats:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r7, .L2436
	ldr	r6, .L2436+0x4
	mov	r4, #0x58
	ldr	r3, .L2436+0x8
	ldr	r5, .L2436+0xc
.L2434:
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r2, r1
	add	r1, r1, r3
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r2, r0
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L2434	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2437:
	.align	2, 0
.L2436:
	.word	gBattlescriptCurrInstr
	.word	gBankAttacker
	.word	gBattleMons+0x18
	.word	gBankTarget
.Lfe215:
	.size	 atkBD_copyfoestats,.Lfe215-atkBD_copyfoestats
	.align	2, 0
	.type	 atkBE_breakfree,function
	.thumb_func
atkBE_breakfree:
	push	{r4, r5, lr}
	ldr	r1, .L2446
	ldr	r5, .L2446+0x4
	ldrb	r2, [r5]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r3, r0, r1
	ldr	r1, [r3]
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2439	@cond_branch
	ldr	r0, .L2446+0x8
	and	r1, r1, r0
	str	r1, [r3]
	ldr	r1, .L2446+0xc
	ldr	r2, .L2446+0x10
	ldrb	r0, [r5]
	ldr	r3, .L2446+0x14
	add	r0, r0, r3
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L2446+0x18
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	sub	r3, r3, #0x1c
	add	r0, r0, r3
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r3, r3, #0x1
	add	r0, r0, r3
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L2446+0x1c
	ldr	r0, .L2446+0x20
	b	.L2445
.L2447:
	.align	2, 0
.L2446:
	.word	gBattleMons
	.word	gBankAttacker
	.word	0xffff1fff
	.word	gBankTarget
	.word	gSharedMem
	.word	0x16020
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapFree
.L2439:
	ldr	r4, .L2448
	lsl	r0, r2, #0x2
	add	r3, r0, r4
	ldr	r1, [r3]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2441	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r3]
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x4
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L2448+0x4
	ldr	r0, .L2448+0x8
	b	.L2445
.L2449:
	.align	2, 0
.L2448:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LeechSeedFree
.L2441:
	add	r0, r2, #0
	bl	GetBankSide
	ldr	r4, .L2450
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2443	@cond_branch
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r2, [r0]
	ldr	r1, .L2450+0x4
	and	r1, r1, r2
	mov	r4, #0x0
	strh	r1, [r0]
	ldrb	r0, [r5]
	bl	GetBankSide
	ldr	r2, .L2450+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	strb	r4, [r1, #0x6]
	bl	b_movescr_stack_push_cursor
	ldr	r1, .L2450+0xc
	ldr	r0, .L2450+0x10
	b	.L2445
.L2451:
	.align	2, 0
.L2450:
	.word	gSideAffecting
	.word	0xffef
	.word	gSideTimer
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SpikesFree
.L2443:
	ldr	r1, .L2452
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L2445:
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2453:
	.align	2, 0
.L2452:
	.word	gBattlescriptCurrInstr
.Lfe216:
	.size	 atkBE_breakfree,.Lfe216-atkBE_breakfree
	.align	2, 0
	.type	 atkBF_set_defense_curl,function
	.thumb_func
atkBF_set_defense_curl:
	ldr	r1, .L2455
	ldr	r0, .L2455+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L2455+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2456:
	.align	2, 0
.L2455:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe217:
	.size	 atkBF_set_defense_curl,.Lfe217-atkBF_set_defense_curl
	.align	2, 0
	.type	 atkC0_recoverbasedonsunlight,function
	.thumb_func
atkC0_recoverbasedonsunlight:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L2466
	ldr	r5, .L2466+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	ldr	r7, .L2466+0x8
	ldrb	r0, [r5]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	beq	.L2458	@cond_branch
	ldr	r4, .L2466+0xc
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L2460	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2460	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2459	@cond_branch
.L2460:
	ldr	r3, .L2466+0x10
	ldr	r2, .L2466+0x8
	ldr	r0, .L2466+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r3]
	add	r1, r3, #0
	b	.L2461
.L2467:
	.align	2, 0
.L2466:
	.word	gBankTarget
	.word	gBankAttacker
	.word	gBattleMons
	.word	gBattleWeather
	.word	gBattleMoveDamage
.L2459:
	ldrh	r1, [r4]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2462	@cond_branch
	ldr	r4, .L2468
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r1, [r0, #0x2c]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0x1e
	bl	__divsi3
	str	r0, [r4]
	add	r1, r4, #0
	b	.L2461
.L2469:
	.align	2, 0
.L2468:
	.word	gBattleMoveDamage
.L2462:
	ldr	r1, .L2470
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r1]
.L2461:
	add	r2, r1, #0
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L2464	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L2464:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r1, .L2470+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2465
.L2471:
	.align	2, 0
.L2470:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L2458:
	ldr	r3, .L2472
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2465:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2473:
	.align	2, 0
.L2472:
	.word	gBattlescriptCurrInstr
.Lfe218:
	.size	 atkC0_recoverbasedonsunlight,.Lfe218-atkC0_recoverbasedonsunlight
	.align	2, 0
	.type	 atkC1_hidden_power,function
	.thumb_func
atkC1_hidden_power:
	.syntax unified
push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    ldr r2, _08029894 @ =gBattleMons
    ldr r0, _08029898 @ =gBankAttacker
    ldrb r1, [r0]
    movs r0, 0x58
    adds r4, r1, 0
    muls r4, r0
    adds r4, r2
    ldrb r0, [r4, 0x14]
    mov r10, r0
    mov r7, r10
    lsls r7, 27
    adds r0, r7, 0
    lsrs r0, 27
    mov r10, r0
    movs r1, 0x2
    mov r2, r10
    ands r2, r1
    asrs r2, 1
    ldrh r7, [r4, 0x14]
    mov r9, r7
    mov r0, r9
    lsls r0, 22
    mov r9, r0
    lsrs r3, r0, 27
    adds r0, r1, 0
    ands r0, r3
    orrs r2, r0
    ldrb r7, [r4, 0x15]
    mov r8, r7
    mov r0, r8
    lsls r0, 25
    mov r8, r0
    lsrs r3, r0, 27
    adds r0, r1, 0
    ands r0, r3
    lsls r0, 1
    orrs r2, r0
    ldr r6, [r4, 0x14]
    lsls r6, 12
    lsrs r3, r6, 27
    adds r0, r1, 0
    ands r0, r3
    lsls r0, 2
    orrs r2, r0
    ldrh r5, [r4, 0x16]
    lsls r5, 23
    lsrs r3, r5, 27
    adds r0, r1, 0
    ands r0, r3
    lsls r0, 3
    orrs r2, r0
    ldrb r3, [r4, 0x17]
    lsls r3, 26
    lsrs r0, r3, 27
    ands r1, r0
    lsls r1, 4
    orrs r2, r1
    movs r1, 0x1
    adds r4, r1, 0
    mov r7, r10
    ands r4, r7
    mov r0, r9
    lsrs r0, 27
    mov r9, r0
    adds r0, r1, 0
    mov r7, r9
    ands r0, r7
    lsls r0, 1
    orrs r4, r0
    mov r0, r8
    lsrs r0, 27
    mov r8, r0
    adds r0, r1, 0
    mov r7, r8
    ands r0, r7
    lsls r0, 2
    orrs r4, r0
    lsrs r6, 27
    adds r0, r1, 0
    ands r0, r6
    lsls r0, 3
    orrs r4, r0
    lsrs r5, 27
    adds r0, r1, 0
    ands r0, r5
    lsls r0, 4
    orrs r4, r0
    lsrs r3, 27
    ands r1, r3
    lsls r1, 5
    orrs r4, r1
    ldr r5, _0802989C @ =gDynamicBasePower
    lsls r0, r2, 2
    adds r0, r2
    lsls r0, 3
    movs r1, 0x3F
    bl __divsi3
    adds r0, 0x1E
    strh r0, [r5]
    ldr r5, _080298A0 @ =gSharedMem
    lsls r0, r4, 4
    subs r0, r4
    movs r1, 0x3F
    bl __divsi3
    adds r1, r0, 0x1
    ldr r0, _080298A4 @ =0x0001601c
    adds r5, r0
    strb r1, [r5]
    lsls r0, r1, 24
    lsrs r0, 24
    cmp r0, 0x8
    bls _08029876
    adds r0, r1, 0x1
    strb r0, [r5]
_08029876:
    ldrb r0, [r5]
    movs r1, 0xC0
    orrs r0, r1
    strb r0, [r5]
    ldr r1, _080298A8 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x1
    str r0, [r1]
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08029894: .4byte gBattleMons
_08029898: .4byte gBankAttacker
_0802989C: .4byte gDynamicBasePower
_080298A0: .4byte gSharedMem
_080298A4: .4byte 0x0001601c
_080298A8: .4byte gBattlescriptCurrInstr
        .syntax divided
	.code	16
.Lfe219:
	.size	 atkC1_hidden_power,.Lfe219-atkC1_hidden_power
	.align	2, 0
	.type	 atkC2_selectnexttarget,function
	.thumb_func
atkC2_selectnexttarget:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L2483
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L2483+0x4
	ldrb	r1, [r1]
	add	r6, r0, #0
	ldr	r0, .L2483+0x8
	mov	r8, r0
	cmp	r1, #0
	beq	.L2477	@cond_branch
	add	r3, r6, #0
	ldr	r0, .L2483+0xc
	ldrb	r5, [r0]
	ldr	r0, .L2483+0x10
	mov	ip, r0
	add	r4, r1, #0
	ldr	r7, .L2483+0x14
.L2479:
	ldrb	r2, [r3]
	cmp	r2, r5
	beq	.L2478	@cond_branch
	ldrb	r0, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2477	@cond_branch
.L2478:
	add	r0, r2, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcc	.L2479	@cond_branch
.L2477:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2484:
	.align	2, 0
.L2483:
	.word	gBankTarget
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
	.word	gBankAttacker
	.word	gBitTable
	.word	gAbsentBankFlags
.Lfe220:
	.size	 atkC2_selectnexttarget,.Lfe220-atkC2_selectnexttarget
	.align	2, 0
	.type	 atkC3_setfutureattack,function
	.thumb_func
atkC3_setfutureattack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	ldr	r0, .L2491
	mov	r8, r0
	ldr	r7, .L2491+0x4
	ldrb	r1, [r7]
	add	r0, r1, r0
	ldrb	r6, [r0]
	cmp	r6, #0
	beq	.L2486	@cond_branch
	ldr	r3, .L2491+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2487
.L2492:
	.align	2, 0
.L2491:
	.word	gWishFutureKnock
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.L2486:
	lsl	r1, r1, #0x1
	mov	r0, r8
	add	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r2, .L2493
	mov	r9, r2
	ldrh	r0, [r2]
	strh	r0, [r1]
	mov	r0, r8
	add	r0, r0, #0x4
	ldrb	r4, [r7]
	add	r0, r0, r4
	ldr	r5, .L2493+0x4
	ldrb	r1, [r5]
	strb	r1, [r0]
	ldrb	r0, [r7]
	add	r0, r0, r8
	mov	r1, #0x3
	strb	r1, [r0]
	ldr	r4, .L2493+0x8
	ldrb	r0, [r7]
	bl	GetBankIdentity
	mov	r1, #0x1
	mov	sl, r1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldrb	r0, [r5]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L2493+0xc
	add	r0, r0, r2
	ldrb	r1, [r7]
	mul	r1, r1, r4
	add	r1, r1, r2
	mov	r4, r9
	ldrh	r2, [r4]
	str	r6, [sp]
	str	r6, [sp, #0x4]
	ldrb	r4, [r5]
	str	r4, [sp, #0x8]
	ldrb	r4, [r7]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldrb	r1, [r7]
	lsl	r1, r1, #0x2
	mov	r2, r8
	add	r2, r2, #0x8
	add	r1, r1, r2
	str	r0, [r1]
	ldr	r1, .L2493+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L2488	@cond_branch
	ldrb	r4, [r7]
	lsl	r4, r4, #0x2
	add	r4, r4, r2
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L2488:
	mov	r0, r9
	ldrh	r1, [r0]
	ldr	r0, .L2493+0x14
	cmp	r1, r0
	bne	.L2489	@cond_branch
	ldr	r0, .L2493+0x18
	mov	r1, sl
	strb	r1, [r0, #0x5]
	b	.L2490
.L2494:
	.align	2, 0
.L2493:
	.word	gCurrentMove
	.word	gBankAttacker
	.word	gSideAffecting
	.word	gBattleMons
	.word	gProtectStructs
	.word	0x161
	.word	gBattleCommunication
.L2489:
	ldr	r1, .L2495
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L2490:
	ldr	r1, .L2495+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2487:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2496:
	.align	2, 0
.L2495:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe221:
	.size	 atkC3_setfutureattack,.Lfe221-atkC3_setfutureattack
	.align	2, 0
	.type	 atkC4_beat_up,function
	.thumb_func
atkC4_beat_up:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r9
    mov r6, r8
    push {r6,r7}
    ldr r0, _08029A8C @ =gBankAttacker
    ldrb r0, [r0]
    bl GetBankSide
    lsls r0, 24
    ldr r7, _08029A90 @ =gEnemyParty
    cmp r0, 0
    bne _08029A62
    ldr r7, _08029A94 @ =gPlayerParty
_08029A62:
    ldr r2, _08029A98 @ =gBattleMons
    ldr r0, _08029A9C @ =gBankTarget
    ldrb r1, [r0]
    movs r0, 0x58
    muls r0, r1
    adds r0, r2
    ldrh r0, [r0, 0x28]
    cmp r0, 0
    bne _08029AA4
    ldr r3, _08029AA0 @ =gBattlescriptCurrInstr
    ldr r2, [r3]
    ldrb r1, [r2, 0x1]
    ldrb r0, [r2, 0x2]
    lsls r0, 8
    orrs r1, r0
    ldrb r0, [r2, 0x3]
    lsls r0, 16
    orrs r1, r0
    ldrb r0, [r2, 0x4]
    b _08029C40
    .align 2, 0
_08029A8C: .4byte gBankAttacker
_08029A90: .4byte gEnemyParty
_08029A94: .4byte gPlayerParty
_08029A98: .4byte gBattleMons
_08029A9C: .4byte gBankTarget
_08029AA0: .4byte gBattlescriptCurrInstr
_08029AA4:
    ldr r6, _08029BE0 @ =gBattleCommunication
    ldrb r0, [r6]
    mov r8, r0
    cmp r0, 0x5
    bls _08029AB0
    b _08029C0C
_08029AB0:
    adds r4, r6, 0
    movs r5, 0x64
_08029AB4:
    ldrb r0, [r4]
    muls r0, r5
    adds r0, r7, r0
    movs r1, 0x39
    bl GetMonData
    cmp r0, 0
    beq _08029AF8
    ldrb r0, [r6]
    muls r0, r5
    adds r0, r7, r0
    movs r1, 0x41
    bl GetMonData
    cmp r0, 0
    beq _08029AF8
    ldrb r0, [r4]
    muls r0, r5
    adds r0, r7, r0
    movs r1, 0x41
    bl GetMonData
    movs r1, 0xCE
    lsls r1, 1
    cmp r0, r1
    beq _08029AF8
    ldrb r0, [r4]
    muls r0, r5
    adds r0, r7, r0
    movs r1, 0x37
    bl GetMonData
    cmp r0, 0
    beq _08029B08
_08029AF8:
    ldrb r0, [r4]
    adds r0, 0x1
    strb r0, [r4]
    adds r6, r4, 0
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x5
    bls _08029AB4
_08029B08:
    ldr r1, _08029BE0 @ =gBattleCommunication
    mov r9, r1
    ldrb r2, [r1]
    cmp r2, 0x5
    bhi _08029C0C
    ldr r1, _08029BE4 @ =gBattleTextBuff1
    movs r0, 0xFD
    strb r0, [r1]
    movs r0, 0x4
    strb r0, [r1, 0x1]
    ldr r6, _08029BE8 @ =gBankAttacker
    ldrb r0, [r6]
    strb r0, [r1, 0x2]
    strb r2, [r1, 0x3]
    movs r0, 0xFF
    strb r0, [r1, 0x4]
    ldr r1, _08029BEC @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x9
    str r0, [r1]
    ldr r2, _08029BF0 @ =gBattleMoveDamage
    mov r8, r2
    ldr r5, _08029BF4 @ =gBaseStats
    mov r1, r9
    ldrb r0, [r1]
    movs r4, 0x64
    muls r0, r4
    adds r0, r7, r0
    movs r1, 0xB
    bl GetMonData
    lsls r1, r0, 3
    subs r1, r0
    lsls r1, 2
    adds r1, r5
    ldrb r3, [r1, 0x1]
    mov r2, r8
    str r3, [r2]
    ldr r2, _08029BF8 @ =gBattleMoves
    ldr r0, _08029BFC @ =gCurrentMove
    ldrh r1, [r0]
    lsls r0, r1, 1
    adds r0, r1
    lsls r0, 2
    adds r0, r2
    ldrb r0, [r0, 0x1]
    muls r0, r3
    mov r1, r8
    str r0, [r1]
    mov r2, r9
    ldrb r0, [r2]
    muls r0, r4
    adds r0, r7, r0
    movs r1, 0x38
    bl GetMonData
    lsls r0, 1
    movs r1, 0x5
    bl __udivsi3
    adds r0, 0x2
    mov r2, r8
    ldr r1, [r2]
    muls r0, r1
    str r0, [r2]
    ldr r3, _08029C00 @ =gBattleMons
    ldr r1, _08029C04 @ =gBankTarget
    ldrb r2, [r1]
    movs r1, 0x58
    muls r1, r2
    adds r1, r3
    ldrh r2, [r1]
    lsls r1, r2, 3
    subs r1, r2
    lsls r1, 2
    adds r1, r5
    ldrb r1, [r1, 0x2]
    bl __divsi3
    mov r1, r8
    str r0, [r1]
    movs r1, 0x32
    bl __divsi3
    adds r2, r0, 0x2
    mov r0, r8
    str r2, [r0]
    ldr r1, _08029C08 @ =gProtectStructs
    ldrb r0, [r6]
    lsls r0, 4
    adds r0, r1
    ldrb r0, [r0]
    lsls r0, 28
    cmp r0, 0
    bge _08029BD4
    lsls r0, r2, 4
    subs r0, r2
    movs r1, 0xA
    bl __divsi3
    mov r1, r8
    str r0, [r1]
_08029BD4:
    mov r2, r9
    ldrb r0, [r2]
    adds r0, 0x1
    strb r0, [r2]
    b _08029C46
    .align 2, 0
_08029BE0: .4byte gBattleCommunication
_08029BE4: .4byte gBattleTextBuff1
_08029BE8: .4byte gBankAttacker
_08029BEC: .4byte gBattlescriptCurrInstr
_08029BF0: .4byte gBattleMoveDamage
_08029BF4: .4byte gBaseStats
_08029BF8: .4byte gBattleMoves
_08029BFC: .4byte gCurrentMove
_08029C00: .4byte gBattleMons
_08029C04: .4byte gBankTarget
_08029C08: .4byte gProtectStructs
_08029C0C:
    mov r0, r8
    cmp r0, 0
    beq _08029C2C
    ldr r3, _08029C28 @ =gBattlescriptCurrInstr
    ldr r2, [r3]
    ldrb r1, [r2, 0x1]
    ldrb r0, [r2, 0x2]
    lsls r0, 8
    orrs r1, r0
    ldrb r0, [r2, 0x3]
    lsls r0, 16
    orrs r1, r0
    ldrb r0, [r2, 0x4]
    b _08029C40
    .align 2, 0
_08029C28: .4byte gBattlescriptCurrInstr
_08029C2C:
    ldr r3, _08029C54 @ =gBattlescriptCurrInstr
    ldr r2, [r3]
    ldrb r1, [r2, 0x5]
    ldrb r0, [r2, 0x6]
    lsls r0, 8
    orrs r1, r0
    ldrb r0, [r2, 0x7]
    lsls r0, 16
    orrs r1, r0
    ldrb r0, [r2, 0x8]
_08029C40:
    lsls r0, 24
    orrs r1, r0
    str r1, [r3]
_08029C46:
    pop {r3,r4}
    mov r8, r3
    mov r9, r4
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08029C54: .4byte gBattlescriptCurrInstr
        .syntax divided
	.code	16
.Lfe222:
	.size	 atkC4_beat_up,.Lfe222-atkC4_beat_up
	.align	2, 0
	.type	 atkC5_hidepreattack,function
	.thumb_func
atkC5_hidepreattack:
	push	{lr}
	ldr	r0, .L2508
	ldrh	r1, [r0]
	cmp	r1, #0x5b
	beq	.L2502	@cond_branch
	cmp	r1, #0x5b
	bgt	.L2506	@cond_branch
	cmp	r1, #0x13
	beq	.L2501	@cond_branch
	b	.L2499
.L2509:
	.align	2, 0
.L2508:
	.word	gCurrentMove
.L2506:
	ldr	r0, .L2510
	cmp	r1, r0
	beq	.L2503	@cond_branch
	add	r0, r0, #0x31
	cmp	r1, r0
	bne	.L2499	@cond_branch
.L2501:
	ldr	r2, .L2510+0x4
	ldr	r0, .L2510+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x40
	b	.L2507
.L2511:
	.align	2, 0
.L2510:
	.word	0x123
	.word	gStatuses3
	.word	gBankAttacker
.L2502:
	ldr	r2, .L2512
	ldr	r0, .L2512+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	b	.L2507
.L2513:
	.align	2, 0
.L2512:
	.word	gStatuses3
	.word	gBankAttacker
.L2503:
	ldr	r2, .L2514
	ldr	r0, .L2514+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xb
.L2507:
	orr	r0, r0, r2
	str	r0, [r1]
.L2499:
	ldr	r1, .L2514+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2515:
	.align	2, 0
.L2514:
	.word	gStatuses3
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe223:
	.size	 atkC5_hidepreattack,.Lfe223-atkC5_hidepreattack
	.align	2, 0
	.type	 atkC6_unhidepostattack,function
	.thumb_func
atkC6_unhidepostattack:
	push	{lr}
	ldr	r0, .L2526
	ldrh	r1, [r0]
	cmp	r1, #0x5b
	beq	.L2520	@cond_branch
	cmp	r1, #0x5b
	bgt	.L2524	@cond_branch
	cmp	r1, #0x13
	beq	.L2519	@cond_branch
	b	.L2517
.L2527:
	.align	2, 0
.L2526:
	.word	gCurrentMove
.L2524:
	ldr	r0, .L2528
	cmp	r1, r0
	beq	.L2521	@cond_branch
	add	r0, r0, #0x31
	cmp	r1, r0
	bne	.L2517	@cond_branch
.L2519:
	ldr	r2, .L2528+0x4
	ldr	r0, .L2528+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x41
	neg	r2, r2
	b	.L2525
.L2529:
	.align	2, 0
.L2528:
	.word	0x123
	.word	gStatuses3
	.word	gBankAttacker
.L2520:
	ldr	r2, .L2530
	ldr	r0, .L2530+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x81
	neg	r2, r2
	b	.L2525
.L2531:
	.align	2, 0
.L2530:
	.word	gStatuses3
	.word	gBankAttacker
.L2521:
	ldr	r2, .L2532
	ldr	r0, .L2532+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	ldr	r2, .L2532+0x8
.L2525:
	and	r0, r0, r2
	str	r0, [r1]
.L2517:
	ldr	r1, .L2532+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2533:
	.align	2, 0
.L2532:
	.word	gStatuses3
	.word	gBankAttacker
	.word	0xfffbffff
	.word	gBattlescriptCurrInstr
.Lfe224:
	.size	 atkC6_unhidepostattack,.Lfe224-atkC6_unhidepostattack
	.align	2, 0
	.type	 atkC7_setminimize,function
	.thumb_func
atkC7_setminimize:
	push	{lr}
	ldr	r0, .L2536
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2535	@cond_branch
	ldr	r2, .L2536+0x4
	ldr	r0, .L2536+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	orr	r0, r0, r2
	str	r0, [r1]
.L2535:
	ldr	r1, .L2536+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2537:
	.align	2, 0
.L2536:
	.word	gHitMarker
	.word	gStatuses3
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe225:
	.size	 atkC7_setminimize,.Lfe225-atkC7_setminimize
	.align	2, 0
	.type	 atkC8_sethail,function
	.thumb_func
atkC8_sethail:
	push	{lr}
	ldr	r3, .L2541
	ldrh	r1, [r3]
	mov	r2, #0x80
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2539	@cond_branch
	ldr	r2, .L2541+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2541+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L2540
.L2542:
	.align	2, 0
.L2541:
	.word	gBattleWeather
	.word	gBattleMoveFlags
	.word	gBattleCommunication
.L2539:
	strh	r2, [r3]
	ldr	r0, .L2543
	mov	r1, #0x5
	strb	r1, [r0, #0x5]
	ldr	r0, .L2543+0x4
	add	r0, r0, #0x28
	strb	r1, [r0]
.L2540:
	ldr	r1, .L2543+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2544:
	.align	2, 0
.L2543:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe226:
	.size	 atkC8_sethail,.Lfe226-atkC8_sethail
	.align	2, 0
	.type	 atkC9_jumpifattackandspecialattackcannotfall,function
	.thumb_func
atkC9_jumpifattackandspecialattackcannotfall:
	push	{r4, lr}
	ldr	r2, .L2548
	ldr	r0, .L2548+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	mov	r0, #0x19
	ldrsb	r0, [r1, r0]
	add	r3, r2, #0
	cmp	r0, #0
	bne	.L2546	@cond_branch
	mov	r0, #0x1c
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bne	.L2546	@cond_branch
	ldr	r0, .L2548+0x8
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L2546	@cond_branch
	ldr	r3, .L2548+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2547
.L2549:
	.align	2, 0
.L2548:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L2546:
	ldr	r4, .L2550
	ldr	r0, .L2550+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L2550+0x8
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x28]
	str	r0, [r2]
	ldr	r1, .L2550+0xc
	mov	r0, #0x0
	bl	EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2550+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2547:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2551:
	.align	2, 0
.L2550:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	0x7fff
	.word	gBattlescriptCurrInstr
.Lfe227:
	.size	 atkC9_jumpifattackandspecialattackcannotfall,.Lfe227-atkC9_jumpifattackandspecialattackcannotfall
	.align	2, 0
	.type	 atkCA_setforcedtarget,function
	.thumb_func
atkCA_setforcedtarget:
	push	{r4, r5, lr}
	ldr	r4, .L2553
	ldrb	r0, [r4]
	bl	GetBankSide
	ldr	r5, .L2553+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r4]
	strb	r0, [r1, #0x9]
	ldr	r1, .L2553+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2554:
	.align	2, 0
.L2553:
	.word	gBankAttacker
	.word	gSideTimer
	.word	gBattlescriptCurrInstr
.Lfe228:
	.size	 atkCA_setforcedtarget,.Lfe228-atkCA_setforcedtarget
	.align	2, 0
	.type	 atkCB_setcharge,function
	.thumb_func
atkCB_setcharge:
	push	{r4, lr}
	ldr	r0, .L2556
	ldr	r3, .L2556+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r4, .L2556+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x12]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x12]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x12]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x12]
	ldr	r1, .L2556+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2557:
	.align	2, 0
.L2556:
	.word	gStatuses3
	.word	gBankAttacker
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.Lfe229:
	.size	 atkCB_setcharge,.Lfe229-atkCB_setcharge
	.align	2, 0
	.type	 atkCC_callterrainattack,function
	.thumb_func
atkCC_callterrainattack:
	push	{r4, lr}
	ldr	r2, .L2559
	ldr	r0, [r2]
	ldr	r1, .L2559+0x4
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L2559+0x8
	ldr	r1, .L2559+0xc
	ldr	r0, .L2559+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L2559+0x14
	strb	r0, [r1]
	ldr	r3, .L2559+0x18
	ldr	r2, .L2559+0x1c
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	b_movescr_stack_push
	ldr	r1, .L2559+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2560:
	.align	2, 0
.L2559:
	.word	gHitMarker
	.word	0xfffffbff
	.word	gCurrentMove
	.word	sNaturePowerMoves
	.word	gBattleTerrain
	.word	gBankTarget
	.word	gBattleScriptsEffectsTable
	.word	gBattleMoves
	.word	gBattlescriptCurrInstr
.Lfe230:
	.size	 atkCC_callterrainattack,.Lfe230-atkCC_callterrainattack
	.align	2, 0
	.type	 atkCD_cureifburnedparalysedorpoisoned,function
	.thumb_func
atkCD_cureifburnedparalysedorpoisoned:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L2564
	ldr	r3, .L2564+0x4
	ldrb	r0, [r3]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r5, r1, #0
	add	r5, r5, #0x4c
	add	r2, r0, r5
	ldr	r0, [r2]
	mov	r1, #0xd8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2562	@cond_branch
	mov	r0, #0x0
	str	r0, [r2]
	ldr	r1, .L2564+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r4, .L2564+0xc
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	b	.L2563
.L2565:
	.align	2, 0
.L2564:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
.L2562:
	ldr	r3, .L2566
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2563:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2567:
	.align	2, 0
.L2566:
	.word	gBattlescriptCurrInstr
.Lfe231:
	.size	 atkCD_cureifburnedparalysedorpoisoned,.Lfe231-atkCD_cureifburnedparalysedorpoisoned
	.align	2, 0
	.type	 atkCE_settorment,function
	.thumb_func
atkCE_settorment:
	push	{lr}
	ldr	r1, .L2571
	ldr	r0, .L2571+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	cmp	r1, #0
	bge	.L2569	@cond_branch
	ldr	r3, .L2571+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2570
.L2572:
	.align	2, 0
.L2571:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.L2569:
	orr	r1, r1, r2
	str	r1, [r0]
	ldr	r1, .L2573
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2570:
	pop	{r0}
	bx	r0
.L2574:
	.align	2, 0
.L2573:
	.word	gBattlescriptCurrInstr
.Lfe232:
	.size	 atkCE_settorment,.Lfe232-atkCE_settorment
	.align	2, 0
	.type	 atkCF_jumpifnodamage,function
	.thumb_func
atkCF_jumpifnodamage:
	push	{lr}
	ldr	r2, .L2579
	ldr	r0, .L2579+0x4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r0, r2, #0x4
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2577	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L2576	@cond_branch
.L2577:
	ldr	r1, .L2579+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2578
.L2580:
	.align	2, 0
.L2579:
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.L2576:
	ldr	r3, .L2581
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2578:
	pop	{r0}
	bx	r0
.L2582:
	.align	2, 0
.L2581:
	.word	gBattlescriptCurrInstr
.Lfe233:
	.size	 atkCF_jumpifnodamage,.Lfe233-atkCF_jumpifnodamage
	.align	2, 0
	.type	 atkD0_settaunt,function
	.thumb_func
atkD0_settaunt:
	push	{r4, lr}
	ldr	r4, .L2586
	ldr	r3, .L2586+0x4
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r4
	ldrb	r1, [r2, #0x13]
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L2584	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x13]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x13]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x13]
	ldr	r1, .L2586+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2585
.L2587:
	.align	2, 0
.L2586:
	.word	gDisableStructs
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.L2584:
	ldr	r3, .L2588
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2585:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2589:
	.align	2, 0
.L2588:
	.word	gBattlescriptCurrInstr
.Lfe234:
	.size	 atkD0_settaunt,.Lfe234-atkD0_settaunt
	.align	2, 0
	.type	 atkD1_set_helpinghand,function
	.thumb_func
atkD1_set_helpinghand:
	push	{r4, lr}
	ldr	r4, .L2593
	ldrb	r0, [r4]
	bl	GetBankIdentity
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankByPlayerAI
	ldr	r3, .L2593+0x4
	strb	r0, [r3]
	ldr	r0, .L2593+0x8
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2591	@cond_branch
	ldr	r0, .L2593+0xc
	ldrb	r1, [r0]
	ldr	r2, .L2593+0x10
	ldrb	r3, [r3]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2591	@cond_branch
	ldr	r1, .L2593+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	blt	.L2591	@cond_branch
	lsl	r0, r3, #0x4
	add	r2, r0, r1
	ldrb	r1, [r2]
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	blt	.L2591	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2593+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2592
.L2594:
	.align	2, 0
.L2593:
	.word	gBankAttacker
	.word	gBankTarget
	.word	gBattleTypeFlags
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.L2591:
	ldr	r3, .L2595
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2592:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2596:
	.align	2, 0
.L2595:
	.word	gBattlescriptCurrInstr
.Lfe235:
	.size	 atkD1_set_helpinghand,.Lfe235-atkD1_set_helpinghand
	.align	2, 0
	.type	 atkD2_swap_items,function
	.thumb_func
atkD2_swap_items:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x4
    ldr r0, _0802A30C @ =gBankAttacker
    ldrb r0, [r0]
    bl GetBankSide
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    bne _0802A24C
    ldr r0, _0802A310 @ =gBattleTypeFlags
    ldrh r1, [r0]
    ldr r0, _0802A314 @ =0x00000902
    ands r0, r1
    cmp r0, 0
    bne _0802A24C
    ldr r0, _0802A318 @ =gTrainerBattleOpponent
    ldrh r1, [r0]
    movs r0, 0x80
    lsls r0, 3
    cmp r1, r0
    bne _0802A2EE
_0802A24C:
    ldr r4, _0802A30C @ =gBankAttacker
    ldrb r0, [r4]
    bl GetBankSide
    lsls r0, 24
    lsrs r2, r0, 24
    ldr r0, _0802A310 @ =gBattleTypeFlags
    ldrh r1, [r0]
    ldr r0, _0802A314 @ =0x00000902
    ands r0, r1
    cmp r0, 0
    bne _0802A290
    ldr r0, _0802A318 @ =gTrainerBattleOpponent
    ldrh r1, [r0]
    movs r0, 0x80
    lsls r0, 3
    cmp r1, r0
    beq _0802A290
    ldr r0, _0802A31C @ =gWishFutureKnock
    adds r0, 0x29
    adds r0, r2, r0
    ldrb r1, [r0]
    ldr r3, _0802A320 @ =gBitTable
    ldr r2, _0802A324 @ =gBattlePartyID
    ldrb r0, [r4]
    lsls r0, 1
    adds r0, r2
    ldrh r0, [r0]
    lsls r0, 2
    adds r0, r3
    ldr r0, [r0]
    ands r1, r0
    cmp r1, 0
    bne _0802A2EE
_0802A290:
    ldr r0, _0802A328 @ =gBattleMons
    mov r9, r0
    ldr r1, _0802A30C @ =gBankAttacker
    ldrb r4, [r1]
    movs r2, 0x58
    mov r8, r2
    mov r0, r8
    muls r0, r4
    mov r3, r9
    adds r5, r0, r3
    ldrh r3, [r5, 0x2E]
    adds r1, r3, 0
    cmp r1, 0
    bne _0802A2BE
    ldr r0, _0802A32C @ =gBankTarget
    ldrb r0, [r0]
    mov r2, r8
    muls r2, r0
    adds r0, r2, 0
    add r0, r9
    ldrh r0, [r0, 0x2E]
    cmp r0, 0
    beq _0802A2EE
_0802A2BE:
    cmp r1, 0xAF
    beq _0802A2EE
    ldr r7, _0802A32C @ =gBankTarget
    ldrb r0, [r7]
    mov r1, r8
    muls r1, r0
    adds r0, r1, 0
    mov r1, r9
    adds r2, r0, r1
    ldrh r1, [r2, 0x2E]
    cmp r1, 0xAF
    beq _0802A2EE
    adds r0, r3, 0
    subs r0, 0x79
    lsls r0, 16
    lsrs r0, 16
    cmp r0, 0xB
    bls _0802A2EE
    adds r0, r1, 0
    subs r0, 0x79
    lsls r0, 16
    lsrs r0, 16
    cmp r0, 0xB
    bhi _0802A334
_0802A2EE:
    ldr r3, _0802A330 @ =gBattlescriptCurrInstr
    ldr r2, [r3]
    ldrb r1, [r2, 0x1]
    ldrb r0, [r2, 0x2]
    lsls r0, 8
    orrs r1, r0
    ldrb r0, [r2, 0x3]
    lsls r0, 16
    orrs r1, r0
    ldrb r0, [r2, 0x4]
    lsls r0, 24
    orrs r1, r0
    str r1, [r3]
    b _0802A49A
    .align 2, 0
_0802A30C: .4byte gBankAttacker
_0802A310: .4byte gBattleTypeFlags
_0802A314: .4byte 0x00000902
_0802A318: .4byte gTrainerBattleOpponent
_0802A31C: .4byte gWishFutureKnock
_0802A320: .4byte gBitTable
_0802A324: .4byte gBattlePartyID
_0802A328: .4byte gBattleMons
_0802A32C: .4byte gBankTarget
_0802A330: .4byte gBattlescriptCurrInstr
_0802A334:
    adds r0, r2, 0
    adds r0, 0x20
    ldrb r0, [r0]
    cmp r0, 0x3C
    bne _0802A36C
    ldr r1, _0802A360 @ =gBattlescriptCurrInstr
    ldr r0, _0802A364 @ =BattleScript_NoItemSteal
    str r0, [r1]
    ldr r1, _0802A368 @ =gLastUsedAbility
    ldrb r0, [r7]
    mov r2, r8
    muls r2, r0
    adds r0, r2, 0
    add r0, r9
    adds r0, 0x20
    ldrb r0, [r0]
    strb r0, [r1]
    ldrb r0, [r7]
    ldrb r1, [r1]
    bl RecordAbilityBattle
    b _0802A49A
    .align 2, 0
_0802A360: .4byte gBattlescriptCurrInstr
_0802A364: .4byte BattleScript_NoItemSteal
_0802A368: .4byte gLastUsedAbility
_0802A36C:
    lsls r0, r4, 1
    ldr r4, _0802A458 @ =gSharedMem + 0x160F0
    adds r6, r0, r4
    ldrh r5, [r5, 0x2E]
    mov r10, r5
    strh r1, [r6]
    ldr r3, _0802A45C @ =gBankAttacker
    ldrb r0, [r3]
    mov r1, r8
    muls r1, r0
    adds r0, r1, 0
    add r0, r9
    movs r1, 0
    strh r1, [r0, 0x2E]
    ldrb r0, [r7]
    mov r2, r8
    muls r2, r0
    adds r0, r2, 0
    add r0, r9
    mov r3, r10
    strh r3, [r0, 0x2E]
    ldr r5, _0802A460 @ =gActiveBank
    ldr r1, _0802A45C @ =gBankAttacker
    ldrb r0, [r1]
    strb r0, [r5]
    str r6, [sp]
    movs r0, 0
    movs r1, 0x2
    movs r2, 0
    movs r3, 0x2
    bl EmitSetAttributes
    ldr r2, _0802A45C @ =gBankAttacker
    ldrb r0, [r2]
    bl MarkBufferBankForExecution
    ldrb r0, [r7]
    strb r0, [r5]
    ldrb r0, [r7]
    mov r3, r8
    muls r3, r0
    adds r0, r3, 0
    mov r1, r9
    adds r1, 0x2E
    adds r0, r1
    str r0, [sp]
    movs r0, 0
    movs r1, 0x2
    movs r2, 0
    movs r3, 0x2
    bl EmitSetAttributes
    ldrb r0, [r7]
    bl MarkBufferBankForExecution
    ldr r0, _0802A464 @ =0xfffe9f10
    adds r4, r0
    ldrb r0, [r7]
    lsls r0, 1
    ldr r2, _0802A468 @ =0x000160e8
    adds r0, r2
    adds r0, r4
    movs r1, 0
    strb r1, [r0]
    ldrb r0, [r7]
    lsls r0, 1
    ldr r1, _0802A46C @ =0x000160e9
    adds r0, r1
    adds r0, r4
    movs r3, 0
    strb r3, [r0]
    ldr r3, _0802A45C @ =gBankAttacker
    ldrb r0, [r3]
    lsls r0, 1
    adds r0, r2
    adds r0, r4
    movs r2, 0
    strb r2, [r0]
    ldrb r0, [r3]
    lsls r0, 1
    adds r0, r1
    adds r0, r4
    strb r2, [r0]
    ldr r1, _0802A470 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x5
    str r0, [r1]
    ldr r1, _0802A474 @ =gBattleTextBuff1
    movs r3, 0xFD
    strb r3, [r1]
    movs r2, 0xA
    strb r2, [r1, 0x1]
    ldrh r0, [r6]
    strb r0, [r1, 0x2]
    ldrh r0, [r6]
    lsrs r0, 8
    strb r0, [r1, 0x3]
    movs r0, 0xFF
    strb r0, [r1, 0x4]
    ldr r1, _0802A478 @ =gBattleTextBuff2
    strb r3, [r1]
    strb r2, [r1, 0x1]
    mov r3, r10
    strb r3, [r1, 0x2]
    mov r2, r10
    lsrs r0, r2, 8
    strb r0, [r1, 0x3]
    movs r0, 0x1
    negs r0, r0
    strb r0, [r1, 0x4]
    cmp r2, 0
    beq _0802A480
    ldrh r0, [r6]
    cmp r0, 0
    beq _0802A494
    ldr r1, _0802A47C @ =gBattleCommunication
    movs r0, 0x2
    b _0802A498
    .align 2, 0
_0802A458: .4byte gSharedMem + 0x160F0
_0802A45C: .4byte gBankAttacker
_0802A460: .4byte gActiveBank
_0802A464: .4byte 0xfffe9f10
_0802A468: .4byte 0x000160e8
_0802A46C: .4byte 0x000160e9
_0802A470: .4byte gBattlescriptCurrInstr
_0802A474: .4byte gBattleTextBuff1
_0802A478: .4byte gBattleTextBuff2
_0802A47C: .4byte gBattleCommunication
_0802A480:
    ldrh r0, [r6]
    cmp r0, 0
    beq _0802A494
    ldr r0, _0802A490 @ =gBattleCommunication
    movs r3, 0
    strb r3, [r0, 0x5]
    b _0802A49A
    .align 2, 0
_0802A490: .4byte gBattleCommunication
_0802A494:
    ldr r1, _0802A4AC @ =gBattleCommunication
    movs r0, 0x1
_0802A498:
    strb r0, [r1, 0x5]
_0802A49A:
    add sp, 0x4
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_0802A4AC: .4byte gBattleCommunication
        .syntax divided
	.code	16
.Lfe236:
	.size	 atkD2_swap_items,.Lfe236-atkD2_swap_items
	.align	2, 0
	.type	 atkD3_copy_ability,function
	.thumb_func
atkD3_copy_ability:
	push	{r4, lr}
	ldr	r3, .L2601
	ldr	r4, .L2601+0x4
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	add	r0, r1, #0
	cmp	r0, #0
	beq	.L2599	@cond_branch
	cmp	r0, #0x19
	beq	.L2599	@cond_branch
	ldr	r0, .L2601+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldr	r1, .L2601+0xc
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L2601+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2600
.L2602:
	.align	2, 0
.L2601:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBankAttacker
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
.L2599:
	ldr	r3, .L2603
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2600:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2604:
	.align	2, 0
.L2603:
	.word	gBattlescriptCurrInstr
.Lfe237:
	.size	 atkD3_copy_ability,.Lfe237-atkD3_copy_ability
	.align	2, 0
	.type	 atkD4_wish_effect,function
	.thumb_func
atkD4_wish_effect:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L2618
	ldr	r2, [r7]
	ldrb	r3, [r2, #0x1]
	cmp	r3, #0
	beq	.L2607	@cond_branch
	cmp	r3, #0x1
	beq	.L2610	@cond_branch
	b	.L2606
.L2619:
	.align	2, 0
.L2618:
	.word	gBattlescriptCurrInstr
.L2607:
	ldr	r1, .L2620
	ldr	r4, .L2620+0x4
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r5, [r4]
	add	r3, r0, r5
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L2617	@cond_branch
	mov	r0, #0x2
	strb	r0, [r3]
	ldrb	r0, [r4]
	add	r1, r1, #0x24
	add	r1, r0, r1
	ldr	r2, .L2620+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [r7]
	add	r0, r0, #0x6
	b	.L2616
.L2621:
	.align	2, 0
.L2620:
	.word	gWishFutureKnock
	.word	gBankAttacker
	.word	gBattlePartyID
.L2610:
	ldr	r1, .L2622
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r4, .L2622+0x4
	ldrb	r0, [r4]
	strb	r0, [r1, #0x2]
	ldr	r0, .L2622+0x8
	add	r0, r0, #0x24
	ldrb	r5, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L2622+0xc
	ldr	r6, .L2622+0x10
	ldrb	r0, [r4]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2611	@cond_branch
	str	r3, [r1]
.L2611:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	bne	.L2612	@cond_branch
.L2617:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L2606
.L2623:
	.align	2, 0
.L2622:
	.word	gBattleTextBuff1
	.word	gBankTarget
	.word	gWishFutureKnock
	.word	gBattleMoveDamage
	.word	gBattleMons
.L2612:
	add	r0, r2, #0x6
.L2616:
	str	r0, [r7]
.L2606:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe238:
	.size	 atkD4_wish_effect,.Lfe238-atkD4_wish_effect
	.align	2, 0
	.type	 atkD5_setroots,function
	.thumb_func
atkD5_setroots:
	push	{lr}
	ldr	r1, .L2627
	ldr	r0, .L2627+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2625	@cond_branch
	ldr	r3, .L2627+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2626
.L2628:
	.align	2, 0
.L2627:
	.word	gStatuses3
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.L2625:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L2629
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2626:
	pop	{r0}
	bx	r0
.L2630:
	.align	2, 0
.L2629:
	.word	gBattlescriptCurrInstr
.Lfe239:
	.size	 atkD5_setroots,.Lfe239-atkD5_setroots
	.align	2, 0
	.type	 atkD6_doubledamagedealtifdamaged,function
	.thumb_func
atkD6_doubledamagedealtifdamaged:
	push	{lr}
	ldr	r3, .L2635
	ldr	r0, .L2635+0x4
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r0, r3, #0x4
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L2634	@cond_branch
	add	r0, r2, r3
	ldr	r1, .L2635+0x8
	ldrb	r0, [r0, #0xc]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L2633	@cond_branch
.L2634:
	add	r0, r3, #0
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L2632	@cond_branch
	add	r0, r2, r3
	ldr	r1, .L2635+0x8
	ldrb	r0, [r0, #0xd]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L2632	@cond_branch
.L2633:
	ldr	r0, .L2635+0xc
	ldr	r1, .L2635+0x10
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
.L2632:
	ldr	r1, .L2635+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2636:
	.align	2, 0
.L2635:
	.word	gProtectStructs
	.word	gBankAttacker
	.word	gBankTarget
	.word	gSharedMem
	.word	0x1601f
	.word	gBattlescriptCurrInstr
.Lfe240:
	.size	 atkD6_doubledamagedealtifdamaged,.Lfe240-atkD6_doubledamagedealtifdamaged
	.align	2, 0
	.type	 atkD7_setyawn,function
	.thumb_func
atkD7_setyawn:
	push	{r4, lr}
	ldr	r1, .L2641
	ldr	r0, .L2641+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r4, r0, r1
	ldr	r2, [r4]
	mov	r0, #0xc0
	lsl	r0, r0, #0x5
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L2639	@cond_branch
	ldr	r1, .L2641+0x8
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2638	@cond_branch
.L2639:
	ldr	r3, .L2641+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2640
.L2642:
	.align	2, 0
.L2641:
	.word	gStatuses3
	.word	gBankTarget
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L2638:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r2, r2, r0
	str	r2, [r4]
	ldr	r1, .L2643
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2640:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2644:
	.align	2, 0
.L2643:
	.word	gBattlescriptCurrInstr
.Lfe241:
	.size	 atkD7_setyawn,.Lfe241-atkD7_setyawn
	.align	2, 0
	.type	 atkD8_setdamagetohealthdifference,function
	.thumb_func
atkD8_setdamagetohealthdifference:
	push	{lr}
	ldr	r2, .L2648
	ldr	r0, .L2648+0x4
	ldrb	r0, [r0]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r3, r0, r2
	ldr	r0, .L2648+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r0, [r3, #0x28]
	ldrh	r2, [r1, #0x28]
	cmp	r0, r2
	bhi	.L2646	@cond_branch
	ldr	r3, .L2648+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2647
.L2649:
	.align	2, 0
.L2648:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.L2646:
	ldr	r2, .L2650
	ldrh	r0, [r3, #0x28]
	ldrh	r1, [r1, #0x28]
	sub	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L2650+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2647:
	pop	{r0}
	bx	r0
.L2651:
	.align	2, 0
.L2650:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe242:
	.size	 atkD8_setdamagetohealthdifference,.Lfe242-atkD8_setdamagetohealthdifference
	.align	2, 0
	.type	 atkD9_scaledamagebyhealthratio,function
	.thumb_func
atkD9_scaledamagebyhealthratio:
	push	{r4, lr}
	ldr	r4, .L2655
	ldrh	r0, [r4]
	cmp	r0, #0
	bne	.L2653	@cond_branch
	ldr	r2, .L2655+0x4
	ldr	r0, .L2655+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r3, [r0, #0x1]
	ldr	r2, .L2655+0xc
	ldr	r0, .L2655+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1, #0x28]
	mul	r0, r0, r3
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L2653	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4]
.L2653:
	ldr	r1, .L2655+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2656:
	.align	2, 0
.L2655:
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe243:
	.size	 atkD9_scaledamagebyhealthratio,.Lfe243-atkD9_scaledamagebyhealthratio
	.align	2, 0
	.type	 atkDA_abilityswap,function
	.thumb_func
atkDA_abilityswap:
	push	{r4, r5, r6, lr}
	ldr	r5, .L2662
	ldr	r0, .L2662+0x4
	ldrb	r0, [r0]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r1, [r2]
	cmp	r1, #0
	bne	.L2660	@cond_branch
	ldr	r0, .L2662+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2659	@cond_branch
.L2660:
	cmp	r1, #0x19
	beq	.L2659	@cond_branch
	ldr	r6, .L2662+0x8
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r3, [r0]
	cmp	r3, #0x19
	beq	.L2659	@cond_branch
	ldr	r0, .L2662+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2658	@cond_branch
.L2659:
	ldr	r3, .L2662+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2661
.L2663:
	.align	2, 0
.L2662:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBankTarget
	.word	gBattleMoveFlags
	.word	gBattlescriptCurrInstr
.L2658:
	ldrb	r1, [r2]
	strb	r3, [r2]
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldr	r1, .L2664
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2661:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2665:
	.align	2, 0
.L2664:
	.word	gBattlescriptCurrInstr
.Lfe244:
	.size	 atkDA_abilityswap,.Lfe244-atkDA_abilityswap
	.align	2, 0
	.type	 atkDB_imprisoneffect,function
	.thumb_func
atkDB_imprisoneffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, .L2692
	ldr	r0, .L2692+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2667	@cond_branch
	b	.L2690
.L2693:
	.align	2, 0
.L2692:
	.word	gStatuses3
	.word	gBankAttacker
.L2689:
	ldr	r0, .L2694
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L2694+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2670
.L2695:
	.align	2, 0
.L2694:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
.L2667:
	add	r0, r2, #0
	bl	sub_801529C
	mov	r6, #0x0
	b	.L2691
.L2672:
	add	r0, r6, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r8, r0
	beq	.L2671	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L2696
	mov	r9, r7
	ldr	r0, .L2696+0x4
	mov	ip, r0
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r2, ip
	add	r2, r2, #0xc
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r3, r0, r2
	mov	r5, r6
	mul	r5, r5, r1
.L2677:
	mov	r2, #0x0
	ldrh	r1, [r3]
	mov	r0, ip
	add	r0, r0, #0xc
	add	r0, r5, r0
.L2681:
	ldrh	r7, [r0]
	cmp	r1, r7
	bne	.L2680	@cond_branch
	cmp	r1, #0
	bne	.L2679	@cond_branch
.L2680:
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L2681	@cond_branch
.L2679:
	cmp	r2, #0x4
	bne	.L2675	@cond_branch
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2677	@cond_branch
.L2675:
	cmp	r4, #0x4
	bne	.L2689	@cond_branch
.L2671:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L2691:
	ldr	r0, .L2696+0x8
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L2672	@cond_branch
.L2670:
	ldr	r0, .L2696+0x8
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L2668	@cond_branch
.L2690:
	ldr	r3, .L2696+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2668:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2697:
	.align	2, 0
.L2696:
	.word	gBankAttacker
	.word	gBattleMons
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
.Lfe245:
	.size	 atkDB_imprisoneffect,.Lfe245-atkDB_imprisoneffect
	.align	2, 0
	.type	 atkDC_setgrudge,function
	.thumb_func
atkDC_setgrudge:
	push	{lr}
	ldr	r1, .L2701
	ldr	r0, .L2701+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x7
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2699	@cond_branch
	ldr	r3, .L2701+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2700
.L2702:
	.align	2, 0
.L2701:
	.word	gStatuses3
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.L2699:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L2703
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2700:
	pop	{r0}
	bx	r0
.L2704:
	.align	2, 0
.L2703:
	.word	gBattlescriptCurrInstr
.Lfe246:
	.size	 atkDC_setgrudge,.Lfe246-atkDC_setgrudge
	.align	2, 0
	.type	 atkDD_weightdamagecalculation,function
	.thumb_func
atkDD_weightdamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r5, #0x0
	ldr	r2, .L2714
	ldrh	r0, [r2]
	ldr	r1, .L2714+0x4
	cmp	r0, r1
	beq	.L2712	@cond_branch
	add	r6, r2, #0
	ldr	r0, .L2714+0x8
	mov	r8, r0
	add	r7, r1, #0
	add	r4, r6, #0
.L2709:
	ldr	r0, .L2714+0xc
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetPokedexHeightWeight
	ldrh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L2707	@cond_branch
	add	r4, r4, #0x4
	add	r5, r5, #0x2
	ldrh	r0, [r4]
	cmp	r0, r7
	bne	.L2709	@cond_branch
.L2707:
	lsl	r0, r5, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	ldr	r0, .L2714+0x4
	cmp	r1, r0
	beq	.L2712	@cond_branch
	ldr	r0, .L2714+0x10
	add	r1, r5, #0x1
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L2713
.L2715:
	.align	2, 0
.L2714:
	.word	sWeightDamage
	.word	0xffff
	.word	gBattleMons
	.word	gBankTarget
	.word	gDynamicBasePower
.L2712:
	ldr	r1, .L2716
	mov	r0, #0x78
	strh	r0, [r1]
.L2713:
	ldr	r1, .L2716+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2717:
	.align	2, 0
.L2716:
	.word	gDynamicBasePower
	.word	gBattlescriptCurrInstr
.Lfe247:
	.size	 atkDD_weightdamagecalculation,.Lfe247-atkDD_weightdamagecalculation
	.align	2, 0
	.type	 atkDE_asistattackselect,function
	.thumb_func
atkDE_asistattackselect:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x8
    movs r0, 0
    mov r10, r0
    ldr r0, _0802AB9C @ =gBankAttacker
    ldrb r0, [r0]
    bl GetBankIdentity
    movs r1, 0x1
    ands r1, r0
    ldr r0, _0802ABA0 @ =gPlayerParty
    str r0, [sp]
    cmp r1, 0
    beq _0802AAAC
    ldr r1, _0802ABA4 @ =gEnemyParty
    str r1, [sp]
_0802AAAC:
    movs r2, 0
_0802AAAE:
    ldr r1, _0802ABA8 @ =gBattlePartyID
    ldr r0, _0802AB9C @ =gBankAttacker
    ldrb r0, [r0]
    lsls r0, 1
    adds r0, r1
    adds r1, r2, 0x1
    str r1, [sp, 0x4]
    ldrh r0, [r0]
    cmp r2, r0
    beq _0802AB54
    movs r0, 0x64
    adds r6, r2, 0
    muls r6, r0
    ldr r0, [sp]
    adds r4, r0, r6
    adds r0, r4, 0
    movs r1, 0x41
    bl GetMonData
    cmp r0, 0
    beq _0802AB54
    adds r0, r4, 0
    movs r1, 0x41
    bl GetMonData
    movs r1, 0xCE
    lsls r1, 1
    cmp r0, r1
    beq _0802AB54
    movs r5, 0
    ldr r1, _0802ABAC @ =0x0000ffff
    mov r8, r1
    mov r9, r6
    mov r1, r10
    lsls r0, r1, 1
    ldr r1, _0802ABB0 @ =gSharedMem + 0x16024
    adds r6, r0, r1
_0802AAF8:
    movs r7, 0
    adds r1, r5, 0
    adds r1, 0xD
    ldr r0, [sp]
    add r0, r9
    bl GetMonData
    lsls r0, 16
    lsrs r4, r0, 16
    adds r0, r4, 0
    bl IsMoveUnchoosable
    lsls r0, 24
    adds r1, r5, 0x1
    cmp r0, 0
    bne _0802AB4E
    ldr r0, _0802ABB4 @ =sUnknown_081FACFE
    ldrh r2, [r0]
    adds r3, r0, 0
    cmp r2, r8
    beq _0802AB42
    cmp r4, r2
    beq _0802AB38
    ldr r5, _0802ABAC @ =0x0000ffff
    adds r2, r3, 0
_0802AB2A:
    adds r2, 0x2
    adds r7, 0x1
    ldrh r0, [r2]
    cmp r0, r5
    beq _0802AB42
    cmp r4, r0
    bne _0802AB2A
_0802AB38:
    lsls r0, r7, 1
    adds r0, r3
    ldrh r0, [r0]
    cmp r0, r8
    bne _0802AB4E
_0802AB42:
    cmp r4, 0
    beq _0802AB4E
    strh r4, [r6]
    adds r6, 0x2
    movs r0, 0x1
    add r10, r0
_0802AB4E:
    adds r5, r1, 0
    cmp r5, 0x3
    ble _0802AAF8
_0802AB54:
    ldr r2, [sp, 0x4]
    cmp r2, 0x5
    ble _0802AAAE
    mov r1, r10
    cmp r1, 0
    beq _0802ABCC
    ldr r2, _0802ABB8 @ =gHitMarker
    ldr r0, [r2]
    ldr r1, _0802ABBC @ =0xfffffbff
    ands r0, r1
    str r0, [r2]
    ldr r4, _0802ABC0 @ =gRandomMove
    bl Random
    movs r1, 0xFF
    ands r1, r0
    mov r0, r10
    muls r0, r1
    asrs r0, 8
    lsls r0, 1
    ldr r1, _0802ABB0 @ =gSharedMem + 0x16024
    adds r0, r1
    ldrh r0, [r0]
    strh r0, [r4]
    ldrh r0, [r4]
    movs r1, 0
    bl GetMoveTarget
    ldr r1, _0802ABC4 @ =gBankTarget
    strb r0, [r1]
    ldr r1, _0802ABC8 @ =gBattlescriptCurrInstr
    ldr r0, [r1]
    adds r0, 0x5
    str r0, [r1]
    b _0802ABE6
    .align 2, 0
_0802AB9C: .4byte gBankAttacker
_0802ABA0: .4byte gPlayerParty
_0802ABA4: .4byte gEnemyParty
_0802ABA8: .4byte gBattlePartyID
_0802ABAC: .4byte 0x0000ffff
_0802ABB0: .4byte gSharedMem + 0x16024
_0802ABB4: .4byte sUnknown_081FACFE
_0802ABB8: .4byte gHitMarker
_0802ABBC: .4byte 0xfffffbff
_0802ABC0: .4byte gRandomMove
_0802ABC4: .4byte gBankTarget
_0802ABC8: .4byte gBattlescriptCurrInstr
_0802ABCC:
    ldr r3, _0802ABF8 @ =gBattlescriptCurrInstr
    ldr r2, [r3]
    ldrb r1, [r2, 0x1]
    ldrb r0, [r2, 0x2]
    lsls r0, 8
    orrs r1, r0
    ldrb r0, [r2, 0x3]
    lsls r0, 16
    orrs r1, r0
    ldrb r0, [r2, 0x4]
    lsls r0, 24
    orrs r1, r0
    str r1, [r3]
_0802ABE6:
    add sp, 0x8
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_0802ABF8: .4byte gBattlescriptCurrInstr
        .syntax divided
	.code	16
.Lfe248:
	.size	 atkDE_asistattackselect,.Lfe248-atkDE_asistattackselect
	.align	2, 0
	.type	 atkDF_setmagiccoat,function
	.thumb_func
atkDF_setmagiccoat:
	push	{lr}
	ldr	r1, .L2722
	ldr	r3, .L2722+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L2722+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L2722+0xc
	ldrb	r1, [r0]
	ldr	r0, .L2722+0x10
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2720	@cond_branch
	ldr	r3, .L2722+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2721
.L2723:
	.align	2, 0
.L2722:
	.word	gBankTarget
	.word	gBankAttacker
	.word	gSpecialStatuses
	.word	gCurrentMoveTurn
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
.L2720:
	ldr	r0, .L2724
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L2724+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2721:
	pop	{r0}
	bx	r0
.L2725:
	.align	2, 0
.L2724:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe249:
	.size	 atkDF_setmagiccoat,.Lfe249-atkDF_setmagiccoat
	.align	2, 0
	.type	 atkE0_setstealstatchange,function
	.thumb_func
atkE0_setstealstatchange:
	push	{lr}
	ldr	r2, .L2729
	ldr	r3, .L2729+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L2729+0x8
	ldrb	r1, [r0]
	ldr	r0, .L2729+0xc
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2727	@cond_branch
	ldr	r3, .L2729+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2728
.L2730:
	.align	2, 0
.L2729:
	.word	gSpecialStatuses
	.word	gBankAttacker
	.word	gCurrentMoveTurn
	.word	gNoOfAllBanks
	.word	gBattlescriptCurrInstr
.L2727:
	ldr	r0, .L2731
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L2731+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2728:
	pop	{r0}
	bx	r0
.L2732:
	.align	2, 0
.L2731:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe250:
	.size	 atkE0_setstealstatchange,.Lfe250-atkE0_setstealstatchange
	.align	2, 0
	.type	 atkE1_intimidate_string_loader,function
	.thumb_func
atkE1_intimidate_string_loader:
	push	{r4, r5, r6, lr}
	ldr	r4, .L2744
	ldr	r1, .L2744+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	sub	r1, r1, #0xda
	add	r4, r4, r1
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L2744+0x8
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r2, #0x1]
	ldr	r3, .L2744+0xc
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r2, #0x2]
	mov	r0, #0xff
	strb	r0, [r2, #0x3]
	ldr	r2, .L2744+0x10
	ldr	r1, .L2744+0x14
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L2743	@cond_branch
	add	r4, r2, #0
	ldr	r6, .L2744+0x18
.L2737:
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	beq	.L2736	@cond_branch
	ldr	r0, .L2744+0x1c
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r1, r1, r0
	ldr	r2, .L2744+0x14
	cmp	r1, #0
	beq	.L2735	@cond_branch
.L2736:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L2744+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r1, #0
	ldrb	r1, [r2]
	cmp	r0, r1
	bcc	.L2737	@cond_branch
.L2735:
	ldr	r0, .L2744+0x10
	ldrb	r0, [r0]
	ldrb	r2, [r2]
	cmp	r0, r2
	bcc	.L2741	@cond_branch
.L2743:
	ldr	r3, .L2744+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2742
.L2745:
	.align	2, 0
.L2744:
	.word	gSharedMem
	.word	0x160dd
	.word	gBattleTextBuff1
	.word	gBattleMons
	.word	gBankTarget
	.word	gNoOfAllBanks
	.word	gBitTable
	.word	gAbsentBankFlags
	.word	gBattlescriptCurrInstr
.L2741:
	ldr	r1, .L2746
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2742:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2747:
	.align	2, 0
.L2746:
	.word	gBattlescriptCurrInstr
.Lfe251:
	.size	 atkE1_intimidate_string_loader,.Lfe251-atkE1_intimidate_string_loader
	.align	2, 0
	.type	 atkE2_switchout_abilities,function
	.thumb_func
atkE2_switchout_abilities:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L2753
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r5, .L2753+0x4
	strb	r0, [r5]
	ldr	r4, .L2753+0x8
	ldrb	r0, [r5]
	mov	r1, #0x58
	mov	ip, r1
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r1, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1e
	bne	.L2749	@cond_branch
	add	r4, r4, #0x4c
	add	r1, r1, r4
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r2, .L2753+0xc
	ldr	r1, .L2753+0x10
	ldrb	r3, [r5]
	ldr	r7, .L2753+0x14
	add	r0, r3, r7
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r0, ip
	mul	r0, r0, r3
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	EmitSetAttributes
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
.L2749:
	ldr	r0, [r6]
	add	r0, r0, #0x2
	str	r0, [r6]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2754:
	.align	2, 0
.L2753:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
	.word	gBitTable
	.word	gSharedMem
	.word	0x16064
.Lfe252:
	.size	 atkE2_switchout_abilities,.Lfe252-atkE2_switchout_abilities
	.align	2, 0
	.type	 atkE3_jumpiffainted,function
	.thumb_func
atkE3_jumpiffainted:
	push	{r4, lr}
	ldr	r4, .L2758
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattleBank
	ldr	r1, .L2758+0x4
	strb	r0, [r1]
	ldr	r2, .L2758+0x8
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L2756	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L2757
.L2759:
	.align	2, 0
.L2758:
	.word	gBattlescriptCurrInstr
	.word	gActiveBank
	.word	gBattleMons
.L2756:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L2757:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe253:
	.size	 atkE3_jumpiffainted,.Lfe253-atkE3_jumpiffainted
	.align	2, 0
	.type	 atkE4_getsecretpowereffect,function
	.thumb_func
atkE4_getsecretpowereffect:
	push	{lr}
	ldr	r0, .L2773
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bhi	.L2770	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L2773+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2774:
	.align	2, 0
.L2773:
	.word	gBattleTerrain
	.word	.L2771
	.align	2, 0
	.align	2, 0
.L2771:
	.word	.L2762
	.word	.L2763
	.word	.L2764
	.word	.L2765
	.word	.L2766
	.word	.L2767
	.word	.L2768
	.word	.L2769
.L2762:
	ldr	r1, .L2775
	mov	r0, #0x2
	b	.L2772
.L2776:
	.align	2, 0
.L2775:
	.word	gBattleCommunication
.L2763:
	ldr	r1, .L2777
	mov	r0, #0x1
	b	.L2772
.L2778:
	.align	2, 0
.L2777:
	.word	gBattleCommunication
.L2764:
	ldr	r1, .L2779
	mov	r0, #0x1b
	b	.L2772
.L2780:
	.align	2, 0
.L2779:
	.word	gBattleCommunication
.L2765:
	ldr	r1, .L2781
	mov	r0, #0x17
	b	.L2772
.L2782:
	.align	2, 0
.L2781:
	.word	gBattleCommunication
.L2766:
	ldr	r1, .L2783
	mov	r0, #0x16
	b	.L2772
.L2784:
	.align	2, 0
.L2783:
	.word	gBattleCommunication
.L2767:
	ldr	r1, .L2785
	mov	r0, #0x18
	b	.L2772
.L2786:
	.align	2, 0
.L2785:
	.word	gBattleCommunication
.L2768:
	ldr	r1, .L2787
	mov	r0, #0x7
	b	.L2772
.L2788:
	.align	2, 0
.L2787:
	.word	gBattleCommunication
.L2769:
	ldr	r1, .L2789
	mov	r0, #0x8
	b	.L2772
.L2790:
	.align	2, 0
.L2789:
	.word	gBattleCommunication
.L2770:
	ldr	r1, .L2791
	mov	r0, #0x5
.L2772:
	strb	r0, [r1, #0x3]
	ldr	r1, .L2791+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2792:
	.align	2, 0
.L2791:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe254:
	.size	 atkE4_getsecretpowereffect,.Lfe254-atkE4_getsecretpowereffect
	.align	2, 0
	.type	 atkE5_pickup,function
	.thumb_func
atkE5_pickup:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r7, #0x0
	ldr	r0, .L2808
	mov	r9, r0
	ldr	r1, .L2808+0x4
	mov	r8, r1
.L2797:
	mov	r0, #0x64
	mov	r4, r7
	mul	r4, r4, r0
	ldr	r0, .L2808+0x8
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L2798	@cond_branch
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x17]
	b	.L2799
.L2809:
	.align	2, 0
.L2808:
	.word	gBaseStats
	.word	sPickupItems
	.word	gPlayerParty
.L2798:
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x16]
.L2799:
	add	r4, r7, #0x1
	cmp	r0, #0x35
	bne	.L2796	@cond_branch
	cmp	r5, #0
	beq	.L2796	@cond_branch
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	beq	.L2796	@cond_branch
	cmp	r6, #0
	bne	.L2796	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L2796	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	mov	r1, r8
	ldrh	r0, [r1, #0x2]
	cmp	r0, r3
	bgt	.L2802	@cond_branch
	add	r1, r1, #0x2
.L2803:
	add	r1, r1, #0x4
	add	r2, r2, #0x2
	cmp	r2, #0x11
	bgt	.L2802	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, r3
	ble	.L2803	@cond_branch
.L2802:
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r1, .L2810
	add	r0, r0, r1
	lsl	r2, r2, #0x1
	add	r2, r2, r8
	mov	r1, #0xc
	bl	SetMonData
.L2796:
	add	r7, r4, #0
	cmp	r7, #0x5
	ble	.L2797	@cond_branch
	ldr	r1, .L2810+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2811:
	.align	2, 0
.L2810:
	.word	gPlayerParty
	.word	gBattlescriptCurrInstr
.Lfe255:
	.size	 atkE5_pickup,.Lfe255-atkE5_pickup
	.align	2, 0
	.type	 atkE6_castform_change_animation,function
	.thumb_func
atkE6_castform_change_animation:
	push	{r4, lr}
	ldr	r4, .L2814
	ldr	r3, .L2814+0x4
	ldr	r1, .L2814+0x8
	add	r0, r3, r1
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L2814+0xc
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2813	@cond_branch
	ldr	r0, .L2814+0x10
	add	r2, r3, r0
	ldrb	r1, [r2]
	mov	r0, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
.L2813:
	ldr	r1, .L2814+0x10
	add	r0, r3, r1
	ldrb	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	EmitBattleAnimation
	ldrb	r0, [r4]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2814+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2815:
	.align	2, 0
.L2814:
	.word	gActiveBank
	.word	gSharedMem
	.word	0x16003
	.word	gBattleMons
	.word	0x1609b
	.word	gBattlescriptCurrInstr
.Lfe256:
	.size	 atkE6_castform_change_animation,.Lfe256-atkE6_castform_change_animation
	.align	2, 0
	.type	 atkE7_castform_data_change,function
	.thumb_func
atkE7_castform_data_change:
	push	{r4, r5, lr}
	ldr	r1, .L2818
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r5, .L2818+0x4
	ldr	r1, .L2818+0x8
	add	r0, r5, r1
	ldrb	r0, [r0]
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L2817	@cond_branch
	ldr	r0, .L2818+0xc
	bl	b_push_move_exec
	sub	r1, r4, #0x1
	ldr	r2, .L2818+0x10
	add	r0, r5, r2
	strb	r1, [r0]
.L2817:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2819:
	.align	2, 0
.L2818:
	.word	gBattlescriptCurrInstr
	.word	gSharedMem
	.word	0x16003
	.word	BattleScript_CastformChange
	.word	0x1609b
.Lfe257:
	.size	 atkE7_castform_data_change,.Lfe257-atkE7_castform_data_change
	.align	2, 0
	.type	 atkE8_settypebasedhalvers,function
	.thumb_func
atkE8_settypebasedhalvers:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r2, .L2828
	ldr	r0, .L2828+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0xc9
	bne	.L2821	@cond_branch
	ldr	r1, .L2828+0x8
	ldr	r0, .L2828+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L2823	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r0, .L2828+0x10
	strb	r4, [r0, #0x5]
	b	.L2827
.L2829:
	.align	2, 0
.L2828:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gStatuses3
	.word	gBankAttacker
	.word	gBattleCommunication
.L2821:
	ldr	r1, .L2830
	ldr	r0, .L2830+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0xa
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L2823	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L2830+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	mov	r4, #0x1
.L2823:
	cmp	r4, #0
	beq	.L2825	@cond_branch
.L2827:
	ldr	r1, .L2830+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2826
.L2831:
	.align	2, 0
.L2830:
	.word	gStatuses3
	.word	gBankAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L2825:
	ldr	r3, .L2832
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2826:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2833:
	.align	2, 0
.L2832:
	.word	gBattlescriptCurrInstr
.Lfe258:
	.size	 atkE8_settypebasedhalvers,.Lfe258-atkE8_settypebasedhalvers
	.align	2, 0
	.type	 atkE9_setweatherballtype,function
	.thumb_func
atkE9_setweatherballtype:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2835	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2835	@cond_branch
	ldr	r3, .L2845
	ldrb	r0, [r3]
	ldr	r2, .L2845+0x4
	cmp	r0, #0
	beq	.L2836	@cond_branch
	ldr	r0, .L2845+0x8
	add	r1, r2, r0
	mov	r0, #0x2
	strb	r0, [r1]
.L2836:
	ldrh	r1, [r3]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2837	@cond_branch
	ldr	r0, .L2845+0xc
	add	r1, r2, r0
	mov	r0, #0x8b
	strb	r0, [r1]
	b	.L2835
.L2846:
	.align	2, 0
.L2845:
	.word	gBattleWeather
	.word	gSharedMem
	.word	0x1601f
	.word	0x1601c
.L2837:
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2839	@cond_branch
	ldr	r0, .L2847
	add	r1, r2, r0
	mov	r0, #0x85
	strb	r0, [r1]
	b	.L2835
.L2848:
	.align	2, 0
.L2847:
	.word	0x1601c
.L2839:
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2841	@cond_branch
	ldr	r0, .L2849
	add	r1, r2, r0
	mov	r0, #0x8a
	strb	r0, [r1]
	b	.L2835
.L2850:
	.align	2, 0
.L2849:
	.word	0x1601c
.L2841:
	mov	r3, #0x80
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2843	@cond_branch
	ldr	r0, .L2851
	add	r1, r2, r0
	mov	r0, #0x8f
	strb	r0, [r1]
	b	.L2835
.L2852:
	.align	2, 0
.L2851:
	.word	0x1601c
.L2843:
	ldr	r1, .L2853
	add	r0, r2, r1
	strb	r3, [r0]
.L2835:
	ldr	r1, .L2853+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L2854:
	.align	2, 0
.L2853:
	.word	0x1601c
	.word	gBattlescriptCurrInstr
.Lfe259:
	.size	 atkE9_setweatherballtype,.Lfe259-atkE9_setweatherballtype
	.align	2, 0
	.type	 atkEA_recycleitem,function
	.thumb_func
atkEA_recycleitem:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	ldr	r7, .L2858
	ldr	r0, .L2858+0x4
	ldrb	r0, [r0]
	strb	r0, [r7]
	ldrb	r2, [r7]
	lsl	r1, r2, #0x1
	ldr	r0, .L2858+0x8
	add	r6, r1, r0
	ldrh	r5, [r6]
	cmp	r5, #0
	beq	.L2856	@cond_branch
	ldr	r4, .L2858+0xc
	mov	r3, #0x58
	mov	r0, r2
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	bne	.L2856	@cond_branch
	ldr	r1, .L2858+0x10
	strh	r5, [r1]
	strh	r0, [r6]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r1, r4, #0
	add	r1, r1, #0x2e
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	EmitSetAttributes
	ldrb	r0, [r7]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2858+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2857
.L2859:
	.align	2, 0
.L2858:
	.word	gActiveBank
	.word	gBankAttacker
	.word	gSharedMem+0x160cc
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.L2856:
	ldr	r3, .L2860
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2857:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2861:
	.align	2, 0
.L2860:
	.word	gBattlescriptCurrInstr
.Lfe260:
	.size	 atkEA_recycleitem,.Lfe260-atkEA_recycleitem
	.align	2, 0
	.type	 atkEB_settypetoterrain,function
	.thumb_func
atkEB_settypetoterrain:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L2865
	mov	r8, r0
	ldr	r7, .L2865+0x4
	ldrb	r0, [r7]
	mov	r6, #0x58
	mul	r0, r0, r6
	mov	r1, r8
	add	r3, r0, r1
	mov	r0, #0x21
	add	r0, r0, r3
	mov	ip, r0
	ldr	r5, .L2865+0x8
	ldr	r4, .L2865+0xc
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r2, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	add	r1, r2, #0
	cmp	r0, r1
	beq	.L2863	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L2863	@cond_branch
	mov	r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldr	r1, .L2865+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L2865+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2864
.L2866:
	.align	2, 0
.L2865:
	.word	gBattleMons
	.word	gBankAttacker
	.word	sTerrainToType
	.word	gBattleTerrain
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L2863:
	ldr	r3, .L2867
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2864:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2868:
	.align	2, 0
.L2867:
	.word	gBattlescriptCurrInstr
.Lfe261:
	.size	 atkEB_settypetoterrain,.Lfe261-atkEB_settypetoterrain
	.align	2, 0
	.type	 atkEC_pursuit_sth,function
	.thumb_func
atkEC_pursuit_sth:
	push	{r4, r5, lr}
	ldr	r5, .L2872
	ldrb	r0, [r5]
	bl	GetBankIdentity
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankByPlayerAI
	ldr	r4, .L2872+0x4
	strb	r0, [r4]
	ldr	r0, .L2872+0x8
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2870	@cond_branch
	ldr	r0, .L2872+0xc
	ldrb	r1, [r0]
	ldr	r2, .L2872+0x10
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2870	@cond_branch
	ldr	r0, .L2872+0x14
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2870	@cond_branch
	ldr	r1, .L2872+0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r2, [r0]
	cmp	r2, #0xe4
	bne	.L2870	@cond_branch
	ldr	r0, .L2872+0x1c
	add	r0, r3, r0
	mov	r1, #0xb
	strb	r1, [r0]
	ldr	r0, .L2872+0x20
	strh	r2, [r0]
	ldr	r1, .L2872+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L2872+0x28
	ldr	r0, .L2872+0x2c
	add	r2, r1, r0
	mov	r0, #0x1
	strb	r0, [r2]
	ldrb	r0, [r5]
	ldr	r2, .L2872+0x30
	add	r1, r1, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	strb	r0, [r5]
	b	.L2871
.L2873:
	.align	2, 0
.L2872:
	.word	gBankAttacker
	.word	gActiveBank
	.word	gBattleTypeFlags
	.word	gAbsentBankFlags
	.word	gBitTable
	.word	gActionForBanks
	.word	gChosenMovesByBanks
	.word	gUnknown_02024A76
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	gSharedMem
	.word	0x16002
	.word	0x160a7
.L2870:
	ldr	r3, .L2874
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2871:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2875:
	.align	2, 0
.L2874:
	.word	gBattlescriptCurrInstr
.Lfe262:
	.size	 atkEC_pursuit_sth,.Lfe262-atkEC_pursuit_sth
	.align	2, 0
	.type	 atkED_802B4B4,function
	.thumb_func
atkED_802B4B4:
	push	{r4, r5, lr}
	ldr	r1, .L2879
	ldr	r3, .L2879+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L2879+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r1, #0
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L2877	@cond_branch
	ldr	r0, .L2879+0xc
	ldr	r5, .L2879+0x10
	add	r1, r0, r5
	ldrb	r1, [r1]
	strb	r1, [r2]
	strb	r1, [r3]
	b	.L2878
.L2880:
	.align	2, 0
.L2879:
	.word	gEffectBank
	.word	gBankAttacker
	.word	gBankTarget
	.word	gSharedMem
	.word	0x16003
.L2877:
	ldr	r0, .L2881
	ldr	r3, .L2881+0x4
	add	r1, r0, r3
	ldrb	r1, [r1]
	strb	r1, [r2]
.L2878:
	ldrb	r1, [r4]
	ldr	r5, .L2881+0x4
	add	r0, r0, r5
	strb	r1, [r0]
	ldr	r1, .L2881+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2882:
	.align	2, 0
.L2881:
	.word	gSharedMem
	.word	0x16003
	.word	gBattlescriptCurrInstr
.Lfe263:
	.size	 atkED_802B4B4,.Lfe263-atkED_802B4B4
	.align	2, 0
	.type	 atkEE_removelightscreenreflect,function
	.thumb_func
atkEE_removelightscreenreflect:
	push	{r4, lr}
	ldr	r0, .L2888
	ldrb	r0, [r0]
	bl	GetBankSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L2888+0x4
	lsl	r3, r0, #0x1
	add	r0, r3, r0
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L2885	@cond_branch
	ldrb	r2, [r4, #0x1]
	cmp	r2, #0
	beq	.L2884	@cond_branch
.L2885:
	ldr	r2, .L2888+0x8
	add	r2, r3, r2
	ldrh	r1, [r2]
	ldr	r0, .L2888+0xc
	and	r0, r0, r1
	mov	r3, #0x0
	ldr	r1, .L2888+0x10
	and	r0, r0, r1
	strh	r0, [r2]
	strb	r3, [r4]
	strb	r3, [r4, #0x1]
	ldr	r0, .L2888+0x14
	ldr	r2, .L2888+0x18
	add	r1, r0, r2
	mov	r2, #0x1
	strb	r2, [r1]
	ldr	r3, .L2888+0x1c
	add	r0, r0, r3
	b	.L2887
.L2889:
	.align	2, 0
.L2888:
	.word	gBankAttacker
	.word	gSideTimer
	.word	gSideAffecting
	.word	0xfffe
	.word	0xfffd
	.word	gSharedMem
	.word	0x16002
	.word	0x160a1
.L2884:
	ldr	r0, .L2890
	ldr	r3, .L2890+0x4
	add	r1, r0, r3
	strb	r2, [r1]
	ldr	r1, .L2890+0x8
	add	r0, r0, r1
.L2887:
	strb	r2, [r0]
	ldr	r1, .L2890+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2891:
	.align	2, 0
.L2890:
	.word	gSharedMem
	.word	0x16002
	.word	0x160a1
	.word	gBattlescriptCurrInstr
.Lfe264:
	.size	 atkEE_removelightscreenreflect,.Lfe264-atkEE_removelightscreenreflect
	.align	2, 0
	.globl	atkEF_pokeball_catch_calculation
	.type	 atkEF_pokeball_catch_calculation,function
	.thumb_func
atkEF_pokeball_catch_calculation:
	push	{r4, r5, r6, r7, lr}
	mov	r4, #0x0
	ldr	r0, .L2948
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB29002
	b	.L2892	@long jump
.LCB29002:
	ldr	r5, .L2948+0x4
	ldr	r0, .L2948+0x8
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r6, .L2948+0xc
	mov	r1, #0x1
	eor	r0, r0, r1
	strb	r0, [r6]
	ldr	r0, .L2948+0x10
	ldrh	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2894	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x5
	bl	EmitBallThrow
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2948+0x14
	ldr	r0, .L2948+0x18
	b	.L2944
.L2949:
	.align	2, 0
.L2948:
	.word	gBattleExecBuffer
	.word	gActiveBank
	.word	gBankAttacker
	.word	gBankTarget
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TrainerBallBlock
.L2894:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2896	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4
	bl	EmitBallThrow
	ldrb	r0, [r5]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2950
	ldr	r0, .L2950+0x4
	b	.L2944
.L2951:
	.align	2, 0
.L2950:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WallyBallThrow
.L2896:
	ldr	r0, .L2952
	ldrh	r0, [r0]
	cmp	r0, #0x5
	bne	.L2898	@cond_branch
	ldr	r0, .L2952+0x4
	ldr	r1, .L2952+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r0, r1, #0x8
	sub	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L2899
.L2953:
	.align	2, 0
.L2952:
	.word	gLastUsedItem
	.word	gSharedMem
	.word	0x16089
.L2898:
	ldr	r3, .L2954
	ldr	r2, .L2954+0x4
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r5, [r0, #0x8]
.L2899:
	ldr	r2, .L2954+0x8
	ldrh	r0, [r2]
	cmp	r0, #0x5
	bhi	.LCB29121
	b	.L2900	@long jump
.LCB29121:
	sub	r0, r0, #0x6
	cmp	r0, #0x6
	bls	.LCB29126
	b	.L2922	@long jump
.LCB29126:
	lsl	r0, r0, #0x2
	ldr	r1, .L2954+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2955:
	.align	2, 0
.L2954:
	.word	gBaseStats
	.word	gBattleMons
	.word	gLastUsedItem
	.word	.L2920
	.align	2, 0
	.align	2, 0
.L2920:
	.word	.L2902
	.word	.L2906
	.word	.L2909
	.word	.L2913
	.word	.L2916
	.word	.L2946
	.word	.L2946
.L2902:
	ldr	r2, .L2956
	ldr	r0, .L2956+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r1, #0xb
	beq	.L2945	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xb
	beq	.L2945	@cond_branch
	cmp	r1, #0x6
	beq	.L2945	@cond_branch
	cmp	r0, #0x6
	beq	.L2945	@cond_branch
	b	.L2946
.L2957:
	.align	2, 0
.L2956:
	.word	gBattleMons
	.word	gBankTarget
.L2906:
	bl	Overworld_GetMapTypeOfSaveblockLocation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0xa
	cmp	r0, #0x5
	bne	.L2922	@cond_branch
	mov	r4, #0x23
	b	.L2922
.L2909:
	ldr	r2, .L2958
	ldr	r0, .L2958+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	cmp	r1, #0x27
	bhi	.L2946	@cond_branch
	mov	r0, #0x28
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x9
	bhi	.L2922	@cond_branch
.L2946:
	mov	r4, #0xa
	b	.L2922
.L2959:
	.align	2, 0
.L2958:
	.word	gBattleMons
	.word	gBankTarget
.L2913:
	ldr	r2, .L2960
	ldr	r0, .L2960+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	mov	r4, #0xa
	cmp	r0, #0
	beq	.L2922	@cond_branch
.L2945:
	mov	r4, #0x1e
	b	.L2922
.L2961:
	.align	2, 0
.L2960:
	.word	gBattleMons
	.word	gBankTarget
.L2916:
	ldr	r0, .L2962
	ldrb	r0, [r0, #0x13]
	add	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x28
	bls	.L2922	@cond_branch
	mov	r4, #0x28
	b	.L2922
.L2963:
	.align	2, 0
.L2962:
	.word	gBattleResults
.L2900:
	ldr	r1, .L2964
	ldrh	r0, [r2]
	sub	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0]
.L2922:
	mov	r0, r5
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	ldr	r5, .L2964+0x4
	ldr	r1, .L2964+0x8
	ldrb	r1, [r1]
	mov	r7, #0x58
	mov	r4, r1
	mul	r4, r4, r7
	add	r3, r4, r5
	ldrh	r2, [r3, #0x2c]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	ldrh	r2, [r3, #0x28]
	lsl	r2, r2, #0x1
	sub	r2, r1, r2
	mul	r0, r0, r2
	bl	__divsi3
	add	r6, r0, #0
	add	r5, r5, #0x4c
	add	r4, r4, r5
	ldr	r4, [r4]
	mov	r0, #0x27
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L2923	@cond_branch
	lsl	r6, r6, #0x1
.L2923:
	and	r4, r4, r7
	cmp	r4, #0
	beq	.L2924	@cond_branch
	lsl	r0, r6, #0x4
	sub	r0, r0, r6
	mov	r1, #0xa
	bl	__udivsi3
	add	r6, r0, #0
.L2924:
	ldr	r1, .L2964+0xc
	ldrh	r0, [r1]
	cmp	r0, #0x5
	beq	.L2925	@cond_branch
	cmp	r0, #0x1
	bne	.L2926	@cond_branch
	ldr	r0, .L2964+0x10
	ldrb	r1, [r0, #0x5]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	b	.L2925
.L2965:
	.align	2, 0
.L2964:
	.word	sBallCatchBonuses
	.word	gBattleMons
	.word	gBankTarget
	.word	gLastUsedItem
	.word	gBattleResults
.L2926:
	ldr	r0, .L2966
	ldrh	r1, [r1]
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x34
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L2925	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L2925:
	cmp	r6, #0xfe
	bls	.L2929	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4
	bl	EmitBallThrow
	ldr	r0, .L2966+0x4
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	ldr	r1, .L2966+0x8
	ldr	r0, .L2966+0xc
	str	r0, [r1]
	ldr	r1, .L2966+0x10
	ldr	r0, .L2966+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2966+0x18
	add	r0, r0, r1
	ldr	r2, .L2966+0x1c
	mov	r1, #0x26
	bl	SetMonData
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L2947	@cond_branch
	b	.L2941
.L2967:
	.align	2, 0
.L2966:
	.word	gBattleResults
	.word	gActiveBank
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessBallThrow
	.word	gBattlePartyID
	.word	gBankTarget
	.word	gEnemyParty
	.word	gLastUsedItem
.L2929:
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	add	r1, r6, #0
	bl	__udivsi3
	bl	Sqrt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	Sqrt
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L2968
	add	r1, r6, #0
	bl	__udivsi3
	add	r6, r0, #0
	mov	r4, #0x0
	b	.L2933
.L2969:
	.align	2, 0
.L2968:
	.word	0xffff0
.L2935:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2933:
	cmp	r4, #0x3
	bhi	.L2934	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcc	.L2935	@cond_branch
.L2934:
	ldr	r5, .L2970
	ldrh	r0, [r5]
	cmp	r0, #0x1
	bne	.L2939	@cond_branch
	mov	r4, #0x4
.L2939:
	mov	r0, #0x0
	add	r1, r4, #0
	bl	EmitBallThrow
	ldr	r0, .L2970+0x4
	ldrb	r0, [r0]
	bl	MarkBufferBankForExecution
	cmp	r4, #0x4
	bne	.L2940	@cond_branch
	ldr	r1, .L2970+0x8
	ldr	r0, .L2970+0xc
	str	r0, [r1]
	ldr	r1, .L2970+0x10
	ldr	r0, .L2970+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2970+0x18
	add	r0, r0, r1
	mov	r1, #0x26
	add	r2, r5, #0
	bl	SetMonData
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L2941	@cond_branch
.L2947:
	ldr	r1, .L2970+0x1c
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L2892
.L2971:
	.align	2, 0
.L2970:
	.word	gLastUsedItem
	.word	gActiveBank
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessBallThrow
	.word	gBattlePartyID
	.word	gBankTarget
	.word	gEnemyParty
	.word	gBattleCommunication
.L2941:
	ldr	r1, .L2972
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2892
.L2973:
	.align	2, 0
.L2972:
	.word	gBattleCommunication
.L2940:
	ldr	r0, .L2974
	strb	r4, [r0, #0x5]
	ldr	r1, .L2974+0x4
	ldr	r0, .L2974+0x8
.L2944:
	str	r0, [r1]
.L2892:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2975:
	.align	2, 0
.L2974:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ShakeBallThrow
.Lfe265:
	.size	 atkEF_pokeball_catch_calculation,.Lfe265-atkEF_pokeball_catch_calculation
	.align	2, 0
	.type	 atkF0_copy_caught_poke,function
	.thumb_func
atkF0_copy_caught_poke:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L2977
	mov	r9, r0
	ldr	r5, .L2977+0x4
	ldrb	r0, [r5]
	mov	r4, #0x1
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r6, .L2977+0x8
	add	r0, r0, r6
	bl	GiveMonToPlayer
	ldr	r2, .L2977+0xc
	ldr	r1, .L2977+0x10
	ldrb	r0, [r5]
	eor	r4, r4, r0
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2, #0x28]
	lsl	r4, r4, #0x1
	add	r4, r4, r9
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	add	r2, r2, #0x2a
	mov	r1, #0x2
	bl	GetMonData
	ldr	r1, .L2977+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2978:
	.align	2, 0
.L2977:
	.word	gBattlePartyID
	.word	gBankAttacker
	.word	gEnemyParty
	.word	gBattleResults
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.Lfe266:
	.size	 atkF0_copy_caught_poke,.Lfe266-atkF0_copy_caught_poke
	.align	2, 0
	.type	 atkF1_setpoke_as_caught,function
	.thumb_func
atkF1_setpoke_as_caught:
	push	{r4, r5, r6, lr}
	ldr	r4, .L2984
	ldr	r6, .L2984+0x4
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2980	@cond_branch
	ldr	r3, .L2984+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2981
.L2985:
	.align	2, 0
.L2984:
	.word	gBattleMons
	.word	gBankTarget
	.word	gBattlescriptCurrInstr
.L2980:
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	GetSetPokedexFlag
	ldrb	r0, [r6]
	mov	r2, r0
	mul	r2, r2, r5
	add	r0, r2, r4
	ldrh	r0, [r0]
	cmp	r0, #0xc9
	bne	.L2982	@cond_branch
	ldr	r0, .L2986
	add	r1, r4, #0
	add	r1, r1, #0x48
	add	r1, r2, r1
	ldr	r1, [r1]
	str	r1, [r0, #0x1c]
.L2982:
	ldrb	r0, [r6]
	mov	r2, r0
	mul	r2, r2, r5
	add	r0, r2, r4
	ldrh	r1, [r0]
	mov	r0, #0x9a
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2983	@cond_branch
	ldr	r0, .L2986
	add	r1, r4, #0
	add	r1, r1, #0x48
	add	r1, r2, r1
	ldr	r1, [r1]
	str	r1, [r0, #0x20]
.L2983:
	ldr	r1, .L2986+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2981:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2987:
	.align	2, 0
.L2986:
	.word	gSaveBlock2
	.word	gBattlescriptCurrInstr
.Lfe267:
	.size	 atkF1_setpoke_as_caught,.Lfe267-atkF1_setpoke_as_caught
	.align	2, 0
	.type	 atkF2_display_dex_info,function
	.thumb_func
atkF2_display_dex_info:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	ldr	r7, .L3002
	ldrb	r1, [r7]
	cmp	r1, #0x1
	beq	.L2991	@cond_branch
	cmp	r1, #0x1
	bgt	.L2999	@cond_branch
	cmp	r1, #0
	beq	.L2990	@cond_branch
	b	.L2989
.L3003:
	.align	2, 0
.L3002:
	.word	gBattleCommunication
.L2999:
	cmp	r1, #0x2
	beq	.L2993	@cond_branch
	cmp	r1, #0x3
	bne	.LCB29760
	b	.L2995	@long jump
.LCB29760:
	b	.L2989
.L2990:
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	b	.L3000
.L2991:
	ldr	r0, .L3004
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2989	@cond_branch
	ldr	r4, .L3004+0x4
	ldr	r6, .L3004+0x8
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r6]
	mov	r2, r1
	mul	r2, r2, r5
	add	r1, r4, #0
	add	r1, r1, #0x54
	add	r1, r2, r1
	ldr	r1, [r1]
	add	r4, r4, #0x48
	add	r2, r2, r4
	ldr	r2, [r2]
	bl	sub_809070C
	strb	r0, [r7, #0x1]
	b	.L3001
.L3005:
	.align	2, 0
.L3004:
	.word	gPaletteFade
	.word	gBattleMons
	.word	gBankTarget
.L2993:
	ldr	r0, .L3006
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2989	@cond_branch
	ldr	r0, .L3006+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L3006+0x8
	cmp	r1, r0
	bne	.L2989	@cond_branch
	ldr	r2, .L3006+0xc
	ldrb	r1, [r7, #0x1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r4, [r0, #0x4]
	cmp	r4, #0
	bne	.L2989	@cond_branch
	ldr	r0, .L3006+0x10
	ldr	r1, .L3006+0x14
	bl	LZDecompressVram
	ldr	r0, .L3006+0x18
	ldr	r1, .L3006+0x1c
	bl	LZDecompressVram
	ldr	r0, .L3006+0x20
	mov	r1, #0x20
	mov	r2, #0x60
	bl	LoadCompressedPalette
	ldr	r1, .L3006+0x24
	ldr	r2, .L3006+0x28
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L3006+0x2c
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L3006+0x30
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
.L3000:
	bl	BeginNormalPaletteFade
.L3001:
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	strb	r0, [r7]
	b	.L2989
.L3007:
	.align	2, 0
.L3006:
	.word	gPaletteFade
	.word	gMain
	.word	sub_800F808
	.word	gTasks
	.word	gBattleTerrainTiles_Building
	.word	0x6008000
	.word	gBattleTerrainTilemap_Building
	.word	0x600d000
	.word	gBattleTerrainPalette_BattleTower
	.word	0x400000e
	.word	0x5a0b
	.word	gUnknown_030041B0
	.word	0xfffc
.L2995:
	ldr	r0, .L3008
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2989	@cond_branch
	ldr	r1, .L3008+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2989:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3009:
	.align	2, 0
.L3008:
	.word	gPaletteFade
	.word	gBattlescriptCurrInstr
.Lfe268:
	.size	 atkF2_display_dex_info,.Lfe268-atkF2_display_dex_info
	.align	2, 0
	.globl	sub_802BBD4
	.type	 sub_802BBD4,function
	.thumb_func
sub_802BBD4:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    ldr r4, [sp, 0x20]
    lsls r0, 24
    lsrs r6, r0, 24
    lsls r1, 24
    lsrs r1, 24
    mov r12, r1
    lsls r2, 24
    lsrs r5, r2, 24
    lsls r3, 24
    lsrs r7, r3, 24
    lsls r4, 24
    lsrs r4, 24
    mov r8, r4
    mov r2, r12
    cmp r2, r7
    bgt _0802BC5A
    lsls r1, r6, 1
    ldr r0, _0802BC20 @ =0x0600c000
    adds r1, r0
    mov r9, r1
_0802BC06:
    adds r1, r6, 0
    adds r0, r2, 0x1
    mov r10, r0
    cmp r1, r5
    bgt _0802BC54
    lsls r0, r2, 6
    mov r4, r9
    adds r3, r4, r0
_0802BC16:
    cmp r2, r12
    bne _0802BC28
    ldr r0, _0802BC24 @ =0x00001022
    b _0802BC36
    .align 2, 0
_0802BC20: .4byte 0x0600c000
_0802BC24: .4byte 0x00001022
_0802BC28:
    cmp r2, r7
    bne _0802BC34
    ldr r0, _0802BC30 @ =0x00001028
    b _0802BC36
    .align 2, 0
_0802BC30: .4byte 0x00001028
_0802BC34:
    ldr r0, _0802BC68 @ =0x00001025
_0802BC36:
    cmp r1, r6
    beq _0802BC42
    adds r0, 0x1
    cmp r1, r5
    bne _0802BC42
    adds r0, 0x1
_0802BC42:
    mov r4, r8
    cmp r4, 0
    beq _0802BC4A
    movs r0, 0
_0802BC4A:
    strh r0, [r3]
    adds r3, 0x2
    adds r1, 0x1
    cmp r1, r5
    ble _0802BC16
_0802BC54:
    mov r2, r10
    cmp r2, r7
    ble _0802BC06
_0802BC5A:
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_0802BC68: .4byte 0x00001025
        .syntax divided
	.code	16
.Lfe269:
	.size	 sub_802BBD4,.Lfe269-sub_802BBD4
	.align	2, 0
	.globl	sub_802BC6C
	.type	 sub_802BC6C,function
	.thumb_func
sub_802BC6C:
	push	{lr}
	ldr	r2, .L3014
	ldr	r0, .L3014+0x4
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L3012	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
	ldr	r1, .L3014+0x8
	mov	r0, #0x2
	strh	r0, [r1]
	ldr	r0, .L3014+0xc
	mov	r1, #0x20
	strh	r1, [r0]
	add	r0, r0, #0x40
	strh	r1, [r0]
	b	.L3013
.L3015:
	.align	2, 0
.L3014:
	.word	0x600c270
	.word	gBattleCommunication
	.word	0x600c2b0
	.word	0x600c2f0
.L3012:
	mov	r1, #0x20
	strh	r1, [r2]
	ldr	r0, .L3016
	strh	r1, [r0]
	ldr	r1, .L3016+0x4
	mov	r0, #0x1
	strh	r0, [r1]
	add	r1, r1, #0x40
	mov	r0, #0x2
	strh	r0, [r1]
.L3013:
	pop	{r0}
	bx	r0
.L3017:
	.align	2, 0
.L3016:
	.word	0x600c2b0
	.word	0x600c2f0
.Lfe270:
	.size	 sub_802BC6C,.Lfe270-sub_802BC6C
	.align	2, 0
	.globl	nullsub_6
	.type	 nullsub_6,function
	.thumb_func
nullsub_6:
	bx	lr
.Lfe271:
	.size	 nullsub_6,.Lfe271-nullsub_6
	.align	2, 0
	.type	 atkF3_nickname_caught_poke,function
	.thumb_func
atkF3_nickname_caught_poke:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	ldr	r0, .L3040
	ldrb	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x4
	bls	.LCB30018
	b	.L3020	@long jump
.LCB30018:
	lsl	r0, r1, #0x2
	ldr	r1, .L3040+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L3041:
	.align	2, 0
.L3040:
	.word	gBattleCommunication
	.word	.L3037
	.align	2, 0
	.align	2, 0
.L3037:
	.word	.L3021
	.word	.L3022
	.word	.L3030
	.word	.L3032
	.word	.L3034
.L3021:
	bl	sub_8023A80
	ldr	r0, .L3042
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	bl	sub_802BC6C
	b	.L3020
.L3043:
	.align	2, 0
.L3042:
	.word	gBattleCommunication
.L3022:
	ldr	r0, .L3044
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3023	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L3023	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L3023:
	ldr	r0, .L3044
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3024	@cond_branch
	ldr	r4, .L3044+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L3024	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	nullsub_6
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	sub_802BC6C
.L3024:
	ldr	r0, .L3044
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3025	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L3044+0x4
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L3039	@cond_branch
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	b	.L3020
.L3045:
	.align	2, 0
.L3044:
	.word	gMain
	.word	gBattleCommunication
.L3025:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB30139
	b	.L3020	@long jump
.LCB30139:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L3046
.L3039:
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L3020
.L3047:
	.align	2, 0
.L3046:
	.word	gBattleCommunication
.L3030:
	ldr	r0, .L3048
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB30163
	b	.L3020	@long jump
.LCB30163:
	ldr	r7, .L3048+0x4
	ldr	r0, .L3048+0x8
	mov	sl, r0
	ldrb	r0, [r0]
	mov	r4, #0x1
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	r9, r1
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r1, .L3048+0xc
	mov	r8, r1
	add	r0, r0, r8
	mov	r1, #0x2
	ldr	r2, .L3048+0x10
	bl	GetMonData
	mov	r1, sl
	ldrb	r0, [r1]
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0xb
	bl	GetMonData
	add	r6, r0, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r1, sl
	ldrb	r0, [r1]
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	bl	GetMonGender
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, sl
	ldrb	r0, [r1]
	eor	r4, r4, r0
	lsl	r4, r4, #0x1
	add	r4, r4, r7
	ldrh	r0, [r4]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp]
	ldr	r0, .L3048+0x14
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	ldr	r1, .L3048+0x10
	add	r2, r6, #0
	add	r3, r5, #0
	bl	DoNamingScreen
	ldr	r1, .L3048+0x18
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L3020
.L3049:
	.align	2, 0
.L3048:
	.word	gPaletteFade
	.word	gBattlePartyID
	.word	gBankAttacker
	.word	gEnemyParty
	.word	gSharedMem+0x16079
	.word	sub_800F808
	.word	gBattleCommunication
.L3032:
	ldr	r0, .L3050
	ldr	r1, [r0, #0x4]
	ldr	r0, .L3050+0x4
	cmp	r1, r0
	bne	.L3020	@cond_branch
	ldr	r0, .L3050+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3020	@cond_branch
	ldr	r2, .L3050+0xc
	ldr	r0, .L3050+0x10
	ldrb	r1, [r0]
	mov	r0, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L3050+0x14
	add	r0, r0, r1
	ldr	r2, .L3050+0x18
	mov	r1, #0x2
	bl	SetMonData
	b	.L3035
.L3051:
	.align	2, 0
.L3050:
	.word	gMain
	.word	sub_800F808
	.word	gPaletteFade
	.word	gBattlePartyID
	.word	gBankAttacker
	.word	gEnemyParty
	.word	gSharedMem+0x16079
.L3034:
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L3035	@cond_branch
	ldr	r1, .L3052
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3020
.L3053:
	.align	2, 0
.L3052:
	.word	gBattlescriptCurrInstr
.L3035:
	ldr	r3, .L3054
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3020:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3055:
	.align	2, 0
.L3054:
	.word	gBattlescriptCurrInstr
.Lfe272:
	.size	 atkF3_nickname_caught_poke,.Lfe272-atkF3_nickname_caught_poke
	.align	2, 0
	.type	 atkF4_802BEF0,function
	.thumb_func
atkF4_802BEF0:
	ldr	r2, .L3057
	ldr	r0, .L3057+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldr	r0, .L3057+0x8
	ldr	r2, [r0]
	ldrh	r0, [r1, #0x28]
	sub	r0, r0, r2
	strh	r0, [r1, #0x28]
	ldr	r1, .L3057+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3058:
	.align	2, 0
.L3057:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe273:
	.size	 atkF4_802BEF0,.Lfe273-atkF4_802BEF0
	.align	2, 0
	.type	 atkF5_removeattackerstatus1,function
	.thumb_func
atkF5_removeattackerstatus1:
	ldr	r1, .L3060
	ldr	r0, .L3060+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r1, .L3060+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3061:
	.align	2, 0
.L3060:
	.word	gBattleMons
	.word	gBankAttacker
	.word	gBattlescriptCurrInstr
.Lfe274:
	.size	 atkF5_removeattackerstatus1,.Lfe274-atkF5_removeattackerstatus1
	.align	2, 0
	.type	 atkF6_802BF48,function
	.thumb_func
atkF6_802BF48:
	ldr	r1, .L3063
	mov	r0, #0xc
	strb	r0, [r1]
	bx	lr
.L3064:
	.align	2, 0
.L3063:
	.word	gFightStateTracker
.Lfe275:
	.size	 atkF6_802BF48,.Lfe275-atkF6_802BF48
	.align	2, 0
	.type	 atkF7_802BF54,function
	.thumb_func
atkF7_802BF54:
	ldr	r1, .L3066
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r1, .L3066+0x4
	ldr	r0, .L3066+0x8
	ldrb	r0, [r0]
	strb	r0, [r1]
	bx	lr
.L3067:
	.align	2, 0
.L3066:
	.word	gFightStateTracker
	.word	gCurrentMoveTurn
	.word	gNoOfAllBanks
.Lfe276:
	.size	 atkF7_802BF54,.Lfe276-atkF7_802BF54
.text
	.align	2, 0
