@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	memcpy
	.type	 memcpy,function
	.thumb_func
memcpy:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r5, #0
	add	r3, r1, #0
	cmp	r2, #15
	bls	.L3	@cond_branch
	add	r0, r3, #0
	orr	r0, r0, r5
	mov	r1, #3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3	@cond_branch
	add	r1, r5, #0
.L6:
	ldmia	r3!, {r0}
	stmia	r1!, {r0}
	ldmia	r3!, {r0}
	stmia	r1!, {r0}
	ldmia	r3!, {r0}
	stmia	r1!, {r0}
	ldmia	r3!, {r0}
	stmia	r1!, {r0}
	sub	r2, r2, #16
	cmp	r2, #15
	bhi	.L6	@cond_branch
	cmp	r2, #3
	bls	.L16	@cond_branch
.L10:
	ldmia	r3!, {r0}
	stmia	r1!, {r0}
	sub	r2, r2, #4
	cmp	r2, #3
	bhi	.L10	@cond_branch
.L16:
	add	r4, r1, #0
.L3:
	sub	r2, r2, #1
	mov	r0, #1
	neg	r0, r0
	cmp	r2, r0
	beq	.L13	@cond_branch
	add	r1, r0, #0
.L14:
	ldrb	r0, [r3]
	strb	r0, [r4]
	add	r3, r3, #1
	add	r4, r4, #1
	sub	r2, r2, #1
	cmp	r2, r1
	bne	.L14	@cond_branch
.L13:
	add	r0, r5, #0
	pop	{r4, r5, pc}
.Lfe1:
	.size	 memcpy,.Lfe1-memcpy
	.align	2, 0
	.globl	memset
	.type	 memset,function
	.thumb_func
memset:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	add	r3, r5, #0
	cmp	r2, #3
	bls	.L41	@cond_branch
	mov	r0, #3
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L41	@cond_branch
	add	r1, r5, #0
	mov	r0, #255
	and	r4, r4, r0
	lsl	r3, r4, #8
	orr	r3, r3, r4
	lsl	r0, r3, #16
	orr	r3, r3, r0
	cmp	r2, #15
	bls	.L40	@cond_branch
.L28:
	stmia	r1!, {r3}
	stmia	r1!, {r3}
	stmia	r1!, {r3}
	stmia	r1!, {r3}
	sub	r2, r2, #16
	cmp	r2, #15
	bhi	.L28	@cond_branch
	b	.L40
.L32:
	stmia	r1!, {r3}
	sub	r2, r2, #4
.L40:
	cmp	r2, #3
	bhi	.L32	@cond_branch
	add	r3, r1, #0
	b	.L41
.L36:
	strb	r4, [r3]
	add	r3, r3, #1
.L41:
	add	r0, r2, #0
	sub	r2, r2, #1
	cmp	r0, #0
	bne	.L36	@cond_branch
	add	r0, r5, #0
	pop	{r4, r5, pc}
.Lfe2:
	.size	 memset,.Lfe2-memset
	.align	2, 0
	.globl	strcmp
	.type	 strcmp,function
	.thumb_func
strcmp:
	push	{r4, r5, lr}
	add	r2, r0, #0
	add	r3, r1, #0
	orr	r0, r0, r3
	mov	r1, #3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L55	@cond_branch
	ldr	r1, [r2]
	ldr	r0, [r3]
	cmp	r1, r0
	bne	.L55	@cond_branch
	ldr	r5, .L56
	ldr	r4, .L56+4
.L46:
	ldr	r1, [r2]
	add	r0, r1, r5
	bic	r0, r0, r1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L47	@cond_branch
	mov	r0, #0
	b	.L54
.L57:
	.align	2, 0
.L56:
	.word	-16843009
	.word	-2139062144
.L47:
	add	r2, r2, #4
	add	r3, r3, #4
	ldr	r1, [r2]
	ldr	r0, [r3]
	cmp	r1, r0
	beq	.L46	@cond_branch
	b	.L55
.L51:
	add	r2, r2, #1
	add	r3, r3, #1
.L55:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L50	@cond_branch
	ldrb	r1, [r3]
	cmp	r0, r1
	beq	.L51	@cond_branch
.L50:
	ldrb	r2, [r2]
	ldrb	r3, [r3]
	sub	r0, r2, r3
.L54:
	pop	{r4, r5, pc}
.Lfe3:
	.size	 strcmp,.Lfe3-strcmp
.text
	.align	2, 0
