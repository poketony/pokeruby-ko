@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	m4aMPlayTempoControl
	.type	 m4aMPlayTempoControl,function
	.thumb_func
m4aMPlayTempoControl:
	push	{r4, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, [r2, #0x34]
	ldr	r0, .L4
	cmp	r3, r0
	bne	.L3	@cond_branch
	strh	r1, [r2, #0x1e]
	ldrh	r4, [r2, #0x1c]
	mov	r0, r1
	mul	r0, r0, r4
	asr	r0, r0, #0x8
	strh	r0, [r2, #0x20]
.L3:
	pop	{r4}
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	0x68736d53
.Lfe1:
	.size	 m4aMPlayTempoControl,.Lfe1-m4aMPlayTempoControl
	.align	2, 0
	.globl	m4aMPlayVolumeControl
	.type	 m4aMPlayVolumeControl,function
	.thumb_func
m4aMPlayVolumeControl:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r6, r2, #0x10
	ldr	r3, [r4, #0x34]
	ldr	r0, .L14
	cmp	r3, r0
	bne	.L6	@cond_branch
	add	r0, r3, #0x1
	str	r0, [r4, #0x34]
	ldrb	r2, [r4, #0x8]
	ldr	r1, [r4, #0x2c]
	mov	r5, #0x1
	cmp	r2, #0
	ble	.L9	@cond_branch
	mov	r0, #0x80
	mov	r8, r0
	lsr	r6, r6, #0x12
	mov	r0, #0x3
	mov	ip, r0
.L10:
	add	r0, r7, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L11	@cond_branch
	ldrb	r3, [r1]
	mov	r0, r8
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L11	@cond_branch
	strb	r6, [r1, #0x13]
	mov	r0, ip
	orr	r0, r0, r3
	strb	r0, [r1]
.L11:
	sub	r2, r2, #0x1
	add	r1, r1, #0x50
	lsl	r5, r5, #0x1
	cmp	r2, #0
	bgt	.L10	@cond_branch
.L9:
	ldr	r0, .L14
	str	r0, [r4, #0x34]
.L6:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	0x68736d53
.Lfe2:
	.size	 m4aMPlayVolumeControl,.Lfe2-m4aMPlayVolumeControl
	.align	2, 0
	.globl	m4aMPlayPitchControl
	.type	 m4aMPlayPitchControl,function
	.thumb_func
m4aMPlayPitchControl:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	ip, r1
	lsl	r2, r2, #0x10
	lsr	r6, r2, #0x10
	ldr	r3, [r4, #0x34]
	ldr	r0, .L24
	cmp	r3, r0
	bne	.L16	@cond_branch
	add	r0, r3, #0x1
	str	r0, [r4, #0x34]
	ldrb	r2, [r4, #0x8]
	ldr	r3, [r4, #0x2c]
	mov	r5, #0x1
	cmp	r2, #0
	ble	.L19	@cond_branch
	mov	r0, #0x80
	mov	r9, r0
	lsl	r0, r6, #0x10
	asr	r7, r0, #0x18
	mov	r0, #0xc
	mov	r8, r0
.L20:
	mov	r0, ip
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldrb	r1, [r3]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
	strb	r7, [r3, #0xb]
	strb	r6, [r3, #0xd]
	mov	r0, r8
	orr	r0, r0, r1
	strb	r0, [r3]
.L21:
	sub	r2, r2, #0x1
	add	r3, r3, #0x50
	lsl	r5, r5, #0x1
	cmp	r2, #0
	bgt	.L20	@cond_branch
.L19:
	ldr	r0, .L24
	str	r0, [r4, #0x34]
.L16:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	0x68736d53
.Lfe3:
	.size	 m4aMPlayPitchControl,.Lfe3-m4aMPlayPitchControl
	.align	2, 0
	.globl	m4aMPlayPanpotControl
	.type	 m4aMPlayPanpotControl,function
	.thumb_func
m4aMPlayPanpotControl:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r3, [r4, #0x34]
	ldr	r0, .L34
	cmp	r3, r0
	bne	.L26	@cond_branch
	add	r0, r3, #0x1
	str	r0, [r4, #0x34]
	ldrb	r2, [r4, #0x8]
	ldr	r1, [r4, #0x2c]
	mov	r5, #0x1
	cmp	r2, #0
	ble	.L29	@cond_branch
	mov	r0, #0x80
	mov	r8, r0
	mov	r0, #0x3
	mov	ip, r0
.L30:
	add	r0, r7, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L31	@cond_branch
	ldrb	r3, [r1]
	mov	r0, r8
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L31	@cond_branch
	strb	r6, [r1, #0x15]
	mov	r0, ip
	orr	r0, r0, r3
	strb	r0, [r1]
.L31:
	sub	r2, r2, #0x1
	add	r1, r1, #0x50
	lsl	r5, r5, #0x1
	cmp	r2, #0
	bgt	.L30	@cond_branch
.L29:
	ldr	r0, .L34
	str	r0, [r4, #0x34]
.L26:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	0x68736d53
.Lfe4:
	.size	 m4aMPlayPanpotControl,.Lfe4-m4aMPlayPanpotControl
	.align	2, 0
	.globl	ClearModM
	.type	 ClearModM,function
	.thumb_func
ClearModM:
	add	r1, r0, #0
	mov	r2, #0x0
	mov	r0, #0x0
	strb	r0, [r1, #0x1a]
	strb	r0, [r1, #0x16]
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0
	bne	.L37	@cond_branch
	mov	r0, #0xc
	b	.L39
.L37:
	mov	r0, #0x3
.L39:
	ldrb	r2, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	bx	lr
.Lfe5:
	.size	 ClearModM,.Lfe5-ClearModM
	.align	2, 0
	.globl	m4aMPlayModDepthSet
	.type	 m4aMPlayModDepthSet,function
	.thumb_func
m4aMPlayModDepthSet:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r1, [r6, #0x34]
	ldr	r0, .L49
	cmp	r1, r0
	bne	.L40	@cond_branch
	add	r0, r1, #0x1
	str	r0, [r6, #0x34]
	ldrb	r5, [r6, #0x8]
	ldr	r4, [r6, #0x2c]
	mov	r7, #0x1
	cmp	r5, #0
	ble	.L43	@cond_branch
	mov	r9, r8
.L44:
	mov	r0, sl
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L45	@cond_branch
	mov	r0, #0x80
	ldrb	r1, [r4]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L45	@cond_branch
	mov	r0, r8
	strb	r0, [r4, #0x17]
	mov	r1, r9
	cmp	r1, #0
	bne	.L45	@cond_branch
	add	r0, r4, #0
	bl	ClearModM
.L45:
	sub	r5, r5, #0x1
	add	r4, r4, #0x50
	lsl	r7, r7, #0x1
	cmp	r5, #0
	bgt	.L44	@cond_branch
.L43:
	ldr	r0, .L49
	str	r0, [r6, #0x34]
.L40:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	0x68736d53
.Lfe6:
	.size	 m4aMPlayModDepthSet,.Lfe6-m4aMPlayModDepthSet
	.align	2, 0
	.globl	m4aMPlayLFOSpeedSet
	.type	 m4aMPlayLFOSpeedSet,function
	.thumb_func
m4aMPlayLFOSpeedSet:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r1, [r6, #0x34]
	ldr	r0, .L60
	cmp	r1, r0
	bne	.L51	@cond_branch
	add	r0, r1, #0x1
	str	r0, [r6, #0x34]
	ldrb	r5, [r6, #0x8]
	ldr	r4, [r6, #0x2c]
	mov	r7, #0x1
	cmp	r5, #0
	ble	.L54	@cond_branch
	mov	r9, r8
.L55:
	mov	r0, sl
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L56	@cond_branch
	mov	r0, #0x80
	ldrb	r1, [r4]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L56	@cond_branch
	mov	r0, r8
	strb	r0, [r4, #0x19]
	mov	r1, r9
	cmp	r1, #0
	bne	.L56	@cond_branch
	add	r0, r4, #0
	bl	ClearModM
.L56:
	sub	r5, r5, #0x1
	add	r4, r4, #0x50
	lsl	r7, r7, #0x1
	cmp	r5, #0
	bgt	.L55	@cond_branch
.L54:
	ldr	r0, .L60
	str	r0, [r6, #0x34]
.L51:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	0x68736d53
.Lfe7:
	.size	 m4aMPlayLFOSpeedSet,.Lfe7-m4aMPlayLFOSpeedSet
	.align	2, 0
	.globl	ply_memacc
	.type	 ply_memacc,function
	.thumb_func
ply_memacc:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	ldr	r1, [r6, #0x40]
	ldrb	r5, [r1]
	add	r2, r1, #0x1
	str	r2, [r6, #0x40]
	ldr	r0, [r4, #0x18]
	ldrb	r1, [r1, #0x1]
	add	r3, r1, r0
	add	r0, r2, #0x1
	str	r0, [r6, #0x40]
	ldrb	r2, [r2, #0x1]
	add	r0, r0, #0x1
	str	r0, [r6, #0x40]
	cmp	r5, #0x11
	bls	.LCB473
	b	.L62	@long jump
.LCB473:
	lsl	r0, r5, #0x2
	ldr	r1, .L110
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L111:
	.align	2, 0
.L110:
	.word	.L109
	.align	2, 0
	.align	2, 0
.L109:
	.word	.L64
	.word	.L65
	.word	.L66
	.word	.L67
	.word	.L68
	.word	.L69
	.word	.L70
	.word	.L75
	.word	.L78
	.word	.L81
	.word	.L84
	.word	.L87
	.word	.L90
	.word	.L93
	.word	.L96
	.word	.L99
	.word	.L102
	.word	.L105
.L64:
	strb	r2, [r3]
	b	.L62
.L65:
	ldrb	r1, [r3]
	add	r0, r1, r2
	strb	r0, [r3]
	b	.L62
.L66:
	ldrb	r1, [r3]
	sub	r0, r1, r2
	strb	r0, [r3]
	b	.L62
.L67:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	b	.L62
.L68:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r1, [r3]
	ldrb	r0, [r0]
	add	r0, r1, r0
	strb	r0, [r3]
	b	.L62
.L69:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r1, [r3]
	ldrb	r0, [r0]
	sub	r0, r1, r0
	strb	r0, [r3]
	b	.L62
.L70:
	ldrb	r3, [r3]
	cmp	r3, r2
	beq	.L72	@cond_branch
	b	.L74
.L75:
	ldrb	r3, [r3]
	cmp	r3, r2
	bne	.L72	@cond_branch
	b	.L74
.L78:
	ldrb	r3, [r3]
	cmp	r3, r2
	bhi	.L72	@cond_branch
	b	.L74
.L81:
	ldrb	r3, [r3]
	cmp	r3, r2
	bcs	.L72	@cond_branch
	b	.L74
.L84:
	ldrb	r3, [r3]
	cmp	r3, r2
	bls	.L72	@cond_branch
	b	.L74
.L87:
	ldrb	r3, [r3]
	cmp	r3, r2
	bcc	.L72	@cond_branch
	b	.L74
.L90:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	beq	.L72	@cond_branch
	b	.L74
.L93:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bne	.L72	@cond_branch
	b	.L74
.L96:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bhi	.L72	@cond_branch
	b	.L74
.L99:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L72	@cond_branch
	b	.L74
.L102:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bls	.L72	@cond_branch
	b	.L74
.L105:
	ldr	r0, [r4, #0x18]
	add	r0, r0, r2
	ldrb	r3, [r3]
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L74	@cond_branch
.L72:
	ldr	r0, .L112
	ldr	r2, [r0]
	add	r0, r4, #0
	add	r1, r6, #0
	bl	_call_via_r2
	b	.L62
.L113:
	.align	2, 0
.L112:
	.word	gMPlayJumpTable+0x4
.L74:
	ldr	r0, [r6, #0x40]
	add	r0, r0, #0x4
	str	r0, [r6, #0x40]
.L62:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 ply_memacc,.Lfe8-ply_memacc
	.align	2, 0
	.globl	ply_xcmd
	.type	 ply_xcmd,function
	.thumb_func
ply_xcmd:
	push	{lr}
	ldr	r2, [r1, #0x40]
	ldrb	r3, [r2]
	add	r2, r2, #0x1
	str	r2, [r1, #0x40]
	ldr	r2, .L115
	lsl	r3, r3, #0x2
	add	r3, r3, r2
	ldr	r2, [r3]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	gXcmdTable
.Lfe9:
	.size	 ply_xcmd,.Lfe9-ply_xcmd
	.align	2, 0
	.globl	ply_xxx
	.type	 ply_xxx,function
	.thumb_func
ply_xxx:
	push	{lr}
	ldr	r2, .L118
	ldr	r2, [r2]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gMPlayJumpTable
.Lfe10:
	.size	 ply_xxx,.Lfe10-ply_xxx
	.align	2, 0
	.globl	ply_xwave
	.type	 ply_xwave,function
	.thumb_func
ply_xwave:
	push	{r4, lr}
	ldr	r2, [r1, #0x40]
	ldr	r0, .L121
	and	r4, r4, r0
	ldrb	r0, [r2]
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x1]
	lsl	r3, r0, #0x8
	ldr	r0, .L121+0x4
	and	r4, r4, r0
	orr	r4, r4, r3
	ldrb	r0, [r2, #0x2]
	lsl	r3, r0, #0x10
	ldr	r0, .L121+0x8
	and	r4, r4, r0
	orr	r4, r4, r3
	ldrb	r0, [r2, #0x3]
	lsl	r3, r0, #0x18
	ldr	r0, .L121+0xc
	and	r4, r4, r0
	orr	r4, r4, r3
	str	r4, [r1, #0x28]
	add	r2, r2, #0x4
	str	r2, [r1, #0x40]
	pop	{r4}
	pop	{r0}
	bx	r0
.L122:
	.align	2, 0
.L121:
	.word	0xffffff00
	.word	0xffff00ff
	.word	0xff00ffff
	.word	0xffffff
.Lfe11:
	.size	 ply_xwave,.Lfe11-ply_xwave
	.align	2, 0
	.globl	ply_xtype
	.type	 ply_xtype,function
	.thumb_func
ply_xtype:
	ldr	r0, [r1, #0x40]
	ldrb	r2, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x24
	strb	r2, [r0]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe12:
	.size	 ply_xtype,.Lfe12-ply_xtype
	.align	2, 0
	.globl	ply_xatta
	.type	 ply_xatta,function
	.thumb_func
ply_xatta:
	ldr	r0, [r1, #0x40]
	ldrb	r2, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x2c
	strb	r2, [r0]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe13:
	.size	 ply_xatta,.Lfe13-ply_xatta
	.align	2, 0
	.globl	ply_xdeca
	.type	 ply_xdeca,function
	.thumb_func
ply_xdeca:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x2d
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe14:
	.size	 ply_xdeca,.Lfe14-ply_xdeca
	.align	2, 0
	.globl	ply_xsust
	.type	 ply_xsust,function
	.thumb_func
ply_xsust:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x2e
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe15:
	.size	 ply_xsust,.Lfe15-ply_xsust
	.align	2, 0
	.globl	ply_xrele
	.type	 ply_xrele,function
	.thumb_func
ply_xrele:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x2f
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe16:
	.size	 ply_xrele,.Lfe16-ply_xrele
	.align	2, 0
	.globl	ply_xiecv
	.type	 ply_xiecv,function
	.thumb_func
ply_xiecv:
	ldr	r0, [r1, #0x40]
	ldrb	r2, [r0]
	strb	r2, [r1, #0x1e]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe17:
	.size	 ply_xiecv,.Lfe17-ply_xiecv
	.align	2, 0
	.globl	ply_xiecl
	.type	 ply_xiecl,function
	.thumb_func
ply_xiecl:
	ldr	r0, [r1, #0x40]
	ldrb	r2, [r0]
	strb	r2, [r1, #0x1f]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe18:
	.size	 ply_xiecl,.Lfe18-ply_xiecl
	.align	2, 0
	.globl	ply_xleng
	.type	 ply_xleng,function
	.thumb_func
ply_xleng:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x26
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe19:
	.size	 ply_xleng,.Lfe19-ply_xleng
	.align	2, 0
	.globl	ply_xswee
	.type	 ply_xswee,function
	.thumb_func
ply_xswee:
	ldr	r0, [r1, #0x40]
	ldrb	r0, [r0]
	add	r2, r1, #0
	add	r2, r2, #0x27
	strb	r0, [r2]
	ldr	r0, [r1, #0x40]
	add	r0, r0, #0x1
	str	r0, [r1, #0x40]
	bx	lr
.Lfe20:
	.size	 ply_xswee,.Lfe20-ply_xswee
	.align	2, 0
	.globl	ply_xcmd_0C
	.type	 ply_xcmd_0C,function
	.thumb_func
ply_xcmd_0C:
	push	{r4, lr}
	add	r3, r1, #0
	ldr	r4, [r3, #0x40]
	ldr	r0, .L135
	and	r2, r2, r0
	ldrb	r0, [r4]
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x1]
	lsl	r1, r0, #0x8
	ldr	r0, .L135+0x4
	and	r2, r2, r0
	orr	r2, r2, r1
	ldrh	r1, [r3, #0x3a]
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bcs	.L133	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r3, #0x3a]
	sub	r0, r4, #0x2
	str	r0, [r3, #0x40]
	mov	r0, #0x1
	strb	r0, [r3, #0x1]
	b	.L134
.L136:
	.align	2, 0
.L135:
	.word	0xffffff00
	.word	0xffff00ff
.L133:
	mov	r0, #0x0
	strh	r0, [r3, #0x3a]
	add	r0, r4, #0x2
	str	r0, [r3, #0x40]
.L134:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 ply_xcmd_0C,.Lfe21-ply_xcmd_0C
	.align	2, 0
	.globl	ply_xcmd_0D
	.type	 ply_xcmd_0D,function
	.thumb_func
ply_xcmd_0D:
	push	{r4, lr}
	ldr	r2, [r1, #0x40]
	ldr	r0, .L138
	and	r4, r4, r0
	ldrb	r0, [r2]
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x1]
	lsl	r3, r0, #0x8
	ldr	r0, .L138+0x4
	and	r4, r4, r0
	orr	r4, r4, r3
	ldrb	r0, [r2, #0x2]
	lsl	r3, r0, #0x10
	ldr	r0, .L138+0x8
	and	r4, r4, r0
	orr	r4, r4, r3
	ldrb	r0, [r2, #0x3]
	lsl	r3, r0, #0x18
	ldr	r0, .L138+0xc
	and	r4, r4, r0
	orr	r4, r4, r3
	str	r4, [r1, #0x3c]
	add	r2, r2, #0x4
	str	r2, [r1, #0x40]
	pop	{r4}
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	0xffffff00
	.word	0xffff00ff
	.word	0xff00ffff
	.word	0xffffff
.Lfe22:
	.size	 ply_xcmd_0D,.Lfe22-ply_xcmd_0D
	.align	2, 0
	.globl	DummyFunc
	.type	 DummyFunc,function
	.thumb_func
DummyFunc:
	bx	lr
.Lfe23:
	.size	 DummyFunc,.Lfe23-DummyFunc
	.align	2, 0
	.globl	SetPokemonCryTone
	.type	 SetPokemonCryTone,function
	.thumb_func
SetPokemonCryTone:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	mov	r6, #0x0
	mov	r1, #0x0
	mov	r4, #0x0
	ldr	r0, .L151
	mov	r8, r0
	ldr	r7, .L151+0x4
	ldr	r0, .L151+0x8
	mov	sl, r0
	mov	r5, r8
	add	r5, r5, #0xc
	mov	r3, #0x0
	ldr	r0, .L151+0xc
	mov	ip, r0
.L145:
	mov	r0, ip
	add	r2, r3, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L146	@cond_branch
	ldr	r0, [r2, #0x20]
	cmp	r0, #0
	beq	.L148	@cond_branch
	ldr	r0, [r0, #0x2c]
	cmp	r0, r2
	bne	.L148	@cond_branch
.L146:
	ldr	r0, [r5]
	cmp	r6, r0
	bcs	.L144	@cond_branch
	add	r6, r0, #0
	add	r1, r4, #0
.L144:
	add	r5, r5, #0x40
	add	r3, r3, #0xa0
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L145	@cond_branch
	add	r4, r1, #0
.L148:
	lsl	r5, r4, #0x6
	add	r5, r5, r8
	ldr	r0, [r5, #0x34]
	add	r0, r0, #0x1
	str	r0, [r5, #0x34]
	mov	r0, #0x34
	mul	r4, r4, r0
	add	r6, r4, r7
	add	r0, r6, #0
	mov	r1, sl
	mov	r2, #0x34
	bl	memcpy
	add	r0, r7, #0x4
	add	r0, r4, r0
	mov	r1, r9
	str	r1, [r0]
	add	r1, r7, #0
	add	r1, r1, #0x8
	add	r1, r4, r1
	add	r0, r7, #0
	add	r0, r0, #0x11
	add	r0, r4, r0
	str	r0, [r1]
	add	r1, r7, #0
	add	r1, r1, #0xc
	add	r1, r4, r1
	add	r0, r7, #0
	add	r0, r0, #0x18
	add	r0, r4, r0
	str	r0, [r1]
	add	r0, r7, #0
	add	r0, r0, #0x14
	add	r0, r4, r0
	add	r1, r7, #0
	add	r1, r1, #0x1a
	add	r4, r4, r1
	str	r4, [r0]
	ldr	r0, .L151+0x10
	str	r0, [r5, #0x34]
	add	r0, r5, #0
	add	r1, r6, #0
	bl	MPlayStart
	add	r0, r5, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L152:
	.align	2, 0
.L151:
	.word	gPokemonCryMusicPlayers
	.word	gPokemonCrySongs
	.word	gPokemonCrySong
	.word	gPokemonCryTracks
	.word	0x68736d53
.Lfe24:
	.size	 SetPokemonCryTone,.Lfe24-SetPokemonCryTone
	.align	2, 0
	.globl	SetPokemonCryVolume
	.type	 SetPokemonCryVolume,function
	.thumb_func
SetPokemonCryVolume:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L154
	mov	r1, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x1d]
	bx	lr
.L155:
	.align	2, 0
.L154:
	.word	gPokemonCrySong
.Lfe25:
	.size	 SetPokemonCryVolume,.Lfe25-SetPokemonCryVolume
	.align	2, 0
	.globl	SetPokemonCryPanpot
	.type	 SetPokemonCryPanpot,function
	.thumb_func
SetPokemonCryPanpot:
	ldr	r2, .L157
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	add	r0, r0, #0x40
	mov	r1, #0x7f
	and	r0, r0, r1
	add	r2, r2, #0x28
	strb	r0, [r2]
	bx	lr
.L158:
	.align	2, 0
.L157:
	.word	gPokemonCrySong
.Lfe26:
	.size	 SetPokemonCryPanpot,.Lfe26-SetPokemonCryPanpot
	.align	2, 0
	.globl	SetPokemonCryPitch
	.type	 SetPokemonCryPitch,function
	.thumb_func
SetPokemonCryPitch:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r3, .L160
	ldrb	r2, [r3, #0x19]
	ldrb	r4, [r3, #0x12]
	sub	r1, r2, r4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r6, #0x80
	lsl	r6, r6, #0x10
	add	r0, r0, r6
	asr	r2, r0, #0x18
	mov	r5, #0x7f
	mov	r4, #0x7f
	and	r2, r2, r4
	mov	r6, #0x2a
	strb	r2, [r6, r3]
	asr	r0, r0, #0x11
	and	r0, r0, r4
	strb	r0, [r3, #0x12]
	add	r1, r1, r0
	and	r1, r1, r5
	strb	r1, [r3, #0x19]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	gPokemonCrySong
.Lfe27:
	.size	 SetPokemonCryPitch,.Lfe27-SetPokemonCryPitch
	.align	2, 0
	.globl	SetPokemonCryLength
	.type	 SetPokemonCryLength,function
	.thumb_func
SetPokemonCryLength:
	ldr	r1, .L163
	strh	r0, [r1, #0x2e]
	bx	lr
.L164:
	.align	2, 0
.L163:
	.word	gPokemonCrySong
.Lfe28:
	.size	 SetPokemonCryLength,.Lfe28-SetPokemonCryLength
	.align	2, 0
	.globl	SetPokemonCryRelease
	.type	 SetPokemonCryRelease,function
	.thumb_func
SetPokemonCryRelease:
	ldr	r1, .L166
	add	r1, r1, #0x26
	strb	r0, [r1]
	bx	lr
.L167:
	.align	2, 0
.L166:
	.word	gPokemonCrySong
.Lfe29:
	.size	 SetPokemonCryRelease,.Lfe29-SetPokemonCryRelease
	.align	2, 0
	.globl	SetPokemonCryProgress
	.type	 SetPokemonCryProgress,function
	.thumb_func
SetPokemonCryProgress:
	ldr	r1, .L169
	str	r0, [r1, #0x20]
	bx	lr
.L170:
	.align	2, 0
.L169:
	.word	gPokemonCrySong
.Lfe30:
	.size	 SetPokemonCryProgress,.Lfe30-SetPokemonCryProgress
	.align	2, 0
	.globl	IsPokemonCryPlaying
	.type	 IsPokemonCryPlaying,function
	.thumb_func
IsPokemonCryPlaying:
	ldr	r1, [r0, #0x2c]
	ldr	r0, [r1, #0x20]
	cmp	r0, #0
	beq	.L172	@cond_branch
	ldr	r0, [r0, #0x2c]
	cmp	r0, r1
	bne	.L172	@cond_branch
	mov	r0, #0x1
	b	.L174
.L172:
	mov	r0, #0x0
.L174:
	bx	lr
.Lfe31:
	.size	 IsPokemonCryPlaying,.Lfe31-IsPokemonCryPlaying
	.align	2, 0
	.globl	SetPokemonCryChorus
	.type	 SetPokemonCryChorus,function
	.thumb_func
SetPokemonCryChorus:
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r0, #0
	beq	.L176	@cond_branch
	ldr	r2, .L178
	mov	r0, #0x2
	strb	r0, [r2]
	ldrb	r3, [r2, #0x12]
	add	r0, r3, r1
	mov	r1, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x19]
	b	.L177
.L179:
	.align	2, 0
.L178:
	.word	gPokemonCrySong
.L176:
	ldr	r1, .L180
	mov	r0, #0x1
	strb	r0, [r1]
.L177:
	bx	lr
.L181:
	.align	2, 0
.L180:
	.word	gPokemonCrySong
.Lfe32:
	.size	 SetPokemonCryChorus,.Lfe32-SetPokemonCryChorus
	.align	2, 0
	.globl	SetPokemonCryStereo
	.type	 SetPokemonCryStereo,function
	.thumb_func
SetPokemonCryStereo:
	ldr	r1, .L186
	ldr	r2, [r1]
	cmp	r0, #0
	beq	.L183	@cond_branch
	ldr	r1, .L186+0x4
	ldr	r3, .L186+0x8
	add	r0, r3, #0
	strh	r0, [r1]
	mov	r0, #0xfe
	ldrb	r1, [r2, #0x9]
	and	r0, r0, r1
	b	.L185
.L187:
	.align	2, 0
.L186:
	.word	0x3007ff0
	.word	0x4000082
	.word	0x210e
.L183:
	ldr	r1, .L188
	ldr	r3, .L188+0x4
	add	r0, r3, #0
	strh	r0, [r1]
	mov	r0, #0x1
	ldrb	r1, [r2, #0x9]
	orr	r0, r0, r1
.L185:
	strb	r0, [r2, #0x9]
	bx	lr
.L189:
	.align	2, 0
.L188:
	.word	0x4000082
	.word	0x3302
.Lfe33:
	.size	 SetPokemonCryStereo,.Lfe33-SetPokemonCryStereo
	.align	2, 0
	.globl	SetPokemonCryPriority
	.type	 SetPokemonCryPriority,function
	.thumb_func
SetPokemonCryPriority:
	ldr	r1, .L191
	strb	r0, [r1, #0x2]
	bx	lr
.L192:
	.align	2, 0
.L191:
	.word	gPokemonCrySong
.Lfe34:
	.size	 SetPokemonCryPriority,.Lfe34-SetPokemonCryPriority
.text
	.align	2, 0
