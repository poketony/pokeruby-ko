@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	sub_80CA710
	.type	 sub_80CA710,function
	.thumb_func
sub_80CA710:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L6
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldrh	r0, [r5, #0x8]
	neg	r0, r0
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L3:
	ldrh	r0, [r5, #0x8]
.L5:
	strh	r0, [r4, #0x34]
	ldr	r0, .L8
	ldrh	r0, [r0, #0xa]
	strh	r0, [r4, #0x36]
	ldr	r0, .L8+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gBattleAnimArgs
	.word	sub_80CA768
.Lfe1:
	.size	 sub_80CA710,.Lfe1-sub_80CA710
	.align	2, 0
	.type	 sub_80CA768,function
	.thumb_func
sub_80CA768:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L11	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r1, r1, r0
	strh	r1, [r4, #0x32]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L12
.L11:
	add	r0, r4, #0
	bl	move_anim_8072740
.L12:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_80CA768,.Lfe2-sub_80CA768
	.align	2, 0
	.globl	sub_80CA7B0
	.type	 sub_80CA7B0,function
	.thumb_func
sub_80CA7B0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r0, .L14
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L14+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L14+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L14+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
	.word	sub_8078B34
	.word	move_anim_8074EE0
.Lfe3:
	.size	 sub_80CA7B0,.Lfe3-sub_80CA7B0
	.align	2, 0
	.globl	sub_80CA800
	.type	 sub_80CA800,function
	.thumb_func
sub_80CA800:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r5, .L17
	ldrb	r1, [r5, #0x6]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L17+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L17+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L17+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	sub_8078B34
	.word	move_anim_8072740
.Lfe4:
	.size	 sub_80CA800,.Lfe4-sub_80CA800
	.align	2, 0
	.globl	sub_80CA858
	.type	 sub_80CA858,function
	.thumb_func
sub_80CA858:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r6, .L20
	ldrh	r0, [r6, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L20+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	obj_translate_based_on_private_1_2_3_4
	ldrh	r0, [r6, #0x6]
	strh	r0, [r4, #0x38]
	ldr	r1, .L20+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	sub_80CA8B4
.Lfe5:
	.size	 sub_80CA858,.Lfe5-sub_80CA858
	.align	2, 0
	.type	 sub_80CA8B4,function
	.thumb_func
sub_80CA8B4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L23	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
	b	.L24
.L23:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	ble	.L25	@cond_branch
	ldr	r0, .L28
	ldrb	r0, [r0]
	bl	sub_8079E90
	add	r0, r0, #0x1
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	gBattleAnimBankTarget
.L25:
	ldr	r0, .L30
	ldrb	r0, [r0]
	bl	sub_8079E90
	add	r0, r0, #0x6
.L27:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0xf
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
.L24:
	pop	{r4}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gBattleAnimBankTarget
.Lfe6:
	.size	 sub_80CA8B4,.Lfe6-sub_80CA8B4
	.align	2, 0
	.globl	sub_80CA928
	.type	 sub_80CA928,function
	.thumb_func
sub_80CA928:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L35
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L33	@cond_branch
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	mov	r0, #0x6
	strh	r0, [r5, #0x8]
	ldr	r1, .L35+0x4
	mov	r0, #0xf
	strh	r0, [r1]
	strh	r2, [r1, #0x2]
	mov	r0, #0x50
	strh	r0, [r1, #0x4]
	strh	r2, [r1, #0x6]
	ldr	r4, .L35+0x8
	ldr	r0, .L35+0xc
	ldrb	r0, [r0]
	bl	sub_8079E90
	add	r3, r0, #0
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	CreateSpriteAndAnimate
.L33:
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xf
	bne	.L34	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L34:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gSpriteTemplate_83D631C
	.word	gBattleAnimBankTarget
.Lfe7:
	.size	 sub_80CA928,.Lfe7-sub_80CA928
	.align	2, 0
	.globl	sub_80CA9A8
	.type	 sub_80CA9A8,function
	.thumb_func
sub_80CA9A8:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_8078764
	ldr	r6, .L38
	ldrh	r0, [r6, #0x6]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L38+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	sub_80786EC
	ldr	r0, .L38+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
	.word	sub_80CA9F8
.Lfe8:
	.size	 sub_80CA9A8,.Lfe8-sub_80CA9A8
	.align	2, 0
	.type	 sub_80CA9F8,function
	.thumb_func
sub_80CA9F8:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L41:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_80CA9F8,.Lfe9-sub_80CA9F8
	.align	2, 0
	.globl	sub_80CAA14
	.type	 sub_80CAA14,function
	.thumb_func
sub_80CAA14:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x7
	and	r1, r1, r0
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r4, .L46
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x14
	b	.L45
.L47:
	.align	2, 0
.L46:
	.word	gBattleAnimBankAttacker
.L43:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x14
.L45:
	strh	r0, [r5, #0x20]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1f
	and	r0, r0, r1
	add	r0, r0, #0x40
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldr	r4, .L48
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	sub_8078D60
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x38]
	add	r0, r5, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	strh	r0, [r5, #0x3a]
	ldr	r1, .L48+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gBattleAnimBankTarget
	.word	sub_80CAACC
.Lfe10:
	.size	 sub_80CAA14,.Lfe10-sub_80CAA14
	.align	2, 0
	.type	 sub_80CAACC,function
	.thumb_func
sub_80CAACC:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078CE8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
	b	.L52
.L51:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xc
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7e
	bgt	.L53	@cond_branch
	ldrh	r0, [r4, #0x3a]
	b	.L55
.L53:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
.L55:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x18
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
.L52:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_80CAACC,.Lfe11-sub_80CAACC
	.align	2, 0
	.globl	sub_80CAB18
	.type	 sub_80CAB18,function
	.thumb_func
sub_80CAB18:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r0, .L58
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldr	r1, .L58+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L57:
	ldr	r4, .L58+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r5, .L58+0x8
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	sub_80786EC
	ldr	r0, .L58+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	sub_80CAB88
.Lfe12:
	.size	 sub_80CAB18,.Lfe12-sub_80CAB18
	.align	2, 0
	.type	 sub_80CAB88,function
	.thumb_func
sub_80CAB88:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L61	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	ldr	r0, .L62
	str	r0, [r4, #0x1c]
	ldr	r1, .L62+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
.L61:
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	sub_80782D8
	.word	sub_80CABC0
.Lfe13:
	.size	 sub_80CAB88,.Lfe13-sub_80CAB88
	.align	2, 0
	.type	 sub_80CABC0,function
	.thumb_func
sub_80CABC0:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x3c
	strh	r0, [r4, #0x2e]
	ldr	r0, .L65
	str	r0, [r4, #0x1c]
	ldr	r1, .L65+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	sub_80782D8
	.word	move_anim_8072740
.Lfe14:
	.size	 sub_80CABC0,.Lfe14-sub_80CABC0
	.align	2, 0
	.globl	sub_80CABF8
	.type	 sub_80CABF8,function
	.thumb_func
sub_80CABF8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_8078764
	ldr	r5, .L69
	ldrb	r1, [r5, #0x8]
	add	r0, r4, #0
	bl	StartSpriteAnim
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L68	@cond_branch
	ldrb	r0, [r4, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
.L68:
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldr	r1, .L69+0x4
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gBattleAnimArgs
	.word	sub_80CAC44
.Lfe15:
	.size	 sub_80CABF8,.Lfe15-sub_80CABF8
	.align	2, 0
	.type	 sub_80CAC44,function
	.thumb_func
sub_80CAC44:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	neg	r1, r1
	bl	Cos
	ldrh	r1, [r4, #0x32]
	add	r1, r1, #0x18
	strh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L72	@cond_branch
	ldr	r0, .L77
	ldrb	r0, [r0]
	bl	sub_8079ED4
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	b	.L76
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimBankTarget
.L72:
	ldr	r0, .L79
	ldrb	r0, [r0]
	bl	sub_8079ED4
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L74	@cond_branch
	mov	r2, #0x3
.L74:
	mov	r0, #0x3
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
.L76:
	strb	r0, [r4, #0x5]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L75	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L75:
	pop	{r4}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gBattleAnimBankTarget
.Lfe16:
	.size	 sub_80CAC44,.Lfe16-sub_80CAC44
	.align	2, 0
	.globl	sub_80CACEC
	.type	 sub_80CACEC,function
	.thumb_func
sub_80CACEC:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L83	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L82	@cond_branch
.L83:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L84
.L82:
	ldr	r0, .L87
	ldrb	r0, [r0]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L85	@cond_branch
	ldr	r0, .L87+0x4
	ldrb	r1, [r0]
	mov	r2, #0x3
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L86
.L88:
	.align	2, 0
.L87:
	.word	gBattleAnimBankTarget
	.word	0x400000c
.L85:
	ldr	r2, .L89
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L86:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	0x400000a
.Lfe17:
	.size	 sub_80CACEC,.Lfe17-sub_80CACEC
	.align	2, 0
	.globl	sub_80CAD54
	.type	 sub_80CAD54,function
	.thumb_func
sub_80CAD54:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	sub_80787B0
	ldr	r5, .L92
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldr	r0, .L92+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x4]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	obj_translate_based_on_private_1_2_3_4
	mov	r0, #0x40
	strh	r0, [r4, #0x38]
	ldr	r1, .L92+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
	.word	sub_80CADA8
.Lfe18:
	.size	 sub_80CAD54,.Lfe18-sub_80CAD54
	.align	2, 0
	.type	 sub_80CADA8,function
	.thumb_func
sub_80CADA8:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L95	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	neg	r1, r1
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L96	@cond_branch
	ldr	r0, .L100
	ldrb	r0, [r0]
	bl	sub_8079E90
	sub	r0, r0, #0x1
	b	.L99
.L101:
	.align	2, 0
.L100:
	.word	gBattleAnimBankAttacker
.L96:
	ldr	r0, .L102
	ldrb	r0, [r0]
	bl	sub_8079E90
	add	r0, r0, #0x1
.L99:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L98
.L103:
	.align	2, 0
.L102:
	.word	gBattleAnimBankAttacker
.L95:
	add	r0, r4, #0
	bl	move_anim_8072740
.L98:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_80CADA8,.Lfe19-sub_80CADA8
	.align	2, 0
	.globl	sub_80CAE20
	.type	 sub_80CAE20,function
	.thumb_func
sub_80CAE20:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r5, .L105
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldr	r0, .L105+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x4]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	obj_translate_based_on_private_1_2_3_4
	mov	r0, #0x40
	strh	r0, [r4, #0x38]
	ldr	r1, .L105+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L106:
	.align	2, 0
.L105:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
	.word	sub_80CAE74
.Lfe20:
	.size	 sub_80CAE20,.Lfe20-sub_80CAE20
	.align	2, 0
	.type	 sub_80CAE74,function
	.thumb_func
sub_80CAE74:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L108	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x38]
	add	r0, r1, #0
	sub	r0, r0, #0x3b
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bls	.L110	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0xbb
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bhi	.L109	@cond_branch
.L110:
	ldrb	r2, [r4, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	eor	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
.L109:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L111
.L108:
	add	r0, r4, #0
	bl	move_anim_8072740
.L111:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 sub_80CAE74,.Lfe21-sub_80CAE74
	.align	2, 0
	.globl	sub_80CAED8
	.type	 sub_80CAED8,function
	.thumb_func
sub_80CAED8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L113
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L113+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldr	r0, .L113+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_80CAF20
.Lfe22:
	.size	 sub_80CAED8,.Lfe22-sub_80CAED8
	.align	2, 0
	.type	 sub_80CAF20,function
	.thumb_func
sub_80CAF20:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x32]
	mov	r2, #0x32
	ldrsh	r3, [r1, r2]
	cmp	r3, #0
	bne	.L116	@cond_branch
	ldrh	r0, [r1, #0x30]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L117	@cond_branch
	mov	r0, #0x80
	strh	r0, [r1, #0x2e]
	strh	r3, [r1, #0x30]
	strh	r3, [r1, #0x32]
	b	.L118
.L117:
	strh	r2, [r1, #0x2e]
	strh	r2, [r1, #0x30]
	strh	r2, [r1, #0x32]
.L118:
	ldr	r0, .L120
	str	r0, [r1, #0x1c]
	b	.L119
.L121:
	.align	2, 0
.L120:
	.word	sub_80CAF6C
.L116:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x32]
	ldrh	r0, [r1, #0x2e]
	ldrh	r2, [r1, #0x20]
	add	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x22]
	add	r0, r0, r2
	strh	r0, [r1, #0x22]
.L119:
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_80CAF20,.Lfe23-sub_80CAF20
	.align	2, 0
	.type	 sub_80CAF6C,function
	.thumb_func
sub_80CAF6C:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L128
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L123	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x19
	bl	Sin
	neg	r0, r0
	b	.L127
.L129:
	.align	2, 0
.L128:
	.word	gBattleAnimBankAttacker
.L123:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x19
	bl	Sin
.L127:
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L125	@cond_branch
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
.L125:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L126	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L126:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 sub_80CAF6C,.Lfe24-sub_80CAF6C
	.align	2, 0
	.globl	sub_80CAFD0
	.type	 sub_80CAFD0,function
	.thumb_func
sub_80CAFD0:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r0, .L138
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L131	@cond_branch
	ldr	r1, .L138+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L131:
	ldr	r6, .L138+0x4
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r1, #0xc
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L132	@cond_branch
	ldr	r4, .L138+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	b	.L136
.L139:
	.align	2, 0
.L138:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
.L132:
	ldr	r0, .L140
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x32
	add	r3, r5, #0
	add	r3, r3, #0x36
	mov	r1, #0x1
	bl	sub_807A3FC
	ldrh	r0, [r6, #0x4]
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r6, #0x6]
	ldrh	r1, [r5, #0x36]
	add	r0, r0, r1
.L136:
	strh	r0, [r5, #0x36]
	ldr	r0, .L140+0x4
	ldrh	r0, [r0, #0xa]
	strh	r0, [r5, #0x38]
	add	r0, r5, #0
	bl	sub_80786EC
	ldr	r0, .L140+0x8
	ldrb	r0, [r0]
	bl	GetBankSide
	add	r4, r0, #0
	ldr	r0, .L140
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L134	@cond_branch
	mov	r0, #0x1
	b	.L137
.L141:
	.align	2, 0
.L140:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L134:
	mov	r0, #0x0
.L137:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L142
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	sub_80CB09C
.Lfe25:
	.size	 sub_80CAFD0,.Lfe25-sub_80CAFD0
	.align	2, 0
	.type	 sub_80CB09C,function
	.thumb_func
sub_80CB09C:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	r7, #0x0
	ldrh	r5, [r6, #0x2e]
	ldrh	r4, [r6, #0x3c]
	mov	r0, #0x1
	strh	r0, [r6, #0x2e]
	add	r0, r6, #0
	bl	sub_8078718
	ldrh	r0, [r6, #0x3c]
	strh	r5, [r6, #0x2e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0xc8
	ble	.L145	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x37
	bgt	.L145	@cond_branch
	ldrh	r0, [r6, #0x6]
	cmp	r0, #0
	bne	.L151	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r6, #0x6]
.L145:
	ldrh	r0, [r6, #0x6]
	cmp	r0, #0
	beq	.L146	@cond_branch
.L151:
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L146	@cond_branch
	add	r3, r6, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r6, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x6]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bne	.L146	@cond_branch
	mov	r7, #0x1
.L146:
	mov	r2, #0x20
	ldrsh	r0, [r6, r2]
	mov	r2, #0x24
	ldrsh	r1, [r6, r2]
	add	r0, r0, r1
	add	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L149	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r6, r0]
	mov	r2, #0x26
	ldrsh	r0, [r6, r2]
	add	r1, r1, r0
	cmp	r1, #0xa0
	bgt	.L149	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L148	@cond_branch
.L149:
	mov	r7, #0x1
.L148:
	cmp	r7, #0
	beq	.L150	@cond_branch
	add	r0, r6, #0
	bl	move_anim_8072740
.L150:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_80CB09C,.Lfe26-sub_80CB09C
	.align	2, 0
	.globl	sub_80CB144
	.type	 sub_80CB144,function
	.thumb_func
sub_80CB144:
	push	{r4, lr}
	add	r4, r0, #0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L153	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L153	@cond_branch
	ldr	r0, .L154
	ldrb	r0, [r0]
	add	r2, r4, #0
	add	r2, r2, #0x20
	add	r3, r4, #0
	add	r3, r3, #0x22
	mov	r1, #0x1
	bl	sub_807A3FC
.L153:
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x20
	strh	r0, [r4, #0x22]
	ldr	r1, .L154+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x36]
	ldr	r0, .L154+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	sub_80CB1A4
.Lfe27:
	.size	 sub_80CB144,.Lfe27-sub_80CB144
	.align	2, 0
	.type	 sub_80CB1A4,function
	.thumb_func
sub_80CB1A4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	bne	.L157	@cond_branch
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x22]
	b	.L158
.L157:
	cmp	r0, #0
	ble	.L158	@cond_branch
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x22]
	sub	r0, r1, #0x2
	strh	r0, [r4, #0x30]
.L158:
	ldrh	r3, [r4, #0x32]
	ldrh	r5, [r4, #0x38]
	add	r2, r3, r5
	strh	r2, [r4, #0x38]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r5, #0x36
	ldrsh	r0, [r4, r5]
	cmp	r1, r0
	bge	.L160	@cond_branch
	add	r0, r2, r3
	strh	r0, [r4, #0x38]
.L160:
	ldrh	r1, [r4, #0x38]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r5, #0x38
	ldrsh	r0, [r4, r5]
	mov	r1, #0x5
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L161	@cond_branch
	ldr	r0, .L165
	ldrb	r0, [r0]
	bl	sub_8079ED4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	b	.L164
.L166:
	.align	2, 0
.L165:
	.word	gBattleAnimBankTarget
.L161:
	ldr	r0, .L167
	ldrb	r0, [r0]
	bl	sub_8079ED4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
.L164:
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L163	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L163:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	gBattleAnimBankTarget
.Lfe28:
	.size	 sub_80CB1A4,.Lfe28-sub_80CB1A4
	.align	2, 0
	.globl	sub_80CB25C
	.type	 sub_80CB25C,function
	.thumb_func
sub_80CB25C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	sub_8078764
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r4, .L170
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAffineAnim
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x3a]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L170+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	gBattleAnimArgs
	.word	sub_80CB298
.Lfe29:
	.size	 sub_80CB25C,.Lfe29-sub_80CB25C
	.align	2, 0
	.type	 sub_80CB298,function
	.thumb_func
sub_80CB298:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L174
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L174+0x4
	cmp	r1, r0
	bne	.L173	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldr	r0, .L174+0x8
	str	r0, [r4, #0x1c]
.L173:
	pop	{r4}
	pop	{r0}
	bx	r0
.L175:
	.align	2, 0
.L174:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	sub_80CB2D4
.Lfe30:
	.size	 sub_80CB298,.Lfe30-sub_80CB298
	.align	2, 0
	.type	 sub_80CB2D4,function
	.thumb_func
sub_80CB2D4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L177	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0xb
	b	.L183
.L177:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0xb
.L183:
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L179	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x32]
.L179:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L180	@cond_branch
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L181	@cond_branch
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	b	.L180
.L181:
	add	r0, r4, #0
	bl	move_anim_8072740
.L180:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 sub_80CB2D4,.Lfe31-sub_80CB2D4
	.align	2, 0
	.globl	sub_80CB340
	.type	 sub_80CB340,function
	.thumb_func
sub_80CB340:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L187
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L185	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L186
.L188:
	.align	2, 0
.L187:
	.word	gSprites
.L185:
	add	r0, r2, #0
	mov	r1, #0x1
	bl	sub_8078E70
	ldr	r1, .L189
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L189+0x4
	ldrh	r1, [r2]
	strh	r1, [r0, #0x8]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0xa]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x1e]
	ldr	r1, .L189+0x8
	str	r1, [r0]
.L186:
	pop	{r4}
	pop	{r0}
	bx	r0
.L190:
	.align	2, 0
.L189:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sub_80CB3A8
.Lfe32:
	.size	 sub_80CB340,.Lfe32-sub_80CB340
	.align	2, 0
	.type	 sub_80CB3A8,function
	.thumb_func
sub_80CB3A8:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L194
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x8]
	ldrh	r0, [r4, #0x1c]
	add	r1, r1, r0
	strh	r1, [r4, #0x1c]
	ldr	r2, .L194+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r5, #0x24]
	ldr	r0, .L194+0x8
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L192	@cond_branch
	ldrh	r0, [r5, #0x24]
	neg	r0, r0
	strh	r0, [r5, #0x24]
.L192:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x1e]
	mov	r0, #0x1e
	ldrsh	r2, [r4, r0]
	add	r0, r6, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	obj_id_set_rotscale
	add	r0, r6, #0
	bl	sub_8079A64
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L193	@cond_branch
	strh	r0, [r4, #0x8]
	ldr	r0, .L194+0xc
	str	r0, [r4]
.L193:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimBankTarget
	.word	sub_80CB438
.Lfe33:
	.size	 sub_80CB3A8,.Lfe33-sub_80CB3A8
	.align	2, 0
	.type	 sub_80CB438,function
	.thumb_func
sub_80CB438:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L202
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L202+0x4
	cmp	r1, r0
	bne	.L197	@cond_branch
	ldr	r0, .L202+0x8
	lsl	r2, r3, #0x2
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r6, r1, r0
	mov	r1, #0x8
	ldrsh	r5, [r6, r1]
	add	r4, r0, #0
	cmp	r5, #0
	bne	.L199	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	sub_8078F40
	ldr	r1, .L202+0xc
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r5, [r0, #0x24]
	strh	r5, [r0, #0x26]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L196
.L203:
	.align	2, 0
.L202:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
	.word	gSprites
.L197:
	ldr	r1, .L204
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0x8
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0
	beq	.L196	@cond_branch
.L199:
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L196	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L196:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L205:
	.align	2, 0
.L204:
	.word	gTasks
.Lfe34:
	.size	 sub_80CB438,.Lfe34-sub_80CB438
	.align	2, 0
	.globl	sub_80CB4CC
	.type	 sub_80CB4CC,function
	.thumb_func
sub_80CB4CC:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L208	@cond_branch
	cmp	r0, #0x1
	beq	.L210	@cond_branch
	b	.L207
.L208:
	ldr	r6, .L214
	ldrb	r0, [r6]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L209	@cond_branch
	ldr	r1, .L214+0x4
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1]
.L209:
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r4, .L214+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L207
.L215:
	.align	2, 0
.L214:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
.L210:
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L207	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	mov	r0, #0x19
	strh	r0, [r5, #0x2e]
	ldr	r4, .L216
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L216+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L216+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
.L207:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	gBattleAnimBankAttacker
	.word	sub_8078CC0
	.word	move_anim_8072740
.Lfe35:
	.size	 sub_80CB4CC,.Lfe35-sub_80CB4CC
	.align	2, 0
	.globl	sub_80CB59C
	.type	 sub_80CB59C,function
	.thumb_func
sub_80CB59C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L219	@cond_branch
	ldr	r4, .L221
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L221+0x4
	ldrh	r0, [r4]
	strh	r0, [r5, #0x24]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4, #0x4]
	add	r0, r0, #0x1e
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r4, #0x6]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r2, #0x22
	ldrsh	r0, [r5, r2]
	mov	r2, #0x26
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	cmp	r0, #0x78
	ble	.L219	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r1, r0, #0
	sub	r1, r1, #0x78
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	add	r1, r1, r0
	strh	r1, [r5, #0x22]
.L219:
	ldr	r0, .L221+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L222:
	.align	2, 0
.L221:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_80CB710
.Lfe36:
	.size	 sub_80CB59C,.Lfe36-sub_80CB59C
	.align	2, 0
	.globl	sub_80CB620
	.type	 sub_80CB620,function
	.thumb_func
sub_80CB620:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #0xfffffffc
	mov	r9, r0
	ldr	r4, .L224
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L224+0x4
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	sub_8077ABC
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	sub_8077ABC
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	sub	r4, r4, r5
	lsl	r4, r4, #0x10
	lsr	r2, r2, #0x18
	mov	r1, r8
	sub	r2, r2, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsr	r3, r4, #0x10
	mov	sl, r3
	asr	r4, r4, #0x10
	ldr	r6, .L224+0x8
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	mul	r0, r0, r4
	mov	r1, #0x64
	str	r2, [sp]
	bl	__divsi3
	add	r5, r5, r0
	mov	r3, r9
	strh	r5, [r3, #0x20]
	ldr	r2, [sp]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x0
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r8, r8, r0
	mov	r1, r8
	mov	r0, r9
	strh	r1, [r0, #0x22]
	ldrh	r0, [r6, #0x2]
	mov	r3, r9
	strh	r0, [r3, #0x24]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r3, #0x26]
	ldrb	r0, [r6, #0x6]
	add	r0, r0, #0x1e
	mov	r1, r9
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0x8]
	mov	r0, r9
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0xa]
	mov	r1, r9
	strh	r0, [r1, #0x32]
	ldr	r0, .L224+0xc
	str	r0, [r1, #0x1c]
	ldr	r1, .L224+0x10
	mov	r3, r9
	ldrh	r0, [r3, #0x20]
	strh	r0, [r1]
	ldrh	r0, [r3, #0x22]
	strh	r0, [r1, #0x2]
	mov	r0, sl
	strh	r0, [r1, #0x4]
	ldr	r2, [sp]
	strh	r2, [r1, #0x6]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	sub_80CB710
	.word	gUnknown_03000728
.Lfe37:
	.size	 sub_80CB620,.Lfe37-sub_80CB620
	.align	2, 0
	.type	 sub_80CB710,function
	.thumb_func
sub_80CB710:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	add	r1, r1, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	sub	r0, r0, #0xa
	cmp	r1, r0
	ble	.L227	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	mov	r2, #0x3e
	add	r2, r2, r3
	mov	ip, r2
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
.L227:
	mov	r2, #0x2e
	ldrsh	r1, [r3, r2]
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	ble	.L228	@cond_branch
	add	r0, r3, #0
	bl	move_anim_8072740
.L228:
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 sub_80CB710,.Lfe38-sub_80CB710
	.align	2, 0
	.globl	sub_80CB768
	.type	 sub_80CB768,function
	.thumb_func
sub_80CB768:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L230	@cond_branch
	ldr	r5, .L232
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r4, .L232+0x4
	lsr	r0, r0, #0x18
	ldrh	r2, [r4]
	add	r0, r0, r2
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x22]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r6, #0x30]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x34]
.L230:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2e]
	ldrh	r1, [r6, #0x30]
	mul	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r2, #0x2e
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r6, r2]
	bl	Sin
	strh	r0, [r6, #0x26]
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	mov	r2, #0x34
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	ble	.L231	@cond_branch
	add	r0, r6, #0
	bl	move_anim_8072740
.L231:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L233:
	.align	2, 0
.L232:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.Lfe39:
	.size	 sub_80CB768,.Lfe39-sub_80CB768
	.align	2, 0
	.globl	sub_80CB7EC
	.type	 sub_80CB7EC,function
	.thumb_func
sub_80CB7EC:
	push	{r4, r5, lr}
	mov	r2, #0x20
	ldrsh	r4, [r0, r2]
	lsl	r4, r4, #0x8
	mov	r3, #0x22
	ldrsh	r2, [r0, r3]
	orr	r4, r4, r2
	mov	r5, #0x3a
	ldrsh	r2, [r0, r5]
	lsl	r2, r2, #0x8
	mov	r5, #0x3c
	ldrsh	r3, [r0, r5]
	orr	r2, r2, r3
	lsl	r1, r1, #0x8
	strh	r4, [r0, #0x38]
	strh	r2, [r0, #0x3a]
	strh	r1, [r0, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 sub_80CB7EC,.Lfe40-sub_80CB7EC
	.align	2, 0
	.globl	sub_80CB814
	.type	 sub_80CB814,function
	.thumb_func
sub_80CB814:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r0
	ldrh	r0, [r0, #0x38]
	lsr	r1, r0, #0x8
	mov	sl, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r1, r8
	ldrh	r0, [r1, #0x3a]
	lsr	r2, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrh	r1, [r1, #0x3c]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r3, #0xff
	and	r3, r3, r1
	cmp	r2, #0
	bne	.L236	@cond_branch
	mov	r2, #0x20
	neg	r2, r2
	b	.L237
.L236:
	cmp	r2, #0xff
	bne	.L237	@cond_branch
	mov	r2, #0x88
	lsl	r2, r2, #0x1
.L237:
	mov	r0, r9
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, sl
	sub	r0, r2, r1
	lsl	r5, r3, #0x10
	asr	r5, r5, #0x10
	mul	r0, r0, r5
	lsl	r1, r6, #0x10
	asr	r7, r1, #0x10
	add	r1, r7, #0
	bl	__divsi3
	add	r6, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, r4
	mul	r0, r0, r5
	add	r1, r7, #0
	bl	__divsi3
	add	r6, r6, sl
	mov	r1, r8
	strh	r6, [r1, #0x20]
	add	r0, r0, r9
	strh	r0, [r1, #0x22]
	add	r5, r5, #0x1
	lsl	r5, r5, #0x10
	lsr	r3, r5, #0x10
	asr	r5, r5, #0x10
	cmp	r5, r7
	beq	.L239	@cond_branch
	lsl	r1, r7, #0x8
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	orr	r0, r0, r1
	mov	r1, r8
	strh	r0, [r1, #0x3c]
	mov	r0, #0x0
	b	.L240
.L239:
	mov	r0, #0x1
.L240:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 sub_80CB814,.Lfe41-sub_80CB814
	.align	2, 0
	.globl	sub_80CB8B8
	.type	 sub_80CB8B8,function
	.thumb_func
sub_80CB8B8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xa
	bne	.L242	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L242:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	ble	.L243	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L243:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_80CB8B8,.Lfe42-sub_80CB8B8
	.align	2, 0
	.globl	sub_80CB8E8
	.type	 sub_80CB8E8,function
	.thumb_func
sub_80CB8E8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L245	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L245:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	sub_80CB814
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L246	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L247
	str	r0, [r4, #0x1c]
.L246:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	sub_80CB8B8
.Lfe43:
	.size	 sub_80CB8E8,.Lfe43-sub_80CB8E8
	.align	2, 0
	.globl	sub_80CB94C
	.type	 sub_80CB94C,function
	.thumb_func
sub_80CB94C:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	sub_80787B0
	ldr	r4, .L253
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L253+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L250	@cond_branch
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80CB7EC
	mov	r0, #0x1
	b	.L252
.L254:
	.align	2, 0
.L253:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimBankAttacker
.L250:
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80CB7EC
	mov	r0, #0x3
.L252:
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L255
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	sub_80CB8E8
.Lfe44:
	.size	 sub_80CB94C,.Lfe44-sub_80CB94C
	.align	2, 0
	.globl	sub_80CB9C4
	.type	 sub_80CB9C4,function
	.thumb_func
sub_80CB9C4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L258	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L258:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	sub_80CB814
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L259	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	add	r0, r4, #0
	bl	move_anim_8072740
.L259:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 sub_80CB9C4,.Lfe45-sub_80CB9C4
	.align	2, 0
	.globl	sub_80CBA28
	.type	 sub_80CBA28,function
	.thumb_func
sub_80CBA28:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L265
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L261	@cond_branch
	strh	r0, [r5, #0x3a]
	add	r0, r6, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x28
	bl	sub_80CB7EC
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L265+0x4
	b	.L264
.L266:
	.align	2, 0
.L265:
	.word	gBattleAnimBankTarget
	.word	sub_80CB8E8
.L261:
	mov	r0, #0xff
	strh	r0, [r5, #0x3a]
	add	r0, r6, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L263	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x3a]
.L263:
	add	r0, r5, #0
	mov	r1, #0x28
	bl	sub_80CB7EC
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L267
.L264:
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	sub_80CB9C4
.Lfe46:
	.size	 sub_80CBA28,.Lfe46-sub_80CBA28
	.align	2, 0
	.globl	sub_80CBAA4
	.type	 sub_80CBAA4,function
	.thumb_func
sub_80CBAA4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L270	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_8078764
	ldr	r0, .L272
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x30]
.L270:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	mul	r0, r0, r1
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L271	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L271:
	pop	{r4}
	pop	{r0}
	bx	r0
.L273:
	.align	2, 0
.L272:
	.word	gBattleAnimArgs
.Lfe47:
	.size	 sub_80CBAA4,.Lfe47-sub_80CBAA4
	.align	2, 0
	.globl	sub_80CBAE8
	.type	 sub_80CBAE8,function
	.thumb_func
sub_80CBAE8:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	sub_8078764
	ldr	r4, .L278
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L278+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L275	@cond_branch
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80CB7EC
	mov	r0, #0x1
	b	.L277
.L279:
	.align	2, 0
.L278:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
.L275:
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80CB7EC
	mov	r0, #0x3
.L277:
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L280
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	sub_80CBB60
.Lfe48:
	.size	 sub_80CBAE8,.Lfe48-sub_80CBAE8
	.align	2, 0
	.type	 sub_80CBB60,function
	.thumb_func
sub_80CBB60:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L283	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L283:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L284	@cond_branch
	mov	r0, #0x3f
	bl	sub_8076F98
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7d
	bl	PlaySE12WithPanning
.L284:
	add	r0, r4, #0
	bl	sub_80CB814
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L285	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L286
	str	r0, [r4, #0x1c]
	mov	r0, #0x40
	neg	r0, r0
	bl	sub_8076F98
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7d
	bl	PlaySE12WithPanning
.L285:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	sub_80CB8B8
.Lfe49:
	.size	 sub_80CBB60,.Lfe49-sub_80CBB60
	.align	2, 0
	.globl	sub_80CBBF0
	.type	 sub_80CBBF0,function
	.thumb_func
sub_80CBBF0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L289	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L290	@cond_branch
	ldr	r0, .L297
	ldrh	r1, [r0, #0x2]
	strh	r1, [r4, #0x30]
	mov	r1, #0x78
	strh	r1, [r4, #0x20]
	add	r5, r0, #0
	b	.L291
.L298:
	.align	2, 0
.L297:
	.word	gBattleAnimArgs
.L290:
	ldr	r0, .L299
	mov	r1, #0x2
	ldrsh	r3, [r0, r1]
	add	r1, r3, #0
	sub	r1, r1, #0x20
	add	r2, r1, #0
	add	r5, r0, #0
	cmp	r1, #0
	bge	.L292	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0xdf
.L292:
	asr	r0, r2, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x46
	strh	r0, [r4, #0x20]
.L291:
	ldrh	r0, [r5]
	strh	r0, [r4, #0x22]
	strh	r0, [r4, #0x32]
	mov	r0, #0x14
	strh	r0, [r4, #0x36]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3c
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	ldr	r0, .L299+0x4
	str	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xbe
	bhi	.L294	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
	b	.L296
.L300:
	.align	2, 0
.L299:
	.word	gBattleAnimArgs
	.word	sub_80CBC8C
.L294:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
.L296:
	strb	r0, [r1]
.L289:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 sub_80CBBF0,.Lfe50-sub_80CBBF0
	.align	2, 0
	.type	 sub_80CBC8C,function
	.thumb_func
sub_80CBC8C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L303	@cond_branch
	cmp	r0, #0x1
	beq	.L306	@cond_branch
	b	.L302
.L303:
	ldrh	r5, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4e
	ble	.L304	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L302
.L304:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__divsi3
	add	r0, r5, r0
	strh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x36]
	add	r1, r1, #0x3
	strh	r1, [r4, #0x36]
	strh	r0, [r4, #0x22]
	b	.L302
.L306:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L302	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L302	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	strh	r0, [r4, #0x32]
	ldr	r0, .L310
	str	r0, [r4, #0x1c]
.L302:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	sub_80CBCF8
.Lfe51:
	.size	 sub_80CBC8C,.Lfe51-sub_80CBC8C
	.align	2, 0
	.type	 sub_80CBCF8,function
	.thumb_func
sub_80CBCF8:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L320
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r3, r0, r1
	add	r0, r5, #0x1
	add	r0, r3, r0
	ldrh	r2, [r4, #0x32]
	mov	r6, #0x32
	ldrsh	r1, [r4, r6]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r1, r0
	bne	.L313	@cond_branch
	add	r0, r5, #0x2
	add	r0, r3, r0
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x7f
	bne	.L314	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L320+0x4
	str	r0, [r4, #0x1c]
.L314:
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L315
.L321:
	.align	2, 0
.L320:
	.word	gUnknown_083D680C
	.word	sub_80CBDB0
.L313:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r1, r0, r5
	mov	r2, #0x0
	ldrsb	r2, [r1, r2]
	add	r1, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mul	r0, r0, r2
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L316	@cond_branch
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xbe
	bhi	.L317	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
	b	.L319
.L317:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
.L319:
	strb	r0, [r1]
.L316:
	mov	r6, #0x30
	ldrsh	r0, [r4, r6]
	mov	r1, #0x3c
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
.L315:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 sub_80CBCF8,.Lfe52-sub_80CBCF8
	.align	2, 0
	.type	 sub_80CBDB0,function
	.thumb_func
sub_80CBDB0:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x14
	ble	.L323	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L323:
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 sub_80CBDB0,.Lfe53-sub_80CBDB0
	.align	2, 0
	.globl	sub_80CBDF4
	.type	 sub_80CBDF4,function
	.thumb_func
sub_80CBDF4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L328
	add	r5, r0, r1
	ldr	r4, .L328+0x4
	ldrb	r0, [r4]
	bl	sub_8079E90
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x16]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_807A100
	strh	r0, [r5, #0x1c]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_807A100
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0x1
	bne	.L325	@cond_branch
	mov	r1, #0x1
.L325:
	strh	r1, [r5, #0x12]
	mov	r3, #0x12
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x6
	mov	r1, #0x38
	sub	r1, r1, r0
	strh	r1, [r5, #0x1a]
	ldrh	r0, [r5, #0x16]
	sub	r0, r0, r1
	ldrh	r1, [r5, #0x14]
	add	r0, r0, r1
	strh	r0, [r5, #0x18]
	ldr	r0, .L328+0x8
	mov	r2, #0x18
	ldrsh	r1, [r5, r2]
	mov	r3, #0x1a
	ldrsh	r2, [r5, r3]
	ldrb	r3, [r5, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xc]
	cmp	r0, #0x40
	bne	.L327	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L327:
	ldr	r4, .L328+0xc
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xa
	strh	r1, [r0, #0x2e]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r5, #0x18]
	strh	r1, [r0, #0x30]
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r5, r3]
	mul	r1, r1, r0
	ldrh	r0, [r5, #0x14]
	sub	r0, r0, r1
	strh	r0, [r2, #0x32]
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r5, #0x1a]
	strh	r1, [r0, #0x34]
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r2, [r5, r3]
	mul	r0, r0, r2
	ldrh	r2, [r5, #0x16]
	add	r0, r0, r2
	strh	r0, [r1, #0x36]
	mov	r3, #0xc
	ldrsh	r1, [r5, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	sub_80CC338
	mov	r1, #0xc
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x38]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	sub_80786EC
	ldr	r0, .L328+0x10
	str	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L329:
	.align	2, 0
.L328:
	.word	gTasks
	.word	gBattleAnimBankTarget
	.word	gSpriteTemplate_83D6884
	.word	gSprites
	.word	sub_80CBF5C
.Lfe54:
	.size	 sub_80CBDF4,.Lfe54-sub_80CBDF4
	.align	2, 0
	.type	 sub_80CBF5C,function
	.thumb_func
sub_80CBF5C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L367
	add	r6, r0, r1
	mov	r0, #0xc
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L367+0x4
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r5, [r6, r1]
	cmp	r5, #0x7
	bne	.LCB4072
	b	.L347	@long jump
.LCB4072:
	cmp	r5, #0x7
	bgt	.L361	@cond_branch
	cmp	r5, #0x3
	bne	.LCB4076
	b	.L343	@long jump
.LCB4076:
	cmp	r5, #0x3
	bgt	.L362	@cond_branch
	cmp	r5, #0x1
	beq	.L340	@cond_branch
	cmp	r5, #0x1
	bgt	.L341	@cond_branch
	cmp	r5, #0
	beq	.L338	@cond_branch
	b	.L331
.L368:
	.align	2, 0
.L367:
	.word	gTasks
	.word	gSprites
.L362:
	cmp	r5, #0x5
	bne	.LCB4096
	b	.L344	@long jump
.LCB4096:
	cmp	r5, #0x5
	ble	.LCB4098
	b	.L345	@long jump
.LCB4098:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_80CC358
	add	r0, r4, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4108
	b	.L331	@long jump
.LCB4108:
	mov	r0, #0x5
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L366
.L361:
	cmp	r5, #0xb
	bne	.LCB4116
	b	.L352	@long jump
.LCB4116:
	cmp	r5, #0xb
	bgt	.L363	@cond_branch
	cmp	r5, #0x9
	bne	.LCB4120
	b	.L348	@long jump
.LCB4120:
	cmp	r5, #0x9
	ble	.LCB4122
	b	.L349	@long jump
.LCB4122:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_80CC358
	add	r0, r4, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4132
	b	.L331	@long jump
.LCB4132:
	mov	r0, #0x9
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L366
.L363:
	cmp	r5, #0xd
	bne	.LCB4140
	b	.L355	@long jump
.LCB4140:
	cmp	r5, #0xd
	bge	.LCB4142
	b	.L353	@long jump
.LCB4142:
	cmp	r5, #0xff
	bne	.LCB4144
	b	.L357	@long jump
.LCB4144:
	b	.L331
.L338:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_80CC358
	add	r0, r4, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4163
	b	.L331	@long jump
.LCB4163:
	mov	r0, #0x1
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L366
.L340:
	ldrh	r2, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r2, r2, r3
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x14]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_80CC338
	strh	r0, [r4, #0x38]
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x2
	strh	r0, [r6, #0x10]
	strh	r5, [r6, #0xe]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	sub_80786EC
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L366
.L341:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_80CC358
	add	r0, r4, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4226
	b	.L331	@long jump
.LCB4226:
	mov	r0, #0x3
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L366
.L343:
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x14]
	sub	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x16]
	sub	r0, r0, r1
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_80CC338
	strh	r0, [r4, #0x38]
	mov	r0, #0x2
	strh	r0, [r6, #0xe]
	ldrh	r0, [r6, #0x10]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	sub_80786EC
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L366
.L344:
	ldrh	r1, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r1, r1, r3
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	ldrh	r1, [r6, #0x14]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r2, #0x1e
	ldrsh	r0, [r6, r2]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	ldrh	r1, [r6, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_80CC338
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	sub	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x3
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	sub_80786EC
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L366
.L345:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_80CC358
	add	r0, r4, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4381
	b	.L331	@long jump
.LCB4381:
	mov	r0, #0x7
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L366
.L347:
	ldrh	r2, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r2, r2, r3
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x14]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_80CC338
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	add	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x4
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	sub_80786EC
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L366
.L348:
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x14]
	sub	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	mul	r0, r0, r1
	ldrh	r3, [r6, #0x16]
	add	r0, r0, r3
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_80CC338
	strh	r0, [r4, #0x38]
	mov	r0, #0x5
	strh	r0, [r6, #0xe]
	ldrh	r0, [r6, #0x10]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	sub_80786EC
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L366
.L349:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_80CC358
	add	r0, r4, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L331	@cond_branch
	mov	r0, #0xb
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L366
.L352:
	ldrh	r2, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r2, r2, r0
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x18]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x1a]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_80CC338
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	sub	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x6
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	sub_80786EC
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L366
.L353:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_80CC358
	add	r0, r4, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L331	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L366
.L355:
	mov	r1, #0x20
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L331	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L331
.L357:
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L331	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0xa]
	ldrh	r0, [r6, #0x26]
.L366:
	strh	r0, [r6, #0x8]
.L331:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_80CBF5C,.Lfe55-sub_80CBF5C
	.align	2, 0
	.type	 sub_80CC338,function
	.thumb_func
sub_80CC338:
	push	{lr}
	mov	r2, #0x8
	mov	r3, #0x36
	ldrsh	r1, [r0, r3]
	mov	r3, #0x22
	ldrsh	r0, [r0, r3]
	cmp	r1, r0
	bge	.L370	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L370:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 sub_80CC338,.Lfe56-sub_80CC338
	.align	2, 0
	.type	 sub_80CC358,function
	.thumb_func
sub_80CC358:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldrh	r0, [r6, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L372	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0x24]
	ldr	r0, .L374
	mov	r8, r0
	mov	r2, #0xc
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	ldrh	r2, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r2, r2, r0
	ldr	r0, .L374+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldrb	r3, [r6, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L372	@cond_branch
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	mov	r0, r8
	add	r4, r5, r0
	strh	r7, [r4, #0x3a]
	mov	r0, #0xc
	strh	r0, [r4, #0x3c]
	ldr	r0, .L374+0x8
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	ldrh	r2, [r6, #0x22]
	mov	r0, #0x1
	and	r0, r0, r2
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0x10]
	add	r4, r4, #0x43
	strb	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x1c
	add	r5, r5, r0
	ldr	r0, .L374+0xc
	str	r0, [r5]
.L372:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	gSprites
	.word	gSpriteTemplate_83D6884
	.word	gTasks
	.word	sub_80CC408
.Lfe57:
	.size	 sub_80CC358,.Lfe57-sub_80CC358
	.align	2, 0
	.type	 sub_80CC408,function
	.thumb_func
sub_80CC408:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L377	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L377	@cond_branch
	ldr	r3, .L379
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L377:
	pop	{r4}
	pop	{r0}
	bx	r0
.L380:
	.align	2, 0
.L379:
	.word	gTasks
.Lfe58:
	.size	 sub_80CC408,.Lfe58-sub_80CC408
	.align	2, 0
	.globl	sub_80CC474
	.type	 sub_80CC474,function
	.thumb_func
sub_80CC474:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L398
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L382	@cond_branch
	ldr	r0, .L398+0x4
	b	.L394
.L399:
	.align	2, 0
.L398:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L382:
	ldr	r0, .L400
.L394:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L384	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x36]
	ldr	r1, .L400+0x4
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x32]
	ldr	r0, .L400+0x8
	b	.L395
.L401:
	.align	2, 0
.L400:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	0xfff0
.L384:
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	ldr	r1, .L402
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r4, #0x32]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L395:
	strh	r0, [r4, #0x20]
	add	r7, r1, #0
	add	r5, r7, #0
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x34]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L388	@cond_branch
	cmp	r0, #0x1
	bgt	.L393	@cond_branch
	cmp	r0, #0
	beq	.L387	@cond_branch
	b	.L386
.L403:
	.align	2, 0
.L402:
	.word	gBattleAnimArgs
.L393:
	cmp	r0, #0x2
	beq	.L389	@cond_branch
	cmp	r0, #0x3
	beq	.L390	@cond_branch
	b	.L386
.L387:
	ldrh	r0, [r5]
	b	.L396
.L388:
	ldrh	r0, [r5]
	strh	r0, [r4, #0x22]
	b	.L397
.L389:
	add	r0, r6, #0
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5]
	add	r0, r0, r5
.L396:
	strh	r0, [r4, #0x22]
	add	r0, r6, #0
	bl	sub_8079ED4
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	b	.L386
.L390:
	ldr	r0, .L404
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r7, [r7]
	add	r0, r0, r7
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
.L397:
	add	r0, r6, #0
	bl	sub_8079ED4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
.L386:
	ldr	r0, .L404+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L405:
	.align	2, 0
.L404:
	.word	gBattleAnimBankTarget
	.word	sub_80CC580
.Lfe59:
	.size	 sub_80CC474,.Lfe59-sub_80CC474
	.align	2, 0
	.type	 sub_80CC580,function
	.thumb_func
sub_80CC580:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x3c
	ldrsh	r3, [r4, r0]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	ldr	r1, .L411
	mov	r5, #0x2e
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mul	r0, r0, r2
	asr	r0, r0, #0x8
	strh	r0, [r4, #0x26]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mul	r0, r0, r3
	strh	r0, [r4, #0x24]
	mov	r5, #0x34
	ldrsh	r0, [r4, r5]
	mul	r0, r0, r3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L407	@cond_branch
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	mov	r5, #0x20
	ldrsh	r1, [r4, r5]
	add	r0, r0, r1
	cmp	r0, #0xf7
	ble	.L406	@cond_branch
	b	.L409
.L412:
	.align	2, 0
.L411:
	.word	gSineTable
.L407:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r2, #0x20
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bgt	.L406	@cond_branch
.L409:
	add	r0, r4, #0
	bl	move_anim_8074EE0
.L406:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 sub_80CC580,.Lfe60-sub_80CC580
	.align	2, 0
	.globl	sub_80CC5F8
	.type	 sub_80CC5F8,function
	.thumb_func
sub_80CC5F8:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L423
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L415	@cond_branch
	cmp	r0, #0x1
	beq	.L416	@cond_branch
	b	.L414
.L424:
	.align	2, 0
.L423:
	.word	gTasks
.L415:
	ldr	r0, .L425
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r4, r2, #0
	add	r0, r0, r4
	strh	r0, [r5, #0x18]
	ldr	r0, .L425+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	add	r0, r0, r4
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L414
.L426:
	.align	2, 0
.L425:
	.word	0x274f
	.word	0x27b0
.L416:
	ldrh	r0, [r5, #0x1a]
	add	r0, r0, #0x1
	mov	r7, #0x0
	strh	r0, [r5, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L414	@cond_branch
	strh	r7, [r5, #0x1a]
	ldrh	r0, [r5, #0x18]
	ldrb	r2, [r5, #0x1c]
	ldr	r4, .L427
	mov	r3, #0x1e
	ldrsh	r1, [r5, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r5, #0x20]
	ldrb	r2, [r5, #0x1c]
	mov	r3, #0x1e
	ldrsh	r1, [r5, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	bne	.L414	@cond_branch
	strh	r7, [r5, #0x1c]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	bne	.L414	@cond_branch
	strh	r7, [r5, #0x1e]
.L414:
	ldr	r0, .L427+0x4
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L422	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L422:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L428:
	.align	2, 0
.L427:
	.word	gUnknown_083D6984
	.word	gBattleAnimArgs
.Lfe61:
	.size	 sub_80CC5F8,.Lfe61-sub_80CC5F8
	.align	2, 0
	.globl	sub_80CC6CC
	.type	 sub_80CC6CC,function
	.thumb_func
sub_80CC6CC:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	ldr	r1, .L438
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L430	@cond_branch
	add	r0, r6, #0
	bl	move_anim_8072740
	b	.L431
.L439:
	.align	2, 0
.L438:
	.word	gBattleAnimArgs
.L430:
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L432	@cond_branch
	ldr	r4, .L440
	b	.L437
.L441:
	.align	2, 0
.L440:
	.word	gBattleAnimBankAttacker
.L432:
	ldr	r4, .L442
.L437:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L442+0x4
	ldrh	r1, [r0, #0x8]
	strh	r1, [r6, #0x2e]
	mov	r3, #0x2
	ldrsh	r1, [r0, r3]
	add	r7, r0, #0
	cmp	r1, #0
	bne	.L434	@cond_branch
	ldrh	r0, [r7, #0x4]
	add	r0, r0, r5
	strh	r0, [r6, #0x20]
	ldrh	r0, [r7, #0x6]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	strh	r5, [r6, #0x38]
	strh	r2, [r6, #0x3a]
	b	.L435
.L443:
	.align	2, 0
.L442:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
.L434:
	strh	r5, [r6, #0x20]
	strh	r2, [r6, #0x22]
	ldrh	r0, [r7, #0x4]
	add	r0, r0, r5
	strh	r0, [r6, #0x38]
	ldrh	r0, [r7, #0x6]
	add	r0, r0, r2
	strh	r0, [r6, #0x3a]
.L435:
	ldrh	r4, [r6, #0x20]
	lsl	r0, r4, #0x4
	strh	r0, [r6, #0x30]
	ldrh	r5, [r6, #0x22]
	lsl	r0, r5, #0x4
	strh	r0, [r6, #0x32]
	mov	r1, #0x38
	ldrsh	r0, [r6, r1]
	mov	r2, #0x20
	ldrsh	r1, [r6, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r3, #0x8
	ldrsh	r1, [r7, r3]
	bl	__divsi3
	strh	r0, [r6, #0x34]
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	mov	r2, #0x22
	ldrsh	r1, [r6, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r3, #0x8
	ldrsh	r1, [r7, r3]
	bl	__divsi3
	strh	r0, [r6, #0x36]
	ldrh	r0, [r6, #0x38]
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r6, #0x3a]
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	sub_80790F0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L436	@cond_branch
	ldr	r1, .L444
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L436:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	sub_8078FDC
	ldr	r0, .L444+0x4
	str	r0, [r6, #0x1c]
.L431:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	0xffff8000
	.word	sub_80CC7D4
.Lfe62:
	.size	 sub_80CC6CC,.Lfe62-sub_80CC6CC
	.align	2, 0
	.type	 sub_80CC7D4,function
	.thumb_func
sub_80CC7D4:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L447	@cond_branch
	ldrh	r0, [r2, #0x34]
	ldrh	r4, [r2, #0x30]
	add	r0, r0, r4
	strh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x36]
	ldrh	r4, [r2, #0x32]
	add	r1, r1, r4
	strh	r1, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r2, #0x22]
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x2e]
	b	.L448
.L447:
	add	r0, r2, #0
	bl	move_anim_8074EE0
.L448:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 sub_80CC7D4,.Lfe63-sub_80CC7D4
	.align	2, 0
	.globl	sub_80CC810
	.type	 sub_80CC810,function
	.thumb_func
sub_80CC810:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L450	@cond_branch
	add	r0, r2, #0
	bl	move_anim_8072740
.L450:
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 sub_80CC810,.Lfe64-sub_80CC810
	.align	2, 0
	.globl	sub_80CC82C
	.type	 sub_80CC82C,function
	.thumb_func
sub_80CC82C:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L455
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L452	@cond_branch
	ldr	r2, .L455+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	b	.L454
.L456:
	.align	2, 0
.L455:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L452:
	ldr	r0, .L457
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
.L454:
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L457+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L457+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4}
	pop	{r0}
	bx	r0
.L458:
	.align	2, 0
.L457:
	.word	gBattleAnimArgs
	.word	sub_8078600
	.word	move_anim_8072740
.Lfe65:
	.size	 sub_80CC82C,.Lfe65-sub_80CC82C
	.align	2, 0
	.globl	sub_80CC884
	.type	 sub_80CC884,function
	.thumb_func
sub_80CC884:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L461
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L460	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L460:
	ldr	r0, .L461+0x4
	str	r0, [r5, #0x1c]
	ldr	r4, .L461+0x8
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	sub_807867C
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	gBattleAnimBankAttacker
	.word	sub_80CC810
	.word	gBattleAnimArgs
.Lfe66:
	.size	 sub_80CC884,.Lfe66-sub_80CC884
	.align	2, 0
	.globl	sub_80CC8C8
	.type	 sub_80CC8C8,function
	.thumb_func
sub_80CC8C8:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L464
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r1, #0xc]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	ldr	r1, .L464+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L464+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L465:
	.align	2, 0
.L464:
	.word	gBattleAnimArgs
	.word	move_anim_8074EE0
	.word	sub_8078504
.Lfe67:
	.size	 sub_80CC8C8,.Lfe67-sub_80CC8C8
	.align	2, 0
	.globl	sub_80CC914
	.type	 sub_80CC914,function
	.thumb_func
sub_80CC914:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L471
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L467	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
.L467:
	ldr	r0, .L471+0x4
	str	r0, [r5, #0x1c]
	ldr	r0, .L471+0x8
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L468	@cond_branch
	ldrh	r0, [r3]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	b	.L469
.L472:
	.align	2, 0
.L471:
	.word	gBattleAnimBankTarget
	.word	sub_80CCB00
	.word	gBattleAnimArgs
.L468:
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r3]
	sub	r0, r0, r1
	strh	r0, [r5, #0x20]
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L469:
	ldrh	r0, [r3, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	ldr	r1, .L473
	add	r0, r1, #0
	ldrh	r2, [r5, #0x30]
	add	r1, r0, r2
	strh	r1, [r5, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r2, [r5, #0x32]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	ldrh	r0, [r3, #0x4]
	strh	r0, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L470	@cond_branch
	neg	r0, r1
	strh	r0, [r5, #0x30]
.L470:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L474:
	.align	2, 0
.L473:
	.word	0xfffffc00
.Lfe68:
	.size	 sub_80CC914,.Lfe68-sub_80CC914
	.align	2, 0
	.globl	sub_80CC9BC
	.type	 sub_80CC9BC,function
	.thumb_func
sub_80CC9BC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldr	r0, .L489
	mov	r1, #0x6
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L477	@cond_branch
	cmp	r0, #0x1
	ble	.L481	@cond_branch
	cmp	r0, #0x2
	beq	.L478	@cond_branch
	b	.L481
.L490:
	.align	2, 0
.L489:
	.word	gBattleAnimArgs
.L477:
	ldr	r5, .L491
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r5]
	eor	r4, r4, r0
	add	r0, r4, #0
	b	.L488
.L492:
	.align	2, 0
.L491:
	.word	gBattleAnimBankTarget
.L478:
	ldr	r5, .L493
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5]
	mov	r2, #0x2
	mov	r8, r2
	mov	r1, r8
	eor	r0, r0, r1
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L476	@cond_branch
	ldrb	r0, [r5]
	mov	r2, r8
	eor	r0, r0, r2
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	lsr	r7, r0, #0x1
	ldrb	r0, [r5]
	mov	r1, r8
	eor	r0, r0, r1
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	lsr	r4, r0, #0x1
	b	.L476
.L494:
	.align	2, 0
.L493:
	.word	gBattleAnimBankTarget
.L481:
	ldr	r4, .L495
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r4]
.L488:
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L476:
	strh	r7, [r6, #0x20]
	strh	r4, [r6, #0x22]
	ldr	r0, .L495
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L484	@cond_branch
	ldrh	r0, [r6, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r6, #0x22]
.L484:
	ldr	r0, .L495+0x4
	str	r0, [r6, #0x1c]
	ldr	r0, .L495+0x8
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L485	@cond_branch
	ldrh	r0, [r3]
	ldrh	r1, [r6, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	b	.L486
.L496:
	.align	2, 0
.L495:
	.word	gBattleAnimBankTarget
	.word	sub_80CCB00
	.word	gBattleAnimArgs
.L485:
	ldrh	r0, [r6, #0x20]
	ldrh	r1, [r3]
	sub	r0, r0, r1
	strh	r0, [r6, #0x20]
	add	r2, r6, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L486:
	ldrh	r0, [r3, #0x2]
	ldrh	r2, [r6, #0x22]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	ldr	r1, .L497
	add	r0, r1, #0
	ldrh	r2, [r6, #0x30]
	add	r1, r0, r2
	strh	r1, [r6, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r2, [r6, #0x32]
	add	r0, r0, r2
	strh	r0, [r6, #0x32]
	ldrh	r0, [r3, #0x4]
	strh	r0, [r6, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L487	@cond_branch
	neg	r0, r1
	strh	r0, [r6, #0x30]
.L487:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L498:
	.align	2, 0
.L497:
	.word	0xfffffc00
.Lfe69:
	.size	 sub_80CC9BC,.Lfe69-sub_80CC9BC
	.align	2, 0
	.type	 sub_80CCB00,function
	.thumb_func
sub_80CCB00:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r0, r1, r2
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L500	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x18
	b	.L503
.L500:
	add	r0, r1, #0
	sub	r0, r0, #0x18
.L503:
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bne	.L502	@cond_branch
	ldr	r1, .L504
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	mov	r0, #0x3
	strh	r0, [r4, #0x2e]
	ldr	r0, .L504+0x4
	str	r0, [r4, #0x1c]
.L502:
	pop	{r4}
	pop	{r0}
	bx	r0
.L505:
	.align	2, 0
.L504:
	.word	move_anim_8072740
	.word	sub_80782D8
.Lfe70:
	.size	 sub_80CCB00,.Lfe70-sub_80CCB00
	.align	2, 0
	.globl	unref_sub_80CCB6C
	.type	 unref_sub_80CCB6C,function
	.thumb_func
unref_sub_80CCB6C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x1
	ble	.L507	@cond_branch
	ldrh	r1, [r5, #0x34]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L508	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x5
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r4, .L512
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r3, [r0]
	add	r1, r2, #0
	and	r1, r1, r3
	strb	r1, [r0]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r2, r2, r1
	strb	r2, [r0]
	b	.L509
.L513:
	.align	2, 0
.L512:
	.word	gSprites
.L508:
	add	r1, r5, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r3, .L514
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
.L509:
	mov	r0, #0x0
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	b	.L510
.L515:
	.align	2, 0
.L514:
	.word	gSprites
.L507:
	add	r0, r1, #0x1
	strh	r0, [r5, #0x32]
.L510:
	mov	r1, #0x34
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xa
	bne	.L511	@cond_branch
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L516
	add	r0, r0, r4
	bl	DestroySprite
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r0, r5, #0
	bl	move_anim_8072740
.L511:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L517:
	.align	2, 0
.L516:
	.word	gSprites
.Lfe71:
	.size	 unref_sub_80CCB6C,.Lfe71-unref_sub_80CCB6C
	.align	2, 0
	.globl	sub_80CCC50
	.type	 sub_80CCC50,function
	.thumb_func
sub_80CCC50:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L522
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L522+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L519	@cond_branch
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r4]
	sub	r0, r0, r1
	b	.L521
.L523:
	.align	2, 0
.L522:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L519:
	ldrh	r0, [r4]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
.L521:
	strh	r0, [r5, #0x20]
	ldr	r4, .L524
	ldrb	r1, [r4, #0xa]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x6]
	neg	r0, r0
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x34]
	ldr	r1, .L524+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gBattleAnimArgs
	.word	sub_80CCCB4
.Lfe72:
	.size	 sub_80CCC50,.Lfe72-sub_80CCC50
	.align	2, 0
	.type	 sub_80CCCB4,function
	.thumb_func
sub_80CCCB4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x64
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L527	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x0
	b	.L530
.L527:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0xe
.L530:
	strb	r0, [r1]
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x2e]
	add	r0, r0, r2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x82
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L529	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L529:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 sub_80CCCB4,.Lfe73-sub_80CCCB4
	.align	2, 0
	.globl	sub_80CCD24
	.type	 sub_80CCD24,function
	.thumb_func
sub_80CCD24:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L532	@cond_branch
	ldr	r1, .L536
	ldrh	r0, [r1, #0x2]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x2]
.L532:
	ldr	r6, .L536+0x4
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	sub_8077EE4
	lsl	r0, r0, #0x18
	ldr	r4, .L536
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	sub_8077EE4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldrb	r0, [r6]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L534	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L533	@cond_branch
.L534:
	ldrb	r0, [r6]
	bl	sub_8079ED4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	b	.L535
.L537:
	.align	2, 0
.L536:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L533:
	ldrb	r0, [r6]
	bl	sub_8079ED4
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
.L535:
	ldr	r0, .L538
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L538+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	strh	r0, [r5, #0x32]
	mov	r2, #0x10
	mov	r0, #0x10
	strh	r0, [r5, #0x3c]
	ldr	r1, .L538+0x8
	mov	r3, #0xfd
	lsl	r3, r3, #0x6
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r3, .L538+0xc
	ldrh	r1, [r5, #0x3c]
	lsl	r0, r1, #0x8
	sub	r2, r2, r1
	orr	r0, r0, r2
	strh	r0, [r3]
	ldr	r0, .L538+0x10
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L539:
	.align	2, 0
.L538:
	.word	gBattleAnimArgs
	.word	0x2828
	.word	0x4000050
	.word	0x4000052
	.word	sub_80CCE0C
.Lfe74:
	.size	 sub_80CCD24,.Lfe74-sub_80CCD24
	.align	2, 0
	.type	 sub_80CCE0C,function
	.thumb_func
sub_80CCE0C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x60
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L541	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldr	r1, .L552
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r5, [r0]
	mov	r2, #0x0
	add	r6, r1, #0
	add	r3, r6, #0
.L542:
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	add	r2, r2, #0x1
	add	r0, r0, r2
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	cmp	r2, #0x5
	ble	.L542	@cond_branch
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r5, [r0]
.L541:
	ldrh	r2, [r4, #0x3c]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	ble	.L547	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	ble	.L548	@cond_branch
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L547	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
	sub	r2, r2, #0x1
	strh	r2, [r4, #0x3c]
	ldr	r3, .L552+0x4
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	strh	r1, [r3]
.L547:
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L548	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L549
.L553:
	.align	2, 0
.L552:
	.word	gPlttBufferFaded
	.word	0x4000052
.L548:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L549	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x3c]
	ldr	r3, .L554
	lsl	r2, r1, #0x8
	mov	r0, #0x10
	sub	r0, r0, r1
	orr	r2, r2, r0
	strh	r2, [r3]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L549	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L554+0x4
	str	r0, [r4, #0x1c]
.L549:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	0x4000052
	.word	sub_807861C
.Lfe75:
	.size	 sub_80CCE0C,.Lfe75-sub_80CCE0C
	.align	2, 0
	.globl	sub_80CCF04
	.type	 sub_80CCF04,function
	.thumb_func
sub_80CCF04:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L557
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L557+0x4
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r5, [r4, #0x34]
	strh	r5, [r4, #0x36]
	strh	r5, [r4, #0x3a]
	mov	r0, #0x10
	strh	r0, [r4, #0x3c]
	ldr	r1, .L557+0x8
	mov	r2, #0xfd
	lsl	r2, r2, #0x6
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r2, .L557+0xc
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x8
	ldrh	r1, [r4, #0x3a]
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L557+0x10
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L558:
	.align	2, 0
.L557:
	.word	gBattleAnimBankTarget
	.word	0xffe8
	.word	0x4000050
	.word	0x4000052
	.word	sub_80CCF70
.Lfe76:
	.size	 sub_80CCF04,.Lfe76-sub_80CCF04
	.align	2, 0
	.type	 sub_80CCF70,function
	.thumb_func
sub_80CCF70:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB6712
	b	.L560	@long jump
.LCB6712:
	lsl	r0, r0, #0x2
	ldr	r1, .L583
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L584:
	.align	2, 0
.L583:
	.word	.L580
	.align	2, 0
	.align	2, 0
.L580:
	.word	.L561
	.word	.L568
	.word	.L570
	.word	.L578
	.word	.L579
.L561:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB6738
	b	.L560	@long jump
.LCB6738:
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L563	@cond_branch
	ldrh	r1, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L565	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x3a]
	b	.L565
.L563:
	ldrh	r1, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L565	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x3c]
.L565:
	ldr	r2, .L585
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x8
	ldrh	r1, [r4, #0x3a]
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L560	@cond_branch
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L560	@cond_branch
	strh	r0, [r4, #0x30]
	b	.L582
.L586:
	.align	2, 0
.L585:
	.word	0x4000052
.L568:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L560	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L582
.L570:
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x4
	bl	sub_80CD0CC
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L571	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
.L571:
	ldrh	r0, [r4, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L560	@cond_branch
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L573	@cond_branch
	ldrh	r1, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L575	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x3a]
	b	.L575
.L573:
	ldrh	r1, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L575	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x3c]
.L575:
	ldr	r0, .L587
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r2, [r4, #0x3a]
	orr	r1, r1, r2
	strh	r1, [r0]
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L560	@cond_branch
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bne	.L560	@cond_branch
	strh	r1, [r4, #0x30]
	strh	r1, [r4, #0x32]
	b	.L582
.L588:
	.align	2, 0
.L587:
	.word	0x4000052
.L578:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L582:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L560
.L579:
	ldr	r0, .L589
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r4, #0
	bl	move_anim_8072740
.L560:
	pop	{r4}
	pop	{r0}
	bx	r0
.L590:
	.align	2, 0
.L589:
	.word	0x4000050
.Lfe77:
	.size	 sub_80CCF70,.Lfe77-sub_80CCF70
	.align	2, 0
	.type	 sub_80CD0CC,function
	.thumb_func
sub_80CD0CC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xb
	bgt	.L592	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L592:
	ldrh	r5, [r4, #0x34]
	add	r0, r5, #0
	sub	r0, r0, #0x12
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	cmp	r0, #0x17
	bhi	.L593	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L593:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2f
	ble	.L594	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L594:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0x9
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	__divsi3
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L595	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L595:
	add	r0, r5, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3b
	ble	.L596	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x34]
.L596:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 sub_80CD0CC,.Lfe78-sub_80CD0CC
	.align	2, 0
	.globl	sub_80CD140
	.type	 sub_80CD140,function
	.thumb_func
sub_80CD140:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L599
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L598	@cond_branch
	add	r0, r4, #0
	bl	sub_8078650
.L598:
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	sub_807867C
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x32]
	ldr	r1, .L599+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L599+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	gBattleAnimArgs
	.word	move_anim_8072740
	.word	sub_8078394
.Lfe79:
	.size	 sub_80CD140,.Lfe79-sub_80CD140
	.align	2, 0
	.globl	sub_80CD190
	.type	 sub_80CD190,function
	.thumb_func
sub_80CD190:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L610
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L602	@cond_branch
	ldr	r0, .L610+0x4
	b	.L608
.L611:
	.align	2, 0
.L610:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L602:
	ldr	r0, .L612
.L608:
	ldrb	r6, [r0]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L604	@cond_branch
	mov	r1, #0x2
	add	r0, r6, #0
	eor	r0, r0, r1
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L604	@cond_branch
	ldr	r4, .L612+0x4
	ldrb	r1, [r4, #0xc]
	add	r2, r5, #0
	add	r2, r2, #0x20
	add	r3, r5, #0
	add	r3, r3, #0x22
	add	r0, r6, #0
	bl	sub_807A3FC
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	add	r0, r5, #0
	bl	sub_807867C
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	b	.L605
.L613:
	.align	2, 0
.L612:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
.L604:
	ldr	r4, .L614
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L606	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x1
	b	.L609
.L615:
	.align	2, 0
.L614:
	.word	gBattleAnimArgs
.L606:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x3
.L609:
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldr	r0, .L616
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r0, r5, #0
	bl	sub_807867C
.L605:
	ldr	r1, .L616
	ldrh	r0, [r1, #0xa]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x32]
	ldr	r1, .L616+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L616+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L617:
	.align	2, 0
.L616:
	.word	gBattleAnimArgs
	.word	move_anim_8072740
	.word	sub_8078394
.Lfe80:
	.size	 sub_80CD190,.Lfe80-sub_80CD190
	.align	2, 0
	.globl	sub_80CD274
	.type	 sub_80CD274,function
	.thumb_func
sub_80CD274:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078650
	ldr	r0, .L621
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L619	@cond_branch
	ldr	r0, .L621+0x4
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	b	.L620
.L622:
	.align	2, 0
.L621:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L619:
	ldr	r2, .L623
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L620:
	ldr	r0, .L623+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L624:
	.align	2, 0
.L623:
	.word	gBattleAnimArgs
	.word	sub_80CD2D4
.Lfe81:
	.size	 sub_80CD274,.Lfe81-sub_80CD274
	.align	2, 0
	.type	 sub_80CD2D4,function
	.thumb_func
sub_80CD2D4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L626	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r0, #0x1e
	sub	r0, r0, r1
	mov	r1, #0x3
	bl	__divsi3
	strh	r0, [r4, #0x26]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x12
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L626:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L627	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L627:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 sub_80CD2D4,.Lfe82-sub_80CD2D4
	.align	2, 0
	.globl	sub_80CD328
	.type	 sub_80CD328,function
	.thumb_func
sub_80CD328:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078650
	ldr	r0, .L631
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L629	@cond_branch
	ldr	r1, .L631+0x4
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L630
.L632:
	.align	2, 0
.L631:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L629:
	ldr	r2, .L633
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldr	r0, .L633+0x4
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L630:
	ldr	r0, .L633+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L634:
	.align	2, 0
.L633:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	sub_80CD394
.Lfe83:
	.size	 sub_80CD328,.Lfe83-sub_80CD328
	.align	2, 0
	.type	 sub_80CD394,function
	.thumb_func
sub_80CD394:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x28
	bl	__divsi3
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L636	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8074EE0
.L636:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 sub_80CD394,.Lfe84-sub_80CD394
	.align	2, 0
	.globl	sub_80CD3E0
	.type	 sub_80CD3E0,function
	.thumb_func
sub_80CD3E0:
	push	{lr}
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x20]
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x22]
	mov	r1, #0x14
	strh	r1, [r0, #0x2e]
	ldr	r1, .L638
	str	r1, [r0, #0x1c]
	ldr	r1, .L638+0x4
	bl	StoreSpriteCallbackInData
	pop	{r0}
	bx	r0
.L639:
	.align	2, 0
.L638:
	.word	sub_80782D8
	.word	sub_80CD408
.Lfe85:
	.size	 sub_80CD3E0,.Lfe85-sub_80CD3E0
	.align	2, 0
	.type	 sub_80CD408,function
	.thumb_func
sub_80CD408:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r6, [r5, #0x38]
	mov	r1, #0x1
	add	r0, r1, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L642	@cond_branch
	cmp	r0, #0x1
	beq	.L643	@cond_branch
	b	.L641
.L642:
	strh	r1, [r5, #0x2e]
	ldr	r0, .L646
	str	r0, [r5, #0x1c]
	ldr	r1, .L646+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	b	.L641
.L647:
	.align	2, 0
.L646:
	.word	sub_80782D8
	.word	sub_80CD408
.L643:
	ldrh	r3, [r5, #0x24]
	ldrh	r0, [r5, #0x20]
	add	r3, r3, r0
	mov	r0, #0x0
	strh	r3, [r5, #0x20]
	ldrh	r4, [r5, #0x26]
	ldrh	r1, [r5, #0x22]
	add	r4, r4, r1
	strh	r4, [r5, #0x22]
	strh	r0, [r5, #0x26]
	strh	r0, [r5, #0x24]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	ldr	r2, .L648
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x1
	add	r1, r0, r2
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	add	r3, r3, r1
	strh	r3, [r5, #0x32]
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r4, r4, r0
	strh	r4, [r5, #0x36]
	ldr	r0, .L648+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L648+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	mov	r0, #0x3f
	bl	sub_8076F98
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xd2
	bl	PlaySE12WithPanning
.L641:
	ldrh	r0, [r5, #0x38]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r5, #0x38]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	gUnknown_083D6DDC
	.word	sub_8078B34
	.word	sub_80CD4B8
.Lfe86:
	.size	 sub_80CD408,.Lfe86-sub_80CD408
	.align	2, 0
	.type	 sub_80CD4B8,function
	.thumb_func
sub_80CD4B8:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L651	@cond_branch
	mov	r0, #0xa
	strh	r0, [r2, #0x2e]
	ldr	r0, .L653
	str	r0, [r2, #0x1c]
	ldr	r1, .L653+0x4
	add	r0, r2, #0
	bl	StoreSpriteCallbackInData
	b	.L652
.L654:
	.align	2, 0
.L653:
	.word	sub_80782D8
	.word	sub_80CD4EC
.L651:
	ldr	r0, .L655
	str	r0, [r2, #0x1c]
.L652:
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	sub_80CD408
.Lfe87:
	.size	 sub_80CD4B8,.Lfe87-sub_80CD4B8
	.align	2, 0
	.type	 sub_80CD4EC,function
	.thumb_func
sub_80CD4EC:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x6]
	cmp	r1, #0
	bne	.L658	@cond_branch
	mov	r0, #0x3
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	strh	r1, [r5, #0x32]
	ldr	r0, .L668
	str	r0, [r5, #0x1c]
	ldr	r1, .L668+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	b	.L659
.L669:
	.align	2, 0
.L668:
	.word	sub_80782D8
	.word	sub_80CD5A8
.L658:
	ldrh	r0, [r5, #0x6]
	cmp	r0, #0x2
	beq	.L662	@cond_branch
	cmp	r0, #0x2
	bgt	.L666	@cond_branch
	cmp	r0, #0x1
	beq	.L661	@cond_branch
	b	.L664
.L666:
	cmp	r0, #0x3
	beq	.L663	@cond_branch
	b	.L664
.L661:
	ldr	r6, .L670
	add	r7, r6, #0
	b	.L660
.L671:
	.align	2, 0
.L670:
	.word	0xfff8
.L662:
	ldr	r7, .L672
	b	.L667
.L673:
	.align	2, 0
.L672:
	.word	0xfff8
.L663:
	mov	r7, #0x8
	ldr	r6, .L674
	b	.L660
.L675:
	.align	2, 0
.L674:
	.word	0xfff8
.L664:
	mov	r7, #0x8
.L667:
	mov	r6, #0x8
.L660:
	ldrh	r0, [r5, #0x24]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r1, [r5, #0x26]
	strh	r1, [r5, #0x24]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L676
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L676+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L676+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
.L659:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	gBattleAnimBankTarget
	.word	sub_8078B34
	.word	sub_80CD654
.Lfe88:
	.size	 sub_80CD4EC,.Lfe88-sub_80CD4EC
	.align	2, 0
	.type	 sub_80CD5A8,function
	.thumb_func
sub_80CD5A8:
	push	{r4, lr}
	add	sp, sp, #0xfffffff4
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L679	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x3
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L681	@cond_branch
	mov	r0, #0x10
	b	.L686
.L679:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x3
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L681	@cond_branch
	mov	r0, #0x0
.L686:
	strh	r0, [r4, #0x30]
.L681:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	sub_80791A8
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L687
	bl	BlendPalettes
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bne	.L683	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrb	r1, [r4, #0x5]
	lsr	r1, r1, #0x4
	lsl	r0, r1, #0x5
	ldr	r2, .L687+0x4
	add	r0, r0, r2
	lsl	r1, r1, #0x4
	ldr	r3, .L687+0x8
	add	r2, r3, #0
	orr	r1, r1, r2
	mov	r2, #0x4
	bl	LoadPalette
	mov	r0, #0x3f
	bl	sub_8076F98
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc0
	bl	PlaySE12WithPanning
	b	.L684
.L688:
	.align	2, 0
.L687:
	.word	0x7fff
	.word	gPlttBufferUnfaded+0x210
	.word	0x101
.L683:
	cmp	r0, #0
	bne	.L684	@cond_branch
	ldr	r0, .L689
	str	r0, [r4, #0x1c]
.L684:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L690:
	.align	2, 0
.L689:
	.word	sub_80CD654
.Lfe89:
	.size	 sub_80CD5A8,.Lfe89-sub_80CD5A8
	.align	2, 0
	.type	 sub_80CD654,function
	.thumb_func
sub_80CD654:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L693
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L693+0x4
	cmp	r1, r0
	bne	.L692	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	strh	r0, [r2, #0x2e]
	ldr	r0, .L693+0x8
	str	r0, [r2, #0x1c]
.L692:
	pop	{r0}
	bx	r0
.L694:
	.align	2, 0
.L693:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	sub_80CD67C
.Lfe90:
	.size	 sub_80CD654,.Lfe90-sub_80CD654
	.align	2, 0
	.type	 sub_80CD67C,function
	.thumb_func
sub_80CD67C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L696	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L696:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8
	bne	.L697	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L697:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 sub_80CD67C,.Lfe91-sub_80CD67C
	.align	2, 0
	.globl	sub_80CD6CC
	.type	 sub_80CD6CC,function
	.thumb_func
sub_80CD6CC:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, .L706
	ldrh	r0, [r0]
	strh	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L699	@cond_branch
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	b	.L700
.L707:
	.align	2, 0
.L706:
	.word	gBattleAnimArgs
.L699:
	cmp	r0, #0x2
	bne	.L701	@cond_branch
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x20
	b	.L705
.L701:
	cmp	r0, #0x3
	bne	.L703	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	b	.L705
.L703:
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x30
.L705:
	orr	r0, r0, r1
	strb	r0, [r3, #0x3]
.L700:
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r4, .L708
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L708+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldr	r1, .L708+0x8
	str	r1, [r3, #0x1c]
	add	r0, r3, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L709:
	.align	2, 0
.L708:
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_80CD3E0
.Lfe92:
	.size	 sub_80CD6CC,.Lfe92-sub_80CD6CC
	.align	2, 0
	.globl	sub_80CD774
	.type	 sub_80CD774,function
	.thumb_func
sub_80CD774:
	push	{lr}
	add	r3, r0, #0
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	ldr	r0, .L719
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L713	@cond_branch
	cmp	r0, #0x1
	bgt	.L717	@cond_branch
	cmp	r0, #0
	beq	.L712	@cond_branch
	b	.L715
.L720:
	.align	2, 0
.L719:
	.word	gBattleAnimArgs
.L717:
	cmp	r0, #0x2
	beq	.L714	@cond_branch
	b	.L715
.L712:
	ldr	r0, .L721
	b	.L718
.L722:
	.align	2, 0
.L721:
	.word	sub_80CD7CC
.L713:
	ldr	r0, .L723
	b	.L718
.L724:
	.align	2, 0
.L723:
	.word	sub_80CD8A8
.L714:
	ldr	r0, .L725
	b	.L718
.L726:
	.align	2, 0
.L725:
	.word	sub_80CD8F8
.L715:
	ldr	r0, .L727
.L718:
	str	r0, [r3, #0x1c]
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	sub_80CD9B8
.Lfe93:
	.size	 sub_80CD774,.Lfe93-sub_80CD774
	.align	2, 0
	.type	 sub_80CD7CC,function
	.thumb_func
sub_80CD7CC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	strh	r0, [r4, #0x2e]
	ldr	r5, .L732
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r2, #0x2
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L730	@cond_branch
	mov	r1, #0x2
.L730:
	strh	r1, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L732+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	ldr	r1, .L732+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L732+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L733:
	.align	2, 0
.L732:
	.word	gBattleAnimBankAttacker
	.word	gObjectBankIDs
	.word	sub_80CD81C
	.word	sub_8078458
.Lfe94:
	.size	 sub_80CD7CC,.Lfe94-sub_80CD7CC
	.align	2, 0
	.type	 sub_80CD81C,function
	.thumb_func
sub_80CD81C:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x2e
	ldrsh	r6, [r5, r0]
	cmp	r6, #0
	bne	.L735	@cond_branch
	ldr	r1, .L739
	ldr	r4, .L739+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5, #0x34]
	mov	r1, #0x0
	bl	sub_8078E70
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	ldr	r2, .L739+0x8
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L736	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	add	r1, r0, #0
.L736:
	strh	r1, [r5, #0x36]
	strh	r6, [r5, #0x38]
.L735:
	ldrh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r5, #0x38]
	add	r1, r2, #0
	bl	obj_id_set_rotscale
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8078F9C
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L738	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L739+0xc
	str	r0, [r5, #0x1c]
.L738:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L740:
	.align	2, 0
.L739:
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
	.word	0xfffffd00
	.word	sub_80CD9B8
.Lfe95:
	.size	 sub_80CD81C,.Lfe95-sub_80CD81C
	.align	2, 0
	.type	 sub_80CD8A8,function
	.thumb_func
sub_80CD8A8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r5, .L744
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r1, #0x3
	cmp	r0, #0
	beq	.L742	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	add	r1, r0, #0
.L742:
	strh	r1, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L744+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	ldr	r1, .L744+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L744+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L745:
	.align	2, 0
.L744:
	.word	gBattleAnimBankAttacker
	.word	gObjectBankIDs
	.word	sub_80CD9B8
	.word	sub_8078458
.Lfe96:
	.size	 sub_80CD8A8,.Lfe96-sub_80CD8A8
	.align	2, 0
	.type	 sub_80CD8F8,function
	.thumb_func
sub_80CD8F8:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L747	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L748
	str	r0, [r1, #0x1c]
.L747:
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	sub_80CD91C
.Lfe97:
	.size	 sub_80CD8F8,.Lfe97-sub_80CD8F8
	.align	2, 0
	.type	 sub_80CD91C,function
	.thumb_func
sub_80CD91C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L751	@cond_branch
	ldr	r1, .L756
	ldr	r4, .L756+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L752	@cond_branch
	mov	r0, #0xfc
	lsl	r0, r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	b	.L755
.L757:
	.align	2, 0
.L756:
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
.L752:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x36]
	mov	r0, #0xf4
	lsl	r0, r0, #0x8
.L755:
	strh	r0, [r5, #0x38]
.L751:
	ldrh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r5, #0x38]
	add	r1, r2, #0
	bl	obj_id_set_rotscale
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8078F9C
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L754	@cond_branch
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8078F40
	ldr	r0, .L758
	str	r0, [r5, #0x1c]
.L754:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L759:
	.align	2, 0
.L758:
	.word	sub_80CD9B8
.Lfe98:
	.size	 sub_80CD91C,.Lfe98-sub_80CD91C
	.align	2, 0
	.type	 sub_80CD9B8,function
	.thumb_func
sub_80CD9B8:
	push	{lr}
	bl	move_anim_8072740
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 sub_80CD9B8,.Lfe99-sub_80CD9B8
	.align	2, 0
	.globl	sub_80CD9C4
	.type	 sub_80CD9C4,function
	.thumb_func
sub_80CD9C4:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldr	r1, .L762
	str	r1, [r0, #0x1c]
	bx	lr
.L763:
	.align	2, 0
.L762:
	.word	sub_80CD9D4
.Lfe100:
	.size	 sub_80CD9C4,.Lfe100-sub_80CD9C4
	.align	2, 0
	.type	 sub_80CD9D4,function
	.thumb_func
sub_80CD9D4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L769	@cond_branch
	cmp	r5, #0x1
	bgt	.L775	@cond_branch
	cmp	r5, #0
	beq	.L766	@cond_branch
	b	.L765
.L775:
	cmp	r5, #0x2
	beq	.L771	@cond_branch
	b	.L765
.L766:
	strh	r5, [r4, #0x30]
	ldr	r1, .L776
	ldr	r2, .L776+0x4
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x32]
	ldrb	r0, [r2]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x34]
	ldr	r2, .L776+0x8
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L767	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r1, r0, #0
.L767:
	strh	r1, [r4, #0x36]
	strh	r5, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	sub_8078E70
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L769:
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x38]
	add	r1, r2, #0
	bl	obj_id_set_rotscale
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8078F9C
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L765	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L765
.L777:
	.align	2, 0
.L776:
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
	.word	0xfffffe00
.L771:
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x38]
	add	r1, r2, #0
	bl	obj_id_set_rotscale
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8078F9C
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L765	@cond_branch
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8078F40
	add	r0, r4, #0
	bl	move_anim_8072740
.L765:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 sub_80CD9D4,.Lfe101-sub_80CD9D4
	.align	2, 0
	.globl	sub_80CDAC8
	.type	 sub_80CDAC8,function
	.thumb_func
sub_80CDAC8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L787
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r1, .L787+0x4
	ldr	r2, .L787+0x8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x0
	strh	r0, [r5, #0x8]
	ldrb	r0, [r2]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	strh	r2, [r5, #0xa]
	strh	r4, [r5, #0xc]
	ldr	r0, .L787+0xc
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	cmp	r1, #0
	beq	.L781	@cond_branch
	cmp	r1, #0x1
	beq	.L783	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L779
.L788:
	.align	2, 0
.L787:
	.word	gTasks
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L781:
	strh	r1, [r5, #0xc]
	mov	r0, #0x8
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	mov	r0, #0x3
	strh	r0, [r5, #0x12]
	cmp	r2, #0
	bne	.L782	@cond_branch
	neg	r0, r0
	strh	r0, [r5, #0x12]
.L782:
	ldr	r0, .L789
	b	.L786
.L790:
	.align	2, 0
.L789:
	.word	sub_80CDB60
.L783:
	mov	r0, #0x8
	strh	r0, [r5, #0xe]
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x10]
	mov	r1, #0xc0
	strh	r1, [r5, #0x12]
	cmp	r2, #0
	bne	.L784	@cond_branch
	neg	r0, r0
	strh	r0, [r5, #0x10]
	neg	r0, r1
	strh	r0, [r5, #0x12]
.L784:
	ldr	r0, .L791
.L786:
	str	r0, [r5]
.L779:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L792:
	.align	2, 0
.L791:
	.word	sub_80CDD20
.Lfe102:
	.size	 sub_80CDAC8,.Lfe102-sub_80CDAC8
	.align	2, 0
	.type	 sub_80CDB60,function
	.thumb_func
sub_80CDB60:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L826
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB8812
	b	.L794	@long jump
.LCB8812:
	lsl	r0, r0, #0x2
	ldr	r1, .L826+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L827:
	.align	2, 0
.L826:
	.word	gTasks
	.word	.L820
	.align	2, 0
	.align	2, 0
.L820:
	.word	.L795
	.word	.L800
	.word	.L805
	.word	.L812
	.word	.L817
.L795:
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	beq	.L796	@cond_branch
	ldrh	r2, [r4, #0x12]
	ldrh	r3, [r4, #0x10]
	add	r2, r2, r3
	b	.L822
.L796:
	mov	r0, #0x8
	strh	r0, [r4, #0xe]
	strh	r1, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r1, #0xc0
	cmp	r0, #0
	bne	.L798	@cond_branch
	mov	r2, #0xc0
	neg	r2, r2
	add	r1, r2, #0
.L798:
	strh	r1, [r4, #0x12]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	sub_8078E70
	b	.L823
.L800:
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L801	@cond_branch
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x10]
	add	r1, r2, #0
	bl	obj_id_set_rotscale
	ldrb	r0, [r4, #0x8]
	bl	sub_8078F9C
	b	.L824
.L801:
	mov	r0, #0x8
	strh	r0, [r4, #0xe]
	ldr	r2, .L828
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L803	@cond_branch
	mov	r1, #0x2
.L803:
	strh	r1, [r4, #0x12]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L823
.L829:
	.align	2, 0
.L828:
	.word	gSprites
.L805:
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L806	@cond_branch
	ldrh	r1, [r4, #0x14]
	mov	r3, #0x14
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L807	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	b	.L794
.L807:
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L809	@cond_branch
	ldr	r2, .L830
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r2, [r4, #0x10]
	add	r1, r1, r2
	b	.L825
.L831:
	.align	2, 0
.L830:
	.word	gSprites
.L809:
	ldr	r2, .L832
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
.L825:
	strh	r1, [r0, #0x24]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L824
.L833:
	.align	2, 0
.L832:
	.word	gSprites
.L806:
	ldr	r2, .L834
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	strh	r1, [r0, #0x24]
	mov	r0, #0xc
	strh	r0, [r4, #0xe]
	b	.L823
.L835:
	.align	2, 0
.L834:
	.word	gSprites
.L812:
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L813	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L794
.L813:
	mov	r0, #0x3
	strh	r0, [r4, #0xe]
	ldr	r2, .L836
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x8
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L815	@cond_branch
	mov	r1, #0x8
.L815:
	strh	r1, [r4, #0x12]
.L823:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L794
.L837:
	.align	2, 0
.L836:
	.word	gSprites
.L817:
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L818	@cond_branch
	ldrh	r2, [r4, #0x12]
	ldrh	r0, [r4, #0x10]
	add	r2, r2, r0
.L822:
	strh	r2, [r4, #0x10]
	ldr	r3, .L838
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r2, [r0, #0x24]
.L824:
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L794
.L839:
	.align	2, 0
.L838:
	.word	gSprites
.L818:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L794:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe103:
	.size	 sub_80CDB60,.Lfe103-sub_80CDB60
	.align	2, 0
	.type	 sub_80CDD20,function
	.thumb_func
sub_80CDD20:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L843
	add	r4, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L841	@cond_branch
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x10]
	add	r1, r2, #0
	bl	obj_id_set_rotscale
	ldrb	r0, [r4, #0x8]
	bl	sub_8078F9C
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L842
.L844:
	.align	2, 0
.L843:
	.word	gTasks
.L841:
	ldrb	r0, [r4, #0x8]
	bl	sub_8078F40
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L842:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 sub_80CDD20,.Lfe104-sub_80CDD20
	.align	2, 0
	.globl	sub_80CDD74
	.type	 sub_80CDD74,function
	.thumb_func
sub_80CDD74:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L849
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L846	@cond_branch
	ldr	r4, .L849+0x4
	b	.L848
.L850:
	.align	2, 0
.L849:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L846:
	ldr	r4, .L851
.L848:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x30]
	ldr	r1, .L851+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L851+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L852:
	.align	2, 0
.L851:
	.word	gBattleAnimBankTarget
	.word	sub_80CDEC0
	.word	sub_8078600
.Lfe105:
	.size	 sub_80CDD74,.Lfe105-sub_80CDD74
	.align	2, 0
	.globl	sub_80CDDDC
	.type	 sub_80CDDDC,function
	.thumb_func
sub_80CDDDC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L854
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L854+0x4
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L854+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L854+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L855:
	.align	2, 0
.L854:
	.word	gBattleAnimBankTarget
	.word	0xffd0
	.word	sub_80CDE78
	.word	sub_8078600
.Lfe106:
	.size	 sub_80CDDDC,.Lfe106-sub_80CDDDC
	.align	2, 0
	.globl	sub_80CDE24
	.type	 sub_80CDE24,function
	.thumb_func
sub_80CDE24:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L857
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L857+0x4
	ldr	r2, .L857+0x8
	add	r0, r0, r2
	ldrh	r1, [r1]
	add	r0, r0, r1
	mov	r6, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	strh	r6, [r4, #0x30]
	ldr	r0, .L857+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L858:
	.align	2, 0
.L857:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	0xffd0
	.word	sub_80CDEC0
.Lfe107:
	.size	 sub_80CDE24,.Lfe107-sub_80CDE24
	.align	2, 0
	.type	 sub_80CDE78,function
	.thumb_func
sub_80CDE78:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L860	@cond_branch
	mov	r0, #0xc
	strh	r0, [r4, #0x2e]
	mov	r0, #0x8
	strh	r0, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L861
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L861+0x4
	str	r0, [r4, #0x1c]
.L860:
	pop	{r4}
	pop	{r0}
	bx	r0
.L862:
	.align	2, 0
.L861:
	.word	sub_80CDEB0
	.word	sub_8078364
.Lfe108:
	.size	 sub_80CDE78,.Lfe108-sub_80CDE78
	.align	2, 0
	.type	 sub_80CDEB0,function
	.thumb_func
sub_80CDEB0:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	strh	r1, [r0, #0x30]
	ldr	r1, .L864
	str	r1, [r0, #0x1c]
	bx	lr
.L865:
	.align	2, 0
.L864:
	.word	sub_80CDEC0
.Lfe109:
	.size	 sub_80CDEB0,.Lfe109-sub_80CDEB0
	.align	2, 0
	.type	 sub_80CDEC0,function
	.thumb_func
sub_80CDEC0:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L867	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L867	@cond_branch
	add	r0, r3, #0
	bl	move_anim_8072740
.L867:
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 sub_80CDEC0,.Lfe110-sub_80CDEC0
	.align	2, 0
	.globl	sub_80CDF0C
	.type	 sub_80CDF0C,function
	.thumb_func
sub_80CDF0C:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L873
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L870	@cond_branch
	ldr	r4, .L873+0x4
	b	.L872
.L874:
	.align	2, 0
.L873:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L870:
	ldr	r4, .L875
.L872:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L875+0x4
	ldrh	r0, [r0, #0x6]
	strh	r0, [r5, #0x30]
	ldr	r0, .L875+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L876:
	.align	2, 0
.L875:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	sub_80CDF70
.Lfe111:
	.size	 sub_80CDF0C,.Lfe111-sub_80CDF0C
	.align	2, 0
	.type	 sub_80CDF70,function
	.thumb_func
sub_80CDF70:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x30
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	ble	.L878	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x22]
.L878:
	ldrh	r0, [r2, #0x22]
	ldrh	r1, [r2, #0x2e]
	sub	r0, r0, r1
	strh	r0, [r2, #0x22]
	add	r0, r2, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L879	@cond_branch
	add	r0, r2, #0
	bl	move_anim_8072740
.L879:
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 sub_80CDF70,.Lfe112-sub_80CDF70
	.align	2, 0
	.globl	sub_80CDFB0
	.type	 sub_80CDFB0,function
	.thumb_func
sub_80CDFB0:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L881
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0xc
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	mov	r0, #0x2
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r5, [r4, #0x34]
	strh	r5, [r4, #0x36]
	sub	r0, r0, #0x42
	bl	sub_8076F98
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x38]
	ldr	r0, .L881+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L882:
	.align	2, 0
.L881:
	.word	gBattleAnimBankAttacker
	.word	sub_80CE000
.Lfe113:
	.size	 sub_80CDFB0,.Lfe113-sub_80CDFB0
	.align	2, 0
	.type	 sub_80CE000,function
	.thumb_func
sub_80CE000:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L884	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L885	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L885	@cond_branch
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc2
	bl	PlaySE12WithPanning
.L885:
	mov	r1, #0x0
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L884	@cond_branch
	strh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L884:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L888	@cond_branch
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	ble	.L888	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L888	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L888:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 sub_80CE000,.Lfe114-sub_80CE000
	.align	2, 0
	.globl	sub_80CE09C
	.type	 sub_80CE09C,function
	.thumb_func
sub_80CE09C:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L890	@cond_branch
	ldr	r4, .L893
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r5, .L893+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r5]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x2]
	add	r0, r0, r5
	strh	r0, [r6, #0x22]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L891	@cond_branch
	ldrh	r0, [r6, #0x22]
	add	r0, r0, #0xa
	strh	r0, [r6, #0x22]
.L891:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2e]
.L890:
	ldr	r0, .L893+0x4
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L893+0x8
	cmp	r1, r0
	bne	.L892	@cond_branch
	add	r0, r6, #0
	bl	move_anim_8072740
.L892:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L894:
	.align	2, 0
.L893:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe115:
	.size	 sub_80CE09C,.Lfe115-sub_80CE09C
	.align	2, 0
	.globl	sub_80CE108
	.type	 sub_80CE108,function
	.thumb_func
sub_80CE108:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L903
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L896	@cond_branch
	ldr	r1, .L903+0x4
	ldr	r0, .L903+0x8
	strh	r0, [r1, #0xe]
	b	.L902
.L904:
	.align	2, 0
.L903:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0xffff
.L896:
	cmp	r0, #0x2
	bne	.L898	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L897
.L898:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L897	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	ldr	r3, .L905
	lsl	r2, r1, #0x8
	mov	r0, #0x10
	sub	r0, r0, r1
	orr	r2, r2, r0
	strh	r2, [r3]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L897	@cond_branch
.L902:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
.L897:
	pop	{r4}
	pop	{r0}
	bx	r0
.L906:
	.align	2, 0
.L905:
	.word	0x4000052
.Lfe116:
	.size	 sub_80CE108,.Lfe116-sub_80CE108
	.align	2, 0
	.globl	sub_80CE17C
	.type	 sub_80CE17C,function
	.thumb_func
sub_80CE17C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	sub_8078764
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L908
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L908+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L909:
	.align	2, 0
.L908:
	.word	gBattleAnimArgs
	.word	sub_80CE1AC
.Lfe117:
	.size	 sub_80CE17C,.Lfe117-sub_80CE17C
	.align	2, 0
	.type	 sub_80CE1AC,function
	.thumb_func
sub_80CE1AC:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L911	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x2e]
	b	.L912
.L911:
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1e
	strh	r0, [r5, #0x2e]
	ldr	r4, .L913
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L913+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L913+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
.L912:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L914:
	.align	2, 0
.L913:
	.word	gBattleAnimBankAttacker
	.word	sub_8078B34
	.word	move_anim_8072740
.Lfe118:
	.size	 sub_80CE1AC,.Lfe118-sub_80CE1AC
	.align	2, 0
	.globl	sub_80CE210
	.type	 sub_80CE210,function
	.thumb_func
sub_80CE210:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L918
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L916	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	ldrh	r1, [r3, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r3, #0xa]
	ldr	r2, .L918+0x4
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r2]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x10
	bne	.L916	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L916:
	pop	{r4}
	pop	{r0}
	bx	r0
.L919:
	.align	2, 0
.L918:
	.word	gTasks
	.word	0x4000052
.Lfe119:
	.size	 sub_80CE210,.Lfe119-sub_80CE210
	.align	2, 0
	.globl	unref_sub_80CE260
	.type	 unref_sub_80CE260,function
	.thumb_func
unref_sub_80CE260:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L928
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L922	@cond_branch
	ldr	r6, .L928+0x4
	ldr	r5, .L928+0x8
.L924:
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L925	@cond_branch
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L925	@cond_branch
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	sub_8043DB0
.L925:
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L923	@cond_branch
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L923	@cond_branch
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	sub_8043DB0
.L923:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L928
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L924	@cond_branch
.L922:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L929:
	.align	2, 0
.L928:
	.word	gNoOfAllBanks
	.word	gBattleAnimArgs
	.word	gHealthboxIDs
.Lfe120:
	.size	 unref_sub_80CE260,.Lfe120-unref_sub_80CE260
	.align	2, 0
	.globl	unref_sub_80CE2D4
	.type	 unref_sub_80CE2D4,function
	.thumb_func
unref_sub_80CE2D4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	b	.L936
.L934:
	ldr	r0, .L937
	add	r0, r4, r0
	ldrb	r0, [r0]
	bl	sub_8043DFC
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L936:
	ldr	r0, .L937+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L934	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L938:
	.align	2, 0
.L937:
	.word	gHealthboxIDs
	.word	gNoOfAllBanks
.Lfe121:
	.size	 unref_sub_80CE2D4,.Lfe121-unref_sub_80CE2D4
	.align	2, 0
	.globl	sub_80CE30C
	.type	 sub_80CE30C,function
	.thumb_func
sub_80CE30C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L940	@cond_branch
	mov	r0, #0x30
	strh	r0, [r4, #0x20]
	mov	r0, #0x28
	b	.L942
.L940:
	ldr	r0, .L943
	ldrh	r1, [r0]
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
.L942:
	strh	r0, [r4, #0x22]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldrb	r0, [r4, #0x3]
	mov	r1, #0xc0
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L943+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L944:
	.align	2, 0
.L943:
	.word	gBattleAnimArgs
	.word	sub_80CE354
.Lfe122:
	.size	 sub_80CE30C,.Lfe122-sub_80CE30C
	.align	2, 0
	.type	 sub_80CE354,function
	.thumb_func
sub_80CE354:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L946	@cond_branch
	add	r0, r1, #0
	bl	move_anim_8072740
.L946:
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 sub_80CE354,.Lfe123-sub_80CE354
	.align	2, 0
	.globl	sub_80CE36C
	.type	 sub_80CE36C,function
	.thumb_func
sub_80CE36C:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L948
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r2, .L948+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	strh	r1, [r4, #0x32]
	strh	r1, [r4, #0x34]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	ldr	r0, .L948+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L949:
	.align	2, 0
.L948:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_80CE3B0
.Lfe124:
	.size	 sub_80CE36C,.Lfe124-sub_80CE36C
	.align	2, 0
	.type	 sub_80CE3B0,function
	.thumb_func
sub_80CE3B0:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L951	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x32]
	mov	r3, #0x32
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x77
	bgt	.L951	@cond_branch
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	add	r0, r2, #0x1
	strh	r0, [r1, #0x32]
.L951:
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L953	@cond_branch
	add	r0, r1, #0
	bl	move_anim_8072740
.L953:
	pop	{r0}
	bx	r0
.Lfe125:
	.size	 sub_80CE3B0,.Lfe125-sub_80CE3B0
	.align	2, 0
	.globl	sub_80CE3EC
	.type	 sub_80CE3EC,function
	.thumb_func
sub_80CE3EC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80791A8
	mov	r8, r0
	ldr	r0, .L955
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	ldr	r0, .L955+0x4
	mov	r9, r0
	lsl	r5, r7, #0x2
	add	r5, r5, r7
	lsl	r5, r5, #0x3
	add	r6, r5, r0
	strh	r4, [r6, #0x8]
	strh	r4, [r6, #0xa]
	strh	r4, [r6, #0xc]
	strh	r1, [r6, #0xe]
	strh	r4, [r6, #0x10]
	strh	r4, [r6, #0x12]
	strh	r4, [r6, #0x14]
	mov	r0, #0xd
	strh	r0, [r6, #0x16]
	mov	r0, #0xe
	strh	r0, [r6, #0x18]
	mov	r0, #0xf
	strh	r0, [r6, #0x1a]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	sub_80792C0
	mov	sl, r0
	mov	r1, r8
	orr	r1, r1, r0
	mov	r8, r1
	mov	r0, #0x8
	add	r9, r9, r0
	add	r5, r5, r9
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r5, r5, #0x1e
	add	r1, r5, #0
	mov	r2, r8
	bl	sub_8079BF4
	ldr	r0, .L955+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x9
	add	r1, r4, #0
	lsl	r1, r1, r0
	mov	r0, sl
	orr	r0, r0, r1
	mov	sl, r0
	ldr	r0, .L955+0xc
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, r0
	mov	r1, sl
	orr	r4, r4, r1
	ldr	r0, .L955+0x10
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L955+0x14
	str	r1, [r6]
	add	r0, r7, #0
	bl	_call_via_r1
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L956:
	.align	2, 0
.L955:
	.word	0xffff
	.word	gTasks
	.word	0x27d2
	.word	0x27d3
	.word	0x7fbb
	.word	sub_80CE4D4
.Lfe126:
	.size	 sub_80CE3EC,.Lfe126-sub_80CE3EC
	.align	2, 0
	.type	 sub_80CE4D4,function
	.thumb_func
sub_80CE4D4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L991
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L974	@cond_branch
	cmp	r1, #0x1
	bgt	.L989	@cond_branch
	cmp	r1, #0
	beq	.L959	@cond_branch
	b	.L958
.L992:
	.align	2, 0
.L991:
	.word	gTasks
.L989:
	cmp	r1, #0x2
	bne	.LCB10477
	b	.L983	@long jump
.LCB10477:
	cmp	r1, #0x3
	bne	.LCB10479
	b	.L985	@long jump
.LCB10479:
	b	.L958
.L959:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB10491
	b	.L958	@long jump
.LCB10491:
	strh	r1, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L961	@cond_branch
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r2, [r4, #0x18]
	ldrh	r3, [r4, #0x12]
	add	r2, r2, r3
	strh	r2, [r4, #0x12]
	ldrh	r1, [r4, #0x1a]
	ldrh	r5, [r4, #0x14]
	add	r1, r1, r5
	strh	r1, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x13
	lsl	r2, r2, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	lsl	r1, r1, #0x10
	lsr	r2, r2, #0xb
	orr	r0, r0, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	ip, r0
	b	.L962
.L961:
	ldr	r7, .L993
	mov	ip, r7
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L962:
	mov	r2, #0x1
	mov	r3, #0x0
	mov	r1, #0x0
.L966:
	mov	r5, #0xe
	ldrsh	r0, [r4, r5]
	and	r0, r0, r2
	lsl	r5, r2, #0x11
	add	r6, r3, #0
	add	r6, r6, #0x10
	add	r1, r1, #0x1
	mov	r8, r1
	cmp	r0, #0
	beq	.L967	@cond_branch
	mov	r1, #0x1
	ldr	r2, .L993+0x4
.L971:
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	mov	r7, ip
	strh	r7, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L971	@cond_branch
.L967:
	lsr	r2, r5, #0x10
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L966	@cond_branch
	b	.L958
.L994:
	.align	2, 0
.L993:
	.word	0x7fbb
	.word	gPlttBufferFaded
.L974:
	ldr	r0, .L995
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L958	@cond_branch
	mov	r2, #0x0
	ldr	r3, .L995+0x4
	mov	r5, #0x14
	add	r5, r5, r3
	mov	ip, r5
	ldr	r7, .L995+0x8
	mov	r8, r7
	ldr	r6, .L995+0xc
	mov	r5, #0x1
.L979:
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r1, r0, #0x2
	mov	r7, ip
	add	r0, r1, r7
	ldr	r0, [r0]
	cmp	r0, r8
	beq	.L981	@cond_branch
	cmp	r0, r6
	bne	.L978	@cond_branch
.L981:
	add	r0, r1, r3
	strh	r5, [r0, #0x2e]
.L978:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3f
	bls	.L979	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L990
.L996:
	.align	2, 0
.L995:
	.word	gPaletteFade
	.word	gSprites
	.word	gBattleAnimSpriteTemplate_83D6FC8
	.word	gBattleAnimSpriteTemplate_83D6FF8
.L983:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L958	@cond_branch
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	bl	sub_8079BFC
	ldr	r1, .L997
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L990:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L958
.L998:
	.align	2, 0
.L997:
	.word	0x7fbb
.L985:
	ldr	r0, .L999
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L958	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L958:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1000:
	.align	2, 0
.L999:
	.word	gPaletteFade
.Lfe127:
	.size	 sub_80CE4D4,.Lfe127-sub_80CE4D4
	.align	2, 0
	.globl	sub_80CE670
	.type	 sub_80CE670,function
	.thumb_func
sub_80CE670:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L1009
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bgt	.L1002	@cond_branch
	mov	r0, #0x2
	strh	r0, [r6, #0x4]
.L1002:
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x7f
	ble	.L1003	@cond_branch
	mov	r0, #0x7f
	strh	r0, [r6, #0x4]
.L1003:
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r5, #0x30]
	ldr	r4, .L1009+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x2]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	ldrh	r1, [r5, #0x20]
	strh	r1, [r5, #0x3a]
	strh	r0, [r5, #0x3c]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1004	@cond_branch
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	add	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L1009+0x8
	b	.L1008
.L1010:
	.align	2, 0
.L1009:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	0xffffec00
.L1004:
	ldr	r0, .L1011
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1006	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	add	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x5
.L1008:
	bl	__divsi3
	strh	r0, [r5, #0x34]
	lsl	r4, r4, #0x7
	strh	r4, [r5, #0x36]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L1011+0x4
	bl	__divsi3
	strh	r0, [r5, #0x38]
	b	.L1005
.L1012:
	.align	2, 0
.L1011:
	.word	gBattleAnimBankAttacker
	.word	0xfffff600
.L1006:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	sub	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L1013
	bl	__divsi3
	strh	r0, [r5, #0x34]
	lsl	r4, r4, #0x7
	strh	r4, [r5, #0x36]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x4
	bl	__divsi3
	strh	r0, [r5, #0x38]
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x30
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L1005:
	ldr	r0, .L1013+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1014:
	.align	2, 0
.L1013:
	.word	0xffffec00
	.word	sub_80CE798
.Lfe128:
	.size	 sub_80CE670,.Lfe128-sub_80CE670
	.align	2, 0
	.type	 sub_80CE798,function
	.thumb_func
sub_80CE798:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x38]
	ldrh	r3, [r2, #0x36]
	add	r1, r1, r3
	strh	r1, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x17
	strh	r1, [r2, #0x22]
	ldrh	r0, [r2, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1016	@cond_branch
	ldrh	r0, [r2, #0x3a]
	strh	r0, [r2, #0x20]
	ldrh	r0, [r2, #0x3c]
	strh	r0, [r2, #0x22]
.L1016:
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L1017	@cond_branch
	add	r0, r2, #0
	bl	move_anim_8072740
.L1017:
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 sub_80CE798,.Lfe129-sub_80CE798
	.align	2, 0
	.globl	sub_80CE7E0
	.type	 sub_80CE7E0,function
	.thumb_func
sub_80CE7E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L1032
	add	r6, r0, r1
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x8]
	ldr	r0, .L1032+0x4
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	ldr	r2, .L1032+0x8
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r4, r0, #0x4
	mov	r5, #0x1
	ldr	r2, .L1032+0xc
.L1022:
	add	r1, r3, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	add	r0, r4, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L1022	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x10
	mov	r2, #0xb
	mov	r3, #0x0
	bl	BlendPalette
	mov	r0, #0x0
	strh	r0, [r6, #0xe]
	mov	r5, #0x0
	ldr	r7, .L1032+0x8
	mov	r1, #0x1c
	add	r1, r1, r7
	mov	r9, r1
	b	.L1024
.L1033:
	.align	2, 0
.L1032:
	.word	gTasks
	.word	0x2771
	.word	gSprites
	.word	gPlttBufferUnfaded
.L1026:
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r4, r2, r7
	ldrb	r1, [r6, #0xa]
	lsl	r1, r1, #0x4
	ldrb	r3, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	lsl	r0, r5, #0x7
	strh	r0, [r4, #0x30]
	mov	r0, r8
	strh	r0, [r4, #0x32]
	add	r2, r2, r9
	ldr	r0, .L1034
	str	r0, [r2]
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L1024:
	cmp	r5, #0x1
	bhi	.L1025	@cond_branch
	mov	r0, #0x0
	bl	duplicate_obj_of_side_rel2move_in_transparent_mode
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1026	@cond_branch
.L1025:
	ldr	r0, .L1034+0x4
	str	r0, [r6]
	ldr	r0, .L1034+0x8
	ldrb	r0, [r0]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1029	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x13
	ldrh	r1, [r2]
	ldr	r0, .L1034+0xc
	b	.L1031
.L1035:
	.align	2, 0
.L1034:
	.word	sub_80CE974
	.word	sub_80CE910
	.word	gBattleAnimBankAttacker
	.word	0xfdff
.L1029:
	mov	r2, #0x80
	lsl	r2, r2, #0x13
	ldrh	r1, [r2]
	ldr	r0, .L1036
.L1031:
	and	r0, r0, r1
	strh	r0, [r2]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1037:
	.align	2, 0
.L1036:
	.word	0xfbff
.Lfe130:
	.size	 sub_80CE7E0,.Lfe130-sub_80CE7E0
	.align	2, 0
	.type	 sub_80CE910,function
	.thumb_func
sub_80CE910:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1043
	add	r0, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1039	@cond_branch
	ldr	r0, .L1043+0x4
	ldrb	r0, [r0]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1040	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	ldrh	r1, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	b	.L1042
.L1044:
	.align	2, 0
.L1043:
	.word	gTasks
	.word	gBattleAnimBankAttacker
.L1040:
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	ldrh	r1, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0x3
.L1042:
	add	r2, r3, #0
	orr	r1, r1, r2
	strh	r1, [r0]
	ldr	r0, .L1045
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1039:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1046:
	.align	2, 0
.L1045:
	.word	0x2771
.Lfe131:
	.size	 sub_80CE910,.Lfe131-sub_80CE910
	.align	2, 0
	.type	 sub_80CE974,function
	.thumb_func
sub_80CE974:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1048	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L1048:
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x40
	ble	.L1049	@cond_branch
	ldr	r2, .L1051
	mov	r0, #0x32
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xe]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xe]
	add	r0, r5, #0
	bl	obj_delete_but_dont_free_vram
	b	.L1050
.L1052:
	.align	2, 0
.L1051:
	.word	gTasks
.L1049:
	ldr	r4, .L1053
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0x6
	bl	__divsi3
	strh	r0, [r5, #0x36]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0xd
	bl	__divsi3
	strh	r0, [r5, #0x38]
	ldrh	r1, [r5, #0x30]
	add	r1, r1, r0
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
.L1050:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1054:
	.align	2, 0
.L1053:
	.word	gSineTable
.Lfe132:
	.size	 sub_80CE974,.Lfe132-sub_80CE974
	.align	2, 0
	.globl	sub_80CEA04
	.type	 sub_80CEA04,function
	.thumb_func
sub_80CEA04:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L1056
	bl	StoreSpriteCallbackInData
	ldr	r0, .L1056+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1057:
	.align	2, 0
.L1056:
	.word	move_anim_8072740
	.word	sub_8078600
.Lfe133:
	.size	 sub_80CEA04,.Lfe133-sub_80CEA04
	.align	2, 0
	.globl	sub_80CEA20
	.type	 sub_80CEA20,function
	.thumb_func
sub_80CEA20:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L1076
	ldrh	r0, [r4]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	beq	.L1059	@cond_branch
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	mov	r2, #0x1
	ldr	r5, .L1076+0x4
.L1063:
	add	r1, r3, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L1063	@cond_branch
.L1059:
	mov	r4, #0x1
	ldr	r0, .L1076
	mov	r8, r0
.L1068:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r5, r0, #0x2
	mov	r1, r8
	add	r0, r5, r1
	ldrh	r0, [r0]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r4, #0x1
	mov	ip, r4
	cmp	r3, #0xff
	beq	.L1067	@cond_branch
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	mov	r2, #0x1
	ldr	r7, .L1076+0x4
	ldr	r6, .L1076
	add	r4, r5, #0
.L1073:
	add	r1, r3, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L1073	@cond_branch
.L1067:
	mov	r1, ip
	lsl	r0, r1, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L1068	@cond_branch
	mov	r0, r9
	bl	DestroyAnimVisualTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1077:
	.align	2, 0
.L1076:
	.word	gUnknown_083D712C
	.word	gPlttBufferFaded
.Lfe134:
	.size	 sub_80CEA20,.Lfe134-sub_80CEA20
	.align	2, 0
	.globl	sub_80CEAD8
	.type	 sub_80CEAD8,function
	.thumb_func
sub_80CEAD8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x1
	ldr	r6, .L1084
.L1082:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L1082	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1085:
	.align	2, 0
.L1084:
	.word	gUnknown_083D712C
.Lfe135:
	.size	 sub_80CEAD8,.Lfe135-sub_80CEAD8
	.align	2, 0
	.globl	sub_80CEB0C
	.type	 sub_80CEB0C,function
	.thumb_func
sub_80CEB0C:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	bl	sub_8078650
	ldr	r4, .L1090
	ldrb	r1, [r4]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r2, .L1090+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1087	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r5, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
.L1087:
	ldrh	r0, [r4, #0x2]
	mov	r1, #0x0
	strh	r0, [r5, #0x30]
	strh	r1, [r5, #0x32]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x34]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1088	@cond_branch
	mov	r6, #0x30
	mov	r3, #0x28
	b	.L1089
.L1091:
	.align	2, 0
.L1090:
	.word	gBattleAnimArgs
	.word	gUnknown_083D712C
.L1088:
	ldr	r4, .L1092
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L1089:
	ldrh	r0, [r5, #0x20]
	lsl	r1, r0, #0x4
	strh	r1, [r5, #0x36]
	ldrh	r1, [r5, #0x22]
	lsl	r2, r1, #0x4
	strh	r2, [r5, #0x38]
	sub	r0, r6, r0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r1, r3, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r2, r5, #0
	add	r2, r2, #0x3a
	add	r3, r5, #0
	add	r3, r3, #0x3c
	mov	r4, #0x28
	str	r4, [sp]
	bl	sub_80CEBC4
	ldr	r0, .L1092+0x4
	str	r0, [r5, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1093:
	.align	2, 0
.L1092:
	.word	gBattleAnimBankTarget
	.word	sub_80CEC1C
.Lfe136:
	.size	 sub_80CEB0C,.Lfe136-sub_80CEB0C
	.align	2, 0
	.type	 sub_80CEBC4,function
	.thumb_func
sub_80CEBC4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r2, #0
	mov	r8, r3
	ldr	r2, [sp, #0x18]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r1, r2, #0x18
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bge	.L1095	@cond_branch
	lsl	r0, r1, #0x18
	neg	r0, r0
	lsr	r1, r0, #0x18
.L1095:
	lsl	r5, r2, #0x8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	__divsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L1096	@cond_branch
	mov	r4, #0x1
.L1096:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	strh	r0, [r7]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x8
	add	r1, r4, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe137:
	.size	 sub_80CEBC4,.Lfe137-sub_80CEBC4
	.align	2, 0
	.type	 sub_80CEC1C,function
	.thumb_func
sub_80CEC1C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x2e]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r1, r0, r1
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L1098	@cond_branch
	add	r0, r0, #0xff
.L1098:
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	ldrh	r1, [r4, #0x3a]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	ldrh	r2, [r4, #0x3c]
	ldrh	r3, [r4, #0x38]
	add	r2, r2, r3
	strh	r2, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x20]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x14
	strh	r2, [r4, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xf
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L1100	@cond_branch
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	blt	.L1100	@cond_branch
	cmp	r1, #0x80
	ble	.L1099	@cond_branch
.L1100:
	add	r0, r4, #0
	bl	move_anim_8074EE0
	b	.L1101
.L1099:
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L1101	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r1
	ble	.L1101	@cond_branch
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1103	@cond_branch
	strh	r5, [r4, #0x30]
.L1103:
	ldr	r2, .L1105
	mov	r3, #0x30
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1101	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
.L1101:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1106:
	.align	2, 0
.L1105:
	.word	gUnknown_083D712C
.Lfe138:
	.size	 sub_80CEC1C,.Lfe138-sub_80CEC1C
	.align	2, 0
	.globl	sub_80CECE8
	.type	 sub_80CECE8,function
	.thumb_func
sub_80CECE8:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r7, .L1109
	ldrb	r0, [r7]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1108	@cond_branch
	ldr	r1, .L1109+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L1108:
	ldrb	r0, [r7]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r4, .L1109+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	mov	r5, #0x0
	strh	r0, [r6, #0x20]
	ldrb	r0, [r7]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	ldrb	r1, [r4]
	add	r0, r6, #0
	bl	StartSpriteAnim
	strh	r5, [r6, #0x32]
	strh	r5, [r6, #0x34]
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x36]
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x38]
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x4
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r6, #0x3a]
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x7
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r6, #0x3c]
	ldr	r0, .L1109+0x8
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1110:
	.align	2, 0
.L1109:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_80CED78
.Lfe139:
	.size	 sub_80CECE8,.Lfe139-sub_80CECE8
	.align	2, 0
	.type	 sub_80CED78,function
	.thumb_func
sub_80CED78:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x36]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x3c]
	ldrh	r2, [r4, #0x38]
	add	r1, r1, r2
	strh	r1, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x22]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	ble	.L1112	@cond_branch
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L1112	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x10
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0x12
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mov	r1, #0x12
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1112	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
.L1112:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x30
	bne	.L1114	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8074EE0
.L1114:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 sub_80CED78,.Lfe140-sub_80CED78
	.align	2, 0
	.globl	sub_80CEDF0
	.type	 sub_80CEDF0,function
	.thumb_func
sub_80CEDF0:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L1118
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L1116	@cond_branch
	ldrb	r0, [r5, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
	mov	r6, #0x10
	b	.L1117
.L1119:
	.align	2, 0
.L1118:
	.word	gBattleAnimArgs
.L1116:
	ldr	r6, .L1120
.L1117:
	ldr	r4, .L1120+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1120+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L1120+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1121:
	.align	2, 0
.L1120:
	.word	0xfff0
	.word	gBattleAnimBankAttacker
	.word	sub_80782D8
	.word	move_anim_8072740
.Lfe141:
	.size	 sub_80CEDF0,.Lfe141-sub_80CEDF0
	.align	2, 0
	.globl	sub_80CEE60
	.type	 sub_80CEE60,function
	.thumb_func
sub_80CEE60:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	sub_8078650
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x22]
	ldr	r5, .L1126
	ldrb	r1, [r5, #0x2]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r2, .L1126+0x4
	mov	r0, #0x4
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1123	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
.L1123:
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	cmp	r0, #0
	bne	.L1124	@cond_branch
	ldr	r2, .L1126+0x8
.L1124:
	mov	r0, #0x28
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x20]
	strh	r1, [r4, #0x30]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	sub	r0, r0, #0x28
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	obj_translate_based_on_private_1_2_3_4
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x38]
	ldr	r0, .L1126+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1127:
	.align	2, 0
.L1126:
	.word	gBattleAnimArgs
	.word	gUnknown_083D712C
	.word	0xffe0
	.word	sub_80CEEE8
.Lfe142:
	.size	 sub_80CEE60,.Lfe142-sub_80CEE60
	.align	2, 0
	.type	 sub_80CEEE8,function
	.thumb_func
sub_80CEEE8:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1129	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldrh	r2, [r4, #0x24]
	mov	r3, #0x24
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bge	.L1130	@cond_branch
	lsl	r0, r1, #0x10
	neg	r0, r0
	lsr	r1, r0, #0x10
.L1130:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r2
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x4
	bl	Sin
	ldrh	r3, [r4, #0x26]
	add	r0, r0, r3
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L1131
.L1129:
	add	r0, r4, #0
	bl	move_anim_8072740
.L1131:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe143:
	.size	 sub_80CEEE8,.Lfe143-sub_80CEEE8
	.align	2, 0
	.globl	sub_80CEF44
	.type	 sub_80CEF44,function
	.thumb_func
sub_80CEF44:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1133	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	sub_807A100
	add	r0, r0, #0x8
	b	.L1136
.L1133:
	add	r0, r5, #0
	mov	r1, #0x4
	bl	sub_807A100
	sub	r0, r0, #0x8
.L1136:
	strh	r0, [r6, #0x20]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	sub_8077ABC
	add	r4, r0, #0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_807A100
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1135	@cond_branch
	add	r0, r0, #0x3
.L1135:
	asr	r0, r0, #0x2
	sub	r0, r4, r0
	strh	r0, [r6, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe144:
	.size	 sub_80CEF44,.Lfe144-sub_80CEF44
	.align	2, 0
	.globl	sub_80CEF9C
	.type	 sub_80CEF9C,function
	.thumb_func
sub_80CEF9C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1142
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1138	@cond_branch
	ldr	r0, .L1142+0x4
	b	.L1141
.L1143:
	.align	2, 0
.L1142:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L1138:
	ldr	r0, .L1144
.L1141:
	ldrb	r4, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80CEF44
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r1, r1, #0x1f
	ldr	r0, .L1144+0x4
	ldrh	r0, [r0, #0x2]
	strh	r0, [r5, #0x2e]
	add	r0, r1, #0x2
	strh	r0, [r5, #0x30]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r1, .L1144+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L1144+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1145:
	.align	2, 0
.L1144:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	sub_80CF008
	.word	sub_8078600
.Lfe145:
	.size	 sub_80CEF9C,.Lfe145-sub_80CEF9C
	.align	2, 0
	.type	 sub_80CF008,function
	.thumb_func
sub_80CF008:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1147	@cond_branch
	ldr	r1, .L1148
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L1148+0x4
	str	r0, [r4, #0x1c]
.L1147:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1149:
	.align	2, 0
.L1148:
	.word	move_anim_8072740
	.word	sub_8078600
.Lfe146:
	.size	 sub_80CF008,.Lfe146-sub_80CF008
	.align	2, 0
	.globl	sub_80CF040
	.type	 sub_80CF040,function
	.thumb_func
sub_80CF040:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1154
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1151	@cond_branch
	ldr	r0, .L1154+0x4
	b	.L1153
.L1155:
	.align	2, 0
.L1154:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L1151:
	ldr	r0, .L1156
.L1153:
	ldrb	r0, [r0]
	add	r1, r4, #0
	bl	sub_80CEF44
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r1, .L1156+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L1156+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1157:
	.align	2, 0
.L1156:
	.word	gBattleAnimBankTarget
	.word	sub_80CF088
	.word	sub_80785E4
.Lfe147:
	.size	 sub_80CF040,.Lfe147-sub_80CF040
	.align	2, 0
	.type	 sub_80CF088,function
	.thumb_func
sub_80CF088:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L1159	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r1, .L1160
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L1160+0x4
	str	r0, [r4, #0x1c]
.L1159:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1161:
	.align	2, 0
.L1160:
	.word	move_anim_8074EE0
	.word	sub_80785E4
.Lfe148:
	.size	 sub_80CF088,.Lfe148-sub_80CF088
	.align	2, 0
	.globl	sub_80CF0BC
	.type	 sub_80CF0BC,function
	.thumb_func
sub_80CF0BC:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r0, .L1167
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1163	@cond_branch
	ldr	r0, .L1167+0x4
	b	.L1166
.L1168:
	.align	2, 0
.L1167:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L1163:
	ldr	r0, .L1169
.L1166:
	ldrb	r5, [r0]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	sub_807A100
	strh	r0, [r4, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bgt	.L1165	@cond_branch
	mov	r0, #0xa
	strh	r0, [r4, #0x22]
.L1165:
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	strh	r6, [r4, #0x30]
	add	r1, r4, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	strh	r0, [r4, #0x32]
	ldrb	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x34]
	strh	r6, [r4, #0x36]
	ldr	r1, .L1169+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L1169+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1170:
	.align	2, 0
.L1169:
	.word	gBattleAnimBankTarget
	.word	sub_80CF138
	.word	sub_80785E4
.Lfe149:
	.size	 sub_80CF0BC,.Lfe149-sub_80CF0BC
	.align	2, 0
	.type	 sub_80CF138,function
	.thumb_func
sub_80CF138:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L1172	@cond_branch
	ldr	r0, .L1173
	str	r0, [r1, #0x1c]
.L1172:
	pop	{r0}
	bx	r0
.L1174:
	.align	2, 0
.L1173:
	.word	sub_80CF158
.Lfe150:
	.size	 sub_80CF138,.Lfe150-sub_80CF138
	.align	2, 0
	.type	 sub_80CF158,function
	.thumb_func
sub_80CF158:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0x4
	strh	r1, [r2, #0x30]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xfe
	ble	.L1176	@cond_branch
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1177	@cond_branch
	strh	r0, [r2, #0x24]
	ldr	r0, .L1181
	str	r0, [r2, #0x1c]
	b	.L1175
.L1182:
	.align	2, 0
.L1181:
	.word	sub_80CF088
.L1177:
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r2, #0x30]
.L1176:
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x4f
	ble	.L1179	@cond_branch
	ldrh	r0, [r2, #0x34]
	add	r1, r2, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
.L1179:
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	cmp	r0, #0x9f
	ble	.L1180	@cond_branch
	ldrh	r0, [r2, #0x32]
	add	r1, r2, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
.L1180:
	ldr	r1, .L1183
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	asr	r1, r0, #0x1
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
.L1175:
	pop	{r0}
	bx	r0
.L1184:
	.align	2, 0
.L1183:
	.word	gSineTable
.Lfe151:
	.size	 sub_80CF158,.Lfe151-sub_80CF158
	.align	2, 0
	.globl	sub_80CF1C8
	.type	 sub_80CF1C8,function
	.thumb_func
sub_80CF1C8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1192
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1186	@cond_branch
	ldr	r0, .L1192+0x4
	b	.L1190
.L1193:
	.align	2, 0
.L1192:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L1186:
	ldr	r0, .L1194
.L1190:
	ldrb	r4, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80CEF44
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1188	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	mov	r0, #0x2
	b	.L1191
.L1195:
	.align	2, 0
.L1194:
	.word	gBattleAnimBankTarget
.L1188:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x3
.L1191:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1196
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1197:
	.align	2, 0
.L1196:
	.word	sub_80CF228
.Lfe152:
	.size	 sub_80CF1C8,.Lfe152-sub_80CF1C8
	.align	2, 0
	.type	 sub_80CF228,function
	.thumb_func
sub_80CF228:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L1199	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r1, .L1200
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L1200+0x4
	str	r0, [r4, #0x1c]
.L1199:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1201:
	.align	2, 0
.L1200:
	.word	sub_80CF264
	.word	sub_8078600
.Lfe153:
	.size	 sub_80CF228,.Lfe153-sub_80CF228
	.align	2, 0
	.type	 sub_80CF264,function
	.thumb_func
sub_80CF264:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L1203	@cond_branch
	add	r0, r1, #0
	bl	move_anim_8072740
.L1203:
	pop	{r0}
	bx	r0
.Lfe154:
	.size	 sub_80CF264,.Lfe154-sub_80CF264
	.align	2, 0
	.globl	sub_80CF280
	.type	 sub_80CF280,function
	.thumb_func
sub_80CF280:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	sub_8078650
	ldr	r5, .L1205
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	sub_807867C
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x36]
	ldr	r1, .L1205+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r1, .L1205+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1206:
	.align	2, 0
.L1205:
	.word	gBattleAnimArgs
	.word	move_anim_8074EE0
	.word	sub_8078278
.Lfe155:
	.size	 sub_80CF280,.Lfe155-sub_80CF280
	.align	2, 0
	.globl	sub_80CF2D0
	.type	 sub_80CF2D0,function
	.thumb_func
sub_80CF2D0:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1211
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1208	@cond_branch
	ldr	r0, .L1211+0x4
	b	.L1210
.L1212:
	.align	2, 0
.L1211:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L1208:
	ldr	r0, .L1213
.L1210:
	ldrb	r0, [r0]
	add	r1, r4, #0
	bl	sub_80CEF44
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	strh	r0, [r4, #0x30]
	ldr	r0, .L1213+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1214:
	.align	2, 0
.L1213:
	.word	gBattleAnimBankTarget
	.word	sub_80CF310
.Lfe156:
	.size	 sub_80CF2D0,.Lfe156-sub_80CF2D0
	.align	2, 0
	.type	 sub_80CF310,function
	.thumb_func
sub_80CF310:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	beq	.L1219	@cond_branch
	cmp	r0, #0x1
	bgt	.L1225	@cond_branch
	cmp	r0, #0
	beq	.L1217	@cond_branch
	b	.L1216
.L1225:
	cmp	r0, #0x2
	beq	.L1221	@cond_branch
	b	.L1216
.L1217:
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, #0x3
	strh	r0, [r1, #0x26]
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L1216	@cond_branch
	b	.L1226
.L1219:
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x3
	strh	r0, [r1, #0x26]
	ldrh	r0, [r1, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1216	@cond_branch
.L1226:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	b	.L1216
.L1221:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L1216	@cond_branch
	add	r0, r1, #0
	bl	move_anim_8072740
.L1216:
	pop	{r0}
	bx	r0
.Lfe157:
	.size	 sub_80CF310,.Lfe157-sub_80CF310
	.align	2, 0
	.globl	sub_80CF374
	.type	 sub_80CF374,function
	.thumb_func
sub_80CF374:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r3, .L1229
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	cmp	r2, #0
	bne	.L1228	@cond_branch
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r2, [r0, #0x24]
	add	r0, r4, #0
	bl	move_anim_8074EE0
.L1228:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1230:
	.align	2, 0
.L1229:
	.word	gSprites
.Lfe158:
	.size	 sub_80CF374,.Lfe158-sub_80CF374
	.align	2, 0
	.globl	sub_80CF3C4
	.type	 sub_80CF3C4,function
	.thumb_func
sub_80CF3C4:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L1234
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L1234+0x4
	ldr	r0, .L1234+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r6, [r0]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1232	@cond_branch
	ldr	r0, .L1234+0xc
	ldrh	r1, [r5, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r5, #0x20]
	add	r1, r0, #0
	b	.L1233
.L1235:
	.align	2, 0
.L1234:
	.word	gBattleAnimBankAttacker
	.word	gObjectBankIDs
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
.L1232:
	ldr	r1, .L1236
	ldrh	r0, [r1]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	strh	r0, [r5, #0x20]
.L1233:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	strh	r6, [r5, #0x32]
	ldr	r0, .L1236+0x4
	str	r0, [r5, #0x1c]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1237:
	.align	2, 0
.L1236:
	.word	gBattleAnimArgs
	.word	sub_80CF374
.Lfe159:
	.size	 sub_80CF3C4,.Lfe159-sub_80CF3C4
	.align	2, 0
	.globl	sub_80CF458
	.type	 sub_80CF458,function
	.thumb_func
sub_80CF458:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r1, .L1239
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x38]
	ldr	r0, .L1239+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L1239+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4}
	pop	{r0}
	bx	r0
.L1240:
	.align	2, 0
.L1239:
	.word	gBattleAnimArgs
	.word	sub_80782D8
	.word	sub_80CF490
.Lfe160:
	.size	 sub_80CF458,.Lfe160-sub_80CF458
	.align	2, 0
	.type	 sub_80CF490,function
	.thumb_func
sub_80CF490:
	push	{lr}
	ldrh	r1, [r0, #0x30]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x20]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0xf
	strh	r1, [r0, #0x36]
	ldr	r1, .L1242
	str	r1, [r0, #0x1c]
	ldr	r1, .L1242+0x4
	bl	StoreSpriteCallbackInData
	pop	{r0}
	bx	r0
.L1243:
	.align	2, 0
.L1242:
	.word	sub_8078B34
	.word	sub_80CF4B8
.Lfe161:
	.size	 sub_80CF490,.Lfe161-sub_80CF490
	.align	2, 0
	.type	 sub_80CF4B8,function
	.thumb_func
sub_80CF4B8:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x38]
	mov	r3, #0x38
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L1245	@cond_branch
	add	r0, r1, #0
	bl	move_anim_8072740
	b	.L1246
.L1245:
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x38]
.L1246:
	pop	{r0}
	bx	r0
.Lfe162:
	.size	 sub_80CF4B8,.Lfe162-sub_80CF4B8
	.align	2, 0
	.globl	sub_80CF4D8
	.type	 sub_80CF4D8,function
	.thumb_func
sub_80CF4D8:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L1248
	ldr	r0, .L1248+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_8078E70
	ldr	r1, .L1248+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1248+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1249:
	.align	2, 0
.L1248:
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
	.word	gTasks
	.word	sub_80CF514
.Lfe163:
	.size	 sub_80CF4D8,.Lfe163-sub_80CF4D8
	.align	2, 0
	.type	 sub_80CF514,function
	.thumb_func
sub_80CF514:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1264
	ldr	r0, .L1264+0x4
	ldrb	r0, [r0]
	add	r1, r0, r1
	ldrb	r4, [r1]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1251	@cond_branch
	ldr	r1, .L1264+0x8
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r6, r2, #0
	b	.L1252
.L1265:
	.align	2, 0
.L1264:
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
	.word	gTasks
.L1251:
	ldr	r2, .L1266
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r3, [r0, #0x8]
	add	r6, r1, #0
.L1252:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	add	r1, r2, #0
	bl	obj_id_set_rotscale
	ldr	r1, .L1266
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L1253	@cond_branch
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0xb0
	strh	r0, [r1, #0x8]
	ldr	r1, .L1266+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x1
	b	.L1262
.L1267:
	.align	2, 0
.L1266:
	.word	gTasks
	.word	gSprites
.L1253:
	cmp	r0, #0x1
	bne	.L1255	@cond_branch
	ldrh	r0, [r1, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	bne	.L1250	@cond_branch
	mov	r0, #0x2
	b	.L1263
.L1255:
	ldrh	r0, [r1, #0x8]
	sub	r0, r0, #0xb0
	strh	r0, [r1, #0x8]
	ldr	r1, .L1268
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x1
.L1262:
	strh	r1, [r0, #0x26]
	add	r0, r4, #0
	bl	sub_8078F9C
	ldr	r0, .L1268+0x4
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x8
	ldrsh	r2, [r1, r3]
	mov	r0, #0xf2
	lsl	r0, r0, #0x4
	cmp	r2, r0
	beq	.L1259	@cond_branch
	cmp	r2, #0
	bne	.L1250	@cond_branch
.L1259:
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x2
	bne	.L1260	@cond_branch
	add	r0, r4, #0
	bl	sub_8078F40
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L1250
.L1269:
	.align	2, 0
.L1268:
	.word	gSprites
	.word	gTasks
.L1260:
	add	r0, r2, #0x1
.L1263:
	strh	r0, [r1, #0xa]
.L1250:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe164:
	.size	 sub_80CF514,.Lfe164-sub_80CF514
	.align	2, 0
	.globl	sub_80CF610
	.type	 sub_80CF610,function
	.thumb_func
sub_80CF610:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	sub_8078650
	ldr	r5, .L1275
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	sub_807867C
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L1275+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1271	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r1, r1, r0
	strb	r1, [r2]
	mov	r3, #0x4
	ldrsh	r0, [r5, r3]
	cmp	r0, #0
	beq	.L1273	@cond_branch
	mov	r0, #0x2
	orr	r1, r1, r0
	strb	r1, [r2]
	b	.L1273
.L1276:
	.align	2, 0
.L1275:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L1271:
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L1273	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
.L1273:
	ldr	r0, .L1277
	str	r0, [r4, #0x1c]
	ldr	r1, .L1277+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1278:
	.align	2, 0
.L1277:
	.word	sub_8078600
	.word	move_anim_8072740
.Lfe165:
	.size	 sub_80CF610,.Lfe165-sub_80CF610
	.align	2, 0
	.globl	sub_80CF690
	.type	 sub_80CF690,function
	.thumb_func
sub_80CF690:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	sub_80787B0
	ldr	r0, .L1280
	str	r0, [r4, #0x1c]
	ldr	r1, .L1280+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4}
	pop	{r0}
	bx	r0
.L1281:
	.align	2, 0
.L1280:
	.word	sub_80785E4
	.word	sub_80CF6B4
.Lfe166:
	.size	 sub_80CF690,.Lfe166-sub_80CF690
	.align	2, 0
	.type	 sub_80CF6B4,function
	.thumb_func
sub_80CF6B4:
	push	{lr}
	mov	r1, #0x6
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x20]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x36]
	ldr	r1, .L1283
	str	r1, [r0, #0x1c]
	ldr	r1, .L1283+0x4
	bl	StoreSpriteCallbackInData
	pop	{r0}
	bx	r0
.L1284:
	.align	2, 0
.L1283:
	.word	sub_8078B34
	.word	move_anim_8072740
.Lfe167:
	.size	 sub_80CF6B4,.Lfe167-sub_80CF6B4
	.align	2, 0
	.globl	sub_80CF6DC
	.type	 sub_80CF6DC,function
	.thumb_func
sub_80CF6DC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1286	@cond_branch
	ldr	r1, .L1290
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	b	.L1287
.L1291:
	.align	2, 0
.L1290:
	.word	gBattleAnimArgs
.L1286:
	ldr	r0, .L1292
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1287	@cond_branch
	ldr	r1, .L1292+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r1, #0x6]
.L1287:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r4, .L1292+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r6, .L1292+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r6, #0x6]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r7, r0, #0
	ldrh	r1, [r5, #0x20]
	mov	r2, r8
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	sub_80790F0
	lsl	r0, r0, #0x10
	mov	r1, #0xf0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1289	@cond_branch
	ldr	r2, .L1292+0xc
	add	r0, r4, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L1289:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	sub_8078FDC
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r0, r8
	strh	r0, [r5, #0x32]
	strh	r7, [r5, #0x36]
	ldr	r0, .L1292+0x10
	str	r0, [r5, #0x1c]
	ldr	r1, .L1292+0x14
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1293:
	.align	2, 0
.L1292:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	0xffffa000
	.word	sub_8078B34
	.word	move_anim_8072740
.Lfe168:
	.size	 sub_80CF6DC,.Lfe168-sub_80CF6DC
	.align	2, 0
	.globl	sub_80CF7E0
	.type	 sub_80CF7E0,function
	.thumb_func
sub_80CF7E0:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L1295	@cond_branch
	ldr	r2, .L1296
	mov	r0, #0x3c
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xa]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xa]
	add	r0, r3, #0
	bl	DestroySprite
.L1295:
	pop	{r0}
	bx	r0
.L1297:
	.align	2, 0
.L1296:
	.word	gTasks
.Lfe169:
	.size	 sub_80CF7E0,.Lfe169-sub_80CF7E0
	.align	2, 0
	.globl	sub_80CF814
	.type	 sub_80CF814,function
	.thumb_func
sub_80CF814:
	push	{r4, lr}
	add	r2, r0, #0
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L1309
	add	r4, r0, r1
	mov	r3, #0x2e
	ldrsh	r1, [r2, r3]
	mov	r3, #0x12
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	ble	.L1299	@cond_branch
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x38]
	add	r0, r0, r1
	strh	r0, [r2, #0x38]
	ldrh	r0, [r2, #0x36]
	ldrh	r3, [r2, #0x3a]
	add	r0, r0, r3
	b	.L1306
.L1310:
	.align	2, 0
.L1309:
	.word	gTasks
.L1299:
	ldrh	r0, [r2, #0x38]
	ldrh	r1, [r2, #0x34]
	sub	r0, r0, r1
	strh	r0, [r2, #0x38]
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x36]
	sub	r0, r0, r1
.L1306:
	strh	r0, [r2, #0x3a]
	ldrh	r0, [r2, #0x38]
	ldrh	r1, [r2, #0x30]
	add	r3, r0, r1
	strh	r3, [r2, #0x30]
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r4, #0x16]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1301	@cond_branch
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	b	.L1307
.L1301:
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x18
.L1307:
	strh	r0, [r2, #0x24]
	ldrh	r1, [r4, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1303	@cond_branch
	ldrh	r0, [r2, #0x32]
	lsr	r0, r0, #0x8
	neg	r0, r0
	b	.L1308
.L1303:
	ldrh	r0, [r2, #0x32]
	lsr	r0, r0, #0x8
.L1308:
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r2, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L1305	@cond_branch
	mov	r0, #0x1e
	strh	r0, [r2, #0x2e]
	ldr	r0, .L1311
	str	r0, [r2, #0x1c]
.L1305:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1312:
	.align	2, 0
.L1311:
	.word	sub_80CF7E0
.Lfe170:
	.size	 sub_80CF814,.Lfe170-sub_80CF814
	.align	2, 0
	.globl	sub_80CF8B8
	.type	 sub_80CF8B8,function
	.thumb_func
sub_80CF8B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	mov	r0, #0x3c
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L1327
	add	r6, r0, r1
	ldrh	r2, [r6, #0x16]
	mov	r1, #0x2
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	ldrh	r3, [r7, #0x30]
	add	r2, r0, r3
	strh	r2, [r7, #0x30]
	ldrh	r0, [r6, #0x18]
	and	r1, r1, r0
	ldrh	r0, [r7, #0x32]
	add	r1, r1, r0
	strh	r1, [r7, #0x32]
	ldrh	r1, [r6, #0x16]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1314	@cond_branch
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	b	.L1323
.L1328:
	.align	2, 0
.L1327:
	.word	gTasks
.L1314:
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x18
.L1323:
	strh	r0, [r7, #0x24]
	ldrh	r1, [r6, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1316	@cond_branch
	ldrh	r0, [r7, #0x32]
	lsr	r0, r0, #0x8
	neg	r0, r0
	b	.L1324
.L1316:
	ldrh	r0, [r7, #0x32]
	lsr	r0, r0, #0x8
.L1324:
	strh	r0, [r7, #0x26]
	ldrh	r0, [r7, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r7, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L1318	@cond_branch
	mov	r4, #0x0
	mov	r0, #0x8
	strh	r0, [r7, #0x2e]
	mov	r0, #0x4
	strh	r0, [r6, #0x12]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	sub_81174E0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r7, #0x24]
	ldrh	r1, [r7, #0x20]
	add	r2, r0, r1
	strh	r2, [r7, #0x20]
	ldrh	r0, [r7, #0x26]
	ldrh	r3, [r7, #0x22]
	add	r0, r0, r3
	strh	r0, [r7, #0x22]
	strh	r4, [r7, #0x26]
	strh	r4, [r7, #0x24]
	ldrh	r3, [r6, #0x1e]
	mov	r0, #0x1e
	ldrsh	r1, [r6, r0]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	blt	.L1319	@cond_branch
	sub	r0, r3, r2
	b	.L1325
.L1319:
	sub	r0, r2, r3
.L1325:
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x10
	ldrh	r3, [r6, #0x20]
	mov	r0, #0x20
	ldrsh	r1, [r6, r0]
	ldrh	r2, [r7, #0x22]
	mov	r6, #0x22
	ldrsh	r0, [r7, r6]
	cmp	r1, r0
	blt	.L1321	@cond_branch
	sub	r0, r3, r2
	b	.L1326
.L1321:
	sub	r0, r2, r3
.L1326:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r0, #0x0
	strh	r0, [r7, #0x32]
	strh	r0, [r7, #0x30]
	strh	r0, [r7, #0x3a]
	strh	r0, [r7, #0x38]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r1, r5, #0
	bl	sub_81174C4
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r6, #0xe0
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	bl	sub_81174E0
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_81174C4
	strh	r0, [r7, #0x34]
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r1, r5, #0
	bl	sub_81174C4
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r0, r6, #0
	bl	sub_81174E0
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_81174C4
	strh	r0, [r7, #0x36]
	ldr	r0, .L1329
	str	r0, [r7, #0x1c]
.L1318:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1330:
	.align	2, 0
.L1329:
	.word	sub_80CF814
.Lfe171:
	.size	 sub_80CF8B8,.Lfe171-sub_80CF8B8
	.align	2, 0
	.globl	sub_80CF9F8
	.type	 sub_80CF9F8,function
	.thumb_func
sub_80CF9F8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1333
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1332	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L1332:
	pop	{r0}
	bx	r0
.L1334:
	.align	2, 0
.L1333:
	.word	gTasks
.Lfe172:
	.size	 sub_80CF9F8,.Lfe172-sub_80CF9F8
	.align	2, 0
	.globl	sub_80CFA20
	.type	 sub_80CFA20,function
	.thumb_func
sub_80CFA20:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1343
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	sub	r1, r0, #0x1
	strh	r1, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L1336	@cond_branch
	ldr	r0, .L1343+0x4
	mov	r2, #0x1a
	ldrsh	r1, [r5, r2]
	mov	r3, #0x1c
	ldrsh	r2, [r5, r3]
	ldrb	r3, [r5, #0xc]
	ldrb	r4, [r5, #0xa]
	sub	r3, r3, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	lsl	r0, r0, #0x2
	ldr	r1, .L1343+0x8
	add	r6, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L1338	@cond_branch
	cmp	r0, #0x2
	beq	.L1339	@cond_branch
	b	.L1337
.L1344:
	.align	2, 0
.L1343:
	.word	gTasks
	.word	gSpriteTemplate_83D74BC
	.word	gSprites
.L1338:
	ldrb	r2, [r6, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x18
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x57
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r6, #0x3]
	b	.L1337
.L1339:
	ldrb	r0, [r6, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r6, #0x3]
.L1337:
	ldr	r3, .L1345
	lsl	r2, r7, #0x2
	add	r2, r2, r7
	lsl	r2, r2, #0x3
	add	r4, r2, r3
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x14]
	sub	r0, r0, r1
	strh	r0, [r6, #0x2e]
	strh	r7, [r6, #0x3c]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	add	r0, r0, #0xd
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	add	r3, r3, #0x8
	add	r0, r0, r3
	mov	r2, ip
	strh	r2, [r0]
	ldrh	r0, [r4, #0xe]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, #0x3f
	neg	r0, r0
	bl	sub_8076F98
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x9a
	bl	PlaySE12WithPanning
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x2
	ble	.L1336	@cond_branch
	ldr	r0, .L1345+0x4
	str	r0, [r4]
.L1336:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1346:
	.align	2, 0
.L1345:
	.word	gTasks
	.word	sub_80CF9F8
.Lfe173:
	.size	 sub_80CFA20,.Lfe173-sub_80CFA20
	.align	2, 0
	.globl	sub_80CFB04
	.type	 sub_80CFB04,function
	.thumb_func
sub_80CFB04:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x0
	mov	r9, r0
	mov	r5, #0x0
	mov	r0, sp
	mov	r1, r9
	strh	r1, [r0]
	mov	r4, sp
	add	r4, r4, #0x2
	strh	r1, [r4]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	mov	sl, r4
	cmp	r0, #0
	beq	.L1348	@cond_branch
	ldr	r1, .L1371
	lsl	r2, r7, #0x2
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x2
	strh	r1, [r0, #0x10]
	ldr	r3, .L1371+0x4
	ldrh	r0, [r3]
	neg	r0, r0
	strh	r0, [r3]
	ldrh	r1, [r3, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L1349	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strh	r0, [r3, #0x4]
	b	.L1351
.L1372:
	.align	2, 0
.L1371:
	.word	gTasks
	.word	gBattleAnimArgs
.L1349:
	mov	r0, #0x1
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	b	.L1351
.L1348:
	ldr	r1, .L1373
	ldr	r0, .L1373+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	lsl	r2, r7, #0x2
	mov	r8, r2
	cmp	r0, #0
	bne	.L1351	@cond_branch
	ldr	r1, .L1373+0x8
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r3, [r0, #0x10]
	ldr	r2, .L1373+0xc
	ldrh	r0, [r2]
	neg	r0, r0
	strh	r0, [r2]
	ldrh	r0, [r2, #0x2]
	neg	r0, r0
	strh	r0, [r2, #0x2]
	ldrh	r1, [r2, #0x4]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1353	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	b	.L1368
.L1374:
	.align	2, 0
.L1373:
	.word	gBanksBySide
	.word	gBattleAnimBankTarget
	.word	gTasks
	.word	gBattleAnimArgs
.L1353:
	mov	r0, #0x1
	orr	r0, r0, r1
.L1368:
	strh	r0, [r2, #0x4]
.L1351:
	ldr	r5, .L1375
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	sub_8077ABC
	ldr	r1, .L1375+0x4
	mov	r3, r8
	add	r4, r3, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1a]
	add	r6, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1c]
	mov	r9, r0
	ldr	r0, .L1375+0x8
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1355	@cond_branch
	ldr	r4, .L1375+0xc
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1355	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, sp
	mov	r3, sl
	bl	sub_807A3FC
	b	.L1356
.L1376:
	.align	2, 0
.L1375:
	.word	gBattleAnimBankAttacker
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleAnimBankTarget
.L1355:
	mov	r5, sp
	ldr	r4, .L1377
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sl
	strh	r0, [r1]
.L1356:
	mov	r4, sp
	ldr	r0, .L1377+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, sp
	ldr	r3, .L1377+0x8
	ldrh	r0, [r3]
	ldrh	r2, [r2]
	add	r0, r0, r2
	strh	r0, [r1, #0x1e]
	strh	r0, [r4]
	ldrh	r0, [r3, #0x2]
	mov	r3, sl
	ldrh	r3, [r3]
	add	r0, r0, r3
	strh	r0, [r1, #0x20]
	mov	r1, sl
	strh	r0, [r1]
	mov	r0, sp
	ldrh	r2, [r0]
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	add	r1, r6, #0
	cmp	r0, r1
	blt	.L1357	@cond_branch
	sub	r0, r2, r1
	b	.L1369
.L1378:
	.align	2, 0
.L1377:
	.word	gBattleAnimBankTarget
	.word	gTasks
	.word	gBattleAnimArgs
.L1357:
	sub	r0, r1, r2
.L1369:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r0, #0x10
	asr	r4, r4, #0x10
	ldr	r5, .L1379
	ldrh	r1, [r5, #0x4]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	sub_81174E0
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_81174C4
	ldr	r2, .L1379+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r6, r1, r2
	strh	r0, [r6, #0x12]
	mov	r1, #0x12
	ldrsh	r0, [r6, r1]
	mov	r1, #0x80
	bl	sub_81174C4
	strh	r0, [r6, #0x14]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r6, #0x16]
	mov	r2, sl
	ldrh	r1, [r2]
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	mov	r4, r9
	cmp	r0, r4
	blt	.L1359	@cond_branch
	sub	r4, r1, r4
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, #0x12
	ldrsh	r0, [r6, r1]
	bl	sub_81174E0
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_81174C4
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r0
	strh	r1, [r6, #0x18]
	b	.L1360
.L1380:
	.align	2, 0
.L1379:
	.word	gBattleAnimArgs
	.word	gTasks
.L1359:
	sub	r4, r4, r1
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r6, r2]
	bl	sub_81174E0
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_81174C4
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r6, #0x18]
.L1360:
	ldr	r1, .L1381
	mov	r3, r8
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r4, .L1381+0x4
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0xe]
	ldrh	r1, [r4, #0x8]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1361	@cond_branch
	mov	r0, #0x80
	eor	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	ble	.L1365	@cond_branch
	ldr	r0, .L1381+0x8
	ldrb	r0, [r0]
	bl	sub_8079E90
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1381+0xc
	add	r1, r2, #0
	ldrh	r4, [r4, #0x8]
	add	r1, r1, r4
	add	r0, r0, r1
	b	.L1370
.L1382:
	.align	2, 0
.L1381:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	0xffc0
.L1361:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	ble	.L1365	@cond_branch
	ldr	r0, .L1383
	ldrb	r0, [r0]
	bl	sub_8079E90
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1383+0x4
	add	r1, r3, #0
	ldrh	r4, [r4, #0x8]
	add	r1, r1, r4
	add	r0, r0, r1
	b	.L1370
.L1384:
	.align	2, 0
.L1383:
	.word	gBattleAnimBankTarget
	.word	0xffc0
.L1365:
	ldr	r0, .L1385
	ldrb	r0, [r0]
	bl	sub_8079E90
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x8]
	sub	r0, r0, r1
.L1370:
	strh	r0, [r5, #0xc]
	ldr	r0, .L1385+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x2
	bgt	.L1367	@cond_branch
	mov	r0, #0x3
	strh	r0, [r1, #0xc]
.L1367:
	ldr	r0, .L1385+0x8
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1386:
	.align	2, 0
.L1385:
	.word	gBattleAnimBankTarget
	.word	gTasks
	.word	sub_80CFA20
.Lfe174:
	.size	 sub_80CFB04,.Lfe174-sub_80CFB04
	.align	2, 0
	.globl	sub_80CFDFC
	.type	 sub_80CFDFC,function
	.thumb_func
sub_80CFDFC:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	sub_80787B0
	ldr	r0, .L1388
	ldrh	r0, [r0, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldr	r0, .L1388+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1389:
	.align	2, 0
.L1388:
	.word	gSpriteTemplate_83D75AC
	.word	sub_80CFE2C
.Lfe175:
	.size	 sub_80CFDFC,.Lfe175-sub_80CFDFC
	.align	2, 0
	.type	 sub_80CFE2C,function
	.thumb_func
sub_80CFE2C:
	.syntax unified
    	push {r4-r7,lr}
	adds r4, r0, 0
	ldrh r0, [r4, 0x30]
	adds r0, 0x1
	strh r0, [r4, 0x30]
	lsls r0, 16
	asrs r0, 16
	cmp r0, 0x2
	bne _080CFE90
	movs r0, 0
	strh r0, [r4, 0x30]
	ldrh r5, [r4, 0x2E]
	ldr r1, _080CFE98 @ =gPlttBufferFaded
	adds r0, r5, 0
	adds r0, 0x8
	lsls r0, 1
	adds r0, r1
	ldrh r7, [r0]
	adds r6, r1, 0 @puts gPlttBufferFaded in r6
	adds r1, r5, 0
	adds r1, 0x9
	lsls r0, r5, 1
	adds r0, r6 
	adds r2, r0, 0
	adds r2, 0x10
	movs r3, 0x7
	lsls r1, 1
	adds r1, r6 
_080CFE64:
	ldrh r0, [r1]
	strh r0, [r2]
	adds r1, 0x2
	adds r2, 0x2
	subs r3, 0x1
	cmp r3, 0
	bge _080CFE64
	adds r0, r5, 0
	adds r0, 0xF
	lsls r0, 1
	adds r0, r6
	strh r7, [r0]
	ldrh r0, [r4, 0x32]
	adds r0, 0x1
	strh r0, [r4, 0x32]
	lsls r0, 16
	asrs r0, 16
	cmp r0, 0x18
	bne _080CFE90
	adds r0, r4, 0
	bl move_anim_8072740
_080CFE90:
	pop {r4-r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CFE98: .4byte gPlttBufferFaded
.syntax divided

	.code	16
.Lfe176:
	.size	 sub_80CFE2C,.Lfe176-sub_80CFE2C
	.align	2, 0
	.globl	sub_80CFE9C
	.type	 sub_80CFE9C,function
	.thumb_func
sub_80CFE9C:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r4, .L1393
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r4, .L1393+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L1393+0x8
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1392	@cond_branch
	ldrh	r0, [r4, #0x4]
	neg	r0, r0
	strh	r0, [r4, #0x4]
.L1392:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	ldrh	r1, [r5, #0x20]
	lsr	r6, r0, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	sub_80790F0
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	sub_8078FDC
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	strh	r6, [r5, #0x32]
	strh	r7, [r5, #0x36]
	ldr	r0, .L1393+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L1393+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1394:
	.align	2, 0
.L1393:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
	.word	sub_8078C00
	.word	move_anim_8072740
.Lfe177:
	.size	 sub_80CFE9C,.Lfe177-sub_80CFE9C
	.align	2, 0
	.globl	sub_80CFF50
	.type	 sub_80CFF50,function
	.thumb_func
sub_80CFF50:
	ldr	r1, .L1396
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	ldr	r1, .L1396+0x4
	str	r1, [r0, #0x1c]
	bx	lr
.L1397:
	.align	2, 0
.L1396:
	.word	0xfff0
	.word	sub_80CFF68
.Lfe178:
	.size	 sub_80CFF50,.Lfe178-sub_80CFF50
	.align	2, 0
	.type	 sub_80CFF68,function
	.thumb_func
sub_80CFF68:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldr	r0, .L1402
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1399	@cond_branch
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
.L1399:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x5
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7e
	ble	.L1400	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L1400	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L1400:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1403:
	.align	2, 0
.L1402:
	.word	gBattleAnimBankAttacker
.Lfe179:
	.size	 sub_80CFF68,.Lfe179-sub_80CFF68
	.align	2, 0
	.globl	sub_80CFFD8
	.type	 sub_80CFFD8,function
	.thumb_func
sub_80CFFD8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	mov	r0, #0x14
	strh	r0, [r4, #0x2e]
	ldr	r5, .L1405
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L1405+0x4
	str	r0, [r4, #0x1c]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1405+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1406:
	.align	2, 0
.L1405:
	.word	gBattleAnimBankTarget
	.word	sub_8078B34
	.word	sub_80D0030
.Lfe180:
	.size	 sub_80CFFD8,.Lfe180-sub_80CFFD8
	.align	2, 0
	.type	 sub_80D0030,function
	.thumb_func
sub_80D0030:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x3f
	bl	sub_8076F98
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xa6
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	mov	r2, #0x0
	mov	r1, #0x7
	add	r0, r4, #0
	add	r0, r0, #0x3c
.L1411:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1411	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r2, .L1413
	add	r1, r2, #0
	sub	r1, r1, r0
	strh	r1, [r4, #0x3a]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa0
	bl	__umodsi3
	add	r0, r0, #0xa0
	strh	r0, [r4, #0x3c]
	ldr	r0, .L1413+0x4
	str	r0, [r4, #0x1c]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1414:
	.align	2, 0
.L1413:
	.word	0xfff4
	.word	sub_80D00B4
.Lfe181:
	.size	 sub_80D0030,.Lfe181-sub_80D0030
	.align	2, 0
	.type	 sub_80D00B4,function
	.thumb_func
sub_80D00B4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x3c]
	ldrh	r2, [r4, #0x2e]
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x18
	strh	r2, [r4, #0x24]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1416	@cond_branch
	neg	r0, r2
	strh	r0, [r4, #0x24]
.L1416:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r2, #0x3a
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7e
	ble	.L1417	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1417	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L1417:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe182:
	.size	 sub_80D00B4,.Lfe182-sub_80D00B4
	.align	2, 0
	.globl	sub_80D0118
	.type	 sub_80D0118,function
	.thumb_func
sub_80D0118:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	sub_80787B0
	ldr	r0, .L1421
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1420	@cond_branch
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
.L1420:
	ldr	r1, .L1421+0x4
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0xc]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldr	r0, .L1421+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L1421+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L1422:
	.align	2, 0
.L1421:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_8078114
	.word	move_anim_8072740
.Lfe183:
	.size	 sub_80D0118,.Lfe183-sub_80D0118
	.align	2, 0
	.globl	sub_80D0178
	.type	 sub_80D0178,function
	.thumb_func
sub_80D0178:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	mov	r7, #0x20
	ldr	r4, .L1425
	mov	r0, #0x10
	mov	r8, r0
	ldr	r6, .L1425+0x4
	ldr	r0, .L1425+0x8
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L1424	@cond_branch
	add	r7, r4, #0
	mov	r4, #0x20
	mov	r8, r6
	mov	r6, #0x10
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L1424:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L1425+0xc
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r8
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L1425+0x10
	str	r0, [r5, #0x1c]
	ldr	r1, .L1425+0x14
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1426:
	.align	2, 0
.L1425:
	.word	0xffe0
	.word	0xfff0
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	sub_8078B34
	.word	sub_80D020C
.Lfe184:
	.size	 sub_80D0178,.Lfe184-sub_80D0178
	.align	2, 0
	.type	 sub_80D020C,function
	.thumb_func
sub_80D020C:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1428	@cond_branch
	add	r0, r2, #0
	bl	move_anim_8072740
.L1428:
	pop	{r0}
	bx	r0
.Lfe185:
	.size	 sub_80D020C,.Lfe185-sub_80D020C
	.align	2, 0
	.globl	sub_80D0228
	.type	 sub_80D0228,function
	.thumb_func
sub_80D0228:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	mov	r0, #0x20
	mov	r8, r0
	ldr	r4, .L1431
	mov	r2, #0x10
	mov	r9, r2
	ldr	r6, .L1431+0x4
	ldr	r7, .L1431+0x8
	ldrh	r1, [r7]
	mov	r2, #0x0
	ldrsh	r0, [r7, r2]
	cmp	r0, #0
	beq	.L1430	@cond_branch
	mov	r8, r4
	mov	r4, #0x20
	mov	r9, r6
	mov	r6, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnim
.L1430:
	mov	r0, r8
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r5, #0x20]
	add	r1, r1, r2
	strh	r1, [r5, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	ldr	r4, .L1431+0xc
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r9
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	obj_translate_based_on_private_1_2_3_4
	ldrh	r0, [r7]
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x3a]
	ldr	r0, .L1431+0x10
	str	r0, [r5, #0x1c]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1432:
	.align	2, 0
.L1431:
	.word	0xffe0
	.word	0xfff0
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	sub_80D02D0
.Lfe186:
	.size	 sub_80D0228,.Lfe186-sub_80D0228
	.align	2, 0
	.type	 sub_80D02D0,function
	.thumb_func
sub_80D02D0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1434	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1434	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	SeekSpriteAnim
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x2
	strh	r0, [r4, #0x24]
	ldr	r0, .L1435
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	eor	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x36]
	strh	r2, [r4, #0x34]
	ldr	r0, .L1435+0x4
	str	r0, [r4, #0x1c]
.L1434:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1436:
	.align	2, 0
.L1435:
	.word	0xfffe
	.word	sub_80D0344
.Lfe187:
	.size	 sub_80D02D0,.Lfe187-sub_80D02D0
	.align	2, 0
	.type	 sub_80D0344,function
	.thumb_func
sub_80D0344:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1438	@cond_branch
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L1438:
	ldrh	r0, [r4, #0x34]
	mov	r1, #0x1
	eor	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L1439	@cond_branch
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x36]
	strh	r1, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L1440
	str	r0, [r4, #0x1c]
.L1439:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1441:
	.align	2, 0
.L1440:
	.word	sub_80D03A8
.Lfe188:
	.size	 sub_80D0344,.Lfe188-sub_80D0344
	.align	2, 0
	.type	 sub_80D03A8,function
	.thumb_func
sub_80D03A8:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1443	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L1443:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe189:
	.size	 sub_80D03A8,.Lfe189-sub_80D03A8
	.align	2, 0
	.globl	sub_80D03C4
	.type	 sub_80D03C4,function
	.thumb_func
sub_80D03C4:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_8078E70
	add	r0, r4, #0
	mov	r1, #0xd0
	mov	r2, #0xd0
	mov	r3, #0x0
	bl	obj_id_set_rotscale
	ldr	r1, .L1445
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	mov	r1, #0x0
	bl	sub_8079108
	ldr	r1, .L1445+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x50
	strh	r1, [r0, #0x8]
	ldr	r1, .L1445+0x8
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1446:
	.align	2, 0
.L1445:
	.word	gSprites
	.word	gTasks
	.word	sub_80D0428
.Lfe190:
	.size	 sub_80D03C4,.Lfe190-sub_80D03C4
	.align	2, 0
	.type	 sub_80D0428,function
	.thumb_func
sub_80D0428:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1449
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L1448	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	sub_8078F40
	ldr	r1, .L1449+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	mov	r1, #0x1
	bl	sub_8079108
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L1448:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1450:
	.align	2, 0
.L1449:
	.word	gTasks
	.word	gSprites
.Lfe191:
	.size	 sub_80D0428,.Lfe191-sub_80D0428
	.align	2, 0
	.globl	sub_80D0488
	.type	 sub_80D0488,function
	.thumb_func
sub_80D0488:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1452
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	sub_8078E70
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	strh	r5, [r4, #0x12]
	strh	r5, [r4, #0x14]
	ldr	r0, .L1452+0x4
	ldrb	r0, [r0]
	bl	sub_8079E90
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x16]
	ldr	r0, .L1452+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1453:
	.align	2, 0
.L1452:
	.word	gTasks
	.word	gBattleAnimBankAttacker
	.word	sub_80D04E0
.Lfe192:
	.size	 sub_80D0488,.Lfe192-sub_80D0488
	.align	2, 0
	.type	 sub_80D04E0,function
	.thumb_func
sub_80D04E0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L1474
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bls	.LCB15751
	b	.L1455	@long jump
.LCB15751:
	lsl	r0, r0, #0x2
	ldr	r1, .L1474+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1475:
	.align	2, 0
.L1474:
	.word	gTasks
	.word	.L1470
	.align	2, 0
	.align	2, 0
.L1470:
	.word	.L1456
	.word	.L1460
	.word	.L1464
	.word	.L1465
	.word	.L1467
	.word	.L1469
.L1456:
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L1458	@cond_branch
	cmp	r0, #0x3
	beq	.L1458	@cond_branch
	cmp	r0, #0x6
	bne	.L1457	@cond_branch
.L1458:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80D0614
.L1457:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x28
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x10
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	obj_id_set_rotscale
	ldrb	r0, [r4, #0x8]
	bl	sub_8079A64
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x20
	bne	.L1455	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	b	.L1472
.L1460:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1455	@cond_branch
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r1, #0x3
	bne	.L1462	@cond_branch
	strh	r0, [r4, #0xc]
	strh	r1, [r4, #0xa]
	b	.L1455
.L1462:
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	strh	r2, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	obj_id_set_rotscale
	ldrb	r0, [r4, #0x8]
	bl	sub_8079A64
	mov	r0, #0x2
	strh	r0, [r4, #0xa]
	b	.L1455
.L1464:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L1455
.L1465:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	ble	.L1455	@cond_branch
	b	.L1473
.L1467:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x50
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x10
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	obj_id_set_rotscale
	ldrb	r0, [r4, #0x8]
	bl	sub_8079A64
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x20
	bne	.L1455	@cond_branch
.L1473:
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
.L1472:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L1455
.L1469:
	ldrb	r0, [r4, #0x8]
	bl	sub_8078F40
	ldr	r2, .L1476
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L1455:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1477:
	.align	2, 0
.L1476:
	.word	gSprites
.Lfe193:
	.size	 sub_80D04E0,.Lfe193-sub_80D04E0
	.align	2, 0
	.globl	sub_80D0614
	.type	 sub_80D0614,function
	.thumb_func
sub_80D0614:
	.syntax unified
    	push {r4-r7,lr}
	mov r7, r9
	mov r6, r8
	push {r6,r7}
	adds r7, r0, 0 @r7 is task
	lsls r1, 24
	lsrs r1, 24
	mov r9, r1 @r9 is taskId
	movs r0, 0
	bl duplicate_obj_of_side_rel2move_in_transparent_mode
	lsls r0, 16
	lsrs r0, 16
	mov r8, r0
	lsls r0, 16
	asrs r4, r0, 16
	cmp r4, 0
	blt _080D06EE @jump to bottom
	bl AllocOamMatrix
	lsls r0, 24
	lsrs r6, r0, 24
	cmp r6, 0xFF
	bne _080D0658
	lsls r0, r4, 4
	adds r0, r4
	lsls r0, 2
	ldr r1, _080D0654 @ =gSprites
	adds r0, r1
	bl obj_delete_but_dont_free_vram
	b _080D06EE @ jump to bottom
	.align 2, 0
_080D0654: .4byte gSprites
_080D0658:
	ldr r5, _080D06FC @ =gSprites
	lsls r3, r4, 4
	adds r3, r4
	lsls r3, 2
	adds r4, r3, r5
	ldrb r1, [r4, 0x1]
	movs r0, 0xD
	negs r0, r0
	ands r0, r1
	movs r1, 0x4
	orrs r0, r1
	movs r1, 0x3
	orrs r0, r1
	strb r0, [r4, 0x1]
	adds r2, r4, 0
	adds r2, 0x2C
	ldrb r0, [r2]
	movs r1, 0x80
	orrs r0, r1
	strb r0, [r2]
	movs r0, 0x1F
	ands r6, r0
	lsls r2, r6, 1
	ldrb r1, [r4, 0x3]
	movs r0, 0x3F
	negs r0, r0
	ands r0, r1
	orrs r0, r2
	strb r0, [r4, 0x3]
	ldrb r0, [r7, 0x16]
	ldrb r1, [r7, 0xE]
	subs r0, r1
	adds r1, r4, 0
	adds r1, 0x43
	strb r0, [r1]
	ldrh r0, [r7, 0xE]
	adds r0, 0x1
	strh r0, [r7, 0xE]
	ldrh r0, [r7, 0x14]
	adds r0, 0x1
	strh r0, [r7, 0x14]
	movs r0, 0x10
	strh r0, [r4, 0x2E]
	mov r0, r9
	strh r0, [r4, 0x30]
	movs r0, 0x6
	strh r0, [r4, 0x32]
	adds r5, 0x1C
	adds r3, r5
	ldr r0, _080D0700 @ =sub_80D0704
	str r0, [r3]
	mov r1, r8 @duplicate_obj_of_side_rel2move_in_transparent_mode(0)
	lsls r0, r1, 24
	lsrs r0, 24
	movs r1, 0x10
	ldrsh r2, [r7, r1]
	adds r1, r2, 0
	movs r3, 0
	bl obj_id_set_rotscale
	ldrb r0, [r4, 0x1]
	movs r3, 0x4
	negs r3, r3
	ands r3, r0
	movs r0, 0x1
	orrs r3, r0
	strb r3, [r4, 0x1]
	lsrs r1, r3, 6
	ldrb r2, [r4, 0x3]
	lsrs r2, 6
	lsls r3, 30
	lsrs r3, 30
	adds r0, r4, 0
	bl CalcCenterToCornerVec
_080D06EE:
	pop {r3,r4}
	mov r8, r3
	mov r9, r4
	pop {r4-r7}
	pop {r0}
	bx r0
	.align 2, 0
_080D06FC: .4byte gSprites
_080D0700: .4byte sub_80D0704
.syntax divided

	.code	16
.Lfe194:
	.size	 sub_80D0614,.Lfe194-sub_80D0614
	.align	2, 0
	.globl	sub_80D0704
	.type	 sub_80D0704,function
	.thumb_func
sub_80D0704:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1480	@cond_branch
	ldr	r3, .L1481
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	obj_delete_but_dont_free_vram
.L1480:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1482:
	.align	2, 0
.L1481:
	.word	gTasks
.Lfe195:
	.size	 sub_80D0704,.Lfe195-sub_80D0704
	.align	2, 0
	.globl	sub_80D074C
	.type	 sub_80D074C,function
	.thumb_func
sub_80D074C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L1486
	add	r4, r0, r1
	ldr	r5, .L1486+0x4
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L1484	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L1485
.L1487:
	.align	2, 0
.L1486:
	.word	gTasks
	.word	gBattleAnimArgs
.L1484:
	ldrb	r0, [r5]
	bl	GetAnimBankSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	strh	r1, [r4, #0x8]
	strh	r2, [r4, #0xa]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0xc]
	strh	r2, [r4, #0xe]
	strh	r2, [r4, #0x10]
	ldr	r2, .L1488
	add	r0, r4, #0
	bl	sub_80798F4
	ldr	r0, .L1488+0x4
	str	r0, [r4]
.L1485:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1489:
	.align	2, 0
.L1488:
	.word	gUnknown_083D76F4
	.word	sub_80D07AC
.Lfe196:
	.size	 sub_80D074C,.Lfe196-sub_80D074C
	.align	2, 0
	.type	 sub_80D07AC,function
	.thumb_func
sub_80D07AC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1506
	add	r4, r0, r1
	mov	r0, #0xa
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L1494	@cond_branch
	cmp	r5, #0x1
	bgt	.L1505	@cond_branch
	cmp	r5, #0
	beq	.L1492	@cond_branch
	b	.L1491
.L1507:
	.align	2, 0
.L1506:
	.word	gTasks
.L1505:
	cmp	r5, #0x2
	beq	.L1496	@cond_branch
	cmp	r5, #0x3
	beq	.L1499	@cond_branch
	b	.L1491
.L1492:
	add	r0, r4, #0
	bl	sub_807992C
	ldrh	r2, [r4, #0x10]
	add	r2, r2, #0x3
	strh	r2, [r4, #0x10]
	ldr	r3, .L1508
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L1491	@cond_branch
	strh	r5, [r4, #0xe]
	b	.L1497
.L1509:
	.align	2, 0
.L1508:
	.word	gSprites
.L1494:
	add	r0, r4, #0
	bl	sub_807992C
	ldr	r2, .L1510
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	ldrh	r2, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L1491	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	b	.L1497
.L1511:
	.align	2, 0
.L1510:
	.word	gSprites
.L1496:
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1497	@cond_branch
	ldr	r2, .L1512
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x10]
	b	.L1491
.L1513:
	.align	2, 0
.L1512:
	.word	gSprites
.L1497:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L1491
.L1499:
	add	r0, r4, #0
	bl	sub_807992C
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L1491	@cond_branch
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1501	@cond_branch
	ldr	r2, .L1514
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L1491
.L1515:
	.align	2, 0
.L1514:
	.word	gSprites
.L1501:
	ldrb	r1, [r4, #0x8]
	ldr	r2, .L1516
	add	r0, r4, #0
	bl	sub_80798F4
	strh	r5, [r4, #0xa]
.L1491:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1517:
	.align	2, 0
.L1516:
	.word	gUnknown_083D76F4
.Lfe197:
	.size	 sub_80D07AC,.Lfe197-sub_80D07AC
	.align	2, 0
	.globl	sub_80D08C8
	.type	 sub_80D08C8,function
	.thumb_func
sub_80D08C8:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1519
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1519+0x4
	add	r0, r4, #0
	bl	sub_80798F4
	ldr	r0, .L1519+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1520:
	.align	2, 0
.L1519:
	.word	gTasks
	.word	gUnknown_083D7714
	.word	sub_80D0904
.Lfe198:
	.size	 sub_80D08C8,.Lfe198-sub_80D08C8
	.align	2, 0
	.type	 sub_80D0904,function
	.thumb_func
sub_80D0904:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1523
	add	r0, r0, r1
	bl	sub_807992C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1522	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1522:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1524:
	.align	2, 0
.L1523:
	.word	gTasks
.Lfe199:
	.size	 sub_80D0904,.Lfe199-sub_80D0904
	.align	2, 0
	.globl	sub_80D0930
	.type	 sub_80D0930,function
	.thumb_func
sub_80D0930:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L1529
	ldrb	r0, [r5]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1526	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r4, #0x20]
	mov	r0, #0x40
	b	.L1528
.L1530:
	.align	2, 0
.L1529:
	.word	gBattleAnimBankAttacker
.L1526:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x20]
	ldr	r0, .L1531
.L1528:
	strh	r0, [r4, #0x30]
	ldr	r0, .L1531+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r4, #0x22]
	mov	r0, #0x34
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x32]
	strh	r1, [r4, #0x34]
	strh	r1, [r4, #0x36]
	ldr	r1, .L1531+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L1531+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1532:
	.align	2, 0
.L1531:
	.word	0xffc0
	.word	gBattleAnimBankAttacker
	.word	move_anim_8072740
	.word	sub_8078394
.Lfe200:
	.size	 sub_80D0930,.Lfe200-sub_80D0930
	.align	2, 0
	.globl	sub_80D09C0
	.type	 sub_80D09C0,function
	.thumb_func
sub_80D09C0:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r0, .L1539
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1534	@cond_branch
	ldr	r0, .L1539+0x4
	b	.L1538
.L1540:
	.align	2, 0
.L1539:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L1534:
	ldr	r0, .L1541
.L1538:
	ldrb	r5, [r0]
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1536	@cond_branch
	ldr	r1, .L1541+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L1536:
	add	r0, r5, #0
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r4, .L1541+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x4]
	add	r0, r0, r4
	strh	r0, [r6, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	bgt	.L1537	@cond_branch
	mov	r0, #0x8
	strh	r0, [r6, #0x22]
.L1537:
	ldr	r1, .L1541+0x8
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L1541+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1542:
	.align	2, 0
.L1541:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	move_anim_8074EE0
	.word	sub_80785E4
.Lfe201:
	.size	 sub_80D09C0,.Lfe201-sub_80D09C0
	.align	2, 0
	.globl	sub_80D0A4C
	.type	 sub_80D0A4C,function
	.thumb_func
sub_80D0A4C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1544
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	strh	r1, [r4, #0x8]
	strh	r0, [r4, #0xa]
	ldr	r2, .L1544+0x4
	add	r0, r4, #0
	bl	sub_80798F4
	ldr	r0, .L1544+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1545:
	.align	2, 0
.L1544:
	.word	gTasks
	.word	gUnknown_083D77B0
	.word	sub_80D0A8C
.Lfe202:
	.size	 sub_80D0A4C,.Lfe202-sub_80D0A4C
	.align	2, 0
	.type	 sub_80D0A8C,function
	.thumb_func
sub_80D0A8C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1548
	add	r0, r0, r1
	bl	sub_807992C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1547	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1547:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1549:
	.align	2, 0
.L1548:
	.word	gTasks
.Lfe203:
	.size	 sub_80D0A8C,.Lfe203-sub_80D0A8C
	.align	2, 0
	.globl	sub_80D0AB8
	.type	 sub_80D0AB8,function
	.thumb_func
sub_80D0AB8:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1552
	add	r4, r1, r0
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	strh	r0, [r4, #0x8]
	strh	r2, [r4, #0xa]
	mov	r0, #0x4
	strh	r0, [r4, #0xc]
	mov	r0, #0x7
	strh	r0, [r4, #0xe]
	mov	r0, #0x3
	strh	r0, [r4, #0x10]
	ldr	r3, .L1552+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	strh	r0, [r4, #0x12]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x22]
	strh	r0, [r4, #0x14]
	strh	r2, [r4, #0x16]
	strh	r2, [r4, #0x18]
	mov	r0, #0x2
	strh	r0, [r4, #0x1a]
	ldr	r0, .L1552+0x8
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1551	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0xc]
.L1551:
	ldr	r0, .L1552+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1553:
	.align	2, 0
.L1552:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimBankAttacker
	.word	sub_80D0B3C
.Lfe204:
	.size	 sub_80D0AB8,.Lfe204-sub_80D0AB8
	.align	2, 0
	.type	 sub_80D0B3C,function
	.thumb_func
sub_80D0B3C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1572
	add	r3, r0, r1
	ldrh	r0, [r3, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L1555	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x16]
	ldrh	r0, [r3, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x18]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1556	@cond_branch
	ldr	r2, .L1572+0x4
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x1a]
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	b	.L1571
.L1573:
	.align	2, 0
.L1572:
	.word	gTasks
	.word	gSprites
.L1556:
	ldr	r2, .L1574
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	ldrh	r2, [r3, #0x1a]
	sub	r1, r1, r2
.L1571:
	strh	r1, [r0, #0x22]
.L1555:
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L1561	@cond_branch
	cmp	r0, #0x1
	bgt	.L1570	@cond_branch
	cmp	r0, #0
	beq	.L1559	@cond_branch
	b	.L1558
.L1575:
	.align	2, 0
.L1574:
	.word	gSprites
.L1570:
	cmp	r0, #0x2
	beq	.L1563	@cond_branch
	b	.L1558
.L1559:
	ldr	r2, .L1576
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0xc]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1558	@cond_branch
	mov	r0, #0xe
	strh	r0, [r3, #0xe]
	mov	r0, #0x1
	strh	r0, [r3, #0xa]
	b	.L1558
.L1577:
	.align	2, 0
.L1576:
	.word	gSprites
.L1561:
	ldr	r2, .L1578
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	ldrh	r2, [r3, #0xc]
	sub	r1, r1, r2
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1558	@cond_branch
	mov	r0, #0x7
	strh	r0, [r3, #0xe]
	mov	r0, #0x2
	strh	r0, [r3, #0xa]
	b	.L1558
.L1579:
	.align	2, 0
.L1578:
	.word	gSprites
.L1563:
	ldr	r2, .L1580
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0xc]
	ldrh	r5, [r0, #0x20]
	add	r1, r1, r5
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L1558	@cond_branch
	ldrh	r0, [r3, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1565	@cond_branch
	mov	r0, #0x7
	strh	r0, [r3, #0xe]
	strh	r1, [r3, #0xa]
	b	.L1558
.L1581:
	.align	2, 0
.L1580:
	.word	gSprites
.L1565:
	ldrh	r1, [r3, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1567	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	ldrh	r2, [r3, #0x1a]
	sub	r1, r1, r2
	strh	r1, [r0, #0x22]
.L1567:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1558:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe205:
	.size	 sub_80D0B3C,.Lfe205-sub_80D0B3C
	.align	2, 0
	.globl	sub_80D0C88
	.type	 sub_80D0C88,function
	.thumb_func
sub_80D0C88:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1592
	add	r5, r1, r0
	ldr	r4, .L1592+0x4
	ldrb	r0, [r4]
	bl	sub_8077FC0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	mov	r1, #0x0
	strh	r0, [r5, #0x8]
	mov	r0, #0x4
	strh	r0, [r5, #0xa]
	strh	r1, [r5, #0xc]
	strh	r1, [r5, #0xe]
	strh	r1, [r5, #0x10]
	strh	r1, [r5, #0x12]
	ldrb	r0, [r4]
	bl	sub_807A100
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1583	@cond_branch
	ldr	r0, .L1592+0x8
	ldrh	r0, [r0]
	strh	r0, [r5, #0x14]
	ldr	r0, .L1592+0xc
	b	.L1591
.L1593:
	.align	2, 0
.L1592:
	.word	gTasks
	.word	gBattleAnimBankTarget
	.word	gUnknown_030042C0
	.word	0x4000014
.L1583:
	ldr	r0, .L1594
	ldrh	r0, [r0]
	strh	r0, [r5, #0x14]
	ldr	r0, .L1594+0x4
.L1591:
	str	r0, [sp]
	ldrh	r0, [r5, #0x8]
	add	r1, r0, #0
	sub	r1, r1, #0x40
	lsl	r2, r1, #0x10
	lsl	r0, r0, #0x10
	cmp	r2, r0
	bgt	.L1586	@cond_branch
	ldr	r4, .L1594+0x8
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r4, r0
.L1588:
	asr	r3, r2, #0x10
	cmp	r3, #0
	blt	.L1587	@cond_branch
	lsl	r1, r3, #0x1
	add	r2, r1, r4
	ldrh	r0, [r5, #0x14]
	add	r0, r0, #0xf0
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r5, #0x14]
	add	r0, r0, #0xf0
	strh	r0, [r1]
.L1587:
	add	r0, r3, #0x1
	lsl	r2, r0, #0x10
	asr	r1, r2, #0x10
	mov	r3, #0x8
	ldrsh	r0, [r5, r3]
	cmp	r1, r0
	ble	.L1588	@cond_branch
.L1586:
	ldr	r0, .L1594+0xc
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	sub_80895F8
	ldr	r0, .L1594+0x10
	str	r0, [r5]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1595:
	.align	2, 0
.L1594:
	.word	gUnknown_03004288
	.word	0x4000018
	.word	gUnknown_03004DE0
	.word	0xa2600001
	.word	sub_80D0D68
.Lfe206:
	.size	 sub_80D0C88,.Lfe206-sub_80D0C88
	.align	2, 0
	.type	 sub_80D0D68,function
	.thumb_func
sub_80D0D68:
	.syntax unified
        push {r4,lr}
	lsls r0, 24
	lsrs r4, r0, 24
	lsls r0, r4, 2
	adds r0, r4
	lsls r0, 3
	ldr r1, _080D0D88 @ =gTasks
	adds r3, r0, r1
	movs r1, 0x10
	ldrsh r0, [r3, r1]
	cmp r0, 0
	beq _080D0D8C
	cmp r0, 0x1
	beq _080D0DA2
	b _080D0E22
	.align 2, 0
_080D0D88: .4byte gTasks
_080D0D8C:
	ldrh r0, [r3, 0x12]
	adds r0, 0x1
	strh r0, [r3, 0x12]
	lsls r0, 16
	asrs r0, 16
	cmp r0, 0x14
	ble _080D0E22
	ldrh r0, [r3, 0x10]
	adds r0, 0x1
	strh r0, [r3, 0x10]
	b _080D0E22
_080D0DA2:
	ldrh r0, [r3, 0xA]
	adds r0, 0x1
	strh r0, [r3, 0xA]
	lsls r0, 16
	asrs r0, 16
	cmp r0, 0x3
	ble _080D0E22
	movs r0, 0
	strh r0, [r3, 0xA]
	ldrh r1, [r3, 0xE]
	movs r0, 0x3
	ands r0, r1
	strh r0, [r3, 0xC]
	ldrh r0, [r3, 0x8]
	subs r0, r1
	strh r0, [r3, 0x12]
	movs r2, 0xC
	ldrsh r1, [r3, r2]
	cmp r1, 0x1
	beq _080D0DD8
	cmp r1, 0x1
	ble _080D0DE0
	cmp r1, 0x2
	beq _080D0DDC
	cmp r1, 0x3
	beq _080D0DDC
	b _080D0DE0
_080D0DD8:
	subs r0, 0x2
	b _080D0DDE
_080D0DDC:
	adds r0, 0x1
_080D0DDE:
	strh r0, [r3, 0x12]
_080D0DE0:
	movs r1, 0x12
	ldrsh r0, [r3, r1]
	cmp r0, 0
	blt _080D0E04
	ldr r2, _080D0E28 @ =gUnknown_03004DE0
	lsls r0, 1
	adds r0, r2
	ldrh r1, [r3, 0x14]
	strh r1, [r0]
	movs r1, 0x12
	ldrsh r0, [r3, r1]
	lsls r0, 1
	movs r1, 0xF0
	lsls r1, 3
	adds r2, r1
	adds r0, r2
	ldrh r1, [r3, 0x14]
	strh r1, [r0]
_080D0E04:
	ldrh r0, [r3, 0xE]
	adds r0, 0x1
	strh r0, [r3, 0xE]
	lsls r0, 16
	asrs r0, 16
	movs r2, 0x26
	ldrsh r1, [r3, r2]
	cmp r0, r1
	blt _080D0E22
	ldr r1, _080D0E2C @ =gUnknown_03004DC0
	movs r0, 0x3
	strb r0, [r1, 0x15]
	adds r0, r4, 0
	bl DestroyAnimVisualTask
_080D0E22:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080D0E28: .4byte gUnknown_03004DE0
_080D0E2C: .4byte gUnknown_03004DC0
.syntax divided

	.code	16
.Lfe207:
	.size	 sub_80D0D68,.Lfe207-sub_80D0D68
	.align	2, 0
	.globl	sub_80D0E30
	.type	 sub_80D0E30,function
	.thumb_func
sub_80D0E30:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L1598
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	bl	sub_8077FC0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	mov	r0, #0x10
	strh	r0, [r4, #0x34]
	strh	r5, [r4, #0x36]
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	sub_807A100
	add	r0, r0, #0x2
	strh	r0, [r4, #0x38]
	mov	r0, #0x3f
	bl	sub_8076F98
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x3a]
	ldr	r0, .L1598+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1599:
	.align	2, 0
.L1598:
	.word	gBattleAnimBankTarget
	.word	sub_80D0E8C
.Lfe208:
	.size	 sub_80D0E30,.Lfe208-sub_80D0E30
	.align	2, 0
	.type	 sub_80D0E8C,function
	.thumb_func
sub_80D0E8C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L1605	@cond_branch
	cmp	r1, #0x1
	bgt	.L1617	@cond_branch
	cmp	r1, #0
	beq	.L1602	@cond_branch
	b	.L1601
.L1617:
	cmp	r1, #0x2
	beq	.L1612	@cond_branch
	b	.L1601
.L1602:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1603	@cond_branch
	strh	r1, [r4, #0x32]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L1603:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L1601	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r2]
	b	.L1618
.L1605:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1606	@cond_branch
	ldrh	r2, [r4, #0x32]
	mov	r3, #0x32
	ldrsh	r1, [r4, r3]
	mov	r3, #0x38
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bge	.L1606	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1606	@cond_branch
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xcd
	bl	PlaySE12WithPanning
.L1606:
	ldrh	r0, [r4, #0x34]
	ldrh	r2, [r4, #0x36]
	add	r1, r0, r2
	strh	r1, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x1f
	ble	.L1608	@cond_branch
	mov	r0, #0x40
	b	.L1619
.L1608:
	mov	r0, #0x20
	neg	r0, r0
	cmp	r2, r0
	bgt	.L1609	@cond_branch
	mov	r2, #0x40
	neg	r2, r2
	add	r0, r2, #0
.L1619:
	sub	r0, r0, r1
	strh	r0, [r4, #0x36]
	mov	r3, #0x34
	ldrsh	r0, [r4, r3]
	neg	r0, r0
	strh	r0, [r4, #0x34]
.L1609:
	ldrh	r0, [r4, #0x36]
	mov	r2, #0x0
	strh	r0, [r4, #0x24]
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	mov	r3, #0x32
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bne	.L1601	@cond_branch
	strh	r2, [r4, #0x30]
	strh	r2, [r4, #0x32]
.L1618:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1601
.L1612:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1613	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L1613:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L1601	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	bl	move_anim_8072740
.L1601:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe209:
	.size	 sub_80D0E8C,.Lfe209-sub_80D0E8C
	.align	2, 0
	.globl	sub_80D0FD8
	.type	 sub_80D0FD8,function
	.thumb_func
sub_80D0FD8:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	mov	r5, #0x0
	mov	r0, sp
	strh	r5, [r0]
	mov	r1, sp
	add	r1, r1, #0x2
	strh	r5, [r1]
	ldr	r0, .L1630
	mov	r3, #0x4
	ldrsh	r2, [r0, r3]
	add	r7, r1, #0
	add	r1, r0, #0
	cmp	r2, #0
	bne	.L1621	@cond_branch
	ldr	r0, .L1630+0x4
	b	.L1628
.L1631:
	.align	2, 0
.L1630:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L1621:
	ldr	r0, .L1632
.L1628:
	ldrb	r5, [r0]
	ldrb	r1, [r1, #0x6]
	mov	r0, #0x1
	add	r4, r0, #0
	eor	r4, r4, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1623	@cond_branch
	mov	r1, #0x2
	add	r0, r5, #0
	eor	r0, r0, r1
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1623	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, sp
	add	r3, r7, #0
	bl	sub_807A3FC
	cmp	r4, #0
	bne	.L1624	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	b	.L1629
.L1633:
	.align	2, 0
.L1632:
	.word	gBattleAnimBankTarget
.L1624:
	add	r0, r5, #0
	mov	r1, #0x2
.L1629:
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1626	@cond_branch
	ldr	r2, .L1634
	mov	r0, sp
	ldrh	r1, [r0]
	sub	r1, r1, r4
	ldrh	r0, [r2]
	sub	r1, r1, r0
	sub	r0, r0, r1
	strh	r0, [r2]
	b	.L1623
.L1635:
	.align	2, 0
.L1634:
	.word	gBattleAnimArgs
.L1626:
	ldr	r1, .L1636
	mov	r0, sp
	ldrh	r0, [r0]
	sub	r0, r0, r4
	strh	r0, [r1]
.L1623:
	ldr	r1, .L1636+0x4
	str	r1, [r6, #0x1c]
	add	r0, r6, #0
	bl	_call_via_r1
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1637:
	.align	2, 0
.L1636:
	.word	gBattleAnimArgs
	.word	sub_80793C4
.Lfe210:
	.size	 sub_80D0FD8,.Lfe210-sub_80D0FD8
	.align	2, 0
	.type	 sub_80D1098,function
	.thumb_func
sub_80D1098:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1639	@cond_branch
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	move_anim_8072740
.L1639:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe211:
	.size	 sub_80D1098,.Lfe211-sub_80D1098
	.align	2, 0
	.globl	sub_80D10B8
	.type	 sub_80D10B8,function
	.thumb_func
sub_80D10B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	add	r5, r0, #0
	mov	r6, #0x0
	mov	r0, sp
	strh	r6, [r0]
	mov	r1, sp
	add	r1, r1, #0x2
	strh	r6, [r1]
	ldr	r0, .L1661
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L1641	@cond_branch
	ldr	r0, .L1661+0x4
	ldrb	r7, [r0]
	ldr	r0, .L1661+0x8
	b	.L1657
.L1662:
	.align	2, 0
.L1661:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
.L1641:
	ldr	r0, .L1663
	ldrb	r7, [r0]
	ldr	r0, .L1663+0x4
.L1657:
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r0, .L1663+0x8
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	bne	.L1643	@cond_branch
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	b	.L1644
.L1664:
	.align	2, 0
.L1663:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L1643:
	mov	r2, #0x2
	mov	sl, r2
	mov	r3, #0x3
	str	r3, [sp, #0x4]
.L1644:
	add	r0, r7, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1645	@cond_branch
	add	r0, r7, #0
	mov	r1, sl
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r1, .L1665
	lsr	r0, r0, #0x18
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r0, #0x2
	mov	r4, r8
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1646	@cond_branch
	ldr	r2, .L1665+0x4
	ldr	r0, .L1665+0x8
	add	r0, r4, r0
	b	.L1658
.L1666:
	.align	2, 0
.L1665:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gObjectBankIDs
.L1646:
	ldr	r2, .L1667
	ldr	r0, .L1667+0x4
	add	r0, r0, r8
	b	.L1658
.L1668:
	.align	2, 0
.L1667:
	.word	gSprites
	.word	gObjectBankIDs
.L1645:
	add	r0, r7, #0
	mov	r1, sl
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1669
	ldrh	r1, [r1]
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldr	r0, .L1669+0x4
	ldr	r1, .L1669+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1649	@cond_branch
	add	r4, r7, #0
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1649	@cond_branch
	ldr	r3, .L1669+0xc
	ldr	r2, .L1669+0x10
	add	r0, r7, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r6, r0, r3
	add	r2, r4, r2
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r3
	mov	r3, #0x20
	ldrsh	r1, [r6, r3]
	mov	r3, #0x20
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bge	.L1650	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	b	.L1659
.L1670:
	.align	2, 0
.L1669:
	.word	gBattleAnimArgs
	.word	gMain
	.word	0x43d
	.word	gSprites
	.word	gObjectBankIDs
.L1650:
	add	r0, r6, #0
	b	.L1660
.L1649:
	ldr	r2, .L1671
	ldr	r0, .L1671+0x4
	add	r0, r7, r0
.L1658:
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
.L1660:
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
.L1659:
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	add	r0, r7, #0
	ldr	r1, [sp, #0x4]
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	ldr	r4, .L1671+0x8
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L1671+0xc
	ldr	r2, .L1671+0x10
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1653	@cond_branch
	mov	r0, r8
	mov	r1, #0x2
	eor	r0, r0, r1
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1653	@cond_branch
	ldrb	r1, [r4, #0xc]
	mov	r0, r8
	mov	r2, sp
	mov	r3, sp
	add	r3, r3, #0x2
	bl	sub_807A3FC
	b	.L1654
.L1672:
	.align	2, 0
.L1671:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gBattleAnimArgs
	.word	gMain
	.word	0x43d
.L1653:
	mov	r4, sp
	mov	r0, r8
	mov	r1, sl
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, r8
	ldr	r1, [sp, #0x4]
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, sp
	strh	r0, [r3, #0x2]
.L1654:
	mov	r0, r8
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1655	@cond_branch
	mov	r3, sp
	mov	r2, sp
	ldr	r1, .L1673
	ldrh	r0, [r1, #0x6]
	ldrh	r2, [r2]
	add	r0, r0, r2
	strh	r0, [r3]
	add	r2, r1, #0
	b	.L1656
.L1674:
	.align	2, 0
.L1673:
	.word	gBattleAnimArgs
.L1655:
	mov	r3, sp
	mov	r0, sp
	ldr	r2, .L1675
	ldrh	r0, [r0]
	ldrh	r1, [r2, #0x6]
	sub	r0, r0, r1
	strh	r0, [r3]
.L1656:
	ldrh	r1, [r2, #0x8]
	mov	r0, sp
	ldrh	r0, [r0, #0x2]
	add	r1, r1, r0
	mov	r3, sp
	strh	r1, [r3, #0x2]
	mov	r0, r9
	strh	r0, [r5, #0x30]
	strh	r0, [r5, #0x20]
	strh	r6, [r5, #0x34]
	strh	r6, [r5, #0x22]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r5, #0x32]
	strh	r1, [r5, #0x36]
	ldrh	r0, [r2]
	strh	r0, [r5, #0x2e]
	add	r0, r5, #0
	bl	obj_translate_based_on_private_1_2_3_4
	ldr	r1, .L1675+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1676:
	.align	2, 0
.L1675:
	.word	gBattleAnimArgs
	.word	sub_80D1098
.Lfe212:
	.size	 sub_80D10B8,.Lfe212-sub_80D10B8
	.align	2, 0
	.globl	sub_80D1318
	.type	 sub_80D1318,function
	.thumb_func
sub_80D1318:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1679
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1678	@cond_branch
	lsl	r0, r0, #0x14
	ldr	r1, .L1679+0x4
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldr	r1, .L1679+0x8
	ldrb	r2, [r1, #0xa]
	ldrh	r3, [r1, #0x8]
	mov	r1, #0xf
	bl	BlendPalette
.L1678:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r1, .L1679+0xc
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L1680:
	.align	2, 0
.L1679:
	.word	0x27db
	.word	0x1010000
	.word	gBattleAnimArgs
	.word	sub_80793C4
.Lfe213:
	.size	 sub_80D1318,.Lfe213-sub_80D1318
	.align	2, 0
	.globl	sub_80D1368
	.type	 sub_80D1368,function
	.thumb_func
sub_80D1368:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	sub_80787B0
	ldr	r0, .L1684
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r1, #0xa0
	cmp	r0, #0
	beq	.L1682	@cond_branch
	ldr	r1, .L1684+0x4
.L1682:
	mov	r0, #0xe0
	lsl	r0, r0, #0x2
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	ldr	r0, .L1684+0x8
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x3c]
	ldr	r0, .L1684+0xc
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1685:
	.align	2, 0
.L1684:
	.word	gBattleAnimBankAttacker
	.word	0xff60
	.word	gBattleAnimArgs
	.word	sub_80D13AC
.Lfe214:
	.size	 sub_80D1368,.Lfe214-sub_80D1368
	.align	2, 0
	.type	 sub_80D13AC,function
	.thumb_func
sub_80D13AC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	sub	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	sub	r2, r2, #0x20
	strh	r2, [r4, #0x2e]
	ldr	r0, .L1690
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r1, #0xa0
	cmp	r0, #0
	beq	.L1687	@cond_branch
	ldr	r1, .L1690+0x4
.L1687:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x26]
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L1689	@cond_branch
	ldrh	r2, [r4, #0x22]
	add	r0, r1, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x24]
	strh	r5, [r4, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L1690+0x8
	str	r0, [r4, #0x1c]
.L1689:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1691:
	.align	2, 0
.L1690:
	.word	gBattleAnimBankAttacker
	.word	0xff60
	.word	sub_80D1424
.Lfe215:
	.size	 sub_80D13AC,.Lfe215-sub_80D13AC
	.align	2, 0
	.type	 sub_80D1424,function
	.thumb_func
sub_80D1424:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L1693	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	ldr	r0, .L1694
	str	r0, [r4, #0x1c]
.L1693:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1695:
	.align	2, 0
.L1694:
	.word	sub_80D144C
.Lfe216:
	.size	 sub_80D1424,.Lfe216-sub_80D1424
	.align	2, 0
	.type	 sub_80D144C,function
	.thumb_func
sub_80D144C:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1697	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1698	@cond_branch
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r3, .L1701
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L1701+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldr	r0, .L1701+0x8
	b	.L1700
.L1702:
	.align	2, 0
.L1701:
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_80D14C4
.L1698:
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r3, .L1703
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L1703+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldr	r0, .L1703+0x8
.L1700:
	str	r0, [r4, #0x1c]
.L1697:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1704:
	.align	2, 0
.L1703:
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_80D154C
.Lfe217:
	.size	 sub_80D144C,.Lfe217-sub_80D144C
	.align	2, 0
	.type	 sub_80D14C4,function
	.thumb_func
sub_80D14C4:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x26]
	sub	r0, r0, #0x2
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L1706	@cond_branch
	mov	r0, #0x10
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	ldr	r1, .L1707
	mov	r3, #0xfd
	lsl	r3, r3, #0x6
	add	r0, r3, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldrh	r0, [r2, #0x2e]
	strh	r0, [r1]
	ldr	r0, .L1707+0x4
	str	r0, [r2, #0x1c]
.L1706:
	pop	{r0}
	bx	r0
.L1708:
	.align	2, 0
.L1707:
	.word	0x4000050
	.word	sub_80D1504
.Lfe218:
	.size	 sub_80D14C4,.Lfe218-sub_80D14C4
	.align	2, 0
	.type	 sub_80D1504,function
	.thumb_func
sub_80D1504:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1710	@cond_branch
	ldrh	r1, [r4, #0x2e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x2e]
	ldr	r2, .L1712
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r2]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1710	@cond_branch
	ldr	r0, .L1712+0x4
	str	r0, [r4, #0x1c]
.L1710:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1713:
	.align	2, 0
.L1712:
	.word	0x4000052
	.word	sub_80D154C
.Lfe219:
	.size	 sub_80D1504,.Lfe219-sub_80D1504
	.align	2, 0
	.type	 sub_80D154C,function
	.thumb_func
sub_80D154C:
	push	{lr}
	add	r3, r0, #0
	ldr	r0, .L1719
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L1719+0x4
	cmp	r1, r0
	bne	.L1715	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r1, #0x3c
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L1716	@cond_branch
	ldr	r0, .L1719+0x8
	b	.L1718
.L1720:
	.align	2, 0
.L1719:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	sub_80D158C
.L1716:
	ldr	r0, .L1721
.L1718:
	str	r0, [r3, #0x1c]
.L1715:
	pop	{r0}
	bx	r0
.L1722:
	.align	2, 0
.L1721:
	.word	move_anim_8072740
.Lfe220:
	.size	 sub_80D154C,.Lfe220-sub_80D154C
	.align	2, 0
	.type	 sub_80D158C,function
	.thumb_func
sub_80D158C:
	push	{lr}
	ldr	r1, .L1724
	mov	r2, #0x0
	strh	r2, [r1]
	add	r1, r1, #0x2
	strh	r2, [r1]
	bl	move_anim_8072740
	pop	{r0}
	bx	r0
.L1725:
	.align	2, 0
.L1724:
	.word	0x4000050
.Lfe221:
	.size	 sub_80D158C,.Lfe221-sub_80D158C
	.align	2, 0
	.globl	sub_80D15A4
	.type	 sub_80D15A4,function
	.thumb_func
sub_80D15A4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1727
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x8]
	ldr	r2, .L1727+0x4
	add	r0, r4, #0
	bl	sub_80798F4
	ldr	r0, .L1727+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1728:
	.align	2, 0
.L1727:
	.word	gTasks
	.word	gUnknown_083D79BC
	.word	sub_80D15E0
.Lfe222:
	.size	 sub_80D15A4,.Lfe222-sub_80D15A4
	.align	2, 0
	.type	 sub_80D15E0,function
	.thumb_func
sub_80D15E0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L1731
	add	r4, r0, r1
	add	r0, r4, #0
	bl	sub_807992C
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L1730	@cond_branch
	ldr	r2, .L1731+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L1730:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1732:
	.align	2, 0
.L1731:
	.word	gTasks
	.word	gSprites
.Lfe223:
	.size	 sub_80D15E0,.Lfe223-sub_80D15E0
	.align	2, 0
	.globl	sub_80D1638
	.type	 sub_80D1638,function
	.thumb_func
sub_80D1638:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1737
	add	r4, r1, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r0, #0x3
	strh	r0, [r4, #0x20]
	ldr	r0, .L1737+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1734	@cond_branch
	ldr	r0, .L1737+0x8
	strh	r0, [r4, #0x22]
	mov	r0, #0x8
	b	.L1736
.L1738:
	.align	2, 0
.L1737:
	.word	gTasks
	.word	gBattleAnimBankTarget
	.word	0xffff
.L1734:
	mov	r0, #0x1
	strh	r0, [r4, #0x22]
	ldr	r0, .L1739
.L1736:
	strh	r0, [r4, #0x24]
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L1739+0x4
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1740:
	.align	2, 0
.L1739:
	.word	0xfff8
	.word	sub_80D16A0
.Lfe224:
	.size	 sub_80D1638,.Lfe224-sub_80D1638
	.align	2, 0
	.type	 sub_80D16A0,function
	.thumb_func
sub_80D16A0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L1759
	add	r3, r0, r1
	mov	r0, #0x8
	ldrsh	r4, [r3, r0]
	cmp	r4, #0x1
	beq	.L1744	@cond_branch
	cmp	r4, #0x1
	bgt	.L1757	@cond_branch
	cmp	r4, #0
	beq	.L1743	@cond_branch
	b	.L1742
.L1760:
	.align	2, 0
.L1759:
	.word	gTasks
.L1757:
	cmp	r4, #0x2
	beq	.L1750	@cond_branch
	cmp	r4, #0x3
	beq	.L1753	@cond_branch
	b	.L1742
.L1743:
	ldr	r2, .L1761
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x24]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	strh	r4, [r3, #0xa]
	strh	r4, [r3, #0xc]
	strh	r4, [r3, #0xe]
	b	.L1751
.L1762:
	.align	2, 0
.L1761:
	.word	gSprites
.L1744:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1742	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	and	r0, r0, r4
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1746	@cond_branch
	ldr	r2, .L1763
	mov	r4, #0x26
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	add	r1, r1, #0x6
	b	.L1758
.L1764:
	.align	2, 0
.L1763:
	.word	gSprites
.L1746:
	ldr	r2, .L1765
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	sub	r1, r1, #0x6
.L1758:
	strh	r1, [r0, #0x24]
	ldrh	r0, [r3, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L1742	@cond_branch
	ldrh	r1, [r3, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1751	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x24]
	sub	r0, r0, #0x6
	strh	r0, [r1, #0x24]
	b	.L1751
.L1766:
	.align	2, 0
.L1765:
	.word	gSprites
.L1750:
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x20]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1751	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	b	.L1742
.L1751:
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L1742
.L1753:
	ldr	r2, .L1767
	mov	r4, #0x26
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x22]
	ldrh	r4, [r0, #0x24]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1742	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L1742:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1768:
	.align	2, 0
.L1767:
	.word	gSprites
.Lfe225:
	.size	 sub_80D16A0,.Lfe225-sub_80D16A0
	.align	2, 0
	.globl	sub_80D17C4
	.type	 sub_80D17C4,function
	.thumb_func
sub_80D17C4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1770
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	mov	r0, #0xe
	strh	r0, [r4, #0x22]
	mov	r0, #0x2
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L1770+0x4
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1771:
	.align	2, 0
.L1770:
	.word	gTasks
	.word	sub_80D1808
.Lfe226:
	.size	 sub_80D17C4,.Lfe226-sub_80D17C4
	.align	2, 0
	.type	 sub_80D1808,function
	.thumb_func
sub_80D1808:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L1780
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r2, [r4, r0]
	cmp	r2, #0
	bne	.L1773	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	ble	.L1773	@cond_branch
	strh	r2, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1774	@cond_branch
	ldr	r3, .L1780+0x4
	mov	r6, #0x26
	ldrsh	r1, [r4, r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	b	.L1779
.L1781:
	.align	2, 0
.L1780:
	.word	gTasks
	.word	gSprites
.L1774:
	ldr	r3, .L1782
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
.L1779:
	strb	r1, [r0]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0x22
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	blt	.L1773	@cond_branch
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0x24
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	bge	.L1777	@cond_branch
	strh	r2, [r4, #0xa]
	strh	r2, [r4, #0xc]
	strh	r2, [r4, #0xe]
	b	.L1773
.L1783:
	.align	2, 0
.L1782:
	.word	gSprites
.L1777:
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L1773:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe227:
	.size	 sub_80D1808,.Lfe227-sub_80D1808
	.align	2, 0
	.globl	sub_80D18D4
	.type	 sub_80D18D4,function
	.thumb_func
sub_80D18D4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1785
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	mov	r1, #0x4
	strh	r1, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	strh	r0, [r4, #0x10]
	strh	r0, [r4, #0x12]
	strh	r0, [r4, #0x14]
	strh	r0, [r4, #0x16]
	strh	r0, [r4, #0x18]
	strh	r0, [r4, #0x22]
	ldr	r5, .L1785+0x4
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L1785+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1786:
	.align	2, 0
.L1785:
	.word	gTasks
	.word	gBattleAnimBankAttacker
	.word	sub_80D1930
.Lfe228:
	.size	 sub_80D18D4,.Lfe228-sub_80D18D4
	.align	2, 0
	.type	 sub_80D1930,function
	.thumb_func
sub_80D1930:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1810
	add	r4, r0, r1
	mov	r0, #0x18
	ldrsh	r2, [r4, r0]
	cmp	r2, #0x1
	beq	.L1794	@cond_branch
	cmp	r2, #0x1
	bgt	.L1799	@cond_branch
	cmp	r2, #0
	beq	.L1789	@cond_branch
	b	.L1788
.L1811:
	.align	2, 0
.L1810:
	.word	gTasks
.L1799:
	cmp	r2, #0x2
	beq	.L1796	@cond_branch
	b	.L1788
.L1789:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1788	@cond_branch
	strh	r2, [r4, #0x10]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	mov	r1, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L1788	@cond_branch
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1792	@cond_branch
	strh	r2, [r4, #0x14]
	mov	r0, #0x1
	strh	r0, [r4, #0x18]
	b	.L1788
.L1792:
	mov	r0, #0x2
	strh	r0, [r4, #0x18]
	b	.L1788
.L1794:
	mov	r1, #0x0
	strh	r1, [r4, #0x12]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L1788	@cond_branch
	strh	r2, [r4, #0x16]
	strh	r1, [r4, #0x18]
	b	.L1788
.L1796:
	mov	r0, #0x1
	strh	r0, [r4, #0x12]
.L1788:
	mov	r2, #0x8
	ldrsh	r5, [r4, r2]
	cmp	r5, #0
	beq	.L1801	@cond_branch
	cmp	r5, #0x1
	beq	.L1806	@cond_branch
	b	.L1800
.L1801:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L1800	@cond_branch
	strh	r5, [r4, #0xa]
	ldr	r0, .L1812
	mov	r3, #0x24
	ldrsh	r1, [r4, r3]
	mov	r3, #0x26
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L1800	@cond_branch
	ldr	r0, .L1812+0x4
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	strh	r6, [r1, #0x2e]
	mov	r0, #0xd
	strh	r0, [r1, #0x30]
	ldr	r2, .L1812+0x8
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r1, #0x24]
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r1, #0x26]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1800	@cond_branch
	strh	r5, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L1800	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1800
.L1813:
	.align	2, 0
.L1812:
	.word	gSpriteTemplate_83D79E8
	.word	gSprites
	.word	gUnknown_083D7A00
.L1806:
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1800	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L1800:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe229:
	.size	 sub_80D1930,.Lfe229-sub_80D1930
	.align	2, 0
	.globl	sub_80D1A70
	.type	 sub_80D1A70,function
	.thumb_func
sub_80D1A70:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r4, .L1816
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x3e
	add	r1, r1, r3
	mov	ip, r1
	mov	r2, #0x1
	ldrb	r1, [r0, #0x12]
	and	r1, r1, r2
	lsl	r1, r1, #0x2
	mov	r0, ip
	ldrb	r2, [r0]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1815	@cond_branch
	mov	r0, #0x30
	ldrsh	r1, [r3, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x2e
	ldrsh	r2, [r3, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r3, #0
	bl	DestroySprite
.L1815:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1817:
	.align	2, 0
.L1816:
	.word	gTasks
.Lfe230:
	.size	 sub_80D1A70,.Lfe230-sub_80D1A70
	.align	2, 0
	.globl	sub_80D1ADC
	.type	 sub_80D1ADC,function
	.thumb_func
sub_80D1ADC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1834
	bl	IndexOfSpritePaletteTag
	mov	r1, sp
	strb	r0, [r1]
	mov	r5, #0x1
	ldr	r0, .L1834+0x4
	add	r4, r0, #0
.L1822:
	sub	r0, r4, r5
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	AllocSpritePalette
	mov	r2, sp
	add	r1, r2, r5
	strb	r0, [r1]
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L1822	@cond_branch
	ldr	r4, .L1834+0x8
	bl	NotInBattle
	lsl	r0, r0, #0x18
	ldr	r1, .L1834+0xc
	cmp	r0, #0
	beq	.L1824	@cond_branch
	ldr	r0, .L1834+0x10
	add	r1, r1, r0
.L1824:
	add	r0, r4, #0
	bl	LZDecompressWram
	mov	r5, #0x0
.L1829:
	lsl	r4, r5, #0x5
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1830	@cond_branch
	ldr	r0, .L1834+0x14
	b	.L1833
.L1835:
	.align	2, 0
.L1834:
	.word	0x27de
	.word	0x2710
	.word	gBattleAnimSpritePalette_206
	.word	gSharedMem+0x18000
	.word	0xffffc800
	.word	gSharedMem+0x14800
.L1830:
	ldr	r0, .L1836
.L1833:
	add	r2, r4, r0
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r1, [r0]
	lsl	r1, r1, #0x14
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0x20
	bl	LoadPalette
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L1829	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1837:
	.align	2, 0
.L1836:
	.word	gSharedMem+0x18000
.Lfe231:
	.size	 sub_80D1ADC,.Lfe231-sub_80D1ADC
	.align	2, 0
	.globl	sub_80D1B80
	.type	 sub_80D1B80,function
	.thumb_func
sub_80D1B80:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L1844
	mov	r4, #0x4
.L1842:
	ldrh	r0, [r5]
	bl	FreeSpritePaletteByTag
	add	r5, r5, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L1842	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1845:
	.align	2, 0
.L1844:
	.word	gUnknown_083D7A5C
.Lfe232:
	.size	 sub_80D1B80,.Lfe232-sub_80D1B80
	.align	2, 0
	.globl	sub_80D1BA8
	.type	 sub_80D1BA8,function
	.thumb_func
sub_80D1BA8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r3, r2, #0x18
	mov	r0, #0x1
	and	r3, r3, r0
	neg	r0, r3
	orr	r0, r0, r3
	asr	r0, r0, #0x1f
	mov	r3, #0x20
	and	r0, r0, r3
	ldrh	r4, [r5, #0x4]
	lsl	r3, r4, #0x16
	lsr	r3, r3, #0x16
	lsr	r1, r1, #0x16
	add	r0, r0, r1
	add	r3, r3, r0
	ldr	r1, .L1847
	add	r0, r1, #0
	and	r3, r3, r0
	ldr	r0, .L1847+0x4
	and	r0, r0, r4
	orr	r0, r0, r3
	strh	r0, [r5, #0x4]
	ldr	r0, .L1847+0x8
	lsr	r2, r2, #0x19
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1848:
	.align	2, 0
.L1847:
	.word	0x3ff
	.word	0xfffffc00
	.word	gUnknown_083D7A5C
.Lfe233:
	.size	 sub_80D1BA8,.Lfe233-sub_80D1BA8
	.align	2, 0
	.globl	sub_80D1C08
	.type	 sub_80D1C08,function
	.thumb_func
sub_80D1C08:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	sub_80787B0
	ldr	r6, .L1851
	ldrb	r0, [r6]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1850	@cond_branch
	ldr	r1, .L1851+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L1850:
	ldr	r4, .L1851+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	ldr	r0, .L1851+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L1851+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	ldrb	r1, [r4, #0xa]
	ldrb	r2, [r4, #0xc]
	add	r0, r5, #0
	bl	sub_80D1BA8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1852:
	.align	2, 0
.L1851:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_8078B34
	.word	move_anim_8072740
.Lfe234:
	.size	 sub_80D1C08,.Lfe234-sub_80D1C08
	.align	2, 0
	.globl	sub_80D1C80
	.type	 sub_80D1C80,function
	.thumb_func
sub_80D1C80:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1854	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_80787B0
.L1854:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x32]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x7
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	sub	r2, r2, #0x80
	strh	r2, [r4, #0x32]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3c
	bne	.L1855	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L1855:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe235:
	.size	 sub_80D1C80,.Lfe235-sub_80D1C80
	.align	2, 0
	.globl	sub_80D1CD0
	.type	 sub_80D1CD0,function
	.thumb_func
sub_80D1CD0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	mov	r2, #0xf0
	cmp	r0, #0
	beq	.L1857	@cond_branch
	mov	r2, #0x98
.L1857:
	mov	r3, #0x0
	ldr	r0, .L1859
	strh	r2, [r0]
	ldr	r0, .L1859+0x4
	mov	r1, #0xa0
	strh	r1, [r0]
	ldr	r0, .L1859+0x8
	strh	r2, [r0]
	add	r0, r0, #0x4
	strh	r1, [r0]
	ldr	r1, .L1859+0xc
	ldr	r5, .L1859+0x10
	add	r0, r5, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	add	r5, r5, #0x20
	add	r0, r5, #0
	strh	r0, [r1]
	add	r1, r1, #0x6
	mov	r0, #0xc8
	strh	r0, [r1]
	add	r1, r1, #0x4
	mov	r0, #0x10
	strh	r0, [r1]
	ldr	r1, .L1859+0x14
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r3, [r0, #0x8]
	strh	r2, [r0, #0xa]
	ldr	r1, .L1859+0x18
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1860:
	.align	2, 0
.L1859:
	.word	gUnknown_030042C4
	.word	gUnknown_03004240
	.word	0x4000040
	.word	0x4000048
	.word	0x3f1f
	.word	gTasks
	.word	sub_80D1D48
.Lfe236:
	.size	 sub_80D1CD0,.Lfe236-sub_80D1CD0
	.align	2, 0
	.type	 sub_80D1D48,function
	.thumb_func
sub_80D1D48:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1864
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r1, r2
	ldrh	r0, [r3, #0x8]
	add	r4, r0, #0
	add	r4, r4, #0xd
	strh	r4, [r3, #0x8]
	ldrh	r0, [r3, #0xa]
	add	r2, r0, #0
	sub	r2, r2, #0xd
	strh	r2, [r3, #0xa]
	lsl	r1, r4, #0x10
	lsl	r0, r2, #0x10
	cmp	r1, r0
	blt	.L1862	@cond_branch
	ldr	r0, .L1864+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1864+0x8
	str	r0, [r3]
	b	.L1863
.L1865:
	.align	2, 0
.L1864:
	.word	gTasks
	.word	gUnknown_030042C4
	.word	sub_80D1D9C
.L1862:
	ldr	r1, .L1866
	lsl	r0, r4, #0x8
	orr	r2, r2, r0
	strh	r2, [r1]
.L1863:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1867:
	.align	2, 0
.L1866:
	.word	gUnknown_030042C4
.Lfe237:
	.size	 sub_80D1D48,.Lfe237-sub_80D1D48
	.align	2, 0
	.type	 sub_80D1D9C,function
	.thumb_func
sub_80D1D9C:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	ldr	r5, .L1872
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r3, r0, #0x3
	add	r1, r3, r5
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L1869	@cond_branch
	mov	r0, #0x88
	strh	r0, [r1, #0x1e]
	add	r0, r5, r3
	add	r0, r0, #0x1e
	ldr	r1, .L1872+0x4
	mov	r2, #0x2
	bl	RequestSpriteCopy
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80791A8
	ldr	r2, .L1872+0x8
	mov	r1, #0x10
	bl	BlendPalettes
	b	.L1870
.L1873:
	.align	2, 0
.L1872:
	.word	gTasks
	.word	0x4000050
	.word	0x7fff
.L1869:
	cmp	r0, #0x4
	ble	.L1870	@cond_branch
	ldr	r0, .L1874
	strh	r4, [r0]
	ldr	r0, .L1874+0x4
	strh	r4, [r0]
	ldr	r0, .L1874+0x8
	ldr	r3, .L1874+0xc
	add	r1, r3, #0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x6
	strh	r4, [r0]
	add	r0, r0, #0x4
	strh	r4, [r0]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L1870:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1875:
	.align	2, 0
.L1874:
	.word	gUnknown_030042C4
	.word	gUnknown_03004240
	.word	0x4000048
	.word	0x3f3f
.Lfe238:
	.size	 sub_80D1D9C,.Lfe238-sub_80D1D9C
	.align	2, 0
	.globl	sub_80D1E38
	.type	 sub_80D1E38,function
	.thumb_func
sub_80D1E38:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1880
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1877	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1880+0x4
	add	r0, r5, #0
	bl	sub_80798F4
	ldr	r1, .L1880+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x4
	strh	r1, [r0, #0x24]
	b	.L1878
.L1881:
	.align	2, 0
.L1880:
	.word	gTasks
	.word	gUnknown_083D7A98
	.word	gSprites
.L1877:
	ldr	r1, .L1882
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	add	r0, r5, #0
	bl	sub_807992C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1878	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L1878:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1883:
	.align	2, 0
.L1882:
	.word	gSprites
.Lfe239:
	.size	 sub_80D1E38,.Lfe239-sub_80D1E38
	.align	2, 0
	.globl	sub_80D1EC8
	.type	 sub_80D1EC8,function
	.thumb_func
sub_80D1EC8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1888
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1885	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1888+0x4
	add	r0, r5, #0
	bl	sub_80798F4
	ldr	r1, .L1888+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x4
	strh	r1, [r0, #0x24]
	b	.L1886
.L1889:
	.align	2, 0
.L1888:
	.word	gTasks
	.word	gUnknown_083D7A98
	.word	gSprites
.L1885:
	ldr	r1, .L1890
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	add	r0, r5, #0
	bl	sub_807992C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1886	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L1886:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1891:
	.align	2, 0
.L1890:
	.word	gSprites
.Lfe240:
	.size	 sub_80D1EC8,.Lfe240-sub_80D1EC8
	.align	2, 0
	.globl	sub_80D1F58
	.type	 sub_80D1F58,function
	.thumb_func
sub_80D1F58:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	mov	r0, #0x5f
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L1893
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	obj_translate_based_on_private_1_2_3_4
	ldr	r0, .L1893+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1894:
	.align	2, 0
.L1893:
	.word	gBattleAnimBankTarget
	.word	sub_80D1FA4
.Lfe241:
	.size	 sub_80D1F58,.Lfe241-sub_80D1F58
	.align	2, 0
	.type	 sub_80D1FA4,function
	.thumb_func
sub_80D1FA4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1896	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L1897
.L1896:
	add	r0, r4, #0
	bl	move_anim_8072740
.L1897:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe242:
	.size	 sub_80D1FA4,.Lfe242-sub_80D1FA4
	.align	2, 0
	.globl	sub_80D1FDC
	.type	 sub_80D1FDC,function
	.thumb_func
sub_80D1FDC:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1899	@cond_branch
	ldr	r1, .L1903
	ldrh	r0, [r1]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x32]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x2e]
	b	.L1900
.L1904:
	.align	2, 0
.L1903:
	.word	gBattleAnimArgs
.L1899:
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	cmp	r0, #0x64
	ble	.L1901	@cond_branch
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L1901:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x78
	ble	.L1900	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L1900:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe243:
	.size	 sub_80D1FDC,.Lfe243-sub_80D1FDC
	.align	2, 0
	.globl	sub_80D2064
	.type	 sub_80D2064,function
	.thumb_func
sub_80D2064:
	push	{lr}
	ldr	r2, .L1906
	ldrh	r1, [r2]
	strh	r1, [r0, #0x20]
	mov	r1, #0xa0
	strh	r1, [r0, #0x22]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x30]
	ldr	r1, .L1906+0x4
	str	r1, [r0, #0x1c]
	ldr	r1, .L1906+0x8
	bl	StoreSpriteCallbackInData
	pop	{r0}
	bx	r0
.L1907:
	.align	2, 0
.L1906:
	.word	gBattleAnimArgs
	.word	sub_80782D8
	.word	sub_80D2094
.Lfe244:
	.size	 sub_80D2064,.Lfe244-sub_80D2064
	.align	2, 0
	.type	 sub_80D2094,function
	.thumb_func
sub_80D2094:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r1, #0x4
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x10
	cmp	r5, #0x48
	bgt	.L1909	@cond_branch
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	cmp	r5, #0x40
	bgt	.L1909	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L1909:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe245:
	.size	 sub_80D2094,.Lfe245-sub_80D2094
	.align	2, 0
	.globl	sub_80D2100
	.type	 sub_80D2100,function
	.thumb_func
sub_80D2100:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1914
	ldr	r2, .L1914+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r4, .L1914+0x8
	ldrb	r0, [r4]
	mov	r1, #0x3
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1912	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4]
.L1912:
	ldr	r0, .L1914+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1914+0x10
	strh	r1, [r0]
	ldr	r0, .L1914+0x14
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	mov	r0, sp
	bl	sub_8078914
	ldr	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	ldr	r2, .L1914+0x18
	add	r0, sp, #0xc
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldr	r0, .L1914+0x1c
	str	r0, [r2, #0x8]
	ldr	r0, [r2, #0x8]
	ldr	r0, .L1914+0x20
	bl	LZDecompressVram
	ldr	r0, .L1914+0x24
	ldr	r1, [sp]
	bl	LZDecompressVram
	ldr	r0, .L1914+0x28
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1913	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80763FC
.L1913:
	ldr	r0, .L1914+0x2c
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1914+0x30
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1915:
	.align	2, 0
.L1914:
	.word	0x4000050
	.word	0x3f42
	.word	0x400000a
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	0x4000014
	.word	0x40000d4
	.word	0x85000400
	.word	gAttractTilemap
	.word	gAttractGfx
	.word	gAttractPal
	.word	gTasks
	.word	sub_80D21F0
.Lfe246:
	.size	 sub_80D2100,.Lfe246-sub_80D2100
	.align	2, 0
	.type	 sub_80D21F0,function
	.thumb_func
sub_80D21F0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1936
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB20367
	b	.L1917	@long jump
.LCB20367:
	lsl	r0, r0, #0x2
	ldr	r1, .L1936+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1937:
	.align	2, 0
.L1936:
	.word	gTasks
	.word	.L1934
	.align	2, 0
	.align	2, 0
.L1934:
	.word	.L1918
	.word	.L1921
	.word	.L1923
	.word	.L1926
	.word	.L1933
.L1918:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r3, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	beq	.LCB20399
	b	.L1917	@long jump
.LCB20399:
	strh	r4, [r3, #0x1c]
	ldrh	r1, [r3, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r3, #0x1e]
	ldr	r2, .L1938
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r2]
	mov	r1, #0x1e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x10
	beq	.LCB20415
	b	.L1917	@long jump
.LCB20415:
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x20]
	strh	r4, [r3, #0x1e]
	b	.L1917
.L1939:
	.align	2, 0
.L1938:
	.word	0x4000052
.L1921:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8d
	bne	.L1917	@cond_branch
	mov	r0, #0x10
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L1917
.L1923:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L1917	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1c]
	ldrh	r1, [r3, #0x1e]
	sub	r1, r1, #0x1
	strh	r1, [r3, #0x1e]
	ldr	r2, .L1940
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r2]
	mov	r2, #0x1e
	ldrsh	r1, [r3, r2]
	cmp	r1, #0
	bne	.L1917	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x20]
	strh	r1, [r3, #0x1e]
	b	.L1917
.L1941:
	.align	2, 0
.L1940:
	.word	0x4000052
.L1926:
	mov	r0, sp
	bl	sub_8078914
	ldr	r2, [sp]
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	lsl	r0, r5, #0x2
	mov	sl, r0
	add	r6, sp, #0xc
	mov	r7, #0x0
	ldr	r1, .L1942
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	mov	r8, r6
	ldr	r0, .L1942+0x4
	mov	ip, r0
	mov	r0, #0x85
	lsl	r0, r0, #0x18
	mov	r9, r0
.L1927:
	str	r7, [sp, #0xc]
	mov	r0, r8
	str	r0, [r1]
	str	r2, [r1, #0x4]
	mov	r0, ip
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r4
	sub	r3, r3, r4
	cmp	r3, r4
	bhi	.L1927	@cond_branch
	str	r7, [sp, #0xc]
	str	r6, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x2
	mov	r2, r9
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	ldr	r0, .L1942
	str	r6, [r0]
	str	r1, [r0, #0x4]
	ldr	r1, .L1942+0x8
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1932	@cond_branch
	ldr	r2, .L1942+0xc
	ldrb	r1, [r2]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L1932:
	ldr	r0, .L1942+0x10
	mov	r2, sl
	add	r1, r2, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
.L1933:
	ldr	r0, .L1942+0x14
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	ldr	r2, .L1942+0xc
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L1917:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1943:
	.align	2, 0
.L1942:
	.word	0x40000d4
	.word	0x85000400
	.word	0x85000200
	.word	0x400000a
	.word	gTasks
	.word	0x4000050
.Lfe247:
	.size	 sub_80D21F0,.Lfe247-sub_80D21F0
	.align	2, 0
	.globl	sub_80D23B4
	.type	 sub_80D23B4,function
	.thumb_func
sub_80D23B4:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1952
	ldr	r2, .L1952+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r4, .L1952+0x8
	ldrb	r1, [r4]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1945	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4]
.L1945:
	ldr	r0, .L1952+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1952+0x10
	strh	r1, [r0]
	ldr	r0, .L1952+0x14
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	mov	r0, sp
	bl	sub_8078914
	ldr	r2, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	ldr	r1, .L1952+0x18
	add	r0, sp, #0xc
	str	r0, [r1]
	str	r2, [r1, #0x4]
	ldr	r0, .L1952+0x1c
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1946	@cond_branch
	ldr	r0, .L1952+0x20
	b	.L1951
.L1953:
	.align	2, 0
.L1952:
	.word	0x4000050
	.word	0x3f42
	.word	0x400000a
	.word	gUnknown_030042C0
	.word	gUnknown_030041B4
	.word	0x4000014
	.word	0x40000d4
	.word	0x85000400
	.word	gBattleAnimBackgroundTilemap_ScaryFaceContest
.L1946:
	ldr	r0, .L1954
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1948	@cond_branch
	ldr	r0, .L1954+0x4
.L1951:
	ldr	r1, [sp, #0x4]
	bl	LZDecompressVram
	b	.L1947
.L1955:
	.align	2, 0
.L1954:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimBackgroundTilemap_ScaryFacePlayer
.L1948:
	ldr	r0, .L1956
	ldr	r1, [sp, #0x4]
	bl	LZDecompressVram
.L1947:
	ldr	r0, .L1956+0x4
	ldr	r1, [sp]
	bl	LZDecompressVram
	ldr	r0, .L1956+0x8
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1950	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80763FC
.L1950:
	ldr	r0, .L1956+0xc
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L1956+0x10
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1957:
	.align	2, 0
.L1956:
	.word	gBattleAnimBackgroundTilemap_ScaryFaceOpponent
	.word	gBattleAnimBackgroundImage_ScaryFace
	.word	gBattleAnimBackgroundPalette_ScaryFace
	.word	gTasks
	.word	sub_80D24E0
.Lfe248:
	.size	 sub_80D23B4,.Lfe248-sub_80D23B4
	.align	2, 0
	.type	 sub_80D24E0,function
	.thumb_func
sub_80D24E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1978
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB20828
	b	.L1959	@long jump
.LCB20828:
	lsl	r0, r0, #0x2
	ldr	r1, .L1978+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1979:
	.align	2, 0
.L1978:
	.word	gTasks
	.word	.L1976
	.align	2, 0
	.align	2, 0
.L1976:
	.word	.L1960
	.word	.L1963
	.word	.L1965
	.word	.L1968
	.word	.L1975
.L1960:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r3, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	beq	.LCB20860
	b	.L1959	@long jump
.LCB20860:
	strh	r4, [r3, #0x1c]
	ldrh	r1, [r3, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r3, #0x1e]
	ldr	r2, .L1980
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r2]
	mov	r1, #0x1e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0xe
	beq	.LCB20876
	b	.L1959	@long jump
.LCB20876:
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x20]
	strh	r4, [r3, #0x1e]
	b	.L1959
.L1981:
	.align	2, 0
.L1980:
	.word	0x4000052
.L1963:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L1959	@cond_branch
	mov	r0, #0xe
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L1959
.L1965:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L1959	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1c]
	ldrh	r1, [r3, #0x1e]
	sub	r1, r1, #0x1
	strh	r1, [r3, #0x1e]
	ldr	r2, .L1982
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	strh	r1, [r2]
	mov	r2, #0x1e
	ldrsh	r1, [r3, r2]
	cmp	r1, #0
	bne	.L1959	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x20]
	strh	r1, [r3, #0x1e]
	b	.L1959
.L1983:
	.align	2, 0
.L1982:
	.word	0x4000052
.L1968:
	mov	r0, sp
	bl	sub_8078914
	ldr	r2, [sp]
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	lsl	r0, r5, #0x2
	mov	sl, r0
	add	r6, sp, #0xc
	mov	r7, #0x0
	ldr	r1, .L1984
	mov	r4, #0x80
	lsl	r4, r4, #0x5
	mov	r8, r6
	ldr	r0, .L1984+0x4
	mov	ip, r0
	mov	r0, #0x85
	lsl	r0, r0, #0x18
	mov	r9, r0
.L1969:
	str	r7, [sp, #0xc]
	mov	r0, r8
	str	r0, [r1]
	str	r2, [r1, #0x4]
	mov	r0, ip
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r4
	sub	r3, r3, r4
	cmp	r3, r4
	bhi	.L1969	@cond_branch
	str	r7, [sp, #0xc]
	str	r6, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x2
	mov	r2, r9
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r1, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	ldr	r0, .L1984
	str	r6, [r0]
	str	r1, [r0, #0x4]
	ldr	r1, .L1984+0x8
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1974	@cond_branch
	ldr	r2, .L1984+0xc
	ldrb	r1, [r2]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L1974:
	ldr	r0, .L1984+0x10
	mov	r2, sl
	add	r1, r2, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
.L1975:
	ldr	r0, .L1984+0x14
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	ldr	r2, .L1984+0xc
	ldrb	r1, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L1959:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1985:
	.align	2, 0
.L1984:
	.word	0x40000d4
	.word	0x85000400
	.word	0x85000200
	.word	0x400000a
	.word	gTasks
	.word	0x4000050
.Lfe249:
	.size	 sub_80D24E0,.Lfe249-sub_80D24E0
	.align	2, 0
	.globl	sub_80D26A4
	.type	 sub_80D26A4,function
	.thumb_func
sub_80D26A4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L1987
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1987+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrb	r0, [r5]
	bl	sub_8079E90
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x3c]
	ldr	r1, .L1987+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1988:
	.align	2, 0
.L1987:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_80D2704
.Lfe250:
	.size	 sub_80D26A4,.Lfe250-sub_80D26A4
	.align	2, 0
	.type	 sub_80D2704,function
	.thumb_func
sub_80D2704:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L1990	@cond_branch
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	b	.L2000
.L1990:
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
.L2000:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x9
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r3, #0x38
	ldrsh	r2, [r4, r3]
	cmp	r2, #0
	beq	.L1995	@cond_branch
	cmp	r2, #0x1
	bne	.L1992	@cond_branch
	ldr	r1, .L2001
	add	r0, r1, #0
	ldrh	r2, [r4, #0x32]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldr	r3, .L2001+0x4
	add	r0, r3, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L1992	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x38]
	b	.L1989
.L2002:
	.align	2, 0
.L2001:
	.word	0xfffffc00
	.word	0xffffff00
.L1995:
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r3, #0
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x2e
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bne	.L1992	@cond_branch
	strh	r2, [r4, #0x36]
	mov	r0, #0x1
	strh	r0, [r4, #0x38]
.L1992:
	ldr	r0, .L2003
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L2003+0x4
	cmp	r1, r0
	bne	.L1989	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L1989:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2004:
	.align	2, 0
.L2003:
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe251:
	.size	 sub_80D2704,.Lfe251-sub_80D2704
	.align	2, 0
	.globl	sub_80D27E0
	.type	 sub_80D27E0,function
	.thumb_func
sub_80D27E0:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L2006
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L2006+0x4
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r5, #0x2e]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x7
	bl	Cos
	strh	r0, [r5, #0x30]
	ldr	r0, .L2006+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2007:
	.align	2, 0
.L2006:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_80D2834
.Lfe252:
	.size	 sub_80D27E0,.Lfe252-sub_80D27E0
	.align	2, 0
	.type	 sub_80D2834,function
	.thumb_func
sub_80D2834:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	mov	r3, #0x24
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	add	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L2010	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r2, r0]
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	add	r1, r1, r0
	cmp	r1, #0xa0
	bgt	.L2010	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L2009	@cond_branch
.L2010:
	add	r0, r2, #0
	bl	move_anim_8072740
.L2009:
	pop	{r0}
	bx	r0
.Lfe253:
	.size	 sub_80D2834,.Lfe253-sub_80D2834
	.align	2, 0
	.globl	sub_80D287C
	.type	 sub_80D287C,function
	.thumb_func
sub_80D287C:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x34]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	blt	.L2012	@cond_branch
	add	r0, r2, #0
	bl	move_anim_8072740
.L2012:
	pop	{r0}
	bx	r0
.Lfe254:
	.size	 sub_80D287C,.Lfe254-sub_80D287C
	.align	2, 0
	.globl	sub_80D28AC
	.type	 sub_80D28AC,function
	.thumb_func
sub_80D28AC:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L2014
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L2014+0x4
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r5, #0x2e]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x7
	bl	Cos
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x32]
	ldr	r0, .L2014+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2015:
	.align	2, 0
.L2014:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_80D287C
.Lfe255:
	.size	 sub_80D28AC,.Lfe255-sub_80D28AC
	.align	2, 0
	.globl	sub_80D2904
	.type	 sub_80D2904,function
	.thumb_func
sub_80D2904:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2017	@cond_branch
	add	r0, r2, #0
	bl	move_anim_8072740
.L2017:
	pop	{r0}
	bx	r0
.Lfe256:
	.size	 sub_80D2904,.Lfe256-sub_80D2904
	.align	2, 0
	.globl	sub_80D2920
	.type	 sub_80D2920,function
	.thumb_func
sub_80D2920:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r0, .L2019
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2020:
	.align	2, 0
.L2019:
	.word	sub_80D2904
.Lfe257:
	.size	 sub_80D2920,.Lfe257-sub_80D2920
	.align	2, 0
	.globl	sub_80D2938
	.type	 sub_80D2938,function
	.thumb_func
sub_80D2938:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L2022	@cond_branch
	ldr	r0, .L2026
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
.L2022:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r5, r0, #0x1
	mov	r0, #0xff
	and	r5, r5, r0
	add	r0, r5, #0
	mov	r1, #0x50
	bl	Sin
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4f
	bgt	.L2023	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x50
	bl	Cos
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	add	r1, r1, r0
	strh	r1, [r4, #0x26]
.L2023:
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	cmp	r2, #0x5a
	ble	.L2024	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
.L2024:
	cmp	r2, #0x64
	ble	.L2025	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L2025:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2027:
	.align	2, 0
.L2026:
	.word	gBattleAnimArgs
.Lfe258:
	.size	 sub_80D2938,.Lfe258-sub_80D2938
	.align	2, 0
	.globl	sub_80D29CC
	.type	 sub_80D29CC,function
	.thumb_func
sub_80D29CC:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x14
	ble	.L2029	@cond_branch
	add	r1, r0, #0
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L2029:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1e
	ble	.L2030	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L2030:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe259:
	.size	 sub_80D29CC,.Lfe259-sub_80D29CC
	.align	2, 0
	.globl	sub_80D2A38
	.type	 sub_80D2A38,function
	.thumb_func
sub_80D2A38:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L2032	@cond_branch
	ldr	r1, .L2035
	ldrh	r0, [r1]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x32]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x2e]
	b	.L2033
.L2036:
	.align	2, 0
.L2035:
	.word	gBattleAnimArgs
.L2032:
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	mov	r5, #0x0
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	add	r2, r0, #0
	strh	r2, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	cmp	r0, #0x46
	ble	.L2033	@cond_branch
	ldr	r0, .L2037
	str	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x22]
	add	r0, r2, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x24]
	strh	r5, [r4, #0x26]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xb4
	bl	__umodsi3
	strh	r0, [r4, #0x34]
.L2033:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2038:
	.align	2, 0
.L2037:
	.word	sub_80D29CC
.Lfe260:
	.size	 sub_80D2A38,.Lfe260-sub_80D2A38
.text
	.align	2, 0
