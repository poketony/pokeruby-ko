@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 do_nothing,function
	.thumb_func
do_nothing:
	mov	r0, #0x9
	bx	lr
.Lfe1:
	.size	 do_nothing,.Lfe1-do_nothing
	.align	2, 0
	.globl	sub_8043740
	.type	 sub_8043740,function
	.thumb_func
sub_8043740:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x4
    adds r7, r1, 0
    lsls r0, 16
    lsrs r5, r0, 16
    lsls r2, 24
    lsrs r2, 24
    mov r10, r2
    movs r3, 0
    movs r2, 0
_0804375C:
    lsls r0, r3, 24
    asrs r0, 24
    mov r3, sp
    adds r1, r3, r0
    strb r2, [r1]
    adds r0, 0x1
    lsls r0, 24
    lsrs r3, r0, 24
    asrs r0, 24
    cmp r0, 0x3
    ble _0804375C
    movs r3, 0x3
    movs r0, 0x1
    negs r0, r0
    mov r9, r0
    mov r8, sp
_0804377C:
    lsls r0, r5, 16
    asrs r6, r0, 16
    cmp r6, 0
    ble _080437AA
    lsls r4, r3, 24
    asrs r4, 24
    mov r1, sp
    adds r5, r1, r4
    adds r0, r6, 0
    movs r1, 0xA
    bl __modsi3
    strb r0, [r5]
    adds r0, r6, 0
    movs r1, 0xA
    bl __divsi3
    lsls r0, 16
    lsrs r5, r0, 16
    subs r4, 0x1
    lsls r4, 24
    lsrs r3, r4, 24
    b _0804377C
_080437AA:
    lsls r1, r3, 24
    asrs r0, r1, 24
    cmp r0, r9
    ble _080437CE
    movs r4, 0xFF
    movs r3, 0x1
    negs r3, r3
_080437B8:
    asrs r2, r1, 24
    mov r5, sp
    adds r1, r5, r2
    ldrb r0, [r1]
    orrs r0, r4
    strb r0, [r1]
    subs r2, 0x1
    lsls r1, r2, 24
    asrs r0, r1, 24
    cmp r0, r3
    bgt _080437B8
_080437CE:
    mov r1, r8
    ldrb r0, [r1, 0x3]
    cmp r0, 0xFF
    bne _080437DA
    movs r0, 0
    strb r0, [r1, 0x3]
_080437DA:
    mov r2, r10
    cmp r2, 0
    bne _0804386A
    movs r3, 0
    movs r1, 0
    movs r6, 0xFC
    lsls r6, 8
    movs r5, 0x1E
    mov r12, r5
_080437EC:
    lsls r1, 24
    asrs r2, r1, 24
    mov r0, sp
    adds r5, r0, r2
    ldrb r0, [r5]
    mov r8, r1
    cmp r0, 0xFF
    bne _08043822
    lsls r1, r2, 1
    adds r1, r7
    ldrh r2, [r1]
    adds r0, r6, 0
    ands r0, r2
    mov r2, r12
    orrs r0, r2
    strh r0, [r1]
    lsls r3, 24
    asrs r1, r3, 23
    adds r1, r7
    adds r1, 0x40
    ldrh r2, [r1]
    adds r0, r6, 0
    ands r0, r2
    mov r5, r12
    orrs r0, r5
    strh r0, [r1]
    b _08043852
_08043822:
    lsls r2, 1
    adds r2, r7
    ldrh r0, [r2]
    adds r1, r6, 0
    ands r1, r0
    ldrb r0, [r5]
    adds r0, 0x14
    orrs r1, r0
    strh r1, [r2]
    lsls r4, r3, 24
    asrs r3, r4, 24
    lsls r2, r3, 1
    adds r2, r7
    adds r2, 0x40
    ldrh r0, [r2]
    adds r1, r6, 0
    ands r1, r0
    mov r5, sp
    adds r0, r5, r3
    ldrb r0, [r0]
    adds r0, 0x34
    orrs r1, r0
    strh r1, [r2]
    adds r3, r4, 0
_08043852:
    movs r0, 0x80
    lsls r0, 17
    add r0, r8
    lsrs r1, r0, 24
    movs r2, 0x80
    lsls r2, 17
    adds r0, r3, r2
    lsrs r3, r0, 24
    asrs r0, 24
    cmp r0, 0x3
    ble _080437EC
    b _080438CE
_0804386A:
    movs r3, 0
    movs r4, 0xFC
    lsls r4, 8
    movs r6, 0x1E
_08043872:
    lsls r1, r3, 24
    asrs r2, r1, 24
    mov r3, sp
    adds r5, r3, r2
    ldrb r0, [r5]
    adds r3, r1, 0
    cmp r0, 0xFF
    bne _0804389E
    lsls r1, r2, 1
    adds r1, r7
    ldrh r2, [r1]
    adds r0, r4, 0
    ands r0, r2
    orrs r0, r6
    strh r0, [r1]
    adds r1, 0x40
    ldrh r2, [r1]
    adds r0, r4, 0
    ands r0, r2
    orrs r0, r6
    strh r0, [r1]
    b _080438C0
_0804389E:
    lsls r2, 1
    adds r2, r7
    ldrh r0, [r2]
    adds r1, r4, 0
    ands r1, r0
    ldrb r0, [r5]
    adds r0, 0x14
    orrs r1, r0
    strh r1, [r2]
    adds r2, 0x40
    ldrh r0, [r2]
    adds r1, r4, 0
    ands r1, r0
    ldrb r0, [r5]
    adds r0, 0x34
    orrs r1, r0
    strh r1, [r2]
_080438C0:
    movs r5, 0x80
    lsls r5, 17
    adds r0, r3, r5
    lsrs r3, r0, 24
    asrs r0, 24
    cmp r0, 0x3
    ble _08043872
_080438CE:
    add sp, 0x4
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .syntax divided

	.code	16
.Lfe2:
	.size	 sub_8043740,.Lfe2-sub_8043740
	.align	2, 0
	.globl	unref_sub_80438E0
	.type	 unref_sub_80438E0,function
	.thumb_func
unref_sub_80438E0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, #0x1e
	strh	r1, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r1, r5, #0
	mov	r2, #0x0
	bl	sub_8043740
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r5, r5, #0xa
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x1
	bl	sub_8043740
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 unref_sub_80438E0,.Lfe3-unref_sub_80438E0
	.align	2, 0
	.globl	battle_make_oam_normal_battle
	.type	 battle_make_oam_normal_battle,function
	.thumb_func
battle_make_oam_normal_battle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, #0x0
	str	r0, [sp]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L6	@cond_branch
	mov	r0, sl
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r4, .L13
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L13+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r3, #0x3f
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r0, [r2, #0x1]
	and	r3, r3, r0
	strb	r3, [r2, #0x1]
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x40
	ldr	r4, .L13+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L13+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	b	.L8
.L14:
	.align	2, 0
.L13:
	.word	gSpriteTemplate_820A4EC
	.word	gSprites
	.word	0x3ff
	.word	0xfffffc00
.L7:
	ldr	r4, .L15
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L15+0x4
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L15+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L15+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	mov	r0, #0x2
	str	r0, [sp]
.L8:
	ldr	r2, .L15+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r7, [r0, #0x6]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	strh	r6, [r1, #0x38]
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L15+0x10
	str	r1, [r0]
	b	.L9
.L16:
	.align	2, 0
.L15:
	.word	gSpriteTemplate_820A51C
	.word	gSprites
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_8043D5C
.L6:
	mov	r0, sl
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L10	@cond_branch
	mov	r0, sl
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, .L17
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, sl
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L17+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r7, [r0, #0x6]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r3, r2, r4
	strh	r6, [r3, #0x38]
	ldrh	r1, [r3, #0x4]
	mov	r8, r1
	mov	r5, r8
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L17+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L17+0xc
	mov	r5, r8
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L17+0x10
	str	r0, [r2]
	mov	r0, #0x1
	b	.L12
.L18:
	.align	2, 0
.L17:
	.word	gSpriteTemplate_820A4EC
	.word	gSprites
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_8043D5C
.L10:
	mov	r0, sl
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, .L19
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, sl
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L19+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r7, [r0, #0x6]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r3, r2, r4
	strh	r6, [r3, #0x38]
	ldrh	r1, [r3, #0x4]
	mov	r8, r1
	mov	r5, r8
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L19+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L19+0xc
	mov	r5, r8
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L19+0x10
	str	r0, [r2]
	mov	r0, #0x2
.L12:
	str	r0, [sp]
.L9:
	ldr	r0, .L19+0x14
	add	r0, r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L19+0x18
	add	r0, r0, r1
	mov	r1, #0x8c
	mov	r2, #0x3c
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r1, .L19+0x4
	mov	r8, r1
	add	r4, r4, r8
	mov	r0, sl
	bl	GetBankSide
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x15
	ldr	r0, .L19+0x1c
	add	r1, r1, r0
	add	r0, r4, #0
	bl	SetSubspriteTables
	add	r2, r4, #0
	add	r2, r2, #0x42
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r2, #0x4
	mov	r9, r2
	mov	r1, r9
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x1
	bl	sub_8043CDC
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L19+0x20
	add	r1, r1, r2
	ldr	r2, .L19+0x24
	bl	CpuSet
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	strh	r5, [r0, #0x38]
	mov	r2, sl
	strh	r2, [r0, #0x3a]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r5, r9
	orr	r1, r1, r5
	strb	r1, [r0]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r5
	strb	r1, [r0]
	strh	r6, [r4, #0x38]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x3a]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	orr	r0, r0, r5
	strb	r0, [r4]
	add	r0, r6, #0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L20:
	.align	2, 0
.L19:
	.word	gSpriteTemplate_820A51C
	.word	gSprites
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_8043D5C
	.word	gBanksBySide
	.word	gSpriteTemplate_820A56C
	.word	gSubspriteTables_820A684
	.word	0x6010000
	.word	0x4000010
.Lfe4:
	.size	 battle_make_oam_normal_battle,.Lfe4-battle_make_oam_normal_battle
	.align	2, 0
	.globl	battle_make_oam_safari_battle
	.type	 battle_make_oam_safari_battle,function
	.thumb_func
battle_make_oam_safari_battle:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L22
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L22+0x4
	mov	r9, r1
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	ldrb	r3, [r4, #0x1]
	mov	r2, #0x3f
	add	r1, r2, #0
	and	r1, r1, r3
	strb	r1, [r4, #0x1]
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	mov	r7, r9
	add	r5, r3, r7
	ldrb	r1, [r5, #0x1]
	and	r2, r2, r1
	strb	r2, [r5, #0x1]
	ldrh	r1, [r5, #0x4]
	mov	r8, r1
	mov	r7, r8
	lsl	r2, r7, #0x16
	lsr	r2, r2, #0x16
	add	r2, r2, #0x40
	ldr	r7, .L22+0x8
	add	r1, r7, #0
	and	r2, r2, r1
	ldr	r1, .L22+0xc
	mov	r7, r8
	and	r1, r1, r7
	orr	r1, r1, r2
	strh	r1, [r5, #0x4]
	strh	r0, [r4, #0x6]
	strh	r6, [r5, #0x38]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r3, r3, r9
	ldr	r0, .L22+0x10
	str	r0, [r3]
	add	r0, r6, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L23:
	.align	2, 0
.L22:
	.word	gSpriteTemplate_820A54C
	.word	gSprites
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_8043D5C
.Lfe5:
	.size	 battle_make_oam_safari_battle,.Lfe5-battle_make_oam_safari_battle
	.align	2, 0
	.type	 sub_8043CDC,function
	.thumb_func
sub_8043CDC:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x13
	ldr	r1, .L25
	add	r0, r0, r1
	bx	lr
.L26:
	.align	2, 0
.L25:
	.word	gUnknown_08D1216C
.Lfe6:
	.size	 sub_8043CDC,.Lfe6-sub_8043CDC
	.align	2, 0
	.globl	sub_8043CEC
	.type	 sub_8043CEC,function
	.thumb_func
sub_8043CEC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L30	@cond_branch
	cmp	r0, #0x1
	bgt	.L32	@cond_branch
	cmp	r0, #0
	bne	.L32	@cond_branch
	ldr	r2, .L36
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x10
	b	.L35
.L37:
	.align	2, 0
.L36:
	.word	gSprites
.L30:
	ldr	r2, .L38
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x10
	b	.L35
.L39:
	.align	2, 0
.L38:
	.word	gSprites
.L32:
	ldr	r2, .L40
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x8
.L35:
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r4, #0x22]
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	strh	r1, [r4, #0x24]
	ldrh	r0, [r0, #0x26]
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	gSprites
.Lfe7:
	.size	 sub_8043CEC,.Lfe7-sub_8043CEC
	.align	2, 0
	.type	 sub_8043D5C,function
	.thumb_func
sub_8043D5C:
	ldrh	r1, [r0, #0x38]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L43
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r2, #0x20]
	add	r1, r1, #0x40
	strh	r1, [r0, #0x20]
	ldrh	r1, [r2, #0x22]
	strh	r1, [r0, #0x22]
	ldrh	r1, [r2, #0x24]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r2, #0x26]
	strh	r1, [r0, #0x26]
	bx	lr
.L44:
	.align	2, 0
.L43:
	.word	gSprites
.Lfe8:
	.size	 sub_8043D5C,.Lfe8-sub_8043D5C
	.align	2, 0
	.globl	sub_8043D84
	.type	 sub_8043D84,function
	.thumb_func
sub_8043D84:
	push	{r4, r5, lr}
	ldr	r5, [sp, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L46
	add	r4, r4, r0
	strb	r1, [r4]
	str	r2, [r4, #0x4]
	str	r3, [r4, #0x8]
	str	r5, [r4, #0xc]
	ldr	r0, .L46+0x4
	str	r0, [r4, #0x10]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gSharedMem+0x17850
	.word	0xffff8000
.Lfe9:
	.size	 sub_8043D84,.Lfe9-sub_8043D84
	.align	2, 0
	.globl	sub_8043DB0
	.type	 sub_8043DB0,function
	.thumb_func
sub_8043DB0:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L49
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	add	r1, r2, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	mov	r0, #0x38
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	ldrh	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gSprites
.Lfe10:
	.size	 sub_8043DB0,.Lfe10-sub_8043DB0
	.align	2, 0
	.globl	sub_8043DFC
	.type	 sub_8043DFC,function
	.thumb_func
sub_8043DFC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L52
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	add	r4, r2, #0
	add	r4, r4, #0x3e
	ldrb	r1, [r4]
	mov	r3, #0x5
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x38
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r4, [r0]
	add	r1, r3, #0
	and	r1, r1, r4
	strb	r1, [r0]
	ldrh	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	gSprites
.Lfe11:
	.size	 sub_8043DFC,.Lfe11-sub_8043DFC
	.align	2, 0
	.type	 sub_8043E50,function
	.thumb_func
sub_8043E50:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L55
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r4
	strh	r1, [r3, #0x20]
	strh	r2, [r3, #0x22]
	pop	{r4}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gSprites
.Lfe12:
	.size	 sub_8043E50,.Lfe12-sub_8043E50
	.align	2, 0
	.globl	unref_sub_8043E70
	.type	 unref_sub_8043E70,function
	.thumb_func
unref_sub_8043E70:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L58
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r5
	ldrh	r1, [r4, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gSprites
.Lfe13:
	.size	 unref_sub_8043E70,.Lfe13-unref_sub_8043E70
	.align	2, 0
	.globl	nullsub_11
	.type	 nullsub_11,function
	.thumb_func
nullsub_11:
	bx	lr
.Lfe14:
	.size	 nullsub_11,.Lfe14-nullsub_11
	.align	2, 0
	.globl	sub_8043EB4
	.type	 sub_8043EB4,function
	.thumb_func
sub_8043EB4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	ldr	r1, .L67
	mov	r8, r1
	ldrb	r2, [r1]
	cmp	r6, r2
	bge	.L63	@cond_branch
	ldr	r1, .L67+0x4
	mov	ip, r1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r5, r0, #0x2
	mov	r7, #0xd
	neg	r7, r7
	ldr	r2, .L67+0x8
	mov	r9, r2
.L65:
	mov	r1, r9
	add	r0, r6, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r4, [r1, #0x6]
	ldrh	r3, [r1, #0x38]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	add	r6, r6, #0x1
	mov	r2, r8
	ldrb	r2, [r2]
	cmp	r6, r2
	blt	.L65	@cond_branch
.L63:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gNoOfAllBanks
	.word	gSprites
	.word	gHealthboxIDs
.Lfe15:
	.size	 sub_8043EB4,.Lfe15-sub_8043EB4
	.align	2, 0
	.globl	sub_8043F44
	.type	 sub_8043F44,function
	.thumb_func
sub_8043F44:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	mov	r4, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L70	@cond_branch
	add	r0, r6, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L71	@cond_branch
	mov	r5, #0x2c
	mov	r4, #0x1e
	b	.L73
.L71:
	mov	r5, #0x9e
	mov	r4, #0x58
	b	.L73
.L70:
	add	r0, r6, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L77	@cond_branch
	cmp	r0, #0x1
	bgt	.L81	@cond_branch
	cmp	r0, #0
	beq	.L75	@cond_branch
	b	.L73
.L81:
	cmp	r0, #0x2
	beq	.L76	@cond_branch
	cmp	r0, #0x3
	beq	.L78	@cond_branch
	b	.L73
.L75:
	mov	r5, #0x9f
	mov	r4, #0x4d
	b	.L73
.L76:
	mov	r5, #0xab
	mov	r4, #0x66
	b	.L73
.L77:
	mov	r5, #0x2c
	mov	r4, #0x13
	b	.L73
.L78:
	mov	r5, #0x20
	mov	r4, #0x2c
.L73:
	ldr	r0, .L82
	add	r0, r6, r0
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	sub_8043E50
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gHealthboxIDs
.Lfe16:
	.size	 sub_8043F44,.Lfe16-sub_8043F44
	.align	2, 0
	.type	 sub_8043FC0,function
	.thumb_func
sub_8043FC0:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffe0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r1, .L106
	mov	r0, sp
	mov	r2, #0x1e
	bl	memcpy
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L85	@cond_branch
	ldr	r1, .L106+0x4
	lsl	r4, r5, #0x4
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	ldr	r7, .L106+0x8
	cmp	r0, #0
	bne	.L88	@cond_branch
	ldr	r7, .L106+0xc
	b	.L88
.L107:
	.align	2, 0
.L106:
	.word	gUnknown_0820A81C
	.word	gSprites
	.word	gUnknown_0820A80C
	.word	gUnknown_0820A804
.L85:
	ldr	r1, .L108
	lsl	r4, r5, #0x4
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	ldr	r7, .L108+0x4
	cmp	r0, #0
	bne	.L88	@cond_branch
	ldr	r7, .L108+0x8
.L88:
	mov	r1, sp
	add	r1, r1, #0x6
	cmp	r6, #0x64
	bne	.L91	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x64
	mov	r2, #0x0
	mov	r3, #0x3
	b	.L105
.L109:
	.align	2, 0
.L108:
	.word	gSprites
	.word	gUnknown_0820A80C
	.word	gUnknown_0820A814
.L91:
	add	r0, r1, #0
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x2
.L105:
	bl	ConvertIntToDecimalStringN
	add	r1, r0, #0
	mov	r0, #0xfc
	strb	r0, [r1]
	add	r1, r1, #0x1
	mov	r0, #0x13
	strb	r0, [r1]
	add	r1, r1, #0x1
	mov	r0, #0xf
	strb	r0, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x1]
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	mov	r1, sp
	bl	sub_80034D4
	cmp	r6, #0x64
	bne	.L93	@cond_branch
	ldr	r1, .L110
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldr	r5, .L110+0x4
	mov	r4, #0x3
.L97:
	ldrh	r0, [r6, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	sub	r0, r0, #0x20
	ldmia	r7!, {r1}
	add	r1, r1, r0
	add	r0, r5, #0
	ldr	r2, .L110+0x8
	bl	CpuSet
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L97	@cond_branch
	b	.L99
.L111:
	.align	2, 0
.L110:
	.word	gSprites
	.word	0x2000020
	.word	0x4000008
.L93:
	ldr	r1, .L112
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldr	r5, .L112+0x4
	mov	r4, #0x2
.L103:
	ldrh	r0, [r6, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldmia	r7!, {r1}
	add	r1, r1, r0
	add	r0, r5, #0
	ldr	r2, .L112+0x8
	bl	CpuSet
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L103	@cond_branch
.L99:
	add	sp, sp, #0x20
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gSprites
	.word	0x2000020
	.word	0x4000008
.Lfe17:
	.size	 sub_8043FC0,.Lfe17-sub_8043FC0
	.align	2, 0
	.globl	sub_80440EC
	.type	 sub_80440EC,function
	.thumb_func
sub_80440EC:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r8
    push {r7}
    sub sp, 0x14
    lsls r0, 24
    lsrs r7, r0, 24
    lsls r1, 16
    lsrs r6, r1, 16
    lsls r2, 24
    lsrs r2, 24
    mov r8, r2
    ldr r1, _08044144 @ =gUnknown_0820A864
    mov r0, sp
    movs r2, 0x14
    bl memcpy
    ldr r1, _08044148 @ =gSprites
    lsls r0, r7, 4
    adds r0, r7
    lsls r0, 2
    adds r4, r0, r1
    movs r0, 0x3A
    ldrsh r5, [r4, r0]
    bl IsDoubleBattle
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    beq _08044136
    lsls r0, r5, 24
    lsrs r0, 24
    bl GetBankSide
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x1
    bne _0804414C
_08044136:
    lsls r1, r6, 16
    asrs r1, 16
    adds r0, r7, 0
    mov r2, r8
    bl sub_8044210
    b _080441F0
    .align 2, 0
_08044144: .4byte gUnknown_0820A864
_08044148: .4byte gSprites
_0804414C:
    mov r5, sp
    adds r5, 0x6
    mov r0, r8
    cmp r0, 0
    bne _08044190
    ldrh r0, [r4, 0x3A]
    lsls r0, 24
    lsrs r0, 24
    bl GetBankSide
    lsls r0, 24
    ldr r4, _08044188 @ =gUnknown_0820A848
    cmp r0, 0
    bne _0804416A
    ldr r4, _0804418C @ =gUnknown_0820A83C
_0804416A:
    movs r0, 0x4
    mov r8, r0
    lsls r1, r6, 16
    asrs r1, 16
    adds r0, r5, 0
    movs r2, 0x18
    movs r3, 0x1
    bl sub_8003504
    adds r5, r0, 0
    movs r0, 0xBA
    strb r0, [r5]
    movs r0, 0xFF
    strb r0, [r5, 0x1]
    b _080441B6
    .align 2, 0
_08044188: .4byte gUnknown_0820A848
_0804418C: .4byte gUnknown_0820A83C
_08044190:
    ldrh r0, [r4, 0x3A]
    lsls r0, 24
    lsrs r0, 24
    bl GetBankSide
    lsls r0, 24
    ldr r4, _080441FC @ =gUnknown_0820A85C
    cmp r0, 0
    bne _080441A4
    ldr r4, _08044200 @ =gUnknown_0820A854
_080441A4:
    movs r0, 0x3
    mov r8, r0
    lsls r1, r6, 16
    asrs r1, 16
    adds r0, r5, 0
    movs r2, 0x18
    movs r3, 0x1
    bl sub_8003504
_080441B6:
    movs r0, 0x80
    lsls r0, 18
    mov r1, sp
    bl sub_80034D4
    mov r0, r8
    cmp r0, 0
    beq _080441F0
    ldr r1, _08044204 @ =gSprites
    lsls r0, r7, 4
    adds r0, r7
    lsls r0, 2
    adds r6, r0, r1
    adds r7, r4, 0
    ldr r5, _08044208 @ =gSharedMem + 0x20
    mov r4, r8
_080441D6:
    ldrh r0, [r6, 0x4]
    lsls r0, 22
    lsrs r0, 17
    ldm r7!, {r1}
    adds r1, r0
    adds r0, r5, 0
    ldr r2, _0804420C @ =REG_BG0CNT
    bl CpuSet
    adds r5, 0x40
    subs r4, 0x1
    cmp r4, 0
    bne _080441D6
_080441F0:
    add sp, 0x14
    pop {r3}
    mov r8, r3
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_080441FC: .4byte gUnknown_0820A85C
_08044200: .4byte gUnknown_0820A854
_08044204: .4byte gSprites
_08044208: .4byte gSharedMem + 0x20
_0804420C: .4byte 0x04000008
    .syntax divided

	.code	16
.Lfe18:
	.size	 sub_80440EC,.Lfe18-sub_80440EC
	.align	2, 0
	.type	 sub_8044210,function
	.thumb_func
sub_8044210:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffec
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	mov	r9, r6
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r1, .L125
	mov	r0, sp
	mov	r2, #0x14
	bl	memcpy
	ldr	r1, .L125+0x4
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r8, r0
	mov	r1, #0x3a
	ldrsh	r4, [r0, r1]
	lsl	r0, r4, #0x2
	ldr	r1, .L125+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L115	@cond_branch
	mov	r2, sp
	add	r2, r2, #0x6
	cmp	r7, #0
	bne	.L117	@cond_branch
	ldr	r7, .L125+0xc
	mov	r0, #0x6
	mov	sl, r0
	lsl	r1, r6, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0x2b
	mov	r3, #0x1
	bl	sub_8003504
	add	r2, r0, #0
	mov	r0, #0xba
	strb	r0, [r2]
	mov	r0, #0xff
	strb	r0, [r2, #0x1]
	b	.L118
.L126:
	.align	2, 0
.L125:
	.word	gUnknown_0820A89C
	.word	gSprites
	.word	gSharedMem+0x17800
	.word	gUnknown_0820A87C
.L117:
	ldr	r7, .L127
	mov	r1, #0x2
	mov	sl, r1
	mov	r0, r9
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0xf
	mov	r3, #0x1
	bl	sub_8003504
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L118	@cond_branch
	mov	r0, #0x74
	bl	sub_8043CDC
	mov	r2, r8
	ldrh	r1, [r2, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0xd0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	ldr	r2, .L127+0x4
	add	r1, r1, r2
	ldr	r2, .L127+0x8
	bl	CpuSet
.L118:
	ldr	r6, .L127+0xc
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x38
	ldrsh	r4, [r0, r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	mov	r1, sp
	bl	sub_80034D4
	mov	r2, sl
	cmp	r2, #0
	beq	.L115	@cond_branch
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r6, r0, r6
	ldr	r5, .L127+0x10
	mov	r4, sl
.L123:
	ldrh	r0, [r6, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldmia	r7!, {r1}
	add	r1, r1, r0
	add	r0, r5, #0
	ldr	r2, .L127+0x8
	bl	CpuSet
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L123	@cond_branch
.L115:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gUnknown_0820A894
	.word	0x6010000
	.word	0x4000008
	.word	gSprites
	.word	0x2000020
.Lfe19:
	.size	 sub_8044210,.Lfe19-sub_8044210
	.align	2, 0
	.globl	sub_8044338
	.type	 sub_8044338,function
	.thumb_func
sub_8044338:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x20
    adds r4, r1, 0
    lsls r0, 24
    lsrs r0, 24
    str r0, [sp, 0x14]
    ldr r1, _080443CC @ =gUnknown_0820A864
    mov r0, sp
    movs r2, 0x14
    bl memcpy
    ldr r1, _080443D0 @ =gSprites
    ldr r2, [sp, 0x14]
    lsls r0, r2, 4
    adds r0, r2
    lsls r0, 2
    adds r0, r1
    ldrh r0, [r0, 0x3A]
    lsls r0, 24
    lsrs r0, 24
    bl GetBankIdentity
    lsls r0, 24
    lsrs r0, 24
    lsls r1, r0, 1
    adds r1, r0
    lsls r1, 7
    ldr r3, _080443D4 @ =gSharedMem + 0x520
    adds r6, r1, r3
    movs r0, 0x5
    mov r8, r0
    adds r0, r4, 0
    bl GetNature
    lsls r0, 24
    mov r4, sp
    adds r4, 0x6
    ldr r1, _080443D8 @ =gNatureNames
    lsrs r0, 22
    adds r0, r1
    ldr r1, [r0]
    adds r0, r4, 0
    bl StringCopy
    adds r0, r6, 0
    mov r1, sp
    bl sub_80034D4
    movs r7, 0x6
    movs r5, 0
    mov r1, sp
    adds r1, 0x9
    str r1, [sp, 0x1C]
_080443AA:
    mov r2, sp
    adds r0, r2, r7
    ldrb r1, [r0]
    adds r0, r1, 0
    subs r0, 0x37
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x13
    bls _080443C8
    adds r0, r1, 0
    adds r0, 0x79
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x13
    bhi _080443DC
_080443C8:
    movs r0, 0x2C
    b _080443FA
    .align 2, 0
_080443CC: .4byte gUnknown_0820A864
_080443D0: .4byte gSprites
_080443D4: .4byte gSharedMem + 0x520
_080443D8: .4byte gNatureNames
_080443DC:
    adds r0, r1, 0
    subs r0, 0x4B
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x4
    bls _080443F4
    adds r0, r1, 0
    adds r0, 0x65
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x4
    bhi _080443F8
_080443F4:
    movs r0, 0x2D
    b _080443FA
_080443F8:
    movs r0, 0x2B
_080443FA:
    bl sub_8043CDC
    lsls r1, r5, 6
    adds r1, r6, r1
    ldr r2, _080444F8 @ =REG_BG0CNT
    bl CpuSet
    adds r0, r5, 0x1
    lsls r0, 24
    lsrs r5, r0, 24
    adds r7, 0x1
    cmp r5, r8
    bcc _080443AA
    movs r7, 0x1
    ldr r3, [sp, 0x14]
    lsls r3, 4
    str r3, [sp, 0x18]
    movs r0, 0x1
    add r0, r8
    mov r9, r0
    cmp r7, r9
    bge _08044486
    ldr r1, _080444FC @ =gSprites
    ldr r2, _080444F8 @ =REG_BG0CNT
    mov r10, r2
    ldr r2, [sp, 0x14]
    adds r0, r3, r2
    lsls r0, 2
    adds r0, r1
    mov r8, r0
_08044436:
    mov r3, r8
    ldrh r0, [r3, 0x4]
    lsls r0, 22
    lsrs r0, 22
    adds r5, r7, 0
    cmp r7, 0
    bge _08044446
    adds r5, r7, 0x7
_08044446:
    asrs r5, 3
    lsls r4, r5, 3
    subs r4, r7, r4
    adds r0, r4
    lsls r5, 6
    adds r0, r5
    lsls r0, 5
    ldr r2, _08044500 @ =0x06010000
    adds r1, r0, r2
    adds r0, r6, 0
    mov r2, r10
    bl CpuSet
    adds r6, 0x20
    mov r3, r8
    ldrh r0, [r3, 0x4]
    lsls r0, 22
    lsrs r0, 22
    adds r4, 0x8
    adds r0, r4
    adds r0, r5
    lsls r0, 5
    ldr r2, _08044500 @ =0x06010000
    adds r1, r0, r2
    adds r0, r6, 0
    mov r2, r10
    bl CpuSet
    adds r6, 0x20
    adds r7, 0x1
    cmp r7, r9
    blt _08044436
_08044486:
    ldr r6, _080444FC @ =gSprites
    ldr r3, [sp, 0x18]
    ldr r1, [sp, 0x14]
    adds r0, r3, r1
    lsls r0, 2
    adds r0, r6
    ldrh r5, [r0, 0x38]
    lsls r5, 24
    lsrs r5, 24
    ldr r4, _08044504 @ =gSharedMem
    ldr r2, _08044508 @ =0x00016089
    adds r0, r4, r2
    ldrb r1, [r0]
    mov r0, sp
    adds r0, 0x6
    movs r2, 0x1
    movs r3, 0x2
    bl ConvertIntToDecimalStringN
    ldr r3, _0804450C @ =0x00016088
    adds r4, r3
    ldrb r1, [r4]
    ldr r0, [sp, 0x1C]
    movs r2, 0x1
    movs r3, 0x2
    bl ConvertIntToDecimalStringN
    mov r1, sp
    movs r0, 0
    strb r0, [r1, 0x5]
    movs r0, 0xBA
    strb r0, [r1, 0x8]
    movs r0, 0x80
    lsls r0, 18
    bl sub_80034D4
    movs r7, 0
    lsls r0, r5, 4
    adds r0, r5
    lsls r0, 2
    adds r5, r0, r6
    ldr r4, _08044510 @ =gSharedMem + 0x20
_080444DA:
    cmp r7, 0x1
    bgt _08044514
    ldrh r1, [r5, 0x4]
    lsls r1, 22
    lsrs r1, 22
    adds r0, r7, 0x2
    adds r1, r0
    lsls r1, 5
    ldr r0, _08044500 @ =0x06010000
    adds r1, r0
    adds r0, r4, 0
    ldr r2, _080444F8 @ =REG_BG0CNT
    bl CpuSet
    b _0804452A
    .align 2, 0
_080444F8: .4byte 0x04000008
_080444FC: .4byte gSprites
_08044500: .4byte 0x06010000
_08044504: .4byte gSharedMem
_08044508: .4byte 0x00016089
_0804450C: .4byte 0x00016088
_08044510: .4byte gSharedMem + 0x20
_08044514:
    ldrh r1, [r5, 0x4]
    lsls r1, 22
    lsrs r1, 22
    adds r1, r7, r1
    lsls r1, 5
    ldr r2, _08044544 @ =0x060100c0
    adds r1, r2
    adds r0, r4, 0
    ldr r2, _08044548 @ =REG_BG0CNT
    bl CpuSet
_0804452A:
    adds r4, 0x40
    adds r7, 0x1
    cmp r7, 0x4
    ble _080444DA
    add sp, 0x20
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_08044544: .4byte 0x060100c0
_08044548: .4byte 0x04000008
    .syntax divided

	.code	16
.Lfe20:
	.size	 sub_8044338,.Lfe20-sub_8044338
	.align	2, 0
	.globl	sub_804454C
	.type	 sub_804454C,function
	.thumb_func
sub_804454C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L150
	ldrb	r0, [r0]
	cmp	r8, r0
	blt	.LCB1571
	b	.L132	@long jump
.LCB1571:
	ldr	r1, .L150+0x4
	mov	r9, r1
	mov	r2, #0x64
	mov	sl, r2
	ldr	r7, .L150+0x8
.L134:
	ldr	r0, .L150+0xc
	mov	r6, r8
	add	r5, r6, r0
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, r9
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L150+0x10
	cmp	r1, r0
	beq	.LCB1596
	b	.L133	@long jump
.LCB1596:
	lsl	r0, r6, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB1605
	b	.L133	@long jump
.LCB1605:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L136	@cond_branch
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1618
	b	.L133	@long jump
.LCB1618:
.L136:
	mov	r0, r8
	lsl	r3, r0, #0x2
	ldr	r0, .L150+0x14
	add	r3, r3, r0
	ldr	r0, [r3]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	mov	r2, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x4
	ldrb	r0, [r3]
	mov	r6, #0x11
	neg	r6, r6
	add	r1, r6, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r0, [r3]
	lsl	r0, r0, #0x1b
	lsr	r6, r0, #0x1f
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L137	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1658
	b	.L133	@long jump
.LCB1658:
	ldr	r0, .L150+0x18
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0
	beq	.LCB1666
	b	.L133	@long jump
.LCB1666:
	cmp	r6, #0x1
	bne	.L140	@cond_branch
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r2, [sp]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r0, .L150+0x1c
	add	r1, r1, r0
	mov	r0, sp
	ldr	r2, .L150+0x20
	bl	CpuSet
	ldrb	r4, [r5]
	ldrh	r0, [r7]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r2, .L150+0x24
	add	r0, r0, r2
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	sub_8044210
	ldrb	r4, [r5]
	ldrh	r0, [r7]
	mov	r6, sl
	mul	r6, r6, r0
	add	r0, r6, #0
	ldr	r1, .L150+0x24
	b	.L149
.L151:
	.align	2, 0
.L150:
	.word	gNoOfAllBanks
	.word	gSprites
	.word	gBattlePartyID
	.word	gHealthboxIDs
	.word	SpriteCallbackDummy
	.word	gSharedMem+0x17800
	.word	gBattleTypeFlags
	.word	0x6010000
	.word	0x5000040
	.word	gPlayerParty
.L140:
	ldrb	r0, [r5]
	bl	draw_status_ailment_maybe
	ldrb	r0, [r5]
	ldrh	r1, [r7]
	mov	r2, sl
	mul	r2, r2, r1
	add	r1, r2, #0
	ldr	r6, .L152
	add	r1, r1, r6
	mov	r2, #0x5
	bl	sub_8045A5C
	mov	r0, #0x75
	bl	sub_8043CDC
	ldrb	r2, [r5]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L152+0x4
	add	r1, r1, r2
	ldr	r2, .L152+0x8
	bl	CpuSet
	b	.L142
.L153:
	.align	2, 0
.L152:
	.word	gPlayerParty
	.word	0x6010680
	.word	0x4000008
.L137:
	cmp	r6, #0x1
	bne	.L143	@cond_branch
	ldr	r0, .L154
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0
	beq	.L144	@cond_branch
	ldrb	r0, [r5]
	ldrh	r1, [r7]
	mov	r6, sl
	mul	r6, r6, r1
	add	r1, r6, #0
	ldr	r2, .L154+0x4
	add	r1, r1, r2
	bl	sub_8044338
	b	.L142
.L155:
	.align	2, 0
.L154:
	.word	gBattleTypeFlags
	.word	gEnemyParty
.L144:
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r2, [sp]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r6, .L156
	add	r1, r1, r6
	mov	r0, sp
	ldr	r2, .L156+0x4
	bl	CpuSet
	ldrb	r4, [r5]
	ldrh	r0, [r7]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r2, .L156+0x8
	add	r0, r0, r2
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	sub_8044210
	ldrb	r4, [r5]
	ldrh	r0, [r7]
	mov	r6, sl
	mul	r6, r6, r0
	add	r0, r6, #0
	ldr	r1, .L156+0x8
.L149:
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x1
	bl	sub_8044210
	b	.L142
.L157:
	.align	2, 0
.L156:
	.word	0x6010000
	.word	0x5000040
	.word	gEnemyParty
.L143:
	ldrb	r0, [r5]
	bl	draw_status_ailment_maybe
	ldrb	r0, [r5]
	ldrh	r1, [r7]
	mov	r6, #0x64
	mul	r1, r1, r6
	ldr	r4, .L158
	add	r1, r1, r4
	mov	r2, #0x5
	bl	sub_8045A5C
	ldr	r0, .L158+0x4
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L142	@cond_branch
	ldrb	r0, [r5]
	ldrh	r1, [r7]
	mul	r1, r1, r6
	add	r1, r1, r4
	mov	r2, #0x4
	bl	sub_8045A5C
.L142:
	ldr	r0, .L158+0x8
	add	r0, r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r1, [r0, #0x3c]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x3c]
.L133:
	add	r7, r7, #0x2
	mov	r2, #0x1
	add	r8, r8, r2
	ldr	r0, .L158+0xc
	ldrb	r0, [r0]
	cmp	r8, r0
	bge	.LCB1950
	b	.L134	@long jump
.LCB1950:
.L132:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gHealthboxIDs
	.word	gNoOfAllBanks
.Lfe21:
	.size	 sub_804454C,.Lfe21-sub_804454C
	.align	2, 0
	.globl	sub_8044804
	.type	 sub_8044804,function
	.thumb_func
sub_8044804:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x28
    str r1, [sp, 0xC]
    lsls r0, 24
    lsrs r0, 24
    str r0, [sp, 0x8]
    lsls r2, 24
    lsrs r2, 24
    adds r4, r2, 0
    lsls r3, 24
    lsrs r3, 24
    str r3, [sp, 0x10]
    cmp r4, 0
    beq _08044834
    bl GetBankIdentity
    lsls r0, 24
    lsrs r0, 24
    cmp r0, 0x3
    beq _08044878
_08044834:
    ldr r0, [sp, 0x8]
    bl GetBankSide
    lsls r0, 24
    cmp r0, 0
    bne _08044854
    movs r7, 0
    movs r1, 0x88
    movs r2, 0x60
    movs r0, 0x64
    mov r8, r0
    ldr r5, _08044850 @ =0x0000fffb
    b _08044884
    .align 2, 0
_08044850: .4byte 0x0000fffb
_08044854:
    movs r7, 0x1
    cmp r4, 0
    beq _08044864
    bl IsDoubleBattle
    lsls r0, 24
    cmp r0, 0
    bne _0804486A
_08044864:
    movs r1, 0x68
    movs r2, 0x28
    b _0804486E
_0804486A:
    movs r1, 0x68
    movs r2, 0x10
_0804486E:
    ldr r3, _08044874 @ =0x0000ff9c
    mov r8, r3
    b _08044882
    .align 2, 0
_08044874: .4byte 0x0000ff9c
_08044878:
    movs r7, 0x1
    movs r1, 0x68
    movs r2, 0x28
    ldr r5, _08044930 @ =0x0000ff9c
    mov r8, r5
_08044882:
    movs r5, 0x5
_08044884:
    movs r6, 0
    str r6, [sp, 0x14]
    lsls r4, r7, 3
    ldr r0, _08044934 @ =gUnknown_0820A754
    mov r10, r0
    lsls r3, r7, 1
    mov r9, r3
    lsls r1, 16
    str r1, [sp, 0x20]
    lsls r2, 16
    str r2, [sp, 0x24]
    ldr r2, _08044938 @ =0x0000ffff
    ldr r1, [sp, 0xC]
    movs r6, 0x5
_080448A0:
    ldrh r0, [r1]
    cmp r0, r2
    beq _080448B4
    ldr r3, [sp, 0x14]
    lsls r0, r3, 24
    movs r3, 0x80
    lsls r3, 17
    adds r0, r3
    lsrs r0, 24
    str r0, [sp, 0x14]
_080448B4:
    adds r1, 0x8
    subs r6, 0x1
    cmp r6, 0
    bge _080448A0
    mov r6, r10
    adds r0, r4, r6
    bl LoadCompressedObjectPic
    ldr r0, _0804493C @ =gUnknown_0820A784
    adds r0, r4, r0
    bl LoadSpriteSheet
    ldr r0, _08044940 @ =gUnknown_0820A764
    adds r0, r4, r0
    bl LoadSpritePalette
    ldr r0, _08044944 @ =gUnknown_0820A774
    adds r0, r4, r0
    bl LoadSpritePalette
    mov r1, r9
    adds r0, r1, r7
    lsls r0, 3
    ldr r1, _08044948 @ =gSpriteTemplate_820A7A4
    adds r0, r1
    ldr r2, [sp, 0x20]
    asrs r1, r2, 16
    ldr r3, [sp, 0x24]
    asrs r2, r3, 16
    movs r3, 0xA
    bl CreateSprite
    lsls r0, 24
    lsrs r0, 24
    str r0, [sp, 0x18]
    lsls r0, 4
    ldr r6, [sp, 0x18]
    adds r0, r6
    lsls r0, 2
    ldr r1, _0804494C @ =gSprites
    adds r4, r0, r1
    ldr r1, _08044950 @ =gSubspriteTables_820A6E4
    adds r0, r4, 0
    bl SetSubspriteTables
    mov r0, r8
    strh r0, [r4, 0x24]
    strh r5, [r4, 0x2E]
    cmp r7, 0
    beq _08044954
    ldrh r0, [r4, 0x20]
    subs r0, 0x60
    strh r0, [r4, 0x20]
    ldrb r1, [r4, 0x3]
    movs r0, 0x3F
    negs r0, r0
    ands r0, r1
    movs r1, 0x10
    orrs r0, r1
    strb r0, [r4, 0x3]
    b _0804495A
    .align 2, 0
_08044930: .4byte 0x0000ff9c
_08044934: .4byte gUnknown_0820A754
_08044938: .4byte 0x0000ffff
_0804493C: .4byte gUnknown_0820A784
_08044940: .4byte gUnknown_0820A764
_08044944: .4byte gUnknown_0820A774
_08044948: .4byte gSpriteTemplate_820A7A4
_0804494C: .4byte gSprites
_08044950: .4byte gSubspriteTables_820A6E4
_08044954:
    ldrh r0, [r4, 0x20]
    adds r0, 0x60
    strh r0, [r4, 0x20]
_0804495A:
    movs r6, 0
    ldr r1, _08044A04 @ =gSprites
    mov r10, r1
    mov r4, sp
    mov r2, r9
    adds r0, r2, r7
    lsls r0, 3
    str r0, [sp, 0x1C]
    movs r3, 0xA
    mov r9, r3
    mov r8, r6
_08044970:
    ldr r0, _08044A08 @ =gSpriteTemplate_820A7D4
    ldr r5, [sp, 0x24]
    ldr r1, _08044A0C @ =0xfffc0000
    adds r2, r5, r1
    ldr r3, [sp, 0x1C]
    adds r0, r3, r0
    ldr r5, [sp, 0x20]
    asrs r1, r5, 16
    asrs r2, 16
    movs r3, 0x9
    bl CreateSpriteAtEnd
    strb r0, [r4]
    ldr r0, [sp, 0x10]
    cmp r0, 0
    bne _080449A0
    ldrb r0, [r4]
    lsls r1, r0, 4
    adds r1, r0
    lsls r1, 2
    ldr r2, _08044A10 @ =gSprites + 0x1C
    adds r1, r2
    ldr r0, _08044A14 @ =sub_8045180
    str r0, [r1]
_080449A0:
    ldr r5, _08044A04 @ =gSprites
    cmp r7, 0
    bne _080449BE
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    add r0, r10
    strh r7, [r0, 0x24]
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    add r0, r10
    strh r7, [r0, 0x26]
_080449BE:
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r5
    movs r1, 0
    mov r3, sp
    ldrh r3, [r3, 0x18]
    strh r3, [r0, 0x2E]
    cmp r7, 0
    bne _08044A18
    ldrb r0, [r4]
    lsls r1, r0, 4
    adds r1, r0
    lsls r1, 2
    adds r1, r5
    ldrh r0, [r1, 0x20]
    adds r0, 0x18
    add r0, r8
    strh r0, [r1, 0x20]
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r5
    mov r1, r9
    strh r1, [r0, 0x30]
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r5
    movs r1, 0x78
    b _08044A56
    .align 2, 0
_08044A04: .4byte gSprites
_08044A08: .4byte gSpriteTemplate_820A7D4
_08044A0C: .4byte 0xfffc0000
_08044A10: .4byte gSprites + 0x1C
_08044A14: .4byte sub_8045180
_08044A18:
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r5
    ldrh r3, [r2, 0x20]
    subs r3, 0x18
    movs r1, 0x5
    subs r1, r6
    lsls r0, r1, 2
    adds r0, r1
    lsls r0, 1
    subs r3, r0
    strh r3, [r2, 0x20]
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r5
    movs r1, 0x6
    subs r1, r6
    lsls r0, r1, 3
    subs r0, r1
    adds r0, 0xA
    strh r0, [r2, 0x30]
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r5
    ldr r1, _08044AC4 @ =0x0000ff88
_08044A56:
    strh r1, [r0, 0x24]
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r5
    strh r7, [r0, 0x32]
    adds r4, 0x1
    movs r2, 0x7
    add r9, r2
    movs r3, 0xA
    add r8, r3
    adds r6, 0x1
    cmp r6, 0x5
    bgt _08044A76
    b _08044970
_08044A76:
    ldr r0, [sp, 0x8]
    bl GetBankSide
    lsls r0, 24
    cmp r0, 0
    bne _08044B5E
    movs r6, 0
    ldr r5, _08044AC8 @ =gBattleTypeFlags
    mov r10, r5
    ldr r0, _08044ACC @ =0x0000ffff
    mov r9, r0
    ldr r7, _08044AD0 @ =gSprites
    ldr r1, _08044AD4 @ =0x000003ff
    mov r12, r1
    ldr r2, _08044AD8 @ =0xfffffc00
    mov r8, r2
    mov r4, sp
    ldr r5, [sp, 0xC]
_08044A9A:
    mov r3, r10
    ldrh r1, [r3]
    movs r0, 0x40
    ands r0, r1
    cmp r0, 0
    beq _08044ADC
    ldrh r0, [r5]
    cmp r0, r9
    beq _08044AE6
    cmp r0, 0
    bne _08044B2E
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r7
    ldrh r3, [r2, 0x4]
    lsls r1, r3, 22
    lsrs r1, 22
    adds r1, 0x3
    b _08044B46
    .align 2, 0
_08044AC4: .4byte 0x0000ff88
_08044AC8: .4byte gBattleTypeFlags
_08044ACC: .4byte 0x0000ffff
_08044AD0: .4byte gSprites
_08044AD4: .4byte 0x000003ff
_08044AD8: .4byte 0xfffffc00
_08044ADC:
    ldr r1, [sp, 0x14]
    lsls r0, r1, 24
    asrs r0, 24
    cmp r6, r0
    blt _08044B14
_08044AE6:
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r7
    ldrh r3, [r2, 0x4]
    lsls r1, r3, 22
    lsrs r1, 22
    adds r1, 0x1
    mov r0, r12
    ands r1, r0
    mov r0, r8
    ands r0, r3
    orrs r0, r1
    strh r0, [r2, 0x4]
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r7
    movs r1, 0x1
    strh r1, [r0, 0x3C]
    b _08044B52
_08044B14:
    ldrh r0, [r5]
    cmp r0, 0
    bne _08044B2E
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r7
    ldrh r3, [r2, 0x4]
    lsls r1, r3, 22
    lsrs r1, 22
    adds r1, 0x3
    b _08044B46
_08044B2E:
    ldr r0, [r5, 0x4]
    cmp r0, 0
    beq _08044B52
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r7
    ldrh r3, [r2, 0x4]
    lsls r1, r3, 22
    lsrs r1, 22
    adds r1, 0x2
_08044B46:
    mov r0, r12
    ands r1, r0
    mov r0, r8
    ands r0, r3
    orrs r0, r1
    strh r0, [r2, 0x4]
_08044B52:
    adds r4, 0x1
    adds r5, 0x8
    adds r6, 0x1
    cmp r6, 0x5
    ble _08044A9A
    b _08044C38
_08044B5E:
    movs r6, 0
    ldr r1, _08044BA4 @ =gBattleTypeFlags
    mov r10, r1
    ldr r2, _08044BA8 @ =0x0000ffff
    mov r9, r2
    ldr r7, _08044BAC @ =gSprites
    ldr r3, _08044BB0 @ =0x000003ff
    mov r12, r3
    ldr r5, _08044BB4 @ =0xfffffc00
    mov r8, r5
    ldr r5, [sp, 0xC]
    mov r4, sp
    adds r4, 0x5
_08044B78:
    mov r0, r10
    ldrh r1, [r0]
    movs r0, 0x40
    ands r0, r1
    cmp r0, 0
    beq _08044BB8
    ldrh r0, [r5]
    cmp r0, r9
    beq _08044BC2
    cmp r0, 0
    bne _08044C0A
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r7
    ldrh r3, [r2, 0x4]
    lsls r1, r3, 22
    lsrs r1, 22
    adds r1, 0x3
    b _08044C22
    .align 2, 0
_08044BA4: .4byte gBattleTypeFlags
_08044BA8: .4byte 0x0000ffff
_08044BAC: .4byte gSprites
_08044BB0: .4byte 0x000003ff
_08044BB4: .4byte 0xfffffc00
_08044BB8:
    ldr r1, [sp, 0x14]
    lsls r0, r1, 24
    asrs r0, 24
    cmp r6, r0
    blt _08044BF0
_08044BC2:
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r7
    ldrh r3, [r2, 0x4]
    lsls r1, r3, 22
    lsrs r1, 22
    adds r1, 0x1
    mov r0, r12
    ands r1, r0
    mov r0, r8
    ands r0, r3
    orrs r0, r1
    strh r0, [r2, 0x4]
    ldrb r1, [r4]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r7
    movs r1, 0x1
    strh r1, [r0, 0x3C]
    b _08044C2E
_08044BF0:
    ldrh r0, [r5]
    cmp r0, 0
    bne _08044C0A
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r7
    ldrh r3, [r2, 0x4]
    lsls r1, r3, 22
    lsrs r1, 22
    adds r1, 0x3
    b _08044C22
_08044C0A:
    ldr r0, [r5, 0x4]
    cmp r0, 0
    beq _08044C2E
    ldrb r0, [r4]
    lsls r2, r0, 4
    adds r2, r0
    lsls r2, 2
    adds r2, r7
    ldrh r3, [r2, 0x4]
    lsls r1, r3, 22
    lsrs r1, 22
    adds r1, 0x2
_08044C22:
    mov r0, r12
    ands r1, r0
    mov r0, r8
    ands r0, r3
    orrs r0, r1
    strh r0, [r2, 0x4]
_08044C2E:
    subs r4, 0x1
    adds r5, 0x8
    adds r6, 0x1
    cmp r6, 0x5
    ble _08044B78
_08044C38:
    ldr r0, _08044C98 @ =TaskDummy
    movs r1, 0x5
    bl CreateTask
    lsls r0, 24
    lsrs r4, r0, 24
    ldr r2, _08044C9C @ =gTasks
    lsls r3, r4, 2
    adds r1, r3, r4
    lsls r1, 3
    adds r0, r1, r2
    mov r5, sp
    ldrh r5, [r5, 0x8]
    strh r5, [r0, 0x8]
    mov r6, sp
    ldrh r6, [r6, 0x18]
    strh r6, [r0, 0xA]
    movs r6, 0
    adds r0, r2, 0
    adds r0, 0xE
    adds r1, r0
_08044C62:
    mov r5, sp
    adds r0, r5, r6
    ldrb r0, [r0]
    strh r0, [r1]
    adds r1, 0x2
    adds r6, 0x1
    cmp r6, 0x5
    ble _08044C62
    adds r0, r3, r4
    lsls r0, 3
    adds r0, r2
    ldrh r6, [r5, 0x10]
    strh r6, [r0, 0x1C]
    movs r0, 0x72
    movs r1, 0
    bl PlaySE12WithPanning
    adds r0, r4, 0
    add sp, 0x28
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r1}
    bx r1
    .align 2, 0
_08044C98: .4byte TaskDummy
_08044C9C: .4byte gTasks
    .syntax divided

	.code	16
.Lfe22:
	.size	 sub_8044804,.Lfe22-sub_8044804
	.align	2, 0
	.globl	sub_8044CA0
	.type	 sub_8044CA0,function
	.thumb_func
sub_8044CA0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffe8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L182
	lsl	r3, r0, #0x2
	add	r1, r3, r0
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	ldrb	r4, [r0, #0x1c]
	mov	r9, r4
	ldrb	r4, [r0, #0xa]
	mov	sl, r4
	ldrb	r0, [r0, #0x8]
	str	r0, [sp, #0x8]
	mov	r5, #0x0
	add	r7, r2, #0
	ldr	r0, .L182+0x4
	mov	ip, r0
	str	r3, [sp, #0xc]
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r2, r1, r0
.L165:
	mov	r4, sp
	add	r1, r4, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L165	@cond_branch
	ldr	r1, .L182+0x8
	mov	r2, #0xfd
	lsl	r2, r2, #0x6
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r0, #0x10
	strh	r0, [r1]
	ldr	r0, [sp, #0xc]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x10
	strh	r1, [r0, #0x26]
	mov	r5, #0x0
	mov	r4, sl
	lsl	r4, r4, #0x4
	str	r4, [sp, #0x10]
	ldr	r4, .L182+0x4
	mov	r6, #0xd
	neg	r6, r6
	mov	r3, #0x4
.L170:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	add	r0, r6, #0
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x1]
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L170	@cond_branch
	ldr	r2, [sp, #0x10]
	add	r2, r2, sl
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	ldrb	r1, [r2, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	mov	r2, r9
	cmp	r2, #0
	bne	.LCB2100
	b	.L172	@long jump
.LCB2100:
	mov	r5, #0x0
	mov	r6, ip
	mov	r9, r5
	add	r3, r6, #0
	add	r3, r3, #0x1c
	mov	r4, sp
	mov	r7, #0x0
.L176:
	ldr	r0, [sp, #0x8]
	str	r3, [sp, #0x14]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r3, [sp, #0x14]
	cmp	r2, #0
	beq	.L177	@cond_branch
	mov	r0, #0x5
	sub	r0, r0, r5
	mov	r1, sp
	add	r2, r1, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r7, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, r9
	strh	r1, [r0, #0x34]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, r9
	strh	r1, [r0, #0x36]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L182+0xc
	str	r1, [r0]
	ldr	r2, .L182+0x4
	mov	ip, r2
	b	.L175
.L183:
	.align	2, 0
.L182:
	.word	gTasks
	.word	gSprites
	.word	0x4000050
	.word	sub_8045110
.L177:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r7, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x34]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x36]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L184
	str	r1, [r0]
	ldr	r0, .L184+0x4
	mov	ip, r0
.L175:
	add	r4, r4, #0x1
	add	r7, r7, #0x7
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L176	@cond_branch
	ldr	r3, [sp, #0x10]
	add	r3, r3, sl
	lsl	r3, r3, #0x2
	mov	r1, ip
	add	r0, r3, r1
	mov	r2, #0x2e
	ldrsh	r1, [r0, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	mov	r2, #0x0
	strh	r1, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	mov	r1, ip
	add	r1, r1, #0x1c
	add	r3, r3, r1
	ldr	r1, .L184+0x8
	str	r1, [r3]
	ldr	r1, .L184+0xc
	bl	SetSubspriteTables
	ldr	r1, .L184+0x10
	ldr	r0, [sp, #0xc]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L184+0x14
	b	.L181
.L185:
	.align	2, 0
.L184:
	.word	sub_8045110
	.word	gSprites
	.word	sub_8045048
	.word	gSubspriteTables_820A6EC
	.word	gTasks
	.word	sub_8044E74
.L172:
	ldr	r0, [sp, #0xc]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldr	r1, .L186
.L181:
	str	r1, [r0]
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L187:
	.align	2, 0
.L186:
	.word	sub_8044F70
.Lfe23:
	.size	 sub_8044CA0,.Lfe23-sub_8044CA0
	.align	2, 0
	.type	 sub_8044E74,function
	.thumb_func
sub_8044E74:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L192
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r1, r2
	ldrh	r0, [r3, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x1e]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L189	@cond_branch
	ldrh	r0, [r3, #0x26]
	sub	r2, r0, #0x1
	strh	r2, [r3, #0x26]
	lsl	r0, r2, #0x10
	cmp	r0, #0
	blt	.L188	@cond_branch
	ldr	r1, .L192+0x4
	mov	r0, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	strh	r2, [r1]
.L189:
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L188	@cond_branch
	ldr	r0, .L192+0x8
	str	r0, [r3]
.L188:
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	gTasks
	.word	0x4000052
	.word	sub_8044ECC
.Lfe24:
	.size	 sub_8044E74,.Lfe24-sub_8044E74
	.align	2, 0
	.type	 sub_8044ECC,function
	.thumb_func
sub_8044ECC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r6, .L208
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r4, r0, #0x3
	add	r1, r4, r6
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r1, #0x26]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	bne	.L195	@cond_branch
	ldrb	r3, [r1, #0xa]
	add	r0, r6, #0
	add	r0, r0, #0xe
	add	r2, r4, r0
.L199:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L199	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r4, .L208+0x4
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r5, #0x1
.L204:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L204	@cond_branch
	b	.L206
.L209:
	.align	2, 0
.L208:
	.word	gTasks
	.word	gSprites
.L195:
	mov	r0, #0x3
	neg	r0, r0
	cmp	r2, r0
	bne	.L206	@cond_branch
	ldr	r0, .L210
	strh	r5, [r0]
	add	r0, r0, #0x2
	strh	r5, [r0]
	add	r0, r3, #0
	bl	DestroyTask
.L206:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L211:
	.align	2, 0
.L210:
	.word	0x4000050
.Lfe25:
	.size	 sub_8044ECC,.Lfe25-sub_8044ECC
	.align	2, 0
	.type	 sub_8044F70,function
	.thumb_func
sub_8044F70:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r7, .L228
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r6, r0, #0x3
	add	r3, r6, r7
	ldrh	r0, [r3, #0x26]
	sub	r2, r0, #0x1
	mov	r5, #0x0
	strh	r2, [r3, #0x26]
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	blt	.L213	@cond_branch
	ldr	r1, .L228+0x4
	mov	r0, #0x10
	sub	r0, r0, r2
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	strh	r2, [r1]
	b	.L214
.L229:
	.align	2, 0
.L228:
	.word	gTasks
	.word	0x4000052
.L213:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L215	@cond_branch
	ldrb	r3, [r3, #0xa]
	mov	r5, #0x0
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r2, r6, r0
.L219:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L219	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r4, .L230
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r5, #0x1
.L224:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L224	@cond_branch
	b	.L214
.L231:
	.align	2, 0
.L230:
	.word	gSprites
.L215:
	mov	r0, #0x3
	neg	r0, r0
	cmp	r1, r0
	bne	.L214	@cond_branch
	ldr	r0, .L232
	strh	r5, [r0]
	add	r0, r0, #0x2
	strh	r5, [r0]
	add	r0, r4, #0
	bl	DestroyTask
.L214:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L233:
	.align	2, 0
.L232:
	.word	0x4000050
.Lfe26:
	.size	 sub_8044F70,.Lfe26-sub_8044F70
	.align	2, 0
	.globl	sub_8045030
	.type	 sub_8045030,function
	.thumb_func
sub_8045030:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x24]
	mov	r3, #0x24
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L235	@cond_branch
	ldrh	r0, [r1, #0x2e]
	add	r0, r2, r0
	strh	r0, [r1, #0x24]
.L235:
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_8045030,.Lfe27-sub_8045030
	.align	2, 0
	.type	 sub_8045048,function
	.thumb_func
sub_8045048:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0
	add	r1, r1, #0x20
	strh	r1, [r2, #0x30]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L237	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x14
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	b	.L239
.L237:
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
.L239:
	strh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x30]
	mov	r0, #0xf
	and	r0, r0, r1
	strh	r0, [r2, #0x30]
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_8045048,.Lfe28-sub_8045048
	.align	2, 0
	.globl	sub_804507C
	.type	 sub_804507C,function
	.thumb_func
sub_804507C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L241	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L240
.L241:
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrh	r2, [r4, #0x34]
	add	r0, r2, #0
	add	r0, r0, #0x38
	lsl	r1, r0, #0x10
	lsr	r2, r1, #0x10
	ldr	r0, .L250
	and	r2, r2, r0
	strh	r2, [r4, #0x34]
	cmp	r3, #0
	beq	.L242	@cond_branch
	lsr	r0, r1, #0x14
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L244	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	b	.L244
.L251:
	.align	2, 0
.L250:
	.word	0xfff0
.L242:
	lsr	r1, r1, #0x14
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L244	@cond_branch
	strh	r3, [r4, #0x24]
.L244:
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L240	@cond_branch
	mov	r1, #0x3f
	cmp	r3, #0
	beq	.L247	@cond_branch
	mov	r1, #0xc0
.L247:
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L248	@cond_branch
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x74
	bl	PlaySE2WithPanning
	b	.L249
.L248:
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x73
	bl	PlaySE1WithPanning
.L249:
	ldr	r0, .L252
	str	r0, [r4, #0x1c]
.L240:
	pop	{r4}
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	SpriteCallbackDummy
.Lfe29:
	.size	 sub_804507C,.Lfe29-sub_804507C
	.align	2, 0
	.type	 sub_8045110,function
	.thumb_func
sub_8045110:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L255	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x30]
	b	.L254
.L255:
	ldrh	r0, [r3, #0x32]
	lsl	r0, r0, #0x18
	ldrh	r2, [r3, #0x34]
	add	r1, r2, #0
	add	r1, r1, #0x38
	lsl	r4, r1, #0x10
	lsr	r2, r4, #0x10
	ldr	r1, .L260
	and	r2, r2, r1
	strh	r2, [r3, #0x34]
	cmp	r0, #0
	beq	.L256	@cond_branch
	lsr	r0, r4, #0x14
	ldrh	r1, [r3, #0x24]
	add	r0, r0, r1
	b	.L259
.L261:
	.align	2, 0
.L260:
	.word	0xfff0
.L256:
	lsr	r1, r4, #0x14
	ldrh	r0, [r3, #0x24]
	sub	r0, r0, r1
.L259:
	strh	r0, [r3, #0x24]
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	mov	r2, #0x20
	ldrsh	r1, [r3, r2]
	add	r0, r0, r1
	add	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bls	.L254	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L262
	str	r0, [r3, #0x1c]
.L254:
	pop	{r4}
	pop	{r0}
	bx	r0
.L263:
	.align	2, 0
.L262:
	.word	SpriteCallbackDummy
.Lfe30:
	.size	 sub_8045110,.Lfe30-sub_8045110
	.align	2, 0
	.globl	sub_8045180
	.type	 sub_8045180,function
	.thumb_func
sub_8045180:
	ldrh	r2, [r0, #0x2e]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L265
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r2, [r1, #0x24]
	strh	r2, [r0, #0x24]
	ldrh	r1, [r1, #0x26]
	strh	r1, [r0, #0x26]
	bx	lr
.L266:
	.align	2, 0
.L265:
	.word	gSprites
.Lfe31:
	.size	 sub_8045180,.Lfe31-sub_8045180
	.align	2, 0
	.type	 sub_80451A0,function
	.thumb_func
sub_80451A0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L308
	ldr	r1, .L308+0x4
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r7, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	mov	r0, sp
	bl	StringGetEnd10
	add	r4, r4, #0x3
	add	r0, r4, #0
	mov	r1, sp
	bl	StringCopy
	add	r5, r0, #0
	mov	r1, #0xfc
	strb	r1, [r5]
	mov	r0, #0x3
	strb	r0, [r5, #0x1]
	strb	r0, [r5, #0x2]
	strb	r1, [r5, #0x3]
	mov	r0, #0x1
	strb	r0, [r5, #0x4]
	add	r5, r5, #0x5
	add	r0, r7, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r7, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r7, #0
	mov	r1, #0x3
	bl	GetMonData
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	mov	r1, sp
	bl	ShouldHideGenderIconForLanguage
	cmp	r0, #0
	beq	.L268	@cond_branch
	mov	r6, #0x64
.L268:
	cmp	r6, #0
	beq	.L271	@cond_branch
	cmp	r6, #0xfe
	beq	.L272	@cond_branch
	mov	r0, #0xb
	strb	r0, [r5]
	mov	r0, #0xff
	strb	r0, [r5, #0x1]
	add	r5, r5, #0x1
	b	.L269
.L309:
	.align	2, 0
.L308:
	.word	gDisplayedStringBattle
	.word	gUnknown_0820A8B0
.L271:
	mov	r0, #0xb
	strb	r0, [r5]
	mov	r0, #0xb5
	b	.L307
.L272:
	mov	r0, #0xa
	strb	r0, [r5]
	mov	r0, #0xb6
.L307:
	strb	r0, [r5, #0x1]
	mov	r0, #0xff
	strb	r0, [r5, #0x2]
	add	r5, r5, #0x2
.L269:
	mov	r0, #0xfc
	strb	r0, [r5]
	mov	r0, #0x13
	strb	r0, [r5, #0x1]
	mov	r0, #0x37
	strb	r0, [r5, #0x2]
	mov	r0, #0xff
	strb	r0, [r5, #0x3]
	ldr	r1, .L310
	mov	r0, r9
	lsl	r4, r0, #0x4
	add	r0, r4, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x7
	ldr	r2, .L310+0x4
	add	r5, r1, r2
	ldr	r0, .L310+0x8
	mov	r8, r0
	add	r0, r5, #0
	mov	r1, r8
	bl	sub_80034D4
	mov	r6, #0x0
	mov	r1, #0x6
	mov	sl, r1
	add	r0, r7, #0
	mov	r1, #0x3
	bl	GetMonData
	str	r4, [sp, #0xc]
	cmp	r0, #0x1
	bne	.L274	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L274	@cond_branch
	mov	r4, r8
	ldrb	r1, [r4]
	add	r0, r1, #0
	cmp	r0, #0xff
	beq	.L274	@cond_branch
	add	r7, r5, #0
.L277:
	cmp	r1, #0xfc
	bne	.L278	@cond_branch
	ldrb	r0, [r4, #0x1]
	bl	GetExtCtrlCodeLength
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	add	r4, r4, r0
	b	.L275
.L311:
	.align	2, 0
.L310:
	.word	gSprites
	.word	0x2000520
	.word	gDisplayedStringBattle
.L278:
	add	r0, r1, #0
	sub	r0, r0, #0x37
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bls	.L281	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x79
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bhi	.L280	@cond_branch
.L281:
	mov	r0, #0x2c
	b	.L282
.L280:
	add	r0, r1, #0
	sub	r0, r0, #0x4b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L284	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x65
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L283	@cond_branch
.L284:
	mov	r0, #0x2d
	b	.L282
.L283:
	mov	r0, #0x2b
.L282:
	bl	sub_8043CDC
	add	r1, r7, #0
	ldr	r2, .L312
	bl	CpuSet
	add	r7, r7, #0x40
	add	r6, r6, #0x1
	add	r4, r4, #0x1
.L275:
	ldrb	r1, [r4]
	add	r0, r1, #0
	cmp	r0, #0xff
	bne	.L277	@cond_branch
.L274:
	cmp	r6, sl
	bge	.L306	@cond_branch
	lsl	r0, r6, #0x6
	add	r4, r0, r5
	mov	r2, sl
	sub	r6, r2, r6
.L290:
	mov	r0, #0x2b
	bl	sub_8043CDC
	add	r1, r4, #0
	ldr	r2, .L312
	bl	CpuSet
	add	r4, r4, #0x40
	sub	r6, r6, #0x1
	cmp	r6, #0
	bne	.L290	@cond_branch
.L306:
	ldr	r1, .L312+0x4
	ldr	r0, [sp, #0xc]
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldrh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L292	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L292	@cond_branch
	ldr	r1, .L312+0x8
	mov	r0, sl
	cmp	r0, #0
	beq	.L298	@cond_branch
	mov	r8, r6
	mov	r9, r1
	ldr	r7, .L312
	mov	r6, sl
.L296:
	mov	r1, r9
	add	r1, r1, #0x4
	mov	r9, r1
	sub	r1, r1, #0x4
	ldmia	r1!, {r4}
	mov	r2, r8
	ldrh	r0, [r2, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	add	r2, r7, #0
	bl	CpuSet
	add	r5, r5, #0x20
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	add	r2, r7, #0
	bl	CpuSet
	add	r5, r5, #0x20
	sub	r6, r6, #0x1
	cmp	r6, #0
	bne	.L296	@cond_branch
	b	.L298
.L313:
	.align	2, 0
.L312:
	.word	0x4000008
	.word	gSprites
	.word	gUnknown_0820A8B4
.L292:
	ldr	r1, .L314
	ldr	r0, [sp, #0xc]
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	ldr	r1, .L314+0x4
	cmp	r0, #0
	bne	.L299	@cond_branch
	ldr	r1, .L314+0x8
.L299:
	mov	r2, sl
	cmp	r2, #0
	beq	.L298	@cond_branch
	mov	r8, r4
	mov	r9, r1
	ldr	r7, .L314+0xc
	mov	r6, sl
.L304:
	mov	r0, r9
	add	r0, r0, #0x4
	mov	r9, r0
	sub	r0, r0, #0x4
	ldmia	r0!, {r4}
	mov	r1, r8
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	add	r2, r7, #0
	bl	CpuSet
	add	r5, r5, #0x20
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r4, r4, r2
	add	r0, r5, #0
	add	r1, r4, #0
	add	r2, r7, #0
	bl	CpuSet
	add	r5, r5, #0x20
	sub	r6, r6, #0x1
	cmp	r6, #0
	bne	.L304	@cond_branch
.L298:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L315:
	.align	2, 0
.L314:
	.word	gSprites
	.word	gUnknown_0820A8DC
	.word	gUnknown_0820A904
	.word	0x4000008
.Lfe32:
	.size	 sub_80451A0,.Lfe32-sub_80451A0
	.align	2, 0
	.type	 sub_8045458,function
	.thumb_func
sub_8045458:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r0, .L323
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L316	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L316	@cond_branch
	ldr	r6, .L323+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r5, r0, r6
	ldrh	r0, [r5, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L316	@cond_branch
	ldr	r1, .L323+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L323+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L316	@cond_branch
	ldrh	r0, [r5, #0x38]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r7, #0
	beq	.L321	@cond_branch
	mov	r0, #0x46
	bl	sub_8043CDC
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r2, .L323+0x10
	add	r1, r1, r2
	ldr	r2, .L323+0x14
	bl	CpuSet
	b	.L316
.L324:
	.align	2, 0
.L323:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	0x6010000
	.word	0x4000008
.L321:
	str	r7, [sp]
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, .L325
	add	r1, r1, r0
	ldr	r2, .L325+0x4
	mov	r0, sp
	bl	CpuSet
.L316:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L326:
	.align	2, 0
.L325:
	.word	0x6010000
	.word	0x5000008
.Lfe33:
	.size	 sub_8045458,.Lfe33-sub_8045458
	.align	2, 0
	.type	 draw_status_ailment_maybe,function
	.thumb_func
draw_status_ailment_maybe:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L351
	mov	r2, r9
	lsl	r1, r2, #0x4
	add	r1, r1, r9
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r1, #0x38]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r0, r7, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L328	@cond_branch
	ldr	r1, .L351+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L351+0x8
	add	r0, r0, r1
	mov	r1, #0x37
	bl	GetMonData
	add	r4, r0, #0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	mov	r3, #0x12
	mov	r8, r3
	cmp	r0, #0
	bne	.L331	@cond_branch
	mov	r0, #0x1a
	mov	r8, r0
	b	.L331
.L352:
	.align	2, 0
.L351:
	.word	gSprites
	.word	gBattlePartyID
	.word	gPlayerParty
.L328:
	ldr	r1, .L353
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L353+0x4
	add	r0, r0, r1
	mov	r1, #0x37
	bl	GetMonData
	add	r4, r0, #0
	mov	r1, #0x11
	mov	r8, r1
.L331:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L332	@cond_branch
	mov	r0, #0x1b
	add	r1, r7, #0
	bl	sub_80457E8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8043CDC
	add	r6, r0, #0
	mov	r0, #0x2
	b	.L333
.L354:
	.align	2, 0
.L353:
	.word	gBattlePartyID
	.word	gEnemyParty
.L332:
	mov	r0, #0x88
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L334	@cond_branch
	mov	r0, #0x15
	add	r1, r7, #0
	bl	sub_80457E8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8043CDC
	add	r6, r0, #0
	mov	r0, #0x0
	b	.L333
.L334:
	mov	r0, #0x10
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L336	@cond_branch
	mov	r0, #0x21
	add	r1, r7, #0
	bl	sub_80457E8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8043CDC
	add	r6, r0, #0
	mov	r0, #0x4
	b	.L333
.L336:
	mov	r0, #0x20
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L338	@cond_branch
	mov	r0, #0x1e
	add	r1, r7, #0
	bl	sub_80457E8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8043CDC
	add	r6, r0, #0
	mov	r0, #0x3
	b	.L333
.L338:
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L340	@cond_branch
	mov	r0, #0x18
	add	r1, r7, #0
	bl	sub_80457E8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8043CDC
	add	r6, r0, #0
	mov	r0, #0x1
	b	.L333
.L340:
	mov	r0, #0x27
	bl	sub_8043CDC
	add	r6, r0, #0
	mov	r4, #0x0
	mov	r2, r9
	lsl	r0, r2, #0x4
	mov	r3, r8
	lsl	r3, r3, #0x10
	mov	r8, r3
	lsl	r7, r7, #0x2
	ldr	r1, .L355
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L345:
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	mov	r2, r8
	asr	r0, r2, #0x10
	add	r1, r1, r0
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r3, .L355+0x4
	add	r1, r1, r3
	add	r0, r6, #0
	ldr	r2, .L355+0x8
	bl	CpuSet
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L345	@cond_branch
	ldr	r0, .L355+0xc
	add	r0, r7, r0
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L347	@cond_branch
	mov	r0, #0x1
	bl	sub_8043CDC
	ldr	r2, .L355
	mov	r3, sl
	lsl	r1, r3, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L355+0x4
	add	r1, r1, r2
	ldr	r2, .L355+0x10
	bl	CpuSet
.L347:
	mov	r0, r9
	mov	r1, #0x1
	bl	sub_8045458
	b	.L327
.L356:
	.align	2, 0
.L355:
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
	.word	gSharedMem+0x17800
	.word	0x4000010
.L333:
	mov	r1, r9
	lsl	r5, r1, #0x4
	add	r5, r5, r9
	lsl	r5, r5, #0x2
	ldr	r2, .L357
	add	r5, r5, r2
	ldrb	r4, [r5, #0x5]
	lsr	r4, r4, #0x4
	lsl	r4, r4, #0x4
	add	r4, r4, #0xc
	add	r4, r4, r7
	lsl	r0, r0, #0x1
	ldr	r1, .L357+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	mov	r2, #0x2
	bl	FillPalette
	lsl	r4, r4, #0x1
	ldr	r0, .L357+0x8
	add	r0, r4, r0
	ldr	r1, .L357+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	CpuSet
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r8
	lsl	r1, r1, #0x5
	ldr	r2, .L357+0x10
	mov	r8, r2
	add	r1, r1, r8
	ldr	r2, .L357+0x14
	add	r0, r6, #0
	bl	CpuSet
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L349	@cond_branch
	add	r0, r7, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L348	@cond_branch
.L349:
	lsl	r0, r7, #0x2
	ldr	r1, .L357+0x18
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L348	@cond_branch
	mov	r0, #0x0
	bl	sub_8043CDC
	mov	r3, sl
	lsl	r4, r3, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	ldr	r1, .L357
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r8
	ldr	r5, .L357+0x1c
	add	r2, r5, #0
	bl	CpuSet
	mov	r0, #0x41
	bl	sub_8043CDC
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, #0x20
	add	r1, r1, r8
	add	r2, r5, #0
	bl	CpuSet
.L348:
	mov	r0, r9
	mov	r1, #0x0
	bl	sub_8045458
.L327:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L358:
	.align	2, 0
.L357:
	.word	gSprites
	.word	gBattleInterfaceStatusIcons_DynPal
	.word	gPlttBufferUnfaded+0x200
	.word	0x5000200
	.word	0x6010000
	.word	0x4000018
	.word	gSharedMem+0x17800
	.word	0x4000008
.Lfe34:
	.size	 draw_status_ailment_maybe,.Lfe34-draw_status_ailment_maybe
	.align	2, 0
	.type	 sub_80457E8,function
	.thumb_func
sub_80457E8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsr	r2, r0, #0x18
	add	r0, r2, #0
	sub	r0, r0, #0x15
	cmp	r0, #0xc
	bhi	.L360	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L398
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L399:
	.align	2, 0
.L398:
	.word	.L396
	.align	2, 0
	.align	2, 0
.L396:
	.word	.L361
	.word	.L360
	.word	.L360
	.word	.L368
	.word	.L360
	.word	.L360
	.word	.L375
	.word	.L360
	.word	.L360
	.word	.L382
	.word	.L360
	.word	.L360
	.word	.L389
.L361:
	mov	r2, #0x15
	cmp	r3, #0
	beq	.L360	@cond_branch
	mov	r2, #0x47
	cmp	r3, #0x1
	beq	.L360	@cond_branch
	mov	r2, #0x65
	cmp	r3, #0x2
	bne	.L360	@cond_branch
	mov	r2, #0x56
	b	.L360
.L368:
	mov	r2, #0x18
	cmp	r3, #0
	beq	.L360	@cond_branch
	mov	r2, #0x4a
	cmp	r3, #0x1
	beq	.L360	@cond_branch
	mov	r2, #0x68
	cmp	r3, #0x2
	bne	.L360	@cond_branch
	mov	r2, #0x59
	b	.L360
.L375:
	mov	r2, #0x1b
	cmp	r3, #0
	beq	.L360	@cond_branch
	mov	r2, #0x4d
	cmp	r3, #0x1
	beq	.L360	@cond_branch
	mov	r2, #0x6b
	cmp	r3, #0x2
	bne	.L360	@cond_branch
	mov	r2, #0x5c
	b	.L360
.L382:
	mov	r2, #0x1e
	cmp	r3, #0
	beq	.L360	@cond_branch
	mov	r2, #0x50
	cmp	r3, #0x1
	beq	.L360	@cond_branch
	mov	r2, #0x6e
	cmp	r3, #0x2
	bne	.L360	@cond_branch
	mov	r2, #0x5f
	b	.L360
.L389:
	mov	r2, #0x21
	cmp	r3, #0
	beq	.L360	@cond_branch
	mov	r2, #0x53
	cmp	r3, #0x1
	beq	.L360	@cond_branch
	mov	r2, #0x71
	cmp	r3, #0x2
	bne	.L360	@cond_branch
	mov	r2, #0x62
.L360:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 sub_80457E8,.Lfe35-sub_80457E8
	.align	2, 0
	.type	 sub_80458B0,function
	.thumb_func
sub_80458B0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L415
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x7
	ldr	r0, .L415+0x4
	add	r6, r1, r0
	mov	r1, #0x7
	mov	r8, r1
	ldr	r1, .L415+0x8
	add	r0, r6, #0
	bl	sub_80034D4
	mov	r4, #0x0
.L404:
	mov	r0, #0x2b
	bl	sub_8043CDC
	lsl	r1, r4, #0x6
	add	r1, r6, r1
	ldr	r2, .L415+0xc
	bl	CpuSet
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r8
	bcc	.L404	@cond_branch
	mov	r7, #0x3
	mov	r2, #0x3
	add	r2, r2, r8
	mov	r9, r2
	cmp	r7, r9
	bge	.L407	@cond_branch
	ldr	r1, .L415
	ldr	r0, .L415+0xc
	mov	sl, r0
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r8, r0
.L409:
	mov	r1, r8
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r5, r7, #0
	cmp	r7, #0
	bge	.L410	@cond_branch
	add	r5, r7, #0x7
.L410:
	asr	r5, r5, #0x3
	lsl	r4, r5, #0x3
	sub	r4, r7, r4
	add	r0, r0, r4
	lsl	r5, r5, #0x6
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L415+0x10
	add	r1, r0, r2
	add	r0, r6, #0
	mov	r2, sl
	bl	CpuSet
	add	r6, r6, #0x20
	mov	r1, r8
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r4, r4, #0x8
	add	r0, r0, r4
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L415+0x10
	add	r1, r0, r2
	add	r0, r6, #0
	mov	r2, sl
	bl	CpuSet
	add	r6, r6, #0x20
	add	r7, r7, #0x1
	cmp	r7, r9
	blt	.L409	@cond_branch
.L407:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L416:
	.align	2, 0
.L415:
	.word	gSprites
	.word	0x2000520
	.word	BattleText_SafariBalls
	.word	0x4000008
	.word	0x6010000
.Lfe36:
	.size	 sub_80458B0,.Lfe36-sub_80458B0
	.align	2, 0
	.type	 sub_8045998,function
	.thumb_func
sub_8045998:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L425
	mov	r8, r0
	ldr	r1, .L425+0x4
	bl	StringCopy
	add	r7, r0, #0
	ldr	r0, .L425+0x8
	ldrb	r1, [r0]
	add	r0, r7, #0
	mov	r2, #0xa
	mov	r3, #0x1
	bl	sub_8003504
	add	r7, r0, #0
	ldr	r1, .L425+0xc
	bl	StringAppend
	ldr	r0, .L425+0x10
	lsl	r5, r4, #0x4
	add	r5, r5, r4
	lsl	r5, r5, #0x2
	add	r5, r5, r0
	ldrh	r0, [r5, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x7
	ldr	r0, .L425+0x14
	add	r7, r4, r0
	mov	r6, #0x5
	add	r0, r7, #0
	mov	r1, r8
	bl	sub_80034D4
	ldr	r0, .L425+0x18
	add	r7, r4, r0
	mov	r4, #0x6
.L421:
	ldrh	r0, [r5, #0x4]
	lsl	r0, r0, #0x16
	lsr	r2, r0, #0x16
	add	r0, r4, #0
	cmp	r4, #0
	bge	.L422	@cond_branch
	add	r0, r4, #0x7
.L422:
	asr	r0, r0, #0x3
	lsl	r1, r0, #0x3
	sub	r1, r4, r1
	add	r1, r1, #0x18
	add	r1, r2, r1
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	ldr	r0, .L425+0x1c
	add	r1, r1, r0
	add	r0, r7, #0
	ldr	r2, .L425+0x20
	bl	CpuSet
	add	r7, r7, #0x40
	add	r4, r4, #0x1
	add	r0, r6, #0x6
	cmp	r4, r0
	blt	.L421	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L426:
	.align	2, 0
.L425:
	.word	gDisplayedStringBattle
	.word	BattleText_SafariBallsLeft
	.word	gNumSafariBalls
	.word	BattleText_HighlightRed
	.word	gSprites
	.word	0x2000520
	.word	0x2000540
	.word	0x6010000
	.word	0x4000008
.Lfe37:
	.size	 sub_8045998,.Lfe37-sub_8045998
	.align	2, 0
	.globl	sub_8045A5C
	.type	 sub_8045A5C,function
	.thumb_func
sub_8045A5C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	mov	r9, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r1, .L453
	lsl	r0, r0, #0x4
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4308
	b	.L428	@long jump
.LCB4308:
	cmp	r7, #0x3
	beq	.L430	@cond_branch
	cmp	r7, #0
	bne	.L429	@cond_branch
.L430:
	mov	r0, r9
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	sub_8043FC0
.L429:
	cmp	r7, #0x1
	bhi	.L431	@cond_branch
	mov	r0, r9
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, r8
	mov	r2, #0x0
	bl	sub_80440EC
.L431:
	cmp	r7, #0x2
	beq	.L433	@cond_branch
	cmp	r7, #0
	bne	.L432	@cond_branch
.L433:
	mov	r0, r9
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, r8
	mov	r2, #0x1
	bl	sub_80440EC
.L432:
	cmp	r7, #0x5
	beq	.L435	@cond_branch
	cmp	r7, #0
	bne	.L434	@cond_branch
.L435:
	mov	r0, #0x0
	bl	load_gfxc_health_bar
	mov	r0, r9
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	mov	r0, r9
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, sl
	mov	r1, r8
	add	r2, r4, #0
	bl	sub_8043D84
	mov	r0, sl
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8045C78
.L434:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	cmp	r0, #0
	bne	.L436	@cond_branch
	cmp	r7, #0x6
	beq	.L437	@cond_branch
	cmp	r7, #0
	bne	.L436	@cond_branch
.L437:
	mov	r0, #0x3
	bl	load_gfxc_health_bar
	mov	r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, r9
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r9
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r6, .L453+0x4
	lsl	r1, r4, #0x2
	ldr	r2, .L453+0x8
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, r6
	ldr	r2, [r4]
	sub	r2, r2, r1
	ldr	r0, [sp, #0x4]
	str	r0, [sp]
	mov	r0, sl
	mov	r1, r8
	bl	sub_8043D84
	mov	r0, sl
	mov	r1, r8
	mov	r2, #0x1
	mov	r3, #0x0
	bl	sub_8045C78
.L436:
	cmp	r7, #0x4
	beq	.L439	@cond_branch
	cmp	r7, #0
	bne	.L438	@cond_branch
.L439:
	mov	r0, r8
	mov	r1, r9
	bl	sub_80451A0
.L438:
	cmp	r7, #0x9
	beq	.L441	@cond_branch
	cmp	r7, #0
	bne	.L440	@cond_branch
.L441:
	mov	r0, r8
	bl	draw_status_ailment_maybe
.L440:
	cmp	r7, #0xa
	bne	.L442	@cond_branch
	mov	r0, r8
	bl	sub_80458B0
.L442:
	add	r0, r7, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L444	@cond_branch
	mov	r0, r8
	bl	sub_8045998
	b	.L444
.L454:
	.align	2, 0
.L453:
	.word	gSprites
	.word	gExperienceTables
	.word	gBaseStats
.L428:
	cmp	r7, #0x3
	beq	.L446	@cond_branch
	cmp	r7, #0
	bne	.L445	@cond_branch
.L446:
	mov	r0, r9
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	sub_8043FC0
.L445:
	cmp	r7, #0x5
	beq	.L448	@cond_branch
	cmp	r7, #0
	bne	.L447	@cond_branch
.L448:
	mov	r0, #0x0
	bl	load_gfxc_health_bar
	mov	r0, r9
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	mov	r0, r9
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, sl
	mov	r1, r8
	add	r2, r4, #0
	bl	sub_8043D84
	mov	r0, sl
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8045C78
.L447:
	cmp	r7, #0x4
	beq	.L450	@cond_branch
	cmp	r7, #0
	bne	.L449	@cond_branch
.L450:
	mov	r0, r8
	mov	r1, r9
	bl	sub_80451A0
.L449:
	cmp	r7, #0x9
	beq	.L452	@cond_branch
	cmp	r7, #0
	bne	.L444	@cond_branch
.L452:
	mov	r0, r8
	bl	draw_status_ailment_maybe
.L444:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 sub_8045A5C,.Lfe38-sub_8045A5C
	.align	2, 0
	.globl	sub_8045C78
	.type	 sub_8045C78,function
	.thumb_func
sub_8045C78:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	cmp	r2, #0
	bne	.L456	@cond_branch
	lsl	r5, r7, #0x2
	add	r3, r5, r7
	lsl	r3, r3, #0x2
	ldr	r4, .L463
	add	r2, r3, r4
	ldr	r0, [r2, #0x4]
	ldr	r1, [r2, #0x8]
	ldr	r2, [r2, #0xc]
	add	r4, r4, #0x10
	add	r3, r3, r4
	mov	r4, #0x6
	str	r4, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	bl	sub_8045F58
	add	r6, r0, #0
	add	r4, r5, #0
	b	.L457
.L464:
	.align	2, 0
.L463:
	.word	gSharedMem+0x17850
.L456:
	lsl	r4, r7, #0x2
	add	r0, r4, r7
	lsl	r0, r0, #0x2
	mov	sl, r0
	ldr	r6, .L465
	add	r6, r6, sl
	ldr	r0, [r6, #0x8]
	ldr	r1, [r6, #0xc]
	ldr	r2, [r6, #0x4]
	mov	r3, #0x8
	bl	GetScaledExpFraction
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L458	@cond_branch
	mov	r5, #0x1
.L458:
	ldr	r0, [r6, #0xc]
	mov	r8, r0
	add	r1, r5, #0
	bl	__divsi3
	cmp	r0, #0
	bge	.L459	@cond_branch
	neg	r0, r0
.L459:
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, [r6, #0x4]
	ldr	r1, [r6, #0x8]
	ldr	r3, .L465
	add	r3, r3, #0x10
	add	r3, r3, sl
	mov	r2, #0x8
	str	r2, [sp]
	str	r5, [sp, #0x4]
	mov	r2, r8
	bl	sub_8045F58
	add	r6, r0, #0
.L457:
	mov	r0, r9
	cmp	r0, #0x1
	beq	.L461	@cond_branch
	cmp	r0, #0
	bne	.L460	@cond_branch
	ldr	r0, .L465+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L460	@cond_branch
.L461:
	add	r0, r7, #0
	mov	r1, r9
	bl	sub_8045D58
.L460:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r6, r0
	bne	.L462	@cond_branch
	add	r0, r4, r7
	lsl	r0, r0, #0x2
	ldr	r1, .L465
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0, #0x10]
.L462:
	add	r0, r6, #0
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L466:
	.align	2, 0
.L465:
	.word	gSharedMem+0x17850
	.word	gSharedMem+0x17800
.Lfe39:
	.size	 sub_8045C78,.Lfe39-sub_8045C78
	.align	2, 0
	.type	 sub_8045D58,function
	.thumb_func
sub_8045D58:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L469	@cond_branch
	cmp	r1, #0x1
	beq	.L479	@cond_branch
	b	.L468
.L469:
	lsl	r5, r6, #0x2
	add	r3, r5, r6
	lsl	r3, r3, #0x2
	ldr	r4, .L495
	add	r2, r3, r4
	ldr	r0, [r2, #0x4]
	ldr	r1, [r2, #0x8]
	ldr	r2, [r2, #0xc]
	add	r4, r4, #0x10
	add	r3, r3, r4
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x6
	str	r4, [sp, #0x4]
	bl	sub_804602C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	mov	r8, r1
	add	r1, r5, #0
	cmp	r0, #0x18
	bhi	.L470	@cond_branch
	mov	r2, #0x38
	mov	r8, r2
	cmp	r0, #0x9
	bls	.L470	@cond_branch
	mov	r4, #0x2f
	mov	r8, r4
.L470:
	mov	r5, #0x0
	ldr	r7, .L495+0x4
	add	r0, r1, r6
	lsl	r6, r0, #0x2
.L475:
	ldr	r0, .L495
	add	r0, r6, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r5, #0x1
	bhi	.L476	@cond_branch
	mov	r0, r8
	bl	sub_8043CDC
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L495+0x8
	add	r1, r1, r2
	ldr	r2, .L495+0xc
	bl	CpuSet
	b	.L474
.L496:
	.align	2, 0
.L495:
	.word	gSharedMem+0x17850
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.L476:
	mov	r0, r8
	bl	sub_8043CDC
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r5, r1
	lsl	r1, r1, #0x5
	ldr	r4, .L497
	add	r1, r1, r4
	ldr	r2, .L497+0x4
	bl	CpuSet
.L474:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L475	@cond_branch
	b	.L468
.L498:
	.align	2, 0
.L497:
	.word	0x6010040
	.word	0x4000008
.L479:
	lsl	r5, r6, #0x2
	add	r3, r5, r6
	lsl	r3, r3, #0x2
	ldr	r4, .L499
	add	r2, r3, r4
	ldr	r0, [r2, #0x4]
	ldr	r1, [r2, #0x8]
	ldr	r2, [r2, #0xc]
	add	r4, r4, #0x10
	add	r3, r3, r4
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x8
	str	r4, [sp, #0x4]
	bl	sub_804602C
	ldr	r1, .L499+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L499+0x8
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r5, #0
	cmp	r0, #0x64
	bne	.L480	@cond_branch
	mov	r5, #0x0
	mov	r2, #0x0
.L484:
	mov	r0, sp
	add	r0, r0, r5
	add	r0, r0, #0x8
	strb	r2, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L484	@cond_branch
.L480:
	mov	r5, #0x0
	ldr	r7, .L499+0xc
	add	r0, r1, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L499
	add	r4, r0, r1
.L489:
	cmp	r5, #0x3
	bhi	.L490	@cond_branch
	mov	r0, #0xc
	bl	sub_8043CDC
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0
	add	r2, r2, #0x24
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L499+0x10
	add	r1, r1, r2
	ldr	r2, .L499+0x14
	bl	CpuSet
	b	.L488
.L500:
	.align	2, 0
.L499:
	.word	gSharedMem+0x17850
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.L490:
	mov	r0, #0xc
	bl	sub_8043CDC
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r5, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L501
	add	r1, r1, r2
	ldr	r2, .L501+0x4
	bl	CpuSet
.L488:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L489	@cond_branch
.L468:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L502:
	.align	2, 0
.L501:
	.word	0x6010b80
	.word	0x4000008
.Lfe40:
	.size	 sub_8045D58,.Lfe40-sub_8045D58
	.align	2, 0
	.type	 sub_8045F58,function
	.thumb_func
sub_8045F58:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r4, r1, #0
	mov	r8, r2
	add	r5, r3, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, [sp, #0x1c]
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r1, r1, #0x1b
	lsr	r2, r1, #0x18
	ldr	r1, [r5]
	ldr	r0, .L528
	cmp	r1, r0
	bne	.L504	@cond_branch
	cmp	r7, r2
	bge	.L505	@cond_branch
	lsl	r0, r4, #0x8
	str	r0, [r5]
	b	.L504
.L529:
	.align	2, 0
.L528:
	.word	0xffff8000
.L505:
	str	r4, [r5]
.L504:
	mov	r0, r8
	sub	r4, r4, r0
	cmp	r4, #0
	bge	.L507	@cond_branch
	mov	r4, #0x0
	b	.L508
.L507:
	cmp	r4, r7
	ble	.L508	@cond_branch
	add	r4, r7, #0
.L508:
	cmp	r7, r2
	bge	.L510	@cond_branch
	ldr	r0, [r5]
	asr	r1, r0, #0x8
	add	r6, r0, #0
	cmp	r4, r1
	bne	.L512	@cond_branch
	mov	r0, #0xff
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L512	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L525
.L510:
	ldr	r6, [r5]
	cmp	r4, r6
	bne	.L512	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L525
.L512:
	cmp	r7, r2
	bge	.L514	@cond_branch
	lsl	r0, r7, #0x8
	add	r1, r2, #0
	bl	__divsi3
	mov	r1, r8
	cmp	r1, #0
	bge	.L515	@cond_branch
	add	r0, r6, r0
	str	r0, [r5]
	asr	r2, r0, #0x8
	cmp	r2, r4
	blt	.L520	@cond_branch
	b	.L526
.L515:
	sub	r0, r6, r0
	str	r0, [r5]
	asr	r2, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	ble	.L518	@cond_branch
	add	r2, r2, #0x1
.L518:
	cmp	r2, r4
	bgt	.L520	@cond_branch
.L526:
	lsl	r0, r4, #0x8
	str	r0, [r5]
	add	r2, r4, #0
	b	.L520
.L514:
	mov	r0, r8
	cmp	r0, #0
	bge	.L521	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, r3
	str	r0, [r5]
	cmp	r0, r4
	ble	.L524	@cond_branch
	b	.L527
.L521:
	ldr	r0, [r5]
	sub	r0, r0, r3
	str	r0, [r5]
	cmp	r0, r4
	bge	.L524	@cond_branch
.L527:
	str	r4, [r5]
.L524:
	ldr	r2, [r5]
.L520:
	add	r0, r2, #0
.L525:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 sub_8045F58,.Lfe41-sub_8045F58
	.align	2, 0
	.type	 sub_804602C,function
	.thumb_func
sub_804602C:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	ip, r3
	ldr	r7, [sp, #0x14]
	ldr	r0, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	sub	r5, r1, r2
	cmp	r5, #0
	bge	.L531	@cond_branch
	mov	r5, #0x0
	b	.L532
.L531:
	cmp	r5, r4
	ble	.L532	@cond_branch
	add	r5, r4, #0
.L532:
	lsl	r0, r6, #0x1b
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r6
	bcs	.L535	@cond_branch
	mov	r2, #0x0
.L537:
	add	r0, r7, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcc	.L537	@cond_branch
.L535:
	cmp	r4, r3
	bge	.L539	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mul	r0, r0, r3
	add	r1, r4, #0
	bl	__divsi3
	asr	r0, r0, #0x8
	b	.L550
.L539:
	mov	r1, ip
	ldr	r0, [r1]
	mul	r0, r0, r3
	add	r1, r4, #0
	bl	__divsi3
.L550:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	cmp	r3, #0
	bne	.L541	@cond_branch
	cmp	r5, #0
	ble	.L541	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7]
	mov	r3, #0x1
	b	.L542
.L541:
	mov	r1, #0x0
	mov	r4, #0x8
.L543:
	cmp	r1, r6
	bcs	.L542	@cond_branch
	cmp	r2, #0x7
	bls	.L547	@cond_branch
	add	r0, r7, r1
	strb	r4, [r0]
	add	r0, r2, #0
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	b	.L543
.L547:
	add	r0, r7, r1
	strb	r2, [r0]
.L542:
	add	r0, r3, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 sub_804602C,.Lfe42-sub_804602C
	.align	2, 0
	.globl	sub_80460C8
	.type	 sub_80460C8,function
	.thumb_func
sub_80460C8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r2, #0
	mov	r8, r3
	ldr	r0, [r5]
	ldr	r1, [r5, #0x4]
	ldr	r2, [r5, #0x8]
	mov	r3, #0x6
	str	r3, [sp]
	mov	r3, #0x1
	str	r3, [sp, #0x4]
	add	r3, r6, #0
	bl	sub_8045F58
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_8046128
	ldr	r0, [r5]
	cmp	r0, #0x2f
	bgt	.L552	@cond_branch
	ldr	r0, [r6]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	b	.L553
.L552:
	ldrh	r1, [r6]
.L553:
	mov	r2, #0x0
	ldrsh	r0, [r5, r2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, r8
	bl	do_nothing
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 sub_80460C8,.Lfe43-sub_80460C8
	.align	2, 0
	.type	 sub_8046128,function
	.thumb_func
sub_8046128:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xffffffe4
	add	r5, r0, #0
	add	r3, r1, #0
	mov	r8, r2
	ldr	r0, [r5]
	ldr	r1, [r5, #0x4]
	ldr	r2, [r5, #0x8]
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x6
	str	r4, [sp, #0x4]
	bl	sub_804602C
	mov	r3, #0x0
	add	r7, sp, #0x10
	mov	ip, r7
	ldrb	r0, [r5, #0xc]
	lsl	r6, r0, #0x1b
	ldr	r4, [r5, #0x10]
.L558:
	lsl	r2, r3, #0x1
	add	r2, r2, ip
	lsr	r1, r6, #0xf
	mov	r0, sp
	add	r0, r0, r3
	add	r0, r0, #0x8
	ldrb	r0, [r0]
	add	r0, r4, r0
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x5
	bls	.L558	@cond_branch
	add	r0, r7, #0
	mov	r1, r8
	mov	r2, #0x6
	bl	CpuSet
	add	sp, sp, #0x1c
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 sub_8046128,.Lfe44-sub_8046128
	.align	2, 0
	.type	 GetScaledExpFraction,function
	.thumb_func
GetScaledExpFraction:
	push	{r4, r5, r6, r7, lr}
	add	r6, r2, #0
	lsl	r3, r3, #0x1b
	lsr	r7, r3, #0x18
	sub	r5, r0, r1
	cmp	r5, #0
	bge	.L561	@cond_branch
	mov	r5, #0x0
	b	.L562
.L561:
	cmp	r5, r6
	ble	.L562	@cond_branch
	add	r5, r6, #0
.L562:
	mul	r0, r0, r7
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r5
	mul	r0, r0, r7
	add	r1, r6, #0
	bl	__divsi3
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	sub	r0, r4, r0
	cmp	r0, #0
	bge	.L564	@cond_branch
	neg	r0, r0
.L564:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 GetScaledExpFraction,.Lfe45-GetScaledExpFraction
	.align	2, 0
	.globl	GetScaledHPFraction
	.type	 GetScaledHPFraction,function
	.thumb_func
GetScaledHPFraction:
	push	{r4, lr}
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	mov	r0, r4
	mul	r0, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L567	@cond_branch
	cmp	r4, #0
	ble	.L567	@cond_branch
	mov	r0, #0x1
.L567:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 GetScaledHPFraction,.Lfe46-GetScaledHPFraction
	.align	2, 0
	.globl	GetHPBarLevel
	.type	 GetHPBarLevel,function
	.thumb_func
GetHPBarLevel:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bne	.L569	@cond_branch
	mov	r0, #0x4
	b	.L570
.L569:
	mov	r2, #0x30
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x3
	cmp	r1, #0x18
	bhi	.L570	@cond_branch
	mov	r0, #0x2
	cmp	r1, #0x9
	bhi	.L570	@cond_branch
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L570:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetHPBarLevel,.Lfe47-GetHPBarLevel
.text
	.align	2, 0
