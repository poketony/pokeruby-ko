@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	sub_80A7E7C
	.type	 sub_80A7E7C,function
	.thumb_func
sub_80A7E7C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L4
	ldrb	r0, [r4]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L3	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L2
.L5:
	.align	2, 0
.L4:
	.word	gBattleAnimArgs
.L3:
	ldr	r1, .L6
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r4, #0x2]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x26]
	ldr	r1, .L6+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0x8]
	ldrh	r1, [r4, #0x6]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r4, #0x8]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r4, #0x8]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r4, #0x2]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x12]
	ldr	r1, .L6+0x8
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
.L2:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gSprites
	.word	gTasks
	.word	sub_80A7EF0
.Lfe1:
	.size	 sub_80A7E7C,.Lfe1-sub_80A7E7C
	.align	2, 0
	.type	 sub_80A7EF0,function
	.thumb_func
sub_80A7EF0:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L17
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r0, [r3, #0xe]
	mov	r2, #0xe
	ldrsh	r5, [r3, r2]
	add	r7, r1, #0
	cmp	r5, #0
	bne	.L9	@cond_branch
	ldr	r2, .L17+0x4
	mov	r6, #0x8
	ldrsh	r1, [r3, r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	mov	r6, #0x24
	ldrsh	r0, [r1, r6]
	add	r6, r2, #0
	cmp	r0, #0
	bne	.L10	@cond_branch
	ldrh	r0, [r3, #0x10]
	strh	r0, [r1, #0x24]
	b	.L11
.L18:
	.align	2, 0
.L17:
	.word	gTasks
	.word	gSprites
.L10:
	strh	r5, [r1, #0x24]
.L11:
	lsl	r2, r4, #0x2
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r3, r0, r7
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r6
	mov	r5, #0x26
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	bne	.L12	@cond_branch
	ldrh	r0, [r3, #0x12]
	b	.L16
.L12:
	mov	r0, #0x0
.L16:
	strh	r0, [r1, #0x26]
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	ldrh	r0, [r2, #0xc]
	strh	r0, [r2, #0xe]
	ldrh	r0, [r2, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L8	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r3, [r0, #0x24]
	mov	r5, #0x8
	ldrsh	r1, [r2, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r3, [r0, #0x26]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L8
.L9:
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
.L8:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_80A7EF0,.Lfe2-sub_80A7EF0
	.align	2, 0
	.globl	sub_80A7FA0
	.type	 sub_80A7FA0,function
	.thumb_func
sub_80A7FA0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L38
	ldrh	r0, [r2]
	mov	r3, #0x0
	ldrsh	r1, [r2, r3]
	cmp	r1, #0x3
	bgt	.L20	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L22	@cond_branch
	b	.L35
.L39:
	.align	2, 0
.L38:
	.word	gBattleAnimArgs
.L20:
	cmp	r1, #0x8
	beq	.L23	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x5
	beq	.L26	@cond_branch
	cmp	r0, #0x5
	bgt	.L31	@cond_branch
	cmp	r0, #0x4
	beq	.L25	@cond_branch
	b	.L29
.L31:
	cmp	r0, #0x6
	beq	.L27	@cond_branch
	b	.L29
.L25:
	mov	r0, #0x0
	b	.L36
.L26:
	mov	r0, #0x2
	b	.L36
.L27:
	mov	r0, #0x1
	b	.L36
.L29:
	mov	r0, #0x3
.L36:
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L32	@cond_branch
	mov	r6, #0x1
.L32:
	ldr	r0, .L40
	add	r0, r4, r0
	b	.L37
.L41:
	.align	2, 0
.L40:
	.word	gObjectBankIDs
.L23:
	ldr	r1, .L42
	ldr	r0, .L42+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
.L37:
	ldrb	r3, [r0]
.L22:
	cmp	r6, #0
	beq	.L34	@cond_branch
.L35:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L19
.L43:
	.align	2, 0
.L42:
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
.L34:
	ldr	r1, .L44
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r2, .L44+0x4
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x26]
	ldr	r1, .L44+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r3, [r0, #0x8]
	ldrh	r1, [r2, #0x6]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r2, #0x8]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r2, #0x8]
	strh	r1, [r0, #0xe]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x10]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x12]
	ldr	r1, .L44+0xc
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
.L19:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gSprites
	.word	gBattleAnimArgs
	.word	gTasks
	.word	sub_80A808C
.Lfe3:
	.size	 sub_80A7FA0,.Lfe3-sub_80A7FA0
	.align	2, 0
	.type	 sub_80A808C,function
	.thumb_func
sub_80A808C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L54
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r2, [r3, #0xe]
	mov	r4, #0xe
	ldrsh	r0, [r3, r4]
	mov	ip, r1
	cmp	r0, #0
	bne	.L47	@cond_branch
	ldr	r2, .L54+0x4
	mov	r7, #0x8
	ldrsh	r1, [r3, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	ldrh	r5, [r3, #0x10]
	mov	r7, #0x10
	ldrsh	r0, [r3, r7]
	add	r7, r2, #0
	cmp	r1, r0
	bne	.L48	@cond_branch
	neg	r0, r5
	strh	r0, [r4, #0x24]
	b	.L49
.L55:
	.align	2, 0
.L54:
	.word	gTasks
	.word	gSprites
.L48:
	strh	r5, [r4, #0x24]
.L49:
	lsl	r3, r6, #0x2
	add	r1, r3, r6
	lsl	r1, r1, #0x3
	add	r1, r1, ip
	mov	r0, #0x8
	ldrsh	r2, [r1, r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r7
	mov	r0, #0x26
	ldrsh	r2, [r4, r0]
	mov	r8, r2
	ldrh	r5, [r1, #0x12]
	mov	r2, #0x12
	ldrsh	r0, [r1, r2]
	cmp	r8, r0
	bne	.L50	@cond_branch
	neg	r0, r5
	strh	r0, [r4, #0x26]
	b	.L51
.L50:
	strh	r5, [r4, #0x26]
.L51:
	add	r0, r3, r6
	lsl	r0, r0, #0x3
	mov	r4, ip
	add	r3, r0, r4
	ldrh	r0, [r3, #0xc]
	strh	r0, [r3, #0xe]
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L46	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x24]
	mov	r4, #0x8
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L46
.L47:
	sub	r0, r2, #0x1
	strh	r0, [r3, #0xe]
.L46:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_80A808C,.Lfe4-sub_80A808C
	.align	2, 0
	.globl	sub_80A8154
	.type	 sub_80A8154,function
	.thumb_func
sub_80A8154:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L58
	ldrb	r0, [r4]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L57	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L56
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimArgs
.L57:
	ldr	r0, .L60
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x2]
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	mov	r2, #0x0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x4]
	ldrh	r6, [r1, #0x26]
	add	r0, r0, r6
	strh	r0, [r1, #0x26]
	ldr	r0, .L60+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r3, [r1, #0x8]
	strh	r2, [r1, #0xa]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0xe]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r1, #0x10]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	mov	r6, #0x4
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0x14]
	ldr	r2, .L60+0x8
	str	r2, [r1]
	add	r0, r5, #0
	bl	_call_via_r2
.L56:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gSprites
	.word	gTasks
	.word	sub_80A81D8
.Lfe5:
	.size	 sub_80A8154,.Lfe5-sub_80A8154
	.align	2, 0
	.type	 sub_80A81D8,function
	.thumb_func
sub_80A81D8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L70
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.LCB590
	b	.L63	@long jump
.LCB590:
	ldrh	r1, [r4, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r2, .L70+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r3, [r0, #0x24]
	add	r1, r1, r3
	strh	r1, [r0, #0x24]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x14]
	ldrh	r3, [r0, #0x26]
	add	r1, r1, r3
	strh	r1, [r0, #0x26]
	add	r3, r2, #0
	b	.L65
.L71:
	.align	2, 0
.L70:
	.word	gTasks
	.word	gSprites
.L64:
	ldr	r3, .L72
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x26]
	ldrh	r2, [r4, #0x14]
	sub	r1, r1, r2
	strh	r1, [r0, #0x26]
.L65:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r6
	ldrh	r0, [r4, #0x10]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r4, #0xa]
	add	r2, r0, #0x1
	strh	r2, [r4, #0xa]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0xc
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	blt	.L62	@cond_branch
	mov	r0, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L67	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	ldrh	r6, [r1, #0x24]
	add	r0, r0, r6
	strh	r0, [r1, #0x24]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	ldrh	r3, [r1, #0x26]
	add	r0, r0, r3
	strh	r0, [r1, #0x26]
	b	.L68
.L73:
	.align	2, 0
.L72:
	.word	gSprites
.L67:
	mov	r6, #0x8
	ldrsh	r0, [r4, r6]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	mov	r0, #0x12
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	mov	r3, #0x14
	ldrsh	r1, [r4, r3]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r2, #0x26]
	sub	r0, r0, r1
	strh	r0, [r2, #0x26]
.L68:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L62
.L63:
	sub	r0, r2, #0x1
	strh	r0, [r4, #0xe]
.L62:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_80A81D8,.Lfe6-sub_80A81D8
	.align	2, 0
	.globl	sub_80A8314
	.type	 sub_80A8314,function
	.thumb_func
sub_80A8314:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L75
	ldrb	r0, [r5]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L75+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r5, #0x2]
	strh	r2, [r1, #0x24]
	ldr	r2, .L75+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r0, [r1, #0x8]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r1, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r1, #0x10]
	ldr	r2, .L75+0xc
	str	r2, [r1]
	add	r0, r4, #0
	bl	_call_via_r2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gTasks
	.word	sub_80A8374
.Lfe7:
	.size	 sub_80A8314,.Lfe7-sub_80A8314
	.align	2, 0
	.type	 sub_80A8374,function
	.thumb_func
sub_80A8374:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L81
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrb	r5, [r3, #0x8]
	ldrh	r4, [r3, #0xa]
	ldrh	r1, [r3, #0x18]
	add	r0, r1, #0x1
	strh	r0, [r3, #0x18]
	mov	r7, #0xc
	ldrsh	r0, [r3, r7]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	ip, r2
	ldr	r7, .L81+0x4
	cmp	r0, r1
	bne	.L78	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x18]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r0, r7
	ldrh	r3, [r1, #0x24]
	mov	r0, #0x24
	ldrsh	r2, [r1, r0]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	cmp	r2, r0
	bne	.L79	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L79:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
.L78:
	lsl	r2, r6, #0x2
	add	r2, r2, r6
	lsl	r2, r2, #0x3
	add	r2, r2, ip
	strh	r4, [r2, #0xa]
	ldrh	r1, [r2, #0xe]
	ldrh	r0, [r2, #0x1a]
	add	r1, r1, r0
	strh	r1, [r2, #0x1a]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r0, #0x26]
	ldrh	r0, [r2, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L80	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L80:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gTasks
	.word	gSprites
.Lfe8:
	.size	 sub_80A8374,.Lfe8-sub_80A8374
	.align	2, 0
	.globl	sub_80A8408
	.type	 sub_80A8408,function
	.thumb_func
sub_80A8408:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x1
	ldr	r4, .L90
	ldrb	r0, [r4]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	ble	.L84	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4, #0x8]
.L84:
	mov	r1, #0x0
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r3, r4, #0
	ldr	r2, .L90+0x4
	mov	ip, r2
	lsl	r4, r5, #0x2
	ldr	r2, .L90+0x8
	mov	r8, r2
	cmp	r1, r0
	bge	.L86	@cond_branch
	add	r2, r0, #0
.L88:
	lsl	r0, r6, #0x19
	lsr	r6, r0, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	blt	.L88	@cond_branch
.L86:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	strh	r7, [r0, #0x8]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0xe]
	strh	r6, [r0, #0x10]
	mov	r1, r8
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	sub_80A8488
.Lfe9:
	.size	 sub_80A8408,.Lfe9-sub_80A8408
	.align	2, 0
	.type	 sub_80A8488,function
	.thumb_func
sub_80A8488:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L95
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrb	r4, [r5, #0x8]
	mov	r1, #0x12
	ldrsh	r0, [r5, r1]
	mov	r2, #0xa
	ldrsh	r1, [r5, r2]
	bl	Sin
	ldr	r2, .L95+0x4
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r4, r1, r2
	strh	r0, [r4, #0x24]
	mov	r1, #0x12
	ldrsh	r0, [r5, r1]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r5, #0xc]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r5, #0x10]
	ldrh	r1, [r5, #0x12]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x12]
	cmp	r0, #0
	bne	.L93	@cond_branch
	ldrh	r0, [r5, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0xe]
.L93:
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	bne	.L94	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L94:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	gTasks
	.word	gSprites
.Lfe10:
	.size	 sub_80A8488,.Lfe10-sub_80A8488
	.align	2, 0
	.globl	sub_80A8500
	.type	 sub_80A8500,function
	.thumb_func
sub_80A8500:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L99
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L98	@cond_branch
	ldr	r1, .L99+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L98:
	add	r0, r4, #0
	bl	sub_80A8408
	pop	{r4}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.Lfe11:
	.size	 sub_80A8500,.Lfe11-sub_80A8500
	.align	2, 0
	.globl	sub_80A8530
	.type	 sub_80A8530,function
	.thumb_func
sub_80A8530:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L105
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L102	@cond_branch
	ldr	r1, .L105+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L102:
	ldr	r1, .L107
	ldrh	r0, [r1, #0x2]
.L104:
	strh	r0, [r4, #0x30]
	ldrh	r2, [r1]
	mov	r0, #0x0
	strh	r2, [r4, #0x2e]
	strh	r0, [r4, #0x32]
	ldr	r1, .L107+0x4
	ldr	r0, .L107+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r1, .L107+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L107+0x10
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gBattleAnimArgs
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
	.word	sub_80A85A4
	.word	sub_8078458
.Lfe12:
	.size	 sub_80A8530,.Lfe12-sub_80A8530
	.align	2, 0
	.type	 sub_80A85A4,function
	.thumb_func
sub_80A85A4:
	push	{lr}
	ldrh	r1, [r0, #0x36]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x30]
	neg	r1, r1
	strh	r1, [r0, #0x30]
	ldr	r1, .L110
	str	r1, [r0, #0x1c]
	ldr	r1, .L110+0x4
	bl	StoreSpriteCallbackInData
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	sub_8078458
	.word	move_anim_8072740
.Lfe13:
	.size	 sub_80A85A4,.Lfe13-sub_80A85A4
	.align	2, 0
	.globl	sub_80A85C8
	.type	 sub_80A85C8,function
	.thumb_func
sub_80A85C8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r5, .L113
	ldrb	r0, [r5, #0x4]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r5]
	mov	r1, #0x0
	strh	r2, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	ldrh	r1, [r5, #0x2]
	strh	r1, [r4, #0x32]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r1, .L113+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L113+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gBattleAnimArgs
	.word	sub_80A8614
	.word	sub_8078458
.Lfe14:
	.size	 sub_80A85C8,.Lfe14-sub_80A85C8
	.align	2, 0
	.globl	sub_80A8614
	.type	 sub_80A8614,function
	.thumb_func
sub_80A8614:
	push	{lr}
	ldrh	r1, [r0, #0x36]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x32]
	neg	r1, r1
	strh	r1, [r0, #0x32]
	ldr	r1, .L116
	str	r1, [r0, #0x1c]
	ldr	r1, .L116+0x4
	bl	StoreSpriteCallbackInData
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	sub_8078458
	.word	move_anim_8072740
.Lfe15:
	.size	 sub_80A8614,.Lfe15-sub_80A8614
	.align	2, 0
	.globl	sub_80A8638
	.type	 sub_80A8638,function
	.thumb_func
sub_80A8638:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	ldr	r0, .L125
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L119	@cond_branch
	ldr	r1, .L125+0x4
	ldr	r0, .L125+0x8
	b	.L124
.L126:
	.align	2, 0
.L125:
	.word	gBattleAnimArgs
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
.L119:
	ldr	r1, .L127
	ldr	r0, .L127+0x4
.L124:
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r7, [r0]
	ldr	r5, .L127+0x8
	ldrh	r0, [r5, #0x4]
	mov	r3, #0x0
	strh	r0, [r6, #0x2e]
	ldr	r0, .L127+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x30]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r6, #0x34]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	str	r3, [sp]
	bl	sub_8078A5C
	ldr	r3, [sp]
	strh	r3, [r6, #0x34]
	strh	r3, [r6, #0x36]
	ldrh	r0, [r4, #0x24]
	strh	r0, [r6, #0x38]
	ldrh	r0, [r4, #0x26]
	strh	r0, [r6, #0x3a]
	add	r2, r6, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L121	@cond_branch
	strh	r3, [r6, #0x32]
	b	.L122
.L128:
	.align	2, 0
.L127:
	.word	gObjectBankIDs
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	gSprites
.L121:
	cmp	r0, #0x2
	bne	.L122	@cond_branch
	strh	r3, [r6, #0x30]
.L122:
	ldr	r0, .L129
	ldrh	r1, [r0, #0x2]
	lsl	r0, r7, #0x8
	orr	r0, r0, r1
	strh	r0, [r6, #0x3c]
	ldr	r0, .L129+0x4
	str	r0, [r6, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gBattleAnimArgs
	.word	sub_80A86F4
.Lfe16:
	.size	 sub_80A8638,.Lfe16-sub_80A8638
	.align	2, 0
	.type	 sub_80A86F4,function
	.thumb_func
sub_80A86F4:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x3c]
	lsl	r1, r0, #0x18
	lsr	r4, r1, #0x18
	add	r5, r4, #0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L137
	add	r3, r1, r0
	ldrh	r0, [r2, #0x2e]
	mov	r6, #0x2e
	ldrsh	r1, [r2, r6]
	cmp	r1, #0
	bne	.L132	@cond_branch
	cmp	r4, #0x1
	bhi	.L133	@cond_branch
	strh	r1, [r3, #0x24]
.L133:
	cmp	r5, #0x2
	beq	.L135	@cond_branch
	cmp	r5, #0
	bne	.L134	@cond_branch
.L135:
	strh	r1, [r3, #0x26]
.L134:
	add	r0, r2, #0
	bl	move_anim_8072740
	b	.L136
.L138:
	.align	2, 0
.L137:
	.word	gSprites
.L132:
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x30]
	ldrh	r0, [r2, #0x34]
	add	r1, r1, r0
	strh	r1, [r2, #0x34]
	ldrh	r0, [r2, #0x32]
	ldrh	r4, [r2, #0x36]
	add	r0, r0, r4
	strh	r0, [r2, #0x36]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r6, [r2, #0x38]
	add	r1, r1, r6
	strh	r1, [r3, #0x24]
	ldrh	r0, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r2, #0x3a]
	add	r0, r0, r2
	strh	r0, [r3, #0x26]
.L136:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 sub_80A86F4,.Lfe17-sub_80A86F4
	.align	2, 0
	.globl	sub_80A8764
	.type	 sub_80A8764,function
	.thumb_func
sub_80A8764:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L145
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L140	@cond_branch
	ldr	r0, .L145+0x4
	b	.L144
.L146:
	.align	2, 0
.L145:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L140:
	ldr	r0, .L147
.L144:
	ldrb	r2, [r0]
	ldr	r0, .L147+0x4
	add	r0, r2, r0
	ldrb	r6, [r0]
	add	r0, r2, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L142	@cond_branch
	ldr	r1, .L147+0x8
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L142	@cond_branch
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L142:
	ldr	r2, .L147+0x8
	ldrh	r0, [r2, #0x8]
	mov	r4, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L147+0xc
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r2, #0x2]
	ldrh	r3, [r1, #0x20]
	add	r0, r0, r3
	strh	r0, [r5, #0x32]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r5, #0x34]
	ldrh	r0, [r2, #0x4]
	ldrh	r1, [r1, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	sub_8078A5C
	strh	r4, [r5, #0x34]
	strh	r4, [r5, #0x36]
	strh	r6, [r5, #0x38]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L147+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L147+0x14
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gBattleAnimBankTarget
	.word	gObjectBankIDs
	.word	gBattleAnimArgs
	.word	gSprites
	.word	move_anim_8072740
	.word	sub_80784A8
.Lfe18:
	.size	 sub_80A8764,.Lfe18-sub_80A8764
	.align	2, 0
	.globl	sub_80A8818
	.type	 sub_80A8818,function
	.thumb_func
sub_80A8818:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r2, r6, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L157
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldr	r0, .L157+0x4
	b	.L156
.L158:
	.align	2, 0
.L157:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
.L150:
	ldr	r0, .L159
.L156:
	ldrb	r1, [r0]
	ldr	r0, .L159+0x4
	add	r0, r1, r0
	ldrb	r7, [r0]
	add	r0, r1, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldr	r1, .L159+0x8
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L152	@cond_branch
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L152:
	ldr	r5, .L159+0x8
	ldrh	r0, [r5, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r0, .L159+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x30]
	ldrh	r1, [r5, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r6, #0x34]
	ldrh	r1, [r5, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	bl	sub_8078A5C
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x8
	strh	r0, [r6, #0x34]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x8
	strh	r0, [r6, #0x36]
	strh	r7, [r6, #0x38]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L154	@cond_branch
	ldr	r1, .L159+0x10
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData
	b	.L155
.L160:
	.align	2, 0
.L159:
	.word	gBattleAnimBankTarget
	.word	gObjectBankIDs
	.word	gBattleAnimArgs
	.word	gSprites
	.word	move_anim_8072740
.L154:
	ldr	r1, .L161
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData
.L155:
	ldr	r0, .L161+0x4
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	sub_80A88F0
	.word	sub_80784A8
.Lfe19:
	.size	 sub_80A8818,.Lfe19-sub_80A8818
	.align	2, 0
	.type	 sub_80A88F0,function
	.thumb_func
sub_80A88F0:
	push	{r4, lr}
	ldr	r4, .L164
	mov	r1, #0x38
	ldrsh	r2, [r0, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r3, #0x0
	strh	r3, [r1, #0x24]
	mov	r1, #0x38
	ldrsh	r2, [r0, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r3, [r1, #0x26]
	bl	move_anim_8072740
	pop	{r4}
	pop	{r0}
	bx	r0
.L165:
	.align	2, 0
.L164:
	.word	gSprites
.Lfe20:
	.size	 sub_80A88F0,.Lfe20-sub_80A88F0
	.align	2, 0
	.globl	sub_80A8920
	.type	 sub_80A8920,function
	.thumb_func
sub_80A8920:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L168
	mov	r0, #0x6
	ldrsh	r1, [r5, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L168+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L167	@cond_branch
	ldrh	r0, [r5, #0x2]
	neg	r0, r0
	strh	r0, [r5, #0x2]
	ldrh	r0, [r5, #0xa]
	neg	r0, r0
	strh	r0, [r5, #0xa]
.L167:
	ldrb	r0, [r5]
	bl	GetAnimBankSpriteId
	ldr	r1, .L168+0x8
	lsl	r4, r6, #0x2
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x8]
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x8
	mov	r2, #0x6
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r4, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x8
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r4, #0x12]
	ldrh	r0, [r5, #0xc]
	strh	r0, [r4, #0x14]
	strh	r7, [r4, #0x16]
	ldr	r0, .L168+0xc
	str	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
	.word	gTasks
	.word	sub_80A89B4
.Lfe21:
	.size	 sub_80A8920,.Lfe21-sub_80A8920
	.align	2, 0
	.type	 sub_80A89B4,function
	.thumb_func
sub_80A89B4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L172
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	ldrb	r1, [r5, #0x8]
	ldrh	r0, [r5, #0xa]
	ldrh	r2, [r5, #0x1e]
	add	r0, r0, r2
	strh	r0, [r5, #0x1e]
	ldr	r2, .L172+0x4
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	add	r4, r4, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5, #0x1c]
	lsr	r0, r0, #0x8
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r5, #0x16]
	ldrh	r1, [r5, #0x1c]
	add	r0, r0, r1
	strh	r0, [r5, #0x1c]
	ldrh	r0, [r5, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L171	@cond_branch
	ldr	r0, .L172+0x8
	str	r0, [r5]
.L171:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gTasks
	.word	gSprites
	.word	sub_80A8A18
.Lfe22:
	.size	 sub_80A89B4,.Lfe22-sub_80A89B4
	.align	2, 0
	.type	 sub_80A8A18,function
	.thumb_func
sub_80A8A18:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L178
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L175	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
	b	.L176
.L179:
	.align	2, 0
.L178:
	.word	gTasks
.L175:
	ldrb	r0, [r4, #0x8]
	ldrh	r2, [r4, #0x12]
	ldrh	r1, [r4, #0x20]
	add	r2, r2, r1
	strh	r2, [r4, #0x20]
	ldr	r3, .L180
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x18
	ldrh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	add	r2, r2, r0
	strh	r2, [r1, #0x24]
	ldrh	r0, [r4, #0x14]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L176	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L176:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	gSprites
.Lfe23:
	.size	 sub_80A8A18,.Lfe23-sub_80A8A18
	.align	2, 0
	.globl	sub_80A8A80
	.type	 sub_80A8A80,function
	.thumb_func
sub_80A8A80:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L197
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x2
	beq	.L186	@cond_branch
	cmp	r0, #0x2
	bgt	.L192	@cond_branch
	cmp	r0, #0
	blt	.L190	@cond_branch
	ldrb	r0, [r1]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	b	.L183
.L198:
	.align	2, 0
.L197:
	.word	gBattleAnimArgs
.L192:
	cmp	r0, #0x3
	beq	.L188	@cond_branch
	b	.L190
.L186:
	ldr	r5, .L199
	b	.L196
.L200:
	.align	2, 0
.L199:
	.word	gBattleAnimBankAttacker
.L188:
	ldr	r5, .L201
.L196:
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	ldr	r1, .L201+0x4
	ldrb	r0, [r5]
	eor	r0, r0, r4
	add	r0, r0, r1
	ldrb	r2, [r0]
	b	.L183
.L202:
	.align	2, 0
.L201:
	.word	gBattleAnimBankTarget
	.word	gObjectBankIDs
.L190:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L182
.L183:
	ldr	r1, .L203
	lsl	r4, r6, #0x2
	add	r0, r4, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	strh	r2, [r5, #0x8]
	ldr	r0, .L203+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L193	@cond_branch
	ldr	r0, .L203+0x8
	ldrh	r0, [r0, #0x2]
	b	.L195
.L204:
	.align	2, 0
.L203:
	.word	gTasks
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
.L193:
	ldr	r0, .L205
	ldrh	r0, [r0, #0x2]
	neg	r0, r0
.L195:
	strh	r0, [r5, #0xa]
	ldr	r0, .L205+0x4
	add	r1, r4, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L205+0x8
	str	r0, [r1]
.L182:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L206:
	.align	2, 0
.L205:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	sub_80A8B3C
.Lfe24:
	.size	 sub_80A8A80,.Lfe24-sub_80A8A80
	.align	2, 0
	.type	 sub_80A8B3C,function
	.thumb_func
sub_80A8B3C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L209
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r2, [r1, #0x8]
	ldr	r3, .L209+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r1, #0xa]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r1, r1, r0
	add	r1, r1, #0x20
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bls	.L208	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L208:
	pop	{r4}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	gTasks
	.word	gSprites
.Lfe25:
	.size	 sub_80A8B3C,.Lfe25-sub_80A8B3C
	.align	2, 0
	.globl	sub_80A8B88
	.type	 sub_80A8B88,function
	.thumb_func
sub_80A8B88:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L216
	ldrb	r0, [r6]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L212	@cond_branch
	ldr	r1, .L216+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L212:
	ldr	r4, .L216+0x4
	ldrb	r0, [r4, #0x8]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L216+0x8
	lsl	r3, r5, #0x2
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r2, r1, r2
	ldrh	r1, [r4]
	strh	r1, [r2, #0x8]
	ldrh	r1, [r4, #0x2]
	strh	r1, [r2, #0xa]
	ldrh	r1, [r4, #0x4]
	strh	r1, [r2, #0xc]
	ldrh	r1, [r4, #0x6]
	strh	r1, [r2, #0xe]
	strh	r0, [r2, #0x10]
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L213	@cond_branch
	ldrb	r0, [r6]
	b	.L215
.L217:
	.align	2, 0
.L216:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	gTasks
.L213:
	ldr	r0, .L218
	ldrb	r0, [r0]
.L215:
	strh	r0, [r2, #0x12]
	ldr	r1, .L218+0x4
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x20]
	ldr	r1, .L218+0x8
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L219:
	.align	2, 0
.L218:
	.word	gBattleAnimBankTarget
	.word	gTasks
	.word	sub_80A8C0C
.Lfe26:
	.size	 sub_80A8B88,.Lfe26-sub_80A8B88
	.align	2, 0
	.type	 sub_80A8C0C,function
	.thumb_func
sub_80A8C0C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L232
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrb	r7, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	lsl	r1, r0, #0x10
	strh	r0, [r4, #0x1c]
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, r8
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r9, r5
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L221	@cond_branch
	ldr	r0, .L232+0x4
	lsl	r2, r7, #0x4
	add	r1, r2, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	strh	r5, [r1, #0x24]
	mov	r9, r0
	add	r4, r2, #0
	b	.L222
.L233:
	.align	2, 0
.L232:
	.word	gTasks
	.word	gSprites
.L221:
	ldrb	r0, [r4, #0x12]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L223	@cond_branch
	ldr	r1, .L234
	lsl	r2, r7, #0x4
	add	r0, r2, r7
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r9, r1
	add	r4, r2, #0
	cmp	r0, #0
	bge	.L231	@cond_branch
	b	.L226
.L235:
	.align	2, 0
.L234:
	.word	gSprites
.L223:
	ldr	r1, .L236
	lsl	r2, r7, #0x4
	add	r0, r2, r7
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	mov	r4, r9
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	mov	r9, r1
	add	r4, r2, #0
	cmp	r0, #0
	bge	.L226	@cond_branch
	neg	r0, r0
.L226:
	neg	r0, r0
.L231:
	strh	r0, [r3, #0x26]
.L222:
	mov	r5, r8
	cmp	r5, #0x7f
	bls	.L229	@cond_branch
	ldr	r1, .L236+0x4
	lsl	r2, r6, #0x2
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0x1e
	ldrsh	r0, [r3, r5]
	add	r5, r1, #0
	cmp	r0, #0
	bne	.L229	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L228	@cond_branch
.L229:
	mov	r2, r8
	cmp	r2, #0x7e
	bhi	.L227	@cond_branch
	ldr	r1, .L236+0x4
	lsl	r2, r6, #0x2
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r5, #0x1e
	ldrsh	r0, [r3, r5]
	add	r5, r1, #0
	cmp	r0, #0x1
	bne	.L227	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L227	@cond_branch
.L228:
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x1e]
	mov	r2, #0x1
	eor	r0, r0, r2
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	eor	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L227	@cond_branch
	add	r0, r4, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	strh	r3, [r0, #0x24]
	strh	r3, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L227:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	gSprites
	.word	gTasks
.Lfe27:
	.size	 sub_80A8C0C,.Lfe27-sub_80A8C0C
	.align	2, 0
	.globl	sub_80A8D34
	.type	 sub_80A8D34,function
	.thumb_func
sub_80A8D34:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L239
	ldrb	r0, [r6, #0x6]
	bl	GetAnimBankSpriteId
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r1, [r6, #0x8]
	add	r0, r5, #0
	bl	sub_8078E70
	ldr	r1, .L239+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r6]
	strh	r1, [r0, #0x8]
	ldrh	r1, [r6, #0x2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r6, #0x4]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r6, #0x4]
	strh	r1, [r0, #0xe]
	strh	r5, [r0, #0x10]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x1c]
	strh	r1, [r0, #0x1e]
	ldr	r1, .L239+0x8
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	sub_80A8D8C
.Lfe28:
	.size	 sub_80A8D34,.Lfe28-sub_80A8D34
	.align	2, 0
	.type	 sub_80A8D8C,function
	.thumb_func
sub_80A8D8C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L245
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0xa]
	ldrh	r3, [r4, #0x1e]
	add	r0, r0, r3
	strh	r0, [r4, #0x1e]
	ldrb	r0, [r4, #0x10]
	add	r6, r0, #0
	mov	r0, #0x1c
	ldrsh	r1, [r4, r0]
	mov	r3, #0x1e
	ldrsh	r2, [r4, r3]
	add	r0, r6, #0
	mov	r3, #0x0
	bl	obj_id_set_rotscale
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L242	@cond_branch
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	ble	.L243	@cond_branch
	ldrh	r0, [r4, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	neg	r0, r0
	strh	r0, [r4, #0xa]
	strh	r2, [r4, #0xc]
	strh	r1, [r4, #0xe]
	b	.L242
.L246:
	.align	2, 0
.L245:
	.word	gTasks
.L243:
	add	r0, r6, #0
	bl	sub_8078F40
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L242:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 sub_80A8D8C,.Lfe29-sub_80A8D8C
	.align	2, 0
	.globl	sub_80A8E04
	.type	 sub_80A8E04,function
	.thumb_func
sub_80A8E04:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L259
	ldrb	r0, [r4, #0x4]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, #0x0
	bl	sub_8078E70
	ldr	r1, .L259+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x0
	strh	r1, [r2, #0xa]
	ldrh	r0, [r4]
	strh	r0, [r2, #0xc]
	mov	r3, #0x6
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x1
	beq	.L248	@cond_branch
	strh	r1, [r2, #0xe]
	b	.L249
.L260:
	.align	2, 0
.L259:
	.word	gBattleAnimArgs
	.word	gTasks
.L248:
	ldrh	r0, [r4]
	ldrh	r1, [r4, #0x2]
	mov	r3, r0
	mul	r3, r3, r1
	add	r0, r3, #0
	strh	r0, [r2, #0xe]
.L249:
	ldr	r1, .L261
	lsl	r4, r7, #0x2
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r6, .L261+0x4
	ldrh	r0, [r6, #0x2]
	strh	r0, [r5, #0x10]
	mov	r0, r8
	strh	r0, [r5, #0x12]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r5, #0x14]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	mov	r8, r4
	cmp	r0, #0
	beq	.L250	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0x16]
	b	.L251
.L262:
	.align	2, 0
.L261:
	.word	gTasks
	.word	gBattleAnimArgs
.L250:
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r0, .L263
	b	.L258
.L264:
	.align	2, 0
.L263:
	.word	gBattleAnimBankAttacker
.L252:
	ldr	r0, .L265
.L258:
	ldrb	r0, [r0]
	bl	GetBankSide
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L255	@cond_branch
	mov	r1, #0x1
.L255:
	strh	r1, [r5, #0x16]
.L251:
	ldr	r0, .L265+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	mov	r3, #0x16
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L256	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L256	@cond_branch
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0xe]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x10]
.L256:
	ldr	r0, .L265+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L265+0x8
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gBattleAnimBankTarget
	.word	gTasks
	.word	sub_80A8FD8
.Lfe30:
	.size	 sub_80A8E04,.Lfe30-sub_80A8E04
	.align	2, 0
	.globl	sub_80A8EFC
	.type	 sub_80A8EFC,function
	.thumb_func
sub_80A8EFC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L275
	ldrb	r0, [r4, #0x4]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, #0x0
	bl	sub_8078E70
	ldr	r1, .L275+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0xa]
	ldrh	r1, [r4]
	strh	r1, [r0, #0xc]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L268	@cond_branch
	ldr	r0, .L275+0x8
	b	.L274
.L276:
	.align	2, 0
.L275:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	gBattleAnimBankAttacker
.L268:
	ldr	r0, .L277
.L274:
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L270	@cond_branch
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
.L270:
	ldr	r0, .L277+0x4
	mov	r2, #0x6
	ldrsh	r1, [r0, r2]
	add	r6, r0, #0
	cmp	r1, #0x1
	beq	.L272	@cond_branch
	ldr	r2, .L277+0x8
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0xe]
	b	.L273
.L278:
	.align	2, 0
.L277:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
	.word	gTasks
.L272:
	ldr	r3, .L279
	lsl	r4, r5, #0x2
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrh	r2, [r6]
	ldrh	r1, [r6, #0x2]
	mov	r7, r2
	mul	r7, r7, r1
	add	r1, r7, #0
	strh	r1, [r0, #0xe]
	add	r2, r3, #0
	add	r3, r4, #0
.L273:
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r6, #0x2]
	strh	r0, [r1, #0x10]
	mov	r0, r8
	strh	r0, [r1, #0x12]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r1, #0x14]
	mov	r0, #0x1
	strh	r0, [r1, #0x16]
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0xe]
	mov	r7, #0x10
	ldrsh	r0, [r1, r7]
	neg	r0, r0
	strh	r0, [r1, #0x10]
	ldr	r0, .L279+0x4
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	gTasks
	.word	sub_80A8FD8
.Lfe31:
	.size	 sub_80A8EFC,.Lfe31-sub_80A8EFC
	.align	2, 0
	.globl	sub_80A8FD8
	.type	 sub_80A8FD8,function
	.thumb_func
sub_80A8FD8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L291
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0xe]
	add	r0, r0, r1
	strh	r0, [r4, #0xe]
	ldrb	r0, [r4, #0x12]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0xe]
	add	r1, r2, #0
	bl	obj_id_set_rotscale
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L282	@cond_branch
	ldrb	r0, [r4, #0x12]
	bl	sub_8078F9C
.L282:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L281	@cond_branch
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L285	@cond_branch
	cmp	r0, #0x1
	ble	.L287	@cond_branch
	cmp	r0, #0x2
	beq	.L288	@cond_branch
	b	.L287
.L292:
	.align	2, 0
.L291:
	.word	gTasks
.L285:
	ldrb	r0, [r4, #0x12]
	bl	sub_8078F40
.L287:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L281
.L288:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x10]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
.L281:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 sub_80A8FD8,.Lfe32-sub_80A8FD8
	.align	2, 0
	.globl	sub_80A9058
	.type	 sub_80A9058,function
	.thumb_func
sub_80A9058:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L301
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r8, r0
	cmp	r1, #0
	bne	.L294	@cond_branch
	ldr	r4, .L301+0x4
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r4
	ldr	r0, .L301+0x8
	ldrh	r0, [r0]
	mov	r1, #0xc
	bl	__udivsi3
	b	.L300
.L302:
	.align	2, 0
.L301:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	gMovePowerMoveAnim
.L294:
	ldr	r4, .L303
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r4
	ldr	r0, .L303+0x4
	ldr	r0, [r0]
	mov	r1, #0xc
	bl	__divsi3
.L300:
	strh	r0, [r6, #0x26]
	lsl	r0, r0, #0x10
	add	r1, r4, #0
	cmp	r0, #0
	bgt	.L298	@cond_branch
	mov	r0, #0x1
	strh	r0, [r6, #0x26]
.L298:
	mov	r2, #0x26
	ldrsh	r0, [r6, r2]
	cmp	r0, #0x10
	ble	.L297	@cond_branch
	mov	r0, #0x10
	strh	r0, [r6, #0x26]
.L297:
	add	r4, r5, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	mov	r5, #0x0
	strh	r1, [r4, #0x24]
	ldrh	r2, [r4, #0x26]
	mov	r0, #0x1
	and	r0, r0, r2
	add	r1, r1, r0
	strh	r1, [r4, #0x22]
	strh	r5, [r4, #0x20]
	mov	r1, r8
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x1e]
	mov	r0, #0x1
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x16]
	ldr	r2, .L303+0x8
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x18]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x26]
	strh	r0, [r4, #0x1a]
	strh	r5, [r4, #0x8]
	mov	r1, r8
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0xa]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0xc]
	ldr	r0, .L303+0xc
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	gTasks
	.word	gMoveDmgMoveAnim
	.word	gSprites
	.word	sub_80A913C
.Lfe33:
	.size	 sub_80A9058,.Lfe33-sub_80A9058
	.align	2, 0
	.type	 sub_80A913C,function
	.thumb_func
sub_80A913C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L315
	add	r3, r0, r1
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r3, r2]
	cmp	r0, r1
	ble	.L306	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	ldrh	r0, [r3, #0x20]
	add	r1, r0, #0x1
	mov	r0, #0x1
	and	r1, r1, r0
	strh	r1, [r3, #0x20]
	mov	r2, #0x1c
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L307	@cond_branch
	cmp	r1, #0
	beq	.L308	@cond_branch
	ldr	r2, .L315+0x4
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x22]
	ldrh	r2, [r3, #0x18]
	add	r1, r1, r2
	b	.L314
.L316:
	.align	2, 0
.L315:
	.word	gTasks
	.word	gSprites
.L308:
	ldr	r2, .L317
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x18]
	ldrh	r2, [r3, #0x24]
	sub	r1, r1, r2
.L314:
	strh	r1, [r0, #0x24]
.L307:
	mov	r1, #0x1e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L310	@cond_branch
	mov	r2, #0x20
	ldrsh	r4, [r3, r2]
	cmp	r4, #0
	beq	.L311	@cond_branch
	ldr	r2, .L317
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x26]
	strh	r1, [r0, #0x26]
	b	.L310
.L318:
	.align	2, 0
.L317:
	.word	gSprites
.L311:
	ldr	r2, .L319
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x26]
.L310:
	ldrh	r0, [r3, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L306	@cond_branch
	ldr	r2, .L319
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x24]
	mov	r0, #0x16
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x26]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L306:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L320:
	.align	2, 0
.L319:
	.word	gSprites
.Lfe34:
	.size	 sub_80A913C,.Lfe34-sub_80A913C
.text
	.align	2, 0
