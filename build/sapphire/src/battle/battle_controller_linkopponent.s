@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gLinkOpponentBufferCommands
	.section .rodata
	.align	2, 0
	.type	 gLinkOpponentBufferCommands,object
gLinkOpponentBufferCommands:
	.word	LinkOpponentHandleGetAttributes
	.word	LinkOpponentHandlecmd1
	.word	LinkOpponentHandleSetAttributes
	.word	LinkOpponentHandlecmd3
	.word	LinkOpponentHandleLoadPokeSprite
	.word	LinkOpponentHandleSendOutPoke
	.word	LinkOpponentHandleReturnPokeToBall
	.word	LinkOpponentHandleTrainerThrow
	.word	LinkOpponentHandleTrainerSlide
	.word	LinkOpponentHandleTrainerSlideBack
	.word	LinkOpponentHandlecmd10
	.word	LinkOpponentHandlecmd11
	.word	LinkOpponentHandlecmd12
	.word	LinkOpponentHandleBallThrow
	.word	LinkOpponentHandlePuase
	.word	LinkOpponentHandleMoveAnimation
	.word	LinkOpponentHandlePrintString
	.word	LinkOpponentHandlePrintStringPlayerOnly
	.word	LinkOpponentHandlecmd18
	.word	LinkOpponentHandlecmd19
	.word	LinkOpponentHandlecmd20
	.word	LinkOpponentHandleOpenBag
	.word	LinkOpponentHandlecmd22
	.word	LinkOpponentHandlecmd23
	.word	LinkOpponentHandleHealthBarUpdate
	.word	LinkOpponentHandleExpBarUpdate
	.word	LinkOpponentHandleStatusIconUpdate
	.word	LinkOpponentHandleStatusAnimation
	.word	LinkOpponentHandleStatusXor
	.word	LinkOpponentHandlecmd29
	.word	LinkOpponentHandleDMATransfer
	.word	LinkOpponentHandlecmd31
	.word	LinkOpponentHandlecmd32
	.word	LinkOpponentHandlecmd33
	.word	LinkOpponentHandlecmd34
	.word	LinkOpponentHandlecmd35
	.word	LinkOpponentHandlecmd36
	.word	LinkOpponentHandlecmd37
	.word	LinkOpponentHandlecmd38
	.word	LinkOpponentHandlecmd39
	.word	LinkOpponentHandlecmd40
	.word	LinkOpponentHandleHitAnimation
	.word	LinkOpponentHandlecmd42
	.word	LinkOpponentHandleEffectivenessSound
	.word	LinkOpponentHandlecmd44
	.word	LinkOpponentHandleFaintingCry
	.word	LinkOpponentHandleIntroSlide
	.word	LinkOpponentHandleTrainerBallThrow
	.word	LinkOpponentHandlecmd48
	.word	LinkOpponentHandlecmd49
	.word	LinkOpponentHandlecmd50
	.word	LinkOpponentHandleSpriteInvisibility
	.word	LinkOpponentHandleBattleAnimation
	.word	LinkOpponentHandleLinkStandbyMsg
	.word	LinkOpponentHandleResetActionMoveSelection
	.word	LinkOpponentHandlecmd55
	.word	LinkOpponentHandlecmd56
	.size	 gLinkOpponentBufferCommands,228
.text
	.align	2, 0
	.globl	nullsub_47
	.type	 nullsub_47,function
	.thumb_func
nullsub_47:
	bx	lr
.Lfe1:
	.size	 nullsub_47,.Lfe1-nullsub_47
	.align	2, 0
	.globl	SetBankFuncToLinkOpponentBufferRunCommand
	.type	 SetBankFuncToLinkOpponentBufferRunCommand,function
	.thumb_func
SetBankFuncToLinkOpponentBufferRunCommand:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_803752C
.Lfe2:
	.size	 SetBankFuncToLinkOpponentBufferRunCommand,.Lfe2-SetBankFuncToLinkOpponentBufferRunCommand
	.align	2, 0
	.globl	sub_803752C
	.type	 sub_803752C,function
	.thumb_func
sub_803752C:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleExecBuffer
	.word	gBitTable
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gLinkOpponentBufferCommands
.L8:
	bl	LinkOpponentBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_803752C,.Lfe3-sub_803752C
	.align	2, 0
	.globl	sub_803757C
	.type	 sub_803757C,function
	.thumb_func
sub_803757C:
	push	{lr}
	ldr	r2, .L14
	ldr	r1, .L14+0x4
	ldr	r0, .L14+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L14+0xc
	cmp	r1, r0
	bne	.L13	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L13:
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.Lfe4:
	.size	 sub_803757C,.Lfe4-sub_803757C
	.align	2, 0
	.globl	sub_80375B4
	.type	 sub_80375B4,function
	.thumb_func
sub_80375B4:
	push	{r4, r5, r6, lr}
	ldr	r4, .L18
	ldr	r6, .L18+0x4
	ldr	r5, .L18+0x8
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r2, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r2, r0
	ldr	r1, [r0]
	ldr	r0, .L18+0xc
	cmp	r1, r0
	bne	.L17	@cond_branch
	add	r0, r2, r4
	ldrh	r0, [r0, #0x6]
	bl	sub_8031B74
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x38]
	ldr	r2, .L18+0x10
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L18+0x14
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	bl	LinkOpponentBufferExecCompleted
.L17:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	0x3ff
	.word	0xfffffc00
.Lfe5:
	.size	 sub_80375B4,.Lfe5-sub_80375B4
	.align	2, 0
	.globl	sub_8037644
	.type	 sub_8037644,function
	.thumb_func
sub_8037644:
	push	{lr}
	ldr	r3, .L22
	ldrb	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L22+0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L21	@cond_branch
	ldrb	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strb	r0, [r1, #0x9]
	bl	LinkOpponentBufferExecCompleted
.L21:
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe6:
	.size	 sub_8037644,.Lfe6-sub_8037644
	.align	2, 0
	.globl	sub_8037680
	.type	 sub_8037680,function
	.thumb_func
sub_8037680:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L26	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r0, .L39
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
.L26:
	ldr	r2, .L39+0x4
	ldr	r1, .L39+0x8
	ldr	r0, .L39+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L39+0x10
	cmp	r1, r0
	bne	.L28	@cond_branch
	b	.L38
.L40:
	.align	2, 0
.L39:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.L25:
	ldr	r2, .L41
	ldr	r5, .L41+0x4
	ldr	r0, .L41+0x8
	ldrb	r3, [r0]
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L41+0xc
	cmp	r4, r0
	bne	.L28	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L28	@cond_branch
.L38:
	mov	r6, #0x1
.L28:
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	mov	r6, #0x0
.L30:
	cmp	r6, #0
	bne	.LCB340
	b	.L24	@long jump
.LCB340:
	ldr	r7, .L41+0x8
	ldrb	r0, [r7]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x1
	bne	.L32	@cond_branch
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r5, .L41+0x10
	add	r4, r0, r5
	ldrb	r1, [r4, #0x1]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L41+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
.L32:
	ldr	r0, .L41+0x18
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldrb	r0, [r7]
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L37	@cond_branch
	ldr	r0, .L41+0x1c
	bl	m4aMPlayContinue
	b	.L37
.L42:
	.align	2, 0
.L41:
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	gSharedMem+0x17810
	.word	0x27f9
	.word	gBattleTypeFlags
	.word	gMPlay_BGM
.L35:
	ldr	r0, .L43
	ldr	r1, .L43+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L37:
	ldr	r2, .L43+0x8
	ldrb	r1, [r2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L43+0xc
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L43+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L43+0x14
	str	r1, [r0]
.L24:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gMPlay_BGM
	.word	0xffff
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8037644
.Lfe7:
	.size	 sub_8037680,.Lfe7-sub_8037680
	.align	2, 0
	.globl	sub_8037840
	.type	 sub_8037840,function
	.thumb_func
sub_8037840:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r6, .L52
	ldrb	r2, [r6]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	ldr	r5, .L52+0x4
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r4, #0x88
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L46	@cond_branch
	ldr	r0, .L52+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L52+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L46:
	ldrb	r0, [r6]
	mov	r7, #0x2
	add	r2, r7, #0
	eor	r2, r2, r0
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L47	@cond_branch
	ldr	r0, .L52+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L52+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L47:
	ldrb	r2, [r6]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r3, #0x8
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB583
	b	.L45	@long jump
.LCB583:
	add	r1, r2, #0
	eor	r1, r1, r7
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.LCB598
	b	.L45	@long jump
.LCB598:
	ldr	r0, .L52+0x10
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L49	@cond_branch
	add	r0, r2, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L49	@cond_branch
	ldrb	r0, [r6]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x9]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB629
	b	.L45	@long jump
.LCB629:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strb	r4, [r0, #0x9]
.L49:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	ldr	r0, .L52+0x10
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldr	r1, .L52+0x14
	ldr	r5, .L52
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r0, .L52+0x1c
	mov	r8, r0
	ldrb	r0, [r5]
	add	r1, r4, #0
	eor	r1, r1, r0
	mov	r2, r8
	add	r0, r1, r2
	ldrb	r0, [r0]
	ldr	r2, .L52+0x8
	mov	sl, r2
	lsl	r1, r1, #0x1
	add	r1, r1, sl
	ldrh	r1, [r1]
	mov	r2, #0x64
	mov	r9, r2
	mov	r2, r9
	mul	r2, r2, r1
	add	r1, r2, #0
	ldr	r6, .L52+0xc
	add	r1, r1, r6
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r5]
	eor	r0, r0, r4
	bl	sub_804777C
	ldrb	r0, [r5]
	eor	r0, r0, r4
	add	r0, r0, r8
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldrb	r0, [r5]
	eor	r4, r4, r0
	lsl	r0, r4, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8032984
.L51:
	ldr	r1, .L52+0x14
	ldr	r4, .L52
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L52+0x1c
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L52+0x8
	mov	r9, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	ldrh	r1, [r1]
	mov	r2, #0x64
	mov	r8, r2
	mov	r2, r8
	mul	r2, r2, r1
	add	r1, r2, #0
	ldr	r6, .L52+0xc
	add	r1, r1, r6
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r4]
	bl	sub_804777C
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldrb	r5, [r4]
	lsl	r0, r5, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	sub_8032984
	ldr	r2, .L52+0x20
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L52+0x24
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L52+0x28
	str	r1, [r0]
.L45:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gUnknown_0300434C
	.word	gSprites
	.word	gHealthboxIDs
	.word	gSharedMem+0x17840
	.word	gBattleBankFunc
	.word	sub_8037680
.Lfe8:
	.size	 sub_8037840,.Lfe8-sub_8037840
	.align	2, 0
	.globl	sub_8037A74
	.type	 sub_8037A74,function
	.thumb_func
sub_8037A74:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L58
	ldr	r0, .L58+0x4
	ldr	r7, .L58+0x8
	ldrb	r3, [r7]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r2, r0, #0x1f
	cmp	r2, #0x1
	bne	.L54	@cond_branch
	mov	r4, #0x24
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L54	@cond_branch
	lsl	r4, r3, #0x1
	add	r0, r4, r3
	lsl	r0, r0, #0x2
	ldr	r6, .L58+0xc
	add	r1, r0, r6
	ldrb	r5, [r1]
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L56	@cond_branch
	ldr	r0, .L58+0x10
	add	r0, r4, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L58+0x14
	add	r1, r1, r0
	add	r0, r3, #0
	bl	sub_8141828
	b	.L54
.L59:
	.align	2, 0
.L58:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gEnemyParty
.L56:
	ldrb	r0, [r1, #0x1]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L54	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r5
	strb	r0, [r1]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L60
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	bl	LinkOpponentBufferExecCompleted
.L54:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	0x27f9
.Lfe9:
	.size	 sub_8037A74,.Lfe9-sub_8037A74
	.align	2, 0
	.globl	sub_8037B24
	.type	 sub_8037B24,function
	.thumb_func
sub_8037B24:
	push	{r4, r5, r6, lr}
	ldr	r6, .L65
	ldrb	r0, [r6]
	ldr	r5, .L65+0x4
	add	r1, r0, r5
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8045C78
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	sub_8043DFC
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L63	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	sub_80440EC
	b	.L64
.L66:
	.align	2, 0
.L65:
	.word	gActiveBank
	.word	gHealthboxIDs
.L63:
	bl	LinkOpponentBufferExecCompleted
.L64:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_8037B24,.Lfe10-sub_8037B24
	.align	2, 0
	.globl	sub_8037B78
	.type	 sub_8037B78,function
	.thumb_func
sub_8037B78:
	push	{lr}
	ldr	r2, .L69
	ldr	r0, .L69+0x4
	ldr	r1, .L69+0x8
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L68	@cond_branch
	ldr	r0, .L69+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	LinkOpponentBufferExecCompleted
.L68:
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gHealthboxIDs
.Lfe11:
	.size	 sub_8037B78,.Lfe11-sub_8037B78
	.align	2, 0
	.globl	sub_8037BBC
	.type	 sub_8037BBC,function
	.thumb_func
sub_8037BBC:
	push	{r4, r5, r6, lr}
	ldr	r6, .L73
	ldrb	r2, [r6]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L73+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L72	@cond_branch
	ldr	r5, .L73+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L73+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	sub_8032A08
	ldr	r1, .L73+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	LinkOpponentBufferExecCompleted
.L72:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
.Lfe12:
	.size	 sub_8037BBC,.Lfe12-sub_8037BBC
	.align	2, 0
	.globl	sub_8037C2C
	.type	 sub_8037C2C,function
	.thumb_func
sub_8037C2C:
	push	{lr}
	ldr	r0, .L77
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	bne	.L76	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L76:
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	gUnknown_03004210
.Lfe13:
	.size	 sub_8037C2C,.Lfe13-sub_8037C2C
	.align	2, 0
	.globl	dp01t_0F_4_move_anim
	.type	 dp01t_0F_4_move_anim,function
	.thumb_func
dp01t_0F_4_move_anim:
	push	{r4, lr}
	ldr	r1, .L83
	ldr	r0, .L83+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L83+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L80	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L83+0xc
	strb	r3, [r0]
	bl	LinkOpponentBufferExecCompleted
	b	.L81
.L84:
	.align	2, 0
.L83:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	gDoingBattleAnim
.L80:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L82	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L82:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L81:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 dp01t_0F_4_move_anim,.Lfe14-dp01t_0F_4_move_anim
	.align	2, 0
	.globl	sub_8037CC0
	.type	 sub_8037CC0,function
	.thumb_func
sub_8037CC0:
	push	{r4, lr}
	ldr	r2, .L88
	ldr	r0, .L88+0x4
	ldr	r4, .L88+0x8
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L88+0xc
	cmp	r1, r0
	bne	.L86	@cond_branch
	lsl	r0, r3, #0x2
	ldr	r1, .L88+0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L87	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x6
	bl	move_anim_start_t4
.L87:
	ldr	r0, .L88+0x14
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L88+0x18
	str	r0, [r1]
.L86:
	pop	{r4}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	gSharedMem+0x17800
	.word	gBattleBankFunc
	.word	sub_8037D2C
.Lfe15:
	.size	 sub_8037CC0,.Lfe15-sub_8037CC0
	.align	2, 0
	.globl	sub_8037D2C
	.type	 sub_8037D2C,function
	.thumb_func
sub_8037D2C:
	push	{lr}
	ldr	r0, .L92
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L92+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L91	@cond_branch
	ldr	r0, .L92+0x8
	mov	r1, #0xa
	bl	CreateTask
	bl	LinkOpponentBufferExecCompleted
.L91:
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	c3_0802FDF4
.Lfe16:
	.size	 sub_8037D2C,.Lfe16-sub_8037D2C
	.align	2, 0
	.globl	sub_8037D64
	.type	 sub_8037D64,function
	.thumb_func
sub_8037D64:
	push	{r4, r5, lr}
	ldr	r5, .L96
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r3, .L96+0x4
	add	r2, r0, r3
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L96+0x8
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r1, .L96+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L96+0x10
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r4, .L96+0x14
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L96+0x18
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L96+0x1c
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r5]
	bl	sub_804777C
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldrb	r0, [r5]
	bl	sub_8031F88
	ldr	r1, .L96+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L96+0x24
	str	r1, [r0]
.L95:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	0x27f9
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gBattleBankFunc
	.word	sub_8037CC0
.Lfe17:
	.size	 sub_8037D64,.Lfe17-sub_8037D64
	.align	2, 0
	.globl	sub_8037E30
	.type	 sub_8037E30,function
	.thumb_func
sub_8037E30:
	push	{r4, r5, r6, lr}
	ldr	r5, .L101
	ldrb	r2, [r5]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	ldr	r6, .L101+0x4
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L99	@cond_branch
	ldr	r0, .L101+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L101+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L99:
	ldr	r4, .L101+0x10
	ldr	r0, .L101+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L101+0x18
	cmp	r1, r0
	bne	.L100	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L100	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldrb	r4, [r5]
	ldr	r1, .L101+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L101+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8032984
	ldr	r1, .L101+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L101+0x20
	str	r1, [r0]
.L100:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L102:
	.align	2, 0
.L101:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gSprites
	.word	gUnknown_0300434C
	.word	SpriteCallbackDummy
	.word	gBattleBankFunc
	.word	sub_8037D64
.Lfe18:
	.size	 sub_8037E30,.Lfe18-sub_8037E30
	.align	2, 0
	.globl	sub_8037EF0
	.type	 sub_8037EF0,function
	.thumb_func
sub_8037EF0:
	push	{lr}
	ldr	r0, .L105
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L104	@cond_branch
	mov	r0, #0x5a
	bl	m4aSongNumStop
	ldr	r3, .L105+0x4
	ldr	r0, .L105+0x8
	add	r2, r3, r0
	ldrb	r1, [r2]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L105+0xc
	ldr	r0, [r0]
	str	r0, [r3]
	ldr	r0, .L105+0x10
	bl	SetMainCallback2
.L104:
	pop	{r0}
	bx	r0
.L106:
	.align	2, 0
.L105:
	.word	gReceivedRemoteLinkPlayers
	.word	gMain
	.word	0x43d
	.word	gPreBattleCallback1
	.word	c2_8011A1C
.Lfe19:
	.size	 sub_8037EF0,.Lfe19-sub_8037EF0
	.align	2, 0
	.globl	sub_8037F34
	.type	 sub_8037F34,function
	.thumb_func
sub_8037F34:
	push	{lr}
	ldr	r0, .L111
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L108	@cond_branch
	ldr	r0, .L111+0x4
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L109	@cond_branch
	bl	sub_800832C
	ldr	r1, .L111+0x8
	ldr	r0, .L111+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L111+0x10
	str	r1, [r0]
	b	.L108
.L112:
	.align	2, 0
.L111:
	.word	gPaletteFade
	.word	gBattleTypeFlags
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_8037EF0
.L109:
	mov	r0, #0x5a
	bl	m4aSongNumStop
	ldr	r2, .L113
	ldr	r0, .L113+0x4
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L113+0x8
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L108:
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gMain
	.word	0x43d
	.word	gPreBattleCallback1
.Lfe20:
	.size	 sub_8037F34,.Lfe20-sub_8037F34
	.align	2, 0
	.globl	sub_8037FAC
	.type	 sub_8037FAC,function
	.thumb_func
sub_8037FAC:
	push	{lr}
	ldr	r0, .L117
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L117+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L116	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L116:
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe21:
	.size	 sub_8037FAC,.Lfe21-sub_8037FAC
	.align	2, 0
	.globl	sub_8037FD8
	.type	 sub_8037FD8,function
	.thumb_func
sub_8037FD8:
	push	{lr}
	ldr	r0, .L121
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L121+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L120	@cond_branch
	bl	LinkOpponentBufferExecCompleted
.L120:
	pop	{r0}
	bx	r0
.L122:
	.align	2, 0
.L121:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe22:
	.size	 sub_8037FD8,.Lfe22-sub_8037FD8
	.align	2, 0
	.globl	LinkOpponentBufferExecCompleted
	.type	 LinkOpponentBufferExecCompleted,function
	.thumb_func
LinkOpponentBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L126
	ldr	r4, .L126+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L126+0x8
	str	r1, [r0]
	ldr	r0, .L126+0xc
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L124	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r1, .L126+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	mov	r1, #0x38
	strb	r1, [r0]
	b	.L125
.L127:
	.align	2, 0
.L126:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_803752C
	.word	gBattleTypeFlags
	.word	gBattleBufferA
.L124:
	ldr	r2, .L128
	ldr	r1, .L128+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L125:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gBattleExecBuffer
	.word	gBitTable
.Lfe23:
	.size	 LinkOpponentBufferExecCompleted,.Lfe23-LinkOpponentBufferExecCompleted
	.align	2, 0
	.globl	LinkOpponentHandleGetAttributes
	.type	 LinkOpponentHandleGetAttributes,function
	.thumb_func
LinkOpponentHandleGetAttributes:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xffffff00
	mov	r6, #0x0
	ldr	r1, .L139
	ldr	r0, .L139+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L131	@cond_branch
	ldr	r0, .L139+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	dp01_getattr_by_ch1_for_player_pokemon__
	add	r6, r0, #0
	b	.L132
.L140:
	.align	2, 0
.L139:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattlePartyID
.L131:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L136:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L137	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	dp01_getattr_by_ch1_for_player_pokemon__
	add	r6, r6, r0
.L137:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L136	@cond_branch
.L132:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	Emitcmd29
	bl	LinkOpponentBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 LinkOpponentHandleGetAttributes,.Lfe24-LinkOpponentHandleGetAttributes
	.align	2, 0
	.globl	dp01_getattr_by_ch1_for_player_pokemon__
	.type	 dp01_getattr_by_ch1_for_player_pokemon__,function
	.thumb_func
dp01_getattr_by_ch1_for_player_pokemon__:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffff70
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L230
	ldr	r3, .L230+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB1881
	bl	.L142	@far jump
.LCB1881:
	lsl	r0, r0, #0x2
	ldr	r1, .L230+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L231:
	.align	2, 0
.L230:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	.L224
	.align	2, 0
	.align	2, 0
.L224:
	.word	.L143
	.word	.L154
	.word	.L155
	.word	.L156
	.word	.L170
	.word	.L170
	.word	.L170
	.word	.L170
	.word	.L171
	.word	.L180
	.word	.L180
	.word	.L180
	.word	.L180
	.word	.L142
	.word	.L142
	.word	.L142
	.word	.L142
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
	.word	.L206
	.word	.L207
	.word	.L208
	.word	.L209
	.word	.L210
	.word	.L211
	.word	.L212
	.word	.L213
	.word	.L214
	.word	.L215
	.word	.L216
	.word	.L217
	.word	.L218
	.word	.L219
	.word	.L220
	.word	.L221
	.word	.L222
	.word	.L223
.L143:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L232
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L147:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L147	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L232
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L232+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L232+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L232+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L152:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L152	@cond_branch
	b	.L142
.L233:
	.align	2, 0
.L232:
	.word	gEnemyParty
	.word	0xfffffc1f
	.word	0xfff07fff
	.word	0xfffffe0f
.L154:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L234
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L226
.L235:
	.align	2, 0
.L234:
	.word	gEnemyParty
.L155:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L236
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L226
.L237:
	.align	2, 0
.L236:
	.word	gEnemyParty
.L156:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L238
	add	r4, r1, r0
	mov	r8, r9
.L160:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L160	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L238
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L165:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L165	@cond_branch
	b	.L142
.L239:
	.align	2, 0
.L238:
	.word	gEnemyParty
.L170:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L240
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L226
.L241:
	.align	2, 0
.L240:
	.word	gEnemyParty
.L171:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L242
	mov	r8, r2
.L175:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L175	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L242
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L142
.L243:
	.align	2, 0
.L242:
	.word	gEnemyParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L244
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L227
.L245:
	.align	2, 0
.L244:
	.word	gEnemyParty
.L181:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L246
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L228
.L247:
	.align	2, 0
.L246:
	.word	gEnemyParty
.L182:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L248
	add	r0, r0, r1
	mov	r1, #0x19
.L228:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L142
.L249:
	.align	2, 0
.L248:
	.word	gEnemyParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L250
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L227
.L251:
	.align	2, 0
.L250:
	.word	gEnemyParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L252
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L227
.L253:
	.align	2, 0
.L252:
	.word	gEnemyParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L254
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L227
.L255:
	.align	2, 0
.L254:
	.word	gEnemyParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L256
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L227
.L257:
	.align	2, 0
.L256:
	.word	gEnemyParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L258
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L227
.L259:
	.align	2, 0
.L258:
	.word	gEnemyParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L260
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L227
.L261:
	.align	2, 0
.L260:
	.word	gEnemyParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L262
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L227
.L263:
	.align	2, 0
.L262:
	.word	gEnemyParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L264
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L227
.L265:
	.align	2, 0
.L264:
	.word	gEnemyParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L266
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L227
.L267:
	.align	2, 0
.L266:
	.word	gEnemyParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L268
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L227
.L269:
	.align	2, 0
.L268:
	.word	gEnemyParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L270
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L227
.L271:
	.align	2, 0
.L270:
	.word	gEnemyParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L272
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L227
.L273:
	.align	2, 0
.L272:
	.word	gEnemyParty
.L195:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L274
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L142
.L275:
	.align	2, 0
.L274:
	.word	gEnemyParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L276
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L227
.L277:
	.align	2, 0
.L276:
	.word	gEnemyParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L278
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L227
.L279:
	.align	2, 0
.L278:
	.word	gEnemyParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L280
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L227
.L281:
	.align	2, 0
.L280:
	.word	gEnemyParty
.L199:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L282
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L227
.L283:
	.align	2, 0
.L282:
	.word	gEnemyParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L284
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L227
.L285:
	.align	2, 0
.L284:
	.word	gEnemyParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L286
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L227
.L287:
	.align	2, 0
.L286:
	.word	gEnemyParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L288
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L229
.L289:
	.align	2, 0
.L288:
	.word	gEnemyParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L290
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L226
.L291:
	.align	2, 0
.L290:
	.word	gEnemyParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L292
	add	r0, r0, r1
	mov	r1, #0x37
.L229:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L142
.L293:
	.align	2, 0
.L292:
	.word	gEnemyParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L294
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L227
.L295:
	.align	2, 0
.L294:
	.word	gEnemyParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L296
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L226
.L297:
	.align	2, 0
.L296:
	.word	gEnemyParty
.L207:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L298
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L226
.L299:
	.align	2, 0
.L298:
	.word	gEnemyParty
.L208:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L300
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L226
.L301:
	.align	2, 0
.L300:
	.word	gEnemyParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L302
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L226
.L303:
	.align	2, 0
.L302:
	.word	gEnemyParty
.L210:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L304
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L226
.L305:
	.align	2, 0
.L304:
	.word	gEnemyParty
.L211:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L306
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L226
.L307:
	.align	2, 0
.L306:
	.word	gEnemyParty
.L212:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L308
	add	r0, r0, r1
	mov	r1, #0x3f
.L226:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L142
.L309:
	.align	2, 0
.L308:
	.word	gEnemyParty
.L213:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L310
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L227
.L311:
	.align	2, 0
.L310:
	.word	gEnemyParty
.L214:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L312
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L227
.L313:
	.align	2, 0
.L312:
	.word	gEnemyParty
.L215:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L314
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L227
.L315:
	.align	2, 0
.L314:
	.word	gEnemyParty
.L216:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L316
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L227
.L317:
	.align	2, 0
.L316:
	.word	gEnemyParty
.L217:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L318
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L227
.L319:
	.align	2, 0
.L318:
	.word	gEnemyParty
.L218:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L320
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L227
.L321:
	.align	2, 0
.L320:
	.word	gEnemyParty
.L219:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L322
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L227
.L323:
	.align	2, 0
.L322:
	.word	gEnemyParty
.L220:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L324
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L227
.L325:
	.align	2, 0
.L324:
	.word	gEnemyParty
.L221:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L326
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L227
.L327:
	.align	2, 0
.L326:
	.word	gEnemyParty
.L222:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L328
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L227
.L329:
	.align	2, 0
.L328:
	.word	gEnemyParty
.L223:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L330
	add	r0, r0, r1
	mov	r1, #0x36
.L227:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L142:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L331:
	.align	2, 0
.L330:
	.word	gEnemyParty
.Lfe25:
	.size	 dp01_getattr_by_ch1_for_player_pokemon__,.Lfe25-dp01_getattr_by_ch1_for_player_pokemon__
	.align	2, 0
	.globl	LinkOpponentHandlecmd1
	.type	 LinkOpponentHandlecmd1,function
	.thumb_func
LinkOpponentHandlecmd1:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 LinkOpponentHandlecmd1,.Lfe26-LinkOpponentHandlecmd1
	.align	2, 0
	.globl	LinkOpponentHandleSetAttributes
	.type	 LinkOpponentHandleSetAttributes,function
	.thumb_func
LinkOpponentHandleSetAttributes:
	push	{r4, r5, lr}
	ldr	r1, .L342
	ldr	r0, .L342+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L334	@cond_branch
	ldr	r0, .L342+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	sub_8038900
	b	.L335
.L343:
	.align	2, 0
.L342:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattlePartyID
.L334:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L339:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L340	@cond_branch
	add	r0, r5, #0
	bl	sub_8038900
.L340:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L339	@cond_branch
.L335:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 LinkOpponentHandleSetAttributes,.Lfe27-LinkOpponentHandleSetAttributes
	.align	2, 0
	.globl	sub_8038900
	.type	 sub_8038900,function
	.thumb_func
sub_8038900:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffc8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r3, .L416
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	ldr	r2, .L416+0x4
	add	r4, r0, r2
	add	r7, r4, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r6, r3, #0
	add	r3, r2, #0
	cmp	r0, #0x3b
	bls	.LCB3301
	bl	.L345	@far jump
.LCB3301:
	lsl	r0, r0, #0x2
	ldr	r1, .L416+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L417:
	.align	2, 0
.L416:
	.word	gActiveBank
	.word	gBattleBufferA+0x3
	.word	.L412
	.align	2, 0
	.align	2, 0
.L412:
	.word	.L346
	.word	.L352
	.word	.L353
	.word	.L354
	.word	.L363
	.word	.L363
	.word	.L363
	.word	.L363
	.word	.L364
	.word	.L368
	.word	.L368
	.word	.L368
	.word	.L368
	.word	.L345
	.word	.L345
	.word	.L345
	.word	.L345
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
	.word	.L395
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L401
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L406
	.word	.L407
	.word	.L408
	.word	.L409
	.word	.L410
	.word	.L411
.L346:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L418
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r7, #0
	bl	SetMonData
	add	r2, r7, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r7
	mov	sl, r0
	add	r0, r7, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r7, #0x2
	str	r0, [sp, #0x4]
	add	r0, r7, #0x4
	str	r0, [sp, #0x8]
	add	r0, r7, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r6, r7, #0
	add	r6, r6, #0x24
	add	r4, r7, #0
	add	r4, r4, #0xc
.L350:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L350	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L418
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r7, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r7, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r7, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r7, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r7, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r7, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L345
.L419:
	.align	2, 0
.L418:
	.word	gEnemyParty
.L352:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L420
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0xb
	bl	SetMonData
	b	.L345
.L421:
	.align	2, 0
.L420:
	.word	gEnemyParty
.L353:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L422
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0xc
	bl	SetMonData
	b	.L345
.L423:
	.align	2, 0
.L422:
	.word	gEnemyParty
.L354:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r4
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L424
	add	r7, r1, r0
	add	r6, r4, #0
	add	r6, r6, #0x8
.L358:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L358	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L424
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L345
.L425:
	.align	2, 0
.L424:
	.word	gEnemyParty
.L363:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L426
	add	r0, r0, r1
	ldr	r3, .L426+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L414
.L427:
	.align	2, 0
.L426:
	.word	gEnemyParty
	.word	gBattleBufferA
.L364:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L428
	add	r4, r4, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	add	r0, r4, #0
	mov	r1, #0x11
	str	r3, [sp, #0x34]
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L345
.L429:
	.align	2, 0
.L428:
	.word	gEnemyParty
.L368:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L430
	add	r0, r0, r1
	ldr	r3, .L430+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L414:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L345
.L431:
	.align	2, 0
.L430:
	.word	gEnemyParty
	.word	gBattleBufferA
.L369:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L432
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1
	bl	SetMonData
	b	.L345
.L433:
	.align	2, 0
.L432:
	.word	gEnemyParty
.L370:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L434
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x19
	bl	SetMonData
	b	.L345
.L435:
	.align	2, 0
.L434:
	.word	gEnemyParty
.L371:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L436
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1a
	bl	SetMonData
	b	.L345
.L437:
	.align	2, 0
.L436:
	.word	gEnemyParty
.L372:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L438
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1b
	bl	SetMonData
	b	.L345
.L439:
	.align	2, 0
.L438:
	.word	gEnemyParty
.L373:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L440
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1c
	bl	SetMonData
	b	.L345
.L441:
	.align	2, 0
.L440:
	.word	gEnemyParty
.L374:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L442
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1d
	bl	SetMonData
	b	.L345
.L443:
	.align	2, 0
.L442:
	.word	gEnemyParty
.L375:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L444
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1e
	bl	SetMonData
	b	.L345
.L445:
	.align	2, 0
.L444:
	.word	gEnemyParty
.L376:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L446
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x1f
	bl	SetMonData
	b	.L345
.L447:
	.align	2, 0
.L446:
	.word	gEnemyParty
.L377:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L448
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x20
	bl	SetMonData
	b	.L345
.L449:
	.align	2, 0
.L448:
	.word	gEnemyParty
.L378:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L450
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x22
	bl	SetMonData
	b	.L345
.L451:
	.align	2, 0
.L450:
	.word	gEnemyParty
.L379:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L452
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x23
	bl	SetMonData
	b	.L345
.L453:
	.align	2, 0
.L452:
	.word	gEnemyParty
.L380:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L454
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x24
	bl	SetMonData
	b	.L345
.L455:
	.align	2, 0
.L454:
	.word	gEnemyParty
.L381:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L456
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x25
	bl	SetMonData
	b	.L345
.L457:
	.align	2, 0
.L456:
	.word	gEnemyParty
.L382:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L458
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x26
	bl	SetMonData
	b	.L345
.L459:
	.align	2, 0
.L458:
	.word	gEnemyParty
.L383:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L460
	add	r4, r4, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	add	r0, r4, #0
	mov	r1, #0x27
	str	r3, [sp, #0x34]
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	ldr	r3, [sp, #0x34]
	add	r0, r3, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L415
.L461:
	.align	2, 0
.L460:
	.word	gEnemyParty
.L384:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L462
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x27
	bl	SetMonData
	b	.L345
.L463:
	.align	2, 0
.L462:
	.word	gEnemyParty
.L385:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L464
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x28
	bl	SetMonData
	b	.L345
.L465:
	.align	2, 0
.L464:
	.word	gEnemyParty
.L386:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L466
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x29
	bl	SetMonData
	b	.L345
.L467:
	.align	2, 0
.L466:
	.word	gEnemyParty
.L387:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L468
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2a
	bl	SetMonData
	b	.L345
.L469:
	.align	2, 0
.L468:
	.word	gEnemyParty
.L388:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L470
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2b
	bl	SetMonData
	b	.L345
.L471:
	.align	2, 0
.L470:
	.word	gEnemyParty
.L389:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L472
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
.L415:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L345
.L473:
	.align	2, 0
.L472:
	.word	gEnemyParty
.L390:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L474
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x0
	bl	SetMonData
	b	.L345
.L475:
	.align	2, 0
.L474:
	.word	gEnemyParty
.L391:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L476
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x9
	bl	SetMonData
	b	.L345
.L477:
	.align	2, 0
.L476:
	.word	gEnemyParty
.L392:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L478
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x37
	bl	SetMonData
	b	.L345
.L479:
	.align	2, 0
.L478:
	.word	gEnemyParty
.L393:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L480
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x38
	bl	SetMonData
	b	.L345
.L481:
	.align	2, 0
.L480:
	.word	gEnemyParty
.L394:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L482
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x39
	bl	SetMonData
	b	.L345
.L483:
	.align	2, 0
.L482:
	.word	gEnemyParty
.L395:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L484
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3a
	bl	SetMonData
	b	.L345
.L485:
	.align	2, 0
.L484:
	.word	gEnemyParty
.L396:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L486
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3b
	bl	SetMonData
	b	.L345
.L487:
	.align	2, 0
.L486:
	.word	gEnemyParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L488
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3c
	bl	SetMonData
	b	.L345
.L489:
	.align	2, 0
.L488:
	.word	gEnemyParty
.L398:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L490
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3d
	bl	SetMonData
	b	.L345
.L491:
	.align	2, 0
.L490:
	.word	gEnemyParty
.L399:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L492
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3e
	bl	SetMonData
	b	.L345
.L493:
	.align	2, 0
.L492:
	.word	gEnemyParty
.L400:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L494
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x3f
	bl	SetMonData
	b	.L345
.L495:
	.align	2, 0
.L494:
	.word	gEnemyParty
.L401:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L496
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x16
	bl	SetMonData
	b	.L345
.L497:
	.align	2, 0
.L496:
	.word	gEnemyParty
.L402:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L498
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x17
	bl	SetMonData
	b	.L345
.L499:
	.align	2, 0
.L498:
	.word	gEnemyParty
.L403:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L500
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x18
	bl	SetMonData
	b	.L345
.L501:
	.align	2, 0
.L500:
	.word	gEnemyParty
.L404:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L502
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x21
	bl	SetMonData
	b	.L345
.L503:
	.align	2, 0
.L502:
	.word	gEnemyParty
.L405:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L504
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x2f
	bl	SetMonData
	b	.L345
.L505:
	.align	2, 0
.L504:
	.word	gEnemyParty
.L406:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L506
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x30
	bl	SetMonData
	b	.L345
.L507:
	.align	2, 0
.L506:
	.word	gEnemyParty
.L407:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L508
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x32
	bl	SetMonData
	b	.L345
.L509:
	.align	2, 0
.L508:
	.word	gEnemyParty
.L408:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L510
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x33
	bl	SetMonData
	b	.L345
.L511:
	.align	2, 0
.L510:
	.word	gEnemyParty
.L409:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L512
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x34
	bl	SetMonData
	b	.L345
.L513:
	.align	2, 0
.L512:
	.word	gEnemyParty
.L410:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L514
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x35
	bl	SetMonData
	b	.L345
.L515:
	.align	2, 0
.L514:
	.word	gEnemyParty
.L411:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L516
	add	r0, r0, r1
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r2, r2, r3
	mov	r1, #0x36
	bl	SetMonData
.L345:
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L517:
	.align	2, 0
.L516:
	.word	gEnemyParty
.Lfe28:
	.size	 sub_8038900,.Lfe28-sub_8038900
	.align	2, 0
	.globl	LinkOpponentHandlecmd3
	.type	 LinkOpponentHandlecmd3,function
	.thumb_func
LinkOpponentHandlecmd3:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L524
	ldr	r7, .L524+0x4
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r3, r1
	mul	r3, r3, r0
	ldr	r4, .L524+0x8
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	ldr	r1, .L524+0xc
	add	r0, r0, r1
	add	r5, r3, r0
	mov	r3, #0x0
	add	r0, r4, #0x2
	add	r2, r2, r0
	ldrb	r2, [r2]
	cmp	r3, r2
	bcs	.L520	@cond_branch
	add	r6, r4, #0
	add	r2, r7, #0
	add	r4, r0, #0
.L522:
	add	r1, r5, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L522	@cond_branch
.L520:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gEnemyParty
.Lfe29:
	.size	 LinkOpponentHandlecmd3,.Lfe29-LinkOpponentHandlecmd3
	.align	2, 0
	.globl	LinkOpponentHandleLoadPokeSprite
	.type	 LinkOpponentHandleLoadPokeSprite,function
	.thumb_func
LinkOpponentHandleLoadPokeSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r7, .L527
	ldr	r6, .L527+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	sl, r1
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r1, .L527+0x8
	mov	r9, r1
	add	r0, r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r2, sl
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r9
	bl	BattleLoadOpponentMonSprite
	ldrb	r0, [r6]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L527+0xc
	mov	r8, r0
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	sub_8077ABC
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r6]
	bl	sub_8077F68
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L527+0x10
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r5, .L527+0x14
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L527+0x18
	strh	r1, [r0, #0x24]
	ldrb	r2, [r6]
	add	r0, r2, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x2e]
	ldrb	r3, [r6]
	add	r0, r3, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r2, [r6]
	add	r4, r2, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L527+0x1c
	add	r2, r2, r1
	ldrb	r1, [r2]
	bl	StartSpriteAnim
	ldrb	r4, [r6]
	lsl	r0, r4, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r9
	mov	r1, #0xb
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8032984
	ldr	r1, .L527+0x20
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L527+0x24
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gEnemyParty
	.word	gUnknown_02024E8C
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xff10
	.word	gBattleMonForms
	.word	gBattleBankFunc
	.word	sub_8037A74
.Lfe30:
	.size	 LinkOpponentHandleLoadPokeSprite,.Lfe30-LinkOpponentHandleLoadPokeSprite
	.align	2, 0
	.globl	LinkOpponentHandleSendOutPoke
	.type	 LinkOpponentHandleSendOutPoke,function
	.thumb_func
LinkOpponentHandleSendOutPoke:
	push	{r4, lr}
	ldr	r1, .L530
	ldr	r4, .L530+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r1
	ldr	r3, .L530+0x8
	lsl	r0, r0, #0x9
	add	r1, r3, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x9
	add	r3, r3, #0x2
	add	r1, r1, r3
	ldrb	r1, [r1]
	bl	sub_8039430
	ldr	r1, .L530+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L530+0x10
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L531:
	.align	2, 0
.L530:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gBattleBankFunc
	.word	sub_8037E30
.Lfe31:
	.size	 LinkOpponentHandleSendOutPoke,.Lfe31-LinkOpponentHandleSendOutPoke
	.align	2, 0
	.globl	sub_8039430
	.type	 sub_8039430,function
	.thumb_func
sub_8039430:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	sub_8032AA8
	ldr	r0, .L533
	lsl	r4, r6, #0x1
	add	r4, r4, r0
	ldr	r0, .L533+0x4
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x64
	mov	r9, r1
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r5, .L533+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L533+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L533+0x10
	mov	sl, r1
	add	sl, sl, r6
	mov	r1, sl
	strb	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r5
	add	r1, r6, #0
	bl	BattleLoadOpponentMonSprite
	add	r0, r6, #0
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L533+0x14
	mov	r9, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	sub_8077ABC
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	sub_8077F68
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r9
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L533+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L533+0x1c
	mov	r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L533+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L533+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xfe
	bl	sub_8046400
	mov	r1, sl
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gBattlePartyID
	.word	gBattleBufferA
	.word	gEnemyParty
	.word	sub_80312F0
	.word	gUnknown_0300434C
	.word	gUnknown_02024E8C
	.word	gObjectBankIDs
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe32:
	.size	 sub_8039430,.Lfe32-sub_8039430
	.align	2, 0
	.globl	LinkOpponentHandleReturnPokeToBall
	.type	 LinkOpponentHandleReturnPokeToBall,function
	.thumb_func
LinkOpponentHandleReturnPokeToBall:
	push	{r4, r5, r6, lr}
	ldr	r1, .L538
	ldr	r6, .L538+0x4
	ldrb	r2, [r6]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L536	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L538+0x8
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L538+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L538+0x10
	str	r1, [r0]
	b	.L537
.L539:
	.align	2, 0
.L538:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8039648
.L536:
	ldr	r5, .L540
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L540+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldrb	r0, [r6]
	bl	sub_8032A08
	ldr	r1, .L540+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	LinkOpponentBufferExecCompleted
.L537:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L541:
	.align	2, 0
.L540:
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
.Lfe33:
	.size	 LinkOpponentHandleReturnPokeToBall,.Lfe33-LinkOpponentHandleReturnPokeToBall
	.align	2, 0
	.globl	sub_8039648
	.type	 sub_8039648,function
	.thumb_func
sub_8039648:
	push	{r4, r5, lr}
	ldr	r5, .L550
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L550+0x4
	add	r3, r0, r4
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L544	@cond_branch
	cmp	r0, #0x1
	beq	.L546	@cond_branch
	b	.L543
.L551:
	.align	2, 0
.L550:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L544:
	lsl	r0, r2, #0x2
	add	r1, r4, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L545	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L545:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L543
.L546:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L543	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x2
	bl	move_anim_start_t4
	ldr	r1, .L552
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L552+0x4
	str	r1, [r0]
.L543:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	gBattleBankFunc
	.word	sub_8037BBC
.Lfe34:
	.size	 sub_8039648,.Lfe34-sub_8039648
	.align	2, 0
	.globl	LinkOpponentHandleTrainerThrow
	.type	 LinkOpponentHandleTrainerThrow,function
	.thumb_func
LinkOpponentHandleTrainerThrow:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	ldr	r0, .L560
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L555	@cond_branch
	ldr	r6, .L560+0x4
	ldrb	r0, [r6]
	bl	GetBankIdentity
	mov	r1, #0x2
	and	r1, r1, r0
	mov	r5, #0x10
	cmp	r1, #0
	beq	.L556	@cond_branch
	ldr	r5, .L560+0x8
.L556:
	ldr	r4, .L560+0xc
	ldrb	r0, [r6]
	bl	sub_803FC34
	b	.L559
.L561:
	.align	2, 0
.L560:
	.word	gBattleTypeFlags
	.word	gActiveBank
	.word	0xfff0
	.word	gLinkPlayers
.L555:
	mov	r5, #0x0
	ldr	r4, .L562
	bl	GetMultiplayerId
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L559:
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x13]
	mov	r9, r0
	ldr	r0, .L562+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, r9
	bl	sub_8031A6C
	mov	r1, r8
	ldrb	r0, [r1]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r9
	bl	GetMonSpriteTemplate_803C5A0
	ldr	r6, .L562+0x8
	lsl	r5, r5, #0x10
	mov	r2, #0xb0
	lsl	r2, r2, #0x10
	add	r5, r5, r2
	asr	r5, r5, #0x10
	ldr	r1, .L562+0xc
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x8
	sub	r4, r4, r0
	lsl	r4, r4, #0x12
	mov	r0, #0xa0
	lsl	r0, r0, #0xe
	add	r4, r4, r0
	asr	r4, r4, #0x10
	mov	r1, r8
	ldrb	r0, [r1]
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r5, .L562+0x10
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r4, .L562+0x14
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L562+0x18
	strh	r1, [r0, #0x24]
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldr	r0, .L562+0x1c
	mov	r1, r9
	lsl	r6, r1, #0x3
	add	r0, r6, r0
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	strh	r0, [r1, #0x38]
	ldr	r0, .L562+0x20
	add	r6, r6, r0
	ldrh	r0, [r6, #0x6]
	bl	GetSpriteTileStartByTag
	mov	r2, r8
	ldrb	r1, [r2]
	add	r1, r1, r5
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r2, .L562+0x24
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L562+0x28
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, r9
	strh	r2, [r0, #0x6]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L562+0x2c
	str	r1, [r0]
	ldr	r1, .L562+0x30
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L562+0x34
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L563:
	.align	2, 0
.L562:
	.word	gLinkPlayers
	.word	gActiveBank
	.word	gUnknown_02024E8C
	.word	gTrainerFrontPicCoords
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xff10
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
	.word	0x3ff
	.word	0xfffffc00
	.word	sub_80313A0
	.word	gBattleBankFunc
	.word	sub_803757C
.Lfe35:
	.size	 LinkOpponentHandleTrainerThrow,.Lfe35-LinkOpponentHandleTrainerThrow
	.align	2, 0
	.globl	LinkOpponentHandleTrainerSlide
	.type	 LinkOpponentHandleTrainerSlide,function
	.thumb_func
LinkOpponentHandleTrainerSlide:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 LinkOpponentHandleTrainerSlide,.Lfe36-LinkOpponentHandleTrainerSlide
	.align	2, 0
	.globl	LinkOpponentHandleTrainerSlideBack
	.type	 LinkOpponentHandleTrainerSlideBack,function
	.thumb_func
LinkOpponentHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r6, .L566
	ldr	r4, .L566+0x4
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L566+0x8
	add	r0, r0, r5
	bl	oamt_add_pos2_onto_pos1
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L566+0xc
	str	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L566+0x10
	bl	StoreSpriteCallbackInData
	ldr	r1, .L566+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L566+0x18
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L567:
	.align	2, 0
.L566:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	sub_8078B34
	.word	SpriteCallbackDummy
	.word	gBattleBankFunc
	.word	sub_80375B4
.Lfe37:
	.size	 LinkOpponentHandleTrainerSlideBack,.Lfe37-LinkOpponentHandleTrainerSlideBack
	.align	2, 0
	.globl	LinkOpponentHandlecmd10
	.type	 LinkOpponentHandlecmd10,function
	.thumb_func
LinkOpponentHandlecmd10:
	push	{r4, r5, lr}
	ldr	r5, .L573
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L573+0x4
	add	r3, r0, r4
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L569	@cond_branch
	lsl	r0, r2, #0x2
	add	r1, r4, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L570	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L570:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1, #0x4]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L571
.L574:
	.align	2, 0
.L573:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L569:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L571	@cond_branch
	strb	r0, [r3, #0x4]
	mov	r0, #0x10
	mov	r1, #0x3f
	bl	PlaySE12WithPanning
	ldr	r2, .L575
	ldr	r1, .L575+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L575+0x8
	str	r1, [r0]
	ldr	r1, .L575+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L575+0x10
	str	r1, [r0]
.L571:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L576:
	.align	2, 0
.L575:
	.word	gSprites
	.word	gObjectBankIDs
	.word	sub_8010384
	.word	gBattleBankFunc
	.word	sub_8037B78
.Lfe38:
	.size	 LinkOpponentHandlecmd10,.Lfe38-LinkOpponentHandlecmd10
	.align	2, 0
	.globl	LinkOpponentHandlecmd11
	.type	 LinkOpponentHandlecmd11,function
	.thumb_func
LinkOpponentHandlecmd11:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 LinkOpponentHandlecmd11,.Lfe39-LinkOpponentHandlecmd11
	.align	2, 0
	.globl	LinkOpponentHandlecmd12
	.type	 LinkOpponentHandlecmd12,function
	.thumb_func
LinkOpponentHandlecmd12:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 LinkOpponentHandlecmd12,.Lfe40-LinkOpponentHandlecmd12
	.align	2, 0
	.globl	LinkOpponentHandleBallThrow
	.type	 LinkOpponentHandleBallThrow,function
	.thumb_func
LinkOpponentHandleBallThrow:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 LinkOpponentHandleBallThrow,.Lfe41-LinkOpponentHandleBallThrow
	.align	2, 0
	.globl	LinkOpponentHandlePuase
	.type	 LinkOpponentHandlePuase,function
	.thumb_func
LinkOpponentHandlePuase:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 LinkOpponentHandlePuase,.Lfe42-LinkOpponentHandlePuase
	.align	2, 0
	.globl	LinkOpponentHandleMoveAnimation
	.type	 LinkOpponentHandleMoveAnimation,function
	.thumb_func
LinkOpponentHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L585
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5912
	b	.L582	@long jump
.LCB5912:
	ldr	r0, .L585+0x4
	mov	ip, r0
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L585+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L585+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L585+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L585+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L585+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L585+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L585+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	sub_8031720
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L583	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L582
.L586:
	.align	2, 0
.L585:
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gUnknown_0202F7C4
	.word	gMovePowerMoveAnim
	.word	gMoveDmgMoveAnim
	.word	gHappinessMoveAnim
	.word	gWeatherMoveAnim
	.word	gDisableStructMoveAnim
	.word	gPID_perBank
.L583:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L587
	add	r0, r0, r1
	strb	r2, [r0, #0x4]
	ldr	r1, .L587+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L587+0x8
	str	r1, [r0]
.L582:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8039B64
.Lfe43:
	.size	 LinkOpponentHandleMoveAnimation,.Lfe43-LinkOpponentHandleMoveAnimation
	.align	2, 0
	.globl	sub_8039B64
	.type	 sub_8039B64,function
	.thumb_func
sub_8039B64:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r2, .L603
	ldr	r5, .L603+0x4
	ldrb	r3, [r5]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	r9, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r6, r2, #0x2
	mov	r8, r6
	add	r0, r1, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r2, r2, #0xb
	add	r1, r1, r2
	ldrb	r7, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r6, .L603+0x8
	add	r0, r0, r6
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L593	@cond_branch
	cmp	r2, #0x1
	bgt	.L602	@cond_branch
	cmp	r2, #0
	beq	.L591	@cond_branch
	b	.L590
.L604:
	.align	2, 0
.L603:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L602:
	cmp	r2, #0x2
	beq	.L595	@cond_branch
	cmp	r2, #0x3
	beq	.L598	@cond_branch
	b	.L590
.L591:
	lsl	r1, r3, #0x2
	add	r0, r6, #0
	sub	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0x4
	bne	.L592	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L592:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L590
.L593:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L590	@cond_branch
	mov	r0, #0x0
	bl	sub_80326EC
	add	r0, r4, #0
	bl	ExecuteMoveAnim
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x2
	strb	r0, [r1, #0x4]
	b	.L590
.L595:
	ldr	r0, .L605
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L605+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L590	@cond_branch
	mov	r0, #0x1
	bl	sub_80326EC
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r4, r6, #0
	sub	r4, r4, #0x10
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L597	@cond_branch
	cmp	r7, #0x1
	bhi	.L597	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	move_anim_start_t4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0]
	mov	r1, #0x9
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L597:
	ldr	r0, .L605+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L605+0xc
	add	r0, r0, r1
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L590
.L606:
	.align	2, 0
.L605:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L598:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L590	@cond_branch
	bl	sub_8031F24
	ldrb	r0, [r5]
	lsl	r2, r0, #0x9
	mov	r3, r9
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r8
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	sub_80324BC
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strb	r4, [r0, #0x4]
	bl	LinkOpponentBufferExecCompleted
.L590:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 sub_8039B64,.Lfe44-sub_8039B64
	.align	2, 0
	.globl	LinkOpponentHandlePrintString
	.type	 LinkOpponentHandlePrintString,function
	.thumb_func
LinkOpponentHandlePrintString:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L608
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L608+0x4
	strh	r1, [r0]
	ldr	r4, .L608+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	ldr	r1, .L608+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	BufferStringBattle
	ldr	r0, .L608+0x10
	ldr	r1, .L608+0x14
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L608+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L608+0x1c
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L609:
	.align	2, 0
.L608:
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gActiveBank
	.word	gBattleBufferA+0x2
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gBattleBankFunc
	.word	sub_8037C2C
.Lfe45:
	.size	 LinkOpponentHandlePrintString,.Lfe45-LinkOpponentHandlePrintString
	.align	2, 0
	.globl	LinkOpponentHandlePrintStringPlayerOnly
	.type	 LinkOpponentHandlePrintStringPlayerOnly,function
	.thumb_func
LinkOpponentHandlePrintStringPlayerOnly:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 LinkOpponentHandlePrintStringPlayerOnly,.Lfe46-LinkOpponentHandlePrintStringPlayerOnly
	.align	2, 0
	.globl	LinkOpponentHandlecmd18
	.type	 LinkOpponentHandlecmd18,function
	.thumb_func
LinkOpponentHandlecmd18:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 LinkOpponentHandlecmd18,.Lfe47-LinkOpponentHandlecmd18
	.align	2, 0
	.globl	LinkOpponentHandlecmd19
	.type	 LinkOpponentHandlecmd19,function
	.thumb_func
LinkOpponentHandlecmd19:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 LinkOpponentHandlecmd19,.Lfe48-LinkOpponentHandlecmd19
	.align	2, 0
	.globl	LinkOpponentHandlecmd20
	.type	 LinkOpponentHandlecmd20,function
	.thumb_func
LinkOpponentHandlecmd20:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 LinkOpponentHandlecmd20,.Lfe49-LinkOpponentHandlecmd20
	.align	2, 0
	.globl	LinkOpponentHandleOpenBag
	.type	 LinkOpponentHandleOpenBag,function
	.thumb_func
LinkOpponentHandleOpenBag:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 LinkOpponentHandleOpenBag,.Lfe50-LinkOpponentHandleOpenBag
	.align	2, 0
	.globl	LinkOpponentHandlecmd22
	.type	 LinkOpponentHandlecmd22,function
	.thumb_func
LinkOpponentHandlecmd22:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 LinkOpponentHandlecmd22,.Lfe51-LinkOpponentHandlecmd22
	.align	2, 0
	.globl	LinkOpponentHandlecmd23
	.type	 LinkOpponentHandlecmd23,function
	.thumb_func
LinkOpponentHandlecmd23:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 LinkOpponentHandlecmd23,.Lfe52-LinkOpponentHandlecmd23
	.align	2, 0
	.globl	LinkOpponentHandleHealthBarUpdate
	.type	 LinkOpponentHandleHealthBarUpdate,function
	.thumb_func
LinkOpponentHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	bl	load_gfxc_health_bar
	ldr	r3, .L620
	ldr	r0, .L620+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r2, r4, #0x9
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r3, r3, #0x3
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L620+0x8
	cmp	r7, r0
	beq	.L618	@cond_branch
	ldr	r6, .L620+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L620+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L620+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	sub_8043D84
	b	.L619
.L621:
	.align	2, 0
.L620:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	0x7fff
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gHealthboxIDs
.L618:
	ldr	r1, .L622
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L622+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L622+0x8
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	sub_8043D84
.L619:
	ldr	r1, .L622+0xc
	ldr	r0, .L622+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L622+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L623:
	.align	2, 0
.L622:
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gHealthboxIDs
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_8037B24
.Lfe53:
	.size	 LinkOpponentHandleHealthBarUpdate,.Lfe53-LinkOpponentHandleHealthBarUpdate
	.align	2, 0
	.globl	LinkOpponentHandleExpBarUpdate
	.type	 LinkOpponentHandleExpBarUpdate,function
	.thumb_func
LinkOpponentHandleExpBarUpdate:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 LinkOpponentHandleExpBarUpdate,.Lfe54-LinkOpponentHandleExpBarUpdate
	.align	2, 0
	.globl	LinkOpponentHandleStatusIconUpdate
	.type	 LinkOpponentHandleStatusIconUpdate,function
	.thumb_func
LinkOpponentHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L627
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L626	@cond_branch
	ldr	r0, .L627+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L627+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L627+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	sub_8045A5C
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L627+0x10
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L627+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L627+0x18
	str	r1, [r0]
.L626:
	pop	{r4}
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gActiveBank
	.word	gHealthboxIDs
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_8037FAC
.Lfe55:
	.size	 LinkOpponentHandleStatusIconUpdate,.Lfe55-LinkOpponentHandleStatusIconUpdate
	.align	2, 0
	.globl	LinkOpponentHandleStatusAnimation
	.type	 LinkOpponentHandleStatusAnimation,function
	.thumb_func
LinkOpponentHandleStatusAnimation:
	push	{r4, r5, lr}
	ldr	r5, .L631
	ldrb	r0, [r5]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L630	@cond_branch
	ldr	r4, .L631+0x4
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	add	r2, r4, #0x4
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	add	r4, r4, #0x5
	add	r3, r3, r4
	ldrb	r2, [r3]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	move_anim_start_t2_for_situation
	ldr	r1, .L631+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L631+0xc
	str	r1, [r0]
.L630:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L632:
	.align	2, 0
.L631:
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gBattleBankFunc
	.word	sub_8037FAC
.Lfe56:
	.size	 LinkOpponentHandleStatusAnimation,.Lfe56-LinkOpponentHandleStatusAnimation
	.align	2, 0
	.globl	LinkOpponentHandleStatusXor
	.type	 LinkOpponentHandleStatusXor,function
	.thumb_func
LinkOpponentHandleStatusXor:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 LinkOpponentHandleStatusXor,.Lfe57-LinkOpponentHandleStatusXor
	.align	2, 0
	.globl	LinkOpponentHandlecmd29
	.type	 LinkOpponentHandlecmd29,function
	.thumb_func
LinkOpponentHandlecmd29:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 LinkOpponentHandlecmd29,.Lfe58-LinkOpponentHandlecmd29
	.align	2, 0
	.globl	LinkOpponentHandleDMATransfer
	.type	 LinkOpponentHandleDMATransfer,function
	.thumb_func
LinkOpponentHandleDMATransfer:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 LinkOpponentHandleDMATransfer,.Lfe59-LinkOpponentHandleDMATransfer
	.align	2, 0
	.globl	LinkOpponentHandlecmd31
	.type	 LinkOpponentHandlecmd31,function
	.thumb_func
LinkOpponentHandlecmd31:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 LinkOpponentHandlecmd31,.Lfe60-LinkOpponentHandlecmd31
	.align	2, 0
	.globl	LinkOpponentHandlecmd32
	.type	 LinkOpponentHandlecmd32,function
	.thumb_func
LinkOpponentHandlecmd32:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 LinkOpponentHandlecmd32,.Lfe61-LinkOpponentHandlecmd32
	.align	2, 0
	.globl	LinkOpponentHandlecmd33
	.type	 LinkOpponentHandlecmd33,function
	.thumb_func
LinkOpponentHandlecmd33:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 LinkOpponentHandlecmd33,.Lfe62-LinkOpponentHandlecmd33
	.align	2, 0
	.globl	LinkOpponentHandlecmd34
	.type	 LinkOpponentHandlecmd34,function
	.thumb_func
LinkOpponentHandlecmd34:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 LinkOpponentHandlecmd34,.Lfe63-LinkOpponentHandlecmd34
	.align	2, 0
	.globl	LinkOpponentHandlecmd35
	.type	 LinkOpponentHandlecmd35,function
	.thumb_func
LinkOpponentHandlecmd35:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 LinkOpponentHandlecmd35,.Lfe64-LinkOpponentHandlecmd35
	.align	2, 0
	.globl	LinkOpponentHandlecmd36
	.type	 LinkOpponentHandlecmd36,function
	.thumb_func
LinkOpponentHandlecmd36:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 LinkOpponentHandlecmd36,.Lfe65-LinkOpponentHandlecmd36
	.align	2, 0
	.globl	LinkOpponentHandlecmd37
	.type	 LinkOpponentHandlecmd37,function
	.thumb_func
LinkOpponentHandlecmd37:
	push	{lr}
	ldr	r2, .L643
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	gUnknown_020238C8
.Lfe66:
	.size	 LinkOpponentHandlecmd37,.Lfe66-LinkOpponentHandlecmd37
	.align	2, 0
	.globl	LinkOpponentHandlecmd38
	.type	 LinkOpponentHandlecmd38,function
	.thumb_func
LinkOpponentHandlecmd38:
	push	{lr}
	ldr	r3, .L646
	ldr	r1, .L646+0x4
	ldr	r0, .L646+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	gUnknown_020238C8
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe67:
	.size	 LinkOpponentHandlecmd38,.Lfe67-LinkOpponentHandlecmd38
	.align	2, 0
	.globl	LinkOpponentHandlecmd39
	.type	 LinkOpponentHandlecmd39,function
	.thumb_func
LinkOpponentHandlecmd39:
	push	{lr}
	ldr	r2, .L649
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	gUnknown_020238C8
.Lfe68:
	.size	 LinkOpponentHandlecmd39,.Lfe68-LinkOpponentHandlecmd39
	.align	2, 0
	.globl	LinkOpponentHandlecmd40
	.type	 LinkOpponentHandlecmd40,function
	.thumb_func
LinkOpponentHandlecmd40:
	push	{lr}
	ldr	r3, .L652
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L653:
	.align	2, 0
.L652:
	.word	gUnknown_020238C8
.Lfe69:
	.size	 LinkOpponentHandlecmd40,.Lfe69-LinkOpponentHandlecmd40
	.align	2, 0
	.globl	LinkOpponentHandleHitAnimation
	.type	 LinkOpponentHandleHitAnimation,function
	.thumb_func
LinkOpponentHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L657
	ldr	r2, .L657+0x4
	ldr	r4, .L657+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L655	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L656
.L658:
	.align	2, 0
.L657:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
.L655:
	ldr	r1, .L659
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	sub_8047858
	ldr	r1, .L659+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L659+0x8
	str	r1, [r0]
.L656:
	pop	{r4}
	pop	{r0}
	bx	r0
.L660:
	.align	2, 0
.L659:
	.word	gDoingBattleAnim
	.word	gBattleBankFunc
	.word	dp01t_0F_4_move_anim
.Lfe70:
	.size	 LinkOpponentHandleHitAnimation,.Lfe70-LinkOpponentHandleHitAnimation
	.align	2, 0
	.globl	LinkOpponentHandlecmd42
	.type	 LinkOpponentHandlecmd42,function
	.thumb_func
LinkOpponentHandlecmd42:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 LinkOpponentHandlecmd42,.Lfe71-LinkOpponentHandlecmd42
	.align	2, 0
	.globl	LinkOpponentHandleEffectivenessSound
	.type	 LinkOpponentHandleEffectivenessSound,function
	.thumb_func
LinkOpponentHandleEffectivenessSound:
	push	{r4, lr}
	ldr	r4, .L665
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L663	@cond_branch
	mov	r3, #0xc0
.L663:
	ldr	r2, .L665+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	LinkOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L666:
	.align	2, 0
.L665:
	.word	gActiveBank
	.word	gBattleBufferA
.Lfe72:
	.size	 LinkOpponentHandleEffectivenessSound,.Lfe72-LinkOpponentHandleEffectivenessSound
	.align	2, 0
	.globl	LinkOpponentHandlecmd44
	.type	 LinkOpponentHandlecmd44,function
	.thumb_func
LinkOpponentHandlecmd44:
	push	{lr}
	ldr	r2, .L668
	ldr	r0, .L668+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L669:
	.align	2, 0
.L668:
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe73:
	.size	 LinkOpponentHandlecmd44,.Lfe73-LinkOpponentHandlecmd44
	.align	2, 0
	.globl	LinkOpponentHandleFaintingCry
	.type	 LinkOpponentHandleFaintingCry,function
	.thumb_func
LinkOpponentHandleFaintingCry:
	push	{lr}
	ldr	r1, .L671
	ldr	r0, .L671+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L671+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	mov	r2, #0x5
	bl	PlayCry3
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gEnemyParty
.Lfe74:
	.size	 LinkOpponentHandleFaintingCry,.Lfe74-LinkOpponentHandleFaintingCry
	.align	2, 0
	.globl	LinkOpponentHandleIntroSlide
	.type	 LinkOpponentHandleIntroSlide,function
	.thumb_func
LinkOpponentHandleIntroSlide:
	push	{lr}
	ldr	r1, .L674
	ldr	r0, .L674+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_80E43C0
	ldr	r2, .L674+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L675:
	.align	2, 0
.L674:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gUnknown_02024DE8
.Lfe75:
	.size	 LinkOpponentHandleIntroSlide,.Lfe75-LinkOpponentHandleIntroSlide
	.align	2, 0
	.globl	LinkOpponentHandleTrainerBallThrow
	.type	 LinkOpponentHandleTrainerBallThrow,function
	.thumb_func
LinkOpponentHandleTrainerBallThrow:
	push	{r4, r5, r6, lr}
	ldr	r5, .L678
	ldr	r6, .L678+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L678+0x8
	add	r0, r0, r4
	bl	oamt_add_pos2_onto_pos1
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x8c
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L678+0xc
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L678+0x10
	bl	StoreSpriteCallbackInData
	ldr	r0, .L678+0x14
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L678+0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r6]
	strh	r0, [r1, #0x8]
	ldrb	r3, [r6]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r2, .L678+0x1c
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L677	@cond_branch
	ldr	r0, .L678+0x20
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L678+0x24
	str	r1, [r0]
.L677:
	add	r2, r2, #0x30
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L678+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L678+0x2c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	sub_8078B34
	.word	sub_803A3A8
	.word	sub_803A2C4
	.word	gTasks
	.word	gSharedMem+0x17810
	.word	gUnknown_02024E68
	.word	sub_8044CA0
	.word	gBattleBankFunc
	.word	nullsub_47
.Lfe76:
	.size	 LinkOpponentHandleTrainerBallThrow,.Lfe76-LinkOpponentHandleTrainerBallThrow
	.align	2, 0
	.globl	sub_803A2C4
	.type	 sub_803A2C4,function
	.thumb_func
sub_803A2C4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r7, .L684
	ldrb	r0, [r7]
	mov	r9, r0
	ldr	r1, .L684+0x4
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L682	@cond_branch
	ldr	r0, .L684+0x8
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L681	@cond_branch
.L682:
	ldr	r0, .L684+0xc
	ldrb	r1, [r7]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L684+0x10
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_8039430
	b	.L683
.L685:
	.align	2, 0
.L684:
	.word	gActiveBank
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleBufferA
	.word	gBattlePartyID
.L681:
	ldr	r4, .L686
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r4, r4, #0x1
	add	r1, r1, r4
	ldr	r6, .L686+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_8039430
	ldrb	r0, [r7]
	mov	r5, #0x2
	eor	r0, r0, r5
	strb	r0, [r7]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r1, r1, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_8039430
	ldrb	r0, [r7]
	eor	r0, r0, r5
	strb	r0, [r7]
.L683:
	ldr	r1, .L686+0x8
	ldr	r2, .L686+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L686+0x10
	str	r1, [r0]
	mov	r0, r9
	strb	r0, [r2]
	mov	r0, r8
	bl	DestroyTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L687:
	.align	2, 0
.L686:
	.word	gBattleBufferA
	.word	gBattlePartyID
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_8037840
.Lfe77:
	.size	 sub_803A2C4,.Lfe77-sub_803A2C4
	.align	2, 0
	.globl	sub_803A3A8
	.type	 sub_803A3A8,function
	.thumb_func
sub_803A3A8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x6]
	bl	sub_8031B74
	ldrh	r0, [r4, #0x38]
	ldr	r1, .L689
	and	r1, r1, r0
	ldrh	r2, [r4, #0x4]
	ldr	r0, .L689+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L690:
	.align	2, 0
.L689:
	.word	0x3ff
	.word	0xfffffc00
.Lfe78:
	.size	 sub_803A3A8,.Lfe78-sub_803A3A8
	.align	2, 0
	.globl	LinkOpponentHandlecmd48
	.type	 LinkOpponentHandlecmd48,function
	.thumb_func
LinkOpponentHandlecmd48:
	push	{r4, r5, r6, lr}
	ldr	r1, .L697
	ldr	r0, .L697+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L692	@cond_branch
	add	r0, r2, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L692	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L691
.L698:
	.align	2, 0
.L697:
	.word	gBattleBufferA
	.word	gActiveBank
.L692:
	ldr	r3, .L699
	ldrb	r1, [r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L699+0x4
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L699+0x8
	ldrb	r2, [r3]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r6, r3, #0
	cmp	r0, #0
	beq	.L693	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r4
	ldrb	r2, [r3, #0x1]
	lsl	r1, r2, #0x1a
	lsr	r0, r1, #0x1b
	cmp	r0, #0x1
	bhi	.L694	@cond_branch
	add	r0, r0, #0x1
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x1]
	b	.L691
.L700:
	.align	2, 0
.L699:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBufferA
.L694:
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
.L693:
	add	r5, r6, #0
	ldrb	r0, [r5]
	lsl	r3, r0, #0x9
	ldr	r4, .L701
	add	r1, r3, r4
	sub	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	sub	r4, r4, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	sub_8044804
	ldr	r2, .L701+0x4
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r2, #0x0
	strb	r0, [r1]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r3, .L701+0x8
	add	r0, r0, r3
	strb	r2, [r0, #0x5]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L696	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L696:
	ldr	r0, .L701+0xc
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L701+0x10
	str	r0, [r1]
.L691:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L702:
	.align	2, 0
.L701:
	.word	gBattleBufferA+0x4
	.word	gUnknown_02024E68
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_803A4E0
.Lfe79:
	.size	 LinkOpponentHandlecmd48,.Lfe79-LinkOpponentHandlecmd48
	.align	2, 0
	.globl	sub_803A4E0
	.type	 sub_803A4E0,function
	.thumb_func
sub_803A4E0:
	push	{r4, lr}
	ldr	r4, .L705
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r3, .L705+0x4
	add	r0, r0, r3
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L704	@cond_branch
	ldrb	r0, [r4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	bl	LinkOpponentBufferExecCompleted
.L704:
	pop	{r4}
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe80:
	.size	 sub_803A4E0,.Lfe80-sub_803A4E0
	.align	2, 0
	.globl	LinkOpponentHandlecmd49
	.type	 LinkOpponentHandlecmd49,function
	.thumb_func
LinkOpponentHandlecmd49:
	push	{lr}
	ldr	r0, .L709
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r1, .L709+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L708	@cond_branch
	ldr	r2, .L709+0x8
	ldr	r0, .L709+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L709+0x10
	str	r1, [r0]
.L708:
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.L710:
	.align	2, 0
.L709:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gTasks
	.word	gUnknown_02024E68
	.word	sub_8044CA0
.Lfe81:
	.size	 LinkOpponentHandlecmd49,.Lfe81-LinkOpponentHandlecmd49
	.align	2, 0
	.globl	LinkOpponentHandlecmd50
	.type	 LinkOpponentHandlecmd50,function
	.thumb_func
LinkOpponentHandlecmd50:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 LinkOpponentHandlecmd50,.Lfe82-LinkOpponentHandlecmd50
	.align	2, 0
	.globl	LinkOpponentHandleSpriteInvisibility
	.type	 LinkOpponentHandleSpriteInvisibility,function
	.thumb_func
LinkOpponentHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L714
	ldrb	r0, [r4]
	bl	AnimBankSpriteExists
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L713	@cond_branch
	ldr	r3, .L714+0x4
	ldr	r0, .L714+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L714+0xc
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r1, [r1]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	sub_8031F88
.L713:
	bl	LinkOpponentBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L715:
	.align	2, 0
.L714:
	.word	gActiveBank
	.word	gSprites
	.word	gObjectBankIDs
	.word	gBattleBufferA
.Lfe83:
	.size	 LinkOpponentHandleSpriteInvisibility,.Lfe83-LinkOpponentHandleSpriteInvisibility
	.align	2, 0
	.globl	LinkOpponentHandleBattleAnimation
	.type	 LinkOpponentHandleBattleAnimation,function
	.thumb_func
LinkOpponentHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L720
	ldrb	r0, [r6]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L717	@cond_branch
	ldr	r5, .L720+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	move_anim_start_t3
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L718	@cond_branch
	bl	LinkOpponentBufferExecCompleted
	b	.L717
.L721:
	.align	2, 0
.L720:
	.word	gActiveBank
	.word	gBattleBufferA
.L718:
	ldr	r0, .L722
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L722+0x4
	str	r0, [r1]
.L717:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L723:
	.align	2, 0
.L722:
	.word	gBattleBankFunc
	.word	sub_8037FD8
.Lfe84:
	.size	 LinkOpponentHandleBattleAnimation,.Lfe84-LinkOpponentHandleBattleAnimation
	.align	2, 0
	.globl	LinkOpponentHandleLinkStandbyMsg
	.type	 LinkOpponentHandleLinkStandbyMsg,function
	.thumb_func
LinkOpponentHandleLinkStandbyMsg:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 LinkOpponentHandleLinkStandbyMsg,.Lfe85-LinkOpponentHandleLinkStandbyMsg
	.align	2, 0
	.globl	LinkOpponentHandleResetActionMoveSelection
	.type	 LinkOpponentHandleResetActionMoveSelection,function
	.thumb_func
LinkOpponentHandleResetActionMoveSelection:
	push	{lr}
	bl	LinkOpponentBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 LinkOpponentHandleResetActionMoveSelection,.Lfe86-LinkOpponentHandleResetActionMoveSelection
	.align	2, 0
	.globl	LinkOpponentHandlecmd55
	.type	 LinkOpponentHandlecmd55,function
	.thumb_func
LinkOpponentHandlecmd55:
	push	{lr}
	ldr	r1, .L729
	ldr	r0, .L729+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r2, [r0]
	cmp	r2, #0x3
	bne	.L727	@cond_branch
	ldr	r0, .L729+0x8
	strb	r2, [r0]
	b	.L728
.L730:
	.align	2, 0
.L729:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattleOutcome
.L727:
	ldr	r0, .L731
	mov	r1, #0x3
	eor	r1, r1, r2
	strb	r1, [r0]
.L728:
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	LinkOpponentBufferExecCompleted
	ldr	r1, .L731+0x4
	ldr	r0, .L731+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L731+0xc
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L732:
	.align	2, 0
.L731:
	.word	gBattleOutcome
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_8037F34
.Lfe87:
	.size	 LinkOpponentHandlecmd55,.Lfe87-LinkOpponentHandlecmd55
	.align	2, 0
	.globl	LinkOpponentHandlecmd56
	.type	 LinkOpponentHandlecmd56,function
	.thumb_func
LinkOpponentHandlecmd56:
	bx	lr
.Lfe88:
	.size	 LinkOpponentHandlecmd56,.Lfe88-LinkOpponentHandlecmd56
.text
	.align	2, 0
