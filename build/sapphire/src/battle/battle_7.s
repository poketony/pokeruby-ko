@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	sub_80312F0
	.type	 sub_80312F0,function
	.thumb_func
sub_80312F0:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x30]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r7, .L7
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r5, r1, #0x2
	add	r3, r5, r7
	add	r0, r3, #0
	add	r0, r0, #0x3f
	ldrb	r4, [r0]
	lsl	r0, r4, #0x1a
	cmp	r0, #0
	bge	.L3	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L3	@cond_branch
	add	r1, r3, #0
	add	r1, r1, #0x2c
	ldrb	r2, [r1]
	lsl	r0, r2, #0x19
	cmp	r0, #0
	bge	.L4	@cond_branch
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	b	.L3
.L8:
	.align	2, 0
.L7:
	.word	gSprites
.L4:
	lsl	r0, r4, #0x1b
	cmp	r0, #0
	bge	.L3	@cond_branch
	add	r0, r7, #0
	add	r0, r0, #0x1c
	add	r0, r5, r0
	ldr	r1, .L9
	str	r1, [r0]
	add	r0, r3, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	ldr	r0, .L9+0x4
	str	r0, [r6, #0x1c]
.L3:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	sub_80105DC
	.word	SpriteCallbackDummy
.Lfe1:
	.size	 sub_80312F0,.Lfe1-sub_80312F0
	.align	2, 0
	.globl	unref_sub_8031364
	.type	 unref_sub_8031364,function
	.thumb_func
unref_sub_8031364:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	add	r3, r4, #0
	add	r3, r3, #0x2c
	ldrb	r0, [r3]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r0, .L14
	str	r0, [r4, #0x1c]
	cmp	r1, #0
	bne	.L12	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L13
.L15:
	.align	2, 0
.L14:
	.word	SpriteCallbackDummy
.L12:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L13:
	add	r0, r4, #0
	bl	AnimateSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 unref_sub_8031364,.Lfe2-unref_sub_8031364
	.align	2, 0
	.globl	sub_80313A0
	.type	 sub_80313A0,function
	.thumb_func
sub_80313A0:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L19
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L17	@cond_branch
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L17	@cond_branch
	ldr	r0, .L19+0x4
	str	r0, [r2, #0x1c]
.L17:
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gUnknown_02024DE8
	.word	SpriteCallbackDummy
.Lfe3:
	.size	 sub_80313A0,.Lfe3-sub_80313A0
	.align	2, 0
	.globl	move_anim_start_t2_for_situation
	.type	 move_anim_start_t2_for_situation,function
	.thumb_func
move_anim_start_t2_for_situation:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	ldr	r5, .L45
	ldrb	r2, [r5]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r6, .L45+0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r3, #0x10
	orr	r2, r2, r3
	strb	r2, [r1]
	cmp	r0, #0
	bne	.L22	@cond_branch
	cmp	r4, #0x20
	bne	.L23	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x6
	bl	move_anim_start_t2
	b	.L34
.L46:
	.align	2, 0
.L45:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L23:
	cmp	r4, #0x8
	beq	.L26	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L25	@cond_branch
.L26:
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	move_anim_start_t2
	b	.L34
.L25:
	cmp	r4, #0x10
	bne	.L28	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	move_anim_start_t2
	b	.L34
.L28:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L30	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x4
	bl	move_anim_start_t2
	b	.L34
.L30:
	cmp	r4, #0x40
	bne	.L43	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x5
	bl	move_anim_start_t2
	b	.L34
.L22:
	mov	r0, #0xf0
	lsl	r0, r0, #0xc
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L35	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	move_anim_start_t2
	b	.L34
.L35:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L37	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	move_anim_start_t2
	b	.L34
.L37:
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L39	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x7
	bl	move_anim_start_t2
	b	.L34
.L39:
	mov	r0, #0x80
	lsl	r0, r0, #0x14
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x8
	bl	move_anim_start_t2
	b	.L34
.L41:
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x9
	bl	move_anim_start_t2
	b	.L34
.L43:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L34:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 move_anim_start_t2_for_situation,.Lfe4-move_anim_start_t2_for_situation
	.align	2, 0
	.globl	move_anim_start_t3
	.type	 move_anim_start_t3,function
	.thumb_func
move_anim_start_t3:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r7, r4, #0x10
	cmp	r5, #0
	bne	.L48	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L48	@cond_branch
	ldr	r0, .L52
	add	r0, r6, r0
	mov	r2, #0x7f
	add	r1, r7, #0
	and	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x1
	b	.L51
.L53:
	.align	2, 0
.L52:
	.word	gBattleMonForms
.L48:
	lsl	r1, r6, #0x2
	ldr	r0, .L54
	add	r4, r1, r0
	ldrb	r1, [r4]
	mov	r0, #0x4
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L50	@cond_branch
	add	r0, r5, #0
	bl	sub_803163C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L49	@cond_branch
	mov	r0, #0x1
	b	.L51
.L55:
	.align	2, 0
.L54:
	.word	gSharedMem+0x17800
.L49:
	ldrb	r1, [r4]
	mov	r0, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L50	@cond_branch
	cmp	r5, #0x2
	bne	.L50	@cond_branch
	ldr	r1, .L56
	ldr	r0, .L56+0x4
	add	r0, r6, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L50	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x1
	bl	refresh_graphics_maybe
	add	r0, r6, #0
	bl	sub_80324E0
	mov	r0, #0x1
	b	.L51
.L57:
	.align	2, 0
.L56:
	.word	gSprites
	.word	gObjectBankIDs
.L50:
	ldr	r0, .L58
	mov	r1, r9
	strb	r1, [r0]
	ldr	r0, .L58+0x4
	mov	r1, sl
	strb	r1, [r0]
	ldr	r4, .L58+0x8
	strh	r7, [r4]
	ldr	r0, .L58+0xc
	add	r1, r5, #0
	mov	r2, #0x0
	bl	DoMoveAnim
	ldr	r0, .L58+0x10
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L58+0x14
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r6, [r1, #0x8]
	mov	r0, #0x8
	ldrsh	r1, [r1, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	sub	r4, r4, #0x30
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x0
.L51:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
	.word	gSharedMem+0x17840
	.word	gBattleAnims_General
	.word	sub_80315E8
	.word	gTasks
.Lfe5:
	.size	 move_anim_start_t3,.Lfe5-move_anim_start_t3
	.align	2, 0
	.globl	sub_80315E8
	.type	 sub_80315E8,function
	.thumb_func
sub_80315E8:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L62
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L62+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L61	@cond_branch
	ldr	r1, .L62+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L62+0xc
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L61:
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gTasks
	.word	gSharedMem+0x17810
.Lfe6:
	.size	 sub_80315E8,.Lfe6-sub_80315E8
	.align	2, 0
	.globl	sub_803163C
	.type	 sub_803163C,function
	.thumb_func
sub_803163C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xd
	bgt	.L74	@cond_branch
	cmp	r0, #0xa
	bge	.L71	@cond_branch
	cmp	r0, #0x2
	beq	.L71	@cond_branch
	b	.L72
.L74:
	cmp	r0, #0x11
	bne	.L72	@cond_branch
.L71:
	mov	r0, #0x1
	b	.L75
.L72:
	mov	r0, #0x0
.L75:
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 sub_803163C,.Lfe7-sub_803163C
	.align	2, 0
	.globl	move_anim_start_t4
	.type	 move_anim_start_t4,function
	.thumb_func
move_anim_start_t4:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L77
	strb	r1, [r0]
	ldr	r0, .L77+0x4
	strb	r2, [r0]
	ldr	r0, .L77+0x8
	add	r1, r3, #0
	mov	r2, #0x0
	bl	DoMoveAnim
	ldr	r0, .L77+0xc
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L77+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	mov	r0, #0x8
	ldrsh	r1, [r1, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L77+0x14
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
	.word	gBattleAnims_Special
	.word	sub_80316CC
	.word	gTasks
	.word	gSharedMem+0x17810
.Lfe8:
	.size	 move_anim_start_t4,.Lfe8-move_anim_start_t4
	.align	2, 0
	.globl	sub_80316CC
	.type	 sub_80316CC,function
	.thumb_func
sub_80316CC:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L81
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L81+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L80	@cond_branch
	ldr	r1, .L81+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L81+0xc
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L80:
	pop	{r4}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gTasks
	.word	gSharedMem+0x17810
.Lfe9:
	.size	 sub_80316CC,.Lfe9-sub_80316CC
	.align	2, 0
	.globl	sub_8031720
	.type	 sub_8031720,function
	.thumb_func
sub_8031720:
	mov	r0, #0x0
	bx	lr
.Lfe10:
	.size	 sub_8031720,.Lfe10-sub_8031720
	.align	2, 0
	.globl	mplay_80342A4
	.type	 mplay_80342A4,function
	.thumb_func
mplay_80342A4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r5, #0x0
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L85	@cond_branch
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	ldr	r2, .L90
	add	r1, r1, r2
	ldrb	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x8]
	ldr	r0, .L90+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x1d
	bls	.L89	@cond_branch
	ldr	r0, .L90+0x8
	bl	m4aMPlayStop
	ldr	r0, .L90+0xc
	bl	m4aMPlayStop
.L85:
	cmp	r5, #0
	beq	.L87	@cond_branch
.L89:
	mov	r0, #0x1
	b	.L88
.L91:
	.align	2, 0
.L90:
	.word	gSharedMem+0x17810
	.word	gActiveBank
	.word	gMPlay_SE1
	.word	gMPlay_SE2
.L87:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L92
	add	r0, r0, r1
	strb	r5, [r0, #0x8]
	mov	r0, #0x0
.L88:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L93:
	.align	2, 0
.L92:
	.word	gSharedMem+0x17810
.Lfe11:
	.size	 mplay_80342A4,.Lfe11-mplay_80342A4
	.align	2, 0
	.globl	BattleLoadOpponentMonSprite
	.type	 BattleLoadOpponentMonSprite,function
	.thumb_func
BattleLoadOpponentMonSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffec
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0xc]
	mov	r0, r9
	lsl	r1, r0, #0x2
	ldr	r0, .L102
	add	r2, r1, r0
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L95	@cond_branch
	mov	r0, r8
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r7, [sp, #0xc]
	b	.L96
.L103:
	.align	2, 0
.L102:
	.word	gSharedMem+0x17800
.L95:
	ldrh	r6, [r2, #0x2]
	ldr	r0, .L104
	add	r0, r1, r0
	ldr	r7, [r0]
.L96:
	mov	r0, r8
	mov	r1, #0x1
	bl	GetMonData
	mov	sl, r0
	mov	r0, r9
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsl	r5, r6, #0x3
	ldr	r1, .L104+0x4
	add	r5, r5, r1
	ldr	r1, .L104+0x8
	lsl	r2, r6, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L104+0xc
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	str	r0, [sp]
	str	r6, [sp, #0x4]
	str	r7, [sp, #0x8]
	add	r0, r5, #0
	bl	HandleLoadSpecialPokePic
	mov	r1, r9
	lsl	r2, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r7, r2, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L104+0x10
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	str	r1, [sp, #0x10]
	add	r4, r2, #0
	cmp	r0, #0
	bne	.L97	@cond_branch
	mov	r0, r8
	bl	GetMonSpritePal
	b	.L101
.L105:
	.align	2, 0
.L104:
	.word	gPID_perBank
	.word	gMonFrontPicTable
	.word	gMonFrontPicCoords
	.word	gUnknown_081FAF4C
	.word	gSharedMem+0x17800
.L97:
	add	r0, r6, #0
	mov	r1, sl
	ldr	r2, [sp, #0xc]
	bl	GetMonSpritePalFromOtIdPersonality
.L101:
	add	r5, r0, #0
	ldr	r1, .L106
	mov	r8, r1
	add	r0, r5, #0
	bl	LZDecompressWram
	mov	r0, r8
	add	r1, r7, #0
	mov	r2, #0x20
	bl	LoadPalette
	add	r1, r4, #0
	add	r1, r1, #0x80
	mov	r0, r8
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L106+0x4
	cmp	r6, r0
	bne	.L99	@cond_branch
	sub	r0, r0, #0x81
	add	r7, r4, r0
	mov	r4, #0xb2
	lsl	r4, r4, #0x9
	add	r4, r4, r8
	add	r0, r5, #0
	add	r1, r4, #0
	bl	LZDecompressWram
	ldr	r0, .L106+0x8
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	add	r0, r0, r4
	add	r1, r7, #0
	mov	r2, #0x20
	bl	LoadPalette
.L99:
	mov	r0, #0xbc
	lsl	r0, r0, #0x9
	add	r0, r0, r8
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L100	@cond_branch
	ldr	r3, .L106+0xc
	add	r0, r7, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r1, r7, #0x1
	ldr	r0, .L106+0x10
	add	r0, r1, r0
	ldr	r2, .L106+0x14
	add	r1, r1, r2
	ldr	r2, .L106+0x18
	bl	CpuSet
.L100:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	gSharedMem
	.word	0x181
	.word	gBattleMonForms
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.Lfe12:
	.size	 BattleLoadOpponentMonSprite,.Lfe12-BattleLoadOpponentMonSprite
	.align	2, 0
	.globl	BattleLoadPlayerMonSprite
	.type	 BattleLoadPlayerMonSprite,function
	.thumb_func
BattleLoadPlayerMonSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffec
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0xc]
	mov	r0, r9
	lsl	r1, r0, #0x2
	ldr	r0, .L116
	add	r2, r1, r0
	ldrh	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L109	@cond_branch
	mov	r0, r8
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r7, [sp, #0xc]
	b	.L110
.L117:
	.align	2, 0
.L116:
	.word	gSharedMem+0x17800
.L109:
	ldrh	r6, [r2, #0x2]
	ldr	r0, .L118
	add	r0, r1, r0
	ldr	r7, [r0]
.L110:
	mov	r0, r8
	mov	r1, #0x1
	bl	GetMonData
	mov	sl, r0
	mov	r0, r9
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsl	r5, r6, #0x3
	ldr	r1, .L118+0x4
	add	r5, r5, r1
	ldr	r1, .L118+0x8
	lsl	r2, r6, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L118+0xc
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	str	r0, [sp]
	str	r6, [sp, #0x4]
	str	r7, [sp, #0x8]
	add	r0, r5, #0
	bl	HandleLoadSpecialPokePic
	mov	r1, r9
	lsl	r2, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r7, r2, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L118+0x10
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	str	r1, [sp, #0x10]
	add	r4, r2, #0
	cmp	r0, #0
	bne	.L111	@cond_branch
	mov	r0, r8
	bl	GetMonSpritePal
	b	.L115
.L119:
	.align	2, 0
.L118:
	.word	gPID_perBank
	.word	gMonBackPicTable
	.word	gMonBackPicCoords
	.word	gUnknown_081FAF4C
	.word	gSharedMem+0x17800
.L111:
	add	r0, r6, #0
	mov	r1, sl
	ldr	r2, [sp, #0xc]
	bl	GetMonSpritePalFromOtIdPersonality
.L115:
	add	r5, r0, #0
	ldr	r1, .L120
	mov	r8, r1
	add	r0, r5, #0
	bl	LZDecompressWram
	mov	r0, r8
	add	r1, r7, #0
	mov	r2, #0x20
	bl	LoadPalette
	add	r1, r4, #0
	add	r1, r1, #0x80
	mov	r0, r8
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L120+0x4
	cmp	r6, r0
	bne	.L113	@cond_branch
	sub	r0, r0, #0x81
	add	r7, r4, r0
	mov	r4, #0xb2
	lsl	r4, r4, #0x9
	add	r4, r4, r8
	add	r0, r5, #0
	add	r1, r4, #0
	bl	LZDecompressWram
	ldr	r0, .L120+0x8
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	add	r0, r0, r4
	add	r1, r7, #0
	mov	r2, #0x20
	bl	LoadPalette
.L113:
	mov	r0, #0xbc
	lsl	r0, r0, #0x9
	add	r0, r0, r8
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L114	@cond_branch
	ldr	r3, .L120+0xc
	add	r0, r7, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r1, r7, #0x1
	ldr	r0, .L120+0x10
	add	r0, r1, r0
	ldr	r2, .L120+0x14
	add	r1, r1, r2
	ldr	r2, .L120+0x18
	bl	CpuSet
.L114:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gSharedMem
	.word	0x181
	.word	gBattleMonForms
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.Lfe13:
	.size	 BattleLoadPlayerMonSprite,.Lfe13-BattleLoadPlayerMonSprite
	.align	2, 0
	.globl	unref_sub_8031A64
	.type	 unref_sub_8031A64,function
	.thumb_func
unref_sub_8031A64:
	bx	lr
.Lfe14:
	.size	 unref_sub_8031A64,.Lfe14-unref_sub_8031A64
	.align	2, 0
	.globl	nullsub_9
	.type	 nullsub_9,function
	.thumb_func
nullsub_9:
	bx	lr
.Lfe15:
	.size	 nullsub_9,.Lfe15-nullsub_9
	.align	2, 0
	.globl	sub_8031A6C
	.type	 sub_8031A6C,function
	.thumb_func
sub_8031A6C:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff0
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsl	r6, r4, #0x3
	ldr	r5, .L125
	add	r5, r6, r5
	ldr	r1, .L125+0x4
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrb	r1, [r4]
	ldrb	r2, [r4, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L125+0x8
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r4, [r0]
	str	r4, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	add	r0, r5, #0
	bl	DecompressPicFromTable_2
	str	r4, [sp, #0x8]
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L125+0xc
	ldr	r1, [sp, #0xc]
	and	r1, r1, r0
	orr	r1, r1, r2
	str	r1, [sp, #0xc]
	ldrh	r2, [r5, #0x6]
	lsl	r2, r2, #0x10
	ldr	r0, .L125+0x10
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp, #0xc]
	add	r0, sp, #0x8
	bl	LoadCompressedObjectPic
	ldr	r0, .L125+0x14
	add	r6, r6, r0
	add	r0, r6, #0
	bl	LoadCompressedObjectPalette
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gTrainerFrontPicTable
	.word	gTrainerFrontPicCoords
	.word	gUnknown_081FAF4C
	.word	0xffff0000
	.word	0xffff
	.word	gTrainerFrontPicPaletteTable
.Lfe16:
	.size	 sub_8031A6C,.Lfe16-sub_8031A6C
	.align	2, 0
	.globl	LoadPlayerTrainerBankSprite
	.type	 LoadPlayerTrainerBankSprite,function
	.thumb_func
LoadPlayerTrainerBankSprite:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsl	r1, r4, #0x3
	mov	r8, r1
	ldr	r6, .L128
	add	r6, r6, r8
	ldr	r1, .L128+0x4
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrb	r1, [r4]
	ldrb	r2, [r4, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L128+0x8
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	add	r0, r6, #0
	bl	DecompressPicFromTable_2
	ldr	r0, .L128+0xc
	add	r8, r8, r0
	mov	r1, r8
	ldr	r0, [r1]
	lsl	r5, r5, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r5, r5, r1
	lsr	r5, r5, #0x10
	add	r1, r5, #0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gTrainerBackPicTable
	.word	gTrainerBackPicCoords
	.word	gUnknown_081FAF4C
	.word	gTrainerBackPicPaletteTable
.Lfe17:
	.size	 LoadPlayerTrainerBankSprite,.Lfe17-LoadPlayerTrainerBankSprite
	.align	2, 0
	.globl	nullsub_10
	.type	 nullsub_10,function
	.thumb_func
nullsub_10:
	bx	lr
.Lfe18:
	.size	 nullsub_10,.Lfe18-nullsub_10
	.align	2, 0
	.globl	sub_8031B74
	.type	 sub_8031B74,function
	.thumb_func
sub_8031B74:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	ldr	r0, .L132
	lsr	r4, r4, #0xd
	add	r0, r4, r0
	ldrh	r0, [r0, #0x4]
	bl	FreeSpritePaletteByTag
	ldr	r0, .L132+0x4
	add	r4, r4, r0
	ldrh	r0, [r4, #0x6]
	bl	FreeSpriteTilesByTag
	pop	{r4}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	gTrainerFrontPicPaletteTable
	.word	gTrainerFrontPicTable
.Lfe19:
	.size	 sub_8031B74,.Lfe19-sub_8031B74
	.align	2, 0
	.globl	unref_sub_8031BA0
	.type	 unref_sub_8031BA0,function
	.thumb_func
unref_sub_8031BA0:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L142
	add	r0, r4, #0
	bl	LoadSpritePalette
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadSpritePalette
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L135	@cond_branch
	ldr	r0, .L142+0x4
	bl	LoadCompressedObjectPic
	ldr	r0, .L142+0x8
	bl	LoadCompressedObjectPic
	mov	r5, #0x2
	b	.L136
.L143:
	.align	2, 0
.L142:
	.word	gUnknown_0820A4D4
	.word	gUnknown_0820A47C
	.word	gUnknown_0820A484
.L135:
	ldr	r4, .L144
	add	r0, r4, #0
	bl	LoadCompressedObjectPic
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadCompressedObjectPic
	ldr	r4, .L144+0x4
	add	r0, r4, #0
	bl	LoadCompressedObjectPic
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadCompressedObjectPic
	mov	r5, #0x4
.L136:
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L138	@cond_branch
	ldr	r7, .L144+0x8
	ldr	r6, .L144+0xc
.L140:
	add	r0, r4, r7
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	bl	LoadCompressedObjectPic
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L140	@cond_branch
.L138:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	gUnknown_0820A48C
	.word	gUnknown_0820A49C
	.word	gBanksBySide
	.word	gUnknown_0820A4B4
.Lfe20:
	.size	 unref_sub_8031BA0,.Lfe20-unref_sub_8031BA0
	.align	2, 0
	.globl	sub_8031C30
	.type	 sub_8031C30,function
	.thumb_func
sub_8031C30:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	mov	r6, #0x0
	cmp	r4, #0
	bne	.LCB1525
	b	.L147	@long jump
.LCB1525:
	cmp	r4, #0x1
	bne	.L148	@cond_branch
	ldr	r4, .L179
	add	r0, r4, #0
	bl	LoadSpritePalette
	add	r4, r4, #0x8
	add	r0, r4, #0
	bl	LoadSpritePalette
	b	.L147
.L180:
	.align	2, 0
.L179:
	.word	gUnknown_0820A4D4
.L148:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L150	@cond_branch
	cmp	r4, #0x2
	bne	.L151	@cond_branch
	ldr	r0, .L181
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L152	@cond_branch
	ldr	r0, .L181+0x4
	bl	LoadCompressedObjectPic
	b	.L147
.L182:
	.align	2, 0
.L181:
	.word	gBattleTypeFlags
	.word	gUnknown_0820A4AC
.L152:
	ldr	r0, .L183
	bl	LoadCompressedObjectPic
	b	.L147
.L184:
	.align	2, 0
.L183:
	.word	gUnknown_0820A47C
.L151:
	cmp	r4, #0x3
	bne	.L155	@cond_branch
	ldr	r0, .L185
	bl	LoadCompressedObjectPic
	b	.L147
.L186:
	.align	2, 0
.L185:
	.word	gUnknown_0820A484
.L155:
	cmp	r4, #0x4
	bne	.L157	@cond_branch
	ldr	r0, .L187
	ldrb	r0, [r0]
	b	.L178
.L188:
	.align	2, 0
.L187:
	.word	gBanksBySide
.L157:
	cmp	r4, #0x5
	bne	.L176	@cond_branch
	ldr	r0, .L189
	ldrb	r0, [r0, #0x1]
	b	.L178
.L190:
	.align	2, 0
.L189:
	.word	gBanksBySide
.L150:
	cmp	r4, #0x2
	bne	.L162	@cond_branch
	ldr	r0, .L191
	bl	LoadCompressedObjectPic
	b	.L147
.L192:
	.align	2, 0
.L191:
	.word	gUnknown_0820A48C
.L162:
	cmp	r4, #0x3
	bne	.L164	@cond_branch
	ldr	r0, .L193
	bl	LoadCompressedObjectPic
	b	.L147
.L194:
	.align	2, 0
.L193:
	.word	gUnknown_0820A48C+0x8
.L164:
	cmp	r4, #0x4
	bne	.L166	@cond_branch
	ldr	r0, .L195
	bl	LoadCompressedObjectPic
	b	.L147
.L196:
	.align	2, 0
.L195:
	.word	gUnknown_0820A49C
.L166:
	cmp	r4, #0x5
	bne	.L168	@cond_branch
	ldr	r0, .L197
	bl	LoadCompressedObjectPic
	b	.L147
.L198:
	.align	2, 0
.L197:
	.word	gUnknown_0820A49C+0x8
.L168:
	cmp	r4, #0x6
	bne	.L170	@cond_branch
	ldr	r0, .L199
	ldrb	r0, [r0]
	b	.L178
.L200:
	.align	2, 0
.L199:
	.word	gBanksBySide
.L170:
	cmp	r4, #0x7
	bne	.L172	@cond_branch
	ldr	r0, .L201
	ldrb	r0, [r0, #0x1]
	b	.L178
.L202:
	.align	2, 0
.L201:
	.word	gBanksBySide
.L172:
	cmp	r4, #0x8
	bne	.L174	@cond_branch
	ldr	r0, .L203
	ldrb	r0, [r0, #0x2]
	b	.L178
.L204:
	.align	2, 0
.L203:
	.word	gBanksBySide
.L174:
	cmp	r5, #0x9
	bne	.L176	@cond_branch
	ldr	r0, .L205
	ldrb	r0, [r0, #0x3]
.L178:
	lsl	r0, r0, #0x3
	ldr	r1, .L205+0x4
	add	r0, r0, r1
	bl	LoadCompressedObjectPic
	b	.L147
.L206:
	.align	2, 0
.L205:
	.word	gBanksBySide
	.word	gUnknown_0820A4B4
.L176:
	mov	r6, #0x1
.L147:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 sub_8031C30,.Lfe21-sub_8031C30
	.align	2, 0
	.globl	load_gfxc_health_bar
	.type	 load_gfxc_health_bar,function
	.thumb_func
load_gfxc_health_bar:
	push	{lr}
	ldr	r0, .L208
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	bl	LZDecompressWram
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	gUnknown_08D09C48
.Lfe22:
	.size	 load_gfxc_health_bar,.Lfe22-load_gfxc_health_bar
	.align	2, 0
	.globl	battle_load_something
	.type	 battle_load_something,function
	.thumb_func
battle_load_something:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r6, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0x6
	bls	.LCB1791
	b	.L211	@long jump
.LCB1791:
	lsl	r0, r0, #0x2
	ldr	r1, .L237
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L238:
	.align	2, 0
.L237:
	.word	.L231
	.align	2, 0
	.align	2, 0
.L231:
	.word	.L212
	.word	.L213
	.word	.L233
	.word	.L217
	.word	.L221
	.word	.L225
	.word	.L230
.L212:
	bl	sub_8031F0C
	b	.L233
.L213:
	ldrb	r0, [r4]
	bl	sub_8031C30
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1821
	b	.L234	@long jump
.LCB1821:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L211
.L217:
	ldr	r0, .L239
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L218	@cond_branch
	bl	battle_make_oam_safari_battle
	b	.L235
.L240:
	.align	2, 0
.L239:
	.word	gBattleTypeFlags
.L218:
	ldrb	r0, [r4]
	bl	battle_make_oam_normal_battle
.L235:
	ldr	r2, .L241
	ldrb	r1, [r4]
	add	r1, r1, r2
	strb	r0, [r1]
	b	.L236
.L242:
	.align	2, 0
.L241:
	.word	gHealthboxIDs
.L221:
	ldrb	r0, [r4]
	bl	sub_8043F44
	ldr	r0, .L243
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L222	@cond_branch
	ldr	r0, .L243+0x4
	add	r0, r1, r0
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	nullsub_11
	b	.L236
.L244:
	.align	2, 0
.L243:
	.word	gBanksBySide
	.word	gHealthboxIDs
.L222:
	ldr	r0, .L245
	add	r0, r1, r0
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	nullsub_11
	b	.L236
.L246:
	.align	2, 0
.L245:
	.word	gHealthboxIDs
.L225:
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L226	@cond_branch
	ldr	r0, .L247
	ldrh	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L228	@cond_branch
	ldr	r0, .L247+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L247+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L247+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
	b	.L228
.L248:
	.align	2, 0
.L247:
	.word	gBattleTypeFlags
	.word	gHealthboxIDs
	.word	gBattlePartyID
	.word	gPlayerParty
.L226:
	ldr	r0, .L249
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L249+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L249+0x8
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
.L228:
	ldr	r1, .L249
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
.L236:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L249+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L211	@cond_branch
.L234:
	mov	r0, #0x0
	strb	r0, [r4]
.L233:
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L211
.L250:
	.align	2, 0
.L249:
	.word	gHealthboxIDs
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gNoOfAllBanks
.L230:
	bl	sub_80327CC
	bl	sub_8094958
	mov	r6, #0x1
.L211:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 battle_load_something,.Lfe23-battle_load_something
	.align	2, 0
	.globl	sub_8031EE8
	.type	 sub_8031EE8,function
	.thumb_func
sub_8031EE8:
	push	{r4, lr}
	ldr	r4, .L252
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x30
	bl	memset
	add	r4, r4, #0x30
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	pop	{r4}
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	gSharedMem+0x17810
.Lfe24:
	.size	 sub_8031EE8,.Lfe24-sub_8031EE8
	.align	2, 0
	.globl	sub_8031F0C
	.type	 sub_8031F0C,function
	.thumb_func
sub_8031F0C:
	push	{lr}
	bl	sub_8031EE8
	ldr	r0, .L255
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gSharedMem+0x17800
.Lfe25:
	.size	 sub_8031F0C,.Lfe25-sub_8031F0C
	.align	2, 0
	.globl	sub_8031F24
	.type	 sub_8031F24,function
	.thumb_func
sub_8031F24:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	ldr	r5, .L263
	ldrb	r0, [r5]
	cmp	r4, r0
	bge	.L259	@cond_branch
	ldr	r0, .L263+0x4
	mov	r8, r0
	mov	r7, #0x1
	mov	r0, #0x2
	neg	r0, r0
	mov	ip, r0
	ldr	r6, .L263+0x8
	ldr	r3, .L263+0xc
.L261:
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	and	r1, r1, r7
	ldrb	r2, [r3]
	mov	r0, ip
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r3, r3, #0x4
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	cmp	r4, r0
	blt	.L261	@cond_branch
.L259:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gNoOfAllBanks
	.word	gSprites
	.word	gObjectBankIDs
	.word	gSharedMem+0x17800
.Lfe26:
	.size	 sub_8031F24,.Lfe26-sub_8031F24
	.align	2, 0
	.globl	sub_8031F88
	.type	 sub_8031F88,function
	.thumb_func
sub_8031F88:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r3, r0, #0x2
	ldr	r1, .L266
	add	r3, r3, r1
	ldr	r2, .L266+0x4
	ldr	r1, .L266+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	ldrb	r2, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bx	lr
.L267:
	.align	2, 0
.L266:
	.word	gSharedMem+0x17800
	.word	gSprites
	.word	gObjectBankIDs
.Lfe27:
	.size	 sub_8031F88,.Lfe27-sub_8031F88
	.align	2, 0
	.globl	sub_8031FC4
	.type	 sub_8031FC4,function
	.thumb_func
sub_8031FC4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	lsl	r2, r2, #0x18
	cmp	r2, #0
	beq	.L269	@cond_branch
	ldr	r0, .L282
	mov	r1, r8
	add	r6, r1, r0
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r7, .L282+0x4
	add	r0, r0, r7
	ldr	r4, .L282+0x8
	ldrb	r1, [r4]
	bl	StartSpriteAnim
	mov	r2, r8
	lsl	r0, r2, #0x14
	mov	r5, #0x80
	lsl	r5, r5, #0x11
	add	r0, r0, r5
	lsr	r5, r0, #0x10
	ldrh	r0, [r4]
	lsl	r0, r0, #0x5
	ldr	r2, .L282+0xc
	add	r1, r4, r2
	add	r0, r0, r1
	add	r1, r5, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L282+0x10
	add	r0, r0, r8
	ldrh	r1, [r4]
	strb	r1, [r0]
	mov	r1, r8
	lsl	r0, r1, #0x2
	sub	r4, r4, #0x40
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L270	@cond_branch
	ldr	r3, .L282+0x14
	add	r0, r5, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r1, r5, #0x1
	ldr	r0, .L282+0x18
	add	r0, r1, r0
	ldr	r2, .L282+0x1c
	add	r1, r1, r2
	ldr	r2, .L282+0x20
	bl	CpuSet
.L270:
	mov	r0, r8
	bl	sub_8077F68
	ldrb	r2, [r6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x22]
	b	.L271
.L283:
	.align	2, 0
.L282:
	.word	gObjectBankIDs
	.word	gSprites
	.word	gSharedMem+0x17840
	.word	0xffffebc0
	.word	gBattleMonForms
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.L269:
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L272	@cond_branch
	mov	r2, #0x0
	mov	sl, r2
	ldr	r5, .L284
	ldrh	r7, [r5, #0x2]
	ldr	r4, [r5, #0x8]
	mov	r9, r4
	ldr	r6, [r5, #0xc]
	lsl	r0, r7, #0x3
	ldr	r1, .L284+0x4
	add	r0, r0, r1
	ldr	r1, .L284+0x8
	lsl	r2, r7, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L284+0xc
	ldr	r4, [r4]
	str	r4, [sp]
	str	r7, [sp, #0x4]
	ldr	r4, [r5, #0x10]
	b	.L280
.L285:
	.align	2, 0
.L284:
	.word	gSharedMem+0x19348
	.word	gMonBackPicTable
	.word	gMonBackPicCoords
	.word	gUnknown_081FAF4C
.L272:
	mov	r0, r8
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, [sp, #0xc]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L274	@cond_branch
	ldr	r1, .L286
	ldr	r5, [sp, #0xc]
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L286+0x4
	b	.L281
.L287:
	.align	2, 0
.L286:
	.word	gBattlePartyID
	.word	gEnemyParty
.L274:
	ldr	r1, .L288
	ldr	r2, [sp, #0xc]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L288+0x4
.L281:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r0, r8
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L276	@cond_branch
	ldr	r0, .L288
	mov	r5, r8
	lsl	r4, r5, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L288+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	mov	r9, r0
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	add	r6, r0, #0
	lsl	r0, r7, #0x3
	ldr	r1, .L288+0x8
	add	r0, r0, r1
	ldr	r1, .L288+0xc
	lsl	r2, r7, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L288+0x10
	mov	ip, r4
	mov	r5, sl
	lsl	r4, r5, #0x2
	add	r4, r4, ip
	ldr	r4, [r4]
	str	r4, [sp]
	str	r7, [sp, #0x4]
	ldr	r4, .L288+0x14
	mov	ip, r4
	mov	r5, r8
	lsl	r4, r5, #0x2
	add	r4, r4, ip
	ldr	r4, [r4]
.L280:
	str	r4, [sp, #0x8]
	bl	HandleLoadSpecialPokePic
	b	.L273
.L289:
	.align	2, 0
.L288:
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gMonBackPicTable
	.word	gMonBackPicCoords
	.word	gUnknown_081FAF4C
	.word	gPID_perBank
.L276:
	ldr	r0, .L290
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L290+0x4
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	mov	r9, r0
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x1
	bl	GetMonData
	add	r6, r0, #0
	lsl	r0, r7, #0x3
	ldr	r1, .L290+0x8
	add	r0, r0, r1
	ldr	r1, .L290+0xc
	lsl	r2, r7, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	ldr	r4, .L290+0x10
	mov	ip, r4
	mov	r5, sl
	lsl	r4, r5, #0x2
	add	r4, r4, ip
	ldr	r4, [r4]
	str	r4, [sp]
	str	r7, [sp, #0x4]
	ldr	r4, .L290+0x14
	mov	ip, r4
	mov	r5, r8
	lsl	r4, r5, #0x2
	add	r4, r4, ip
	ldr	r4, [r4]
	str	r4, [sp, #0x8]
	bl	HandleLoadSpecialPokePic
.L273:
	ldr	r1, .L290+0x10
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldr	r0, .L290+0x18
	add	r0, r0, r8
	mov	sl, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L290+0x1c
	add	r0, r0, r4
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x11
	ldr	r1, .L290+0x20
	add	r0, r0, r1
	ldr	r1, .L290+0x24
	str	r2, [r1]
	str	r0, [r1, #0x4]
	ldr	r0, .L290+0x28
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r5, r8
	lsl	r0, r5, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r5, r0, #0x10
	add	r0, r7, #0
	add	r1, r6, #0
	mov	r2, r9
	bl	GetMonSpritePalFromOtIdPersonality
	add	r6, r0, #0
	ldr	r2, .L290+0x2c
	mov	r9, r2
	mov	r1, r9
	bl	LZDecompressWram
	mov	r0, r9
	add	r1, r5, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L290+0x30
	cmp	r7, r0
	bne	.L278	@cond_branch
	mov	r4, #0xb2
	lsl	r4, r4, #0x9
	add	r4, r4, r9
	add	r0, r6, #0
	add	r1, r4, #0
	bl	LZDecompressWram
	ldr	r0, .L290+0x34
	ldr	r1, [sp, #0xc]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	add	r0, r0, r4
	add	r1, r5, #0
	mov	r2, #0x20
	bl	LoadPalette
.L278:
	ldr	r3, .L290+0x38
	add	r0, r5, #0
	mov	r1, #0x10
	mov	r2, #0x6
	bl	BlendPalette
	lsl	r1, r5, #0x1
	ldr	r0, .L290+0x3c
	add	r0, r1, r0
	ldr	r2, .L290+0x40
	add	r1, r1, r2
	ldr	r2, .L290+0x44
	bl	CpuSet
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L279	@cond_branch
	mov	r2, r8
	lsl	r0, r2, #0x2
	mov	r1, #0xbc
	lsl	r1, r1, #0x9
	add	r1, r1, r9
	add	r0, r0, r1
	strh	r7, [r0, #0x2]
	ldr	r0, .L290+0x34
	add	r1, r2, r0
	ldr	r4, [sp, #0xc]
	add	r0, r4, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
.L279:
	mov	r0, r8
	bl	sub_8077F68
	mov	r5, sl
	ldrb	r2, [r5]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r2, .L290+0x1c
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x22]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L290+0x34
	add	r1, r1, r8
	ldrb	r1, [r1]
	bl	StartSpriteAnim
.L271:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L291:
	.align	2, 0
.L290:
	.word	gBattlePartyID
	.word	gEnemyParty
	.word	gMonFrontPicTable
	.word	gMonFrontPicCoords
	.word	gUnknown_081FAF4C
	.word	gPID_perBank
	.word	gObjectBankIDs
	.word	gSprites
	.word	0x6010000
	.word	0x40000d4
	.word	0x84000200
	.word	gSharedMem
	.word	0x181
	.word	gBattleMonForms
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
	.word	0x4000008
.Lfe28:
	.size	 sub_8031FC4,.Lfe28-sub_8031FC4
	.align	2, 0
	.globl	BattleLoadSubstituteSprite
	.type	 BattleLoadSubstituteSprite,function
	.thumb_func
BattleLoadSubstituteSprite:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L293	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L294	@cond_branch
	mov	r4, #0x0
	b	.L295
.L294:
	add	r0, r4, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L295:
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L296	@cond_branch
	ldr	r0, .L310
	b	.L309
.L311:
	.align	2, 0
.L310:
	.word	gSubstituteDollTilemap
.L296:
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L298	@cond_branch
	ldr	r0, .L312
.L309:
	ldr	r1, .L312+0x4
	lsl	r4, r4, #0x2
	add	r1, r4, r1
	ldr	r1, [r1]
	bl	LZDecompressVram
	b	.L297
.L313:
	.align	2, 0
.L312:
	.word	gSubstituteDollGfx
	.word	gUnknown_081FAF4C
.L298:
	ldr	r0, .L314
	ldr	r1, .L314+0x4
	lsl	r4, r4, #0x2
	add	r1, r4, r1
	ldr	r1, [r1]
	bl	LZDecompressVram
.L297:
	lsl	r7, r5, #0x4
	ldr	r0, .L314+0x8
	mov	ip, r0
	ldr	r0, .L314+0x4
	add	r0, r4, r0
	ldr	r4, [r0]
	ldr	r3, .L314+0xc
	ldr	r6, .L314+0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	add	r2, r4, r0
	add	r5, r0, #0
	mov	r1, #0x2
.L303:
	str	r4, [r3]
	str	r2, [r3, #0x4]
	str	r6, [r3, #0x8]
	ldr	r0, [r3, #0x8]
	add	r2, r2, r5
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L303	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r7, r0
	mov	r0, ip
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L305
.L315:
	.align	2, 0
.L314:
	.word	gSubstituteDollTilemap
	.word	gUnknown_081FAF4C
	.word	gSubstituteDollPal
	.word	0x40000d4
	.word	0x84000200
.L293:
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L305	@cond_branch
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L307	@cond_branch
	ldr	r1, .L316
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L316+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	BattleLoadOpponentMonSprite
	b	.L305
.L317:
	.align	2, 0
.L316:
	.word	gBattlePartyID
	.word	gEnemyParty
.L307:
	ldr	r1, .L318
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L318+0x4
	add	r0, r0, r1
	add	r1, r5, #0
	bl	BattleLoadPlayerMonSprite
.L305:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L319:
	.align	2, 0
.L318:
	.word	gBattlePartyID
	.word	gPlayerParty
.Lfe29:
	.size	 BattleLoadSubstituteSprite,.Lfe29-BattleLoadSubstituteSprite
	.align	2, 0
	.globl	refresh_graphics_maybe
	.type	 refresh_graphics_maybe,function
	.thumb_func
refresh_graphics_maybe:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	BattleLoadSubstituteSprite
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L324
	add	r4, r0, r1
	ldr	r0, .L324+0x4
	add	r0, r6, r0
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	StartSpriteAnim
	cmp	r5, #0
	bne	.L321	@cond_branch
	add	r0, r6, #0
	bl	sub_8077F7C
	b	.L323
.L325:
	.align	2, 0
.L324:
	.word	gSprites
	.word	gBattleMonForms
.L321:
	add	r0, r6, #0
	bl	sub_8077F68
.L323:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 refresh_graphics_maybe,.Lfe30-refresh_graphics_maybe
	.align	2, 0
	.globl	sub_80324BC
	.type	 sub_80324BC,function
	.thumb_func
sub_80324BC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xa4
	bne	.L327	@cond_branch
	lsl	r2, r0, #0x2
	ldr	r0, .L328
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L327:
	pop	{r0}
	bx	r0
.L329:
	.align	2, 0
.L328:
	.word	gSharedMem+0x17800
.Lfe31:
	.size	 sub_80324BC,.Lfe31-sub_80324BC
	.align	2, 0
	.globl	sub_80324E0
	.type	 sub_80324E0,function
	.thumb_func
sub_80324E0:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L331
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.L332:
	.align	2, 0
.L331:
	.word	gSharedMem+0x17800
.Lfe32:
	.size	 sub_80324E0,.Lfe32-sub_80324E0
	.align	2, 0
	.globl	sub_80324F8
	.type	 sub_80324F8,function
	.thumb_func
sub_80324F8:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	add	r7, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L334	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r3, .L340
	add	r4, r0, r3
	ldrb	r1, [r4]
	mov	r5, #0x2
	mov	r2, #0x2
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L333	@cond_branch
	add	r0, r6, #0
	eor	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L336	@cond_branch
	mov	r0, #0x5a
	bl	PlaySE
.L336:
	ldrb	r0, [r4]
	orr	r0, r0, r5
	strb	r0, [r4]
	b	.L333
.L341:
	.align	2, 0
.L340:
	.word	gSharedMem+0x17800
.L334:
	lsl	r1, r6, #0x2
	ldr	r4, .L342
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L338	@cond_branch
	mov	r0, #0x5a
	bl	m4aSongNumStop
	b	.L333
.L343:
	.align	2, 0
.L342:
	.word	gSharedMem+0x17800
.L338:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L333	@cond_branch
	mov	r0, #0x2
	eor	r7, r7, r0
	lsl	r0, r7, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L333	@cond_branch
	mov	r0, #0x5a
	bl	m4aSongNumStop
.L333:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 sub_80324F8,.Lfe33-sub_80324F8
	.align	2, 0
	.globl	BattleMusicStop
	.type	 BattleMusicStop,function
	.thumb_func
BattleMusicStop:
	push	{r4, r5, r6, lr}
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r4, #0x2
	ldr	r6, .L346
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r5, #0x3
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L345	@cond_branch
	mov	r0, #0x2
	add	r1, r4, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1]
	add	r0, r5, #0
	and	r0, r0, r2
	strb	r0, [r1]
.L345:
	mov	r0, #0x5a
	bl	m4aSongNumStop
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L347:
	.align	2, 0
.L346:
	.word	gSharedMem+0x17800
.Lfe34:
	.size	 BattleMusicStop,.Lfe34-BattleMusicStop
	.align	2, 0
	.globl	unref_sub_8032604
	.type	 unref_sub_8032604,function
	.thumb_func
unref_sub_8032604:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x39
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	GetHPBarLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 unref_sub_8032604,.Lfe35-unref_sub_8032604
	.align	2, 0
	.globl	sub_8032638
	.type	 sub_8032638,function
	.thumb_func
sub_8032638:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L354
	ldr	r1, .L354+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L350	@cond_branch
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, #0x2
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r5, .L354+0x8
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	pokemon_order_func
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, r9
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	pokemon_order_func
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r7, #0x64
	mov	r0, r4
	mul	r0, r0, r7
	ldr	r6, .L354+0xc
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L351	@cond_branch
	add	r0, r4, #0
	mov	r1, r8
	bl	sub_80324F8
.L351:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L350	@cond_branch
	mov	r0, r5
	mul	r0, r0, r7
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L350	@cond_branch
	add	r0, r4, #0
	mov	r1, r9
	bl	sub_80324F8
.L350:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L355:
	.align	2, 0
.L354:
	.word	gMain
	.word	0x43d
	.word	gBattlePartyID
	.word	gPlayerParty
.Lfe36:
	.size	 sub_8032638,.Lfe36-sub_8032638
	.align	2, 0
	.globl	sub_80326EC
	.type	 sub_80326EC,function
	.thumb_func
sub_80326EC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r0, .L365
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L358	@cond_branch
	mov	r0, #0x3
	mov	sl, r8
	mov	r1, sl
	and	r1, r1, r0
	mov	sl, r1
	mov	r6, #0x0
	mov	r2, #0x3f
	neg	r2, r2
	mov	r9, r2
.L360:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	AnimBankSpriteExists
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L359	@cond_branch
	ldr	r4, .L365+0x4
	ldr	r0, .L365+0x8
	add	r3, r5, r0
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x1]
	mov	r7, #0x4
	neg	r7, r7
	add	r2, r7, #0
	and	r1, r1, r2
	mov	r2, sl
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r7, r8
	cmp	r7, #0
	bne	.L362	@cond_branch
	ldr	r2, .L365+0xc
	add	r2, r6, r2
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r2, #0x6]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x3]
	mov	r2, r9
	and	r1, r1, r2
	strb	r1, [r0, #0x3]
	b	.L359
.L366:
	.align	2, 0
.L365:
	.word	gNoOfAllBanks
	.word	gSprites
	.word	gObjectBankIDs
	.word	gSharedMem+0x17810
.L362:
	ldrb	r0, [r3]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L367
	add	r0, r6, r0
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r0, [r2, #0x3]
	mov	r3, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x3]
.L359:
	add	r6, r6, #0xc
	add	r5, r5, #0x1
	ldr	r0, .L367+0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L360	@cond_branch
.L358:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L368:
	.align	2, 0
.L367:
	.word	gSharedMem+0x17810
	.word	gNoOfAllBanks
.Lfe37:
	.size	 sub_80326EC,.Lfe37-sub_80326EC
	.align	2, 0
	.globl	sub_80327CC
	.type	 sub_80327CC,function
	.thumb_func
sub_80327CC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L371
	bl	LoadCompressedObjectPic
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L371+0x4
	mov	r8, r0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_8077ABC
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_8077ABC
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x8
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	add	r2, r2, r0
	asr	r2, r2, #0x10
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0xc8
	bl	CreateSprite
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	ldr	r6, .L371+0x8
	add	r1, r1, r6
	strb	r0, [r1, #0x7]
	ldr	r7, .L371+0xc
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r5, [r0, #0x2e]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L370	@cond_branch
	mov	r0, #0x3
	bl	GetBankByPlayerAI
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_8077ABC
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_8077ABC
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x8
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	add	r2, r2, r0
	asr	r2, r2, #0x10
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0xc8
	bl	CreateSprite
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	strb	r0, [r1, #0x7]
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r5, [r0, #0x2e]
.L370:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	gUnknown_081FAF24
	.word	gSpriteTemplate_81FAF34
	.word	gSharedMem+0x17810
	.word	gSprites
.Lfe38:
	.size	 sub_80327CC,.Lfe38-sub_80327CC
	.align	2, 0
	.globl	sub_80328A4
	.type	 sub_80328A4,function
	.thumb_func
sub_80328A4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	mov	r0, #0x0
	mov	r8, r0
	ldrh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L381
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L381+0x4
	add	r7, r0, r1
	add	r6, r7, #0
	add	r6, r6, #0x3e
	ldrb	r1, [r6]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L375	@cond_branch
	add	r0, r4, #0
	bl	AnimBankSpriteExists
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L374	@cond_branch
.L375:
	ldr	r0, .L381+0x8
	str	r0, [r5, #0x1c]
	b	.L373
.L382:
	.align	2, 0
.L381:
	.word	gObjectBankIDs
	.word	gSprites
	.word	sub_8032978
.L374:
	ldr	r0, .L383
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L377	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L376	@cond_branch
.L377:
	mov	r0, #0x1
	mov	r8, r0
	lsl	r4, r4, #0x2
	ldr	r6, .L383+0x4
	b	.L378
.L384:
	.align	2, 0
.L383:
	.word	gAnimScriptActive
	.word	gSharedMem+0x17800
.L376:
	lsl	r0, r4, #0x2
	ldr	r1, .L385
	add	r3, r0, r1
	ldrh	r2, [r3, #0x2]
	add	r4, r0, #0
	add	r6, r1, #0
	cmp	r2, #0
	beq	.L378	@cond_branch
	ldr	r0, .L385+0x4
	add	r1, r2, #0
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L378	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L378:
	add	r0, r4, r6
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L380	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L380:
	ldrh	r0, [r7, #0x20]
	strh	r0, [r5, #0x20]
	ldrh	r0, [r7, #0x24]
	strh	r0, [r5, #0x24]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	mov	r0, r8
	lsl	r3, r0, #0x2
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
.L373:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L386:
	.align	2, 0
.L385:
	.word	gSharedMem+0x17800
	.word	gEnemyMonElevation
.Lfe39:
	.size	 sub_80328A4,.Lfe39-sub_80328A4
	.align	2, 0
	.globl	sub_8032978
	.type	 sub_8032978,function
	.thumb_func
sub_8032978:
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.Lfe40:
	.size	 sub_8032978,.Lfe40-sub_8032978
	.align	2, 0
	.globl	sub_8032984
	.type	 sub_8032984,function
	.thumb_func
sub_8032984:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L389	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r3, .L394
	add	r1, r0, r3
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L390	@cond_branch
	add	r5, r0, #0
.L390:
	ldr	r0, .L394+0x4
	add	r0, r5, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L391	@cond_branch
	ldr	r2, .L394+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	ldrb	r1, [r0, #0x17]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L394+0xc
	b	.L393
.L395:
	.align	2, 0
.L394:
	.word	gSharedMem+0x17800
	.word	gEnemyMonElevation
	.word	gSprites
	.word	sub_80328A4
.L391:
	ldr	r2, .L396
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	ldrb	r1, [r0, #0x17]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L396+0x4
.L393:
	str	r1, [r0]
.L389:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L397:
	.align	2, 0
.L396:
	.word	gSprites
	.word	sub_8032978
.Lfe41:
	.size	 sub_8032984,.Lfe41-sub_8032984
	.align	2, 0
	.globl	sub_8032A08
	.type	 sub_8032A08,function
	.thumb_func
sub_8032A08:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L399
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L399+0x4
	add	r1, r1, r0
	ldrb	r1, [r1, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L399+0x8
	str	r1, [r0]
	bx	lr
.L400:
	.align	2, 0
.L399:
	.word	gSprites
	.word	gSharedMem+0x17810
	.word	sub_8032978
.Lfe42:
	.size	 sub_8032A08,.Lfe42-sub_8032A08
	.align	2, 0
	.globl	sub_8032A38
	.type	 sub_8032A38,function
	.thumb_func
sub_8032A38:
	push	{r4, r5, r6, lr}
	ldr	r3, .L416
	mov	r0, #0x0
	mov	r6, #0xf0
	lsl	r6, r6, #0x8
.L405:
	add	r5, r0, #0x1
	mov	r4, #0xf
.L409:
	ldrh	r1, [r3]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L410	@cond_branch
	add	r0, r6, #0
	orr	r0, r0, r1
	strh	r0, [r3]
.L410:
	ldrh	r1, [r3]
	mov	r2, #0xf0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L411	@cond_branch
	add	r0, r2, #0
	orr	r0, r0, r1
	strh	r0, [r3]
.L411:
	ldrh	r1, [r3]
	mov	r2, #0xf0
	mov	r0, #0xf0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L412	@cond_branch
	add	r0, r1, #0
	orr	r0, r0, r2
	strh	r0, [r3]
.L412:
	ldrh	r1, [r3]
	mov	r2, #0xf
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L413	@cond_branch
	add	r0, r1, #0
	orr	r0, r0, r2
	strh	r0, [r3]
.L413:
	add	r3, r3, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L409	@cond_branch
	add	r0, r5, #0
	cmp	r0, #0x8
	ble	.L405	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L417:
	.align	2, 0
.L416:
	.word	0x6000240
.Lfe43:
	.size	 sub_8032A38,.Lfe43-sub_8032A38
	.align	2, 0
	.globl	sub_8032AA8
	.type	 sub_8032AA8,function
	.thumb_func
sub_8032AA8:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r4, #0x2
	ldr	r0, .L420
	add	r2, r2, r0
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r2, #0x2]
	ldr	r0, .L420+0x4
	add	r0, r4, r0
	strb	r3, [r0]
	cmp	r1, #0
	bne	.L419	@cond_branch
	add	r0, r4, #0
	bl	sub_80324E0
.L419:
	pop	{r4}
	pop	{r0}
	bx	r0
.L421:
	.align	2, 0
.L420:
	.word	gSharedMem+0x17800
	.word	gBattleMonForms
.Lfe44:
	.size	 sub_8032AA8,.Lfe44-sub_8032AA8
.text
	.align	2, 0
