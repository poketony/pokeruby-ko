@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 gWallyBufferCommands,object
gWallyBufferCommands:
	.word	WallyHandleGetAttributes
	.word	WallyHandlecmd1
	.word	WallyHandleSetAttributes
	.word	WallyHandlecmd3
	.word	WallyHandleLoadPokeSprite
	.word	WallyHandleSendOutPoke
	.word	WallyHandleReturnPokeToBall
	.word	WallyHandleTrainerThrow
	.word	WallyHandleTrainerSlide
	.word	WallyHandleTrainerSlideBack
	.word	WallyHandlecmd10
	.word	WallyHandlecmd11
	.word	WallyHandlecmd12
	.word	WallyHandleBallThrow
	.word	WallyHandlePuase
	.word	WallyHandleMoveAnimation
	.word	WallyHandlePrintString
	.word	WallyHandlePrintStringPlayerOnly
	.word	WallyHandlecmd18
	.word	WallyHandlecmd19
	.word	WallyHandlecmd20
	.word	WallyHandleOpenBag
	.word	WallyHandlecmd22
	.word	WallyHandlecmd23
	.word	WallyHandleHealthBarUpdate
	.word	WallyHandleExpBarUpdate
	.word	WallyHandleStatusIconUpdate
	.word	WallyHandleStatusAnimation
	.word	WallyHandleStatusXor
	.word	WallyHandlecmd29
	.word	WallyHandleDMATransfer
	.word	WallyHandlecmd31
	.word	WallyHandlecmd32
	.word	WallyHandlecmd33
	.word	WallyHandlecmd34
	.word	WallyHandlecmd35
	.word	WallyHandlecmd36
	.word	WallyHandlecmd37
	.word	WallyHandlecmd38
	.word	WallyHandlecmd39
	.word	WallyHandlecmd40
	.word	WallyHandleHitAnimation
	.word	WallyHandlecmd42
	.word	WallyHandleEffectivenessSound
	.word	WallyHandlecmd44
	.word	WallyHandleFaintingCry
	.word	WallyHandleIntroSlide
	.word	WallyHandleTrainerBallThrow
	.word	WallyHandlecmd48
	.word	WallyHandlecmd49
	.word	WallyHandlecmd50
	.word	WallyHandleSpriteInvisibility
	.word	WallyHandleBattleAnimation
	.word	WallyHandleLinkStandbyMsg
	.word	WallyHandleResetActionMoveSelection
	.word	WallyHandlecmd55
	.word	WallyHandlecmd56
	.size	 gWallyBufferCommands,228
.text
	.align	2, 0
	.globl	unref_sub_8137220
	.type	 unref_sub_8137220,function
	.thumb_func
unref_sub_8137220:
	bx	lr
.Lfe1:
	.size	 unref_sub_8137220,.Lfe1-unref_sub_8137220
	.align	2, 0
	.globl	SetBankFuncToWallyBufferRunCommand
	.type	 SetBankFuncToWallyBufferRunCommand,function
	.thumb_func
SetBankFuncToWallyBufferRunCommand:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	ldr	r1, .L4+0xc
	ldr	r2, .L4+0x10
	add	r0, r1, r2
	mov	r2, #0x0
	strb	r2, [r0]
	ldr	r3, .L4+0x14
	add	r0, r1, r3
	strb	r2, [r0]
	add	r3, r3, #0x1
	add	r0, r1, r3
	strb	r2, [r0]
	ldr	r0, .L4+0x18
	add	r1, r1, r0
	strb	r2, [r1]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	WallyBufferRunCommand
	.word	gSharedMem
	.word	0x160a8
	.word	0x160a9
	.word	0x160ab
.Lfe2:
	.size	 SetBankFuncToWallyBufferRunCommand,.Lfe2-SetBankFuncToWallyBufferRunCommand
	.align	2, 0
	.globl	WallyBufferRunCommand
	.type	 WallyBufferRunCommand,function
	.thumb_func
WallyBufferRunCommand:
	push	{lr}
	ldr	r2, .L10
	ldr	r1, .L10+0x4
	ldr	r0, .L10+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	ldr	r0, .L10+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L8	@cond_branch
	ldr	r0, .L10+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L7
.L11:
	.align	2, 0
.L10:
	.word	gBattleExecBuffer
	.word	gBitTable
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gWallyBufferCommands
.L8:
	bl	WallyBufferExecCompleted
.L7:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 WallyBufferRunCommand,.Lfe3-WallyBufferRunCommand
	.align	2, 0
	.globl	sub_81372BC
	.type	 sub_81372BC,function
	.thumb_func
sub_81372BC:
	push	{r4, r5, r6, lr}
	ldr	r1, .L29
	ldr	r2, .L29+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r5, r1, #0
	cmp	r0, #0x5
	bls	.LCB118
	b	.L13	@long jump
.LCB118:
	lsl	r0, r0, #0x2
	ldr	r1, .L29+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L30:
	.align	2, 0
.L29:
	.word	gSharedMem
	.word	0x160a8
	.word	.L25
	.align	2, 0
	.align	2, 0
.L25:
	.word	.L14
	.word	.L15
	.word	.L17
	.word	.L19
	.word	.L21
	.word	.L23
.L14:
	ldr	r0, .L31
	add	r1, r5, r0
	mov	r0, #0x40
	strb	r0, [r1]
	ldr	r2, .L31+0x4
	add	r1, r5, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L15:
	ldr	r0, .L31
	add	r6, r5, r0
	ldrb	r0, [r6]
	sub	r0, r0, #0x1
	strb	r0, [r6]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L13	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	Emitcmd33
	bl	WallyBufferExecCompleted
	ldr	r2, .L31+0x4
	add	r1, r5, r2
	b	.L27
.L32:
	.align	2, 0
.L31:
	.word	0x160aa
	.word	0x160a8
.L17:
	ldr	r2, .L33
	add	r6, r5, r2
	ldrb	r0, [r6]
	sub	r0, r0, #0x1
	strb	r0, [r6]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L13	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0x0
	b	.L28
.L34:
	.align	2, 0
.L33:
	.word	0x160aa
.L19:
	ldr	r2, .L35
	add	r6, r5, r2
	ldrb	r0, [r6]
	sub	r0, r0, #0x1
	strb	r0, [r6]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L13	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x9
.L28:
	mov	r2, #0x0
	bl	Emitcmd33
	bl	WallyBufferExecCompleted
	ldr	r0, .L35+0x4
	add	r1, r5, r0
.L27:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L35+0x8
	add	r0, r5, r1
	strb	r4, [r0]
	mov	r0, #0x40
	strb	r0, [r6]
	b	.L13
.L36:
	.align	2, 0
.L35:
	.word	0x160aa
	.word	0x160a8
	.word	0x160a9
.L21:
	ldr	r2, .L37
	add	r4, r5, r2
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L13	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	nullsub_8
	mov	r0, #0x1
	mov	r1, #0x0
	bl	sub_802E3E4
	mov	r0, #0x40
	strb	r0, [r4]
	ldr	r0, .L37+0x4
	add	r1, r5, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L13
.L38:
	.align	2, 0
.L37:
	.word	0x160aa
	.word	0x160a8
.L23:
	ldr	r2, .L39
	add	r1, r5, r2
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L13	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	DestroyMenuCursor
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	Emitcmd33
	bl	WallyBufferExecCompleted
.L13:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	0x160aa
.Lfe4:
	.size	 sub_81372BC,.Lfe4-sub_81372BC
	.align	2, 0
	.globl	sub_813741C
	.type	 sub_813741C,function
	.thumb_func
sub_813741C:
	push	{lr}
	ldr	r2, .L43
	ldr	r1, .L43+0x4
	ldr	r0, .L43+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L43+0xc
	cmp	r1, r0
	bne	.L42	@cond_branch
	bl	WallyBufferExecCompleted
.L42:
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.Lfe5:
	.size	 sub_813741C,.Lfe5-sub_813741C
	.align	2, 0
	.globl	sub_8137454
	.type	 sub_8137454,function
	.thumb_func
sub_8137454:
	push	{lr}
	ldr	r0, .L47
	ldrh	r0, [r0, #0x16]
	cmp	r0, #0
	bne	.L46	@cond_branch
	bl	WallyBufferExecCompleted
.L46:
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	gUnknown_03004210
.Lfe6:
	.size	 sub_8137454,.Lfe6-sub_8137454
	.align	2, 0
	.globl	sub_813746C
	.type	 sub_813746C,function
	.thumb_func
sub_813746C:
	push	{lr}
	ldr	r0, .L51
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L50	@cond_branch
	ldr	r2, .L51+0x4
	ldr	r0, .L51+0x8
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L51+0xc
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L50:
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gPaletteFade
	.word	gMain
	.word	0x43d
	.word	gPreBattleCallback1
.Lfe7:
	.size	 sub_813746C,.Lfe7-sub_813746C
	.align	2, 0
	.globl	bx_wait_t5
	.type	 bx_wait_t5,function
	.thumb_func
bx_wait_t5:
	push	{lr}
	ldr	r0, .L55
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L54	@cond_branch
	bl	WallyBufferExecCompleted
.L54:
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gDoingBattleAnim
.Lfe8:
	.size	 bx_wait_t5,.Lfe8-bx_wait_t5
	.align	2, 0
	.globl	sub_81374C4
	.type	 sub_81374C4,function
	.thumb_func
sub_81374C4:
	push	{lr}
	ldr	r0, .L59
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L58	@cond_branch
	ldr	r1, .L59+0x4
	ldr	r0, .L59+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L59+0xc
	str	r1, [r0]
	bl	nullsub_14
	bl	PrepareBagForWallyTutorial
.L58:
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	gPaletteFade
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_81374FC
.Lfe9:
	.size	 sub_81374C4,.Lfe9-sub_81374C4
	.align	2, 0
	.globl	sub_81374FC
	.type	 sub_81374FC,function
	.thumb_func
sub_81374FC:
	push	{lr}
	ldr	r0, .L63
	ldr	r1, [r0, #0x4]
	ldr	r0, .L63+0x4
	cmp	r1, r0
	bne	.L62	@cond_branch
	ldr	r0, .L63+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L62	@cond_branch
	ldr	r0, .L63+0xc
	ldrh	r1, [r0]
	mov	r0, #0x1
	bl	Emitcmd35
	bl	WallyBufferExecCompleted
.L62:
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	gMain
	.word	sub_800F808
	.word	gPaletteFade
	.word	gScriptItemId
.Lfe10:
	.size	 sub_81374FC,.Lfe10-sub_81374FC
	.align	2, 0
	.globl	sub_8137538
	.type	 sub_8137538,function
	.thumb_func
sub_8137538:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L70
	ldrb	r2, [r5]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	ldr	r4, .L70+0x4
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r7, #0x88
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L66	@cond_branch
	ldr	r0, .L70+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L70+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L66:
	ldrb	r0, [r5]
	mov	r6, #0x2
	add	r2, r6, #0
	eor	r2, r2, r0
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L67	@cond_branch
	ldr	r0, .L70+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L70+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8141828
.L67:
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r3, #0x8
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L68	@cond_branch
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L68	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L69	@cond_branch
	ldr	r0, .L70+0x10
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r1, .L70+0x14
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L70+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r4, .L70+0x1c
	ldrb	r0, [r5]
	add	r1, r6, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L70+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L70+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r5]
	eor	r0, r0, r6
	bl	sub_804777C
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	sub_8043DFC
.L69:
	ldr	r1, .L70+0x14
	ldr	r4, .L70
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L70+0x18
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r5, .L70+0x1c
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L70+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L70+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	sub_8045A5C
	ldrb	r0, [r4]
	bl	sub_804777C
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	sub_8043DFC
	ldr	r2, .L70+0x20
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L70+0x24
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L70+0x28
	str	r1, [r0]
.L68:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gUnknown_0300434C
	.word	gSprites
	.word	gHealthboxIDs
	.word	gSharedMem+0x17840
	.word	gBattleBankFunc
	.word	sub_81376B8
.Lfe11:
	.size	 sub_8137538,.Lfe11-sub_8137538
	.align	2, 0
	.globl	sub_81376B8
	.type	 sub_81376B8,function
	.thumb_func
sub_81376B8:
	push	{r4, r5, r6, r7, lr}
	mov	r4, #0x0
	ldr	r2, .L75
	ldr	r0, .L75+0x4
	ldr	r7, .L75+0x8
	ldrb	r3, [r7]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L75+0xc
	cmp	r1, r0
	bne	.L73	@cond_branch
	mov	r4, #0x1
.L73:
	cmp	r4, #0
	beq	.L74	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r5, .L75+0x10
	add	r2, r0, r5
	ldrb	r1, [r2, #0x1]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L74	@cond_branch
	mov	r6, #0x2
	add	r1, r6, #0
	eor	r1, r1, r3
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L74	@cond_branch
	ldrb	r1, [r2]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1]
	sub	r4, r4, #0x3
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L75+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, .L75+0x18
	mov	r1, #0xa
	bl	CreateTask
	ldr	r2, .L75+0x1c
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L75+0x20
	add	r0, r0, r2
	bl	sub_80324F8
	bl	WallyBufferExecCompleted
.L74:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gSprites
	.word	gHealthboxIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
	.word	gSharedMem+0x17810
	.word	0x27f9
	.word	c3_0802FDF4
	.word	gBattlePartyID
	.word	gPlayerParty
.Lfe12:
	.size	 sub_81376B8,.Lfe12-sub_81376B8
	.align	2, 0
	.globl	sub_81377B0
	.type	 sub_81377B0,function
	.thumb_func
sub_81377B0:
	push	{r4, r5, r6, lr}
	ldr	r5, .L80
	ldrb	r0, [r5]
	ldr	r6, .L80+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_8045C78
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	sub_8043DFC
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L78	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	sub_80440EC
	b	.L79
.L81:
	.align	2, 0
.L80:
	.word	gActiveBank
	.word	gHealthboxIDs
.L78:
	ldr	r2, .L82
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L82+0x4
	add	r0, r0, r2
	bl	sub_80324F8
	bl	WallyBufferExecCompleted
.L79:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gBattlePartyID
	.word	gPlayerParty
.Lfe13:
	.size	 sub_81377B0,.Lfe13-sub_81377B0
	.align	2, 0
	.globl	bx_blink_t5
	.type	 bx_blink_t5,function
	.thumb_func
bx_blink_t5:
	push	{r4, lr}
	ldr	r1, .L88
	ldr	r0, .L88+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L88+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L85	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L88+0xc
	strb	r3, [r0]
	bl	WallyBufferExecCompleted
	b	.L86
.L89:
	.align	2, 0
.L88:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	gDoingBattleAnim
.L85:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L87	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L87:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L86:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 bx_blink_t5,.Lfe14-bx_blink_t5
	.align	2, 0
	.globl	sub_813789C
	.type	 sub_813789C,function
	.thumb_func
sub_813789C:
	push	{r4, r5, r6, lr}
	ldr	r6, .L92
	ldrb	r2, [r6]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	ldr	r1, .L92+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L91	@cond_branch
	ldr	r5, .L92+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L92+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L92+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	WallyBufferExecCompleted
.L91:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
.Lfe15:
	.size	 sub_813789C,.Lfe15-sub_813789C
	.align	2, 0
	.globl	sub_8137908
	.type	 sub_8137908,function
	.thumb_func
sub_8137908:
	push	{lr}
	ldr	r2, .L96
	ldr	r1, .L96+0x4
	ldr	r0, .L96+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L96+0xc
	cmp	r1, r0
	bne	.L95	@cond_branch
	bl	WallyBufferExecCompleted
.L95:
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	SpriteCallbackDummy
.Lfe16:
	.size	 sub_8137908,.Lfe16-sub_8137908
	.align	2, 0
	.globl	sub_8137940
	.type	 sub_8137940,function
	.thumb_func
sub_8137940:
	push	{lr}
	ldr	r0, .L100
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L100+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L99	@cond_branch
	bl	WallyBufferExecCompleted
.L99:
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe17:
	.size	 sub_8137940,.Lfe17-sub_8137940
	.align	2, 0
	.globl	WallyBufferExecCompleted
	.type	 WallyBufferExecCompleted,function
	.thumb_func
WallyBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L105
	ldr	r4, .L105+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L105+0x8
	str	r1, [r0]
	ldr	r0, .L105+0xc
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L103	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r1, .L105+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	mov	r1, #0x38
	strb	r1, [r0]
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	WallyBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleBufferA
.L103:
	ldr	r2, .L107
	ldr	r1, .L107+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L104:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gBattleExecBuffer
	.word	gBitTable
.Lfe18:
	.size	 WallyBufferExecCompleted,.Lfe18-WallyBufferExecCompleted
	.align	2, 0
	.globl	unref_sub_81379E4
	.type	 unref_sub_81379E4,function
	.thumb_func
unref_sub_81379E4:
	push	{lr}
	ldr	r0, .L111
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L111+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L110	@cond_branch
	bl	WallyBufferExecCompleted
.L110:
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	gActiveBank
	.word	gSharedMem+0x17810
.Lfe19:
	.size	 unref_sub_81379E4,.Lfe19-unref_sub_81379E4
	.align	2, 0
	.globl	WallyHandleGetAttributes
	.type	 WallyHandleGetAttributes,function
	.thumb_func
WallyHandleGetAttributes:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xffffff00
	mov	r6, #0x0
	ldr	r1, .L122
	ldr	r0, .L122+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L114	@cond_branch
	ldr	r0, .L122+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	sub_8137A84
	add	r6, r0, #0
	b	.L115
.L123:
	.align	2, 0
.L122:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattlePartyID
.L114:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L119:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L120	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	sub_8137A84
	add	r6, r6, r0
.L120:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L119	@cond_branch
.L115:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	Emitcmd29
	bl	WallyBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 WallyHandleGetAttributes,.Lfe20-WallyHandleGetAttributes
	.align	2, 0
	.globl	sub_8137A84
	.type	 sub_8137A84,function
	.thumb_func
sub_8137A84:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffff70
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L213
	ldr	r3, .L213+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB1417
	bl	.L125	@far jump
.LCB1417:
	lsl	r0, r0, #0x2
	ldr	r1, .L213+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L214:
	.align	2, 0
.L213:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	.L207
	.align	2, 0
	.align	2, 0
.L207:
	.word	.L126
	.word	.L137
	.word	.L138
	.word	.L139
	.word	.L153
	.word	.L153
	.word	.L153
	.word	.L153
	.word	.L154
	.word	.L163
	.word	.L163
	.word	.L163
	.word	.L163
	.word	.L125
	.word	.L125
	.word	.L125
	.word	.L125
	.word	.L164
	.word	.L165
	.word	.L166
	.word	.L167
	.word	.L168
	.word	.L169
	.word	.L170
	.word	.L171
	.word	.L172
	.word	.L173
	.word	.L174
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
	.word	.L200
	.word	.L201
	.word	.L202
	.word	.L203
	.word	.L204
	.word	.L205
	.word	.L206
.L126:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L215
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L130:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L130	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L215
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L215+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L215+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L215+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L135:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L135	@cond_branch
	b	.L125
.L216:
	.align	2, 0
.L215:
	.word	gPlayerParty
	.word	0xfffffc1f
	.word	0xfff07fff
	.word	0xfffffe0f
.L137:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L217
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L209
.L218:
	.align	2, 0
.L217:
	.word	gPlayerParty
.L138:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L219
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L209
.L220:
	.align	2, 0
.L219:
	.word	gPlayerParty
.L139:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L221
	add	r4, r1, r0
	mov	r8, r9
.L143:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L143	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L221
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L148:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L148	@cond_branch
	b	.L125
.L222:
	.align	2, 0
.L221:
	.word	gPlayerParty
.L153:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L223
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L209
.L224:
	.align	2, 0
.L223:
	.word	gPlayerParty
.L154:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L225
	mov	r8, r2
.L158:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L158	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L225
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L125
.L226:
	.align	2, 0
.L225:
	.word	gPlayerParty
.L163:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L227
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L210
.L228:
	.align	2, 0
.L227:
	.word	gPlayerParty
.L164:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L229
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L211
.L230:
	.align	2, 0
.L229:
	.word	gPlayerParty
.L165:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L231
	add	r0, r0, r1
	mov	r1, #0x19
.L211:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L125
.L232:
	.align	2, 0
.L231:
	.word	gPlayerParty
.L166:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L233
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L210
.L234:
	.align	2, 0
.L233:
	.word	gPlayerParty
.L167:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L235
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L210
.L236:
	.align	2, 0
.L235:
	.word	gPlayerParty
.L168:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L237
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L210
.L238:
	.align	2, 0
.L237:
	.word	gPlayerParty
.L169:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L239
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L210
.L240:
	.align	2, 0
.L239:
	.word	gPlayerParty
.L170:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L241
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L210
.L242:
	.align	2, 0
.L241:
	.word	gPlayerParty
.L171:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L243
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L210
.L244:
	.align	2, 0
.L243:
	.word	gPlayerParty
.L172:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L245
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L210
.L246:
	.align	2, 0
.L245:
	.word	gPlayerParty
.L173:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L247
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L210
.L248:
	.align	2, 0
.L247:
	.word	gPlayerParty
.L174:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L249
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L210
.L250:
	.align	2, 0
.L249:
	.word	gPlayerParty
.L175:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L251
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L210
.L252:
	.align	2, 0
.L251:
	.word	gPlayerParty
.L176:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L253
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L210
.L254:
	.align	2, 0
.L253:
	.word	gPlayerParty
.L177:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L255
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L210
.L256:
	.align	2, 0
.L255:
	.word	gPlayerParty
.L178:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L257
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L125
.L258:
	.align	2, 0
.L257:
	.word	gPlayerParty
.L179:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L259
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L210
.L260:
	.align	2, 0
.L259:
	.word	gPlayerParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L261
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L210
.L262:
	.align	2, 0
.L261:
	.word	gPlayerParty
.L181:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L263
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L210
.L264:
	.align	2, 0
.L263:
	.word	gPlayerParty
.L182:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L265
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L210
.L266:
	.align	2, 0
.L265:
	.word	gPlayerParty
.L183:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L267
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L210
.L268:
	.align	2, 0
.L267:
	.word	gPlayerParty
.L184:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L269
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L210
.L270:
	.align	2, 0
.L269:
	.word	gPlayerParty
.L185:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L271
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L212
.L272:
	.align	2, 0
.L271:
	.word	gPlayerParty
.L186:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L273
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L209
.L274:
	.align	2, 0
.L273:
	.word	gPlayerParty
.L187:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L275
	add	r0, r0, r1
	mov	r1, #0x37
.L212:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L125
.L276:
	.align	2, 0
.L275:
	.word	gPlayerParty
.L188:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L277
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L210
.L278:
	.align	2, 0
.L277:
	.word	gPlayerParty
.L189:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L279
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L209
.L280:
	.align	2, 0
.L279:
	.word	gPlayerParty
.L190:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L281
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L209
.L282:
	.align	2, 0
.L281:
	.word	gPlayerParty
.L191:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L283
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L209
.L284:
	.align	2, 0
.L283:
	.word	gPlayerParty
.L192:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L285
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L209
.L286:
	.align	2, 0
.L285:
	.word	gPlayerParty
.L193:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L287
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L209
.L288:
	.align	2, 0
.L287:
	.word	gPlayerParty
.L194:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L289
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L209
.L290:
	.align	2, 0
.L289:
	.word	gPlayerParty
.L195:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L291
	add	r0, r0, r1
	mov	r1, #0x3f
.L209:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L125
.L292:
	.align	2, 0
.L291:
	.word	gPlayerParty
.L196:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L293
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L210
.L294:
	.align	2, 0
.L293:
	.word	gPlayerParty
.L197:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L295
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L210
.L296:
	.align	2, 0
.L295:
	.word	gPlayerParty
.L198:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L297
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L210
.L298:
	.align	2, 0
.L297:
	.word	gPlayerParty
.L199:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L299
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L210
.L300:
	.align	2, 0
.L299:
	.word	gPlayerParty
.L200:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L301
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L210
.L302:
	.align	2, 0
.L301:
	.word	gPlayerParty
.L201:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L303
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L210
.L304:
	.align	2, 0
.L303:
	.word	gPlayerParty
.L202:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L305
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L210
.L306:
	.align	2, 0
.L305:
	.word	gPlayerParty
.L203:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L307
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L210
.L308:
	.align	2, 0
.L307:
	.word	gPlayerParty
.L204:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L309
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L210
.L310:
	.align	2, 0
.L309:
	.word	gPlayerParty
.L205:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L311
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L210
.L312:
	.align	2, 0
.L311:
	.word	gPlayerParty
.L206:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L313
	add	r0, r0, r1
	mov	r1, #0x36
.L210:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L125:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L314:
	.align	2, 0
.L313:
	.word	gPlayerParty
.Lfe21:
	.size	 sub_8137A84,.Lfe21-sub_8137A84
	.align	2, 0
	.globl	WallyHandlecmd1
	.type	 WallyHandlecmd1,function
	.thumb_func
WallyHandlecmd1:
	push	{lr}
	bl	PlayerHandlecmd1
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 WallyHandlecmd1,.Lfe22-WallyHandlecmd1
	.align	2, 0
	.globl	WallyHandleSetAttributes
	.type	 WallyHandleSetAttributes,function
	.thumb_func
WallyHandleSetAttributes:
	push	{r4, r5, lr}
	ldr	r1, .L325
	ldr	r0, .L325+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L317	@cond_branch
	ldr	r0, .L325+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	sub_8138294
	b	.L318
.L326:
	.align	2, 0
.L325:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattlePartyID
.L317:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L322:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L323	@cond_branch
	add	r0, r5, #0
	bl	sub_8138294
.L323:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L322	@cond_branch
.L318:
	bl	WallyBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 WallyHandleSetAttributes,.Lfe23-WallyHandleSetAttributes
	.align	2, 0
	.globl	sub_8138294
	.type	 sub_8138294,function
	.thumb_func
sub_8138294:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffcc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L399
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	ldr	r2, .L399+0x4
	add	r3, r0, r2
	add	r6, r3, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r2, #0
	cmp	r0, #0x3b
	bls	.LCB2836
	bl	.L328	@far jump
.LCB2836:
	lsl	r0, r0, #0x2
	ldr	r1, .L399+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L400:
	.align	2, 0
.L399:
	.word	gActiveBank
	.word	gBattleBufferA+0x3
	.word	.L395
	.align	2, 0
	.align	2, 0
.L395:
	.word	.L329
	.word	.L335
	.word	.L336
	.word	.L337
	.word	.L346
	.word	.L346
	.word	.L346
	.word	.L346
	.word	.L347
	.word	.L351
	.word	.L351
	.word	.L351
	.word	.L351
	.word	.L328
	.word	.L328
	.word	.L328
	.word	.L328
	.word	.L352
	.word	.L353
	.word	.L354
	.word	.L355
	.word	.L356
	.word	.L357
	.word	.L358
	.word	.L359
	.word	.L360
	.word	.L361
	.word	.L362
	.word	.L363
	.word	.L364
	.word	.L365
	.word	.L366
	.word	.L367
	.word	.L368
	.word	.L369
	.word	.L370
	.word	.L371
	.word	.L372
	.word	.L373
	.word	.L374
	.word	.L375
	.word	.L376
	.word	.L377
	.word	.L378
	.word	.L379
	.word	.L380
	.word	.L381
	.word	.L382
	.word	.L383
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L393
	.word	.L394
.L329:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L401
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r6, #0
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r6
	mov	sl, r0
	add	r0, r6, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r6, #0x2
	str	r0, [sp, #0x4]
	add	r0, r6, #0x4
	str	r0, [sp, #0x8]
	add	r0, r6, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r7, r6, #0
	add	r7, r7, #0x24
	add	r4, r6, #0
	add	r4, r4, #0xc
.L333:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r7, #0
	bl	SetMonData
	add	r7, r7, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L333	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L401
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r6, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r6, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L328
.L402:
	.align	2, 0
.L401:
	.word	gPlayerParty
.L335:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L403
	add	r0, r0, r1
	ldr	r1, .L403+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xb
	bl	SetMonData
	b	.L328
.L404:
	.align	2, 0
.L403:
	.word	gPlayerParty
	.word	gActiveBank
.L336:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L405
	add	r0, r0, r1
	ldr	r1, .L405+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xc
	bl	SetMonData
	b	.L328
.L406:
	.align	2, 0
.L405:
	.word	gPlayerParty
	.word	gActiveBank
.L337:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r3
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L407
	add	r7, r1, r0
	add	r6, r3, #0
	add	r6, r6, #0x8
	add	r4, r3, #0
.L341:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L341	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L407
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L328
.L408:
	.align	2, 0
.L407:
	.word	gPlayerParty
.L346:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L409
	add	r0, r0, r1
	ldr	r3, .L409+0x4
	ldr	r1, .L409+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L397
.L410:
	.align	2, 0
.L409:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBank
.L347:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L411
	add	r4, r4, r0
	ldr	r5, .L411+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L328
.L412:
	.align	2, 0
.L411:
	.word	gPlayerParty
	.word	gActiveBank
.L351:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L413
	add	r0, r0, r1
	ldr	r3, .L413+0x4
	ldr	r1, .L413+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L397:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L328
.L414:
	.align	2, 0
.L413:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBank
.L352:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L415
	add	r0, r0, r1
	ldr	r1, .L415+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1
	bl	SetMonData
	b	.L328
.L416:
	.align	2, 0
.L415:
	.word	gPlayerParty
	.word	gActiveBank
.L353:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L417
	add	r0, r0, r1
	ldr	r1, .L417+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x19
	bl	SetMonData
	b	.L328
.L418:
	.align	2, 0
.L417:
	.word	gPlayerParty
	.word	gActiveBank
.L354:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L419
	add	r0, r0, r1
	ldr	r1, .L419+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1a
	bl	SetMonData
	b	.L328
.L420:
	.align	2, 0
.L419:
	.word	gPlayerParty
	.word	gActiveBank
.L355:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L421
	add	r0, r0, r1
	ldr	r1, .L421+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1b
	bl	SetMonData
	b	.L328
.L422:
	.align	2, 0
.L421:
	.word	gPlayerParty
	.word	gActiveBank
.L356:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L423
	add	r0, r0, r1
	ldr	r1, .L423+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1c
	bl	SetMonData
	b	.L328
.L424:
	.align	2, 0
.L423:
	.word	gPlayerParty
	.word	gActiveBank
.L357:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L425
	add	r0, r0, r1
	ldr	r1, .L425+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1d
	bl	SetMonData
	b	.L328
.L426:
	.align	2, 0
.L425:
	.word	gPlayerParty
	.word	gActiveBank
.L358:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L427
	add	r0, r0, r1
	ldr	r1, .L427+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1e
	bl	SetMonData
	b	.L328
.L428:
	.align	2, 0
.L427:
	.word	gPlayerParty
	.word	gActiveBank
.L359:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L429
	add	r0, r0, r1
	ldr	r1, .L429+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1f
	bl	SetMonData
	b	.L328
.L430:
	.align	2, 0
.L429:
	.word	gPlayerParty
	.word	gActiveBank
.L360:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L431
	add	r0, r0, r1
	ldr	r1, .L431+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x20
	bl	SetMonData
	b	.L328
.L432:
	.align	2, 0
.L431:
	.word	gPlayerParty
	.word	gActiveBank
.L361:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L433
	add	r0, r0, r1
	ldr	r1, .L433+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x22
	bl	SetMonData
	b	.L328
.L434:
	.align	2, 0
.L433:
	.word	gPlayerParty
	.word	gActiveBank
.L362:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L435
	add	r0, r0, r1
	ldr	r1, .L435+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x23
	bl	SetMonData
	b	.L328
.L436:
	.align	2, 0
.L435:
	.word	gPlayerParty
	.word	gActiveBank
.L363:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L437
	add	r0, r0, r1
	ldr	r1, .L437+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x24
	bl	SetMonData
	b	.L328
.L438:
	.align	2, 0
.L437:
	.word	gPlayerParty
	.word	gActiveBank
.L364:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L439
	add	r0, r0, r1
	ldr	r1, .L439+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x25
	bl	SetMonData
	b	.L328
.L440:
	.align	2, 0
.L439:
	.word	gPlayerParty
	.word	gActiveBank
.L365:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L441
	add	r0, r0, r1
	ldr	r1, .L441+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x26
	bl	SetMonData
	b	.L328
.L442:
	.align	2, 0
.L441:
	.word	gPlayerParty
	.word	gActiveBank
.L366:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L443
	add	r4, r4, r0
	ldr	r5, .L443+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L398
.L444:
	.align	2, 0
.L443:
	.word	gPlayerParty
	.word	gActiveBank
.L367:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L445
	add	r0, r0, r1
	ldr	r1, .L445+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x27
	bl	SetMonData
	b	.L328
.L446:
	.align	2, 0
.L445:
	.word	gPlayerParty
	.word	gActiveBank
.L368:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L447
	add	r0, r0, r1
	ldr	r1, .L447+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x28
	bl	SetMonData
	b	.L328
.L448:
	.align	2, 0
.L447:
	.word	gPlayerParty
	.word	gActiveBank
.L369:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L449
	add	r0, r0, r1
	ldr	r1, .L449+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x29
	bl	SetMonData
	b	.L328
.L450:
	.align	2, 0
.L449:
	.word	gPlayerParty
	.word	gActiveBank
.L370:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L451
	add	r0, r0, r1
	ldr	r1, .L451+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2a
	bl	SetMonData
	b	.L328
.L452:
	.align	2, 0
.L451:
	.word	gPlayerParty
	.word	gActiveBank
.L371:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L453
	add	r0, r0, r1
	ldr	r1, .L453+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2b
	bl	SetMonData
	b	.L328
.L454:
	.align	2, 0
.L453:
	.word	gPlayerParty
	.word	gActiveBank
.L372:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L455
	add	r0, r0, r1
	ldr	r1, .L455+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
.L398:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L328
.L456:
	.align	2, 0
.L455:
	.word	gPlayerParty
	.word	gActiveBank
.L373:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L457
	add	r0, r0, r1
	ldr	r1, .L457+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x0
	bl	SetMonData
	b	.L328
.L458:
	.align	2, 0
.L457:
	.word	gPlayerParty
	.word	gActiveBank
.L374:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L459
	add	r0, r0, r1
	ldr	r1, .L459+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x9
	bl	SetMonData
	b	.L328
.L460:
	.align	2, 0
.L459:
	.word	gPlayerParty
	.word	gActiveBank
.L375:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L461
	add	r0, r0, r1
	ldr	r1, .L461+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x37
	bl	SetMonData
	b	.L328
.L462:
	.align	2, 0
.L461:
	.word	gPlayerParty
	.word	gActiveBank
.L376:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L463
	add	r0, r0, r1
	ldr	r1, .L463+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x38
	bl	SetMonData
	b	.L328
.L464:
	.align	2, 0
.L463:
	.word	gPlayerParty
	.word	gActiveBank
.L377:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L465
	add	r0, r0, r1
	ldr	r1, .L465+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x39
	bl	SetMonData
	b	.L328
.L466:
	.align	2, 0
.L465:
	.word	gPlayerParty
	.word	gActiveBank
.L378:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L467
	add	r0, r0, r1
	ldr	r1, .L467+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3a
	bl	SetMonData
	b	.L328
.L468:
	.align	2, 0
.L467:
	.word	gPlayerParty
	.word	gActiveBank
.L379:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L469
	add	r0, r0, r1
	ldr	r1, .L469+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3b
	bl	SetMonData
	b	.L328
.L470:
	.align	2, 0
.L469:
	.word	gPlayerParty
	.word	gActiveBank
.L380:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L471
	add	r0, r0, r1
	ldr	r1, .L471+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3c
	bl	SetMonData
	b	.L328
.L472:
	.align	2, 0
.L471:
	.word	gPlayerParty
	.word	gActiveBank
.L381:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L473
	add	r0, r0, r1
	ldr	r1, .L473+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3d
	bl	SetMonData
	b	.L328
.L474:
	.align	2, 0
.L473:
	.word	gPlayerParty
	.word	gActiveBank
.L382:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L475
	add	r0, r0, r1
	ldr	r1, .L475+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3e
	bl	SetMonData
	b	.L328
.L476:
	.align	2, 0
.L475:
	.word	gPlayerParty
	.word	gActiveBank
.L383:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L477
	add	r0, r0, r1
	ldr	r1, .L477+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3f
	bl	SetMonData
	b	.L328
.L478:
	.align	2, 0
.L477:
	.word	gPlayerParty
	.word	gActiveBank
.L384:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L479
	add	r0, r0, r1
	ldr	r1, .L479+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x16
	bl	SetMonData
	b	.L328
.L480:
	.align	2, 0
.L479:
	.word	gPlayerParty
	.word	gActiveBank
.L385:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L481
	add	r0, r0, r1
	ldr	r1, .L481+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x17
	bl	SetMonData
	b	.L328
.L482:
	.align	2, 0
.L481:
	.word	gPlayerParty
	.word	gActiveBank
.L386:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L483
	add	r0, r0, r1
	ldr	r1, .L483+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x18
	bl	SetMonData
	b	.L328
.L484:
	.align	2, 0
.L483:
	.word	gPlayerParty
	.word	gActiveBank
.L387:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L485
	add	r0, r0, r1
	ldr	r1, .L485+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x21
	bl	SetMonData
	b	.L328
.L486:
	.align	2, 0
.L485:
	.word	gPlayerParty
	.word	gActiveBank
.L388:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L487
	add	r0, r0, r1
	ldr	r1, .L487+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2f
	bl	SetMonData
	b	.L328
.L488:
	.align	2, 0
.L487:
	.word	gPlayerParty
	.word	gActiveBank
.L389:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L489
	add	r0, r0, r1
	ldr	r1, .L489+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x30
	bl	SetMonData
	b	.L328
.L490:
	.align	2, 0
.L489:
	.word	gPlayerParty
	.word	gActiveBank
.L390:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L491
	add	r0, r0, r1
	ldr	r1, .L491+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x32
	bl	SetMonData
	b	.L328
.L492:
	.align	2, 0
.L491:
	.word	gPlayerParty
	.word	gActiveBank
.L391:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L493
	add	r0, r0, r1
	ldr	r1, .L493+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x33
	bl	SetMonData
	b	.L328
.L494:
	.align	2, 0
.L493:
	.word	gPlayerParty
	.word	gActiveBank
.L392:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L495
	add	r0, r0, r1
	ldr	r1, .L495+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x34
	bl	SetMonData
	b	.L328
.L496:
	.align	2, 0
.L495:
	.word	gPlayerParty
	.word	gActiveBank
.L393:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L497
	add	r0, r0, r1
	ldr	r1, .L497+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x35
	bl	SetMonData
	b	.L328
.L498:
	.align	2, 0
.L497:
	.word	gPlayerParty
	.word	gActiveBank
.L394:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L499
	add	r0, r0, r1
	ldr	r1, .L499+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x36
	bl	SetMonData
.L328:
	ldr	r2, .L499+0x8
	ldr	r0, .L499+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L499
	add	r0, r0, r2
	bl	sub_80324F8
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	gPlayerParty
	.word	gActiveBank
	.word	gBattlePartyID
.Lfe24:
	.size	 sub_8138294,.Lfe24-sub_8138294
	.align	2, 0
	.globl	WallyHandlecmd3
	.type	 WallyHandlecmd3,function
	.thumb_func
WallyHandlecmd3:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 WallyHandlecmd3,.Lfe25-WallyHandlecmd3
	.align	2, 0
	.globl	WallyHandleLoadPokeSprite
	.type	 WallyHandleLoadPokeSprite,function
	.thumb_func
WallyHandleLoadPokeSprite:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 WallyHandleLoadPokeSprite,.Lfe26-WallyHandleLoadPokeSprite
	.align	2, 0
	.globl	WallyHandleSendOutPoke
	.type	 WallyHandleSendOutPoke,function
	.thumb_func
WallyHandleSendOutPoke:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 WallyHandleSendOutPoke,.Lfe27-WallyHandleSendOutPoke
	.align	2, 0
	.globl	WallyHandleReturnPokeToBall
	.type	 WallyHandleReturnPokeToBall,function
	.thumb_func
WallyHandleReturnPokeToBall:
	push	{r4, r5, r6, lr}
	ldr	r0, .L507
	ldr	r6, .L507+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L505	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	move_anim_start_t4
	ldr	r0, .L507+0x8
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L507+0xc
	str	r0, [r1]
	b	.L506
.L508:
	.align	2, 0
.L507:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattleBankFunc
	.word	sub_813789C
.L505:
	ldr	r5, .L509
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L509+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L509+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_8043DB0
	bl	WallyBufferExecCompleted
.L506:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L510:
	.align	2, 0
.L509:
	.word	gObjectBankIDs
	.word	gSprites
	.word	gHealthboxIDs
.Lfe28:
	.size	 WallyHandleReturnPokeToBall,.Lfe28-WallyHandleReturnPokeToBall
	.align	2, 0
	.globl	WallyHandleTrainerThrow
	.type	 WallyHandleTrainerThrow,function
	.thumb_func
WallyHandleTrainerThrow:
	push	{r4, r5, r6, lr}
	ldr	r4, .L512
	ldrb	r1, [r4]
	mov	r0, #0x2
	bl	LoadPlayerTrainerBankSprite
	ldrb	r0, [r4]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x2
	bl	GetMonSpriteTemplate_803C5A0
	ldr	r0, .L512+0x4
	ldr	r1, .L512+0x8
	ldrb	r1, [r1, #0x8]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r6, .L512+0xc
	ldrb	r1, [r4]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r5, .L512+0x10
	ldrb	r3, [r4]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L512+0x14
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r1, .L512+0x18
	str	r1, [r0]
	ldr	r1, .L512+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L512+0x20
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L513:
	.align	2, 0
.L512:
	.word	gActiveBank
	.word	gUnknown_02024E8C
	.word	gTrainerBackPicCoords
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xfffe
	.word	sub_80313A0
	.word	gBattleBankFunc
	.word	sub_813741C
.Lfe29:
	.size	 WallyHandleTrainerThrow,.Lfe29-WallyHandleTrainerThrow
	.align	2, 0
	.globl	WallyHandleTrainerSlide
	.type	 WallyHandleTrainerSlide,function
	.thumb_func
WallyHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	ldr	r4, .L515
	ldrb	r1, [r4]
	mov	r0, #0x2
	bl	LoadPlayerTrainerBankSprite
	ldrb	r0, [r4]
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x2
	bl	GetMonSpriteTemplate_803C5A0
	ldr	r0, .L515+0x4
	ldr	r1, .L515+0x8
	ldrb	r1, [r1, #0x8]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r6, .L515+0xc
	ldrb	r1, [r4]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r5, .L515+0x10
	ldrb	r3, [r4]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L515+0x14
	strh	r1, [r0, #0x24]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r4]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r1, .L515+0x18
	str	r1, [r0]
	ldr	r1, .L515+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L515+0x20
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L516:
	.align	2, 0
.L515:
	.word	gActiveBank
	.word	gUnknown_02024E8C
	.word	gTrainerBackPicCoords
	.word	gObjectBankIDs
	.word	gSprites
	.word	0xffa0
	.word	sub_80313A0
	.word	gBattleBankFunc
	.word	sub_8137908
.Lfe30:
	.size	 WallyHandleTrainerSlide,.Lfe30-WallyHandleTrainerSlide
	.align	2, 0
	.globl	WallyHandleTrainerSlideBack
	.type	 WallyHandleTrainerSlideBack,function
	.thumb_func
WallyHandleTrainerSlideBack:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 WallyHandleTrainerSlideBack,.Lfe31-WallyHandleTrainerSlideBack
	.align	2, 0
	.globl	WallyHandlecmd10
	.type	 WallyHandlecmd10,function
	.thumb_func
WallyHandlecmd10:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 WallyHandlecmd10,.Lfe32-WallyHandlecmd10
	.align	2, 0
	.globl	WallyHandlecmd11
	.type	 WallyHandlecmd11,function
	.thumb_func
WallyHandlecmd11:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 WallyHandlecmd11,.Lfe33-WallyHandlecmd11
	.align	2, 0
	.globl	WallyHandlecmd12
	.type	 WallyHandlecmd12,function
	.thumb_func
WallyHandlecmd12:
	push	{r4, r5, lr}
	ldr	r1, .L521
	mov	r0, #0x4
	strb	r0, [r1, #0x8]
	ldr	r1, .L521+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r5, .L521+0x8
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x4
	bl	move_anim_start_t4
	ldr	r1, .L521+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L521+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	gSharedMem+0x17840
	.word	gDoingBattleAnim
	.word	gActiveBank
	.word	gBattleBankFunc
	.word	bx_wait_t5
.Lfe34:
	.size	 WallyHandlecmd12,.Lfe34-WallyHandlecmd12
	.align	2, 0
	.globl	WallyHandleBallThrow
	.type	 WallyHandleBallThrow,function
	.thumb_func
WallyHandleBallThrow:
	push	{r4, r5, lr}
	ldr	r1, .L524
	ldr	r5, .L524+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, .L524+0x8
	strb	r1, [r0, #0x8]
	ldr	r1, .L524+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x4
	bl	move_anim_start_t4
	ldr	r1, .L524+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L524+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17840
	.word	gDoingBattleAnim
	.word	gBattleBankFunc
	.word	bx_wait_t5
.Lfe35:
	.size	 WallyHandleBallThrow,.Lfe35-WallyHandleBallThrow
	.align	2, 0
	.globl	WallyHandlePuase
	.type	 WallyHandlePuase,function
	.thumb_func
WallyHandlePuase:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 WallyHandlePuase,.Lfe36-WallyHandlePuase
	.align	2, 0
	.globl	WallyHandleMoveAnimation
	.type	 WallyHandleMoveAnimation,function
	.thumb_func
WallyHandleMoveAnimation:
	push	{r4, r5, r6, lr}
	ldr	r0, .L530
	mov	ip, r0
	ldr	r6, .L530+0x4
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r1, ip
	add	r1, r1, #0x2
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r5, .L530+0x8
	mov	r1, ip
	add	r1, r1, #0x3
	add	r2, r2, r1
	ldrb	r1, [r2]
	strb	r1, [r5]
	ldr	r4, .L530+0xc
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x5
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r4, .L530+0x10
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x6
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0x7
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x8
	add	r1, r2, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x10
	orr	r3, r3, r1
	mov	r1, ip
	add	r1, r1, #0x9
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x18
	orr	r3, r3, r1
	str	r3, [r4]
	ldr	r3, .L530+0x14
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	mov	r2, ip
	add	r2, r2, #0xa
	add	r1, r1, r2
	ldrb	r1, [r1]
	strb	r1, [r3]
	ldr	r4, .L530+0x18
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0xc
	add	r1, r2, r1
	ldrb	r3, [r1]
	mov	r1, ip
	add	r1, r1, #0xd
	add	r2, r2, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r3, r3, r1
	strh	r3, [r4]
	ldr	r3, .L530+0x1c
	ldrb	r2, [r6]
	lsl	r2, r2, #0x9
	mov	r1, ip
	add	r1, r1, #0x10
	add	r2, r2, r1
	str	r2, [r3]
	ldr	r3, .L530+0x20
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, [r2]
	str	r2, [r1]
	ldrb	r1, [r5]
	bl	sub_8031720
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L528	@cond_branch
	bl	WallyBufferExecCompleted
	b	.L529
.L531:
	.align	2, 0
.L530:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gUnknown_0202F7C4
	.word	gMovePowerMoveAnim
	.word	gMoveDmgMoveAnim
	.word	gHappinessMoveAnim
	.word	gWeatherMoveAnim
	.word	gDisableStructMoveAnim
	.word	gPID_perBank
.L528:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L532
	add	r0, r0, r1
	strb	r2, [r0, #0x4]
	ldr	r1, .L532+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L532+0x8
	str	r1, [r0]
.L529:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L533:
	.align	2, 0
.L532:
	.word	gSharedMem+0x17810
	.word	gBattleBankFunc
	.word	sub_81390D0
.Lfe37:
	.size	 WallyHandleMoveAnimation,.Lfe37-WallyHandleMoveAnimation
	.align	2, 0
	.globl	sub_81390D0
	.type	 sub_81390D0,function
	.thumb_func
sub_81390D0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r2, .L548
	ldr	r5, .L548+0x4
	ldrb	r3, [r5]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	r8, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r7, r2, #0x2
	add	r1, r1, r7
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	.code	16
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r6, .L548+0x8
	add	r0, r0, r6
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L538	@cond_branch
	cmp	r2, #0x1
	bgt	.L547	@cond_branch
	cmp	r2, #0
	beq	.L536	@cond_branch
	b	.L535
.L549:
	.align	2, 0
.L548:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gSharedMem+0x17810
.L547:
	cmp	r2, #0x2
	beq	.L540	@cond_branch
	cmp	r2, #0x3
	beq	.L543	@cond_branch
	b	.L535
.L536:
	lsl	r0, r3, #0x2
	add	r1, r6, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L537	@cond_branch
	add	r0, r3, #0
	add	r1, r3, #0
	add	r2, r3, #0
	mov	r3, #0x5
	bl	move_anim_start_t4
.L537:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	b	.L535
.L538:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L535	@cond_branch
	mov	r0, #0x0
	bl	sub_80326EC
	add	r0, r4, #0
	bl	ExecuteMoveAnim
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x2
	strb	r0, [r1, #0x4]
	b	.L535
.L540:
	ldr	r0, .L550
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L550+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L535	@cond_branch
	mov	r0, #0x1
	bl	sub_80326EC
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r1, r6, #0
	sub	r1, r1, #0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L542	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	move_anim_start_t4
.L542:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	mov	r0, #0x3
	strb	r0, [r1, #0x4]
	b	.L535
.L551:
	.align	2, 0
.L550:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
.L543:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L535	@cond_branch
	bl	sub_8031F24
	ldrb	r0, [r5]
	lsl	r2, r0, #0x9
	mov	r3, r8
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r7
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	sub_80324BC
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strb	r4, [r0, #0x4]
	bl	WallyBufferExecCompleted
.L535:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 sub_81390D0,.Lfe38-sub_81390D0
	.align	2, 0
	.globl	WallyHandlePrintString
	.type	 WallyHandlePrintString,function
	.thumb_func
WallyHandlePrintString:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L554
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L554+0x4
	strh	r1, [r0]
	ldr	r5, .L554+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	ldr	r1, .L554+0xc
	add	r4, r0, r1
	ldrh	r0, [r4]
	cmp	r0, #0x2
	bne	.L553	@cond_branch
	bl	DestroyMenuCursor
.L553:
	ldrh	r0, [r4]
	bl	BufferStringBattle
	ldr	r0, .L554+0x10
	ldr	r1, .L554+0x14
	mov	r2, #0xf
	str	r2, [sp]
	mov	r2, #0x90
	mov	r3, #0x2
	bl	sub_8002EB0
	ldr	r1, .L554+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L554+0x1c
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gActiveBank
	.word	gBattleBufferA+0x2
	.word	gUnknown_03004210
	.word	gDisplayedStringBattle
	.word	gBattleBankFunc
	.word	sub_8137454
.Lfe39:
	.size	 WallyHandlePrintString,.Lfe39-WallyHandlePrintString
	.align	2, 0
	.globl	WallyHandlePrintStringPlayerOnly
	.type	 WallyHandlePrintStringPlayerOnly,function
	.thumb_func
WallyHandlePrintStringPlayerOnly:
	push	{lr}
	ldr	r0, .L559
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L557	@cond_branch
	bl	WallyHandlePrintString
	b	.L558
.L560:
	.align	2, 0
.L559:
	.word	gActiveBank
.L557:
	bl	WallyBufferExecCompleted
.L558:
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 WallyHandlePrintStringPlayerOnly,.Lfe40-WallyHandlePrintStringPlayerOnly
	.align	2, 0
	.globl	WallyHandlecmd18
	.type	 WallyHandlecmd18,function
	.thumb_func
WallyHandlecmd18:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	mov	r0, #0x1
	bl	SetCustomFont
	ldr	r0, .L567
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L567+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r4, .L567+0x8
	mov	r5, #0x0
	strb	r2, [r4, #0x6]
	mov	r0, #0x1b
	str	r0, [sp]
	mov	r0, #0x12
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r1, #0xa
	mov	r2, #0x2
	mov	r3, #0xf
	bl	FillWindowRect_DefaultPalette
	mov	r0, #0x10
	str	r0, [sp]
	mov	r0, #0x24
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r1, #0xa
	mov	r2, #0x2
	mov	r3, #0x23
	bl	FillWindowRect_DefaultPalette
	ldr	r1, .L567+0xc
	ldr	r0, .L567+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L567+0x14
	str	r1, [r0]
	ldr	r1, .L567+0x18
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	mov	r0, #0x23
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x13
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
	ldr	r1, .L567+0x1c
	ldr	r3, .L567+0x20
	str	r5, [sp]
	mov	r0, #0x0
	mov	r2, #0xc
	bl	sub_814A5C0
	mov	r4, #0x0
.L565:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	nullsub_8
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L565	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_802E3E4
	mov	r0, #0x0
	bl	SetCustomFont
	ldr	r0, .L567+0x24
	bl	StrCpyDecodeToDisplayedStringBattle
	ldr	r4, .L567+0x8
	ldr	r1, .L567+0x28
	mov	r2, #0xdc
	lsl	r2, r2, #0x1
	mov	r0, #0x23
	str	r0, [sp]
	add	r0, r4, #0
	mov	r3, #0x2
	bl	InitWindow
	add	r0, r4, #0
	bl	sub_8002F44
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L568:
	.align	2, 0
.L567:
	.word	gUnknown_030042A4
	.word	gUnknown_030042A0
	.word	gUnknown_03004210
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_81372BC
	.word	BattleText_MenuOptions
	.word	0xffff
	.word	0x2d9f
	.word	BattleText_WallyMenu
	.word	gDisplayedStringBattle
.Lfe41:
	.size	 WallyHandlecmd18,.Lfe41-WallyHandlecmd18
	.align	2, 0
	.globl	WallyHandlecmd19
	.type	 WallyHandlecmd19,function
	.thumb_func
WallyHandlecmd19:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 WallyHandlecmd19,.Lfe42-WallyHandlecmd19
	.align	2, 0
	.globl	WallyHandlecmd20
	.type	 WallyHandlecmd20,function
	.thumb_func
WallyHandlecmd20:
	push	{r4, r5, lr}
	ldr	r5, .L577
	ldr	r0, .L577+0x4
	add	r4, r5, r0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L572	@cond_branch
	cmp	r0, #0x1
	beq	.L573	@cond_branch
	b	.L571
.L578:
	.align	2, 0
.L577:
	.word	gSharedMem
	.word	0x160a9
.L572:
	bl	sub_80304A8
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r0, .L579
	add	r1, r5, r0
	mov	r0, #0x50
	strb	r0, [r1]
.L573:
	ldr	r1, .L579+0x4
	ldr	r0, .L579
	add	r1, r1, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L571	@cond_branch
	bl	DestroyMenuCursor
	mov	r0, #0x5
	bl	PlaySE
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x1
	mov	r1, #0xa
	bl	Emitcmd33
	bl	WallyBufferExecCompleted
.L571:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L580:
	.align	2, 0
.L579:
	.word	0x160ab
	.word	gSharedMem
.Lfe43:
	.size	 WallyHandlecmd20,.Lfe43-WallyHandlecmd20
	.align	2, 0
	.globl	WallyHandleOpenBag
	.type	 WallyHandleOpenBag,function
	.thumb_func
WallyHandleOpenBag:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L582
	ldr	r2, .L582+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L582+0x8
	str	r1, [r0]
	ldr	r1, .L582+0xc
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L583:
	.align	2, 0
.L582:
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_81374C4
	.word	gBankInMenu
.Lfe44:
	.size	 WallyHandleOpenBag,.Lfe44-WallyHandleOpenBag
	.align	2, 0
	.globl	WallyHandlecmd22
	.type	 WallyHandlecmd22,function
	.thumb_func
WallyHandlecmd22:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 WallyHandlecmd22,.Lfe45-WallyHandlecmd22
	.align	2, 0
	.globl	WallyHandlecmd23
	.type	 WallyHandlecmd23,function
	.thumb_func
WallyHandlecmd23:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 WallyHandlecmd23,.Lfe46-WallyHandlecmd23
	.align	2, 0
	.globl	WallyHandleHealthBarUpdate
	.type	 WallyHandleHealthBarUpdate,function
	.thumb_func
WallyHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x0
	bl	load_gfxc_health_bar
	ldr	r3, .L589
	ldr	r0, .L589+0x4
	mov	r9, r0
	ldrb	r4, [r0]
	lsl	r2, r4, #0x9
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r3, r3, #0x3
	add	r2, r2, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r7, r1, #0x10
	ldr	r0, .L589+0x8
	cmp	r7, r0
	beq	.L587	@cond_branch
	ldr	r6, .L589+0xc
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L589+0x10
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L589+0x14
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	sub_8043D84
	b	.L588
.L590:
	.align	2, 0
.L589:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	0x7fff
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gHealthboxIDs
.L587:
	ldr	r1, .L591
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L591+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r4, .L591+0x8
	add	r1, r0, r4
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	sub_8043D84
	mov	r1, r9
	ldrb	r0, [r1]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	sub_80440EC
.L588:
	ldr	r1, .L591+0xc
	ldr	r0, .L591+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L591+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L592:
	.align	2, 0
.L591:
	.word	gBattlePartyID
	.word	gPlayerParty
	.word	gHealthboxIDs
	.word	gBattleBankFunc
	.word	gActiveBank
	.word	sub_81377B0
.Lfe47:
	.size	 WallyHandleHealthBarUpdate,.Lfe47-WallyHandleHealthBarUpdate
	.align	2, 0
	.globl	WallyHandleExpBarUpdate
	.type	 WallyHandleExpBarUpdate,function
	.thumb_func
WallyHandleExpBarUpdate:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 WallyHandleExpBarUpdate,.Lfe48-WallyHandleExpBarUpdate
	.align	2, 0
	.globl	WallyHandleStatusIconUpdate
	.type	 WallyHandleStatusIconUpdate,function
	.thumb_func
WallyHandleStatusIconUpdate:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 WallyHandleStatusIconUpdate,.Lfe49-WallyHandleStatusIconUpdate
	.align	2, 0
	.globl	WallyHandleStatusAnimation
	.type	 WallyHandleStatusAnimation,function
	.thumb_func
WallyHandleStatusAnimation:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 WallyHandleStatusAnimation,.Lfe50-WallyHandleStatusAnimation
	.align	2, 0
	.globl	WallyHandleStatusXor
	.type	 WallyHandleStatusXor,function
	.thumb_func
WallyHandleStatusXor:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 WallyHandleStatusXor,.Lfe51-WallyHandleStatusXor
	.align	2, 0
	.globl	WallyHandlecmd29
	.type	 WallyHandlecmd29,function
	.thumb_func
WallyHandlecmd29:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 WallyHandlecmd29,.Lfe52-WallyHandlecmd29
	.align	2, 0
	.globl	WallyHandleDMATransfer
	.type	 WallyHandleDMATransfer,function
	.thumb_func
WallyHandleDMATransfer:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 WallyHandleDMATransfer,.Lfe53-WallyHandleDMATransfer
	.align	2, 0
	.globl	WallyHandlecmd31
	.type	 WallyHandlecmd31,function
	.thumb_func
WallyHandlecmd31:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 WallyHandlecmd31,.Lfe54-WallyHandlecmd31
	.align	2, 0
	.globl	WallyHandlecmd32
	.type	 WallyHandlecmd32,function
	.thumb_func
WallyHandlecmd32:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 WallyHandlecmd32,.Lfe55-WallyHandlecmd32
	.align	2, 0
	.globl	WallyHandlecmd33
	.type	 WallyHandlecmd33,function
	.thumb_func
WallyHandlecmd33:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 WallyHandlecmd33,.Lfe56-WallyHandlecmd33
	.align	2, 0
	.globl	WallyHandlecmd34
	.type	 WallyHandlecmd34,function
	.thumb_func
WallyHandlecmd34:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 WallyHandlecmd34,.Lfe57-WallyHandlecmd34
	.align	2, 0
	.globl	WallyHandlecmd35
	.type	 WallyHandlecmd35,function
	.thumb_func
WallyHandlecmd35:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 WallyHandlecmd35,.Lfe58-WallyHandlecmd35
	.align	2, 0
	.globl	WallyHandlecmd36
	.type	 WallyHandlecmd36,function
	.thumb_func
WallyHandlecmd36:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 WallyHandlecmd36,.Lfe59-WallyHandlecmd36
	.align	2, 0
	.globl	WallyHandlecmd37
	.type	 WallyHandlecmd37,function
	.thumb_func
WallyHandlecmd37:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 WallyHandlecmd37,.Lfe60-WallyHandlecmd37
	.align	2, 0
	.globl	WallyHandlecmd38
	.type	 WallyHandlecmd38,function
	.thumb_func
WallyHandlecmd38:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 WallyHandlecmd38,.Lfe61-WallyHandlecmd38
	.align	2, 0
	.globl	WallyHandlecmd39
	.type	 WallyHandlecmd39,function
	.thumb_func
WallyHandlecmd39:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 WallyHandlecmd39,.Lfe62-WallyHandlecmd39
	.align	2, 0
	.globl	WallyHandlecmd40
	.type	 WallyHandlecmd40,function
	.thumb_func
WallyHandlecmd40:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 WallyHandlecmd40,.Lfe63-WallyHandlecmd40
	.align	2, 0
	.globl	WallyHandleHitAnimation
	.type	 WallyHandleHitAnimation,function
	.thumb_func
WallyHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L612
	ldr	r2, .L612+0x4
	ldr	r4, .L612+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L610	@cond_branch
	bl	WallyBufferExecCompleted
	b	.L611
.L613:
	.align	2, 0
.L612:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gActiveBank
.L610:
	ldr	r1, .L614
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	sub_8047858
	ldr	r1, .L614+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L614+0x8
	str	r1, [r0]
.L611:
	pop	{r4}
	pop	{r0}
	bx	r0
.L615:
	.align	2, 0
.L614:
	.word	gDoingBattleAnim
	.word	gBattleBankFunc
	.word	bx_blink_t5
.Lfe64:
	.size	 WallyHandleHitAnimation,.Lfe64-WallyHandleHitAnimation
	.align	2, 0
	.globl	WallyHandlecmd42
	.type	 WallyHandlecmd42,function
	.thumb_func
WallyHandlecmd42:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 WallyHandlecmd42,.Lfe65-WallyHandlecmd42
	.align	2, 0
	.globl	WallyHandleEffectivenessSound
	.type	 WallyHandleEffectivenessSound,function
	.thumb_func
WallyHandleEffectivenessSound:
	push	{lr}
	ldr	r2, .L618
	ldr	r0, .L618+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlaySE
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.L619:
	.align	2, 0
.L618:
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe66:
	.size	 WallyHandleEffectivenessSound,.Lfe66-WallyHandleEffectivenessSound
	.align	2, 0
	.globl	WallyHandlecmd44
	.type	 WallyHandlecmd44,function
	.thumb_func
WallyHandlecmd44:
	push	{lr}
	ldr	r2, .L621
	ldr	r0, .L621+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.L622:
	.align	2, 0
.L621:
	.word	gBattleBufferA
	.word	gActiveBank
.Lfe67:
	.size	 WallyHandlecmd44,.Lfe67-WallyHandlecmd44
	.align	2, 0
	.globl	WallyHandleFaintingCry
	.type	 WallyHandleFaintingCry,function
	.thumb_func
WallyHandleFaintingCry:
	push	{lr}
	ldr	r1, .L624
	ldr	r0, .L624+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L624+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	bl	PlayCry1
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.L625:
	.align	2, 0
.L624:
	.word	gBattlePartyID
	.word	gActiveBank
	.word	gPlayerParty
.Lfe68:
	.size	 WallyHandleFaintingCry,.Lfe68-WallyHandleFaintingCry
	.align	2, 0
	.globl	WallyHandleIntroSlide
	.type	 WallyHandleIntroSlide,function
	.thumb_func
WallyHandleIntroSlide:
	push	{lr}
	ldr	r1, .L627
	ldr	r0, .L627+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	sub_80E43C0
	ldr	r2, .L627+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gUnknown_02024DE8
.Lfe69:
	.size	 WallyHandleIntroSlide,.Lfe69-WallyHandleIntroSlide
	.align	2, 0
	.globl	WallyHandleTrainerBallThrow
	.type	 WallyHandleTrainerBallThrow,function
	.thumb_func
WallyHandleTrainerBallThrow:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L631
	ldr	r7, .L631+0x4
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L631+0x8
	add	r0, r0, r5
	bl	oamt_add_pos2_onto_pos1
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L631+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L631+0x10
	str	r1, [r0]
	ldrb	r2, [r7]
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x38]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L631+0x14
	bl	StoreSpriteCallbackInData
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L631+0x18
	bl	AllocSpritePalette
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r0, .L631+0x1c
	ldr	r0, [r0, #0x10]
	lsr	r4, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L631+0x20
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L631+0x24
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r7]
	strh	r0, [r1, #0x8]
	ldrb	r3, [r7]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r2, .L631+0x28
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L630	@cond_branch
	ldr	r0, .L631+0x2c
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L631+0x30
	str	r1, [r0]
.L630:
	add	r2, r2, #0x30
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L631+0x34
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L631+0x38
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L632:
	.align	2, 0
.L631:
	.word	gObjectBankIDs
	.word	gActiveBank
	.word	gSprites
	.word	0xffd8
	.word	sub_8078B34
	.word	sub_8030E38
	.word	0xd6f8
	.word	gTrainerBackPicPaletteTable
	.word	sub_8139A2C
	.word	gTasks
	.word	gSharedMem+0x17810
	.word	gUnknown_02024E68
	.word	sub_8044CA0
	.word	gBattleBankFunc
	.word	nullsub_91
.Lfe70:
	.size	 WallyHandleTrainerBallThrow,.Lfe70-WallyHandleTrainerBallThrow
	.align	2, 0
	.globl	sub_81398BC
	.type	 sub_81398BC,function
	.thumb_func
sub_81398BC:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r0, r6, #0x2
	ldr	r1, .L634
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x2]
	ldr	r0, .L634+0x4
	lsl	r2, r6, #0x1
	add	r2, r2, r0
	ldr	r0, .L634+0x8
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r2]
	ldrh	r1, [r2]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L634+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L634+0x10
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L634+0x14
	mov	r9, r1
	add	r9, r9, r6
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBankIdentity
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	GetMonSpriteTemplate_803C56C
	ldr	r0, .L634+0x18
	mov	sl, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	sub_8077ABC
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	sub_8077F68
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	sub_8079E90
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L634+0x1c
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L634+0x20
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L634+0x24
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L634+0x28
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	sub_8046400
	mov	r1, r9
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L635:
	.align	2, 0
.L634:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gBattleBufferA
	.word	gPlayerParty
	.word	sub_80312F0
	.word	gUnknown_0300434C
	.word	gUnknown_02024E8C
	.word	gObjectBankIDs
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe71:
	.size	 sub_81398BC,.Lfe71-sub_81398BC
	.align	2, 0
	.globl	sub_8139A2C
	.type	 sub_8139A2C,function
	.thumb_func
sub_8139A2C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L639
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1e
	bgt	.L637	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L638
.L640:
	.align	2, 0
.L639:
	.word	gTasks
.L637:
	ldr	r4, .L641
	ldrb	r5, [r4]
	ldrh	r0, [r1, #0x8]
	strb	r0, [r4]
	ldr	r0, .L641+0x4
	ldrb	r1, [r4]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L641+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	sub_81398BC
	ldr	r1, .L641+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L641+0x10
	str	r1, [r0]
	strb	r5, [r4]
	add	r0, r6, #0
	bl	DestroyTask
.L638:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L642:
	.align	2, 0
.L641:
	.word	gActiveBank
	.word	gBattleBufferA
	.word	gBattlePartyID
	.word	gBattleBankFunc
	.word	sub_8137538
.Lfe72:
	.size	 sub_8139A2C,.Lfe72-sub_8139A2C
	.align	2, 0
	.globl	WallyHandlecmd48
	.type	 WallyHandlecmd48,function
	.thumb_func
WallyHandlecmd48:
	push	{r4, r5, lr}
	ldr	r1, .L646
	ldr	r0, .L646+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L644	@cond_branch
	add	r0, r2, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L644	@cond_branch
	bl	WallyBufferExecCompleted
	b	.L645
.L647:
	.align	2, 0
.L646:
	.word	gBattleBufferA
	.word	gActiveBank
.L644:
	ldr	r5, .L648
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L648+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r5]
	lsl	r4, r0, #0x9
	ldr	r3, .L648+0x8
	add	r1, r4, r3
	sub	r2, r3, #0x3
	add	r2, r4, r2
	ldrb	r2, [r2]
	sub	r3, r3, #0x2
	add	r4, r4, r3
	ldrb	r3, [r4]
	bl	sub_8044804
	ldr	r2, .L648+0xc
	ldrb	r1, [r5]
	add	r1, r1, r2
	strb	r0, [r1]
	bl	WallyBufferExecCompleted
.L645:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	gActiveBank
	.word	gSharedMem+0x17810
	.word	gBattleBufferA+0x4
	.word	gUnknown_02024E68
.Lfe73:
	.size	 WallyHandlecmd48,.Lfe73-WallyHandlecmd48
	.align	2, 0
	.globl	WallyHandlecmd49
	.type	 WallyHandlecmd49,function
	.thumb_func
WallyHandlecmd49:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe74:
	.size	 WallyHandlecmd49,.Lfe74-WallyHandlecmd49
	.align	2, 0
	.globl	WallyHandlecmd50
	.type	 WallyHandlecmd50,function
	.thumb_func
WallyHandlecmd50:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 WallyHandlecmd50,.Lfe75-WallyHandlecmd50
	.align	2, 0
	.globl	WallyHandleSpriteInvisibility
	.type	 WallyHandleSpriteInvisibility,function
	.thumb_func
WallyHandleSpriteInvisibility:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 WallyHandleSpriteInvisibility,.Lfe76-WallyHandleSpriteInvisibility
	.align	2, 0
	.globl	WallyHandleBattleAnimation
	.type	 WallyHandleBattleAnimation,function
	.thumb_func
WallyHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r5, .L656
	ldr	r6, .L656+0x4
	ldrb	r2, [r6]
	lsl	r1, r2, #0x9
	add	r0, r5, #0x1
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r5, #0x3
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	str	r4, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	bl	move_anim_start_t3
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L654	@cond_branch
	bl	WallyBufferExecCompleted
	b	.L655
.L657:
	.align	2, 0
.L656:
	.word	gBattleBufferA
	.word	gActiveBank
.L654:
	ldr	r0, .L658
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L658+0x4
	str	r0, [r1]
.L655:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gBattleBankFunc
	.word	sub_8137940
.Lfe77:
	.size	 WallyHandleBattleAnimation,.Lfe77-WallyHandleBattleAnimation
	.align	2, 0
	.globl	WallyHandleLinkStandbyMsg
	.type	 WallyHandleLinkStandbyMsg,function
	.thumb_func
WallyHandleLinkStandbyMsg:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 WallyHandleLinkStandbyMsg,.Lfe78-WallyHandleLinkStandbyMsg
	.align	2, 0
	.globl	WallyHandleResetActionMoveSelection
	.type	 WallyHandleResetActionMoveSelection,function
	.thumb_func
WallyHandleResetActionMoveSelection:
	push	{lr}
	bl	WallyBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 WallyHandleResetActionMoveSelection,.Lfe79-WallyHandleResetActionMoveSelection
	.align	2, 0
	.globl	WallyHandlecmd55
	.type	 WallyHandlecmd55,function
	.thumb_func
WallyHandlecmd55:
	push	{r4, lr}
	ldr	r2, .L664
	ldr	r1, .L664+0x4
	ldr	r4, .L664+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	WallyBufferExecCompleted
	ldr	r0, .L664+0xc
	ldrh	r1, [r0]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0x2
	bne	.L663	@cond_branch
	ldr	r0, .L664+0x10
	ldrb	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L664+0x14
	str	r0, [r1]
.L663:
	pop	{r4}
	pop	{r0}
	bx	r0
.L665:
	.align	2, 0
.L664:
	.word	gBattleOutcome
	.word	gBattleBufferA
	.word	gActiveBank
	.word	gBattleTypeFlags
	.word	gBattleBankFunc
	.word	sub_813746C
.Lfe80:
	.size	 WallyHandlecmd55,.Lfe80-WallyHandlecmd55
	.align	2, 0
	.globl	WallyHandlecmd56
	.type	 WallyHandlecmd56,function
	.thumb_func
WallyHandlecmd56:
	bx	lr
.Lfe81:
	.size	 WallyHandlecmd56,.Lfe81-WallyHandlecmd56
.text
	.align	2, 0
