@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	CalculateBaseDamage
	.type	 CalculateBaseDamage,function
	.thumb_func
CalculateBaseDamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffd4
	add	r7, r0, #0
	str	r1, [sp, #0x4]
	str	r2, [sp, #0x8]
	ldr	r0, [sp, #0x4c]
	ldr	r1, [sp, #0x50]
	ldr	r2, [sp, #0x54]
	ldr	r4, [sp, #0x58]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	str	r3, [sp, #0xc]
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x10]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, #0x0
	cmp	r3, #0
	bne	.L3	@cond_branch
	ldr	r2, .L101
	ldr	r1, .L101+0x4
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	strh	r0, [r2]
	b	.L4
.L102:
	.align	2, 0
.L101:
	.word	gBattleMovePower
	.word	gBattleMoves
.L3:
	ldr	r0, .L103
	strh	r3, [r0]
.L4:
	cmp	r6, #0
	bne	.L5	@cond_branch
	ldr	r1, .L103+0x4
	ldr	r6, [sp, #0x8]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	mov	r9, r0
	b	.L6
.L104:
	.align	2, 0
.L103:
	.word	gBattleMovePower
	.word	gBattleMoves
.L5:
	mov	r0, #0x3f
	mov	r9, r0
	mov	r1, r9
	and	r1, r1, r6
	mov	r9, r1
.L6:
	ldrh	r6, [r7, #0x2]
	ldr	r2, [sp, #0x4]
	ldrh	r2, [r2, #0x4]
	str	r2, [sp, #0x14]
	ldrh	r3, [r7, #0x8]
	mov	r8, r3
	ldr	r0, [sp, #0x4]
	ldrh	r0, [r0, #0xa]
	str	r0, [sp, #0x18]
	ldrh	r0, [r7, #0x2e]
	cmp	r0, #0xaf
	bne	.L7	@cond_branch
	ldr	r1, .L105
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x7]
	mov	sl, r3
	ldrb	r0, [r0, #0x1a]
	b	.L96
.L106:
	.align	2, 0
.L105:
	.word	gEnigmaBerries
.L7:
	ldrh	r0, [r7, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldrh	r0, [r7, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L96:
	str	r0, [sp, #0x20]
	ldr	r1, [sp, #0x4]
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L9	@cond_branch
	ldr	r1, .L107
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	str	r0, [sp, #0x1c]
	b	.L10
.L108:
	.align	2, 0
.L107:
	.word	gEnigmaBerries
.L95:
	ldr	r0, [sp, #0x20]
	add	r0, r0, #0x64
	mul	r0, r0, r6
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	b	.L22
.L9:
	ldr	r2, [sp, #0x4]
	ldrh	r0, [r2, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x1c]
	ldr	r3, [sp, #0x4]
	ldrh	r0, [r3, #0x2e]
	bl	ItemId_GetHoldEffectParam
.L10:
	add	r0, r7, #0
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	str	r0, [sp, #0x24]
	cmp	r1, #0x25
	beq	.L12	@cond_branch
	cmp	r1, #0x4a
	bne	.L11	@cond_branch
.L12:
	lsl	r0, r6, #0x11
	lsr	r6, r0, #0x10
.L11:
	ldr	r0, .L109
	ldrh	r1, [r0]
	ldr	r0, .L109+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB202
	b	.L19	@long jump
.LCB202:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldr	r0, .L109+0x8
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L13	@cond_branch
	ldr	r0, .L109+0xc
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldr	r0, [sp, #0x10]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L13	@cond_branch
	mov	r0, #0x6e
	mul	r0, r0, r6
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L13:
	ldr	r0, .L109
	ldrh	r1, [r0]
	ldr	r0, .L109+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L19	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L15	@cond_branch
	ldr	r0, .L109+0x8
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L15	@cond_branch
	ldr	r0, .L109+0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L15	@cond_branch
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L15	@cond_branch
	mov	r0, #0x6e
	ldr	r1, [sp, #0x14]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x14]
.L15:
	ldr	r0, .L109
	ldrh	r1, [r0]
	ldr	r0, .L109+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L19	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, .L109+0x8
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L17	@cond_branch
	ldr	r0, .L109+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, [sp, #0x10]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L17	@cond_branch
	mov	r0, #0x6e
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L17:
	ldr	r0, .L109
	ldrh	r1, [r0]
	ldr	r0, .L109+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L19	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L19	@cond_branch
	ldr	r0, .L109+0x8
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L19	@cond_branch
	ldr	r0, .L109+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L19	@cond_branch
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L19	@cond_branch
	mov	r0, #0x6e
	ldr	r3, [sp, #0x18]
	mul	r0, r0, r3
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x18]
.L19:
	mov	r2, #0x0
	ldr	r4, .L109+0x18
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x20
	str	r0, [sp, #0x28]
	add	r3, r4, #0
.L24:
	lsl	r1, r2, #0x1
	ldrb	r0, [r3]
	cmp	sl, r0
	bne	.L23	@cond_branch
	add	r0, r4, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r9, r0
	bne	.L23	@cond_branch
	mov	r1, r9
	cmp	r1, #0x8
	bhi	.LCB430
	b	.L95	@long jump
.LCB430:
	ldr	r0, [sp, #0x20]
	add	r0, r0, #0x64
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	b	.L22
.L110:
	.align	2, 0
.L109:
	.word	gBattleTypeFlags
	.word	0x902
	.word	gTrainerBattleOpponent
	.word	0x807
	.word	0x80b
	.word	0x80d
	.word	gHoldEffectToType
.L23:
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x10
	bls	.L24	@cond_branch
.L22:
	mov	r3, sl
	cmp	r3, #0x1d
	bne	.L29	@cond_branch
	mov	r0, #0x96
	mul	r0, r0, r6
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L29:
	mov	r0, sl
	cmp	r0, #0x22
	bne	.L30	@cond_branch
	ldr	r0, .L111
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L30	@cond_branch
	ldr	r1, .L111+0x4
	add	r0, r1, #0
	ldrh	r2, [r7]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L30	@cond_branch
	mov	r0, #0x96
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L30:
	ldr	r0, [sp, #0x1c]
	cmp	r0, #0x22
	bne	.L31	@cond_branch
	ldr	r0, .L111
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L31	@cond_branch
	ldr	r1, .L111+0x4
	add	r0, r1, #0
	ldr	r2, [sp, #0x4]
	ldrh	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L31	@cond_branch
	mov	r0, #0x96
	ldr	r3, [sp, #0x18]
	mul	r0, r0, r3
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x18]
.L31:
	mov	r0, sl
	cmp	r0, #0x23
	bne	.L32	@cond_branch
	ldrh	r1, [r7]
	ldr	r0, .L111+0x8
	cmp	r1, r0
	bne	.L32	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x11
	lsr	r0, r0, #0x10
	mov	r8, r0
.L32:
	ldr	r2, [sp, #0x1c]
	cmp	r2, #0x24
	bne	.L33	@cond_branch
	ldr	r3, [sp, #0x4]
	ldrh	r1, [r3]
	ldr	r0, .L111+0x8
	cmp	r1, r0
	bne	.L33	@cond_branch
	ldr	r1, [sp, #0x18]
	lsl	r0, r1, #0x11
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x18]
.L33:
	mov	r2, sl
	cmp	r2, #0x2d
	bne	.L34	@cond_branch
	ldrh	r0, [r7]
	cmp	r0, #0x19
	bne	.L34	@cond_branch
	mov	r3, r8
	lsl	r0, r3, #0x11
	lsr	r0, r0, #0x10
	mov	r8, r0
.L34:
	ldr	r0, [sp, #0x1c]
	cmp	r0, #0x40
	bne	.L35	@cond_branch
	ldr	r1, [sp, #0x4]
	ldrh	r0, [r1]
	cmp	r0, #0x84
	bne	.L35	@cond_branch
	ldr	r2, [sp, #0x14]
	lsl	r0, r2, #0x11
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x14]
.L35:
	mov	r3, sl
	cmp	r3, #0x41
	bne	.L36	@cond_branch
	ldrh	r0, [r7]
	sub	r0, r0, #0x68
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L36	@cond_branch
	lsl	r0, r6, #0x11
	lsr	r6, r0, #0x10
.L36:
	ldr	r1, [sp, #0x28]
	ldrb	r0, [r1]
	cmp	r0, #0x2f
	bne	.L37	@cond_branch
	mov	r2, r9
	cmp	r2, #0xa
	beq	.L38	@cond_branch
	cmp	r2, #0xf
	bne	.L37	@cond_branch
.L38:
	mov	r3, r8
	lsr	r3, r3, #0x1
	mov	r8, r3
.L37:
	ldr	r0, [sp, #0x24]
	ldrb	r4, [r0]
	cmp	r4, #0x37
	bne	.L39	@cond_branch
	mov	r0, #0x96
	mul	r0, r0, r6
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L39:
	cmp	r4, #0x39
	bne	.L40	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x3a
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L40	@cond_branch
	mov	r0, #0x96
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L40:
	ldr	r2, [sp, #0x24]
	ldrb	r0, [r2]
	cmp	r0, #0x3a
	bne	.L41	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x39
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	mov	r0, #0x96
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L41:
	ldr	r1, [sp, #0x24]
	ldrb	r0, [r1]
	cmp	r0, #0x3e
	bne	.L42	@cond_branch
	ldr	r0, [r7, #0x4c]
	cmp	r0, #0
	beq	.L42	@cond_branch
	mov	r0, #0x96
	mul	r0, r0, r6
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L42:
	ldr	r2, [sp, #0x28]
	ldrb	r0, [r2]
	cmp	r0, #0x3f
	bne	.L43	@cond_branch
	ldr	r3, [sp, #0x4]
	ldr	r0, [r3, #0x4c]
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x96
	ldr	r1, [sp, #0x14]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x14]
.L43:
	mov	r2, r9
	cmp	r2, #0xd
	bne	.L44	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0xfd
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L44	@cond_branch
	ldr	r1, .L111+0xc
	ldrh	r0, [r1]
	lsr	r0, r0, #0x1
	strh	r0, [r1]
.L44:
	mov	r3, r9
	cmp	r3, #0xa
	bne	.L45	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0xfe
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L45	@cond_branch
	ldr	r1, .L111+0xc
	ldrh	r0, [r1]
	lsr	r0, r0, #0x1
	strh	r0, [r1]
.L45:
	mov	r0, r9
	cmp	r0, #0xc
	bne	.L46	@cond_branch
	ldr	r1, [sp, #0x24]
	ldrb	r0, [r1]
	cmp	r0, #0x41
	bne	.L46	@cond_branch
	ldrh	r0, [r7, #0x2c]
	mov	r1, #0x3
	bl	__udivsi3
	ldrh	r1, [r7, #0x28]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L46	@cond_branch
	ldr	r4, .L111+0xc
	ldrh	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	strh	r0, [r4]
.L46:
	mov	r2, r9
	cmp	r2, #0xa
	bne	.L47	@cond_branch
	ldr	r3, [sp, #0x24]
	ldrb	r0, [r3]
	cmp	r0, #0x42
	bne	.L47	@cond_branch
	ldrh	r0, [r7, #0x2c]
	mov	r1, #0x3
	bl	__udivsi3
	ldrh	r1, [r7, #0x28]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L47	@cond_branch
	ldr	r4, .L111+0xc
	ldrh	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	strh	r0, [r4]
.L47:
	mov	r0, r9
	cmp	r0, #0xb
	bne	.L48	@cond_branch
	ldr	r1, [sp, #0x24]
	ldrb	r0, [r1]
	cmp	r0, #0x43
	bne	.L48	@cond_branch
	ldrh	r0, [r7, #0x2c]
	mov	r1, #0x3
	bl	__udivsi3
	ldrh	r1, [r7, #0x28]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L48	@cond_branch
	ldr	r4, .L111+0xc
	ldrh	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	strh	r0, [r4]
.L48:
	mov	r2, r9
	cmp	r2, #0x6
	bne	.L49	@cond_branch
	ldr	r3, [sp, #0x24]
	ldrb	r0, [r3]
	cmp	r0, #0x44
	bne	.L49	@cond_branch
	ldrh	r0, [r7, #0x2c]
	mov	r1, #0x3
	bl	__udivsi3
	ldrh	r1, [r7, #0x28]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L49	@cond_branch
	ldr	r4, .L111+0xc
	ldrh	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	strh	r0, [r4]
.L49:
	ldr	r2, .L111+0x10
	ldr	r0, .L111+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L50	@cond_branch
	ldr	r0, [sp, #0x14]
	lsr	r0, r0, #0x1
	str	r0, [sp, #0x14]
.L50:
	mov	r1, r9
	cmp	r1, #0x8
	bls	.LCB940
	b	.L51	@long jump
.LCB940:
	ldr	r0, .L111+0x18
	ldrb	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x2
	bne	.L52	@cond_branch
	mov	r0, #0x19
	ldrsb	r0, [r7, r0]
	cmp	r0, #0x6
	ble	.L53	@cond_branch
	ldr	r2, .L111+0x1c
	b	.L97
.L112:
	.align	2, 0
.L111:
	.word	gBattleTypeFlags
	.word	0xfffffe69
	.word	0x175
	.word	gBattleMovePower
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gCritMultiplier
	.word	gStatStageRatios
.L53:
	add	r5, r6, #0
	b	.L55
.L52:
	ldr	r2, .L113
	mov	r0, #0x19
	ldrsb	r0, [r7, r0]
.L97:
	lsl	r0, r0, #0x1
	add	r1, r0, r2
	ldrb	r1, [r1]
	mov	r5, r6
	mul	r5, r5, r1
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	__divsi3
	add	r5, r0, #0
.L55:
	ldr	r0, .L113+0x4
	ldrh	r0, [r0]
	mul	r5, r5, r0
	add	r0, r7, #0
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5
	bl	__divsi3
	add	r0, r0, #0x2
	mul	r5, r5, r0
	ldrb	r0, [r4]
	cmp	r0, #0x2
	bne	.L56	@cond_branch
	ldr	r2, [sp, #0x4]
	mov	r0, #0x1a
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x5
	bgt	.L57	@cond_branch
	ldr	r2, .L113
	ldr	r3, [sp, #0x4]
	mov	r0, #0x1a
	ldrsb	r0, [r3, r0]
	b	.L98
.L114:
	.align	2, 0
.L113:
	.word	gStatStageRatios
	.word	gBattleMovePower
.L57:
	ldr	r3, [sp, #0x14]
	b	.L59
.L56:
	ldr	r2, .L115
	ldr	r1, [sp, #0x4]
	mov	r0, #0x1a
	ldrsb	r0, [r1, r0]
.L98:
	lsl	r0, r0, #0x1
	add	r1, r0, r2
	ldrb	r1, [r1]
	ldr	r6, [sp, #0x14]
	mov	r3, r6
	mul	r3, r3, r1
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r1, [r0]
	add	r0, r3, #0
	bl	__divsi3
	add	r3, r0, #0
.L59:
	add	r0, r5, #0
	add	r1, r3, #0
	bl	__divsi3
	add	r5, r0, #0
	mov	r1, #0x32
	bl	__divsi3
	add	r5, r0, #0
	ldr	r0, [r7, #0x4c]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L60	@cond_branch
	ldr	r1, [sp, #0x24]
	ldrb	r0, [r1]
	cmp	r0, #0x3e
	beq	.L60	@cond_branch
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r5, r0, #0x1
.L60:
	mov	r0, #0x1
	ldr	r2, [sp, #0xc]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L61	@cond_branch
	ldrb	r1, [r4]
	cmp	r1, #0x1
	bne	.L61	@cond_branch
	ldr	r0, .L115+0x4
	ldrh	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L62	@cond_branch
	mov	r0, #0x2
	bl	CountAliveMons
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L62	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	__divsi3
	lsl	r5, r0, #0x1
	b	.L61
.L116:
	.align	2, 0
.L115:
	.word	gStatStageRatios
	.word	gBattleTypeFlags
.L62:
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r5, r0, #0x1
.L61:
	ldr	r0, .L117
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L64	@cond_branch
	ldr	r0, .L117+0x4
	ldr	r3, [sp, #0x8]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x8
	bne	.L64	@cond_branch
	mov	r0, #0x2
	bl	CountAliveMons
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L64	@cond_branch
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r5, r0, #0x1
.L64:
	cmp	r5, #0
	bne	.L51	@cond_branch
	mov	r5, #0x1
.L51:
	mov	r6, r9
	cmp	r6, #0x9
	bne	.L66	@cond_branch
	mov	r5, #0x0
.L66:
	mov	r0, r9
	cmp	r0, #0x9
	bhi	.LCB1173
	b	.L67	@long jump
.LCB1173:
	ldr	r0, .L117+0x8
	ldrb	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x2
	bne	.L68	@cond_branch
	mov	r0, #0x1c
	ldrsb	r0, [r7, r0]
	cmp	r0, #0x6
	ble	.L69	@cond_branch
	ldr	r2, .L117+0xc
	b	.L99
.L118:
	.align	2, 0
.L117:
	.word	gBattleTypeFlags
	.word	gBattleMoves
	.word	gCritMultiplier
	.word	gStatStageRatios
.L69:
	mov	r5, r8
	b	.L71
.L68:
	ldr	r2, .L119
	mov	r0, #0x1c
	ldrsb	r0, [r7, r0]
.L99:
	lsl	r0, r0, #0x1
	add	r1, r0, r2
	ldrb	r1, [r1]
	mov	r5, r8
	mul	r5, r5, r1
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	__divsi3
	add	r5, r0, #0
.L71:
	ldr	r0, .L119+0x4
	ldrh	r0, [r0]
	mul	r5, r5, r0
	add	r0, r7, #0
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r1, #0x5
	bl	__divsi3
	add	r0, r0, #0x2
	mul	r5, r5, r0
	ldrb	r0, [r4]
	cmp	r0, #0x2
	bne	.L72	@cond_branch
	ldr	r1, [sp, #0x4]
	mov	r0, #0x1d
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x5
	bgt	.L73	@cond_branch
	ldr	r2, .L119
	b	.L100
.L120:
	.align	2, 0
.L119:
	.word	gStatStageRatios
	.word	gBattleMovePower
.L73:
	ldr	r3, [sp, #0x18]
	b	.L75
.L72:
	ldr	r2, .L121
	ldr	r1, [sp, #0x4]
	mov	r0, #0x1d
	ldrsb	r0, [r1, r0]
.L100:
	lsl	r0, r0, #0x1
	add	r1, r0, r2
	ldrb	r1, [r1]
	ldr	r6, [sp, #0x18]
	mov	r3, r6
	mul	r3, r3, r1
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r1, [r0]
	add	r0, r3, #0
	bl	__divsi3
	add	r3, r0, #0
.L75:
	add	r0, r5, #0
	add	r1, r3, #0
	bl	__divsi3
	add	r5, r0, #0
	mov	r1, #0x32
	bl	__divsi3
	add	r5, r0, #0
	mov	r0, #0x2
	ldr	r1, [sp, #0xc]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L76	@cond_branch
	ldrb	r1, [r4]
	cmp	r1, #0x1
	bne	.L76	@cond_branch
	ldr	r0, .L121+0x4
	ldrh	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L77	@cond_branch
	mov	r0, #0x2
	bl	CountAliveMons
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L77	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	__divsi3
	lsl	r5, r0, #0x1
	b	.L76
.L122:
	.align	2, 0
.L121:
	.word	gStatStageRatios
	.word	gBattleTypeFlags
.L77:
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r5, r0, #0x1
.L76:
	ldr	r0, .L123
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L79	@cond_branch
	ldr	r0, .L123+0x4
	ldr	r2, [sp, #0x8]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x8
	bne	.L79	@cond_branch
	mov	r0, #0x2
	bl	CountAliveMons
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L79	@cond_branch
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r5, r0, #0x1
.L79:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L80	@cond_branch
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L80	@cond_branch
	ldr	r2, .L123+0x8
	ldrh	r1, [r2]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0
	beq	.L81	@cond_branch
	mov	r3, r9
	cmp	r3, #0xa
	beq	.L83	@cond_branch
	cmp	r3, #0xb
	beq	.L84	@cond_branch
	b	.L81
.L124:
	.align	2, 0
.L123:
	.word	gBattleTypeFlags
	.word	gBattleMoves
	.word	gBattleWeather
.L83:
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r5, r0, #0x1
	b	.L81
.L84:
	lsl	r0, r5, #0x4
	sub	r0, r0, r5
	mov	r1, #0xa
	bl	__divsi3
	add	r5, r0, #0
.L81:
	ldrh	r1, [r4]
	mov	r0, #0x9f
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L87	@cond_branch
	ldr	r0, .L125
	ldrh	r0, [r0]
	cmp	r0, #0x4c
	bne	.L87	@cond_branch
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r5, r0, #0x1
.L87:
	ldrh	r1, [r4]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L80	@cond_branch
	mov	r6, r9
	cmp	r6, #0xa
	beq	.L90	@cond_branch
	cmp	r6, #0xb
	beq	.L91	@cond_branch
	b	.L80
.L126:
	.align	2, 0
.L125:
	.word	gCurrentMove
.L90:
	lsl	r0, r5, #0x4
	sub	r0, r0, r5
	mov	r1, #0xa
	bl	__divsi3
	add	r5, r0, #0
	b	.L80
.L91:
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r5, r0, #0x1
.L80:
	ldr	r1, .L127
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L67	@cond_branch
	mov	r3, r9
	cmp	r3, #0xa
	bne	.L67	@cond_branch
	lsl	r0, r5, #0x4
	sub	r0, r0, r5
	mov	r1, #0xa
	bl	__divsi3
	add	r5, r0, #0
.L67:
	add	r0, r5, #0x2
	add	sp, sp, #0x2c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L128:
	.align	2, 0
.L127:
	.word	gSharedMem+0x17100
.Lfe1:
	.size	 CalculateBaseDamage,.Lfe1-CalculateBaseDamage
.text
	.align	2, 0
