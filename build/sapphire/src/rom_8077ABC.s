@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_0202F7D4
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_0202F7D4,object
	.size	 gUnknown_0202F7D4,4
gUnknown_0202F7D4:
	.word	0x0
	.globl	filler_0202F7D8
	.align	2, 0
	.type	 filler_0202F7D8,object
	.size	 filler_0202F7D8,12
filler_0202F7D8:
	.word	0x0
	.space	8
	.globl	gUnknown_0837F578
	.section .rodata
	.align	2, 0
	.type	 gUnknown_0837F578,object
gUnknown_0837F578:
	.byte	0x48
	.byte	0x50
	.space	2
	.byte	0xb0
	.byte	0x28
	.space	2
	.byte	0x30
	.byte	0x28
	.space	2
	.byte	0x70
	.byte	0x50
	.space	2
	.byte	0x20
	.byte	0x50
	.space	2
	.byte	0xc8
	.byte	0x28
	.space	2
	.byte	0x5a
	.byte	0x58
	.space	2
	.byte	0x98
	.byte	0x20
	.space	2
	.size	 gUnknown_0837F578,32
	.globl	gCastformFrontSpriteCoords
	.align	2, 0
	.type	 gCastformFrontSpriteCoords,object
gCastformFrontSpriteCoords:
	.byte	0x44
	.byte	0x11
	.space	2
	.byte	0x66
	.byte	0x9
	.space	2
	.byte	0x46
	.byte	0x9
	.space	2
	.byte	0x86
	.byte	0x8
	.space	2
	.size	 gCastformFrontSpriteCoords,16
	.globl	gUnknownCastformData_0837F5A8
	.type	 gUnknownCastformData_0837F5A8,object
gUnknownCastformData_0837F5A8:
	.byte	0xd
	.byte	0xe
	.byte	0xd
	.byte	0xd
	.size	 gUnknownCastformData_0837F5A8,4
	.globl	gUnknown_0837F5AC
	.type	 gUnknown_0837F5AC,object
gUnknown_0837F5AC:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 gUnknown_0837F5AC,4
	.globl	gSpriteTemplate_837F5B0
	.align	2, 0
	.type	 gSpriteTemplate_837F5B0,object
gSpriteTemplate_837F5B0:
	.short	0xd755
	.short	0xd755
	.word	gOamData_837DF9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd756
	.short	0xd756
	.word	gOamData_837DF9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 gSpriteTemplate_837F5B0,48
	.globl	gUnknown_0837F5E0
	.align	2, 0
	.type	 gUnknown_0837F5E0,object
gUnknown_0837F5E0:
	.word	gMiscBlank_Gfx
	.short	0x800
	.short	0xd755
	.word	gMiscBlank_Gfx
	.short	0x800
	.short	0xd756
	.size	 gUnknown_0837F5E0,16
.text
	.align	2, 0
	.globl	sub_8077ABC
	.type	 sub_8077ABC,function
	.thumb_func
sub_8077ABC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	cmp	r4, #0x3
	bne	.L3	@cond_branch
	cmp	r5, #0x3
	bne	.L3	@cond_branch
	mov	r4, #0x1
.L3:
	cmp	r4, #0x4
	bhi	.L11	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L27
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L28:
	.align	2, 0
.L27:
	.word	.L24
	.align	2, 0
	.align	2, 0
.L24:
	.word	.L7
	.word	.L8
	.word	.L7
	.word	.L11
	.word	.L11
.L7:
	ldr	r4, .L29
	add	r0, r5, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L29+0x4
	ldrh	r2, [r1]
	mov	r1, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L5
.L30:
	.align	2, 0
.L29:
	.word	gUnknown_0837F578
	.word	gBattleTypeFlags
.L8:
	ldr	r4, .L31
	add	r0, r5, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L31+0x4
	ldrh	r2, [r1]
	mov	r1, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0, #0x1]
	b	.L5
.L32:
	.align	2, 0
.L31:
	.word	gUnknown_0837F578
	.word	gBattleTypeFlags
.L11:
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L12	@cond_branch
	ldr	r2, .L33
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldrh	r1, [r2, #0x2]
	b	.L15
.L34:
	.align	2, 0
.L33:
	.word	gSharedMem+0x19348
.L13:
	ldrh	r1, [r2]
	b	.L15
.L12:
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L16	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L35
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r1, .L35+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L35+0x8
	b	.L25
.L36:
	.align	2, 0
.L35:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gEnemyParty
.L16:
	lsl	r0, r5, #0x2
	ldr	r1, .L37
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r1, .L37+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L37+0x8
.L25:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L15
.L38:
	.align	2, 0
.L37:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gPlayerParty
.L20:
	ldrh	r1, [r1, #0x2]
.L15:
	cmp	r4, #0x3
	bne	.L22	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x1
	b	.L26
.L22:
	add	r0, r5, #0
	mov	r2, #0x0
.L26:
	bl	sub_8077E44
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L5:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 sub_8077ABC,.Lfe1-sub_8077ABC
	.align	2, 0
	.globl	sub_8077BFC
	.type	 sub_8077BFC,function
	.thumb_func
sub_8077BFC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L40	@cond_branch
.L41:
	cmp	r5, #0xc9
	bne	.L42	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r2, .L70
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L44	@cond_branch
	ldr	r2, [r2, #0x10]
	b	.L46
.L71:
	.align	2, 0
.L70:
	.word	gSharedMem+0x19348
.L44:
	ldr	r2, [r2, #0x8]
	b	.L46
.L43:
	lsl	r1, r4, #0x2
	ldr	r0, .L72
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L47	@cond_branch
	ldr	r1, .L72+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L72+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L46
.L73:
	.align	2, 0
.L72:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gPlayerParty
.L47:
	ldr	r0, .L74
	add	r0, r1, r0
	ldr	r2, [r0]
.L46:
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L49	@cond_branch
	add	r0, r5, #0
	b	.L50
.L75:
	.align	2, 0
.L74:
	.word	gPID_perBank
.L49:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L50:
	ldr	r1, .L76
	lsl	r0, r0, #0x2
	b	.L67
.L77:
	.align	2, 0
.L76:
	.word	gMonBackPicCoords
.L42:
	ldr	r0, .L78
	cmp	r5, r0
	bne	.L52	@cond_branch
	ldr	r0, .L78+0x4
	ldr	r1, .L78+0x8
	add	r1, r4, r1
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L56
.L79:
	.align	2, 0
.L78:
	.word	0x181
	.word	gUnknown_0837F5AC
	.word	gBattleMonForms
.L52:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	bls	.L54	@cond_branch
	ldr	r0, .L80
	b	.L68
.L81:
	.align	2, 0
.L80:
	.word	gMonBackPicCoords
.L54:
	ldr	r1, .L82
	b	.L69
.L83:
	.align	2, 0
.L82:
	.word	gMonBackPicCoords
.L40:
	cmp	r5, #0xc9
	bne	.L57	@cond_branch
	lsl	r1, r4, #0x2
	ldr	r0, .L84
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L58	@cond_branch
	ldr	r1, .L84+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L84+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L59
.L85:
	.align	2, 0
.L84:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gEnemyParty
.L58:
	ldr	r0, .L86
	add	r0, r1, r0
	ldr	r2, [r0]
.L59:
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L60	@cond_branch
	add	r0, r5, #0
	b	.L61
.L87:
	.align	2, 0
.L86:
	.word	gPID_perBank
.L60:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L61:
	ldr	r1, .L88
	lsl	r0, r0, #0x2
	b	.L67
.L89:
	.align	2, 0
.L88:
	.word	gMonFrontPicCoords
.L57:
	ldr	r0, .L90
	cmp	r5, r0
	bne	.L63	@cond_branch
	ldr	r0, .L90+0x4
	ldr	r1, .L90+0x8
	add	r1, r4, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L56
.L91:
	.align	2, 0
.L90:
	.word	0x181
	.word	gCastformFrontSpriteCoords
	.word	gBattleMonForms
.L63:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	bls	.L65	@cond_branch
	ldr	r0, .L92
	b	.L68
.L93:
	.align	2, 0
.L92:
	.word	gMonFrontPicCoords
.L65:
	ldr	r1, .L94
.L69:
	lsl	r0, r5, #0x2
.L67:
	add	r0, r0, r1
.L68:
	ldrb	r0, [r0, #0x1]
.L56:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L95:
	.align	2, 0
.L94:
	.word	gMonFrontPicCoords
.Lfe2:
	.size	 sub_8077BFC,.Lfe2-sub_8077BFC
	.align	2, 0
	.globl	sub_8077DD8
	.type	 sub_8077DD8,function
	.thumb_func
sub_8077DD8:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r7, r4, #0
	mov	r5, #0x0
	add	r0, r6, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L97	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L97	@cond_branch
	ldr	r0, .L104
	cmp	r4, r0
	bne	.L99	@cond_branch
	ldr	r0, .L104+0x4
	ldr	r1, .L104+0x8
	add	r1, r6, r1
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r5, [r1]
	b	.L97
.L105:
	.align	2, 0
.L104:
	.word	0x181
	.word	gUnknownCastformData_0837F5A8
	.word	gBattleMonForms
.L99:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bls	.L101	@cond_branch
	ldr	r0, .L106
	b	.L103
.L107:
	.align	2, 0
.L106:
	.word	gEnemyMonElevation
.L101:
	ldr	r0, .L108
	add	r0, r7, r0
.L103:
	ldrb	r5, [r0]
.L97:
	add	r0, r5, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L109:
	.align	2, 0
.L108:
	.word	gEnemyMonElevation
.Lfe3:
	.size	 sub_8077DD8,.Lfe3-sub_8077DD8
	.align	2, 0
	.globl	sub_8077E44
	.type	 sub_8077E44,function
	.thumb_func
sub_8077E44:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r6, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L112	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L111	@cond_branch
.L112:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	sub_8077BFC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	b	.L113
.L111:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	sub_8077BFC
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	sub_8077DD8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L113:
	add	r0, r6, #0
	bl	GetBankIdentity
	ldr	r3, .L117
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L117+0x4
	ldrh	r2, [r1]
	mov	r1, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r7, #0
	beq	.L114	@cond_branch
	add	r0, r6, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L115	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L115:
	cmp	r4, #0x68
	bls	.L114	@cond_branch
	mov	r4, #0x68
.L114:
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L118:
	.align	2, 0
.L117:
	.word	gUnknown_0837F578
	.word	gBattleTypeFlags
.Lfe4:
	.size	 sub_8077E44,.Lfe4-sub_8077E44
	.align	2, 0
	.globl	sub_8077EE4
	.type	 sub_8077EE4,function
	.thumb_func
sub_8077EE4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r0, #0xfd
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	bhi	.L120	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L121	@cond_branch
	ldr	r2, .L134
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L122	@cond_branch
	ldrh	r1, [r2, #0x2]
	b	.L124
.L135:
	.align	2, 0
.L134:
	.word	gSharedMem+0x19348
.L122:
	ldrh	r1, [r2]
	b	.L124
.L121:
	lsl	r0, r4, #0x2
	ldr	r1, .L136
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L125	@cond_branch
	ldr	r1, .L136+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L124
.L137:
	.align	2, 0
.L136:
	.word	gSharedMem+0x17800
	.word	gUnknown_0202F7CA
.L125:
	ldrh	r1, [r1, #0x2]
.L124:
	cmp	r5, #0x3
	bne	.L127	@cond_branch
	add	r0, r4, #0
	mov	r2, #0x1
	bl	sub_8077E44
	b	.L132
.L127:
	add	r0, r4, #0
	mov	r2, #0x0
	bl	sub_8077E44
	b	.L132
.L120:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_8077ABC
.L132:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 sub_8077EE4,.Lfe5-sub_8077EE4
	.align	2, 0
	.globl	sub_8077F68
	.type	 sub_8077F68,function
	.thumb_func
sub_8077F68:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x4
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 sub_8077F68,.Lfe6-sub_8077F68
	.align	2, 0
	.globl	sub_8077F7C
	.type	 sub_8077F7C,function
	.thumb_func
sub_8077F7C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L140	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	b	.L142
.L140:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0x88
	lsl	r1, r1, #0xd
.L142:
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 sub_8077F7C,.Lfe7-sub_8077F7C
	.align	2, 0
	.globl	sub_8077FC0
	.type	 sub_8077FC0,function
	.thumb_func
sub_8077FC0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L144	@cond_branch
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L145	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L153
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L149	@cond_branch
	ldr	r1, .L153+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L153+0x8
	b	.L152
.L154:
	.align	2, 0
.L153:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gEnemyParty
.L145:
	lsl	r0, r5, #0x2
	ldr	r1, .L155
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L149	@cond_branch
	ldr	r1, .L155+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L155+0x8
.L152:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L148
.L156:
	.align	2, 0
.L155:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gPlayerParty
.L149:
	ldrh	r4, [r1, #0x2]
.L148:
	add	r0, r5, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_8077DD8
	sub	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L144:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 sub_8077FC0,.Lfe8-sub_8077FC0
	.align	2, 0
	.globl	GetAnimBankSpriteId
	.type	 GetAnimBankSpriteId,function
	.thumb_func
GetAnimBankSpriteId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0
	bne	.L158	@cond_branch
	ldr	r4, .L178
	ldrb	r0, [r4]
	bl	AnimBankSpriteExists
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L175	@cond_branch
	ldr	r1, .L178+0x4
	ldrb	r0, [r4]
	b	.L174
.L179:
	.align	2, 0
.L178:
	.word	gBattleAnimBankAttacker
	.word	gObjectBankIDs
.L158:
	cmp	r0, #0x1
	bne	.L162	@cond_branch
	ldr	r4, .L180
	ldrb	r0, [r4]
	bl	AnimBankSpriteExists
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L175	@cond_branch
	ldr	r1, .L180+0x4
	ldrb	r0, [r4]
	b	.L174
.L181:
	.align	2, 0
.L180:
	.word	gBattleAnimBankTarget
	.word	gObjectBankIDs
.L162:
	cmp	r1, #0x2
	bne	.L166	@cond_branch
	ldr	r5, .L182
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L175	@cond_branch
	b	.L170
.L183:
	.align	2, 0
.L182:
	.word	gBattleAnimBankAttacker
.L166:
	ldr	r5, .L184
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L170	@cond_branch
.L175:
	mov	r0, #0xff
	b	.L172
.L185:
	.align	2, 0
.L184:
	.word	gBattleAnimBankTarget
.L170:
	ldr	r1, .L186
	ldrb	r0, [r5]
	eor	r0, r0, r4
.L174:
	add	r0, r0, r1
	ldrb	r0, [r0]
.L172:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L187:
	.align	2, 0
.L186:
	.word	gObjectBankIDs
.Lfe9:
	.size	 GetAnimBankSpriteId,.Lfe9-GetAnimBankSpriteId
	.align	2, 0
	.globl	StoreSpriteCallbackInData
	.type	 StoreSpriteCallbackInData,function
	.thumb_func
StoreSpriteCallbackInData:
	strh	r1, [r0, #0x3a]
	lsr	r1, r1, #0x10
	strh	r1, [r0, #0x3c]
	bx	lr
.Lfe10:
	.size	 StoreSpriteCallbackInData,.Lfe10-StoreSpriteCallbackInData
	.align	2, 0
	.globl	SetCallbackToStoredInData
	.type	 SetCallbackToStoredInData,function
	.thumb_func
SetCallbackToStoredInData:
	ldrh	r2, [r0, #0x3a]
	mov	r3, #0x3c
	ldrsh	r1, [r0, r3]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	str	r2, [r0, #0x1c]
	bx	lr
.Lfe11:
	.size	 SetCallbackToStoredInData,.Lfe11-SetCallbackToStoredInData
	.align	2, 0
	.globl	sub_8078114
	.type	 sub_8078114,function
	.thumb_func
sub_8078114:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L191	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L192	@cond_branch
	ldr	r2, .L197
	b	.L196
.L198:
	.align	2, 0
.L197:
	.word	0xffffff00
.L192:
	cmp	r0, #0
	bge	.L193	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L196:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L193:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L195
.L191:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L195:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 sub_8078114,.Lfe12-sub_8078114
	.align	2, 0
	.globl	sub_8078174
	.type	 sub_8078174,function
	.thumb_func
sub_8078174:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L200	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x36]
	ldrh	r2, [r4, #0x38]
	add	r0, r0, r2
	strh	r0, [r4, #0x38]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L201	@cond_branch
	ldr	r2, .L206
	b	.L205
.L207:
	.align	2, 0
.L206:
	.word	0xffffff00
.L201:
	cmp	r0, #0
	bge	.L202	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L205:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L202:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L204
.L200:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L204:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 sub_8078174,.Lfe13-sub_8078174
	.align	2, 0
	.globl	unref_sub_80781F0
	.type	 unref_sub_80781F0,function
	.thumb_func
unref_sub_80781F0:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L209	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L210	@cond_branch
	ldr	r2, .L219
	b	.L217
.L220:
	.align	2, 0
.L219:
	.word	0xffffff00
.L210:
	cmp	r0, #0
	bge	.L211	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L217:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L211:
	ldrh	r1, [r4, #0x36]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	ble	.L213	@cond_branch
	ldr	r2, .L221
	b	.L218
.L222:
	.align	2, 0
.L221:
	.word	0xffffff00
.L213:
	cmp	r0, #0
	bge	.L214	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L218:
	add	r0, r1, r2
	strh	r0, [r4, #0x36]
.L214:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L216
.L209:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L216:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 unref_sub_80781F0,.Lfe14-unref_sub_80781F0
	.align	2, 0
	.globl	sub_8078278
	.type	 sub_8078278,function
	.thumb_func
sub_8078278:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L224	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L225	@cond_branch
	ldr	r2, .L230
	b	.L229
.L231:
	.align	2, 0
.L230:
	.word	0xffffff00
.L225:
	cmp	r0, #0
	bge	.L226	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L229:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L226:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L228
.L224:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L228:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 sub_8078278,.Lfe15-sub_8078278
	.align	2, 0
	.globl	sub_80782D8
	.type	 sub_80782D8,function
	.thumb_func
sub_80782D8:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	ble	.L233	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x2e]
	b	.L234
.L233:
	add	r0, r1, #0
	bl	SetCallbackToStoredInData
.L234:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_80782D8,.Lfe16-sub_80782D8
	.align	2, 0
	.globl	sub_80782F8
	.type	 sub_80782F8,function
	.thumb_func
sub_80782F8:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078314
	ldr	r1, .L236
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	sub_8078364
.Lfe17:
	.size	 sub_80782F8,.Lfe17-sub_80782F8
	.align	2, 0
	.globl	sub_8078314
	.type	 sub_8078314,function
	.thumb_func
sub_8078314:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	ble	.L239	@cond_branch
	ldrh	r0, [r4, #0x2e]
	neg	r0, r0
	strh	r0, [r4, #0x2e]
.L239:
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	ldrh	r5, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	cmp	r0, #0
	bge	.L240	@cond_branch
	neg	r0, r0
.L240:
	strh	r0, [r4, #0x2e]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	strh	r5, [r4, #0x30]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_8078314,.Lfe18-sub_8078314
	.align	2, 0
	.globl	sub_8078364
	.type	 sub_8078364,function
	.thumb_func
sub_8078364:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	ble	.L242	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	strh	r0, [r1, #0x24]
	ldrh	r0, [r1, #0x32]
	ldrh	r3, [r1, #0x26]
	add	r0, r0, r3
	strh	r0, [r1, #0x26]
	b	.L243
.L242:
	add	r0, r1, #0
	bl	SetCallbackToStoredInData
.L243:
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_8078364,.Lfe19-sub_8078364
	.align	2, 0
	.globl	sub_8078394
	.type	 sub_8078394,function
	.thumb_func
sub_8078394:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L245	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x34]
	add	r0, r0, r1
	strh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x32]
	ldrh	r3, [r2, #0x36]
	add	r1, r1, r3
	strh	r1, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r2, #0x26]
	b	.L246
.L245:
	add	r0, r2, #0
	bl	SetCallbackToStoredInData
.L246:
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 sub_8078394,.Lfe20-sub_8078394
	.align	2, 0
	.globl	sub_80783D0
	.type	 sub_80783D0,function
	.thumb_func
sub_80783D0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L248	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	b	.L249
.L248:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L249:
	add	r0, r4, #0
	bl	UpdateMonIconFrame
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 sub_80783D0,.Lfe21-sub_80783D0
	.align	2, 0
	.globl	unref_sub_8078414
	.type	 unref_sub_8078414,function
	.thumb_func
unref_sub_8078414:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldr	r5, .L251
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L251+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	gBattleAnimBankTarget
	.word	sub_80782F8
.Lfe22:
	.size	 unref_sub_8078414,.Lfe22-unref_sub_8078414
	.align	2, 0
	.globl	sub_8078458
	.type	 sub_8078458,function
	.thumb_func
sub_8078458:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L254	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x2e]
	ldr	r2, .L256
	mov	r4, #0x34
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x30]
	ldrh	r4, [r0, #0x24]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
	mov	r0, #0x34
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x32]
	ldrh	r2, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	b	.L255
.L257:
	.align	2, 0
.L256:
	.word	gSprites
.L254:
	add	r0, r3, #0
	bl	SetCallbackToStoredInData
.L255:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_8078458,.Lfe23-sub_8078458
	.align	2, 0
	.globl	sub_80784A8
	.type	 sub_80784A8,function
	.thumb_func
sub_80784A8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L259	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	ldrh	r0, [r4, #0x34]
	add	r1, r1, r0
	strh	r1, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	ldr	r3, .L261
	mov	r0, #0x38
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r0, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
	b	.L260
.L262:
	.align	2, 0
.L261:
	.word	gSprites
.L259:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L260:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 sub_80784A8,.Lfe24-sub_80784A8
	.align	2, 0
	.globl	sub_8078504
	.type	 sub_8078504,function
	.thumb_func
sub_8078504:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L264	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r1, r1, r0
	strh	r1, [r4, #0x32]
	ldrh	r1, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r1, r1, r0
	strh	r1, [r4, #0x36]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L267	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L267	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L267
.L264:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L267:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 sub_8078504,.Lfe25-sub_8078504
	.align	2, 0
	.globl	move_anim_8074EE0
	.type	 move_anim_8074EE0,function
	.thumb_func
move_anim_8074EE0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	move_anim_8072740
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 move_anim_8074EE0,.Lfe26-move_anim_8074EE0
	.align	2, 0
	.globl	unref_sub_8078588
	.type	 unref_sub_8078588,function
	.thumb_func
unref_sub_8078588:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldr	r5, .L270
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L270+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gBattleAnimBankAttacker
	.word	sub_80782F8
.Lfe27:
	.size	 unref_sub_8078588,.Lfe27-unref_sub_8078588
	.align	2, 0
	.globl	unref_sub_80785CC
	.type	 unref_sub_80785CC,function
	.thumb_func
unref_sub_80785CC:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	bl	ResetPaletteStructByUid
	add	r0, r4, #0
	bl	move_anim_8074EE0
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 unref_sub_80785CC,.Lfe28-unref_sub_80785CC
	.align	2, 0
	.globl	sub_80785E4
	.type	 sub_80785E4,function
	.thumb_func
sub_80785E4:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L274	@cond_branch
	add	r0, r2, #0
	bl	SetCallbackToStoredInData
.L274:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 sub_80785E4,.Lfe29-sub_80785E4
	.align	2, 0
	.globl	sub_8078600
	.type	 sub_8078600,function
	.thumb_func
sub_8078600:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L276	@cond_branch
	add	r0, r2, #0
	bl	SetCallbackToStoredInData
.L276:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 sub_8078600,.Lfe30-sub_8078600
	.align	2, 0
	.globl	sub_807861C
	.type	 sub_807861C,function
	.thumb_func
sub_807861C:
	push	{lr}
	ldr	r1, .L278
	mov	r2, #0x0
	strh	r2, [r1]
	add	r1, r1, #0x2
	strh	r2, [r1]
	bl	move_anim_8072740
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	0x4000050
.Lfe31:
	.size	 sub_807861C,.Lfe31-sub_807861C
	.align	2, 0
	.globl	sub_8078634
	.type	 sub_8078634,function
	.thumb_func
sub_8078634:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L281
	mov	r2, #0x0
	strh	r2, [r1]
	add	r1, r1, #0x2
	strh	r2, [r1]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L282:
	.align	2, 0
.L281:
	.word	0x4000050
.Lfe32:
	.size	 sub_8078634,.Lfe32-sub_8078634
	.align	2, 0
	.globl	sub_8078650
	.type	 sub_8078650,function
	.thumb_func
sub_8078650:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L284
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	gBattleAnimBankAttacker
.Lfe33:
	.size	 sub_8078650,.Lfe33-sub_8078650
	.align	2, 0
	.globl	sub_807867C
	.type	 sub_807867C,function
	.thumb_func
sub_807867C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r8, r5
	ldr	r7, .L295
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L295+0x4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bhi	.L293	@cond_branch
	cmp	r6, r0
	bcs	.L289	@cond_branch
	lsl	r0, r5, #0x10
	b	.L294
.L296:
	.align	2, 0
.L295:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
.L289:
	ldrb	r0, [r7]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L291	@cond_branch
.L293:
	ldrh	r1, [r4, #0x20]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0x20]
	b	.L288
.L291:
	mov	r1, r8
	lsl	r0, r1, #0x10
.L294:
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
.L288:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 sub_807867C,.Lfe34-sub_807867C
	.align	2, 0
	.globl	sub_80786EC
	.type	 sub_80786EC,function
	.thumb_func
sub_80786EC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	mov	r5, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	obj_translate_based_on_private_1_2_3_4
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	__divsi3
	strh	r0, [r4, #0x3a]
	strh	r5, [r4, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 sub_80786EC,.Lfe35-sub_80786EC
	.align	2, 0
	.globl	sub_8078718
	.type	 sub_8078718,function
	.thumb_func
sub_8078718:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L299	@cond_branch
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r0, #0x0
	b	.L300
.L299:
	mov	r0, #0x1
.L300:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 sub_8078718,.Lfe36-sub_8078718
	.align	2, 0
	.globl	oamt_add_pos2_onto_pos1
	.type	 oamt_add_pos2_onto_pos1,function
	.thumb_func
oamt_add_pos2_onto_pos1:
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r1, [r0, #0x20]
	ldrh	r1, [r0, #0x26]
	ldrh	r3, [r0, #0x22]
	add	r1, r1, r3
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x24]
	strh	r2, [r0, #0x26]
	bx	lr
.Lfe37:
	.size	 oamt_add_pos2_onto_pos1,.Lfe37-oamt_add_pos2_onto_pos1
	.align	2, 0
	.globl	sub_8078764
	.type	 sub_8078764,function
	.thumb_func
sub_8078764:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L303	@cond_branch
	ldr	r4, .L304
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077EE4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	sub_8077EE4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L303:
	ldr	r4, .L304+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	sub_807867C
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimArgs
.Lfe38:
	.size	 sub_8078764,.Lfe38-sub_8078764
	.align	2, 0
	.globl	sub_80787B0
	.type	 sub_80787B0,function
	.thumb_func
sub_80787B0:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L307	@cond_branch
	ldr	r4, .L310
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8077EE4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	b	.L309
.L311:
	.align	2, 0
.L310:
	.word	gBattleAnimBankAttacker
.L307:
	ldr	r4, .L312
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077EE4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
.L309:
	bl	sub_8077EE4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L312+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	sub_807867C
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.Lfe39:
	.size	 sub_80787B0,.Lfe39-sub_80787B0
	.align	2, 0
	.globl	GetBankSide
	.type	 GetBankSide,function
	.thumb_func
GetBankSide:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L315
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	bx	lr
.L316:
	.align	2, 0
.L315:
	.word	gBanksBySide
.Lfe40:
	.size	 GetBankSide,.Lfe40-GetBankSide
	.align	2, 0
	.globl	GetBankIdentity
	.type	 GetBankIdentity,function
	.thumb_func
GetBankIdentity:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L318
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L319:
	.align	2, 0
.L318:
	.word	gBanksBySide
.Lfe41:
	.size	 GetBankIdentity,.Lfe41-GetBankIdentity
	.align	2, 0
	.globl	GetBankByPlayerAI
	.type	 GetBankByPlayerAI,function
	.thumb_func
GetBankByPlayerAI:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L327
	ldrb	r2, [r0]
	cmp	r1, r2
	bcs	.L322	@cond_branch
	ldr	r4, .L327+0x4
	ldrb	r0, [r4]
	cmp	r0, r3
	beq	.L322	@cond_branch
.L323:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L322	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L323	@cond_branch
.L322:
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L328:
	.align	2, 0
.L327:
	.word	gNoOfAllBanks
	.word	gBanksBySide
.Lfe42:
	.size	 GetBankByPlayerAI,.Lfe42-GetBankByPlayerAI
	.align	2, 0
	.globl	AnimBankSpriteExists
	.type	 AnimBankSpriteExists,function
	.thumb_func
AnimBankSpriteExists:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L330	@cond_branch
	ldr	r0, .L342
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L340	@cond_branch
	ldr	r0, .L342+0x4
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L340	@cond_branch
	b	.L337
.L343:
	.align	2, 0
.L342:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
.L330:
	ldr	r0, .L344
	add	r0, r4, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L337	@cond_branch
	add	r0, r4, #0
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L335	@cond_branch
	ldr	r1, .L344+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L344+0x8
	b	.L341
.L345:
	.align	2, 0
.L344:
	.word	gBanksBySide
	.word	gBattlePartyID
	.word	gEnemyParty
.L335:
	ldr	r1, .L346
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L346+0x4
.L341:
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L337	@cond_branch
.L340:
	mov	r0, #0x1
	b	.L339
.L347:
	.align	2, 0
.L346:
	.word	gBattlePartyID
	.word	gPlayerParty
.L337:
	mov	r0, #0x0
.L339:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 AnimBankSpriteExists,.Lfe43-AnimBankSpriteExists
	.align	2, 0
	.globl	IsDoubleBattle
	.type	 IsDoubleBattle,function
	.thumb_func
IsDoubleBattle:
	ldr	r0, .L349
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	bx	lr
.L350:
	.align	2, 0
.L349:
	.word	gBattleTypeFlags
.Lfe44:
	.size	 IsDoubleBattle,.Lfe44-IsDoubleBattle
	.align	2, 0
	.globl	sub_8078914
	.type	 sub_8078914,function
	.thumb_func
sub_8078914:
	push	{r4, lr}
	add	r4, r0, #0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L352	@cond_branch
	ldr	r0, .L355
	str	r0, [r4]
	ldr	r0, .L355+0x4
	str	r0, [r4, #0x4]
	mov	r0, #0xe
	b	.L354
.L356:
	.align	2, 0
.L355:
	.word	0x6008000
	.word	0x600f000
.L352:
	ldr	r0, .L357
	str	r0, [r4]
	ldr	r0, .L357+0x4
	str	r0, [r4, #0x4]
	mov	r0, #0x8
.L354:
	strb	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L358:
	.align	2, 0
.L357:
	.word	0x6004000
	.word	0x600e000
.Lfe45:
	.size	 sub_8078914,.Lfe45-sub_8078914
	.align	2, 0
	.globl	sub_8078954
	.type	 sub_8078954,function
	.thumb_func
sub_8078954:
	push	{r4, lr}
	add	r4, r0, #0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L360	@cond_branch
	ldr	r0, .L365
	str	r0, [r4]
	ldr	r0, .L365+0x4
	str	r0, [r4, #0x4]
	mov	r0, #0xe
	b	.L364
.L366:
	.align	2, 0
.L365:
	.word	0x6008000
	.word	0x600f000
.L360:
	ldr	r0, .L367
	ldrb	r0, [r0]
	bl	GetBankIdentity_permutated
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L362	@cond_branch
	ldr	r0, .L367+0x4
	str	r0, [r4]
	ldr	r0, .L367+0x8
	str	r0, [r4, #0x4]
	mov	r0, #0x8
	b	.L364
.L368:
	.align	2, 0
.L367:
	.word	gBattleAnimBankAttacker
	.word	0x6004000
	.word	0x600e000
.L362:
	ldr	r0, .L369
	str	r0, [r4]
	ldr	r0, .L369+0x4
	str	r0, [r4, #0x4]
	mov	r0, #0x9
.L364:
	strb	r0, [r4, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	0x6006000
	.word	0x600f000
.Lfe46:
	.size	 sub_8078954,.Lfe46-sub_8078954
	.align	2, 0
	.globl	sub_80789BC
	.type	 sub_80789BC,function
	.thumb_func
sub_80789BC:
	push	{lr}
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L372	@cond_branch
	mov	r0, #0x2
	b	.L373
.L372:
	mov	r0, #0x1
.L373:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 sub_80789BC,.Lfe47-sub_80789BC
	.align	2, 0
	.globl	sub_80789D4
	.type	 sub_80789D4,function
	.thumb_func
sub_80789D4:
	push	{lr}
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L375	@cond_branch
	ldr	r2, .L380
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x20
	orr	r0, r0, r1
	b	.L379
.L381:
	.align	2, 0
.L380:
	.word	0x400000e
.L375:
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L377	@cond_branch
	ldr	r2, .L382
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x20
	orr	r0, r0, r1
	b	.L379
.L383:
	.align	2, 0
.L382:
	.word	0x400000e
.L377:
	ldr	r2, .L384
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r1
.L379:
	strb	r0, [r2, #0x1]
	pop	{r0}
	bx	r0
.L385:
	.align	2, 0
.L384:
	.word	0x400000e
.Lfe48:
	.size	 sub_80789D4,.Lfe48-sub_80789D4
	.align	2, 0
	.globl	sub_8078A34
	.type	 sub_8078A34,function
	.thumb_func
sub_8078A34:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	sub_8078A5C
	ldr	r1, .L387
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L388:
	.align	2, 0
.L387:
	.word	sub_80783D0
.Lfe49:
	.size	 sub_8078A34,.Lfe49-sub_8078A34
	.align	2, 0
	.globl	sub_8078A5C
	.type	 sub_8078A5C,function
	.thumb_func
sub_8078A5C:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x30]
	sub	r0, r0, r1
	ldrh	r4, [r5, #0x36]
	ldrh	r1, [r5, #0x34]
	sub	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	mov	r6, #0x0
	strh	r0, [r5, #0x30]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	__divsi3
	strh	r0, [r5, #0x32]
	strh	r6, [r5, #0x36]
	strh	r6, [r5, #0x34]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 sub_8078A5C,.Lfe50-sub_8078A5C
	.align	2, 0
	.globl	obj_translate_based_on_private_1_2_3_4
	.type	 obj_translate_based_on_private_1_2_3_4,function
	.thumb_func
obj_translate_based_on_private_1_2_3_4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r7, r0]
	mov	r2, #0x30
	ldrsh	r0, [r7, r2]
	sub	r1, r1, r0
	mov	r3, #0x36
	ldrsh	r2, [r7, r3]
	mov	r3, #0x34
	ldrsh	r0, [r7, r3]
	sub	r2, r2, r0
	lsr	r0, r1, #0x1f
	mov	r8, r0
	lsr	r3, r2, #0x1f
	mov	r9, r3
	cmp	r1, #0
	bge	.L391	@cond_branch
	neg	r1, r1
.L391:
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x10
	add	r0, r2, #0
	cmp	r0, #0
	bge	.L392	@cond_branch
	neg	r0, r0
.L392:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x10
	mov	r0, #0x2e
	ldrsh	r4, [r7, r0]
	add	r0, r6, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, r8
	cmp	r2, #0
	beq	.L393	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
	b	.L394
.L393:
	ldr	r0, .L397
	and	r6, r6, r0
.L394:
	mov	r3, r9
	cmp	r3, #0
	beq	.L395	@cond_branch
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L396
.L398:
	.align	2, 0
.L397:
	.word	0xfffe
.L395:
	ldr	r0, .L399
	and	r5, r5, r0
.L396:
	mov	r0, #0x0
	strh	r6, [r7, #0x30]
	strh	r5, [r7, #0x32]
	strh	r0, [r7, #0x36]
	strh	r0, [r7, #0x34]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	0xfffe
.Lfe51:
	.size	 obj_translate_based_on_private_1_2_3_4,.Lfe51-obj_translate_based_on_private_1_2_3_4
	.align	2, 0
	.globl	sub_8078B34
	.type	 sub_8078B34,function
	.thumb_func
sub_8078B34:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	obj_translate_based_on_private_1_2_3_4
	ldr	r1, .L402
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L403:
	.align	2, 0
.L402:
	.word	sub_8078BB8
.Lfe52:
	.size	 sub_8078B34,.Lfe52-sub_8078B34
	.align	2, 0
	.globl	sub_8078B5C
	.type	 sub_8078B5C,function
	.thumb_func
sub_8078B5C:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L405	@cond_branch
	mov	r0, #0x1
	b	.L410
.L405:
	ldrh	r1, [r2, #0x30]
	ldrh	r4, [r2, #0x32]
	ldrh	r6, [r2, #0x34]
	ldrh	r5, [r2, #0x36]
	add	r0, r6, r1
	lsl	r3, r0, #0x10
	lsr	r6, r3, #0x10
	add	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L406	@cond_branch
	lsr	r0, r3, #0x18
	neg	r0, r0
	b	.L411
.L406:
	lsr	r0, r3, #0x18
.L411:
	strh	r0, [r2, #0x24]
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L408	@cond_branch
	lsr	r0, r5, #0x8
	neg	r0, r0
	b	.L412
.L408:
	lsr	r0, r5, #0x8
.L412:
	strh	r0, [r2, #0x26]
	strh	r6, [r2, #0x34]
	strh	r5, [r2, #0x36]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
.L410:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 sub_8078B5C,.Lfe53-sub_8078B5C
	.align	2, 0
	.globl	sub_8078BB8
	.type	 sub_8078BB8,function
	.thumb_func
sub_8078BB8:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078B5C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L414	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L414:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 sub_8078BB8,.Lfe54-sub_8078BB8
	.align	2, 0
	.globl	sub_8078BD4
	.type	 sub_8078BD4,function
	.thumb_func
sub_8078BD4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L416	@cond_branch
	neg	r0, r0
.L416:
	lsl	r0, r0, #0x8
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	obj_translate_based_on_private_1_2_3_4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_8078BD4,.Lfe55-sub_8078BD4
	.align	2, 0
	.globl	sub_8078C00
	.type	 sub_8078C00,function
	.thumb_func
sub_8078C00:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	sub_8078BD4
	ldr	r1, .L418
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L419:
	.align	2, 0
.L418:
	.word	sub_8078BB8
.Lfe56:
	.size	 sub_8078C00,.Lfe56-sub_8078C00
	.align	2, 0
	.globl	sub_8078C28
	.type	 sub_8078C28,function
	.thumb_func
sub_8078C28:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r7, r0]
	mov	r2, #0x30
	ldrsh	r0, [r7, r2]
	sub	r1, r1, r0
	mov	r3, #0x36
	ldrsh	r2, [r7, r3]
	mov	r3, #0x34
	ldrsh	r0, [r7, r3]
	sub	r2, r2, r0
	lsr	r0, r1, #0x1f
	mov	r8, r0
	lsr	r3, r2, #0x1f
	mov	r9, r3
	cmp	r1, #0
	bge	.L421	@cond_branch
	neg	r1, r1
.L421:
	lsl	r0, r1, #0x14
	lsr	r6, r0, #0x10
	add	r0, r2, #0
	cmp	r0, #0
	bge	.L422	@cond_branch
	neg	r0, r0
.L422:
	lsl	r0, r0, #0x14
	lsr	r5, r0, #0x10
	mov	r0, #0x2e
	ldrsh	r4, [r7, r0]
	add	r0, r6, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, r8
	cmp	r2, #0
	beq	.L423	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
	b	.L424
.L423:
	ldr	r0, .L427
	and	r6, r6, r0
.L424:
	mov	r3, r9
	cmp	r3, #0
	beq	.L425	@cond_branch
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L426
.L428:
	.align	2, 0
.L427:
	.word	0xfffe
.L425:
	ldr	r0, .L429
	and	r5, r5, r0
.L426:
	mov	r0, #0x0
	strh	r6, [r7, #0x30]
	strh	r5, [r7, #0x32]
	strh	r0, [r7, #0x36]
	strh	r0, [r7, #0x34]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L430:
	.align	2, 0
.L429:
	.word	0xfffe
.Lfe57:
	.size	 sub_8078C28,.Lfe57-sub_8078C28
	.align	2, 0
	.globl	sub_8078CC0
	.type	 sub_8078CC0,function
	.thumb_func
sub_8078CC0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	sub_8078C28
	ldr	r1, .L432
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L433:
	.align	2, 0
.L432:
	.word	sub_8078D44
.Lfe58:
	.size	 sub_8078CC0,.Lfe58-sub_8078CC0
	.align	2, 0
	.globl	sub_8078CE8
	.type	 sub_8078CE8,function
	.thumb_func
sub_8078CE8:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L435	@cond_branch
	mov	r0, #0x1
	b	.L440
.L435:
	ldrh	r1, [r2, #0x30]
	ldrh	r4, [r2, #0x32]
	ldrh	r6, [r2, #0x34]
	ldrh	r5, [r2, #0x36]
	add	r0, r6, r1
	lsl	r3, r0, #0x10
	lsr	r6, r3, #0x10
	add	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L436	@cond_branch
	lsr	r0, r3, #0x14
	neg	r0, r0
	b	.L441
.L436:
	lsr	r0, r3, #0x14
.L441:
	strh	r0, [r2, #0x24]
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L438	@cond_branch
	lsr	r0, r5, #0x4
	neg	r0, r0
	b	.L442
.L438:
	lsr	r0, r5, #0x4
.L442:
	strh	r0, [r2, #0x26]
	strh	r6, [r2, #0x34]
	strh	r5, [r2, #0x36]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
.L440:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 sub_8078CE8,.Lfe59-sub_8078CE8
	.align	2, 0
	.globl	sub_8078D44
	.type	 sub_8078D44,function
	.thumb_func
sub_8078D44:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078CE8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L444	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData
.L444:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 sub_8078D44,.Lfe60-sub_8078D44
	.align	2, 0
	.globl	sub_8078D60
	.type	 sub_8078D60,function
	.thumb_func
sub_8078D60:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L446	@cond_branch
	neg	r0, r0
.L446:
	lsl	r0, r0, #0x4
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	sub_8078C28
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 sub_8078D60,.Lfe61-sub_8078D60
	.align	2, 0
	.globl	sub_8078D8C
	.type	 sub_8078D8C,function
	.thumb_func
sub_8078D8C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	sub_8078D60
	ldr	r1, .L448
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	sub_8078D44
.Lfe62:
	.size	 sub_8078D8C,.Lfe62-sub_8078D8C
	.align	2, 0
	.globl	obj_id_set_rotscale
	.type	 obj_id_set_rotscale,function
	.thumb_func
obj_id_set_rotscale:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r5, .L452
	lsl	r2, r2, #0x10
	lsr	r1, r1, #0x10
	orr	r1, r1, r2
	str	r1, [sp]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r5
	orr	r0, r0, r3
	str	r0, [sp, #0x4]
	bl	sub_8078E38
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L451	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp]
	and	r1, r1, r5
	orr	r1, r1, r0
	str	r1, [sp]
.L451:
	ldr	r1, .L452+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x3]
	lsl	r4, r4, #0x1a
	lsr	r4, r4, #0x1b
	add	r5, sp, #0x8
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	ldr	r0, .L452+0x8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r5]
	strh	r0, [r4]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x4]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x6]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	0xffff0000
	.word	gSprites
	.word	gOamMatrices
.Lfe63:
	.size	 obj_id_set_rotscale,.Lfe63-obj_id_set_rotscale
	.align	2, 0
	.globl	sub_8078E38
	.type	 sub_8078E38,function
	.thumb_func
sub_8078E38:
	push	{r4, lr}
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L455	@cond_branch
	ldr	r4, .L458
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, #0x32
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xc9
	beq	.L455	@cond_branch
	mov	r0, #0x1
	b	.L457
.L459:
	.align	2, 0
.L458:
	.word	gSprites
.L455:
	mov	r0, #0x0
.L457:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 sub_8078E38,.Lfe64-sub_8078E38
	.align	2, 0
	.globl	sub_8078E70
	.type	 sub_8078E70,function
	.thumb_func
sub_8078E70:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	ldr	r1, .L464
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L462	@cond_branch
	add	r0, r7, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L461	@cond_branch
.L462:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L461:
	ldr	r1, .L464
	lsl	r4, r6, #0x4
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	mov	r0, #0x3
	mov	r1, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L463	@cond_branch
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L463	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	ldr	r1, .L464+0x4
	add	r0, r0, r1
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L463:
	ldr	r1, .L464
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x1]
	mov	r1, #0x3
	orr	r3, r3, r1
	strb	r3, [r0, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r0, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	bl	CalcCenterToCornerVec
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L465:
	.align	2, 0
.L464:
	.word	gSprites
	.word	gSharedMem+0x17810
.Lfe65:
	.size	 sub_8078E70,.Lfe65-sub_8078E70
	.align	2, 0
	.globl	sub_8078F40
	.type	 sub_8078F40,function
	.thumb_func
sub_8078F40:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	obj_id_set_rotscale
	ldr	r1, .L467
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x1]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x1
	orr	r1, r1, r2
	mov	r2, #0xd
	neg	r2, r2
	and	r1, r1, r2
	strb	r1, [r0, #0x1]
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r2, [r3]
	mov	r1, #0x7f
	and	r1, r1, r2
	strb	r1, [r3]
	ldrb	r3, [r0, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r0, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	bl	CalcCenterToCornerVec
	pop	{r4}
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	gSprites
.Lfe66:
	.size	 sub_8078F40,.Lfe66-sub_8078F40
	.align	2, 0
	.globl	sub_8078F9C
	.type	 sub_8078F9C,function
	.thumb_func
sub_8078F9C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L471
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	ldr	r1, .L471+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x4]
	mov	r3, #0x4
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	bge	.L470	@cond_branch
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L470:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r2, #0x26]
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	gSprites
	.word	gOamMatrices
.Lfe67:
	.size	 sub_8078F9C,.Lfe67-sub_8078F9C
	.align	2, 0
	.globl	sub_8078FDC
	.type	 sub_8078FDC,function
	.thumb_func
sub_8078FDC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff0
	add	r4, r0, #0
	ldr	r0, [sp, #0x28]
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r7, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L474	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	cmp	r6, #0
	beq	.L475	@cond_branch
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
.L475:
	ldr	r6, .L477
	lsl	r0, r7, #0x10
	orr	r5, r5, r0
	str	r5, [sp]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r6
	mov	r1, r8
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	bl	sub_8078E38
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L476	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp]
	and	r1, r1, r6
	orr	r1, r1, r0
	str	r1, [sp]
.L476:
	ldrb	r4, [r4, #0x3]
	lsl	r4, r4, #0x1a
	lsr	r4, r4, #0x1b
	add	r5, sp, #0x8
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	ldr	r0, .L477+0x4
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r5]
	strh	r0, [r4]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x4]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x6]
.L474:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L478:
	.align	2, 0
.L477:
	.word	0xffff0000
	.word	gOamMatrices
.Lfe68:
	.size	 sub_8078FDC,.Lfe68-sub_8078FDC
	.align	2, 0
	.globl	sub_8079098
	.type	 sub_8079098,function
	.thumb_func
sub_8079098:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r3, #0
	bl	sub_8078FDC
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 sub_8079098,.Lfe69-sub_8079098
	.align	2, 0
	.type	 ArcTan2_,function
	.thumb_func
ArcTan2_:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 ArcTan2_,.Lfe70-ArcTan2_
	.align	2, 0
	.globl	sub_80790F0
	.type	 sub_80790F0,function
	.thumb_func
sub_80790F0:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2_
	lsl	r0, r0, #0x10
	neg	r0, r0
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 sub_80790F0,.Lfe71-sub_80790F0
	.align	2, 0
	.globl	sub_8079108
	.type	 sub_8079108,function
	.thumb_func
sub_8079108:
	push	{r4, r5, r6, r7, lr}
	lsl	r1, r1, #0x18
	lsl	r0, r0, #0x14
	lsr	r0, r0, #0x10
	cmp	r1, #0
	bne	.L483	@cond_branch
	ldr	r2, .L490
	ldr	r1, .L490+0x4
	lsl	r0, r0, #0x1
	add	r4, r0, r1
	add	r5, r0, r2
	mov	r6, #0xf
.L487:
	ldr	r0, [r5]
	lsl	r2, r0, #0x1b
	lsr	r2, r2, #0x1b
	lsl	r1, r0, #0x16
	lsr	r1, r1, #0x1b
	add	r2, r2, r1
	lsl	r0, r0, #0x11
	lsr	r0, r0, #0x1b
	add	r0, r0, r2
	mov	r1, #0x3
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1f
	and	r0, r0, r1
	ldrb	r1, [r4]
	mov	r3, #0x20
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4]
	lsl	r3, r0, #0x5
	ldrh	r1, [r4]
	ldr	r7, .L490+0x8
	add	r2, r7, #0
	and	r1, r1, r2
	orr	r1, r1, r3
	strh	r1, [r4]
	lsl	r0, r0, #0x2
	ldrb	r1, [r4, #0x1]
	mov	r3, #0x7d
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	add	r4, r4, #0x2
	add	r5, r5, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L487	@cond_branch
	b	.L489
.L491:
	.align	2, 0
.L490:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0xfffffc1f
.L483:
	lsl	r1, r0, #0x1
	ldr	r0, .L492
	add	r0, r1, r0
	ldr	r2, .L492+0x4
	add	r1, r1, r2
	ldr	r2, .L492+0x8
	bl	CpuSet
.L489:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
.Lfe72:
	.size	 sub_8079108,.Lfe72-sub_8079108
	.align	2, 0
	.globl	sub_80791A8
	.type	 sub_80791A8,function
	.thumb_func
sub_80791A8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x4]
	mov	r4, #0x0
	cmp	r0, #0
	beq	.L495	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L496	@cond_branch
	mov	r4, #0xe
	b	.L495
.L496:
	bl	sub_80789BC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x1
	lsl	r4, r4, r0
.L495:
	cmp	r7, #0
	beq	.L498	@cond_branch
	ldr	r0, .L510
	ldrb	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L498:
	mov	r0, r8
	cmp	r0, #0
	beq	.L499	@cond_branch
	ldr	r0, .L510+0x4
	ldrb	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L499:
	mov	r0, r9
	cmp	r0, #0
	beq	.L500	@cond_branch
	ldr	r6, .L510
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L500	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L500:
	mov	r0, sl
	cmp	r0, #0
	beq	.L502	@cond_branch
	ldr	r6, .L510+0x4
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L502	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L502:
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L504	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L505	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	b	.L509
.L511:
	.align	2, 0
.L510:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
.L505:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
.L509:
	orr	r4, r4, r0
.L504:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	beq	.L507	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L507	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	orr	r4, r4, r0
.L507:
	add	r0, r4, #0
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 sub_80791A8,.Lfe73-sub_80791A8
	.align	2, 0
	.globl	sub_80792C0
	.type	 sub_80792C0,function
	.thumb_func
sub_80792C0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	mov	r4, #0x0
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L513	@cond_branch
	cmp	r5, #0
	beq	.L515	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0xb
	b	.L515
.L513:
	cmp	r5, #0
	beq	.L516	@cond_branch
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L516	@cond_branch
	mov	r0, #0x0
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r4, #0x1
	lsl	r4, r4, r0
.L516:
	cmp	r6, #0
	beq	.L518	@cond_branch
	mov	r0, #0x2
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L518	@cond_branch
	mov	r0, #0x2
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L518:
	cmp	r7, #0
	beq	.L520	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L520	@cond_branch
	mov	r0, #0x1
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L520:
	mov	r0, r8
	cmp	r0, #0
	beq	.L515	@cond_branch
	mov	r0, #0x3
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L515	@cond_branch
	mov	r0, #0x3
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L515:
	add	r0, r4, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 sub_80792C0,.Lfe74-sub_80792C0
	.align	2, 0
	.globl	sub_80793A8
	.type	 sub_80793A8,function
	.thumb_func
sub_80793A8:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.Lfe75:
	.size	 sub_80793A8,.Lfe75-sub_80793A8
	.align	2, 0
	.globl	unref_sub_80793B0
	.type	 unref_sub_80793B0,function
	.thumb_func
unref_sub_80793B0:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 unref_sub_80793B0,.Lfe76-unref_sub_80793B0
	.align	2, 0
	.globl	sub_80793C4
	.type	 sub_80793C4,function
	.thumb_func
sub_80793C4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L528	@cond_branch
	ldr	r2, .L535
	mov	r3, #0x6
	ldrsh	r0, [r2, r3]
	mov	r1, #0x0
	cmp	r0, #0
	bne	.L529	@cond_branch
	mov	r1, #0x1
.L529:
	mov	r3, #0x4
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L531	@cond_branch
	add	r0, r4, #0
	bl	sub_80787B0
	b	.L532
.L536:
	.align	2, 0
.L535:
	.word	gBattleAnimArgs
.L531:
	add	r0, r4, #0
	bl	sub_8078764
.L532:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L533
.L528:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L533	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8074EE0
.L533:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 sub_80793C4,.Lfe77-sub_80793C4
	.align	2, 0
	.globl	sub_807941C
	.type	 sub_807941C,function
	.thumb_func
sub_807941C:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r6, .L543
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0x0
	cmp	r0, #0
	bne	.L538	@cond_branch
	mov	r1, #0x1
.L538:
	ldrb	r0, [r6, #0xa]
	mov	r7, #0x1
	cmp	r0, #0
	bne	.L540	@cond_branch
	mov	r7, #0x3
.L540:
	add	r0, r5, #0
	bl	sub_80787B0
	ldr	r0, .L543+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L542	@cond_branch
	ldrh	r0, [r6, #0x4]
	neg	r0, r0
	strh	r0, [r6, #0x4]
.L542:
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	ldr	r4, .L543+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	add	r1, r7, #0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L543+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L543+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L544:
	.align	2, 0
.L543:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimBankTarget
	.word	sub_8078B34
	.word	move_anim_8072740
.Lfe78:
	.size	 sub_807941C,.Lfe78-sub_807941C
	.align	2, 0
	.globl	sub_80794A8
	.type	 sub_80794A8,function
	.thumb_func
sub_80794A8:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	sub_80787B0
	ldr	r0, .L547
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L546	@cond_branch
	ldr	r1, .L547+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L546:
	ldr	r4, .L547+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r5, .L547+0x8
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	sub_80786EC
	ldr	r0, .L547+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
	.word	sub_8079518
.Lfe79:
	.size	 sub_80794A8,.Lfe79-sub_80794A8
	.align	2, 0
	.globl	sub_8079518
	.type	 sub_8079518,function
	.thumb_func
sub_8079518:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078718
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L550	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L550:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 sub_8079518,.Lfe80-sub_8079518
	.align	2, 0
	.globl	sub_8079534
	.type	 sub_8079534,function
	.thumb_func
sub_8079534:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r0, .L558
	mov	r2, #0xc
	ldrsh	r1, [r0, r2]
	cmp	r1, #0
	bne	.L552	@cond_branch
	mov	r4, #0x1
	mov	r7, #0x3
	b	.L553
.L559:
	.align	2, 0
.L558:
	.word	gBattleAnimArgs
.L552:
	mov	r4, #0x0
	mov	r7, #0x1
.L553:
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L554	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_80787B0
	ldr	r0, .L560
	b	.L557
.L561:
	.align	2, 0
.L560:
	.word	gBattleAnimBankAttacker
.L554:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_8078764
	ldr	r0, .L562
.L557:
	ldrb	r6, [r0]
	ldr	r0, .L562+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L556	@cond_branch
	ldr	r1, .L562+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L556:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_8078764
	ldr	r4, .L562+0x8
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	add	r0, r6, #0
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	add	r0, r6, #0
	add	r1, r7, #0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x6]
	add	r0, r0, r4
	strh	r0, [r5, #0x36]
	ldr	r0, .L562+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L562+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L563:
	.align	2, 0
.L562:
	.word	gBattleAnimBankTarget
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
	.word	sub_8078B34
	.word	move_anim_8072740
.Lfe81:
	.size	 sub_8079534,.Lfe81-sub_8079534
	.align	2, 0
	.globl	duplicate_obj_of_side_rel2move_in_transparent_mode
	.type	 duplicate_obj_of_side_rel2move_in_transparent_mode,function
	.thumb_func
duplicate_obj_of_side_rel2move_in_transparent_mode:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L565	@cond_branch
	mov	r6, #0x0
	ldr	r2, .L573
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r1, r0, #0x2
.L569:
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	add	r5, r4, #0
	add	r5, r5, #0x3e
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L568	@cond_branch
	add	r0, r4, #0
	add	r1, r1, r2
	mov	r2, #0x44
	bl	memcpy
	ldrb	r1, [r4, #0x1]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	ldrb	r0, [r5]
	add	r2, r2, #0x8
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r5]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	b	.L572
.L574:
	.align	2, 0
.L573:
	.word	gSprites
.L568:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x3f
	bls	.L569	@cond_branch
.L565:
	mov	r0, #0x1
	neg	r0, r0
.L572:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 duplicate_obj_of_side_rel2move_in_transparent_mode,.Lfe82-duplicate_obj_of_side_rel2move_in_transparent_mode
	.align	2, 0
	.globl	obj_delete_but_dont_free_vram
	.type	 obj_delete_but_dont_free_vram,function
	.thumb_func
obj_delete_but_dont_free_vram:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3f
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	bl	DestroySprite
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 obj_delete_but_dont_free_vram,.Lfe83-obj_delete_but_dont_free_vram
	.align	2, 0
	.globl	sub_8079670
	.type	 sub_8079670,function
	.thumb_func
sub_8079670:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r5, #0x0
	mov	r3, #0x0
	ldr	r4, .L581
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	mov	r6, #0x0
	ldrsh	r0, [r4, r6]
	cmp	r1, r0
	ble	.L577	@cond_branch
	mov	r3, #0x1
.L577:
	cmp	r1, r0
	bge	.L578	@cond_branch
	ldr	r3, .L581+0x4
.L578:
	mov	r0, #0x6
	ldrsh	r1, [r4, r0]
	mov	r6, #0x2
	ldrsh	r0, [r4, r6]
	cmp	r1, r0
	ble	.L579	@cond_branch
	mov	r5, #0x1
.L579:
	cmp	r1, r0
	bge	.L580	@cond_branch
	ldr	r5, .L581+0x4
.L580:
	ldr	r0, .L581+0x8
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r1, #0xa]
	strh	r2, [r1, #0xc]
	ldrh	r0, [r4]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r1, #0x10]
	strh	r3, [r1, #0x12]
	strh	r5, [r1, #0x14]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r1, #0x16]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r1, #0x18]
	ldr	r3, .L581+0xc
	ldrh	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	ldrh	r2, [r4]
	orr	r0, r0, r2
	strh	r0, [r3]
	ldr	r0, .L581+0x10
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L582:
	.align	2, 0
.L581:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
	.word	0x4000052
	.word	sub_80796F8
.Lfe84:
	.size	 sub_8079670,.Lfe84-sub_8079670
	.align	2, 0
	.globl	sub_80796F8
	.type	 sub_80796F8,function
	.thumb_func
sub_80796F8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L590
	add	r3, r0, r1
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r3, r2]
	cmp	r0, r1
	ble	.L584	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L585	@cond_branch
	ldrh	r2, [r3, #0xe]
	mov	r5, #0xe
	ldrsh	r1, [r3, r5]
	mov	r5, #0x16
	ldrsh	r0, [r3, r5]
	cmp	r1, r0
	beq	.L587	@cond_branch
	ldrh	r0, [r3, #0x12]
	add	r0, r2, r0
	strh	r0, [r3, #0xe]
	b	.L587
.L591:
	.align	2, 0
.L590:
	.word	gTasks
.L585:
	ldrh	r2, [r3, #0x10]
	mov	r0, #0x10
	ldrsh	r1, [r3, r0]
	mov	r5, #0x18
	ldrsh	r0, [r3, r5]
	cmp	r1, r0
	beq	.L587	@cond_branch
	ldrh	r0, [r3, #0x14]
	add	r0, r2, r0
	strh	r0, [r3, #0x10]
.L587:
	ldr	r2, .L592
	ldrh	r0, [r3, #0x10]
	lsl	r0, r0, #0x8
	ldrh	r1, [r3, #0xe]
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0xe
	ldrsh	r1, [r3, r0]
	mov	r2, #0x16
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	bne	.L584	@cond_branch
	mov	r5, #0x10
	ldrsh	r1, [r3, r5]
	mov	r2, #0x18
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	bne	.L584	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L584:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L593:
	.align	2, 0
.L592:
	.word	0x4000052
.Lfe85:
	.size	 sub_80796F8,.Lfe85-sub_80796F8
	.align	2, 0
	.globl	sub_8079790
	.type	 sub_8079790,function
	.thumb_func
sub_8079790:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L596
	ldrb	r0, [r0]
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L595	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L594
.L597:
	.align	2, 0
.L596:
	.word	gBattleAnimArgs
.L595:
	ldr	r1, .L598
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L598+0x4
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x5]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	ldr	r3, .L598+0x8
	add	r2, r3, #0
	add	r1, r1, r2
	strh	r1, [r0, #0x8]
	bl	sub_80797EC
.L594:
	pop	{r4}
	pop	{r0}
	bx	r0
.L599:
	.align	2, 0
.L598:
	.word	gTasks
	.word	gSprites
	.word	0x101
.Lfe86:
	.size	 sub_8079790,.Lfe86-sub_8079790
	.align	2, 0
	.globl	sub_80797EC
	.type	 sub_80797EC,function
	.thumb_func
sub_80797EC:
	ldr	r3, .L601
	ldrh	r1, [r3, #0x2]
	mov	r2, #0x0
	strh	r1, [r0, #0xa]
	strh	r2, [r0, #0xc]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0xe]
	strh	r2, [r0, #0x10]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0x12]
	strh	r2, [r0, #0x14]
	ldrh	r1, [r3, #0x8]
	strh	r1, [r0, #0x16]
	ldr	r1, .L601+0x4
	str	r1, [r0]
	bx	lr
.L602:
	.align	2, 0
.L601:
	.word	gBattleAnimArgs
	.word	sub_8079814
.Lfe87:
	.size	 sub_80797EC,.Lfe87-sub_80797EC
	.align	2, 0
	.globl	sub_8079814
	.type	 sub_8079814,function
	.thumb_func
sub_8079814:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L611
	add	r4, r0, r1
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L604	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L605	@cond_branch
	ldrh	r2, [r4, #0xc]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r3, [r4, #0xa]
	mov	r1, #0xf
	bl	BlendPalette
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L604	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L604
.L612:
	.align	2, 0
.L611:
	.word	gTasks
.L605:
	ldrh	r2, [r4, #0xc]
	sub	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r3, [r4, #0xa]
	mov	r1, #0xf
	bl	BlendPalette
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L604	@cond_branch
	ldrh	r0, [r4, #0x16]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L609	@cond_branch
	strh	r1, [r4, #0x10]
	strh	r1, [r4, #0x14]
	b	.L604
.L609:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L604:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 sub_8079814,.Lfe88-sub_8079814
	.align	2, 0
	.globl	sub_80798AC
	.type	 sub_80798AC,function
	.thumb_func
sub_80798AC:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L615
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L614	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L613
.L616:
	.align	2, 0
.L615:
	.word	gBattleAnimArgs
.L614:
	ldr	r1, .L617
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsl	r1, r2, #0x4
	ldr	r2, .L617+0x4
	add	r1, r1, r2
	strh	r1, [r0, #0x8]
	bl	sub_80797EC
.L613:
	pop	{r4}
	pop	{r0}
	bx	r0
.L618:
	.align	2, 0
.L617:
	.word	gTasks
	.word	0x101
.Lfe89:
	.size	 sub_80798AC,.Lfe89-sub_80798AC
	.align	2, 0
	.globl	sub_80798F4
	.type	 sub_80798F4,function
	.thumb_func
sub_80798F4:
	push	{r4, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x0
	strh	r1, [r3, #0x16]
	strh	r1, [r3, #0x18]
	strh	r1, [r3, #0x1a]
	strh	r4, [r3, #0x26]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	strh	r0, [r3, #0x1e]
	strh	r1, [r3, #0x20]
	add	r0, r3, #0
	add	r0, r0, #0x22
	add	r3, r3, #0x24
	add	r1, r3, #0
	bl	sub_8079BF4
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_8078E70
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 sub_80798F4,.Lfe90-sub_80798F4
	.align	2, 0
	.globl	sub_807992C
	.type	 sub_807992C,function
	.thumb_func
sub_807992C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L641
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	bl	sub_8079BFC
	mov	r3, #0x16
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x3
	add	r1, r0, r1
	str	r1, [r5]
	mov	r6, #0x0
	ldrsh	r2, [r1, r6]
	ldr	r0, .L641+0x4
	cmp	r2, r0
	beq	.L625	@cond_branch
	cmp	r2, r0
	bgt	.L637	@cond_branch
	sub	r0, r0, #0x1
	cmp	r2, r0
	beq	.L626	@cond_branch
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	bne	.L623	@cond_branch
	ldrh	r0, [r1]
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x1e]
	ldrb	r0, [r1, #0x4]
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	add	r0, r1, #0
	add	r0, r0, #0x8
	str	r0, [r5]
.L623:
	ldr	r1, [r5]
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x1c]
	add	r0, r0, r2
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x2]
	ldrh	r3, [r4, #0x1e]
	add	r0, r0, r3
	strh	r0, [r4, #0x1e]
	ldrh	r0, [r4, #0x20]
	ldrb	r1, [r1, #0x4]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x1c
	ldrsh	r1, [r4, r6]
	mov	r3, #0x1e
	ldrsh	r2, [r4, r3]
	ldrh	r3, [r4, #0x20]
	bl	obj_id_set_rotscale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8079A64
	ldrh	r0, [r4, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r1, [r5]
	ldrb	r1, [r1, #0x5]
	cmp	r0, r1
	blt	.L621	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x18]
	b	.L627
.L642:
	.align	2, 0
.L641:
	.word	gUnknown_0202F7D4
	.word	0x7ffe
.L625:
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x16]
	b	.L621
.L626:
	ldrh	r2, [r1, #0x2]
	mov	r6, #0x2
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	beq	.L627	@cond_branch
	ldrh	r1, [r4, #0x1a]
	mov	r3, #0x1a
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L628	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L630	@cond_branch
	b	.L627
.L628:
	strh	r2, [r4, #0x1a]
.L630:
	mov	r6, #0x16
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	beq	.L621	@cond_branch
	ldr	r3, .L643
	ldr	r5, .L643+0x4
.L632:
	ldrh	r2, [r4, #0x16]
	sub	r1, r2, #0x1
	strh	r1, [r4, #0x16]
	ldr	r0, [r3]
	sub	r0, r0, #0x8
	str	r0, [r3]
	mov	r6, #0x0
	ldrsh	r0, [r0, r6]
	cmp	r0, r5
	beq	.L640	@cond_branch
	lsl	r0, r1, #0x10
	cmp	r0, #0
	bne	.L632	@cond_branch
	b	.L621
.L644:
	.align	2, 0
.L643:
	.word	gUnknown_0202F7D4
	.word	0x7ffd
.L627:
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	b	.L621
.L637:
	ldr	r2, .L645
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8078F40
	mov	r0, #0x0
	b	.L639
.L646:
	.align	2, 0
.L645:
	.word	gSprites
.L640:
	strh	r2, [r4, #0x16]
.L621:
	mov	r0, #0x1
.L639:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 sub_807992C,.Lfe91-sub_807992C
	.align	2, 0
	.globl	sub_8079A64
	.type	 sub_8079A64,function
	.thumb_func
sub_8079A64:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	sub_8079B10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r1, #0x40
	sub	r5, r1, r0
	ldr	r1, .L649
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	lsl	r0, r5, #0x8
	ldr	r2, .L649+0x4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	cmp	r0, #0x80
	ble	.L648	@cond_branch
	mov	r0, #0x80
.L648:
	sub	r0, r5, r0
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	gSprites
	.word	gOamMatrices
.Lfe92:
	.size	 sub_8079A64,.Lfe92-sub_8079A64
	.align	2, 0
	.globl	sub_8079AB8
	.type	 sub_8079AB8,function
	.thumb_func
sub_8079AB8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8079B10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r1, #0x40
	sub	r5, r1, r0
	ldr	r1, .L653
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	lsl	r0, r5, #0x8
	ldr	r2, .L653+0x4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	cmp	r0, #0x80
	ble	.L652	@cond_branch
	mov	r0, #0x80
.L652:
	sub	r0, r5, r0
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L654:
	.align	2, 0
.L653:
	.word	gSprites
	.word	gOamMatrices
.Lfe93:
	.size	 sub_8079AB8,.Lfe93-sub_8079AB8
	.align	2, 0
	.globl	sub_8079B10
	.type	 sub_8079B10,function
	.thumb_func
sub_8079B10:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L671
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	mov	r4, #0x0
	ldr	r1, .L671+0x4
	ldr	r6, .L671+0x8
	lsr	r5, r0, #0x16
.L659:
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L658	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L661	@cond_branch
	ldr	r0, .L671+0xc
	ldrh	r1, [r0]
	b	.L665
.L672:
	.align	2, 0
.L671:
	.word	gSprites
	.word	gObjectBankIDs
	.word	gMonBackPicCoords
	.word	gSharedMem+0x19348
.L661:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L663	@cond_branch
	ldr	r0, .L673
	add	r1, r5, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L664	@cond_branch
	ldr	r1, .L673+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L673+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L665
.L674:
	.align	2, 0
.L673:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gPlayerParty
.L664:
	ldrh	r1, [r1, #0x2]
.L665:
	lsl	r0, r1, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x1]
	b	.L670
.L663:
	ldr	r0, .L675
	add	r1, r5, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L667	@cond_branch
	ldr	r1, .L675+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L675+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L668
.L676:
	.align	2, 0
.L675:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gEnemyParty
.L667:
	ldrh	r1, [r1, #0x2]
.L668:
	ldr	r0, .L677
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L670
.L678:
	.align	2, 0
.L677:
	.word	gMonFrontPicCoords
.L658:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L659	@cond_branch
	mov	r0, #0x40
.L670:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe94:
	.size	 sub_8079B10,.Lfe94-sub_8079B10
	.align	2, 0
	.globl	sub_8079BF4
	.type	 sub_8079BF4,function
	.thumb_func
sub_8079BF4:
	strh	r2, [r0]
	asr	r2, r2, #0x10
	strh	r2, [r1]
	bx	lr
.Lfe95:
	.size	 sub_8079BF4,.Lfe95-sub_8079BF4
	.align	2, 0
	.globl	sub_8079BFC
	.type	 sub_8079BFC,function
	.thumb_func
sub_8079BFC:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	bx	lr
.Lfe96:
	.size	 sub_8079BFC,.Lfe96-sub_8079BFC
	.align	2, 0
	.globl	sub_8079C08
	.type	 sub_8079C08,function
	.thumb_func
sub_8079C08:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r5, r3, #0
	ldr	r0, [sp, #0x14]
	ldr	r4, [sp, #0x18]
	ldr	r6, [sp, #0x1c]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r3, r8
	strh	r6, [r3, #0x18]
	strh	r1, [r3, #0x26]
	strh	r2, [r3, #0x1a]
	strh	r5, [r3, #0x1c]
	strh	r0, [r3, #0x22]
	strh	r4, [r3, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	sub	r0, r0, r2
	add	r1, r6, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1, #0x1e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	sub	r4, r4, r5
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	mov	r3, r8
	strh	r0, [r3, #0x20]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 sub_8079C08,.Lfe97-sub_8079C08
	.align	2, 0
	.globl	sub_8079C74
	.type	 sub_8079C74,function
	.thumb_func
sub_8079C74:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L683	@cond_branch
	mov	r0, #0x0
	b	.L688
.L683:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L684	@cond_branch
	ldrh	r0, [r4, #0x1e]
	ldrh	r3, [r4, #0x1a]
	add	r0, r0, r3
	strh	r0, [r4, #0x1a]
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	b	.L689
.L684:
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x1a]
	ldrh	r0, [r4, #0x24]
.L689:
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1a
	ldrsh	r1, [r4, r2]
	mov	r3, #0x1c
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	obj_id_set_rotscale
	mov	r0, #0x18
	ldrsh	r3, [r4, r0]
	cmp	r3, #0
	beq	.L686	@cond_branch
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8079A64
	b	.L687
.L686:
	ldr	r2, .L690
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
.L687:
	ldrb	r0, [r4, #0x18]
.L688:
	pop	{r4}
	pop	{r1}
	bx	r1
.L691:
	.align	2, 0
.L690:
	.word	gSprites
.Lfe98:
	.size	 sub_8079C74,.Lfe98-sub_8079C74
	.align	2, 0
	.globl	sub_8079CEC
	.type	 sub_8079CEC,function
	.thumb_func
sub_8079CEC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L699
	ldrb	r0, [r0]
	mov	r1, #0x0
	cmp	r0, #0x1e
	bls	.L694	@cond_branch
	mov	r1, #0x1
	cmp	r0, #0x64
	bls	.L694	@cond_branch
	mov	r1, #0x3
	cmp	r0, #0xc8
	bhi	.L694	@cond_branch
	mov	r1, #0x2
.L694:
	ldr	r0, .L699+0x4
	strh	r1, [r0, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	gHappinessMoveAnim
	.word	gBattleAnimArgs
.Lfe99:
	.size	 sub_8079CEC,.Lfe99-sub_8079CEC
	.align	2, 0
	.globl	unref_sub_8079D20
	.type	 unref_sub_8079D20,function
	.thumb_func
unref_sub_8079D20:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r7, r4, #0
	ldr	r6, .L706
	ldrb	r0, [r6]
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L702	@cond_branch
	ldr	r2, .L706+0x4
	ldr	r1, .L706+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L702:
	ldr	r0, .L706+0xc
	mov	r8, r0
	ldrb	r0, [r0]
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L703	@cond_branch
	ldr	r2, .L706+0x4
	ldr	r1, .L706+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L703:
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L704	@cond_branch
	ldr	r2, .L706+0x4
	ldr	r1, .L706+0x8
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L704:
	mov	r1, r8
	ldrb	r0, [r1]
	eor	r0, r0, r5
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L705	@cond_branch
	ldr	r2, .L706+0x4
	ldr	r1, .L706+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	and	r7, r7, r0
	lsl	r3, r7, #0x2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
.L705:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L707:
	.align	2, 0
.L706:
	.word	gBattleAnimBankTarget
	.word	gSprites
	.word	gObjectBankIDs
	.word	gBattleAnimBankAttacker
.Lfe100:
	.size	 unref_sub_8079D20,.Lfe100-unref_sub_8079D20
	.align	2, 0
	.globl	sub_8079E24
	.type	 sub_8079E24,function
	.thumb_func
sub_8079E24:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r0, .L715
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L710	@cond_branch
	ldr	r6, .L715+0x4
.L712:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsAnimBankSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L711	@cond_branch
	add	r0, r4, #0
	bl	sub_8079E90
	ldr	r3, .L715+0x8
	add	r3, r5, r3
	ldrb	r2, [r3]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r2, [r0, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r2, r2, r1
	mov	r1, #0x8
	orr	r2, r2, r1
	strb	r2, [r0, #0x5]
.L711:
	add	r5, r5, #0x1
	ldr	r0, .L715
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L712	@cond_branch
.L710:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L716:
	.align	2, 0
.L715:
	.word	gNoOfAllBanks
	.word	gSprites
	.word	gObjectBankIDs
.Lfe101:
	.size	 sub_8079E24,.Lfe101-sub_8079E24
	.align	2, 0
	.globl	sub_8079E90
	.type	 sub_8079E90,function
	.thumb_func
sub_8079E90:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L718	@cond_branch
	cmp	r4, #0x2
	bne	.L719	@cond_branch
	mov	r0, #0x1e
	b	.L728
.L719:
	mov	r0, #0x28
	b	.L728
.L718:
	add	r0, r4, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1e
	cmp	r0, #0
	beq	.L721	@cond_branch
	mov	r1, #0x14
	cmp	r0, #0x2
	beq	.L721	@cond_branch
	mov	r1, #0x32
	cmp	r0, #0x1
	bne	.L721	@cond_branch
	mov	r1, #0x28
.L721:
	add	r0, r1, #0
.L728:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe102:
	.size	 sub_8079E90,.Lfe102-sub_8079E90
	.align	2, 0
	.globl	sub_8079ED4
	.type	 sub_8079ED4,function
	.thumb_func
sub_8079ED4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L730	@cond_branch
	mov	r0, #0x2
	b	.L734
.L730:
	cmp	r4, #0
	beq	.L732	@cond_branch
	cmp	r4, #0x3
	bne	.L731	@cond_branch
.L732:
	ldr	r0, .L737
	b	.L736
.L738:
	.align	2, 0
.L737:
	.word	0x400000c
.L731:
	ldr	r0, .L739
.L736:
	ldr	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
.L734:
	pop	{r4}
	pop	{r1}
	bx	r1
.L740:
	.align	2, 0
.L739:
	.word	0x400000a
.Lfe103:
	.size	 sub_8079ED4,.Lfe103-sub_8079ED4
	.align	2, 0
	.globl	GetBankIdentity_permutated
	.type	 GetBankIdentity_permutated,function
	.thumb_func
GetBankIdentity_permutated:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L742	@cond_branch
	add	r0, r4, #0
	bl	GetBankIdentity
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L744	@cond_branch
	cmp	r0, #0x3
	bne	.L743	@cond_branch
.L744:
	mov	r0, #0x2
	b	.L746
.L743:
.L742:
	mov	r0, #0x1
.L746:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe104:
	.size	 GetBankIdentity_permutated,.Lfe104-GetBankIdentity_permutated
	.align	2, 0
	.globl	sub_8079F44
	.type	 sub_8079F44,function
	.thumb_func
sub_8079F44:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffe8
	ldr	r4, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r9, r3
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	str	r4, [sp, #0x10]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x14]
	lsl	r0, r7, #0x3
	ldr	r1, .L755
	add	r0, r0, r1
	bl	LoadSpriteSheet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	ldr	r1, .L755+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, r8
	cmp	r0, #0
	bne	.L748	@cond_branch
	add	r0, r6, #0
	ldr	r1, [sp, #0x44]
	ldr	r2, [sp, #0x40]
	bl	GetMonSpritePalFromOtIdPersonality
	lsl	r1, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	lsl	r0, r6, #0x3
	ldr	r1, .L755+0x8
	add	r0, r0, r1
	ldr	r2, .L755+0xc
	lsl	r5, r6, #0x2
	add	r2, r5, r2
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	str	r3, [sp]
	str	r6, [sp, #0x4]
	ldr	r4, [sp, #0x40]
	str	r4, [sp, #0x8]
	mov	r4, #0x1
	str	r4, [sp, #0xc]
	bl	LoadSpecialPokePic
	b	.L749
.L756:
	.align	2, 0
.L755:
	.word	gUnknown_0837F5E0
	.word	gSpriteTemplate_837F5B0
	.word	gMonFrontPicTable
	.word	gMonFrontPicCoords
.L748:
	add	r0, r6, #0
	ldr	r1, [sp, #0x44]
	ldr	r2, [sp, #0x40]
	bl	GetMonSpritePalFromOtIdPersonality
	lsl	r1, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	lsl	r0, r6, #0x3
	ldr	r1, .L757
	add	r0, r0, r1
	ldr	r2, .L757+0x4
	lsl	r5, r6, #0x2
	add	r2, r5, r2
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	mov	r3, #0x80
	lsl	r3, r3, #0x12
	str	r3, [sp]
	str	r6, [sp, #0x4]
	ldr	r4, [sp, #0x40]
	str	r4, [sp, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0xc]
	bl	LoadSpecialPokePic
.L749:
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	mov	r6, sl
	lsl	r0, r6, #0x5
	ldr	r1, .L757+0x8
	add	r0, r0, r1
	ldr	r1, .L757+0xc
	str	r2, [r1]
	str	r0, [r1, #0x4]
	ldr	r0, .L757+0x10
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r2, r8
	cmp	r2, #0
	bne	.L751	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L757+0x14
	add	r0, r0, r1
	mov	r3, r9
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x10
	ldr	r2, .L757+0x18
	add	r2, r5, r2
	ldrb	r2, [r2, #0x1]
	ldr	r4, [sp, #0x10]
	add	r2, r2, r4
	b	.L754
.L758:
	.align	2, 0
.L757:
	.word	gMonBackPicTable
	.word	gMonBackPicCoords
	.word	0x6010000
	.word	0x40000d4
	.word	0x84000200
	.word	gSpriteTemplate_837F5B0
	.word	gMonFrontPicCoords
.L751:
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L759
	add	r0, r0, r1
	mov	r6, r9
	lsl	r1, r6, #0x10
	asr	r1, r1, #0x10
	ldr	r2, .L759+0x4
	add	r2, r5, r2
	ldrb	r2, [r2, #0x1]
	ldr	r3, [sp, #0x10]
	add	r2, r2, r3
.L754:
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r3, [sp, #0x14]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L753	@cond_branch
	ldr	r3, .L759+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x10
	add	r1, r0, r1
	ldr	r2, .L759+0xc
	str	r2, [r1]
	add	r0, r0, r3
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
.L753:
	add	r0, r4, #0
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L760:
	.align	2, 0
.L759:
	.word	gSpriteTemplate_837F5B0
	.word	gMonBackPicCoords
	.word	gSprites
	.word	gSpriteAffineAnimTable_81E7C18
.Lfe105:
	.size	 sub_8079F44,.Lfe105-sub_8079F44
	.align	2, 0
	.globl	sub_807A0F4
	.type	 sub_807A0F4,function
	.thumb_func
sub_807A0F4:
	push	{lr}
	bl	DestroySpriteAndFreeResources
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 sub_807A0F4,.Lfe106-sub_807A0F4
	.align	2, 0
	.globl	sub_807A100
	.type	 sub_807A100,function
	.thumb_func
sub_807A100:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L763	@cond_branch
	ldr	r2, .L812
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L764	@cond_branch
	ldrh	r7, [r2, #0x2]
	ldr	r2, [r2, #0x10]
	b	.L765
.L813:
	.align	2, 0
.L812:
	.word	gSharedMem+0x19348
.L764:
	ldrh	r7, [r2]
	ldr	r2, [r2, #0x8]
.L765:
	cmp	r7, #0xc9
	bne	.L766	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L767	@cond_branch
	mov	r0, #0xc9
	b	.L768
.L767:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L768:
	lsl	r1, r0, #0x2
	ldr	r0, .L814
	b	.L806
.L815:
	.align	2, 0
.L814:
	.word	gMonBackPicCoords
.L766:
	ldr	r0, .L816
	cmp	r7, r0
	bne	.LCB7317
	b	.L807	@long jump
.LCB7317:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	bhi	.L808	@cond_branch
	lsl	r1, r7, #0x2
	ldr	r0, .L816+0x4
	b	.L806
.L817:
	.align	2, 0
.L816:
	.word	0x181
	.word	gMonBackPicCoords
.L763:
	mov	r0, r8
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L775	@cond_branch
	mov	r0, r8
	lsl	r2, r0, #0x2
	ldr	r0, .L818
	add	r1, r2, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L776	@cond_branch
	ldr	r0, .L818+0x4
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L818+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L777
.L819:
	.align	2, 0
.L818:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gPlayerParty
.L776:
	ldrh	r7, [r1, #0x2]
	ldr	r0, .L820
	add	r0, r2, r0
	ldr	r2, [r0]
.L777:
	cmp	r7, #0xc9
	bne	.L778	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L779	@cond_branch
	mov	r0, #0xc9
	b	.L780
.L821:
	.align	2, 0
.L820:
	.word	gPID_perBank
.L779:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L780:
	lsl	r1, r0, #0x2
	ldr	r0, .L822
	b	.L806
.L823:
	.align	2, 0
.L822:
	.word	gMonBackPicCoords
.L778:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	bls	.L782	@cond_branch
.L808:
	ldr	r4, .L824
	b	.L774
.L825:
	.align	2, 0
.L824:
	.word	gMonBackPicCoords
.L782:
	lsl	r1, r7, #0x2
	ldr	r0, .L826
	b	.L806
.L827:
	.align	2, 0
.L826:
	.word	gMonBackPicCoords
.L775:
	mov	r0, r8
	lsl	r2, r0, #0x2
	ldr	r0, .L828
	add	r1, r2, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L785	@cond_branch
	ldr	r0, .L828+0x4
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L828+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L786
.L829:
	.align	2, 0
.L828:
	.word	gSharedMem+0x17800
	.word	gBattlePartyID
	.word	gEnemyParty
.L785:
	ldrh	r7, [r1, #0x2]
	ldr	r0, .L830
	add	r0, r2, r0
	ldr	r2, [r0]
.L786:
	cmp	r7, #0xc9
	bne	.L787	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L788	@cond_branch
	mov	r0, #0xc9
	b	.L789
.L831:
	.align	2, 0
.L830:
	.word	gPID_perBank
.L788:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L789:
	lsl	r1, r0, #0x2
	b	.L809
.L787:
	ldr	r0, .L832
	cmp	r7, r0
	bne	.L791	@cond_branch
.L807:
	ldr	r0, .L832+0x4
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	ldr	r1, .L832+0x8
	add	r4, r0, r1
	b	.L774
.L833:
	.align	2, 0
.L832:
	.word	0x181
	.word	gBattleMonForms
	.word	gCastformFrontSpriteCoords
.L791:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	bls	.L793	@cond_branch
	ldr	r4, .L834
	b	.L774
.L835:
	.align	2, 0
.L834:
	.word	gMonFrontPicCoords
.L793:
	lsl	r1, r7, #0x2
.L809:
	ldr	r0, .L836
.L806:
	add	r4, r1, r0
.L774:
	mov	r0, r9
	cmp	r0, #0x6
	bhi	.L803	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L836+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L837:
	.align	2, 0
.L836:
	.word	gMonFrontPicCoords
	.word	.L804
	.align	2, 0
	.align	2, 0
.L804:
	.word	.L796
	.word	.L797
	.word	.L800
	.word	.L801
	.word	.L798
	.word	.L799
	.word	.L802
.L796:
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x3
	b	.L805
.L797:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x3
	b	.L805
.L798:
	mov	r0, r8
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	lsr	r1, r1, #0x4
	b	.L810
.L799:
	mov	r0, r8
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	lsr	r1, r1, #0x4
	b	.L811
.L800:
	mov	r0, r8
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4]
	mov	r1, #0xf
	and	r1, r1, r2
.L810:
	lsl	r1, r1, #0x2
	sub	r0, r0, r1
	b	.L805
.L801:
	mov	r0, r8
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4]
	mov	r1, #0xf
	and	r1, r1, r2
.L811:
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	b	.L805
.L802:
	mov	r0, r8
	mov	r1, #0x1
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1f
	ldrb	r1, [r4, #0x1]
	sub	r0, r0, r1
	b	.L805
.L803:
	mov	r0, #0x0
.L805:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe107:
	.size	 sub_807A100,.Lfe107-sub_807A100
	.align	2, 0
	.globl	sub_807A3FC
	.type	 sub_807A3FC,function
	.thumb_func
sub_807A3FC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r2
	mov	sl, r3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L839	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x1
	b	.L840
.L839:
	mov	r5, #0x2
	mov	r6, #0x3
.L840:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r4, #0
	add	r1, r6, #0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L841	@cond_branch
	bl	NotInBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L841	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, r8
	lsl	r1, r0, #0x10
	lsl	r2, r7, #0x10
	b	.L842
.L841:
	mov	r0, r8
	lsl	r1, r0, #0x10
	lsr	r5, r1, #0x10
	lsl	r0, r7, #0x10
	lsr	r3, r0, #0x10
	add	r2, r0, #0
.L842:
	asr	r0, r1, #0x10
	add	r0, r0, r5
	asr	r0, r0, #0x1
	mov	r1, r9
	strh	r0, [r1]
	asr	r0, r2, #0x10
	add	r0, r0, r3
	asr	r0, r0, #0x1
	mov	r1, sl
	strh	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 sub_807A3FC,.Lfe108-sub_807A3FC
	.align	2, 0
	.globl	sub_807A4A0
	.type	 sub_807A4A0,function
	.thumb_func
sub_807A4A0:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #0xfffffffc
	lsl	r6, r1, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L844
	mov	sl, r0
	bl	CreateInvisibleSpriteWithCallback
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L844+0x4
	mov	r9, r0
	mov	r0, r8
	lsl	r3, r0, #0x4
	add	r3, r3, r8
	lsl	r3, r3, #0x2
	mov	r0, r9
	add	r5, r3, r0
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x44
	str	r3, [sp]
	bl	memcpy
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r5, #0x5]
	ldrb	r0, [r5, #0x1]
	and	r1, r1, r0
	mov	r0, #0x8
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L844+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r0, #0x1c
	add	r9, r9, r0
	ldr	r3, [sp]
	add	r3, r3, r9
	mov	r0, sl
	str	r0, [r3]
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L845:
	.align	2, 0
.L844:
	.word	SpriteCallbackDummy
	.word	gSprites
	.word	0xfffffc00
.Lfe109:
	.size	 sub_807A4A0,.Lfe109-sub_807A4A0
	.align	2, 0
	.globl	sub_807A544
	.type	 sub_807A544,function
	.thumb_func
sub_807A544:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078650
	ldr	r0, .L849
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L847	@cond_branch
	ldr	r2, .L849+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x6]
	neg	r0, r0
	strh	r0, [r2, #0x6]
	add	r3, r4, #0
	add	r3, r3, #0x3f
	ldrb	r0, [r3]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r1, r2, #0
	b	.L848
.L850:
	.align	2, 0
.L849:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L847:
	ldr	r1, .L851
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
.L848:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldr	r1, .L851+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L851+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L852:
	.align	2, 0
.L851:
	.word	gBattleAnimArgs
	.word	move_anim_8074EE0
	.word	sub_8078504
.Lfe110:
	.size	 sub_807A544,.Lfe110-sub_807A544
	.align	2, 0
	.globl	sub_807A5C4
	.type	 sub_807A5C4,function
	.thumb_func
sub_807A5C4:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L856
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L854	@cond_branch
	ldr	r2, .L856+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	mov	r1, #0x6
	ldrsh	r0, [r2, r1]
	neg	r0, r0
	strh	r0, [r2, #0x6]
	add	r1, r2, #0
	b	.L855
.L857:
	.align	2, 0
.L856:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L854:
	ldr	r1, .L858
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
.L855:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r1, #0xc]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r1, .L858+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	ldr	r0, .L858+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L859:
	.align	2, 0
.L858:
	.word	gBattleAnimArgs
	.word	move_anim_8074EE0
	.word	sub_8078504
.Lfe111:
	.size	 sub_807A5C4,.Lfe111-sub_807A5C4
	.align	2, 0
	.globl	sub_807A63C
	.type	 sub_807A63C,function
	.thumb_func
sub_807A63C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8078650
	ldr	r0, .L863
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L861	@cond_branch
	ldr	r0, .L863+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	b	.L862
.L864:
	.align	2, 0
.L863:
	.word	gBattleAnimBankAttacker
	.word	gBattleAnimArgs
.L861:
	ldr	r1, .L865
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r0, r1, #0
.L862:
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L865+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L865+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4}
	pop	{r0}
	bx	r0
.L866:
	.align	2, 0
.L865:
	.word	gBattleAnimArgs
	.word	sub_8078600
	.word	move_anim_8072740
.Lfe112:
	.size	 sub_807A63C,.Lfe112-sub_807A63C
	.align	2, 0
	.globl	sub_807A69C
	.type	 sub_807A69C,function
	.thumb_func
sub_807A69C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L874
	add	r5, r1, r0
	mov	r0, #0x0
	bl	GetAnimBankSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r5, #0x8]
	ldr	r7, .L874+0x4
	ldrb	r0, [r7]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	mov	r1, #0x8
	cmp	r0, #0
	beq	.L868	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	add	r1, r0, #0
.L868:
	strh	r1, [r5, #0xa]
	strh	r6, [r5, #0xc]
	strh	r6, [r5, #0xe]
	ldr	r4, .L874+0x8
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r5, #0x8]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldr	r0, .L874+0xc
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x10]
	strh	r6, [r5, #0x12]
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x14
	lsr	r6, r0, #0x10
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r4, r0, #0x4
	ldrb	r0, [r7]
	bl	sub_8079E90
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	cmp	r0, #0x14
	beq	.L871	@cond_branch
	cmp	r0, #0x28
	bne	.L870	@cond_branch
.L871:
	mov	r0, #0x2
	b	.L873
.L875:
	.align	2, 0
.L874:
	.word	gTasks
	.word	gBattleAnimBankAttacker
	.word	gSprites
	.word	0x2771
.L870:
	mov	r0, #0x3
.L873:
	strh	r0, [r5, #0x14]
	lsl	r0, r4, #0x1
	ldr	r1, .L876
	add	r0, r0, r1
	lsl	r1, r6, #0x1
	ldr	r2, .L876+0x4
	add	r1, r1, r2
	ldr	r2, .L876+0x8
	bl	CpuSet
	ldr	r0, .L876+0xc
	ldrb	r2, [r0, #0x2]
	ldrh	r3, [r0]
	add	r0, r6, #0
	mov	r1, #0x10
	bl	BlendPalette
	ldr	r0, .L876+0x10
	str	r0, [r5]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L877:
	.align	2, 0
.L876:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
	.word	gBattleAnimArgs
	.word	sub_807A784
.Lfe113:
	.size	 sub_807A69C,.Lfe113-sub_807A69C
	.align	2, 0
	.globl	sub_807A784
	.type	 sub_807A784,function
	.thumb_func
sub_807A784:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L890
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L882	@cond_branch
	cmp	r0, #0x1
	bgt	.L888	@cond_branch
	cmp	r0, #0
	beq	.L880	@cond_branch
	b	.L879
.L891:
	.align	2, 0
.L890:
	.word	gTasks
.L888:
	cmp	r0, #0x2
	beq	.L884	@cond_branch
	b	.L879
.L880:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_807A850
	ldr	r2, .L892
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0xa]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0xe]
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L879	@cond_branch
	strh	r1, [r4, #0xe]
	b	.L889
.L893:
	.align	2, 0
.L892:
	.word	gSprites
.L882:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_807A850
	ldr	r3, .L894
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0xa]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L879	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r2, [r1, #0x24]
.L889:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L879
.L895:
	.align	2, 0
.L894:
	.word	gSprites
.L884:
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L879	@cond_branch
	ldr	r0, .L896
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L879:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L897:
	.align	2, 0
.L896:
	.word	0x2771
.Lfe114:
	.size	 sub_807A784,.Lfe114-sub_807A784
	.align	2, 0
	.globl	sub_807A850
	.type	 sub_807A850,function
	.thumb_func
sub_807A850:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, #0x0
	bl	duplicate_obj_of_side_rel2move_in_transparent_mode
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	blt	.L899	@cond_branch
	ldr	r5, .L900
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r3, r4, r5
	mov	r0, #0x3
	ldrb	r1, [r6, #0x14]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	ldrb	r1, [r6, #0x10]
	lsl	r1, r1, #0x4
	mov	r2, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	mov	r0, #0x8
	strh	r0, [r3, #0x2e]
	mov	r0, r8
	strh	r0, [r3, #0x30]
	strh	r7, [r3, #0x32]
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x24]
	strh	r0, [r3, #0x24]
	add	r5, r5, #0x1c
	add	r4, r4, r5
	ldr	r0, .L900+0x4
	str	r0, [r4]
	ldrh	r0, [r6, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x12]
.L899:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L901:
	.align	2, 0
.L900:
	.word	gSprites
	.word	sub_807A8D4
.Lfe115:
	.size	 sub_807A850,.Lfe115-sub_807A850
	.align	2, 0
	.globl	sub_807A8D4
	.type	 sub_807A8D4,function
	.thumb_func
sub_807A8D4:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L903	@cond_branch
	ldr	r2, .L904
	mov	r0, #0x30
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x12]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x12]
	add	r0, r3, #0
	bl	obj_delete_but_dont_free_vram
.L903:
	pop	{r0}
	bx	r0
.L905:
	.align	2, 0
.L904:
	.word	gTasks
.Lfe116:
	.size	 sub_807A8D4,.Lfe116-sub_807A8D4
	.align	2, 0
	.globl	sub_807A908
	.type	 sub_807A908,function
	.thumb_func
sub_807A908:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L910
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	sub_8077ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L907	@cond_branch
	mov	r0, #0x5
	b	.L909
.L911:
	.align	2, 0
.L910:
	.word	gBattleAnimBankAttacker
.L907:
	ldr	r0, .L912
.L909:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L912+0x4
	strh	r0, [r5, #0x30]
	ldr	r0, .L912+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L913:
	.align	2, 0
.L912:
	.word	0xfff6
	.word	0xffd8
	.word	sub_807A960
.Lfe117:
	.size	 sub_807A908,.Lfe117-sub_807A908
	.align	2, 0
	.globl	sub_807A960
	.type	 sub_807A960,function
	.thumb_func
sub_807A960:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r5, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r0, r5, r2
	strh	r0, [r4, #0x34]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x26]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x14
	neg	r1, r1
	cmp	r0, r1
	bge	.L915	@cond_branch
	add	r0, r5, #0x1
	strh	r0, [r4, #0x30]
.L915:
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L916	@cond_branch
	add	r0, r4, #0
	bl	move_anim_8072740
.L916:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 sub_807A960,.Lfe118-sub_807A960
	.align	2, 0
	.globl	sub_807A9BC
	.type	 sub_807A9BC,function
	.thumb_func
sub_807A9BC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L921
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldr	r0, .L921+0x4
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L918	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1e
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x14
	b	.L920
.L922:
	.align	2, 0
.L921:
	.word	gBattleAnimArgs
	.word	gBattleAnimBankTarget
.L918:
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1e
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x50
.L920:
	strh	r0, [r4, #0x22]
	ldr	r0, .L923
	str	r0, [r4, #0x1c]
	ldr	r1, .L923+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L924:
	.align	2, 0
.L923:
	.word	sub_8078B34
	.word	move_anim_8072740
.Lfe119:
	.size	 sub_807A9BC,.Lfe119-sub_807A9BC
.text
	.align	2, 0
