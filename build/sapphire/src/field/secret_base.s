@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_083D1358
	.section .rodata
	.align	2, 0
	.type	 gUnknown_083D1358,object
gUnknown_083D1358:
	.short	0x26
	.short	0x36
	.short	0x27
	.short	0x37
	.short	0x1a0
	.short	0x1a1
	.short	0x1a8
	.short	0x1a9
	.short	0x1b0
	.short	0x1b1
	.short	0x208
	.short	0x210
	.short	0x271
	.short	0x278
	.size	 gUnknown_083D1358,28
	.globl	gUnknown_083D1374
	.type	 gUnknown_083D1374,object
gUnknown_083D1374:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x6
	.byte	0x0
	.byte	0x5
	.byte	0x9
	.byte	0xc
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x12
	.byte	0x0
	.byte	0x7
	.byte	0xd
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x7
	.byte	0x0
	.byte	0x9
	.byte	0x2
	.byte	0xd
	.byte	0x0
	.byte	0xd
	.byte	0x4
	.byte	0x13
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x8
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0xe
	.byte	0x0
	.byte	0x3
	.byte	0xf
	.byte	0x14
	.byte	0x0
	.byte	0x3
	.byte	0xe
	.byte	0x3
	.byte	0x0
	.byte	0x9
	.byte	0x3
	.byte	0x9
	.byte	0x0
	.byte	0x8
	.byte	0x7
	.byte	0xf
	.byte	0x0
	.byte	0x3
	.byte	0x6
	.byte	0x15
	.byte	0x0
	.byte	0x5
	.byte	0x9
	.byte	0x4
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0xa
	.byte	0x0
	.byte	0x5
	.byte	0x6
	.byte	0x10
	.byte	0x0
	.byte	0xf
	.byte	0x3
	.byte	0x16
	.byte	0x0
	.byte	0x4
	.byte	0xa
	.byte	0x5
	.byte	0x0
	.byte	0x3
	.byte	0x3
	.byte	0xb
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x11
	.byte	0x0
	.byte	0x7
	.byte	0x8
	.byte	0x17
	.byte	0x0
	.byte	0x9
	.byte	0x6
	.size	 gUnknown_083D1374,96
	.globl	gUnknown_083D13D4
	.align	2, 0
	.type	 gUnknown_083D13D4,object
gUnknown_083D13D4:
	.word	SecretBaseText_DelRegist
	.word	sub_80BCA84
	.word	gUnknownText_Exit
	.word	sub_80BCBF8
	.size	 gUnknown_083D13D4,16
	.globl	gUnknown_083D13E4
	.align	2, 0
	.type	 gUnknown_083D13E4,object
	.size	 gUnknown_083D13E4,8
gUnknown_083D13E4:
	.word	sub_80BCB90
	.word	sub_80BCBC0
	.globl	gUnknown_083D13EC
	.type	 gUnknown_083D13EC,object
gUnknown_083D13EC:
	.byte	0x23
	.byte	0x24
	.byte	0xf
	.byte	0x1f
	.byte	0x21
	.byte	0x2f
	.byte	0xe
	.byte	0x14
	.byte	0x20
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.size	 gUnknown_083D13EC,12
.text
	.align	2, 0
	.globl	ClearSecretBase
	.type	 ClearSecretBase,function
	.thumb_func
ClearSecretBase:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	add	r3, r0, #0
	mov	r0, #0x0
	strb	r0, [r3]
	mov	r2, #0x0
	add	r4, r3, #0x2
	mov	r5, #0xff
.L6:
	add	r0, r4, r2
	ldrb	r1, [r0]
	orr	r1, r1, r5
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x6
	bls	.L6	@cond_branch
	mov	r2, #0x0
	add	r5, r3, #0
	add	r5, r5, #0x12
	add	r6, r3, #0
	add	r6, r6, #0x22
	add	r7, r3, #0
	add	r7, r7, #0x4c
	add	r0, r3, #0
	add	r0, r0, #0x34
	str	r0, [sp]
	add	r1, r3, #0
	add	r1, r1, #0x9a
	str	r1, [sp, #0x4]
	mov	r0, #0x7c
	add	r0, r0, r3
	mov	sl, r0
	mov	r1, #0x88
	add	r1, r1, r3
	mov	r9, r1
	mov	r0, #0x94
	add	r0, r0, r3
	mov	r8, r0
	add	r1, r3, #0
	add	r1, r1, #0x9
	mov	r4, #0x0
.L11:
	add	r0, r1, r2
	strb	r4, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x3
	bls	.L11	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	strh	r1, [r3, #0xe]
	strb	r0, [r3, #0x10]
	strb	r0, [r3, #0x11]
	mov	r0, #0x0
	strb	r0, [r3, #0x1]
	mov	r2, #0x0
	add	r4, r5, #0
	add	r3, r6, #0
.L16:
	add	r0, r4, r2
	strb	r1, [r0]
	add	r0, r3, r2
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0xf
	bls	.L16	@cond_branch
	mov	r2, #0x0
	mov	ip, r7
	mov	r5, #0x0
.L21:
	mov	r1, #0x0
	add	r7, r2, #0x1
	lsl	r4, r2, #0x2
	lsl	r6, r2, #0x1
	add	r3, r4, #0
.L25:
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, ip
	strh	r5, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x3
	bls	.L25	@cond_branch
	ldr	r1, [sp]
	add	r0, r1, r4
	str	r5, [r0]
	ldr	r1, [sp, #0x4]
	add	r0, r1, r2
	strb	r5, [r0]
	mov	r1, sl
	add	r0, r1, r6
	strh	r5, [r0]
	mov	r1, r9
	add	r0, r1, r6
	strh	r5, [r0]
	mov	r1, r8
	add	r0, r1, r2
	strb	r5, [r0]
	lsl	r0, r7, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L21	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 ClearSecretBase,.Lfe1-ClearSecretBase
	.align	2, 0
	.globl	ResetSecretBase
	.type	 ResetSecretBase,function
	.thumb_func
ResetSecretBase:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	ldr	r1, .L29
	add	r0, r0, r1
	bl	ClearSecretBase
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	gSaveBlock1+0x1a08
.Lfe2:
	.size	 ResetSecretBase,.Lfe2-ResetSecretBase
	.align	2, 0
	.globl	ResetSecretBases
	.type	 ResetSecretBases,function
	.thumb_func
ResetSecretBases:
	push	{r4, lr}
	mov	r4, #0x0
.L35:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSecretBase
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x13
	bls	.L35	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 ResetSecretBases,.Lfe3-ResetSecretBases
	.align	2, 0
	.globl	sub_80BB5D0
	.type	 sub_80BB5D0,function
	.thumb_func
sub_80BB5D0:
	ldr	r0, .L38
	ldr	r1, .L38+0x4
	ldrh	r1, [r1]
	strb	r1, [r0]
	bx	lr
.L39:
	.align	2, 0
.L38:
	.word	gUnknown_020387DC
	.word	gSpecialVar_0x8004
.Lfe4:
	.size	 sub_80BB5D0,.Lfe4-sub_80BB5D0
	.align	2, 0
	.globl	sub_80BB5E4
	.type	 sub_80BB5E4,function
	.thumb_func
sub_80BB5E4:
	push	{r4, lr}
	ldr	r0, .L47
	mov	r1, #0x0
	strh	r1, [r0]
	mov	r3, #0x0
	add	r4, r0, #0
	b	.L41
.L48:
	.align	2, 0
.L47:
	.word	gScriptResult
.L43:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
.L41:
	cmp	r3, #0x13
	bhi	.L42	@cond_branch
	ldr	r2, .L49
	ldr	r1, .L49+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x5
	add	r0, r0, r1
	ldr	r1, .L49+0x8
	add	r0, r0, r1
	ldrb	r1, [r2]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L43	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L49+0xc
	add	r1, r3, #0
	bl	VarSet
.L42:
	pop	{r4}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gUnknown_020387DC
	.word	gSaveBlock1
	.word	0x1a08
	.word	0x4054
.Lfe5:
	.size	 sub_80BB5E4,.Lfe5-sub_80BB5E4
	.align	2, 0
	.globl	sub_80BB63C
	.type	 sub_80BB63C,function
	.thumb_func
sub_80BB63C:
	push	{lr}
	ldr	r0, .L54
	ldr	r1, .L54+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	cmp	r1, #0
	beq	.L52	@cond_branch
	ldr	r1, .L54+0x8
	mov	r0, #0x1
	strh	r0, [r1]
	b	.L53
.L55:
	.align	2, 0
.L54:
	.word	gSaveBlock1
	.word	0x1a08
	.word	gScriptResult
.L52:
	ldr	r0, .L56
	strh	r1, [r0]
.L53:
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gScriptResult
.Lfe6:
	.size	 sub_80BB63C,.Lfe6-sub_80BB63C
	.align	2, 0
	.globl	sub_80BB66C
	.type	 sub_80BB66C,function
	.thumb_func
sub_80BB66C:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	add	r1, r0, #0
	ldr	r2, .L72
	add	r0, r2, #0
	and	r1, r1, r0
	add	r0, r1, #0
	sub	r0, r0, #0x90
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L59	@cond_branch
	mov	r0, #0x1
	b	.L71
.L73:
	.align	2, 0
.L72:
	.word	0xfff
.L59:
	add	r0, r1, #0
	sub	r0, r0, #0x92
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L61	@cond_branch
	mov	r0, #0x2
	b	.L71
.L61:
	add	r0, r1, #0
	sub	r0, r0, #0x9a
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L63	@cond_branch
	mov	r0, #0x3
	b	.L71
.L63:
	add	r0, r1, #0
	sub	r0, r0, #0x94
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L65	@cond_branch
	mov	r0, #0x4
	b	.L71
.L65:
	add	r0, r1, #0
	sub	r0, r0, #0x96
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bls	.L68	@cond_branch
	cmp	r1, #0x9c
	beq	.L68	@cond_branch
	cmp	r1, #0x9d
	bne	.L67	@cond_branch
.L68:
	mov	r0, #0x5
	b	.L71
.L67:
	add	r0, r1, #0
	sub	r0, r0, #0x98
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bls	.L60	@cond_branch
	mov	r0, #0x0
	b	.L71
.L60:
	mov	r0, #0x6
.L71:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 sub_80BB66C,.Lfe7-sub_80BB66C
	.align	2, 0
	.globl	sub_80BB70C
	.type	 sub_80BB70C,function
	.thumb_func
sub_80BB70C:
	push	{r4, lr}
	ldr	r4, .L75
	bl	sub_80BB66C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gSpecialVar_0x8007
.Lfe8:
	.size	 sub_80BB70C,.Lfe8-sub_80BB70C
	.align	2, 0
	.globl	unref_sub_80BB724
	.type	 unref_sub_80BB724,function
	.thumb_func
unref_sub_80BB724:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	mov	r2, #0x0
	ldr	r6, .L85
	lsr	r3, r1, #0x18
	ldr	r5, .L85+0x4
.L81:
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r1, [r0]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, r3
	bne	.L80	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	b	.L84
.L86:
	.align	2, 0
.L85:
	.word	0xfff
	.word	0x1ff
.L80:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r5
	bls	.L81	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L84:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 unref_sub_80BB724,.Lfe9-unref_sub_80BB724
	.align	2, 0
	.globl	sub_80BB764
	.type	 sub_80BB764,function
	.thumb_func
sub_80BB764:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	mov	r9, r0
	mov	sl, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r8, r2
	mov	r0, #0x0
	mov	ip, r0
	ldr	r1, .L99
	ldr	r0, [r1]
	ldr	r3, [r0, #0x4]
	cmp	ip, r3
	bge	.L87	@cond_branch
	ldr	r0, [r0]
	str	r0, [sp, #0x4]
	str	r3, [sp]
.L91:
	mov	r2, #0x0
	mov	r1, ip
	lsl	r7, r1, #0x10
	ldr	r0, [sp, #0x4]
	cmp	r2, r0
	bge	.L90	@cond_branch
	ldr	r0, .L99
	ldr	r1, [r0]
	asr	r0, r7, #0x10
	ldr	r4, [r1]
	mov	r6, r0
	mul	r6, r6, r4
	ldr	r5, [r1, #0xc]
.L95:
	lsl	r0, r2, #0x10
	asr	r3, r0, #0x10
	add	r0, r6, r3
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L99+0x4
	and	r0, r0, r1
	cmp	r0, r8
	bne	.L94	@cond_branch
	mov	r1, r9
	strh	r2, [r1]
	mov	r1, ip
	mov	r0, sl
	strh	r1, [r0]
	b	.L87
.L100:
	.align	2, 0
.L99:
	.word	gMapHeader
	.word	0x3ff
.L94:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r4
	blt	.L95	@cond_branch
.L90:
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r7, r1
	lsr	r1, r0, #0x10
	mov	ip, r1
	asr	r0, r0, #0x10
	ldr	r1, [sp]
	cmp	r0, r1
	blt	.L91	@cond_branch
.L87:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_80BB764,.Lfe10-sub_80BB764
	.align	2, 0
	.globl	sub_80BB800
	.type	 sub_80BB800,function
	.thumb_func
sub_80BB800:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetXYCoordsOneStepInFrontOfPlayer
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileIdAt
	mov	r5, #0x0
	mov	ip, r4
	lsl	r0, r0, #0x10
	asr	r3, r0, #0x10
	ldr	r1, .L115
	mov	r8, r1
	add	r7, r0, #0
	mov	r4, sp
	mov	r6, ip
.L105:
	ldr	r0, .L115
	lsl	r1, r5, #0x2
	add	r2, r1, r0
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L104	@cond_branch
	mov	r3, #0x0
	ldrsh	r0, [r4, r3]
	mov	r5, #0x0
	ldrsh	r1, [r6, r5]
	ldrh	r3, [r2, #0x2]
	b	.L114
.L116:
	.align	2, 0
.L115:
	.word	gUnknown_083D1358
.L104:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x6
	bls	.L105	@cond_branch
	mov	r5, #0x0
	mov	r4, sp
	mov	r6, ip
.L111:
	lsl	r0, r5, #0x2
	mov	r1, r8
	add	r3, r0, r1
	ldrh	r1, [r3, #0x2]
	asr	r0, r7, #0x10
	cmp	r1, r0
	bne	.L110	@cond_branch
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	mov	r5, #0x0
	ldrsh	r1, [r6, r5]
	ldrh	r3, [r3]
.L114:
	mov	r5, #0xc0
	lsl	r5, r5, #0x4
	add	r2, r5, #0
	orr	r2, r2, r3
	bl	MapGridSetMetatileIdAt
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r2, #0x0
	ldrsh	r1, [r6, r2]
	bl	CurrentMapDrawMetatileAt
	b	.L101
.L110:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x6
	bls	.L111	@cond_branch
.L101:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_80BB800,.Lfe11-sub_80BB800
	.align	2, 0
	.globl	sub_80BB8A8
	.type	 sub_80BB8A8,function
	.thumb_func
sub_80BB8A8:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x0
.L121:
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L120	@cond_branch
	add	r0, r1, #0
	b	.L124
.L120:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x6
	bls	.L121	@cond_branch
	mov	r0, #0x7
.L124:
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 sub_80BB8A8,.Lfe12-sub_80BB8A8
	.align	2, 0
	.globl	sub_80BB8CC
	.type	 sub_80BB8CC,function
	.thumb_func
sub_80BB8CC:
	push	{r4, r5, r6, lr}
	ldr	r2, .L131
	ldr	r0, .L131+0x4
	ldrb	r1, [r0]
	ldr	r3, .L131+0x8
	add	r0, r2, r3
	strb	r1, [r0]
	mov	r3, #0x0
	ldr	r0, .L131+0xc
	add	r2, r2, r0
	ldr	r4, .L131+0x10
.L129:
	add	r1, r3, r2
	add	r0, r3, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x3
	bls	.L129	@cond_branch
	ldr	r0, .L131+0x14
	mov	r1, #0x0
	bl	VarSet
	ldr	r6, .L131+0x18
	add	r0, r6, #0
	bl	sub_80BB8A8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L131+0x1c
	add	r0, r5, #0
	mov	r1, #0xff
	mov	r2, #0x7
	bl	memset
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	StringCopyN
	ldrb	r0, [r6, #0x8]
	sub	r5, r5, #0x1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	ldrb	r2, [r5]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5]
	ldr	r0, .L131+0x20
	ldr	r1, .L131+0x24
	ldrb	r1, [r1, #0x14]
	bl	VarSet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L132:
	.align	2, 0
.L131:
	.word	gSaveBlock1
	.word	gUnknown_020387DC
	.word	0x1a08
	.word	0x1a11
	.word	gSaveBlock2+0xa
	.word	0x4054
	.word	gSaveBlock2
	.word	gSaveBlock1+0x1a0a
	.word	0x4026
	.word	gMapHeader
.Lfe13:
	.size	 sub_80BB8CC,.Lfe13-sub_80BB8CC
	.align	2, 0
	.globl	sub_80BB970
	.type	 sub_80BB970,function
	.thumb_func
sub_80BB970:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r2, #0x0
	b	.L152
.L137:
	ldr	r0, [r5, #0x10]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x5]
	add	r7, r2, #0x1
	cmp	r0, #0x8
	bne	.L136	@cond_branch
	mov	r2, #0x0
	ldr	r4, .L153
	add	r6, r1, #0
.L142:
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x5
	add	r0, r0, r4
	ldr	r1, .L153+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, [r3, #0x8]
	cmp	r1, r0
	bne	.L141	@cond_branch
	ldrh	r0, [r3]
	add	r0, r0, #0x7
	ldrh	r1, [r3, #0x2]
	add	r1, r1, #0x7
	bl	MapGridGetMetatileIdAt
	mov	r3, #0x0
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
.L147:
	ldr	r0, .L153+0x8
	lsl	r1, r3, #0x2
	add	r2, r1, r0
	ldrh	r0, [r2]
	cmp	r0, r4
	bne	.L146	@cond_branch
	ldr	r1, [r5, #0x10]
	add	r1, r6, r1
	ldrh	r0, [r1]
	add	r0, r0, #0x7
	ldrh	r1, [r1, #0x2]
	add	r1, r1, #0x7
	ldrh	r3, [r2, #0x2]
	mov	r4, #0xc0
	lsl	r4, r4, #0x4
	add	r2, r4, #0
	orr	r2, r2, r3
	bl	MapGridSetMetatileIdAt
	b	.L136
.L154:
	.align	2, 0
.L153:
	.word	gSaveBlock1
	.word	0x1a08
	.word	gUnknown_083D1358
.L146:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x6
	bls	.L147	@cond_branch
	b	.L136
.L141:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x13
	bls	.L142	@cond_branch
.L136:
	lsl	r0, r7, #0x10
	lsr	r2, r0, #0x10
.L152:
	ldrb	r0, [r5, #0x3]
	cmp	r2, r0
	bcc	.L137	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 sub_80BB970,.Lfe14-sub_80BB970
	.align	2, 0
	.globl	sub_80BBA14
	.type	 sub_80BBA14,function
	.thumb_func
sub_80BBA14:
	push	{lr}
	ldr	r0, .L156
	ldrb	r0, [r0]
	mov	r1, #0xa
	bl	__udivsi3
	ldr	r2, .L156+0x4
	lsl	r0, r0, #0x1a
	asr	r0, r0, #0x18
	add	r1, r0, r2
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	add	r0, r0, #0x1
	add	r0, r0, r2
	mov	r2, #0x0
	ldrsb	r2, [r0, r2]
	mov	r0, #0x19
	bl	warp1_set_2
	pop	{r0}
	bx	r0
.L157:
	.align	2, 0
.L156:
	.word	gUnknown_020387DC
	.word	gUnknown_083D1374
.Lfe15:
	.size	 sub_80BBA14,.Lfe15-sub_80BBA14
	.align	2, 0
	.globl	sub_80BBA48
	.type	 sub_80BBA48,function
	.thumb_func
sub_80BBA48:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L168
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	beq	.L161	@cond_branch
	cmp	r0, #0x1
	bgt	.L167	@cond_branch
	cmp	r0, #0
	beq	.L160	@cond_branch
	b	.L159
.L169:
	.align	2, 0
.L168:
	.word	gTasks
.L167:
	cmp	r0, #0x2
	beq	.L163	@cond_branch
	b	.L159
.L160:
	mov	r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L159
.L161:
	ldr	r0, .L170
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L159	@cond_branch
	mov	r0, #0x2
	strh	r0, [r2, #0x8]
	b	.L159
.L171:
	.align	2, 0
.L170:
	.word	gPaletteFade
.L163:
	ldr	r0, .L172
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L172+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r1, r1, r2
	ldr	r0, .L172+0x8
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L164	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L164:
	bl	sub_80BBA14
	bl	warp_in
	ldr	r0, .L172+0xc
	ldr	r1, .L172+0x10
	str	r1, [r0]
	ldr	r0, .L172+0x14
	bl	SetMainCallback2
	add	r0, r4, #0
	bl	DestroyTask
.L159:
	pop	{r4}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	0x4054
	.word	gSaveBlock1
	.word	0x1a18
	.word	gFieldCallback
	.word	sub_8080990
	.word	CB2_LoadMap
.Lfe16:
	.size	 sub_80BBA48,.Lfe16-sub_80BBA48
	.align	2, 0
	.globl	sub_80BBAF0
	.type	 sub_80BBAF0,function
	.thumb_func
sub_80BBAF0:
	push	{lr}
	ldr	r0, .L175
	mov	r1, #0x0
	bl	CreateTask
	mov	r0, #0x1
	mov	r1, #0x0
	bl	fade_screen
	ldr	r0, .L175+0x4
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	mov	r2, #0x5
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x0
	bl	saved_warp2_set
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	sub_80BBA48
	.word	gSaveBlock1
.Lfe17:
	.size	 sub_80BBAF0,.Lfe17-sub_80BBAF0
	.align	2, 0
	.globl	sub_80BBB24
	.type	 sub_80BBB24,function
	.thumb_func
sub_80BBB24:
	push	{lr}
	ldr	r0, .L180
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x9
	bne	.L178	@cond_branch
	ldr	r0, .L180+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L178	@cond_branch
	mov	r0, #0x0
	b	.L179
.L181:
	.align	2, 0
.L180:
	.word	gMapHeader
	.word	0x4097
.L178:
	mov	r0, #0x1
.L179:
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 sub_80BBB24,.Lfe18-sub_80BBB24
	.align	2, 0
	.globl	sub_80BBB50
	.type	 sub_80BBB50,function
	.thumb_func
sub_80BBB50:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L184
	ldrb	r1, [r0, #0x5]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L184+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	bl	FieldObjectTurn
	bl	sub_807D770
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L183	@cond_branch
	bl	EnableBothScriptContexts
	add	r0, r4, #0
	bl	DestroyTask
.L183:
	pop	{r4}
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	gPlayerAvatar
	.word	gMapObjects
.Lfe19:
	.size	 sub_80BBB50,.Lfe19-sub_80BBB50
	.align	2, 0
	.globl	sub_80BBB90
	.type	 sub_80BBB90,function
	.thumb_func
sub_80BBB90:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	bl	ScriptContext2_Enable
	bl	HideMapNamePopup
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r2, #0x88
	lsl	r2, r2, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	sub_80BB764
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	add	r0, r0, #0x7
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	add	r1, r1, #0x7
	mov	r2, #0xe2
	lsl	r2, r2, #0x4
	bl	MapGridSetMetatileIdAt
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	add	r0, r0, #0x7
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	add	r1, r1, #0x7
	bl	CurrentMapDrawMetatileAt
	bl	pal_fill_black
	ldr	r0, .L187
	mov	r1, #0x0
	bl	CreateTask
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	sub_80BBB50
.Lfe20:
	.size	 sub_80BBB90,.Lfe20-sub_80BBB90
	.align	2, 0
	.globl	sub_80BBBEC
	.type	 sub_80BBBEC,function
	.thumb_func
sub_80BBBEC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L191
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r0, .L191+0x4
	ldrb	r0, [r0]
	mov	r1, #0xa
	bl	__udivsi3
	ldr	r1, .L191+0x8
	mov	r5, #0x4
	ldrsb	r5, [r1, r5]
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	mov	r2, #0x1
	neg	r2, r2
	ldr	r4, .L191+0xc
	lsl	r0, r0, #0x1a
	asr	r0, r0, #0x18
	add	r3, r0, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3, #0]
	lsl	r3, r3, #24
	asr	r3, r3, #24
	add	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	str	r0, [sp]
	add	r0, r5, #0
	bl	Overworld_SetWarpDestination
	bl	warp_in
	ldr	r1, .L191+0x10
	ldr	r0, .L191+0x14
	str	r0, [r1]
	ldr	r0, .L191+0x18
	bl	SetMainCallback2
	add	r0, r6, #0
	bl	DestroyTask
.L190:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	gPaletteFade
	.word	gUnknown_020387DC
	.word	gSaveBlock1
	.word	gUnknown_083D1374
	.word	gFieldCallback
	.word	sub_80BBB90
	.word	CB2_LoadMap
.Lfe21:
	.size	 sub_80BBBEC,.Lfe21-sub_80BBBEC
	.align	2, 0
	.globl	sub_80BBC78
	.type	 sub_80BBC78,function
	.thumb_func
sub_80BBC78:
	push	{lr}
	ldr	r0, .L194
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L194+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	bl	fade_screen
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	sub_80BBBEC
	.word	gTasks
.Lfe22:
	.size	 sub_80BBC78,.Lfe22-sub_80BBC78
	.align	2, 0
	.globl	CurrentMapIsSecretBase
	.type	 CurrentMapIsSecretBase,function
	.thumb_func
CurrentMapIsSecretBase:
	push	{lr}
	ldr	r1, .L199
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x19
	bne	.L197	@cond_branch
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0x17
	bhi	.L197	@cond_branch
	mov	r0, #0x1
	b	.L198
.L200:
	.align	2, 0
.L199:
	.word	gSaveBlock1
.L197:
	mov	r0, #0x0
.L198:
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 CurrentMapIsSecretBase,.Lfe23-CurrentMapIsSecretBase
	.align	2, 0
	.globl	sub_80BBCCC
	.type	 sub_80BBCCC,function
	.thumb_func
sub_80BBCCC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	CurrentMapIsSecretBase
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L202	@cond_branch
	ldr	r0, .L212
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r1, #0x0
	mov	r0, sp
	strh	r1, [r0]
	ldr	r6, .L212+0x4
	mov	r4, sp
	ldr	r0, .L212+0x8
	add	r7, r6, r0
.L206:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldrh	r1, [r4]
	add	r2, r0, r1
	ldr	r1, .L212+0xc
	add	r0, r6, r1
	add	r1, r2, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x77
	bhi	.L205	@cond_branch
	ldr	r0, .L212+0x10
	ldrb	r3, [r1]
	lsl	r1, r3, #0x5
	add	r1, r1, r0
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0x4
	beq	.L205	@cond_branch
	add	r0, r2, r7
	ldrb	r2, [r0]
	lsr	r0, r2, #0x4
	add	r0, r0, #0x7
	mov	r1, #0xf
	and	r1, r1, r2
	add	r1, r1, #0x7
	add	r2, r3, #0
	bl	sub_80FF394
.L205:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strh	r0, [r4]
	cmp	r0, #0xf
	bls	.L206	@cond_branch
	cmp	r5, #0
	beq	.L209	@cond_branch
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r2, #0x88
	lsl	r2, r2, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	sub_80BB764
	mov	r0, sp
	ldrh	r0, [r0]
	add	r0, r0, #0x7
	ldrh	r1, [r4]
	add	r1, r1, #0x7
	ldr	r2, .L212+0x14
	bl	MapGridSetMetatileIdAt
	b	.L202
.L213:
	.align	2, 0
.L212:
	.word	0x4054
	.word	gSaveBlock1
	.word	0x1a2a
	.word	0x1a1a
	.word	gDecorations
	.word	0xe21
.L209:
	mov	r0, r8
	cmp	r0, #0x1
	bne	.L202	@cond_branch
	ldr	r0, .L214
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L202	@cond_branch
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r2, #0x88
	lsl	r2, r2, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	sub_80BB764
	mov	r0, sp
	ldrh	r0, [r0]
	add	r0, r0, #0x7
	ldrh	r1, [r4]
	add	r1, r1, #0x7
	ldr	r2, .L214+0x4
	bl	MapGridSetMetatileIdAt
.L202:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L215:
	.align	2, 0
.L214:
	.word	0x4089
	.word	0xe0a
.Lfe24:
	.size	 sub_80BBCCC,.Lfe24-sub_80BBCCC
	.align	2, 0
	.globl	sub_80BBDD0
	.type	 sub_80BBDD0,function
	.thumb_func
sub_80BBDD0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffec
	ldr	r0, .L235
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	CurrentMapIsSecretBase
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L217	@cond_branch
	ldr	r0, .L235+0x4
	str	r0, [sp, #0x4]
	add	r0, r0, #0xc
	str	r0, [sp, #0x8]
	mov	r1, #0xc
	str	r1, [sp, #0xc]
	b	.L218
.L236:
	.align	2, 0
.L235:
	.word	0x4054
	.word	gSaveBlock1+0x2688
.L217:
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r0, .L237
	add	r2, r1, r0
	str	r2, [sp, #0x4]
	add	r0, r0, #0x10
	add	r1, r1, r0
	str	r1, [sp, #0x8]
	mov	r3, #0x10
	str	r3, [sp, #0xc]
.L218:
	mov	r6, #0x0
	ldr	r4, [sp, #0xc]
	cmp	r6, r4
	bcc	.LCB1769
	b	.L220	@long jump
.LCB1769:
	ldr	r5, .L237+0x4
	mov	sl, r5
.L222:
	ldr	r1, [sp, #0x4]
	add	r0, r1, r6
	ldrb	r1, [r0]
	mov	r9, r0
	add	r2, r6, #0x1
	str	r2, [sp, #0x10]
	cmp	r1, #0
	bne	.LCB1788
	b	.L221	@long jump
.LCB1788:
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	ldr	r3, .L237+0x8
	add	r0, r0, r3
	ldrb	r0, [r0, #0x11]
	cmp	r0, #0x4
	beq	.LCB1797
	b	.L221	@long jump
.LCB1797:
	mov	r5, #0x0
	ldr	r0, .L237+0xc
	ldr	r2, [r0, #0x4]
	ldrb	r3, [r2]
	mov	r8, r0
	cmp	r5, r3
	bcs	.L226	@cond_branch
	ldr	r0, [r2, #0x4]
	ldrh	r1, [r0, #0x14]
	ldr	r4, .L237+0x10
	ldrh	r0, [r4]
	add	r0, r0, #0xae
	add	r7, r4, #0
	cmp	r1, r0
	beq	.L226	@cond_branch
	add	r4, r2, #0
	add	r2, r3, #0
.L227:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r2
	bcs	.L226	@cond_branch
	ldr	r1, [r4, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x14]
	ldrh	r0, [r7]
	add	r0, r0, #0xae
	cmp	r1, r0
	bne	.L227	@cond_branch
.L226:
	mov	r1, r8
	ldr	r0, [r1, #0x4]
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L221	@cond_branch
	ldr	r7, .L237+0x14
	ldr	r2, [sp, #0x8]
	add	r1, r2, r6
	ldrb	r0, [r1]
	lsr	r0, r0, #0x4
	strh	r0, [r7]
	ldr	r6, .L237+0x18
	ldrb	r1, [r1]
	mov	r0, #0xf
	and	r0, r0, r1
	strh	r0, [r6]
	ldrh	r0, [r7]
	add	r0, r0, #0x7
	ldrh	r1, [r6]
	add	r1, r1, #0x7
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	sub_80572D8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L233	@cond_branch
	add	r0, r4, #0
	bl	sub_80572EC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L221	@cond_branch
.L233:
	mov	r3, r8
	ldr	r0, [r3, #0x4]
	ldr	r1, [r0, #0x4]
	lsl	r4, r5, #0x1
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r1, r4, r1
	ldr	r5, .L237+0x1c
	add	r0, r5, #0
	ldrb	r1, [r1, #0x1]
	add	r0, r0, r1
	ldr	r1, .L237+0x20
	strh	r0, [r1]
	ldrh	r0, [r1]
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x5
	ldr	r3, .L237+0x24
	add	r1, r1, r3
	ldr	r1, [r1]
	ldrh	r1, [r1]
	bl	VarSet
	mov	r5, r8
	ldr	r0, [r5, #0x4]
	ldr	r0, [r0, #0x4]
	add	r4, r4, r0
	ldrb	r0, [r4]
	ldr	r1, .L237+0x20
	strh	r0, [r1]
	ldr	r2, .L237+0x10
	ldrh	r0, [r2]
	add	r0, r0, #0xae
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagClear
	ldr	r3, .L237+0x20
	ldrb	r0, [r3]
	mov	r4, sl
	ldrb	r1, [r4, #0x5]
	ldrb	r2, [r4, #0x4]
	bl	show_sprite
	ldr	r5, .L237+0x20
	ldrb	r0, [r5]
	ldrb	r1, [r4, #0x5]
	ldrb	r2, [r4, #0x4]
	mov	r4, #0x0
	ldrsh	r3, [r7, r4]
	mov	r5, #0x0
	ldrsh	r4, [r6, r5]
	str	r4, [sp]
	bl	sub_805C0F8
	ldr	r1, .L237+0x20
	ldrb	r0, [r1]
	mov	r2, sl
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	sub_805C78C
	ldr	r3, .L237+0x10
	ldrh	r0, [r3]
	add	r0, r0, #0x1
	strh	r0, [r3]
.L221:
	ldr	r4, [sp, #0x10]
	lsl	r0, r4, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, [sp, #0xc]
	cmp	r6, r5
	bcs	.LCB1989
	b	.L222	@long jump
.LCB1989:
.L220:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L238:
	.align	2, 0
.L237:
	.word	gSaveBlock1+0x1a1a
	.word	gSaveBlock1
	.word	gDecorations
	.word	gMapHeader
	.word	gSpecialVar_0x8004
	.word	gSpecialVar_0x8006
	.word	gSpecialVar_0x8007
	.word	0x3f20
	.word	gScriptResult
	.word	gDecorations+0x1c
.Lfe25:
	.size	 sub_80BBDD0,.Lfe25-sub_80BBDD0
	.align	2, 0
	.globl	sub_80BBFA4
	.type	 sub_80BBFA4,function
	.thumb_func
sub_80BBFA4:
	push	{r4, r5, lr}
	ldr	r0, .L240
	bl	VarGet
	ldr	r5, .L240+0x4
	ldr	r4, .L240+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80BCCA4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	VarSet
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	0x4054
	.word	0x401f
	.word	gUnknown_083D13EC
.Lfe26:
	.size	 sub_80BBFA4,.Lfe26-sub_80BBFA4
	.align	2, 0
	.globl	sub_80BBFD8
	.type	 sub_80BBFD8,function
	.thumb_func
sub_80BBFD8:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r3, #0x0
	ldrb	r0, [r4, #0x3]
	cmp	r3, r0
	bge	.L244	@cond_branch
	ldr	r6, .L249
.L246:
	lsl	r3, r3, #0x10
	asr	r1, r3, #0x10
	ldr	r2, [r4, #0x10]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x5]
	cmp	r0, #0x8
	bne	.L245	@cond_branch
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	ldrh	r0, [r2]
	add	r0, r0, #0x7
	cmp	r1, r0
	bne	.L245	@cond_branch
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	ldrh	r0, [r2, #0x2]
	add	r0, r0, #0x7
	cmp	r1, r0
	bne	.L245	@cond_branch
	ldr	r0, [r2, #0x8]
	strb	r0, [r6]
	b	.L244
.L250:
	.align	2, 0
.L249:
	.word	gUnknown_020387DC
.L245:
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	ldrb	r1, [r4, #0x3]
	cmp	r0, r1
	blt	.L246	@cond_branch
.L244:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_80BBFD8,.Lfe27-sub_80BBFD8
	.align	2, 0
	.globl	sub_80BC038
	.type	 sub_80BC038,function
	.thumb_func
sub_80BC038:
	push	{lr}
	bl	sub_80BBFD8
	bl	sub_80BB5E4
	ldr	r0, .L252
	bl	ScriptContext1_SetupScript
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	gUnknown_081A2E14
.Lfe28:
	.size	 sub_80BC038,.Lfe28-sub_80BC038
	.align	2, 0
	.globl	sub_80BC050
	.type	 sub_80BC050,function
	.thumb_func
sub_80BC050:
	push	{lr}
	bl	sub_80BB5D0
	bl	sub_80BB5E4
	ldr	r0, .L257
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L255	@cond_branch
	mov	r0, #0x1
	b	.L256
.L258:
	.align	2, 0
.L257:
	.word	gScriptResult
.L255:
	mov	r0, #0x0
.L256:
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 sub_80BC050,.Lfe29-sub_80BC050
	.align	2, 0
	.globl	sub_80BC074
	.type	 sub_80BC074,function
	.thumb_func
sub_80BC074:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L268
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L262	@cond_branch
	cmp	r0, #0x1
	bgt	.L267	@cond_branch
	cmp	r0, #0
	beq	.L261	@cond_branch
	b	.L260
.L269:
	.align	2, 0
.L268:
	.word	gTasks
.L267:
	cmp	r0, #0x2
	beq	.L264	@cond_branch
	b	.L260
.L261:
	bl	ScriptContext2_Enable
	mov	r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L260
.L262:
	ldr	r0, .L270
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L260	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L260
.L271:
	.align	2, 0
.L270:
	.word	gPaletteFade
.L264:
	mov	r0, #0x7e
	bl	copy_saved_warp2_bank_and_enter_x_to_warp1
	bl	warp_in
	ldr	r0, .L272
	ldr	r1, .L272+0x4
	str	r1, [r0]
	ldr	r0, .L272+0x8
	bl	SetMainCallback2
	bl	ScriptContext2_Disable
	add	r0, r5, #0
	bl	DestroyTask
.L260:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L273:
	.align	2, 0
.L272:
	.word	gFieldCallback
	.word	mapldr_default
	.word	CB2_LoadMap
.Lfe30:
	.size	 sub_80BC074,.Lfe30-sub_80BC074
	.align	2, 0
	.globl	sub_80BC0F8
	.type	 sub_80BC0F8,function
	.thumb_func
sub_80BC0F8:
	push	{lr}
	ldr	r0, .L275
	mov	r1, #0x0
	bl	CreateTask
	mov	r0, #0x1
	mov	r1, #0x0
	bl	fade_screen
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	sub_80BC074
.Lfe31:
	.size	 sub_80BC0F8,.Lfe31-sub_80BC0F8
	.align	2, 0
	.globl	sub_80BC114
	.type	 sub_80BC114,function
	.thumb_func
sub_80BC114:
	push	{lr}
	ldr	r0, .L281
	ldr	r1, .L281+0x4
	add	r0, r0, r1
	ldr	r1, .L281+0x8
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L278	@cond_branch
	ldr	r1, .L281+0xc
	mov	r0, #0x1
	b	.L280
.L282:
	.align	2, 0
.L281:
	.word	gSaveBlock1
	.word	0x1a08
	.word	gUnknown_020387DC
	.word	gScriptResult
.L278:
	ldr	r1, .L283
	mov	r0, #0x0
.L280:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	gScriptResult
.Lfe32:
	.size	 sub_80BC114,.Lfe32-sub_80BC114
	.align	2, 0
	.globl	sub_80BC14C
	.type	 sub_80BC14C,function
	.thumb_func
sub_80BC14C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, #0x0
	ldr	r5, .L293
	ldr	r4, .L293+0x4
.L289:
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r0, r0, r5
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L288	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	b	.L292
.L294:
	.align	2, 0
.L293:
	.word	gSaveBlock1
	.word	0x1a08
.L288:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L289	@cond_branch
	mov	r0, #0x0
.L292:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 sub_80BC14C,.Lfe33-sub_80BC14C
	.align	2, 0
	.globl	sub_80BC190
	.type	 sub_80BC190,function
	.thumb_func
sub_80BC190:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r4, r1, #0x2
	add	r4, r4, r1
	lsl	r4, r4, #0x5
	ldr	r0, .L296
	add	r4, r4, r0
	add	r0, r4, #0
	bl	sub_80BB8A8
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringCopyN
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r1, .L296+0x4
	add	r0, r5, #0
	bl	StringAppend
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L297:
	.align	2, 0
.L296:
	.word	gSaveBlock1+0x1a0a
	.word	gOtherText_PlayersBase
.Lfe34:
	.size	 sub_80BC190,.Lfe34-sub_80BC190
	.align	2, 0
	.globl	GetSecretBaseMapName
	.type	 GetSecretBaseMapName,function
	.thumb_func
GetSecretBaseMapName:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	ldr	r6, .L299
	ldr	r5, .L299+0x4
	ldr	r4, .L299+0x8
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r1, r1, r5
	ldr	r0, .L299+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r6]
	add	r0, r4, #0
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	sub_80BC190
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L300:
	.align	2, 0
.L299:
	.word	gUnknown_020387DC
	.word	gSaveBlock1
	.word	0x4054
	.word	0x1a08
.Lfe35:
	.size	 GetSecretBaseMapName,.Lfe35-GetSecretBaseMapName
	.align	2, 0
	.globl	sub_80BC224
	.type	 sub_80BC224,function
	.thumb_func
sub_80BC224:
	push	{r4, r5, lr}
	ldr	r0, .L302
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x5
	ldr	r0, .L302+0x4
	add	r4, r4, r0
	ldr	r5, .L302+0x8
	add	r0, r4, #0
	bl	sub_80BB8A8
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringCopyN
	mov	r1, #0xff
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	0x4054
	.word	gSaveBlock1+0x1a0a
	.word	gStringVar1
.Lfe36:
	.size	 sub_80BC224,.Lfe36-sub_80BC224
	.align	2, 0
	.globl	sub_80BC268
	.type	 sub_80BC268,function
	.thumb_func
sub_80BC268:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L307
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r1, r1, r2
	ldr	r0, .L307+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x6
	cmp	r0, #0
	bne	.L305	@cond_branch
	mov	r0, #0x0
	b	.L306
.L308:
	.align	2, 0
.L307:
	.word	gSaveBlock1
	.word	0x1a09
.L305:
	mov	r0, #0x1
.L306:
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 sub_80BC268,.Lfe37-sub_80BC268
	.align	2, 0
	.globl	sub_80BC298
	.type	 sub_80BC298,function
	.thumb_func
sub_80BC298:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x1a
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1b
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1c
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1d
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1e
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x1f
	bl	GetMonData
	add	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r4, #0
	mov	r1, #0x6
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 sub_80BC298,.Lfe38-sub_80BC298
	.align	2, 0
	.globl	sub_80BC300
	.type	 sub_80BC300,function
	.thumb_func
sub_80BC300:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0xC
    movs r0, 0
    mov r10, r0
    movs r6, 0
    mov r9, r6
_080BC314:
    movs r4, 0
    lsls r3, r6, 2
    lsls r2, r6, 1
    ldr r7, _080BC424 @ =gPlayerParty
    adds r1, r6, 0x1
    str r1, [sp]
    adds r1, r3, 0
_080BC322:
    adds r0, r1, r4
    lsls r0, 1
    ldr r5, _080BC428 @ =gSaveBlock1 + 0x1A54
    adds r0, r5, r0
    mov r5, r9
    strh r5, [r0]
    adds r0, r4, 0x1
    lsls r0, 16
    lsrs r4, r0, 16
    cmp r4, 0x3
    bls _080BC322
    ldr r1, _080BC42C @ =gSaveBlock1 + 0x1A84
    adds r0, r1, r2
    strh r5, [r0]
    ldr r5, _080BC430 @ =gSaveBlock1 + 0x1A90
    adds r0, r5, r2
    mov r1, r9
    strh r1, [r0]
    ldr r2, _080BC434 @ =gSaveBlock1 + 0x1A9C
    adds r0, r2, r6
    mov r5, r9
    strb r5, [r0]
    ldr r1, _080BC438 @ =gSaveBlock1 + 0x1A3C
    adds r0, r1, r3
    mov r2, r9
    str r2, [r0]
    ldr r3, _080BC43C @ =gSaveBlock1 + 0x1AA2
    adds r0, r3, r6
    strb r2, [r0]
    movs r0, 0x64
    adds r5, r6, 0
    muls r5, r0
    adds r4, r5, r7
    adds r0, r4, 0
    movs r1, 0xB
    bl GetMonData
    cmp r0, 0
    beq _080BC408
    adds r0, r4, 0
    movs r1, 0x2D
    bl GetMonData
    cmp r0, 0
    bne _080BC408
    movs r4, 0
    mov r0, r10
    lsls r0, 2
    mov r8, r0
    mov r1, r10
    lsls r7, r1, 1
    adds r1, 0x1
    str r1, [sp, 0x4]
    ldr r2, _080BC424 @ =gPlayerParty
_080BC38E:
    adds r1, r4, 0
    adds r1, 0xD
    adds r0, r5, r2
    str r2, [sp, 0x8]
    bl GetMonData
    mov r3, r8
    adds r1, r3, r4
    lsls r1, 1
    ldr r3, _080BC428 @ =gSaveBlock1 + 0x1A54
    adds r1, r3, r1
    strh r0, [r1]
    adds r0, r4, 0x1
    lsls r0, 16
    lsrs r4, r0, 16
    ldr r2, [sp, 0x8]
    cmp r4, 0x3
    bls _080BC38E
    movs r0, 0x64
    adds r4, r6, 0
    muls r4, r0
    ldr r0, _080BC424 @ =gPlayerParty
    adds r4, r0
    adds r0, r4, 0
    movs r1, 0xB
    bl GetMonData
    ldr r5, _080BC42C @ =gSaveBlock1 + 0x1A84
    adds r1, r5, r7
    strh r0, [r1]
    adds r0, r4, 0
    movs r1, 0xC
    bl GetMonData
    ldr r2, _080BC430 @ =gSaveBlock1 + 0x1A90
    adds r1, r2, r7
    strh r0, [r1]
    adds r0, r4, 0
    movs r1, 0x38
    bl GetMonData
    ldr r1, _080BC434 @ =gSaveBlock1 + 0x1A9C
    add r1, r10
    strb r0, [r1]
    adds r0, r4, 0
    movs r1, 0
    bl GetMonData
    ldr r1, _080BC438 @ =gSaveBlock1 + 0x1A3C
    add r1, r8
    str r0, [r1]
    adds r0, r4, 0
    bl sub_80BC298
    ldr r1, _080BC43C @ =gSaveBlock1 + 0x1AA2
    add r1, r10
    strb r0, [r1]
    ldr r3, [sp, 0x4]
    lsls r0, r3, 16
    lsrs r0, 16
    mov r10, r0
_080BC408:
    ldr r5, [sp]
    lsls r0, r5, 16
    lsrs r6, r0, 16
    cmp r6, 0x5
    bls _080BC314
    add sp, 0xC
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_080BC424: .4byte gPlayerParty
_080BC428: .4byte gSaveBlock1 + 0x1A54
_080BC42C: .4byte gSaveBlock1 + 0x1A84
_080BC430: .4byte gSaveBlock1 + 0x1A90
_080BC434: .4byte gSaveBlock1 + 0x1A9C
_080BC438: .4byte gSaveBlock1 + 0x1A3C
_080BC43C: .4byte gSaveBlock1 + 0x1AA2
.syntax divided

	.code	16
.Lfe39:
	.size	 sub_80BC300,.Lfe39-sub_80BC300
	.align	2, 0
	.globl	sub_80BC440
	.type	 sub_80BC440,function
	.thumb_func
sub_80BC440:
	push	{r4, r5, lr}
	ldr	r4, .L312
	ldr	r0, .L312+0x4
	add	r4, r4, r0
	ldrh	r5, [r4]
	mov	r0, #0x0
	bl	ResetSecretBase
	strh	r5, [r4]
	bl	sub_80BC0F8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gSaveBlock1
	.word	0x1a16
.Lfe40:
	.size	 sub_80BC440,.Lfe40-sub_80BC440
	.align	2, 0
	.globl	SecretBasePC_PackUp
	.type	 SecretBasePC_PackUp,function
	.thumb_func
SecretBasePC_PackUp:
	push	{lr}
	mov	r0, #0x14
	bl	IncrementGameStat
	bl	sub_80BC440
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 SecretBasePC_PackUp,.Lfe41-SecretBasePC_PackUp
	.align	2, 0
	.globl	sub_80BC474
	.type	 sub_80BC474,function
	.thumb_func
sub_80BC474:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L329
	ldr	r4, [r0, #0x4]
	mov	r6, #0x0
	ldrb	r0, [r4, #0x3]
	cmp	r6, r0
	bcs	.L317	@cond_branch
	ldr	r3, .L329+0x4
.L319:
	ldr	r2, [r4, #0x10]
	lsl	r1, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x5]
	add	r7, r1, #0
	cmp	r0, #0x8
	bne	.L318	@cond_branch
	ldrb	r1, [r3]
	ldr	r0, [r2, #0x8]
	cmp	r1, r0
	bne	.L318	@cond_branch
	ldrh	r0, [r2]
	add	r0, r0, #0x7
	ldrh	r1, [r2, #0x2]
	add	r1, r1, #0x7
	bl	MapGridGetMetatileIdAt
	mov	r1, #0x0
	ldr	r5, .L329+0x8
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
.L324:
	lsl	r0, r1, #0x2
	add	r3, r0, r5
	ldrh	r0, [r3, #0x2]
	cmp	r0, r2
	beq	.L328	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x6
	bls	.L324	@cond_branch
.L322:
	bl	DrawWholeMapView
	b	.L317
.L330:
	.align	2, 0
.L329:
	.word	gMapHeader
	.word	gSaveBlock1+0x1a08
	.word	gUnknown_083D1358
.L328:
	ldr	r0, [r4, #0x10]
	add	r1, r7, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x7
	ldrh	r1, [r1, #0x2]
	add	r1, r1, #0x7
	ldrh	r3, [r3]
	mov	r4, #0xc0
	lsl	r4, r4, #0x4
	add	r2, r4, #0
	orr	r2, r2, r3
	bl	MapGridSetMetatileIdAt
	b	.L322
.L318:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r4, #0x3]
	cmp	r6, r0
	bcc	.L319	@cond_branch
.L317:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_80BC474,.Lfe42-sub_80BC474
	.align	2, 0
	.globl	sub_80BC50C
	.type	 sub_80BC50C,function
	.thumb_func
sub_80BC50C:
	push	{r4, r5, lr}
	bl	sub_80BC474
	mov	r0, #0x14
	bl	IncrementGameStat
	ldr	r4, .L332
	ldr	r0, .L332+0x4
	add	r4, r4, r0
	ldrh	r5, [r4]
	mov	r0, #0x0
	bl	ResetSecretBase
	strh	r5, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L333:
	.align	2, 0
.L332:
	.word	gSaveBlock1
	.word	0x1a16
.Lfe43:
	.size	 sub_80BC50C,.Lfe43-sub_80BC50C
	.align	2, 0
	.globl	sub_80BC538
	.type	 sub_80BC538,function
	.thumb_func
sub_80BC538:
	push	{r4, r5, lr}
	mov	r5, #0x0
	mov	r4, #0x1
.L338:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80BC268
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L337	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L337:
	lsl	r0, r4, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L338	@cond_branch
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 sub_80BC538,.Lfe44-sub_80BC538
	.align	2, 0
	.globl	sub_80BC56C
	.type	 sub_80BC56C,function
	.thumb_func
sub_80BC56C:
	push	{lr}
	ldr	r0, .L347
	ldrb	r0, [r0]
	bl	sub_80BC14C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80BC268
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1
	bne	.L342	@cond_branch
	ldr	r0, .L347+0x4
	strh	r1, [r0]
	b	.L343
.L348:
	.align	2, 0
.L347:
	.word	gUnknown_020387DC
	.word	gScriptResult
.L342:
	bl	sub_80BC538
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bls	.L344	@cond_branch
	ldr	r1, .L349
	mov	r0, #0x2
	b	.L346
.L350:
	.align	2, 0
.L349:
	.word	gScriptResult
.L344:
	ldr	r1, .L351
	mov	r0, #0x0
.L346:
	strh	r0, [r1]
.L343:
	pop	{r0}
	bx	r0
.L352:
	.align	2, 0
.L351:
	.word	gScriptResult
.Lfe45:
	.size	 sub_80BC56C,.Lfe45-sub_80BC56C
	.align	2, 0
	.globl	sub_80BC5BC
	.type	 sub_80BC5BC,function
	.thumb_func
sub_80BC5BC:
	push	{lr}
	ldr	r0, .L354
	ldrb	r0, [r0]
	bl	sub_80BC14C
	ldr	r2, .L354+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r1, r1, r2
	ldr	r0, .L354+0x8
	add	r1, r1, r0
	ldrb	r3, [r1]
	lsr	r2, r3, #0x6
	mov	r0, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x6
	mov	r0, #0x3f
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x86
	lsl	r0, r0, #0x1
	bl	FlagSet
	pop	{r0}
	bx	r0
.L355:
	.align	2, 0
.L354:
	.word	gUnknown_020387DC
	.word	gSaveBlock1
	.word	0x1a09
.Lfe46:
	.size	 sub_80BC5BC,.Lfe46-sub_80BC5BC
	.align	2, 0
	.globl	SecretBasePC_Decoration
	.type	 SecretBasePC_Decoration,function
	.thumb_func
SecretBasePC_Decoration:
	push	{lr}
	ldr	r0, .L357
	mov	r1, #0x0
	bl	CreateTask
	pop	{r0}
	bx	r0
.L358:
	.align	2, 0
.L357:
	.word	Task_SecretBasePC_Decoration
.Lfe47:
	.size	 SecretBasePC_Decoration,.Lfe47-SecretBasePC_Decoration
	.align	2, 0
	.globl	SecretBasePC_Registry
	.type	 SecretBasePC_Registry,function
	.thumb_func
SecretBasePC_Registry:
	push	{lr}
	ldr	r0, .L360
	mov	r1, #0x0
	bl	CreateTask
	pop	{r0}
	bx	r0
.L361:
	.align	2, 0
.L360:
	.word	Task_SecretBasePC_Registry
.Lfe48:
	.size	 SecretBasePC_Registry,.Lfe48-SecretBasePC_Registry
	.align	2, 0
	.type	 Task_SecretBasePC_Registry,function
	.thumb_func
Task_SecretBasePC_Registry:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	ScriptContext2_Enable
	bl	sub_80F944C
	bl	LoadScrollIndicatorPalette
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L367
	add	r4, r0, r1
	bl	sub_80BC538
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L363	@cond_branch
	cmp	r1, #0x7
	ble	.L364	@cond_branch
	mov	r0, #0x7
.L364:
	strh	r0, [r4, #0x6]
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	strh	r0, [r4, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	add	r0, r5, #0
	bl	sub_80BC7D8
	ldr	r1, .L367+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L367+0x8
	str	r1, [r0]
	b	.L366
.L368:
	.align	2, 0
.L367:
	.word	gTasks+0x8
	.word	gTasks
	.word	sub_80BC824
.L363:
	ldr	r1, .L369
	ldr	r2, .L369+0x4
	add	r0, r5, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
.L366:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	gSecretBaseText_NoRegistry
	.word	sub_80BCC54
.Lfe49:
	.size	 Task_SecretBasePC_Registry,.Lfe49-Task_SecretBasePC_Registry
	.align	2, 0
	.globl	sub_80BC6B0
	.type	 sub_80BC6B0,function
	.thumb_func
sub_80BC6B0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L391
	add	r1, r1, r0
	mov	r8, r1
	mov	r4, #0x0
	mov	r6, #0x0
	mov	r5, #0x1
	mov	r2, #0x4
	ldrsh	r0, [r1, r2]
	cmp	r6, r0
	bne	.L376	@cond_branch
	mov	r4, #0x1
	b	.L373
.L392:
	.align	2, 0
.L391:
	.word	gTasks+0x8
.L376:
	add	r0, r5, #0
	bl	sub_80BC268
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L374	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L374:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x13
	bhi	.L373	@cond_branch
	mov	r1, r8
	mov	r2, #0x4
	ldrsh	r0, [r1, r2]
	cmp	r4, r0
	bne	.L376	@cond_branch
	add	r4, r5, #0
.L373:
	add	r5, r4, #0
	cmp	r5, #0x13
	bhi	.L380	@cond_branch
	ldr	r7, .L393
.L382:
	add	r0, r5, #0
	bl	sub_80BC268
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L381	@cond_branch
	add	r0, r7, #0
	add	r1, r5, #0
	bl	sub_80BC190
	lsl	r3, r6, #0x1
	add	r4, r3, #0x2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r3, r3, #0x3
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x12
	add	r1, r4, #0
	mov	r2, #0x1c
	bl	MenuFillWindowRectWithBlankTile
	add	r0, r7, #0
	mov	r1, #0x12
	add	r2, r4, #0
	bl	MenuPrint
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x8
	beq	.L380	@cond_branch
.L381:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x13
	bls	.L382	@cond_branch
.L380:
	cmp	r6, #0x7
	bhi	.L386	@cond_branch
	lsl	r3, r6, #0x1
	add	r4, r3, #0x2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r3, r3, #0x3
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x12
	add	r1, r4, #0
	mov	r2, #0x1c
	bl	MenuFillWindowRectWithBlankTile
	ldr	r0, .L393+0x4
	mov	r1, #0x12
	add	r2, r4, #0
	bl	MenuPrint
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
	cmp	r6, #0x7
	beq	.L388	@cond_branch
	lsl	r1, r6, #0x19
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	mov	r0, #0x12
	mov	r2, #0x1c
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
	b	.L388
.L394:
	.align	2, 0
.L393:
	.word	gStringVar1
	.word	gUnknownText_Exit
.L386:
	mov	r0, #0x1
	mov	r1, #0xbc
	mov	r2, #0x98
	bl	CreateVerticalScrollIndicators
.L388:
	mov	r1, r8
	mov	r2, #0x4
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L389	@cond_branch
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
	b	.L390
.L389:
	mov	r0, #0x0
	mov	r1, #0xbc
	mov	r2, #0x8
	bl	CreateVerticalScrollIndicators
.L390:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 sub_80BC6B0,.Lfe50-sub_80BC6B0
	.align	2, 0
	.type	 sub_80BC7D8,function
	.thumb_func
sub_80BC7D8:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L396
	add	r4, r4, r0
	mov	r0, #0x11
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	ldrb	r3, [r4, #0x6]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r4, #0x2]
	str	r0, [sp]
	mov	r0, #0xb
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x12
	mov	r2, #0x2
	bl	InitMenu
	add	r0, r5, #0
	bl	sub_80BC6B0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L397:
	.align	2, 0
.L396:
	.word	gTasks+0x8
.Lfe51:
	.size	 sub_80BC7D8,.Lfe51-sub_80BC7D8
	.align	2, 0
	.type	 sub_80BC824,function
	.thumb_func
sub_80BC824:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L416
	add	r4, r0, r1
	ldr	r2, .L416+0x4
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L399	@cond_branch
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L400	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L414
.L417:
	.align	2, 0
.L416:
	.word	gTasks+0x8
	.word	gMain
.L400:
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L403	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r0, [r4, #0x4]
	sub	r0, r0, #0x1
	b	.L415
.L399:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L404	@cond_branch
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	mov	r2, #0x6
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L405	@cond_branch
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	beq	.L403	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
.L415:
	strh	r0, [r4, #0x4]
	add	r0, r5, #0
	bl	sub_80BC6B0
	b	.L403
.L405:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L414:
	bl	MoveMenuCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x2]
	b	.L403
.L404:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L409	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	mov	r2, #0x4
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L410	@cond_branch
	bl	HandleDestroyMenuCursors
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	add	r0, r5, #0
	bl	sub_80BCC54
	b	.L403
.L410:
	bl	HandleDestroyMenuCursors
	ldrb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80BC948
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x8]
	add	r0, r5, #0
	bl	sub_80BC980
	b	.L403
.L409:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L403	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	HandleDestroyMenuCursors
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	add	r0, r6, #0
	bl	sub_80BCC54
.L403:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 sub_80BC824,.Lfe52-sub_80BC824
	.align	2, 0
	.type	 sub_80BC948,function
	.thumb_func
sub_80BC948:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	mov	r4, #0x1
.L422:
	add	r0, r4, #0
	bl	sub_80BC268
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L421	@cond_branch
	cmp	r6, r5
	bne	.L424	@cond_branch
	add	r0, r4, #0
	b	.L426
.L424:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L421:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x13
	bls	.L422	@cond_branch
	mov	r0, #0x0
.L426:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 sub_80BC948,.Lfe53-sub_80BC948
	.align	2, 0
	.type	 sub_80BC980,function
	.thumb_func
sub_80BC980:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	PauseVerticalScrollIndicator
	mov	r0, #0x1
	bl	PauseVerticalScrollIndicator
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x5
	bl	MenuDrawTextWindow
	ldr	r3, .L428
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x2
	bl	PrintMenuItems
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xa
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x1
	mov	r3, #0x2
	bl	InitMenu
	ldr	r1, .L428+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L428+0x8
	str	r1, [r0]
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L429:
	.align	2, 0
.L428:
	.word	gUnknown_083D13D4
	.word	gTasks
	.word	sub_80BC9E4
.Lfe54:
	.size	 sub_80BC980,.Lfe54-sub_80BC980
	.align	2, 0
	.type	 sub_80BC9E4,function
	.thumb_func
sub_80BC9E4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r5, #0
	ldr	r2, .L440
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L431	@cond_branch
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L433	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	bl	MoveMenuCursor
	b	.L433
.L441:
	.align	2, 0
.L440:
	.word	gMain
.L431:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L434	@cond_branch
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L433	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	MoveMenuCursor
	b	.L433
.L434:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L437	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L442
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x15
	add	r4, r4, #0x4
	add	r0, r0, r4
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L433
.L443:
	.align	2, 0
.L442:
	.word	gUnknown_083D13D4
.L437:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L433	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	sub_80BCBF8
.L433:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_80BC9E4,.Lfe55-sub_80BC9E4
	.align	2, 0
	.type	 sub_80BCA84,function
	.thumb_func
sub_80BCA84:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L445
	add	r4, r4, r0
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
	bl	HandleDestroyMenuCursors
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	ldr	r0, .L445+0x4
	ldrb	r1, [r4, #0x8]
	bl	sub_80BC190
	ldr	r4, .L445+0x8
	ldr	r1, .L445+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r2, .L445+0x10
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L446:
	.align	2, 0
.L445:
	.word	gTasks+0x8
	.word	gStringVar1
	.word	gStringVar4
	.word	gOtherText_OkayToDeleteFromRegistry
	.word	sub_80BCAEC
.Lfe56:
	.size	 sub_80BCA84,.Lfe56-sub_80BCA84
	.align	2, 0
	.type	 sub_80BCAEC,function
	.thumb_func
sub_80BCAEC:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x14
	mov	r1, #0x8
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r1, .L448
	add	r0, r4, #0
	bl	DoYesNoFuncWithChoice
	pop	{r4}
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	gUnknown_083D13E4
.Lfe57:
	.size	 sub_80BCAEC,.Lfe57-sub_80BCAEC
	.align	2, 0
	.globl	sub_80BCB10
	.type	 sub_80BCB10,function
	.thumb_func
sub_80BCB10:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	ldr	r7, .L453
	add	r4, r6, r7
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	ldr	r2, .L453+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r0, r0, r2
	ldr	r1, .L453+0x8
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r1, #0x3f
	and	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
	strh	r0, [r4]
	ldrh	r1, [r4, #0x4]
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L451	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x4]
.L451:
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bgt	.L452	@cond_branch
	ldrh	r0, [r4, #0x6]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x6]
.L452:
	add	r0, r5, #0
	bl	sub_80BC7D8
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L453+0xc
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L454:
	.align	2, 0
.L453:
	.word	gTasks+0x8
	.word	gSaveBlock1
	.word	0x1a09
	.word	sub_80BC824
.Lfe58:
	.size	 sub_80BCB10,.Lfe58-sub_80BCB10
	.align	2, 0
	.type	 sub_80BCB90,function
	.thumb_func
sub_80BCB90:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x14
	mov	r1, #0x8
	mov	r2, #0x1a
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldr	r1, .L456
	ldr	r2, .L456+0x4
	add	r0, r4, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	pop	{r4}
	pop	{r0}
	bx	r0
.L457:
	.align	2, 0
.L456:
	.word	gOtherText_RegisteredDataDeleted
	.word	sub_80BCB10
.Lfe59:
	.size	 sub_80BCB90,.Lfe59-sub_80BCB90
	.align	2, 0
	.type	 sub_80BCBC0,function
	.thumb_func
sub_80BCBC0:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	add	r0, r4, #0
	bl	sub_80BC7D8
	ldr	r1, .L459
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L459+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	gTasks
	.word	sub_80BC824
.Lfe60:
	.size	 sub_80BCBC0,.Lfe60-sub_80BCBC0
	.align	2, 0
	.type	 sub_80BCBF8,function
	.thumb_func
sub_80BCBF8:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L462
	add	r0, r4, r5
	ldrb	r3, [r0, #0x6]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r0, #0x2]
	str	r0, [sp]
	mov	r0, #0xb
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x12
	mov	r2, #0x2
	bl	InitMenu
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x5
	bl	MenuZeroFillWindowRect
	mov	r0, #0x0
	bl	StartVerticalScrollIndicators
	mov	r0, #0x1
	bl	StartVerticalScrollIndicators
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L462+0x4
	str	r0, [r4]
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L463:
	.align	2, 0
.L462:
	.word	gTasks+0x8
	.word	sub_80BC824
.Lfe61:
	.size	 sub_80BCBF8,.Lfe61-sub_80BCBF8
	.align	2, 0
	.type	 sub_80BCC54,function
	.thumb_func
sub_80BCC54:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L467
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	BuyMenuFreeMemory
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
	cmp	r4, #0
	bne	.L465	@cond_branch
	ldr	r0, .L467+0x4
	bl	ScriptContext1_SetupScript
	b	.L466
.L468:
	.align	2, 0
.L467:
	.word	0x4054
	.word	gUnknown_0815F399
.L465:
	ldr	r0, .L469
	bl	ScriptContext1_SetupScript
.L466:
	add	r0, r5, #0
	bl	DestroyTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L470:
	.align	2, 0
.L469:
	.word	gUnknown_0815F49A
.Lfe62:
	.size	 sub_80BCC54,.Lfe62-sub_80BCC54
	.align	2, 0
	.globl	sub_80BCCA4
	.type	 sub_80BCCA4,function
	.thumb_func
sub_80BCCA4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L472
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x5
	add	r4, r4, r1
	ldr	r1, .L472+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	mov	r1, #0x5
	bl	__umodsi3
	ldr	r1, .L472+0x8
	add	r4, r4, r1
	ldrb	r2, [r4]
	lsl	r2, r2, #0x1b
	lsr	r2, r2, #0x1f
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L473:
	.align	2, 0
.L472:
	.word	gSaveBlock1
	.word	0x1a11
	.word	0x1a09
.Lfe63:
	.size	 sub_80BCCA4,.Lfe63-sub_80BCCA4
	.align	2, 0
	.globl	sub_80BCCE8
	.type	 sub_80BCCE8,function
	.thumb_func
sub_80BCCE8:
	push	{lr}
	ldr	r0, .L485
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80BCCA4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0
	bne	.L475	@cond_branch
	ldr	r0, .L485+0x4
	b	.L484
.L486:
	.align	2, 0
.L485:
	.word	0x4054
	.word	UnknownString_81A1BB2
.L475:
	cmp	r0, #0x1
	bne	.L476	@cond_branch
	ldr	r0, .L487
	b	.L484
.L488:
	.align	2, 0
.L487:
	.word	UnknownString_81A1F67
.L476:
	cmp	r0, #0x2
	bne	.L477	@cond_branch
	ldr	r0, .L489
	b	.L484
.L490:
	.align	2, 0
.L489:
	.word	UnknownString_81A2254
.L477:
	cmp	r0, #0x3
	bne	.L478	@cond_branch
	ldr	r0, .L491
	b	.L484
.L492:
	.align	2, 0
.L491:
	.word	UnknownString_81A25C3
.L478:
	cmp	r0, #0x4
	bne	.L479	@cond_branch
	ldr	r0, .L493
	b	.L484
.L494:
	.align	2, 0
.L493:
	.word	UnknownString_81A2925
.L479:
	cmp	r0, #0x5
	bne	.L480	@cond_branch
	ldr	r0, .L495
	b	.L484
.L496:
	.align	2, 0
.L495:
	.word	UnknownString_81A1D74
.L480:
	cmp	r0, #0x6
	bne	.L481	@cond_branch
	ldr	r0, .L497
	b	.L484
.L498:
	.align	2, 0
.L497:
	.word	UnknownString_81A20C9
.L481:
	cmp	r0, #0x7
	bne	.L482	@cond_branch
	ldr	r0, .L499
	b	.L484
.L500:
	.align	2, 0
.L499:
	.word	UnknownString_81A2439
.L482:
	cmp	r1, #0x8
	beq	.L483	@cond_branch
	ldr	r0, .L501
	b	.L484
.L502:
	.align	2, 0
.L501:
	.word	UnknownString_81A2B2A
.L483:
	ldr	r0, .L503
.L484:
	pop	{r1}
	bx	r1
.L504:
	.align	2, 0
.L503:
	.word	UnknownString_81A2754
.Lfe64:
	.size	 sub_80BCCE8,.Lfe64-sub_80BCCE8
	.align	2, 0
	.globl	unref_sub_80BCD7C
	.type	 unref_sub_80BCD7C,function
	.thumb_func
unref_sub_80BCD7C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	ldr	r7, .L511
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r6, r1, #0x5
	ldr	r0, .L511+0x4
	add	r0, r0, r7
	mov	sl, r0
	ldr	r1, .L511+0x8
	add	r1, r1, r7
	mov	r9, r1
	ldr	r2, .L511+0xc
	add	r2, r2, r7
	mov	r8, r2
	ldr	r0, .L511+0x10
	mov	ip, r0
.L509:
	lsl	r4, r5, #0x2
	add	r0, r4, r6
	add	r0, r0, sl
	add	r3, r5, #0x1
	str	r3, [r0]
	lsl	r0, r5, #0x3
	add	r0, r0, r6
	add	r0, r0, r9
	strh	r3, [r0]
	lsl	r1, r5, #0x1
	add	r1, r1, r6
	mov	r2, r8
	add	r0, r1, r2
	mov	r2, ip
	strh	r2, [r0]
	ldr	r2, .L511+0x14
	add	r0, r7, r2
	add	r1, r1, r0
	strh	r3, [r1]
	add	r2, r5, r6
	ldr	r1, .L511+0x18
	add	r0, r7, r1
	add	r0, r2, r0
	add	r1, r5, #0x5
	strb	r1, [r0]
	ldr	r1, .L511+0x1c
	add	r0, r7, r1
	add	r2, r2, r0
	add	r4, r4, r5
	strb	r4, [r2]
	lsl	r3, r3, #0x10
	lsr	r5, r3, #0x10
	cmp	r5, #0
	beq	.L509	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	gSaveBlock1
	.word	0x1a3c
	.word	0x1a54
	.word	0x1a84
	.word	0x115
	.word	0x1a90
	.word	0x1a9c
	.word	0x1aa2
.Lfe65:
	.size	 unref_sub_80BCD7C,.Lfe65-unref_sub_80BCD7C
	.align	2, 0
	.globl	sub_80BCE1C
	.type	 sub_80BCE1C,function
	.thumb_func
sub_80BCE1C:
	push	{r4, lr}
	ldr	r0, .L514
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x1
	bl	sub_810FB10
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x5
	ldr	r1, .L514+0x4
	add	r0, r0, r1
	bl	CreateSecretBaseEnemyParty
	pop	{r4}
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	0x4054
	.word	gSaveBlock1+0x1a08
.Lfe66:
	.size	 sub_80BCE1C,.Lfe66-sub_80BCE1C
	.align	2, 0
	.globl	sub_80BCE4C
	.type	 sub_80BCE4C,function
	.thumb_func
sub_80BCE4C:
	push	{lr}
	ldr	r0, .L517
	bl	VarGet
	ldr	r2, .L517+0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r1, r1, r2
	ldr	r0, .L517+0x8
	ldrb	r0, [r0]
	ldr	r2, .L517+0xc
	add	r1, r1, r2
	mov	r2, #0x1
	and	r2, r2, r0
	lsl	r2, r2, #0x5
	ldrb	r3, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	0x4054
	.word	gSaveBlock1
	.word	gScriptResult
	.word	0x1a09
.Lfe67:
	.size	 sub_80BCE4C,.Lfe67-sub_80BCE4C
	.align	2, 0
	.globl	sub_80BCE90
	.type	 sub_80BCE90,function
	.thumb_func
sub_80BCE90:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L526
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L526+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L520	@cond_branch
	mov	r3, #0x0
	ldr	r7, .L526+0x8
	ldr	r4, .L526+0xc
	mov	r6, #0x21
	neg	r6, r6
.L524:
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x5
	add	r1, r1, r7
	add	r1, r1, r4
	ldrb	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x13
	bls	.L524	@cond_branch
	ldr	r0, .L526+0x4
	bl	FlagSet
.L520:
	ldr	r4, .L526+0x10
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80BCCA4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldr	r2, .L526+0x14
	ldr	r1, .L526+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	add	r0, r0, r1
	ldr	r1, .L526+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1f
	strh	r0, [r2]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L527:
	.align	2, 0
.L526:
	.word	0x4054
	.word	0x8c2
	.word	gSaveBlock1
	.word	0x1a09
	.word	gSpecialVar_0x8004
	.word	gScriptResult
.Lfe68:
	.size	 sub_80BCE90,.Lfe68-sub_80BCE90
	.align	2, 0
	.globl	sub_80BCF1C
	.type	 sub_80BCF1C,function
	.thumb_func
sub_80BCF1C:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L547
	add	r4, r1, r0
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L531	@cond_branch
	cmp	r0, #0x1
	bgt	.L545	@cond_branch
	cmp	r0, #0
	beq	.L530	@cond_branch
	b	.L529
.L548:
	.align	2, 0
.L547:
	.word	gTasks+0x8
.L545:
	cmp	r0, #0x2
	beq	.L541	@cond_branch
	b	.L529
.L530:
	add	r0, r4, #0x4
	add	r1, r4, #0x6
	bl	PlayerGetDestCoords
	b	.L546
.L531:
	mov	r5, sp
	add	r5, r5, #0x2
	mov	r0, sp
	add	r1, r5, #0
	bl	PlayerGetDestCoords
	mov	r0, sp
	ldrh	r2, [r0]
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bne	.L533	@cond_branch
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	mov	r3, #0x6
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	beq	.L529	@cond_branch
.L533:
	strh	r2, [r4, #0x4]
	ldrh	r0, [r5]
	strh	r0, [r4, #0x6]
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	sub_8057350
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L534	@cond_branch
	bl	DoYellowCave4Sparkle
	b	.L529
.L534:
	add	r0, r4, #0
	bl	sub_8057314
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L536	@cond_branch
	mov	r0, sp
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, sp
	mov	r3, #0x0
	ldrsh	r1, [r1, r3]
	mov	r3, #0x0
	ldrsh	r2, [r5, r3]
	bl	sub_80C68A4
	b	.L529
.L536:
	add	r0, r4, #0
	bl	sub_8057328
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L538	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	bl	sub_80C6A54
	b	.L529
.L538:
	add	r0, r4, #0
	bl	sub_805733C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L529	@cond_branch
	mov	r0, sp
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	DoDecorationSoundEffect
	b	.L529
.L541:
	ldrb	r0, [r4, #0x8]
	bl	FieldEffectActiveListContains
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L529	@cond_branch
.L546:
	mov	r0, #0x1
	strh	r0, [r4, #0x2]
.L529:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 sub_80BCF1C,.Lfe69-sub_80BCF1C
	.align	2, 0
	.globl	sub_80BD034
	.type	 sub_80BD034,function
	.thumb_func
sub_80BD034:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L550
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x5
	add	r4, r4, r2
	ldr	r2, .L550+0x4
	add	r0, r4, r2
	mov	r2, #0xa0
	bl	memcpy
	ldr	r0, .L550+0x8
	add	r4, r4, r0
	ldrb	r1, [r4]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L551:
	.align	2, 0
.L550:
	.word	gSaveBlock1
	.word	0x1a08
	.word	0x1a09
.Lfe70:
	.size	 sub_80BD034,.Lfe70-sub_80BD034
	.align	2, 0
	.globl	sub_80BD070
	.type	 sub_80BD070,function
	.thumb_func
sub_80BD070:
	push	{r4, lr}
	mov	r2, #0x0
	add	r4, r0, #0
	add	r4, r4, #0x9
	add	r3, r1, #0
	add	r3, r3, #0x9
.L556:
	add	r0, r4, r2
	add	r1, r3, r2
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L555	@cond_branch
	mov	r0, #0x0
	b	.L559
.L555:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L556	@cond_branch
	mov	r0, #0x1
.L559:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 sub_80BD070,.Lfe71-sub_80BD070
	.align	2, 0
	.globl	sub_80BD0A0
	.type	 sub_80BD0A0,function
	.thumb_func
sub_80BD0A0:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	mov	r3, #0x0
	ldrb	r0, [r6, #0x2]
	cmp	r0, #0xff
	bne	.L564	@cond_branch
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0xff
	beq	.L562	@cond_branch
.L564:
	add	r2, r6, #0x2
	add	r0, r2, r3
	add	r4, r5, #0x2
	add	r1, r4, r3
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L563	@cond_branch
	mov	r0, #0x0
	b	.L568
.L563:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x6
	bhi	.L562	@cond_branch
	add	r0, r2, r3
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L564	@cond_branch
	add	r0, r4, r3
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L564	@cond_branch
.L562:
	mov	r0, #0x1
.L568:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe72:
	.size	 sub_80BD0A0,.Lfe72-sub_80BD0A0
	.align	2, 0
	.globl	sub_80BD0EC
	.type	 sub_80BD0EC,function
	.thumb_func
sub_80BD0EC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r2, [r4, #0x1]
	mov	r0, #0x10
	add	r1, r0, #0
	and	r1, r1, r2
	ldrb	r2, [r5, #0x1]
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L570	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80BD070
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L570	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80BD0A0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L570	@cond_branch
	mov	r0, #0x1
	b	.L571
.L570:
	mov	r0, #0x0
.L571:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 sub_80BD0EC,.Lfe73-sub_80BD0EC
	.align	2, 0
	.globl	sub_80BD12C
	.type	 sub_80BD12C,function
	.thumb_func
sub_80BD12C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r4, .L580
	ldr	r3, .L580+0x4
.L576:
	lsl	r0, r1, #0x10
	asr	r1, r0, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r0, r0, r4
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L575	@cond_branch
	add	r0, r1, #0
	b	.L579
.L581:
	.align	2, 0
.L580:
	.word	gSaveBlock1
	.word	0x1a08
.L575:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L576	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L579:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 sub_80BD12C,.Lfe74-sub_80BD12C
	.align	2, 0
	.globl	sub_80BD170
	.type	 sub_80BD170,function
	.thumb_func
sub_80BD170:
	push	{r4, lr}
	mov	r2, #0x1
	ldr	r4, .L590
	ldr	r3, .L590+0x4
.L586:
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r0, r0, r4
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L585	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	b	.L589
.L591:
	.align	2, 0
.L590:
	.word	gSaveBlock1
	.word	0x1a08
.L585:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L586	@cond_branch
	mov	r0, #0x0
.L589:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 sub_80BD170,.Lfe75-sub_80BD170
	.align	2, 0
	.globl	sub_80BD1B0
	.type	 sub_80BD1B0,function
	.thumb_func
sub_80BD1B0:
	push	{r4, lr}
	mov	r3, #0x1
	ldr	r4, .L600
.L596:
	lsl	r2, r3, #0x10
	asr	r1, r2, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	add	r0, r0, r4
	ldr	r1, .L600+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsr	r0, r1, #0x6
	cmp	r0, #0
	bne	.L595	@cond_branch
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L595	@cond_branch
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	b	.L599
.L601:
	.align	2, 0
.L600:
	.word	gSaveBlock1
	.word	0x1a09
.L595:
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r2, r1
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L596	@cond_branch
	mov	r0, #0x0
.L599:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 sub_80BD1B0,.Lfe76-sub_80BD1B0
	.align	2, 0
	.globl	sub_80BD1FC
	.type	 sub_80BD1FC,function
	.thumb_func
sub_80BD1FC:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L604	@cond_branch
	ldrb	r0, [r5]
	bl	sub_80BD12C
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	beq	.L604	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	beq	.L605	@cond_branch
	ldr	r0, .L614
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	add	r1, r1, r0
	ldr	r0, .L614+0x4
	add	r1, r1, r0
	ldrb	r1, [r1]
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1c
	cmp	r0, #0x1
	beq	.L604	@cond_branch
	lsr	r0, r1, #0x6
	cmp	r0, #0x2
	bne	.L608	@cond_branch
	ldrb	r1, [r5, #0x1]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L604	@cond_branch
.L608:
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	b	.L613
.L615:
	.align	2, 0
.L614:
	.word	gSaveBlock1
	.word	0x1a09
.L605:
	bl	sub_80BD170
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L613	@cond_branch
	bl	sub_80BD1B0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L604	@cond_branch
.L613:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80BD034
	add	r0, r4, #0
	b	.L612
.L604:
	mov	r0, #0x0
.L612:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 sub_80BD1FC,.Lfe77-sub_80BD1FC
	.align	2, 0
	.globl	sub_80BD280
	.type	 sub_80BD280,function
	.thumb_func
sub_80BD280:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xffffff60
	ldr	r0, .L630
	mov	r8, r0
	mov	r2, #0x1
.L620:
	add	r1, r2, #0x1
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	mov	r9, r1
	cmp	r5, #0x13
	bhi	.L619	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x5
	mov	r1, r8
	add	r6, r0, r1
	mov	r7, #0xc0
.L624:
	ldrb	r0, [r6, #0x1]
	add	r3, r7, #0
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L627	@cond_branch
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x5
	add	r0, r0, r8
	ldrb	r1, [r0, #0x1]
	add	r0, r7, #0
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0x40
	beq	.L626	@cond_branch
.L627:
	cmp	r3, #0x80
	bne	.L623	@cond_branch
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x5
	add	r0, r0, r8
	ldrb	r1, [r0, #0x1]
	add	r0, r7, #0
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0x80
	beq	.L623	@cond_branch
.L626:
	mov	r0, sp
	add	r1, r6, #0
	mov	r2, #0xa0
	bl	memcpy
	add	r4, r4, r5
	lsl	r4, r4, #0x5
	add	r4, r4, r8
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, #0xa0
	bl	memcpy
	add	r0, r4, #0
	mov	r1, sp
	mov	r2, #0xa0
	bl	memcpy
.L623:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x13
	bls	.L624	@cond_branch
.L619:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x12
	bls	.L620	@cond_branch
	add	sp, sp, #0xa0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	gSaveBlock1+0x1a08
.Lfe78:
	.size	 sub_80BD280,.Lfe78-sub_80BD280
	.align	2, 0
	.globl	sub_80BD328
	.type	 sub_80BD328,function
	.thumb_func
sub_80BD328:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r4, #0x1
.L636:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x5
	add	r1, r0, r6
	ldrb	r0, [r1, #0x1]
	lsr	r0, r0, #0x6
	cmp	r0, r5
	bne	.L635	@cond_branch
	add	r0, r1, #0
	bl	sub_80BD1FC
.L635:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x13
	bls	.L636	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 sub_80BD328,.Lfe79-sub_80BD328
	.align	2, 0
	.globl	sub_80BD358
	.type	 sub_80BD358,function
	.thumb_func
sub_80BD358:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L658	@cond_branch
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0x1b
	ldr	r1, .L660
	lsr	r0, r0, #0x1f
	add	r4, r1, #0
	ldrb	r1, [r4, #0x8]
	cmp	r0, r1
	beq	.L641	@cond_branch
.L657:
.L658:
	mov	r0, #0x0
	b	.L655
.L661:
	.align	2, 0
.L660:
	.word	gSaveBlock2
.L641:
	mov	r2, #0x0
	add	r3, r5, #0
	add	r3, r3, #0x9
	add	r6, r4, #0
	add	r6, r6, #0xa
.L645:
	add	r0, r3, r2
	add	r1, r2, r6
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L657	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L645	@cond_branch
	mov	r2, #0x0
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0xff
	bne	.L651	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L649	@cond_branch
.L651:
	add	r3, r5, #0x2
	add	r0, r3, r2
	add	r1, r2, r4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L658	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x6
	bhi	.L649	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L651	@cond_branch
	add	r0, r2, r4
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L651	@cond_branch
.L649:
	mov	r0, #0x1
.L655:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 sub_80BD358,.Lfe80-sub_80BD358
	.align	2, 0
	.globl	sub_80BD3DC
	.type	 sub_80BD3DC,function
	.thumb_func
sub_80BD3DC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	mov	r9, r1
	mov	r8, r2
	mov	r5, #0x0
	mov	r6, #0x0
.L666:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L667	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x5
	mov	r1, sl
	add	r4, r1, r0
	add	r0, r4, #0
	bl	sub_80BD358
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L667	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	mov	r0, #0x1
	orr	r5, r5, r0
.L667:
	mov	r7, #0x2
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L669	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x5
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	bl	sub_80BD358
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L669	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	orr	r5, r5, r7
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
.L669:
	mov	r7, #0x4
	mov	r0, #0x4
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L671	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	bl	sub_80BD358
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L671	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	orr	r5, r5, r7
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
.L671:
	cmp	r5, #0x7
	beq	.L664	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x13
	bls	.L666	@cond_branch
.L664:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 sub_80BD3DC,.Lfe81-sub_80BD3DC
	.align	2, 0
	.globl	sub_80BD494
	.type	 sub_80BD494,function
	.thumb_func
sub_80BD494:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r5, #0x0
.L679:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	mov	r1, r8
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L678	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	bl	sub_80BD0EC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L678	@cond_branch
	cmp	r7, #0
	bne	.L682	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	b	.L686
.L682:
	ldrh	r0, [r6, #0xe]
	ldrh	r3, [r4, #0xe]
	cmp	r0, r3
	bls	.L683	@cond_branch
	add	r0, r4, #0
	bl	ClearSecretBase
	b	.L686
.L683:
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	ldrb	r1, [r4, #0x1]
	mov	r3, #0x10
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	add	r0, r6, #0
	bl	ClearSecretBase
	mov	r0, #0x1
	b	.L685
.L678:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x13
	bls	.L679	@cond_branch
.L686:
	mov	r0, #0x0
.L685:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 sub_80BD494,.Lfe82-sub_80BD494
	.align	2, 0
	.globl	sub_80BD514
	.type	 sub_80BD514,function
	.thumb_func
sub_80BD514:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	add	r7, r1, #0
	mov	r8, r2
	add	r6, r3, #0
	mov	r5, #0x1
.L691:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	mov	r1, r9
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L690	@cond_branch
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L693	@cond_branch
	mov	r2, #0x10
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
.L693:
	add	r0, r4, #0
	add	r1, r7, #0
	add	r2, r5, #0
	bl	sub_80BD494
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L690	@cond_branch
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r5, #0
	bl	sub_80BD494
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L690	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	sub_80BD494
.L690:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x13
	bls	.L691	@cond_branch
	mov	r5, #0x0
.L700:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	add	r4, r0, r7
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L699	@cond_branch
	ldrb	r0, [r4, #0x1]
	mov	r2, #0x21
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	add	r0, r4, #0
	mov	r1, r8
	add	r2, r5, #0
	bl	sub_80BD494
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L699	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	sub_80BD494
.L699:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x13
	bls	.L700	@cond_branch
	mov	r5, #0x0
	mov	r0, #0x21
	neg	r0, r0
	add	r7, r0, #0
.L707:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r4, r0, #0x5
	mov	r2, r8
	add	r1, r4, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L708	@cond_branch
	ldrb	r0, [r1, #0x1]
	and	r0, r0, r7
	strb	r0, [r1, #0x1]
	add	r0, r1, #0
	add	r1, r6, #0
	add	r2, r5, #0
	bl	sub_80BD494
.L708:
	add	r1, r4, r6
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L706	@cond_branch
	ldrb	r0, [r1, #0x1]
	and	r0, r0, r7
	strb	r0, [r1, #0x1]
.L706:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x13
	bls	.L707	@cond_branch
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 sub_80BD514,.Lfe83-sub_80BD514
	.align	2, 0
	.globl	sub_80BD610
	.type	 sub_80BD610,function
	.thumb_func
sub_80BD610:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	bl	sub_80BD3DC
	ldr	r0, .L712
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	sub_80BD514
	add	r0, r4, #0
	bl	sub_80BD1FC
	add	r0, r5, #0
	bl	sub_80BD1FC
	add	r0, r6, #0
	bl	sub_80BD1FC
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_80BD328
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_80BD328
	add	r0, r6, #0
	mov	r1, #0x1
	bl	sub_80BD328
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_80BD328
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_80BD328
	add	r0, r6, #0
	mov	r1, #0x0
	bl	sub_80BD328
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L713:
	.align	2, 0
.L712:
	.word	gSaveBlock1+0x1a08
.Lfe84:
	.size	 sub_80BD610,.Lfe84-sub_80BD610
	.align	2, 0
	.globl	sub_80BD674
	.type	 sub_80BD674,function
	.thumb_func
sub_80BD674:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r0, #0x60
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB5975
	b	.L715	@long jump
.LCB5975:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	beq	.L717	@cond_branch
	cmp	r0, #0x3
	beq	.L718	@cond_branch
	b	.L716
.L717:
	lsl	r4, r5, #0x1
	add	r0, r6, r4
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
	add	r4, r4, r5
	add	r4, r6, r4
	add	r0, r4, #0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
	b	.L716
.L718:
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	add	r0, r6, r0
	mov	r1, #0x0
	add	r2, r5, #0
	bl	memset
.L716:
	cmp	r7, #0x1
	beq	.L723	@cond_branch
	cmp	r7, #0x1
	bgt	.L728	@cond_branch
	cmp	r7, #0
	beq	.L722	@cond_branch
	b	.L721
.L728:
	cmp	r7, #0x2
	beq	.L724	@cond_branch
	cmp	r7, #0x3
	beq	.L725	@cond_branch
	b	.L721
.L722:
	add	r0, r6, r5
	lsl	r2, r5, #0x1
	add	r1, r6, r2
	add	r2, r2, r5
	add	r2, r6, r2
	bl	sub_80BD610
	b	.L721
.L723:
	lsl	r1, r5, #0x1
	add	r0, r6, r1
	add	r1, r1, r5
	add	r1, r6, r1
	add	r2, r6, #0
	bl	sub_80BD610
	b	.L721
.L724:
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	add	r0, r6, r0
	add	r2, r6, r5
	add	r1, r6, #0
	bl	sub_80BD610
	b	.L721
.L725:
	add	r1, r6, r5
	lsl	r2, r5, #0x1
	add	r2, r6, r2
	add	r0, r6, #0
	bl	sub_80BD610
.L721:
	mov	r3, #0x1
	ldr	r6, .L742
	mov	r5, #0x10
	neg	r5, r5
	ldr	r4, .L742+0x4
.L732:
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x5
	add	r0, r0, r6
	add	r2, r0, r4
	ldrb	r1, [r2]
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1c
	cmp	r0, #0x1
	bne	.L731	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	and	r0, r0, r5
	strb	r0, [r2]
.L731:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x13
	bls	.L732	@cond_branch
	bl	sub_80BD280
	mov	r3, #0x1
	ldr	r4, .L742
	ldr	r6, .L742+0x4
	add	r7, r4, #0
	mov	r5, #0x3f
.L738:
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x5
	add	r0, r0, r4
	add	r2, r0, r6
	ldrb	r1, [r2]
	lsr	r0, r1, #0x6
	cmp	r0, #0x2
	bne	.L737	@cond_branch
	add	r0, r5, #0
	and	r0, r0, r1
	strb	r0, [r2]
.L737:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x13
	bls	.L738	@cond_branch
	ldr	r0, .L742+0x8
	add	r2, r7, r0
	ldrh	r1, [r2]
	ldr	r0, .L742+0xc
	cmp	r1, r0
	beq	.L715	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r2]
.L715:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L743:
	.align	2, 0
.L742:
	.word	gSaveBlock1
	.word	0x1a09
	.word	0x1a16
	.word	0xffff
.Lfe85:
	.size	 sub_80BD674,.Lfe85-sub_80BD674
.text
	.align	2, 0
