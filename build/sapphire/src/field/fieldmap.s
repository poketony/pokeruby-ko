@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 gUnknown_02029828,object
	.size	 gUnknown_02029828,20480
gUnknown_02029828:
	.short	0x0
	.space	20478
	.globl	gMapHeader
	.align	2, 0
	.type	 gMapHeader,object
	.size	 gMapHeader,28
gMapHeader:
	.word	0x0
	.space	24
	.globl	gCamera
	.align	2, 0
	.type	 gCamera,object
	.size	 gCamera,12
gCamera:
	.byte	0x0
	.space	11
	.align	2, 0
	.type	 gUnknown_0202E850,object
	.size	 gUnknown_0202E850,4
gUnknown_0202E850:
	.byte	0x0
	.space	3
	.section .rodata
	.align	2, 0
	.type	 sDummyConnectionFlags,object
	.size	 sDummyConnectionFlags,4
sDummyConnectionFlags:
	.byte	0x0
	.space	3
.text
	.align	2, 0
	.globl	mapconnection_get_mapheader
	.type	 mapconnection_get_mapheader,function
	.thumb_func
mapconnection_get_mapheader:
	push	{lr}
	ldrb	r2, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	add	r0, r2, #0
	bl	Overworld_GetMapHeaderByGroupAndId
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 mapconnection_get_mapheader,.Lfe1-mapconnection_get_mapheader
	.align	2, 0
	.globl	not_trainer_hill_battle_pyramid
	.type	 not_trainer_hill_battle_pyramid,function
	.thumb_func
not_trainer_hill_battle_pyramid:
	push	{r4, lr}
	ldr	r4, .L4
	add	r0, r4, #0
	bl	mapheader_copy_mapdata_with_padding
	ldr	r0, [r4, #0x4]
	bl	sub_80BB970
	bl	mapheader_run_script_with_tag_x1
	pop	{r4}
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	gMapHeader
.Lfe2:
	.size	 not_trainer_hill_battle_pyramid,.Lfe2-not_trainer_hill_battle_pyramid
	.align	2, 0
	.globl	sub_8055FC0
	.type	 sub_8055FC0,function
	.thumb_func
sub_8055FC0:
	push	{r4, lr}
	ldr	r4, .L7
	add	r0, r4, #0
	bl	mapheader_copy_mapdata_with_padding
	mov	r0, #0x0
	bl	sub_80BBCCC
	ldr	r0, [r4, #0x4]
	bl	sub_80BB970
	bl	sub_8056670
	bl	mapheader_run_script_with_tag_x1
	ldr	r1, .L7+0x4
	ldr	r0, [r1]
	ldr	r1, [r1, #0x4]
	bl	UpdateTVScreensOnMap
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gMapHeader
	.word	gUnknown_03004870
.Lfe3:
	.size	 sub_8055FC0,.Lfe3-sub_8055FC0
	.align	2, 0
	.globl	mapheader_copy_mapdata_with_padding
	.type	 mapheader_copy_mapdata_with_padding,function
	.thumb_func
mapheader_copy_mapdata_with_padding:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	ldr	r5, [r6]
	ldr	r0, .L11
	str	r0, [sp]
	ldr	r4, .L11+0x4
	ldr	r2, .L11+0x8
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuFastSet
	ldr	r2, .L11+0xc
	str	r4, [r2, #0x8]
	ldr	r1, [r5]
	add	r1, r1, #0xf
	str	r1, [r2]
	ldr	r0, [r5, #0x4]
	add	r0, r0, #0xe
	str	r0, [r2, #0x4]
	mul	r1, r1, r0
	mov	r0, #0xa0
	lsl	r0, r0, #0x6
	cmp	r1, r0
	bgt	.L10	@cond_branch
	ldr	r0, [r5, #0xc]
	ldrh	r1, [r5]
	ldrh	r2, [r5, #0x4]
	bl	map_copy_with_padding
	add	r0, r6, #0
	bl	sub_80560AC
.L10:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	0x3ff03ff
	.word	gUnknown_02029828
	.word	0x1001400
	.word	gUnknown_03004870
.Lfe4:
	.size	 mapheader_copy_mapdata_with_padding,.Lfe4-mapheader_copy_mapdata_with_padding
	.align	2, 0
	.globl	map_copy_with_padding
	.type	 map_copy_with_padding,function
	.thumb_func
map_copy_with_padding:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L19
	ldr	r4, [r0, #0x8]
	ldr	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, #0xe
	add	r4, r4, r0
	cmp	r2, #0
	beq	.L15	@cond_branch
	mov	r0, r8
	lsl	r6, r0, #0x1
	add	r5, r2, #0
	mov	r0, #0x1e
	add	r0, r0, r6
	mov	r9, r0
.L17:
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, r8
	bl	CpuSet
	add	r4, r4, r9
	add	r7, r7, r6
	sub	r5, r5, #0x1
	cmp	r5, #0
	bne	.L17	@cond_branch
.L15:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gUnknown_03004870
.Lfe5:
	.size	 map_copy_with_padding,.Lfe5-map_copy_with_padding
	.align	2, 0
	.globl	sub_80560AC
	.type	 sub_80560AC,function
	.thumb_func
sub_80560AC:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r0, [r6, #0xc]
	ldr	r1, [r0]
	ldr	r5, [r0, #0x4]
	ldr	r2, .L36
	ldr	r0, .L36+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	cmp	r1, #0
	ble	.L23	@cond_branch
	add	r4, r2, #0
	add	r7, r1, #0
.L25:
	add	r0, r5, #0
	bl	mapconnection_get_mapheader
	add	r1, r0, #0
	ldr	r2, [r5, #0x4]
	ldrb	r0, [r5]
	cmp	r0, #0x2
	beq	.L28	@cond_branch
	cmp	r0, #0x2
	bgt	.L33	@cond_branch
	cmp	r0, #0x1
	beq	.L27	@cond_branch
	b	.L24
.L37:
	.align	2, 0
.L36:
	.word	gUnknown_0202E850
	.word	sDummyConnectionFlags
.L33:
	cmp	r0, #0x3
	beq	.L29	@cond_branch
	cmp	r0, #0x4
	beq	.L30	@cond_branch
	b	.L24
.L27:
	add	r0, r6, #0
	bl	fillSouthConnection
	ldrb	r0, [r4]
	mov	r1, #0x1
	b	.L35
.L28:
	add	r0, r6, #0
	bl	fillNorthConnection
	ldrb	r0, [r4]
	mov	r1, #0x2
	b	.L35
.L29:
	add	r0, r6, #0
	bl	fillWestConnection
	ldrb	r0, [r4]
	mov	r1, #0x4
	b	.L35
.L30:
	add	r0, r6, #0
	bl	fillEastConnection
	ldrb	r0, [r4]
	mov	r1, #0x8
.L35:
	orr	r0, r0, r1
	strb	r0, [r4]
.L24:
	sub	r7, r7, #0x1
	add	r5, r5, #0xc
	cmp	r7, #0
	bne	.L25	@cond_branch
.L23:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_80560AC,.Lfe6-sub_80560AC
	.align	2, 0
	.globl	sub_8056134
	.type	 sub_8056134,function
	.thumb_func
sub_8056134:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r5, [sp, #0x18]
	ldr	r4, [r2]
	ldr	r7, [r4]
	mov	r2, r7
	mul	r2, r2, r5
	add	r2, r2, r3
	lsl	r2, r2, #0x1
	ldr	r3, [r4, #0xc]
	add	r6, r3, r2
	ldr	r3, .L44
	ldr	r2, [r3]
	mul	r1, r1, r2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldr	r0, [r3, #0x8]
	add	r5, r0, r1
	ldr	r0, [sp, #0x20]
	cmp	r0, #0
	ble	.L40	@cond_branch
	add	r4, r0, #0
	ldr	r3, .L44+0x4
	mov	r8, r3
.L42:
	add	r0, r6, #0
	add	r1, r5, #0
	ldr	r2, [sp, #0x1c]
	mov	r3, r8
	and	r2, r2, r3
	bl	CpuSet
	ldr	r0, .L44
	ldr	r0, [r0]
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	lsl	r0, r7, #0x1
	add	r6, r6, r0
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L42	@cond_branch
.L40:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	gUnknown_03004870
	.word	0x1fffff
.Lfe7:
	.size	 sub_8056134,.Lfe7-sub_8056134
	.align	2, 0
	.globl	fillSouthConnection
	.type	 fillSouthConnection,function
	.thumb_func
fillSouthConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff4
	add	r3, r0, #0
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L47	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0]
	add	r2, r2, #0x7
	ldr	r0, [r3]
	ldr	r0, [r0, #0x4]
	add	r7, r0, #0x7
	cmp	r2, #0
	bge	.L48	@cond_branch
	neg	r6, r2
	add	r2, r2, r4
	ldr	r0, .L54
	ldr	r3, [r0]
	cmp	r2, r3
	bge	.L49	@cond_branch
	add	r3, r2, #0
.L49:
	mov	r2, #0x0
	b	.L51
.L55:
	.align	2, 0
.L54:
	.word	gUnknown_03004870
.L48:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L56
	ldr	r1, [r1]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L51	@cond_branch
	add	r3, r4, #0
.L51:
	mov	r0, #0x0
	str	r0, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	add	r0, r2, #0
	add	r1, r7, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	sub_8056134
.L47:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gUnknown_03004870
.Lfe8:
	.size	 fillSouthConnection,.Lfe8-fillSouthConnection
	.align	2, 0
	.globl	fillNorthConnection
	.type	 fillNorthConnection,function
	.thumb_func
fillNorthConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff4
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L59	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0]
	ldr	r0, [r0, #0x4]
	add	r2, r2, #0x7
	sub	r7, r0, #0x7
	cmp	r2, #0
	bge	.L60	@cond_branch
	neg	r6, r2
	add	r2, r2, r4
	ldr	r0, .L66
	ldr	r3, [r0]
	cmp	r2, r3
	bge	.L61	@cond_branch
	add	r3, r2, #0
.L61:
	mov	r2, #0x0
	b	.L63
.L67:
	.align	2, 0
.L66:
	.word	gUnknown_03004870
.L60:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L68
	ldr	r1, [r1]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L63	@cond_branch
	add	r3, r4, #0
.L63:
	str	r7, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0x7
	str	r0, [sp, #0x8]
	add	r0, r2, #0
	mov	r1, #0x0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	sub_8056134
.L59:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	gUnknown_03004870
.Lfe9:
	.size	 fillNorthConnection,.Lfe9-fillNorthConnection
	.align	2, 0
	.globl	fillWestConnection
	.type	 fillWestConnection,function
	.thumb_func
fillWestConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff4
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L71	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0]
	ldr	r4, [r0, #0x4]
	add	r2, r2, #0x7
	sub	r7, r1, #0x7
	cmp	r2, #0
	bge	.L72	@cond_branch
	neg	r6, r2
	add	r1, r2, r4
	ldr	r0, .L78
	ldr	r3, [r0, #0x4]
	cmp	r1, r3
	bge	.L73	@cond_branch
	add	r3, r1, #0
.L73:
	mov	r2, #0x0
	b	.L75
.L79:
	.align	2, 0
.L78:
	.word	gUnknown_03004870
.L72:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L80
	ldr	r1, [r1, #0x4]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L75	@cond_branch
	add	r3, r4, #0
.L75:
	str	r6, [sp]
	mov	r0, #0x7
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
	mov	r0, #0x0
	add	r1, r2, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	sub_8056134
.L71:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gUnknown_03004870
.Lfe10:
	.size	 fillWestConnection,.Lfe10-fillWestConnection
	.align	2, 0
	.globl	fillEastConnection
	.type	 fillEastConnection,function
	.thumb_func
fillEastConnection:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff4
	add	r3, r0, #0
	add	r5, r1, #0
	cmp	r5, #0
	beq	.L83	@cond_branch
	ldr	r0, [r5]
	ldr	r4, [r0, #0x4]
	ldr	r0, [r3]
	ldr	r0, [r0]
	add	r7, r0, #0x7
	add	r2, r2, #0x7
	cmp	r2, #0
	bge	.L84	@cond_branch
	neg	r6, r2
	add	r1, r2, r4
	ldr	r0, .L90
	ldr	r3, [r0, #0x4]
	cmp	r1, r3
	bge	.L85	@cond_branch
	add	r3, r1, #0
.L85:
	mov	r2, #0x0
	b	.L87
.L91:
	.align	2, 0
.L90:
	.word	gUnknown_03004870
.L84:
	mov	r6, #0x0
	add	r0, r2, r4
	ldr	r1, .L92
	ldr	r1, [r1, #0x4]
	sub	r3, r1, r2
	cmp	r0, r1
	bge	.L87	@cond_branch
	add	r3, r4, #0
.L87:
	str	r6, [sp]
	mov	r0, #0x8
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
	add	r0, r7, #0
	add	r1, r2, #0
	add	r2, r5, #0
	mov	r3, #0x0
	bl	sub_8056134
.L83:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gUnknown_03004870
.Lfe11:
	.size	 fillEastConnection,.Lfe11-fillEastConnection
	.align	2, 0
	.globl	MapGridGetZCoordAt
	.type	 MapGridGetZCoordAt,function
	.thumb_func
MapGridGetZCoordAt:
	push	{r4, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	cmp	r2, #0
	blt	.L95	@cond_branch
	ldr	r1, .L99
	ldr	r3, [r1]
	cmp	r2, r3
	bge	.L95	@cond_branch
	cmp	r4, #0
	blt	.L95	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r4, r0
	bge	.L95	@cond_branch
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r2, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L96
.L100:
	.align	2, 0
.L99:
	.word	gUnknown_03004870
.L95:
	ldr	r0, .L101
	ldr	r3, [r0]
	add	r1, r2, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r4, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r1, r1, r0
.L96:
	ldr	r0, .L101+0x4
	cmp	r1, r0
	beq	.L97	@cond_branch
	lsr	r0, r1, #0xc
	b	.L98
.L102:
	.align	2, 0
.L101:
	.word	gMapHeader
	.word	0x3ff
.L97:
	mov	r0, #0x0
.L98:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 MapGridGetZCoordAt,.Lfe12-MapGridGetZCoordAt
	.align	2, 0
	.globl	MapGridIsImpassableAt
	.type	 MapGridIsImpassableAt,function
	.thumb_func
MapGridIsImpassableAt:
	push	{r4, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	cmp	r2, #0
	blt	.L104	@cond_branch
	ldr	r1, .L108
	ldr	r3, [r1]
	cmp	r2, r3
	bge	.L104	@cond_branch
	cmp	r4, #0
	blt	.L104	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r4, r0
	bge	.L104	@cond_branch
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r2, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L105
.L109:
	.align	2, 0
.L108:
	.word	gUnknown_03004870
.L104:
	ldr	r0, .L110
	ldr	r3, [r0]
	add	r1, r2, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r4, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r1, r1, r0
.L105:
	ldr	r0, .L110+0x4
	cmp	r1, r0
	beq	.L106	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	and	r1, r1, r0
	lsr	r0, r1, #0xa
	b	.L107
.L111:
	.align	2, 0
.L110:
	.word	gMapHeader
	.word	0x3ff
.L106:
	mov	r0, #0x1
.L107:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 MapGridIsImpassableAt,.Lfe13-MapGridIsImpassableAt
	.align	2, 0
	.globl	MapGridGetMetatileIdAt
	.type	 MapGridGetMetatileIdAt,function
	.thumb_func
MapGridGetMetatileIdAt:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	cmp	r5, #0
	blt	.L113	@cond_branch
	ldr	r1, .L117
	ldr	r2, [r1]
	cmp	r5, r2
	bge	.L113	@cond_branch
	cmp	r6, #0
	blt	.L113	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r6, r0
	bge	.L113	@cond_branch
	mov	r0, r2
	mul	r0, r0, r6
	add	r0, r5, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r4, [r0]
	b	.L114
.L118:
	.align	2, 0
.L117:
	.word	gUnknown_03004870
.L113:
	ldr	r0, .L119
	ldr	r3, [r0]
	add	r1, r5, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r6, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	add	r4, r0, #0
	orr	r4, r4, r1
.L114:
	ldr	r0, .L119+0x4
	cmp	r4, r0
	beq	.L115	@cond_branch
	and	r4, r4, r0
	add	r0, r4, #0
	b	.L116
.L120:
	.align	2, 0
.L119:
	.word	gMapHeader
	.word	0x3ff
.L115:
	ldr	r0, .L121
	ldr	r3, [r0]
	add	r1, r5, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r6, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r1, r2, #0
	orr	r0, r0, r1
	and	r0, r0, r4
.L116:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L122:
	.align	2, 0
.L121:
	.word	gMapHeader
.Lfe14:
	.size	 MapGridGetMetatileIdAt,.Lfe14-MapGridGetMetatileIdAt
	.align	2, 0
	.globl	MapGridGetMetatileBehaviorAt
	.type	 MapGridGetMetatileBehaviorAt,function
	.thumb_func
MapGridGetMetatileBehaviorAt:
	push	{lr}
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetBehaviorByMetatileId
	add	r1, r0, #0
	mov	r0, #0xff
	and	r0, r0, r1
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 MapGridGetMetatileBehaviorAt,.Lfe15-MapGridGetMetatileBehaviorAt
	.align	2, 0
	.globl	MapGridGetMetatileLayerTypeAt
	.type	 MapGridGetMetatileLayerTypeAt,function
	.thumb_func
MapGridGetMetatileLayerTypeAt:
	push	{lr}
	bl	MapGridGetMetatileIdAt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetBehaviorByMetatileId
	add	r1, r0, #0
	mov	r0, #0xf0
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0xc
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 MapGridGetMetatileLayerTypeAt,.Lfe16-MapGridGetMetatileLayerTypeAt
	.align	2, 0
	.globl	MapGridSetMetatileIdAt
	.type	 MapGridSetMetatileIdAt,function
	.thumb_func
MapGridSetMetatileIdAt:
	push	{r4, r5, lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	cmp	r3, #0
	blt	.L126	@cond_branch
	ldr	r2, .L127
	ldr	r4, [r2]
	cmp	r3, r4
	bge	.L126	@cond_branch
	cmp	r1, #0
	blt	.L126	@cond_branch
	ldr	r0, [r2, #0x4]
	cmp	r1, r0
	bge	.L126	@cond_branch
	mul	r1, r1, r4
	add	r1, r3, r1
	ldr	r0, [r2, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r2, #0xf0
	lsl	r2, r2, #0x8
	and	r2, r2, r0
	ldr	r0, .L127+0x4
	and	r0, r0, r5
	orr	r2, r2, r0
	strh	r2, [r1]
.L126:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gUnknown_03004870
	.word	0xfff
.Lfe17:
	.size	 MapGridSetMetatileIdAt,.Lfe17-MapGridSetMetatileIdAt
	.align	2, 0
	.globl	MapGridSetMetatileEntryAt
	.type	 MapGridSetMetatileEntryAt,function
	.thumb_func
MapGridSetMetatileEntryAt:
	push	{r4, r5, lr}
	add	r3, r0, #0
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	cmp	r3, #0
	blt	.L130	@cond_branch
	ldr	r2, .L131
	ldr	r4, [r2]
	cmp	r3, r4
	bge	.L130	@cond_branch
	cmp	r1, #0
	blt	.L130	@cond_branch
	ldr	r0, [r2, #0x4]
	cmp	r1, r0
	bge	.L130	@cond_branch
	mov	r0, r4
	mul	r0, r0, r1
	add	r0, r3, r0
	ldr	r1, [r2, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r5, [r0]
.L130:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L132:
	.align	2, 0
.L131:
	.word	gUnknown_03004870
.Lfe18:
	.size	 MapGridSetMetatileEntryAt,.Lfe18-MapGridSetMetatileEntryAt
	.align	2, 0
	.globl	GetBehaviorByMetatileId
	.type	 GetBehaviorByMetatileId,function
	.thumb_func
GetBehaviorByMetatileId:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r3, r2, #0
	ldr	r0, .L141
	cmp	r2, r0
	bhi	.L134	@cond_branch
	ldr	r0, .L141+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x10]
	ldr	r1, [r0, #0x10]
	lsl	r0, r2, #0x1
	b	.L140
.L142:
	.align	2, 0
.L141:
	.word	0x1ff
	.word	gMapHeader
.L134:
	ldr	r0, .L143
	cmp	r2, r0
	bls	.L136	@cond_branch
	mov	r0, #0xff
	b	.L138
.L144:
	.align	2, 0
.L143:
	.word	0x3ff
.L136:
	ldr	r0, .L145
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x10]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldr	r1, .L145+0x4
.L140:
	add	r0, r0, r1
	ldrh	r0, [r0]
.L138:
	pop	{r1}
	bx	r1
.L146:
	.align	2, 0
.L145:
	.word	gMapHeader
	.word	0xfffffc00
.Lfe19:
	.size	 GetBehaviorByMetatileId,.Lfe19-GetBehaviorByMetatileId
	.align	2, 0
	.globl	save_serialize_map
	.type	 save_serialize_map,function
	.thumb_func
save_serialize_map:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r5, .L158
	ldr	r0, .L158+0x4
	ldr	r0, [r0]
	mov	r8, r0
	add	r0, r5, #0
	sub	r0, r0, #0x34
	mov	r1, #0x0
	ldrsh	r6, [r0, r1]
	mov	r2, #0x2
	ldrsh	r0, [r0, r2]
	add	r1, r0, #0
	add	r1, r1, #0xe
	cmp	r0, r1
	bge	.L149	@cond_branch
	mov	ip, r1
	ldr	r1, .L158+0x8
	mov	r9, r1
	lsl	r7, r6, #0x1
.L151:
	add	r1, r6, #0
	add	r3, r1, #0
	add	r3, r3, #0xf
	add	r4, r0, #0x1
	cmp	r1, r3
	bge	.L150	@cond_branch
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	add	r2, r7, r0
	sub	r1, r3, r1
.L155:
	ldrh	r0, [r2]
	strh	r0, [r5]
	add	r5, r5, #0x2
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L155	@cond_branch
.L150:
	add	r0, r4, #0
	cmp	r0, ip
	blt	.L151	@cond_branch
.L149:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	gSaveBlock1+0x34
	.word	gUnknown_03004870
	.word	gUnknown_02029828
.Lfe20:
	.size	 save_serialize_map,.Lfe20-save_serialize_map
	.align	2, 0
	.globl	sub_8056618
	.type	 sub_8056618,function
	.thumb_func
sub_8056618:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r4, .L168
	ldr	r3, .L168+0x4
.L164:
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	orr	r2, r2, r0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, r3
	bls	.L164	@cond_branch
	cmp	r2, #0
	beq	.L166	@cond_branch
	mov	r0, #0x0
	b	.L167
.L169:
	.align	2, 0
.L168:
	.word	gSaveBlock1+0x34
	.word	0x1ff
.L166:
	mov	r0, #0x1
.L167:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 sub_8056618,.Lfe21-sub_8056618
	.align	2, 0
	.globl	sav2_mapdata_clear
	.type	 sav2_mapdata_clear,function
	.thumb_func
sav2_mapdata_clear:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L171
	ldr	r2, .L171+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	gSaveBlock1+0x34
	.word	0x1000100
.Lfe22:
	.size	 sav2_mapdata_clear,.Lfe22-sav2_mapdata_clear
	.align	2, 0
	.globl	sub_8056670
	.type	 sub_8056670,function
	.thumb_func
sub_8056670:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r5, .L185
	bl	sub_8056618
	cmp	r0, #0
	bne	.L174	@cond_branch
	ldr	r0, .L185+0x4
	ldr	r0, [r0]
	mov	r8, r0
	add	r0, r5, #0
	sub	r0, r0, #0x34
	mov	r1, #0x0
	ldrsh	r6, [r0, r1]
	mov	r2, #0x2
	ldrsh	r0, [r0, r2]
	add	r1, r0, #0
	add	r1, r1, #0xe
	cmp	r0, r1
	bge	.L176	@cond_branch
	mov	ip, r1
	ldr	r1, .L185+0x8
	mov	r9, r1
	lsl	r7, r6, #0x1
.L178:
	add	r1, r6, #0
	add	r3, r1, #0
	add	r3, r3, #0xf
	add	r4, r0, #0x1
	cmp	r1, r3
	bge	.L177	@cond_branch
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	add	r2, r7, r0
	sub	r1, r3, r1
.L182:
	ldrh	r0, [r5]
	strh	r0, [r2]
	add	r5, r5, #0x2
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L182	@cond_branch
.L177:
	add	r0, r4, #0
	cmp	r0, ip
	blt	.L178	@cond_branch
.L176:
	bl	sav2_mapdata_clear
.L174:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	gSaveBlock1+0x34
	.word	gUnknown_03004870
	.word	gUnknown_02029828
.Lfe23:
	.size	 sub_8056670,.Lfe23-sub_8056670
	.align	2, 0
	.globl	sub_80566F0
	.type	 sub_80566F0,function
	.thumb_func
sub_80566F0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r2, r1, #0
	ldr	r0, .L207
	mov	sl, r0
	ldr	r0, .L207+0x4
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r3, #0x0
	mov	r9, r3
	mov	r8, r3
	mov	r0, sl
	sub	r0, r0, #0x34
	mov	r6, #0x0
	ldrsh	r4, [r0, r6]
	str	r4, [sp, #0x4]
	mov	r3, #0x2
	ldrsh	r5, [r0, r3]
	mov	r7, #0xf
	mov	r4, #0xe
	mov	ip, r4
	cmp	r1, #0x2
	beq	.L189	@cond_branch
	cmp	r1, #0x2
	bgt	.L195	@cond_branch
	cmp	r1, #0x1
	beq	.L190	@cond_branch
	b	.L188
.L208:
	.align	2, 0
.L207:
	.word	gSaveBlock1+0x34
	.word	gUnknown_03004870
.L195:
	cmp	r2, #0x3
	beq	.L191	@cond_branch
	cmp	r2, #0x4
	beq	.L192	@cond_branch
	b	.L188
.L189:
	add	r5, r5, #0x1
	mov	r6, #0xd
	mov	ip, r6
	b	.L188
.L190:
	mov	r0, #0x1
	mov	r8, r0
	mov	r1, #0xd
	mov	ip, r1
	b	.L188
.L191:
	ldr	r3, [sp, #0x4]
	add	r3, r3, #0x1
	str	r3, [sp, #0x4]
	b	.L206
.L192:
	mov	r4, #0x1
	mov	r9, r4
.L206:
	mov	r7, #0xe
.L188:
	mov	r1, #0x0
	cmp	r1, ip
	bge	.L197	@cond_branch
.L199:
	add	r4, r1, #0x1
	cmp	r7, #0
	beq	.L198	@cond_branch
	add	r0, r1, r5
	ldr	r6, [sp]
	mov	r2, r6
	mul	r2, r2, r0
	add	r1, r1, r8
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	add	r0, r0, r9
	ldr	r1, [sp, #0x4]
	add	r2, r1, r2
	add	r3, r7, #0
	lsl	r2, r2, #0x1
	ldr	r6, .L209
	add	r2, r2, r6
	lsl	r0, r0, #0x1
	mov	r6, sl
	add	r1, r0, r6
.L203:
	ldrh	r0, [r1]
	strh	r0, [r2]
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L203	@cond_branch
.L198:
	add	r1, r4, #0
	cmp	r1, ip
	blt	.L199	@cond_branch
.L197:
	bl	sav2_mapdata_clear
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	gUnknown_02029828
.Lfe24:
	.size	 sub_80566F0,.Lfe24-sub_80566F0
	.align	2, 0
	.globl	GetMapBorderIdAt
	.type	 GetMapBorderIdAt,function
	.thumb_func
GetMapBorderIdAt:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	cmp	r4, #0
	blt	.L212	@cond_branch
	ldr	r1, .L232
	ldr	r2, [r1]
	cmp	r4, r2
	bge	.L212	@cond_branch
	cmp	r5, #0
	blt	.L212	@cond_branch
	ldr	r0, [r1, #0x4]
	cmp	r5, r0
	bge	.L212	@cond_branch
	mov	r0, r2
	mul	r0, r0, r5
	add	r0, r4, r0
	ldr	r1, [r1, #0x8]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L232+0x4
	cmp	r1, r0
	beq	.L231	@cond_branch
	b	.L217
.L233:
	.align	2, 0
.L232:
	.word	gUnknown_03004870
	.word	0x3ff
.L212:
	ldr	r0, .L234
	ldr	r3, [r0]
	add	r1, r4, #0x1
	mov	r2, #0x1
	and	r1, r1, r2
	add	r0, r5, #0x1
	and	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r2, #0xc0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	orr	r0, r0, r1
	ldr	r1, .L234+0x4
	cmp	r0, r1
	beq	.L231	@cond_branch
.L217:
	ldr	r1, .L234+0x8
	ldr	r0, [r1]
	sub	r0, r0, #0x8
	cmp	r4, r0
	blt	.L218	@cond_branch
	ldr	r0, .L234+0xc
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L231	@cond_branch
	mov	r0, #0x4
	b	.L230
.L235:
	.align	2, 0
.L234:
	.word	gMapHeader
	.word	0x3ff
	.word	gUnknown_03004870
	.word	gUnknown_0202E850
.L218:
	cmp	r4, #0x6
	bgt	.L221	@cond_branch
	ldr	r0, .L236
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L231	@cond_branch
	mov	r0, #0x3
	b	.L230
.L237:
	.align	2, 0
.L236:
	.word	gUnknown_0202E850
.L221:
	ldr	r0, [r1, #0x4]
	sub	r0, r0, #0x7
	cmp	r5, r0
	blt	.L224	@cond_branch
	ldr	r0, .L238
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L231	@cond_branch
	mov	r0, #0x1
	b	.L230
.L239:
	.align	2, 0
.L238:
	.word	gUnknown_0202E850
.L224:
	cmp	r5, #0x6
	bgt	.L227	@cond_branch
	ldr	r0, .L240
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L228	@cond_branch
.L231:
	mov	r0, #0x1
	neg	r0, r0
	b	.L230
.L241:
	.align	2, 0
.L240:
	.word	gUnknown_0202E850
.L228:
	mov	r0, #0x2
	b	.L230
.L227:
	mov	r0, #0x0
.L230:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 GetMapBorderIdAt,.Lfe25-GetMapBorderIdAt
	.align	2, 0
	.globl	GetPostCameraMoveMapBorderId
	.type	 GetPostCameraMoveMapBorderId,function
	.thumb_func
GetPostCameraMoveMapBorderId:
	push	{r4, lr}
	add	r3, r1, #0
	ldr	r1, .L243
	mov	r4, #0x0
	ldrsh	r2, [r1, r4]
	add	r0, r0, #0x7
	add	r2, r2, r0
	mov	r0, #0x2
	ldrsh	r1, [r1, r0]
	add	r3, r3, #0x7
	add	r1, r1, r3
	add	r0, r2, #0
	bl	GetMapBorderIdAt
	pop	{r4}
	pop	{r1}
	bx	r1
.L244:
	.align	2, 0
.L243:
	.word	gSaveBlock1
.Lfe26:
	.size	 GetPostCameraMoveMapBorderId,.Lfe26-GetPostCameraMoveMapBorderId
	.align	2, 0
	.globl	CanCameraMoveInDirection
	.type	 CanCameraMoveInDirection,function
	.thumb_func
CanCameraMoveInDirection:
	push	{r4, r5, lr}
	ldr	r4, .L248
	mov	r1, #0x0
	ldrsh	r3, [r4, r1]
	ldr	r2, .L248+0x4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldr	r1, [r1]
	add	r1, r1, #0x7
	add	r3, r3, r1
	mov	r5, #0x2
	ldrsh	r1, [r4, r5]
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r0, [r0]
	add	r0, r0, #0x7
	add	r1, r1, r0
	add	r0, r3, #0
	bl	GetMapBorderIdAt
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	beq	.L246	@cond_branch
	mov	r0, #0x1
	b	.L247
.L249:
	.align	2, 0
.L248:
	.word	gSaveBlock1
	.word	gUnknown_0821664C
.L246:
	mov	r0, #0x0
.L247:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 CanCameraMoveInDirection,.Lfe27-CanCameraMoveInDirection
	.align	2, 0
	.globl	sub_8056918
	.type	 sub_8056918,function
	.thumb_func
sub_8056918:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	add	r6, r2, #0
	add	r7, r3, #0
	bl	mapconnection_get_mapheader
	add	r3, r0, #0
	cmp	r4, #0x2
	beq	.L255	@cond_branch
	cmp	r4, #0x2
	bgt	.L258	@cond_branch
	cmp	r4, #0x1
	beq	.L254	@cond_branch
	b	.L251
.L258:
	cmp	r4, #0x3
	beq	.L253	@cond_branch
	cmp	r4, #0x4
	bne	.L251	@cond_branch
	ldr	r1, .L260
	neg	r0, r6
	strh	r0, [r1]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1, #0x2]
	sub	r0, r0, r2
	b	.L259
.L261:
	.align	2, 0
.L260:
	.word	gSaveBlock1
.L253:
	ldr	r1, .L262
	ldr	r0, [r3]
	ldr	r0, [r0]
	strh	r0, [r1]
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1, #0x2]
	sub	r0, r0, r2
	b	.L259
.L263:
	.align	2, 0
.L262:
	.word	gSaveBlock1
.L254:
	ldr	r1, .L264
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1]
	sub	r0, r0, r2
	strh	r0, [r1]
	neg	r0, r7
	b	.L259
.L265:
	.align	2, 0
.L264:
	.word	gSaveBlock1
.L255:
	ldr	r1, .L266
	ldr	r2, [r5, #0x4]
	ldrh	r0, [r1]
	sub	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x4]
.L259:
	strh	r0, [r1, #0x2]
.L251:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L267:
	.align	2, 0
.L266:
	.word	gSaveBlock1
.Lfe28:
	.size	 sub_8056918,.Lfe28-sub_8056918
	.align	2, 0
	.globl	CameraMove
	.type	 CameraMove,function
	.thumb_func
CameraMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	sl, r0
	str	r1, [sp]
	ldr	r1, .L271
	ldrb	r0, [r1]
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r0
	ldr	r2, .L271
	strb	r1, [r2]
	mov	r0, sl
	ldr	r1, [sp]
	bl	GetPostCameraMoveMapBorderId
	add	r7, r0, #0
	add	r0, r7, #0x1
	cmp	r0, #0x1
	bhi	.L269	@cond_branch
	ldr	r0, .L271+0x4
	ldrh	r1, [r0]
	add	r1, r1, sl
	strh	r1, [r0]
	ldrh	r1, [r0, #0x2]
	ldr	r2, [sp]
	add	r1, r1, r2
	strh	r1, [r0, #0x2]
	b	.L270
.L272:
	.align	2, 0
.L271:
	.word	gCamera
	.word	gSaveBlock1
.L269:
	bl	save_serialize_map
	ldr	r5, .L273
	mov	r0, #0x0
	ldrsh	r6, [r5, r0]
	mov	r2, #0x2
	ldrsh	r1, [r5, r2]
	mov	r8, r1
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	add	r1, r6, #0
	mov	r2, r8
	bl	sub_8056A64
	add	r4, r0, #0
	add	r1, r7, #0
	mov	r2, sl
	ldr	r3, [sp]
	bl	sub_8056918
	ldrb	r0, [r4, #0x8]
	ldrb	r1, [r4, #0x9]
	bl	sub_80538F0
	ldr	r1, .L273+0x4
	ldrb	r0, [r1]
	mov	r1, #0x1
	orr	r0, r0, r1
	ldr	r2, .L273+0x4
	strb	r0, [r2]
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	sub	r6, r6, r0
	str	r6, [r2, #0x4]
	mov	r2, #0x2
	ldrsh	r0, [r5, r2]
	mov	r1, r8
	sub	r1, r1, r0
	ldr	r2, .L273+0x4
	str	r1, [r2, #0x8]
	ldrh	r0, [r5]
	add	r0, r0, sl
	strh	r0, [r5]
	ldrh	r0, [r5, #0x2]
	ldr	r1, [sp]
	add	r0, r0, r1
	strh	r0, [r5, #0x2]
	mov	r0, r9
	bl	sub_80566F0
.L270:
	ldr	r0, .L273+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L274:
	.align	2, 0
.L273:
	.word	gSaveBlock1
	.word	gCamera
.Lfe29:
	.size	 CameraMove,.Lfe29-CameraMove
	.align	2, 0
	.globl	sub_8056A64
	.type	 sub_8056A64,function
	.thumb_func
sub_8056A64:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r1
	mov	r8, r2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L284
	ldr	r0, [r0, #0xc]
	ldr	r7, [r0]
	ldr	r4, [r0, #0x4]
	mov	r5, #0x0
	cmp	r5, r7
	bge	.L277	@cond_branch
.L279:
	ldrb	r0, [r4]
	cmp	r0, r6
	bne	.L278	@cond_branch
	add	r0, r6, #0
	mov	r1, r9
	mov	r2, r8
	add	r3, r4, #0
	bl	sub_8056ABC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L278	@cond_branch
	add	r0, r4, #0
	b	.L283
.L285:
	.align	2, 0
.L284:
	.word	gMapHeader
.L278:
	add	r5, r5, #0x1
	add	r4, r4, #0xc
	cmp	r5, r7
	blt	.L279	@cond_branch
.L277:
	mov	r0, #0x0
.L283:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 sub_8056A64,.Lfe30-sub_8056A64
	.align	2, 0
	.globl	sub_8056ABC
	.type	 sub_8056ABC,function
	.thumb_func
sub_8056ABC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r1, #0
	mov	r8, r2
	add	r5, r3, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	add	r0, r5, #0
	bl	mapconnection_get_mapheader
	add	r2, r0, #0
	cmp	r4, #0x1
	blt	.L287	@cond_branch
	cmp	r4, #0x2
	bgt	.L289	@cond_branch
	ldr	r0, .L296
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r0, [r2]
	ldr	r2, [r0]
	ldr	r3, [r5, #0x4]
	add	r0, r7, #0
	b	.L295
.L297:
	.align	2, 0
.L296:
	.word	gMapHeader
.L289:
	cmp	r6, #0x4
	bgt	.L287	@cond_branch
	ldr	r0, .L298
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	ldr	r0, [r2]
	ldr	r2, [r0, #0x4]
	ldr	r3, [r5, #0x4]
	mov	r0, r8
.L295:
	bl	sub_8056B20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L294
.L299:
	.align	2, 0
.L298:
	.word	gMapHeader
.L287:
	mov	r0, #0x0
.L294:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 sub_8056ABC,.Lfe31-sub_8056ABC
	.align	2, 0
	.globl	sub_8056B20
	.type	 sub_8056B20,function
	.thumb_func
sub_8056B20:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r2, #0
	add	r2, r3, #0
	cmp	r3, #0
	bge	.L301	@cond_branch
	mov	r3, #0x0
.L301:
	add	r2, r0, r2
	cmp	r2, r1
	bge	.L302	@cond_branch
	add	r1, r2, #0
.L302:
	cmp	r3, r4
	bgt	.L303	@cond_branch
	cmp	r4, r1
	bgt	.L303	@cond_branch
	mov	r0, #0x1
	b	.L304
.L303:
	mov	r0, #0x0
.L304:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 sub_8056B20,.Lfe32-sub_8056B20
	.align	2, 0
	.globl	sub_8056B4C
	.type	 sub_8056B4C,function
	.thumb_func
sub_8056B4C:
	push	{lr}
	cmp	r0, #0
	blt	.L306	@cond_branch
	cmp	r0, r1
	bge	.L306	@cond_branch
	mov	r0, #0x1
	b	.L307
.L306:
	mov	r0, #0x0
.L307:
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 sub_8056B4C,.Lfe33-sub_8056B4C
	.align	2, 0
	.globl	sub_8056B60
	.type	 sub_8056B60,function
	.thumb_func
sub_8056B60:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	bl	mapconnection_get_mapheader
	add	r1, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x1
	blt	.L309	@cond_branch
	cmp	r0, #0x2
	bgt	.L311	@cond_branch
	ldr	r0, [r4, #0x4]
	sub	r0, r5, r0
	ldr	r1, [r1]
	ldr	r1, [r1]
	bl	sub_8056B4C
	b	.L316
.L311:
	cmp	r0, #0x4
	bgt	.L309	@cond_branch
	ldr	r0, [r4, #0x4]
	sub	r0, r6, r0
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	bl	sub_8056B4C
	b	.L316
.L309:
	mov	r0, #0x0
.L316:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 sub_8056B60,.Lfe34-sub_8056B60
	.align	2, 0
	.globl	sub_8056BA0
	.type	 sub_8056BA0,function
	.thumb_func
sub_8056BA0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L333
	ldr	r0, [r2, #0xc]
	cmp	r0, #0
	bne	.L318	@cond_branch
	b	.L319
.L334:
	.align	2, 0
.L333:
	.word	gMapHeader
.L332:
	add	r0, r4, #0
	b	.L331
.L318:
	ldr	r7, [r0]
	ldr	r4, [r0, #0x4]
	mov	r6, #0x0
	cmp	r6, r7
	bge	.L319	@cond_branch
	lsl	r0, r1, #0x10
	asr	r5, r0, #0x10
	mov	r9, r2
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	sl, r0
.L323:
	ldrb	r1, [r4]
	add	r3, r1, #0
	sub	r0, r1, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L322	@cond_branch
	cmp	r1, #0x2
	bne	.L326	@cond_branch
	cmp	r5, #0x6
	bgt	.L322	@cond_branch
.L326:
	cmp	r1, #0x1
	bne	.L327	@cond_branch
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r0, r0, #0x7
	cmp	r5, r0
	blt	.L322	@cond_branch
.L327:
	mov	r0, r8
	lsl	r2, r0, #0x10
	cmp	r1, #0x3
	bne	.L328	@cond_branch
	mov	r1, sl
	cmp	r1, #0x6
	bgt	.L322	@cond_branch
.L328:
	cmp	r3, #0x4
	bne	.L324	@cond_branch
	asr	r1, r2, #0x10
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r0, [r0]
	add	r0, r0, #0x7
	cmp	r1, r0
	blt	.L322	@cond_branch
.L324:
	asr	r1, r2, #0x10
	sub	r1, r1, #0x7
	add	r0, r4, #0
	sub	r2, r5, #0x7
	bl	sub_8056B60
	cmp	r0, #0x1
	beq	.L332	@cond_branch
.L322:
	add	r6, r6, #0x1
	add	r4, r4, #0xc
	cmp	r6, r7
	blt	.L323	@cond_branch
.L319:
	mov	r0, #0x0
.L331:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 sub_8056BA0,.Lfe35-sub_8056BA0
	.align	2, 0
	.globl	sub_8056C50
	.type	 sub_8056C50,function
	.thumb_func
sub_8056C50:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L336
	sub	r0, r0, #0x7
	strh	r0, [r2]
	sub	r1, r1, #0x7
	strh	r1, [r2, #0x2]
	bx	lr
.L337:
	.align	2, 0
.L336:
	.word	gSaveBlock1
.Lfe36:
	.size	 sub_8056C50,.Lfe36-sub_8056C50
	.align	2, 0
	.globl	sav1_camera_get_focus_coords
	.type	 sav1_camera_get_focus_coords,function
	.thumb_func
sav1_camera_get_focus_coords:
	ldr	r3, .L339
	ldrh	r2, [r3]
	add	r2, r2, #0x7
	strh	r2, [r0]
	ldrh	r0, [r3, #0x2]
	add	r0, r0, #0x7
	strh	r0, [r1]
	bx	lr
.L340:
	.align	2, 0
.L339:
	.word	gSaveBlock1
.Lfe37:
	.size	 sav1_camera_get_focus_coords,.Lfe37-sav1_camera_get_focus_coords
	.align	2, 0
	.globl	unref_sub_8056C7C
	.type	 unref_sub_8056C7C,function
	.thumb_func
unref_sub_8056C7C:
	ldr	r2, .L342
	strh	r0, [r2]
	strh	r1, [r2, #0x2]
	bx	lr
.L343:
	.align	2, 0
.L342:
	.word	gSaveBlock1
.Lfe38:
	.size	 unref_sub_8056C7C,.Lfe38-unref_sub_8056C7C
	.align	2, 0
	.globl	GetCameraCoords
	.type	 GetCameraCoords,function
	.thumb_func
GetCameraCoords:
	ldr	r3, .L345
	ldrh	r2, [r3]
	strh	r2, [r0]
	ldrh	r0, [r3, #0x2]
	strh	r0, [r1]
	bx	lr
.L346:
	.align	2, 0
.L345:
	.word	gSaveBlock1
.Lfe39:
	.size	 GetCameraCoords,.Lfe39-GetCameraCoords
	.align	2, 0
	.globl	sub_8056C98
	.type	 sub_8056C98,function
	.thumb_func
sub_8056C98:
	push	{lr}
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L348	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L349	@cond_branch
	ldr	r0, [r2, #0x4]
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	bl	CpuFastSet
	b	.L348
.L349:
	ldr	r0, [r2, #0x4]
	bl	LZ77UnCompVram
.L348:
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 sub_8056C98,.Lfe40-sub_8056C98
	.align	2, 0
	.globl	sub_8056CBC
	.type	 sub_8056CBC,function
	.thumb_func
sub_8056CBC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	cmp	r4, #0
	beq	.L352	@cond_branch
	ldrb	r1, [r4, #0x1]
	cmp	r1, #0
	bne	.L353	@cond_branch
	mov	r0, sp
	strh	r1, [r0]
	lsl	r1, r5, #0x10
	lsr	r1, r1, #0x10
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r0, [r4, #0x8]
	add	r0, r0, #0x2
	add	r1, r5, #0x1
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	sub	r2, r6, #0x2
	lsl	r2, r2, #0x10
	b	.L357
.L353:
	cmp	r1, #0x1
	bne	.L355	@cond_branch
	ldr	r0, [r4, #0x8]
	add	r0, r0, #0xc0
	lsl	r1, r5, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r6, #0x10
.L357:
	lsr	r2, r2, #0x10
	bl	LoadPalette
	b	.L352
.L355:
	ldr	r0, [r4, #0x8]
	mov	r4, #0x80
	lsl	r4, r4, #0x12
	add	r1, r4, #0
	bl	LZ77UnCompVram
	lsl	r1, r5, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	lsr	r2, r2, #0x10
	add	r0, r4, #0
	bl	LoadPalette
.L352:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 sub_8056CBC,.Lfe41-sub_8056CBC
	.align	2, 0
	.globl	sub_8056D28
	.type	 sub_8056D28,function
	.thumb_func
sub_8056D28:
	push	{lr}
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r0, [r0, #0x10]
	bl	sub_8056C98
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_8056D28,.Lfe42-sub_8056D28
	.align	2, 0
	.globl	sub_8056D38
	.type	 sub_8056D38,function
	.thumb_func
sub_8056D38:
	push	{lr}
	ldr	r1, .L360
	ldr	r0, [r0, #0x14]
	bl	sub_8056C98
	pop	{r0}
	bx	r0
.L361:
	.align	2, 0
.L360:
	.word	0x6004000
.Lfe43:
	.size	 sub_8056D38,.Lfe43-sub_8056D38
	.align	2, 0
	.globl	apply_map_tileset1_palette
	.type	 apply_map_tileset1_palette,function
	.thumb_func
apply_map_tileset1_palette:
	push	{lr}
	ldr	r0, [r0, #0x10]
	mov	r1, #0x0
	mov	r2, #0xc0
	bl	sub_8056CBC
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 apply_map_tileset1_palette,.Lfe44-apply_map_tileset1_palette
	.align	2, 0
	.globl	apply_map_tileset2_palette
	.type	 apply_map_tileset2_palette,function
	.thumb_func
apply_map_tileset2_palette:
	push	{lr}
	ldr	r0, [r0, #0x14]
	mov	r1, #0x60
	mov	r2, #0xc0
	bl	sub_8056CBC
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 apply_map_tileset2_palette,.Lfe45-apply_map_tileset2_palette
	.align	2, 0
	.globl	copy_map_tileset1_tileset2_to_vram
	.type	 copy_map_tileset1_tileset2_to_vram,function
	.thumb_func
copy_map_tileset1_tileset2_to_vram:
	push	{r4, lr}
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L365	@cond_branch
	bl	sub_8056D28
	add	r0, r4, #0
	bl	sub_8056D38
.L365:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 copy_map_tileset1_tileset2_to_vram,.Lfe46-copy_map_tileset1_tileset2_to_vram
	.align	2, 0
	.globl	apply_map_tileset1_tileset2_palette
	.type	 apply_map_tileset1_tileset2_palette,function
	.thumb_func
apply_map_tileset1_tileset2_palette:
	push	{r4, lr}
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L367	@cond_branch
	bl	apply_map_tileset1_palette
	add	r0, r4, #0
	bl	apply_map_tileset2_palette
.L367:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 apply_map_tileset1_tileset2_palette,.Lfe47-apply_map_tileset1_tileset2_palette
	.comm	gUnknown_03004870, 12	@ 12
.text
	.align	2, 0
