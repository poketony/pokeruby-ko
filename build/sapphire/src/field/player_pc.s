@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gPcItemMenuOptionOrder,object
	.size	 gPcItemMenuOptionOrder,4
gPcItemMenuOptionOrder:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 gPCText_OptionDescList,object
gPCText_OptionDescList:
	.word	PCText_TakeOutItems
	.word	PCText_StoreItems
	.word	PCText_ThrowAwayItems
	.word	gMenuText_GoBackToPrev
	.size	 gPCText_OptionDescList,16
	.align	2, 0
	.type	 sPlayerPCMenuActions,object
sPlayerPCMenuActions:
	.word	SecretBaseText_ItemStorage
	.word	PlayerPC_ItemStorage
	.word	gPCText_Mailbox
	.word	PlayerPC_Mailbox
	.word	SecretBaseText_Decoration
	.word	PlayerPC_Decoration
	.word	SecretBaseText_TurnOff
	.word	PlayerPC_TurnOff
	.size	 sPlayerPCMenuActions,32
	.type	 gBedroomPC_OptionOrder,object
gBedroomPC_OptionOrder:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.size	 gBedroomPC_OptionOrder,4
	.type	 gPlayerPC_OptionOrder,object
gPlayerPC_OptionOrder:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.size	 gPlayerPC_OptionOrder,3
	.align	2, 0
	.type	 gPCText_ItemPCOptionsText,object
gPCText_ItemPCOptionsText:
	.word	PCText_WithdrawItem
	.word	ItemStorage_Withdraw
	.word	PCText_DepositItem
	.word	ItemStorage_Deposit
	.word	PCText_TossItem
	.word	ItemStorage_Toss
	.word	gUnknownText_Exit
	.word	ItemStorage_Exit
	.size	 gPCText_ItemPCOptionsText,32
	.align	2, 0
	.type	 ResumeFromTossYesNoFuncList,object
ResumeFromTossYesNoFuncList:
	.word	ItemStorage_ResumeInputFromYesToss
	.word	ItemStorage_ResumeInputFromNoToss
	.size	 ResumeFromTossYesNoFuncList,8
	.align	2, 0
	.type	 ResumeFromWithdrawYesNoFuncList,object
ResumeFromWithdrawYesNoFuncList:
	.word	Mailbox_DoMailMoveToBag
	.word	Mailbox_ReturnToInputAfterNo
	.size	 ResumeFromWithdrawYesNoFuncList,8
	.align	2, 0
	.type	 gNewGamePCItems,object
gNewGamePCItems:
	.short	0xd
	.short	0x1
	.short	0x0
	.short	0x0
	.size	 gNewGamePCItems,8
	.align	2, 0
	.type	 gMailboxMailOptions,object
gMailboxMailOptions:
	.word	OtherText_Read
	.word	Mailbox_DoMailRead
	.word	gOtherText_MoveToBag
	.word	Mailbox_MoveToBag
	.word	OtherText_Give
	.word	Mailbox_Give
	.word	gOtherText_CancelNoTerminator
	.word	Mailbox_Cancel
	.size	 gMailboxMailOptions,32
	.type	 gNonSelectedItemFormattedText,object
gNonSelectedItemFormattedText:
	.byte	0xfd
	.byte	0x2
	.byte	0xfc
	.byte	0x13
	.byte	0x50
	.byte	0xff
	.size	 gNonSelectedItemFormattedText,6
	.type	 gNonSelectedItemQuantityFormatText,object
gNonSelectedItemQuantityFormatText:
	.byte	0xfd
	.byte	0x2
	.byte	0xff
	.size	 gNonSelectedItemQuantityFormatText,3
	.type	 gUnknown_08406330,object
gUnknown_08406330:
	.byte	0xfc
	.byte	0x13
	.byte	0x20
	.byte	0xff
	.size	 gUnknown_08406330,4
	.align	1, 0
	.type	 gUnknown_08406334,object
	.size	 gUnknown_08406334,6
gUnknown_08406334:
	.short	0x5294
	.short	0x6b5a
	.short	0x7fff
	.type	 gHighlightedMoveToBagFormatText,object
gHighlightedMoveToBagFormatText:
	.byte	0xfc
	.byte	0x1
	.byte	0x2
	.byte	0xfd
	.byte	0x2
	.byte	0xff
	.size	 gHighlightedMoveToBagFormatText,6
.text
	.align	2, 0
	.globl	NewGameInitPCItems
	.type	 NewGameInitPCItems,function
	.thumb_func
NewGameInitPCItems:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r0, .L9
	mov	r1, #0x32
	bl	ClearItemSlots
	ldr	r1, .L9+0x4
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L4	@cond_branch
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L4	@cond_branch
	add	r5, r1, #0
	add	r6, r5, #0x2
.L8:
	lsl	r1, r4, #0x2
	add	r0, r1, r5
	ldrh	r0, [r0]
	add	r1, r1, r6
	ldrh	r1, [r1]
	bl	AddPCItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L4	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r4, #0x2
	add	r0, r1, r5
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L4	@cond_branch
	add	r0, r1, r6
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L8	@cond_branch
.L4:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gSaveBlock1+0x498
	.word	gNewGamePCItems
.Lfe1:
	.size	 NewGameInitPCItems,.Lfe1-NewGameInitPCItems
	.align	2, 0
	.globl	BedroomPC
	.type	 BedroomPC,function
	.thumb_func
BedroomPC:
	push	{lr}
	ldr	r1, .L12
	ldr	r0, .L12+0x4
	str	r0, [r1]
	ldr	r1, .L12+0x8
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, .L12+0xc
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L12+0x10
	ldr	r2, .L12+0x14
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	gPcItemMenuOptionOrder
	.word	gBedroomPC_OptionOrder
	.word	gPcItemMenuOptionsNum
	.word	TaskDummy
	.word	gOtherText_WhatWillYouDo
	.word	InitPlayerPCMenu
.Lfe2:
	.size	 BedroomPC,.Lfe2-BedroomPC
	.align	2, 0
	.globl	PlayerPC
	.type	 PlayerPC,function
	.thumb_func
PlayerPC:
	push	{lr}
	ldr	r1, .L15
	ldr	r0, .L15+0x4
	str	r0, [r1]
	ldr	r1, .L15+0x8
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r0, .L15+0xc
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L15+0x10
	ldr	r2, .L15+0x14
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gPcItemMenuOptionOrder
	.word	gPlayerPC_OptionOrder
	.word	gPcItemMenuOptionsNum
	.word	TaskDummy
	.word	gOtherText_WhatWillYouDo
	.word	InitPlayerPCMenu
.Lfe3:
	.size	 PlayerPC,.Lfe3-PlayerPC
	.align	2, 0
	.type	 InitPlayerPCMenu,function
	.thumb_func
InitPlayerPCMenu:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L18
	ldrb	r3, [r5]
	lsl	r3, r3, #0x1
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xb
	bl	MenuDrawTextWindow
	ldrb	r2, [r5]
	ldr	r3, .L18+0x4
	ldr	r0, .L18+0x8
	ldr	r0, [r0]
	str	r0, [sp]
	mov	r0, #0x1
	mov	r1, #0x1
	bl	PrintMenuItemsReordered
	ldrb	r3, [r5]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x9
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x1
	bl	InitMenu
	ldr	r1, .L18+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L18+0x10
	str	r1, [r0]
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gPcItemMenuOptionsNum
	.word	sPlayerPCMenuActions
	.word	gPcItemMenuOptionOrder
	.word	gTasks
	.word	PlayerPCProcessMenuInput
.Lfe4:
	.size	 InitPlayerPCMenu,.Lfe4-InitPlayerPCMenu
	.align	2, 0
	.type	 PlayerPCProcessMenuInput,function
	.thumb_func
PlayerPCProcessMenuInput:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r5, #0
	ldr	r2, .L28
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	bl	MoveMenuCursor
	b	.L22
.L29:
	.align	2, 0
.L28:
	.word	gMain
.L21:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L23	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	MoveMenuCursor
	b	.L22
.L23:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	bl	HandleDestroyMenuCursors
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L30
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L30+0x4
	ldr	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x3
	add	r4, r4, #0x4
	add	r0, r0, r4
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L22
.L31:
	.align	2, 0
.L30:
	.word	sPlayerPCMenuActions
	.word	gPcItemMenuOptionOrder
.L25:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L22	@cond_branch
	bl	HandleDestroyMenuCursors
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L32
	ldr	r0, .L32+0x4
	ldrb	r0, [r0]
	ldr	r1, .L32+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	sub	r0, r0, #0x1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
.L22:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	sPlayerPCMenuActions
	.word	gPcItemMenuOptionsNum
	.word	gPcItemMenuOptionOrder
.Lfe5:
	.size	 PlayerPCProcessMenuInput,.Lfe5-PlayerPCProcessMenuInput
	.align	2, 0
	.globl	ReshowPlayerPC
	.type	 ReshowPlayerPC,function
	.thumb_func
ReshowPlayerPC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L35
	ldr	r2, .L35+0x4
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gOtherText_WhatWillYouDo
	.word	InitPlayerPCMenu
.Lfe6:
	.size	 ReshowPlayerPC,.Lfe6-ReshowPlayerPC
	.align	2, 0
	.type	 PlayerPC_ItemStorage,function
	.thumb_func
PlayerPC_ItemStorage:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	InitItemStorageMenu
	ldr	r1, .L38
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L38+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gTasks
	.word	ItemStorageMenuProcessInput
.Lfe7:
	.size	 PlayerPC_ItemStorage,.Lfe7-PlayerPC_ItemStorage
	.align	2, 0
	.type	 PlayerPC_Mailbox,function
	.thumb_func
PlayerPC_Mailbox:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xb
	mov	r3, #0x9
	bl	MenuZeroFillWindowRect
	bl	GetMailboxMailCount
	ldr	r1, .L43
	mov	r2, #0x0
	strb	r0, [r1, #0x3]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L41	@cond_branch
	ldr	r1, .L43+0x4
	ldr	r2, .L43+0x8
	add	r0, r4, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	gSharedMem+0x1fe00
	.word	gOtherText_NoMailHere
	.word	ReshowPlayerPC
.L41:
	strb	r2, [r1]
	strb	r2, [r1, #0x2]
	bl	Mailbox_UpdateMailList
	add	r0, r4, #0
	bl	ItemStorage_SetItemAndMailCount
	add	r0, r4, #0
	bl	Mailbox_DrawMailboxMenu
	ldr	r0, .L45
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L45+0x4
	str	r0, [r1]
.L42:
	pop	{r4}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gTasks
	.word	Mailbox_ProcessInput
.Lfe8:
	.size	 PlayerPC_Mailbox,.Lfe8-PlayerPC_Mailbox
	.align	2, 0
	.type	 PlayerPC_Decoration,function
	.thumb_func
PlayerPC_Decoration:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xb
	mov	r3, #0x9
	bl	MenuZeroFillWindowRect
	add	r0, r4, #0
	bl	DoPlayerPCDecoration
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 PlayerPC_Decoration,.Lfe9-PlayerPC_Decoration
	.align	2, 0
	.type	 PlayerPC_TurnOff,function
	.thumb_func
PlayerPC_TurnOff:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L53
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L49	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	ldr	r0, .L53+0x4
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L50	@cond_branch
	ldr	r0, .L53+0x8
	bl	ScriptContext1_SetupScript
	b	.L52
.L54:
	.align	2, 0
.L53:
	.word	gPcItemMenuOptionsNum
	.word	gSaveBlock2
	.word	gBrendanHouse_TurnPCOff
.L50:
	ldr	r0, .L55
	bl	ScriptContext1_SetupScript
	b	.L52
.L56:
	.align	2, 0
.L55:
	.word	gMayHouse_TurnPCOff
.L49:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xb
	mov	r3, #0x9
	bl	MenuZeroFillWindowRect
	bl	EnableBothScriptContexts
.L52:
	add	r0, r4, #0
	bl	DestroyTask
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 PlayerPC_TurnOff,.Lfe10-PlayerPC_TurnOff
	.align	2, 0
	.type	 InitItemStorageMenu,function
	.thumb_func
InitItemStorageMenu:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xb
	mov	r3, #0x9
	bl	MenuZeroFillWindowRect
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x9
	bl	MenuDrawTextWindow
	ldr	r3, .L58
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x4
	bl	PrintMenuItems
	str	r4, [sp]
	mov	r0, #0xa
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x4
	bl	InitMenu
	ldr	r0, .L58+0x4
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, [r4]
	bl	ItemStorageMenuPrint
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gPCText_ItemPCOptionsText
	.word	gPCText_OptionDescList
.Lfe11:
	.size	 InitItemStorageMenu,.Lfe11-InitItemStorageMenu
	.align	2, 0
	.type	 ItemStorageMenuPrint,function
	.thumb_func
ItemStorageMenuPrint:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x4
	mov	r1, #0xf
	mov	r2, #0x19
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
	add	r0, r4, #0
	mov	r1, #0x4
	mov	r2, #0xf
	bl	MenuPrint
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 ItemStorageMenuPrint,.Lfe12-ItemStorageMenuPrint
	.align	2, 0
	.type	 ItemStorageMenuProcessInput,function
	.thumb_func
ItemStorageMenuProcessInput:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r5, #0
	ldr	r2, .L70
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L62	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L69
.L71:
	.align	2, 0
.L70:
	.word	gMain
.L62:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L64	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L69:
	bl	MoveMenuCursor
	ldr	r4, .L72
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	ItemStorageMenuPrint
	b	.L63
.L73:
	.align	2, 0
.L72:
	.word	gPCText_OptionDescList
.L64:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L66	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L74
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x15
	add	r4, r4, #0x4
	add	r0, r0, r4
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L63
.L75:
	.align	2, 0
.L74:
	.word	gPCText_ItemPCOptionsText
.L66:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L63	@cond_branch
	bl	HandleDestroyMenuCursors
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L76
	ldr	r1, [r0, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
.L63:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gPCText_ItemPCOptionsText
.Lfe13:
	.size	 ItemStorageMenuProcessInput,.Lfe13-ItemStorageMenuProcessInput
	.align	2, 0
	.type	 Task_ItemStorage_Deposit,function
	.thumb_func
Task_ItemStorage_Deposit:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L80
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L79	@cond_branch
	bl	sub_80A6A30
	add	r0, r4, #0
	bl	DestroyTask
.L79:
	pop	{r4}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gPaletteFade
.Lfe14:
	.size	 Task_ItemStorage_Deposit,.Lfe14-Task_ItemStorage_Deposit
	.align	2, 0
	.type	 ItemStorage_Deposit,function
	.thumb_func
ItemStorage_Deposit:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L83
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L83+0x4
	str	r0, [r1]
	mov	r0, #0x1
	mov	r1, #0x0
	bl	fade_screen
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	gTasks
	.word	Task_ItemStorage_Deposit
.Lfe15:
	.size	 ItemStorage_Deposit,.Lfe15-ItemStorage_Deposit
	.align	2, 0
	.type	 ItemStorage_HandleReturnToProcessInput,function
	.thumb_func
ItemStorage_HandleReturnToProcessInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	sub_807D770
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L86	@cond_branch
	ldr	r0, .L87
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L87+0x4
	str	r0, [r1]
.L86:
	pop	{r4}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gTasks
	.word	ItemStorageMenuProcessInput
.Lfe16:
	.size	 ItemStorage_HandleReturnToProcessInput,.Lfe16-ItemStorage_HandleReturnToProcessInput
	.align	2, 0
	.globl	ItemStorage_ReturnToMenuAfterDeposit
	.type	 ItemStorage_ReturnToMenuAfterDeposit,function
	.thumb_func
ItemStorage_ReturnToMenuAfterDeposit:
	push	{lr}
	bl	MenuDisplayMessageBox
	mov	r0, #0x1
	bl	InitItemStorageMenu
	ldr	r0, .L90
	mov	r1, #0x0
	bl	CreateTask
	bl	pal_fill_black
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	ItemStorage_HandleReturnToProcessInput
.Lfe17:
	.size	 ItemStorage_ReturnToMenuAfterDeposit,.Lfe17-ItemStorage_ReturnToMenuAfterDeposit
	.align	2, 0
	.type	 ItemStorage_Withdraw,function
	.thumb_func
ItemStorage_Withdraw:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	ldr	r7, .L95
	add	r4, r6, r7
	bl	HandleDestroyMenuCursors
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x9
	bl	MenuZeroFillWindowRect
	bl	CountUsedPCItemSlots
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L93	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xe
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	strh	r0, [r4]
	strh	r0, [r4, #0x2]
	add	r0, r5, #0
	bl	ItemStorage_SetItemAndMailCount
	add	r0, r5, #0
	mov	r1, #0x0
	bl	ItemStorage_GoBackToItemPCMenu
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L95+0x4
	str	r1, [r0]
	b	.L94
.L96:
	.align	2, 0
.L95:
	.word	gTasks+0x8
	.word	ItemStorage_ProcessInput
.L93:
	ldr	r1, .L97
	ldr	r2, .L97+0x4
	add	r0, r5, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
.L94:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L98:
	.align	2, 0
.L97:
	.word	gOtherText_NoItems
	.word	PlayerPC_ItemStorage
.Lfe18:
	.size	 ItemStorage_Withdraw,.Lfe18-ItemStorage_Withdraw
	.align	2, 0
	.type	 ItemStorage_Toss,function
	.thumb_func
ItemStorage_Toss:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	ldr	r7, .L102
	add	r4, r6, r7
	bl	HandleDestroyMenuCursors
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x9
	bl	MenuZeroFillWindowRect
	bl	CountUsedPCItemSlots
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L100	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xe
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	mov	r0, #0x2
	strh	r0, [r4, #0xc]
	mov	r0, #0x0
	strh	r0, [r4]
	strh	r0, [r4, #0x2]
	add	r0, r5, #0
	bl	ItemStorage_SetItemAndMailCount
	add	r0, r5, #0
	mov	r1, #0x2
	bl	ItemStorage_GoBackToItemPCMenu
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L102+0x4
	str	r1, [r0]
	b	.L101
.L103:
	.align	2, 0
.L102:
	.word	gTasks+0x8
	.word	ItemStorage_ProcessInput
.L100:
	ldr	r1, .L104
	ldr	r2, .L104+0x4
	add	r0, r5, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
.L101:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	gOtherText_NoItems
	.word	PlayerPC_ItemStorage
.Lfe19:
	.size	 ItemStorage_Toss,.Lfe19-ItemStorage_Toss
	.align	2, 0
	.type	 ItemStorage_Exit,function
	.thumb_func
ItemStorage_Exit:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	HandleDestroyMenuCursors
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x9
	bl	MenuZeroFillWindowRect
	add	r0, r4, #0
	bl	ReshowPlayerPC
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 ItemStorage_Exit,.Lfe20-ItemStorage_Exit
	.align	2, 0
	.type	 ItemStorage_SetItemAndMailCount,function
	.thumb_func
ItemStorage_SetItemAndMailCount:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L114
	add	r1, r1, r0
	ldrh	r2, [r1, #0x4]
	mov	r3, #0x4
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x7
	ble	.L108	@cond_branch
	mov	r0, #0x8
	b	.L112
.L115:
	.align	2, 0
.L114:
	.word	gTasks+0x8
.L108:
	add	r0, r2, #0x1
.L112:
	strh	r0, [r1, #0x8]
	ldr	r1, .L116
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0x7
	bls	.L110	@cond_branch
	mov	r0, #0x8
	b	.L113
.L117:
	.align	2, 0
.L116:
	.word	gSharedMem+0x1fe00
.L110:
	add	r0, r0, #0x1
.L113:
	strb	r0, [r1, #0x1]
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 ItemStorage_SetItemAndMailCount,.Lfe21-ItemStorage_SetItemAndMailCount
	.align	2, 0
	.type	 ItemStorage_ProcessInput,function
	.thumb_func
ItemStorage_ProcessInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L155
	add	r4, r0, r1
	ldr	r2, .L155+0x4
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L119	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L120	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x2
	mov	r2, #0x10
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	bl	MoveMenuCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldrh	r1, [r4, #0x2]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L152	@cond_branch
	lsl	r0, r1, #0x10
	asr	r1, r0, #0x10
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L122	@cond_branch
.L154:
	ldr	r0, .L155+0x8
	bl	ItemStorage_PrintItemPcResponse
	b	.L147
.L156:
	.align	2, 0
.L155:
	.word	gTasks+0x8
	.word	gMain
	.word	0xffff
.L122:
	ldr	r0, .L157
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x93
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1]
	bl	ItemStorage_PrintItemPcResponse
	b	.L147
.L158:
	.align	2, 0
.L157:
	.word	gSaveBlock1
.L120:
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.LCB1191
	b	.L118	@long jump
.LCB1191:
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	add	r0, r5, #0
	bl	ItemStorage_DrawBothListAndDescription
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.LCB1203
	b	.L147	@long jump
.LCB1203:
	mov	r0, #0x0
	bl	MoveMenuCursor
	b	.L153
.L119:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L129	@cond_branch
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L130	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x2
	mov	r2, #0x10
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	MoveMenuCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldrh	r1, [r4, #0x2]
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L131	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x2
	mov	r2, #0x10
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
.L152:
	add	r0, r5, #0
	bl	ItemStorage_DrawItemList
	b	.L147
.L131:
	lsl	r0, r1, #0x10
	asr	r1, r0, #0x10
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	beq	.L154	@cond_branch
	b	.L122
.L130:
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	add	r0, r0, r1
	mov	r2, #0x4
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	beq	.L147	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	add	r0, r5, #0
	bl	ItemStorage_DrawBothListAndDescription
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L147	@cond_branch
	mov	r0, #0x0
	bl	MoveMenuCursor
	b	.L153
.L129:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L138	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x2
	mov	r2, #0x10
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L139	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r2, #0x4
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	beq	.L147	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	strh	r0, [r4, #0x12]
	ldrh	r0, [r4]
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldr	r0, .L159
	bl	ItemStorage_PrintItemPcResponse
	b	.L147
.L160:
	.align	2, 0
.L159:
	.word	0xfff7
.L139:
	mov	r0, #0x5
	bl	PlaySE
	b	.L144
.L138:
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L143	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x2
	mov	r2, #0x10
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
	mov	r0, #0x5
	bl	PlaySE
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L144	@cond_branch
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r2, #0x4
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	beq	.L145	@cond_branch
	add	r0, r5, #0
	bl	ItemStorage_DoItemAction
	b	.L147
.L145:
	add	r0, r5, #0
	bl	ItemStorage_GoBackToPlayerPCMenu
	b	.L147
.L144:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	ItemStorage_DoItemSwap
	add	r0, r5, #0
	bl	ItemStorage_DrawBothListAndDescription
.L153:
.L147:
	mov	r0, #0x0
	bl	MoveMenuCursor
	b	.L118
.L143:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L118	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x2
	mov	r2, #0x10
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L150	@cond_branch
	bl	HandleDestroyMenuCursors
	add	r0, r5, #0
	bl	ItemStorage_GoBackToPlayerPCMenu
	b	.L151
.L150:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	ItemStorage_DoItemSwap
	add	r0, r6, #0
	bl	ItemStorage_DrawBothListAndDescription
.L151:
	mov	r0, #0x0
	bl	MoveMenuCursor
.L118:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 ItemStorage_ProcessInput,.Lfe22-ItemStorage_ProcessInput
	.align	2, 0
	.type	 ItemStorage_GoBackToPlayerPCMenu,function
	.thumb_func
ItemStorage_GoBackToPlayerPCMenu:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	bl	BuyMenuFreeMemory
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	bl	MenuDisplayMessageBox
	ldr	r0, .L162
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrb	r0, [r4, #0x14]
	bl	InitItemStorageMenu
	ldr	r0, .L162+0x4
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	gTasks
	.word	ItemStorageMenuProcessInput
.Lfe23:
	.size	 ItemStorage_GoBackToPlayerPCMenu,.Lfe23-ItemStorage_GoBackToPlayerPCMenu
	.align	2, 0
	.type	 ItemStorage_DoItemAction,function
	.thumb_func
ItemStorage_DoItemAction:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L171
	add	r4, r0, r1
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r4]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	bl	PauseVerticalScrollIndicator
	mov	r0, #0x1
	bl	PauseVerticalScrollIndicator
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L165	@cond_branch
	ldr	r1, .L171+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r1, .L171+0x8
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bne	.L166	@cond_branch
	strh	r0, [r4, #0x6]
	add	r0, r6, #0
	bl	ItemStorage_DoItemWithdraw
	b	.L164
.L172:
	.align	2, 0
.L171:
	.word	gTasks+0x8
	.word	gSaveBlock1
	.word	0x49a
.L166:
	ldr	r0, .L173
	bl	ItemStorage_PrintItemPcResponse
	b	.L168
.L174:
	.align	2, 0
.L173:
	.word	0xfffe
.L165:
	ldr	r1, .L175
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r1, .L175+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bne	.L169	@cond_branch
	strh	r0, [r4, #0x6]
	add	r0, r6, #0
	bl	ItemStorage_DoItemToss
	b	.L164
.L176:
	.align	2, 0
.L175:
	.word	gSaveBlock1
	.word	0x49a
.L169:
	ldr	r0, .L177
	bl	ItemStorage_PrintItemPcResponse
.L168:
	mov	r0, #0x1
	strh	r0, [r4, #0x6]
	mov	r0, #0x6
	mov	r1, #0x8
	mov	r2, #0xd
	mov	r3, #0xb
	bl	MenuDrawTextWindow
	ldrh	r0, [r4, #0x6]
	mov	r1, #0x3
	str	r1, [sp]
	mov	r1, #0x1
	mov	r2, #0x8
	mov	r3, #0x9
	bl	sub_80A418C
	ldr	r1, .L177+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L177+0x8
	str	r1, [r0]
.L164:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L178:
	.align	2, 0
.L177:
	.word	0xfffc
	.word	gTasks
	.word	ItemStorage_HandleQuantityRolling
.Lfe24:
	.size	 ItemStorage_DoItemAction,.Lfe24-ItemStorage_DoItemAction
	.align	2, 0
	.type	 ItemStorage_HandleQuantityRolling,function
	.thumb_func
ItemStorage_HandleQuantityRolling:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r7, r0, #0x3
	ldr	r0, .L202
	mov	r8, r0
	add	r4, r7, r0
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r4]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r6, r3, #0
	ldr	r2, .L202+0x4
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L180	@cond_branch
	mov	r0, #0x6
	ldrsh	r2, [r4, r0]
	ldr	r1, .L202+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, .L202+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L181	@cond_branch
	ldrh	r0, [r4, #0x6]
	add	r0, r0, #0x1
	b	.L200
.L203:
	.align	2, 0
.L202:
	.word	gTasks+0x8
	.word	gMain
	.word	gSaveBlock1
	.word	0x49a
.L181:
	mov	r0, #0x1
	b	.L200
.L180:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L184	@cond_branch
	ldrh	r1, [r4, #0x6]
	mov	r2, #0x6
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	beq	.L185	@cond_branch
	sub	r0, r1, #0x1
	b	.L200
.L185:
	ldr	r0, .L204
	lsl	r1, r3, #0x2
	add	r1, r1, r0
	ldr	r3, .L204+0x4
	add	r1, r1, r3
	ldrh	r0, [r1]
	b	.L200
.L205:
	.align	2, 0
.L204:
	.word	gSaveBlock1
	.word	0x49a
.L184:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L188	@cond_branch
	ldrh	r0, [r4, #0x6]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x6]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L192	@cond_branch
	mov	r0, #0x1
	b	.L200
.L188:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L191	@cond_branch
	ldrh	r0, [r4, #0x6]
	add	r0, r0, #0xa
	strh	r0, [r4, #0x6]
	mov	r0, #0x6
	ldrsh	r2, [r4, r0]
	ldr	r1, .L206
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r1, .L206+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r2, r0
	ble	.L192	@cond_branch
.L200:
	strh	r0, [r4, #0x6]
.L192:
	ldrh	r0, [r4, #0x6]
	mov	r1, #0x3
	str	r1, [sp]
	mov	r1, #0x1
	mov	r2, #0x8
	mov	r3, #0x9
	bl	sub_80A418C
	b	.L183
.L207:
	.align	2, 0
.L206:
	.word	gSaveBlock1
	.word	0x49a
.L191:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L194	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x6
	mov	r1, #0x6
	mov	r2, #0xd
	mov	r3, #0xb
	bl	MenuZeroFillWindowRect
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L195	@cond_branch
	add	r0, r5, #0
	bl	ItemStorage_DoItemWithdraw
	b	.L183
.L195:
	add	r0, r5, #0
	bl	ItemStorage_DoItemToss
	b	.L183
.L194:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L183	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x6
	mov	r1, #0x6
	mov	r2, #0xd
	mov	r3, #0xb
	bl	MenuZeroFillWindowRect
	mov	r0, #0x0
	bl	StartVerticalScrollIndicators
	mov	r0, #0x1
	bl	StartVerticalScrollIndicators
	ldr	r2, .L208
	mov	r3, #0x2
	ldrsh	r0, [r4, r3]
	mov	r3, #0x0
	ldrsh	r1, [r4, r3]
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x93
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	ItemStorage_PrintItemPcResponse
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L208+0x4
	str	r1, [r0]
.L183:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	gSaveBlock1
	.word	ItemStorage_ProcessInput
.Lfe25:
	.size	 ItemStorage_HandleQuantityRolling,.Lfe25-ItemStorage_HandleQuantityRolling
	.align	2, 0
	.type	 ItemStorage_DoItemWithdraw,function
	.thumb_func
ItemStorage_DoItemWithdraw:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r6, r1, #0x3
	ldr	r7, .L214
	add	r4, r6, r7
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r4]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	ldr	r1, .L214+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	mov	r2, #0x93
	lsl	r2, r2, #0x3
	add	r5, r0, r2
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x6]
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L211	@cond_branch
	ldrh	r0, [r5]
	ldr	r1, .L214+0x8
	bl	CopyItemName
	ldr	r0, .L214+0xc
	mov	r2, #0x6
	ldrsh	r1, [r4, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L214+0x10
	bl	ItemStorage_PrintItemPcResponse
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L214+0x14
	b	.L213
.L215:
	.align	2, 0
.L214:
	.word	gTasks+0x8
	.word	gSaveBlock1
	.word	gStringVar1
	.word	gStringVar2
	.word	0xfffd
	.word	ItemStorage_HandleRemoveItem
.L211:
	mov	r0, #0x0
	strh	r0, [r4, #0x6]
	ldr	r0, .L216
	bl	ItemStorage_PrintItemPcResponse
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L216+0x4
.L213:
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	0xfffa
	.word	ItemStorage_WaitPressHandleResumeProcessInput
.Lfe26:
	.size	 ItemStorage_DoItemWithdraw,.Lfe26-ItemStorage_DoItemWithdraw
	.align	2, 0
	.type	 ItemStorage_DoItemToss,function
	.thumb_func
ItemStorage_DoItemToss:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r7, r0, #0x3
	ldr	r0, .L221
	mov	r8, r0
	add	r4, r7, r0
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r4]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	ldr	r1, .L221+0x4
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	mov	r2, #0x93
	lsl	r2, r2, #0x3
	add	r5, r0, r2
	ldrh	r0, [r5]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L219	@cond_branch
	ldrh	r0, [r5]
	ldr	r1, .L221+0x8
	bl	CopyItemName
	ldr	r0, .L221+0xc
	mov	r2, #0x6
	ldrsh	r1, [r4, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L221+0x10
	bl	ItemStorage_PrintItemPcResponse
	mov	r0, #0x7
	mov	r1, #0x6
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r1, .L221+0x14
	add	r0, r6, #0
	bl	DoYesNoFuncWithChoice
	b	.L220
.L222:
	.align	2, 0
.L221:
	.word	gTasks+0x8
	.word	gSaveBlock1
	.word	gStringVar1
	.word	gStringVar2
	.word	0xfff8
	.word	ResumeFromTossYesNoFuncList
.L219:
	mov	r0, #0x0
	strh	r0, [r4, #0x6]
	ldr	r0, .L223
	bl	ItemStorage_PrintItemPcResponse
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L223+0x4
	str	r1, [r0]
.L220:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L224:
	.align	2, 0
.L223:
	.word	0xfff9
	.word	ItemStorage_HandleRemoveItem
.Lfe27:
	.size	 ItemStorage_DoItemToss,.Lfe27-ItemStorage_DoItemToss
	.align	2, 0
	.type	 ItemStorage_ResumeInputFromYesToss,function
	.thumb_func
ItemStorage_ResumeInputFromYesToss:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x6
	mov	r1, #0x6
	mov	r2, #0xd
	mov	r3, #0xb
	bl	MenuZeroFillWindowRect
	ldr	r0, .L226
	bl	ItemStorage_PrintItemPcResponse
	ldr	r1, .L226+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L226+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	0xfffb
	.word	gTasks
	.word	ItemStorage_HandleRemoveItem
.Lfe28:
	.size	 ItemStorage_ResumeInputFromYesToss,.Lfe28-ItemStorage_ResumeInputFromYesToss
	.align	2, 0
	.type	 ItemStorage_ResumeInputFromNoToss,function
	.thumb_func
ItemStorage_ResumeInputFromNoToss:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r6, .L229
	add	r5, r4, r6
	mov	r0, #0x6
	mov	r1, #0x6
	mov	r2, #0xd
	mov	r3, #0xb
	bl	MenuZeroFillWindowRect
	ldrb	r3, [r5, #0x8]
	ldrb	r0, [r5]
	str	r0, [sp]
	mov	r0, #0xd
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x2
	bl	InitMenu
	mov	r0, #0x0
	bl	StartVerticalScrollIndicators
	mov	r0, #0x1
	bl	StartVerticalScrollIndicators
	ldr	r2, .L229+0x4
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	mov	r3, #0x0
	ldrsh	r1, [r5, r3]
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x93
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	ItemStorage_PrintItemPcResponse
	sub	r6, r6, #0x8
	add	r4, r4, r6
	ldr	r0, .L229+0x8
	str	r0, [r4]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L230:
	.align	2, 0
.L229:
	.word	gTasks+0x8
	.word	gSaveBlock1
	.word	ItemStorage_ProcessInput
.Lfe29:
	.size	 ItemStorage_ResumeInputFromNoToss,.Lfe29-ItemStorage_ResumeInputFromNoToss
	.align	2, 0
	.type	 ItemStorage_HandleRemoveItem,function
	.thumb_func
ItemStorage_HandleRemoveItem:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L235
	add	r5, r0, r1
	ldr	r0, .L235+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L233	@cond_branch
	cmp	r1, #0x2
	bne	.L232	@cond_branch
.L233:
	ldrb	r0, [r5, #0x2]
	ldrb	r1, [r5]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r5, #0x6]
	bl	RemovePCItem
	ldrh	r4, [r5, #0x4]
	bl	CountUsedPCItemSlots
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x4]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, r0
	beq	.L234	@cond_branch
	mov	r2, #0x8
	ldrsh	r0, [r5, r2]
	mov	r2, #0x2
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	cmp	r4, r0
	bge	.L234	@cond_branch
	ldrh	r1, [r5, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L234	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x2]
.L234:
	add	r0, r6, #0
	bl	ItemStorage_SetItemAndMailCount
	add	r0, r6, #0
	bl	ItemStorage_HandleResumeProcessInput
	ldrb	r3, [r5, #0x8]
	ldrb	r0, [r5]
	str	r0, [sp]
	mov	r0, #0xd
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x2
	bl	InitMenu
.L232:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	gTasks+0x8
	.word	gMain
.Lfe30:
	.size	 ItemStorage_HandleRemoveItem,.Lfe30-ItemStorage_HandleRemoveItem
	.align	2, 0
	.type	 ItemStorage_WaitPressHandleResumeProcessInput,function
	.thumb_func
ItemStorage_WaitPressHandleResumeProcessInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r4, r1, #0x3
	ldr	r5, .L240
	add	r3, r4, r5
	ldr	r0, .L240+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L239	@cond_branch
	cmp	r1, #0x2
	bne	.L238	@cond_branch
.L239:
	ldr	r2, .L240+0x8
	mov	r1, #0x2
	ldrsh	r0, [r3, r1]
	mov	r6, #0x0
	ldrsh	r1, [r3, r6]
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x93
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	ItemStorage_PrintItemPcResponse
	mov	r0, #0x0
	bl	StartVerticalScrollIndicators
	mov	r0, #0x1
	bl	StartVerticalScrollIndicators
	add	r0, r5, #0
	sub	r0, r0, #0x8
	add	r0, r4, r0
	ldr	r1, .L240+0xc
	str	r1, [r0]
.L238:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	gTasks+0x8
	.word	gMain
	.word	gSaveBlock1
	.word	ItemStorage_ProcessInput
.Lfe31:
	.size	 ItemStorage_WaitPressHandleResumeProcessInput,.Lfe31-ItemStorage_WaitPressHandleResumeProcessInput
	.align	2, 0
	.type	 ItemStorage_HandleResumeProcessInput,function
	.thumb_func
ItemStorage_HandleResumeProcessInput:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x6
	mov	r1, #0x6
	mov	r2, #0xd
	mov	r3, #0xb
	bl	MenuZeroFillWindowRect
	mov	r0, #0x0
	bl	StartVerticalScrollIndicators
	mov	r0, #0x1
	bl	StartVerticalScrollIndicators
	add	r0, r4, #0
	bl	ItemStorage_DrawBothListAndDescription
	ldr	r1, .L243
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L243+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L244:
	.align	2, 0
.L243:
	.word	gTasks
	.word	ItemStorage_ProcessInput
.Lfe32:
	.size	 ItemStorage_HandleResumeProcessInput,.Lfe32-ItemStorage_HandleResumeProcessInput
	.align	2, 0
	.type	 ItemStorage_DoItemSwap,function
	.thumb_func
ItemStorage_DoItemSwap:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L251
	add	r4, r1, r0
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	strh	r0, [r4, #0x12]
	ldrb	r0, [r4, #0x4]
	cmp	r0, r5
	bls	.L246	@cond_branch
	ldrb	r0, [r4, #0x10]
	cmp	r0, r5
	beq	.L246	@cond_branch
	cmp	r2, #0
	bne	.L246	@cond_branch
	ldr	r1, .L251+0x4
	mov	r0, #0x10
	ldrsh	r2, [r4, r0]
	lsl	r2, r2, #0x2
	mov	r0, #0x93
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r2, r2, r1
	ldr	r3, [r2]
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	str	r1, [r2]
	str	r3, [r0]
	b	.L245
.L252:
	.align	2, 0
.L251:
	.word	gTasks+0x8
	.word	gSaveBlock1
.L246:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r5, r0
	bne	.L248	@cond_branch
	ldr	r0, .L253
	bl	ItemStorage_PrintItemPcResponse
	b	.L247
.L254:
	.align	2, 0
.L253:
	.word	0xffff
.L248:
	ldr	r0, .L255
	lsl	r1, r5, #0x2
	add	r1, r1, r0
	mov	r2, #0x93
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1]
	bl	ItemStorage_PrintItemPcResponse
.L247:
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
.L245:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gSaveBlock1
.Lfe33:
	.size	 ItemStorage_DoItemSwap,.Lfe33-ItemStorage_DoItemSwap
	.align	2, 0
	.type	 ItemStorage_DrawItemQuantity,function
	.thumb_func
ItemStorage_DrawItemQuantity:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L258
	add	r1, r4, #0
	add	r2, r6, #0
	bl	sub_80A4164
	ldr	r0, .L258+0x4
	mov	r1, #0x1a
	add	r2, r5, #0
	bl	MenuPrint
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L259:
	.align	2, 0
.L258:
	.word	gStringVar1
	.word	gNonSelectedItemQuantityFormatText
.Lfe34:
	.size	 ItemStorage_DrawItemQuantity,.Lfe34-ItemStorage_DrawItemQuantity
	.align	2, 0
	.type	 ItemStorage_DrawItemVoidQuantity,function
	.thumb_func
ItemStorage_DrawItemVoidQuantity:
	push	{lr}
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L261
	mov	r1, #0x19
	bl	MenuPrint
	pop	{r0}
	bx	r0
.L262:
	.align	2, 0
.L261:
	.word	gUnknown_08406330
.Lfe35:
	.size	 ItemStorage_DrawItemVoidQuantity,.Lfe35-ItemStorage_DrawItemVoidQuantity
	.section .rodata
.LC128:
	.byte	0xfc
	.byte	0x1
	.byte	0x8
	.byte	0xef
	.byte	0xff
.text
	.align	2, 0
	.type	 ItemStorage_DrawItemName,function
	.thumb_func
ItemStorage_DrawItemName:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	add	r5, r2, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	add	r7, r6, #0
	ldr	r1, .L265
	mov	r0, sp
	mov	r2, #0x5
	bl	memcpy
	ldrh	r0, [r4]
	ldr	r1, .L265+0x4
	bl	CopyItemName
	cmp	r5, #0
	beq	.L264	@cond_branch
	mov	r0, sp
	mov	r1, #0x10
	add	r2, r6, #0
	bl	MenuPrint
.L264:
	ldr	r0, .L265+0x8
	mov	r1, #0x11
	add	r2, r7, #0
	bl	MenuPrint
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	.LC128
	.word	gStringVar1
	.word	gNonSelectedItemFormattedText
.Lfe36:
	.size	 ItemStorage_DrawItemName,.Lfe36-ItemStorage_DrawItemName
	.align	2, 0
	.type	 ItemStorage_DrawNormalItemEntry,function
	.thumb_func
ItemStorage_DrawNormalItemEntry:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, r4, #0
	bl	ItemStorage_DrawItemName
	ldrh	r0, [r6, #0x2]
	str	r5, [sp]
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	ItemStorage_DrawItemQuantity
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 ItemStorage_DrawNormalItemEntry,.Lfe37-ItemStorage_DrawNormalItemEntry
	.align	2, 0
	.type	 ItemStorage_DrawKeyItemEntry,function
	.thumb_func
ItemStorage_DrawKeyItemEntry:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, r4, #0
	bl	ItemStorage_DrawItemName
	add	r0, r4, #0
	bl	ItemStorage_DrawItemVoidQuantity
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 ItemStorage_DrawKeyItemEntry,.Lfe38-ItemStorage_DrawKeyItemEntry
	.align	2, 0
	.type	 ItemStorage_DrawTMHMEntry,function
	.thumb_func
ItemStorage_DrawTMHMEntry:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r6, r2, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	add	r1, r5, #0
	bl	ItemStorage_DrawItemName
	ldrh	r1, [r4]
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bhi	.L270	@cond_branch
	ldrh	r0, [r4, #0x2]
	str	r6, [sp]
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x3
	bl	ItemStorage_DrawItemQuantity
	b	.L271
.L270:
	add	r0, r5, #0
	bl	ItemStorage_DrawItemVoidQuantity
.L271:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 ItemStorage_DrawTMHMEntry,.Lfe39-ItemStorage_DrawTMHMEntry
	.align	2, 0
	.type	 ItemStorage_DrawItemList,function
	.thumb_func
ItemStorage_DrawItemList:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L299
	add	r6, r1, r0
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x1
	bl	SetCustomFont
	ldrh	r5, [r6, #0x2]
	mov	r2, #0x2
	ldrsh	r1, [r6, r2]
	b	.L298
.L300:
	.align	2, 0
.L299:
	.word	gTasks+0x8
.L276:
	sub	r0, r5, r1
	lsl	r0, r0, #0x11
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r5, r0
	beq	.L288	@cond_branch
	mov	r7, #0x0
	mov	r2, #0x12
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	beq	.L278	@cond_branch
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	cmp	r5, r0
	bne	.L278	@cond_branch
	mov	r7, #0x1
.L278:
	ldr	r0, .L301
	lsl	r4, r5, #0x2
	add	r0, r4, r0
	mov	r2, #0x93
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	GetPocketByItemId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	cmp	r0, #0x4
	bhi	.L275	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L301+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L302:
	.align	2, 0
.L301:
	.word	gSaveBlock1
	.word	.L285
	.align	2, 0
	.align	2, 0
.L285:
	.word	.L282
	.word	.L282
	.word	.L284
	.word	.L282
	.word	.L283
.L282:
	ldr	r0, .L303
	add	r0, r4, r0
	mov	r1, r8
	add	r1, r1, #0x2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r7, #0
	bl	ItemStorage_DrawNormalItemEntry
	b	.L275
.L304:
	.align	2, 0
.L303:
	.word	gSaveBlock1+0x498
.L283:
	ldr	r0, .L305
	add	r0, r4, r0
	mov	r1, r8
	add	r1, r1, #0x2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r7, #0
	bl	ItemStorage_DrawKeyItemEntry
	b	.L275
.L306:
	.align	2, 0
.L305:
	.word	gSaveBlock1+0x498
.L284:
	ldr	r0, .L307
	add	r0, r4, r0
	mov	r1, r8
	add	r1, r1, #0x2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r7, #0
	bl	ItemStorage_DrawTMHMEntry
.L275:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x2
	ldrsh	r1, [r6, r0]
.L298:
	mov	r2, #0x8
	ldrsh	r0, [r6, r2]
	add	r0, r1, r0
	cmp	r5, r0
	blt	.L276	@cond_branch
.L290:
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	sub	r0, r5, r0
	cmp	r0, #0x7
	bgt	.L291	@cond_branch
	mov	r1, r8
	add	r1, r1, #0x4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x10
	mov	r2, #0x1c
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
.L291:
	mov	r2, #0x2
	ldrsh	r0, [r6, r2]
	cmp	r0, #0
	beq	.L294	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xb8
	mov	r2, #0x8
	bl	CreateVerticalScrollIndicators
	b	.L292
.L308:
	.align	2, 0
.L307:
	.word	gSaveBlock1+0x498
.L288:
	ldr	r0, .L309
	mov	r2, r8
	add	r2, r2, #0x2
	lsl	r2, r2, #0x13
	lsr	r2, r2, #0x10
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x88
	mov	r3, #0x60
	bl	sub_8072A18
	b	.L290
.L310:
	.align	2, 0
.L309:
	.word	gOtherText_CancelNoTerminator
.L294:
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
.L292:
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	mov	r2, #0x8
	ldrsh	r1, [r6, r2]
	add	r0, r0, r1
	mov	r2, #0x4
	ldrsh	r1, [r6, r2]
	cmp	r0, r1
	bgt	.L296	@cond_branch
	mov	r0, #0x1
	mov	r1, #0xb8
	mov	r2, #0x98
	bl	CreateVerticalScrollIndicators
	b	.L297
.L296:
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
.L297:
	mov	r0, #0x0
	bl	SetCustomFont
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 ItemStorage_DrawItemList,.Lfe40-ItemStorage_DrawItemList
	.align	2, 0
	.type	 ItemStorage_PrintItemPcResponse,function
	.thumb_func
ItemStorage_PrintItemPcResponse:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r2, .L324
	add	r0, r1, r2
	cmp	r0, #0x8
	bhi	.L322	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L324+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L325:
	.align	2, 0
.L324:
	.word	0xffff0009
	.word	.L323
	.align	2, 0
	.align	2, 0
.L323:
	.word	.L321
	.word	.L320
	.word	.L319
	.word	.L318
	.word	.L317
	.word	.L316
	.word	.L315
	.word	.L314
	.word	.L313
.L313:
	ldr	r4, .L326
	b	.L312
.L327:
	.align	2, 0
.L326:
	.word	gMenuText_GoBackToPrev
.L314:
	ldr	r4, .L328
	b	.L312
.L329:
	.align	2, 0
.L328:
	.word	gOtherText_HowManyToWithdraw
.L315:
	ldr	r4, .L330
	b	.L312
.L331:
	.align	2, 0
.L330:
	.word	gOtherText_WithdrewThing
.L316:
	ldr	r4, .L332
	b	.L312
.L333:
	.align	2, 0
.L332:
	.word	gOtherText_HowManyToToss
.L317:
	ldr	r4, .L334
	b	.L312
.L335:
	.align	2, 0
.L334:
	.word	gOtherText_ThrewAwayItem
.L318:
	ldr	r4, .L336
	b	.L312
.L337:
	.align	2, 0
.L336:
	.word	gOtherText_NoMoreRoom
.L319:
	ldr	r4, .L338
	b	.L312
.L339:
	.align	2, 0
.L338:
	.word	gOtherText_TooImportant
.L320:
	ldr	r4, .L340
	b	.L312
.L341:
	.align	2, 0
.L340:
	.word	gOtherText_OkayToThrowAwayPrompt
.L321:
	ldr	r4, .L342
	b	.L312
.L343:
	.align	2, 0
.L342:
	.word	gOtherText_SwitchWhichItem
.L322:
	add	r0, r1, #0
	bl	ItemId_GetDescription
	add	r4, r0, #0
.L312:
	mov	r0, #0x1
	bl	SetCustomFont
	mov	r0, #0x30
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	mov	r1, #0x8
	mov	r2, #0x68
	mov	r3, #0x68
	bl	sub_8072AB0
	mov	r0, #0x0
	bl	SetCustomFont
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 ItemStorage_PrintItemPcResponse,.Lfe41-ItemStorage_PrintItemPcResponse
	.align	2, 0
	.type	 ItemStorage_DrawBothListAndDescription,function
	.thumb_func
ItemStorage_DrawBothListAndDescription:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r2, .L348
	add	r4, r1, r2
	ldrh	r1, [r4]
	ldrh	r2, [r4, #0x2]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	bl	ItemStorage_DrawItemList
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L345	@cond_branch
	lsl	r0, r5, #0x10
	asr	r1, r0, #0x10
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L346	@cond_branch
	ldr	r0, .L348+0x4
	bl	ItemStorage_PrintItemPcResponse
	b	.L345
.L349:
	.align	2, 0
.L348:
	.word	gTasks+0x8
	.word	0xffff
.L346:
	ldr	r0, .L350
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x93
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1]
	bl	ItemStorage_PrintItemPcResponse
.L345:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L351:
	.align	2, 0
.L350:
	.word	gSaveBlock1
.Lfe42:
	.size	 ItemStorage_DrawBothListAndDescription,.Lfe42-ItemStorage_DrawBothListAndDescription
	.align	2, 0
	.type	 ItemStorage_GoBackToItemPCMenu,function
	.thumb_func
ItemStorage_GoBackToItemPCMenu:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r6, #0x2
	add	r5, r5, r6
	lsl	r5, r5, #0x3
	ldr	r0, .L353
	add	r5, r5, r0
	bl	sub_80F944C
	bl	LoadScrollIndicatorPalette
	bl	ItemStorage_LoadPalette
	mov	r0, #0xf
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	mov	r0, #0x0
	mov	r1, #0xc
	mov	r2, #0xe
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x3
	bl	MenuDrawTextWindow
	ldr	r0, .L353+0x4
	mov	r1, #0x93
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	ItemStorage_PrintItemPcResponse
	ldr	r0, .L353+0x8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldr	r0, [r4]
	mov	r1, #0x1
	mov	r2, #0x1
	bl	MenuPrint
	add	r0, r6, #0
	bl	ItemStorage_DrawItemList
	ldrb	r3, [r5, #0x8]
	ldrb	r0, [r5]
	str	r0, [sp]
	mov	r0, #0xd
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x10
	mov	r2, #0x2
	bl	InitMenu
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L354:
	.align	2, 0
.L353:
	.word	gTasks+0x8
	.word	gSaveBlock1
	.word	gPCText_ItemPCOptionsText
.Lfe43:
	.size	 ItemStorage_GoBackToItemPCMenu,.Lfe43-ItemStorage_GoBackToItemPCMenu
	.align	2, 0
	.type	 ItemStorage_LoadPalette,function
	.thumb_func
ItemStorage_LoadPalette:
	push	{lr}
	add	sp, sp, #0xfffffff8
	ldr	r1, .L356
	mov	r0, sp
	mov	r2, #0x6
	bl	memcpy
	add	r0, sp, #0x4
	mov	r1, #0xdf
	mov	r2, #0x2
	bl	LoadPalette
	mov	r0, sp
	add	r0, r0, #0x2
	mov	r1, #0xd1
	mov	r2, #0x2
	bl	LoadPalette
	mov	r0, sp
	mov	r1, #0xd8
	mov	r2, #0x2
	bl	LoadPalette
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L357:
	.align	2, 0
.L356:
	.word	gUnknown_08406334
.Lfe44:
	.size	 ItemStorage_LoadPalette,.Lfe44-ItemStorage_LoadPalette
	.align	2, 0
	.type	 GetMailboxMailCount,function
	.thumb_func
GetMailboxMailCount:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x6
	ldr	r4, .L365
	ldr	r3, .L365+0x4
.L362:
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L361	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L361:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xf
	bls	.L362	@cond_branch
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L366:
	.align	2, 0
.L365:
	.word	gSaveBlock1
	.word	0x2b6c
.Lfe45:
	.size	 GetMailboxMailCount,.Lfe45-GetMailboxMailCount
	.align	2, 0
	.type	 Mailbox_UpdateMailList,function
	.thumb_func
Mailbox_UpdateMailList:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffdc
	mov	r2, #0x6
.L371:
	add	r1, r2, #0x1
	lsl	r0, r1, #0x18
	lsr	r3, r0, #0x18
	mov	sl, r1
	cmp	r3, #0xf
	bhi	.L370	@cond_branch
	ldr	r0, .L379
	mov	ip, r0
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldr	r1, .L379+0x4
	add	r1, r1, r0
	mov	r8, r1
	ldr	r2, .L379+0x8
	mov	r9, r2
	add	r4, r0, r2
.L375:
	mov	r5, r8
	ldrh	r0, [r5]
	cmp	r0, #0
	bne	.L374	@cond_branch
	mov	r1, sp
	add	r0, r4, #0
	ldmia	r0!, {r2, r6, r7}
	stmia	r1!, {r2, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r2, r5, r6}
	stmia	r1!, {r2, r5, r6}
	lsl	r2, r3, #0x3
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	add	r2, r2, r9
	add	r1, r4, #0
	add	r0, r2, #0
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r1!, {r5, r6, r7}
	mov	r0, sp
	ldmia	r0!, {r1, r5, r7}
	stmia	r2!, {r1, r5, r7}
	ldmia	r0!, {r1, r6, r7}
	stmia	r2!, {r1, r6, r7}
	ldmia	r0!, {r5, r6, r7}
	stmia	r2!, {r5, r6, r7}
.L374:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xf
	bls	.L375	@cond_branch
.L370:
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xe
	bls	.L371	@cond_branch
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L380:
	.align	2, 0
.L379:
	.word	gSaveBlock1
	.word	0x2b6c
	.word	0x2b4c
.Lfe46:
	.size	 Mailbox_UpdateMailList,.Lfe46-Mailbox_UpdateMailList
	.align	2, 0
	.type	 Mailbox_DrawMailList,function
	.thumb_func
Mailbox_DrawMailList:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r7, #0x0
	mov	r0, #0x1
	bl	SetCustomFont
	ldr	r1, .L395
	ldrb	r4, [r1, #0x2]
	ldrb	r0, [r1, #0x1]
	add	r0, r4, r0
	cmp	r4, r0
	bge	.L383	@cond_branch
	add	r6, r1, #0
	ldr	r0, .L395+0x4
	mov	r8, r0
.L385:
	ldrb	r0, [r6, #0x2]
	sub	r0, r4, r0
	lsl	r0, r0, #0x11
	lsr	r7, r0, #0x10
	add	r0, r7, #0x2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r3, r7, #0x3
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x15
	add	r1, r5, #0
	mov	r2, #0x1c
	bl	MenuFillWindowRectWithBlankTile
	ldrb	r0, [r6, #0x3]
	cmp	r4, r0
	beq	.L394	@cond_branch
	lsl	r1, r4, #0x3
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	ldr	r0, .L395+0x8
	add	r1, r1, r0
	mov	r0, r8
	bl	StringCopy
	mov	r0, r8
	bl	SanitizeNameString
	mov	r0, r8
	mov	r1, #0x16
	add	r2, r5, #0
	bl	MenuPrint
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldrb	r0, [r6, #0x2]
	ldrb	r1, [r6, #0x1]
	add	r0, r0, r1
	cmp	r4, r0
	blt	.L385	@cond_branch
.L383:
	ldr	r5, .L395
	ldrb	r0, [r5, #0x2]
	sub	r0, r4, r0
	cmp	r0, #0x8
	beq	.L389	@cond_branch
	add	r1, r7, #0x4
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x15
	mov	r2, #0x1c
	mov	r3, #0x12
	bl	MenuFillWindowRectWithBlankTile
.L389:
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0
	beq	.L390	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xc8
	mov	r2, #0x8
	bl	CreateVerticalScrollIndicators
	b	.L391
.L396:
	.align	2, 0
.L395:
	.word	gSharedMem+0x1fe00
	.word	gStringVar1
	.word	gSaveBlock1+0x2c36
.L394:
	ldr	r0, .L397
	mov	r1, #0x16
	add	r2, r5, #0
	bl	MenuPrint
	b	.L383
.L398:
	.align	2, 0
.L397:
	.word	gOtherText_CancelNoTerminator
.L390:
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
.L391:
	ldr	r0, .L399
	ldrb	r1, [r0, #0x2]
	ldrb	r2, [r0, #0x1]
	add	r1, r1, r2
	ldrb	r0, [r0, #0x3]
	cmp	r1, r0
	bgt	.L392	@cond_branch
	mov	r0, #0x1
	mov	r1, #0xc8
	mov	r2, #0x98
	bl	CreateVerticalScrollIndicators
	b	.L393
.L400:
	.align	2, 0
.L399:
	.word	gSharedMem+0x1fe00
.L392:
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
.L393:
	mov	r0, #0x0
	bl	SetCustomFont
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 Mailbox_DrawMailList,.Lfe47-Mailbox_DrawMailList
	.align	2, 0
	.type	 Mailbox_DrawMailboxMenu,function
	.thumb_func
Mailbox_DrawMailboxMenu:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_80F944C
	bl	LoadScrollIndicatorPalette
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x8
	mov	r3, #0x3
	bl	MenuDrawTextWindow
	ldr	r0, .L402
	mov	r1, #0x1
	mov	r2, #0x1
	bl	MenuPrint
	mov	r0, #0x14
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	add	r0, r4, #0
	bl	Mailbox_DrawMailList
	ldr	r0, .L402+0x4
	ldrb	r3, [r0, #0x1]
	ldrb	r0, [r0]
	str	r0, [sp]
	mov	r0, #0x8
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x15
	mov	r2, #0x2
	bl	InitMenu
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L403:
	.align	2, 0
.L402:
	.word	gPCText_Mailbox
	.word	gSharedMem+0x1fe00
.Lfe48:
	.size	 Mailbox_DrawMailboxMenu,.Lfe48-Mailbox_DrawMailboxMenu
	.align	2, 0
	.type	 Mailbox_ProcessInput,function
	.thumb_func
Mailbox_ProcessInput:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r5, #0
	ldr	r0, .L423
	ldrb	r1, [r0, #0x7]
	mov	r3, #0x80
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L405	@cond_branch
	ldr	r2, .L423+0x4
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L406	@cond_branch
	ldr	r4, .L423+0x8
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L407	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L421
.L424:
	.align	2, 0
.L423:
	.word	gPaletteFade
	.word	gMain
	.word	gSharedMem+0x1fe00
.L407:
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0
	beq	.L405	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	b	.L422
.L406:
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L411	@cond_branch
	ldr	r4, .L425
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L412	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L421:
	bl	MoveMenuCursor
	strb	r0, [r4]
	b	.L405
.L426:
	.align	2, 0
.L425:
	.word	gSharedMem+0x1fe00
.L412:
	ldrb	r0, [r4, #0x2]
	add	r0, r0, r1
	ldrb	r1, [r4, #0x3]
	cmp	r0, r1
	beq	.L405	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x2]
	add	r0, r0, #0x1
.L422:
	strb	r0, [r4, #0x2]
	add	r0, r5, #0
	bl	Mailbox_DrawMailList
	b	.L405
.L411:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L416	@cond_branch
	bl	HandleDestroyMenuCursors
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L427
	ldrb	r1, [r0, #0x2]
	ldrb	r2, [r0]
	add	r1, r1, r2
	ldrb	r0, [r0, #0x3]
	cmp	r1, r0
	bne	.L417	@cond_branch
	add	r0, r5, #0
	bl	Mailbox_TurnOff
	b	.L405
.L428:
	.align	2, 0
.L427:
	.word	gSharedMem+0x1fe00
.L417:
	bl	Mailbox_CloseScrollIndicators
	ldr	r0, .L429
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L429+0x4
	str	r0, [r1]
	b	.L405
.L430:
	.align	2, 0
.L429:
	.word	gTasks
	.word	Mailbox_PrintWhatToDoWithPlayerMailText
.L416:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L405	@cond_branch
	bl	HandleDestroyMenuCursors
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	Mailbox_TurnOff
.L405:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 Mailbox_ProcessInput,.Lfe49-Mailbox_ProcessInput
	.align	2, 0
	.type	 Mailbox_CloseScrollIndicators,function
	.thumb_func
Mailbox_CloseScrollIndicators:
	push	{lr}
	bl	BuyMenuFreeMemory
	mov	r0, #0x0
	bl	DestroyVerticalScrollIndicator
	mov	r0, #0x1
	bl	DestroyVerticalScrollIndicator
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 Mailbox_CloseScrollIndicators,.Lfe50-Mailbox_CloseScrollIndicators
	.align	2, 0
	.type	 Mailbox_PrintWhatToDoWithPlayerMailText,function
	.thumb_func
Mailbox_PrintWhatToDoWithPlayerMailText:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	ldr	r4, .L433
	ldr	r1, .L433+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x6
	ldrb	r1, [r1, #0x2]
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L433+0x8
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r4, #0
	bl	SanitizeNameString
	ldr	r4, .L433+0xc
	ldr	r1, .L433+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r2, .L433+0x14
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L434:
	.align	2, 0
.L433:
	.word	gStringVar1
	.word	gSharedMem+0x1fe00
	.word	gSaveBlock1+0x2b5e
	.word	gStringVar4
	.word	gOtherText_WhatWillYouDoMail
	.word	Mailbox_PrintMailOptions
.Lfe51:
	.size	 Mailbox_PrintWhatToDoWithPlayerMailText,.Lfe51-Mailbox_PrintWhatToDoWithPlayerMailText
	.align	2, 0
	.type	 Mailbox_ReturnToPlayerPC,function
	.thumb_func
Mailbox_ReturnToPlayerPC:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	add	r0, r4, #0
	bl	ReshowPlayerPC
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 Mailbox_ReturnToPlayerPC,.Lfe52-Mailbox_ReturnToPlayerPC
	.align	2, 0
	.type	 Mailbox_TurnOff,function
	.thumb_func
Mailbox_TurnOff:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Mailbox_CloseScrollIndicators
	ldr	r1, .L437
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L437+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L438:
	.align	2, 0
.L437:
	.word	gTasks
	.word	Mailbox_ReturnToPlayerPC
.Lfe53:
	.size	 Mailbox_TurnOff,.Lfe53-Mailbox_TurnOff
	.align	2, 0
	.type	 Mailbox_PrintMailOptions,function
	.thumb_func
Mailbox_PrintMailOptions:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x9
	bl	MenuDrawTextWindow
	ldr	r3, .L440
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x4
	bl	PrintMenuItems
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xb
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x4
	bl	InitMenu
	ldr	r1, .L440+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L440+0x8
	str	r1, [r0]
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	gMailboxMailOptions
	.word	gTasks
	.word	Mailbox_MailOptionsProcessInput
.Lfe54:
	.size	 Mailbox_PrintMailOptions,.Lfe54-Mailbox_PrintMailOptions
	.align	2, 0
	.type	 Mailbox_MailOptionsProcessInput,function
	.thumb_func
Mailbox_MailOptionsProcessInput:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r5, #0
	ldr	r2, .L450
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L443	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	bl	MoveMenuCursor
	b	.L444
.L451:
	.align	2, 0
.L450:
	.word	gMain
.L443:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	MoveMenuCursor
	b	.L444
.L445:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L447	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L452
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x15
	add	r4, r4, #0x4
	add	r0, r0, r4
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L444
.L453:
	.align	2, 0
.L452:
	.word	gMailboxMailOptions
.L447:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L444	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	Mailbox_Cancel
.L444:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 Mailbox_MailOptionsProcessInput,.Lfe55-Mailbox_MailOptionsProcessInput
	.align	2, 0
	.type	 Mailbox_DoMailRead,function
	.thumb_func
Mailbox_DoMailRead:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	mov	r1, #0x0
	bl	fade_screen
	ldr	r1, .L455
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L455+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L456:
	.align	2, 0
.L455:
	.word	gTasks
	.word	Mailbox_FadeAndReadMail
.Lfe56:
	.size	 Mailbox_DoMailRead,.Lfe56-Mailbox_DoMailRead
	.align	2, 0
	.type	 Mailbox_FadeAndReadMail,function
	.thumb_func
Mailbox_FadeAndReadMail:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L459
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L458	@cond_branch
	ldr	r0, .L459+0x4
	ldrb	r1, [r0]
	add	r1, r1, #0x6
	ldrb	r0, [r0, #0x2]
	add	r1, r1, r0
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L459+0x8
	add	r0, r0, r1
	ldr	r1, .L459+0xc
	mov	r2, #0x1
	bl	HandleReadMail
	add	r0, r4, #0
	bl	DestroyTask
.L458:
	pop	{r4}
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	gPaletteFade
	.word	gSharedMem+0x1fe00
	.word	gSaveBlock1+0x2b4c
	.word	Mailbox_ReturnToFieldFromReadMail
.Lfe57:
	.size	 Mailbox_FadeAndReadMail,.Lfe57-Mailbox_FadeAndReadMail
	.align	2, 0
	.type	 Mailbox_HandleReturnToProcessInput,function
	.thumb_func
Mailbox_HandleReturnToProcessInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	sub_807D770
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L462	@cond_branch
	ldr	r0, .L463
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L463+0x4
	str	r0, [r1]
.L462:
	pop	{r4}
	pop	{r0}
	bx	r0
.L464:
	.align	2, 0
.L463:
	.word	gTasks
	.word	Mailbox_ProcessInput
.Lfe58:
	.size	 Mailbox_HandleReturnToProcessInput,.Lfe58-Mailbox_HandleReturnToProcessInput
	.align	2, 0
	.type	 Mailbox_DoRedrawMailboxMenuAfterReturn,function
	.thumb_func
Mailbox_DoRedrawMailboxMenuAfterReturn:
	push	{lr}
	ldr	r0, .L466
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	Mailbox_DrawMailboxMenu
	bl	pal_fill_black
	pop	{r0}
	bx	r0
.L467:
	.align	2, 0
.L466:
	.word	Mailbox_HandleReturnToProcessInput
.Lfe59:
	.size	 Mailbox_DoRedrawMailboxMenuAfterReturn,.Lfe59-Mailbox_DoRedrawMailboxMenuAfterReturn
	.align	2, 0
	.type	 Mailbox_ReturnToFieldFromReadMail,function
	.thumb_func
Mailbox_ReturnToFieldFromReadMail:
	push	{lr}
	ldr	r0, .L469
	ldr	r1, .L469+0x4
	str	r1, [r0]
	ldr	r0, .L469+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L470:
	.align	2, 0
.L469:
	.word	gFieldCallback
	.word	Mailbox_DoRedrawMailboxMenuAfterReturn
	.word	c2_exit_to_overworld_2_switch
.Lfe60:
	.size	 Mailbox_ReturnToFieldFromReadMail,.Lfe60-Mailbox_ReturnToFieldFromReadMail
	.align	2, 0
	.type	 Mailbox_MoveToBag,function
	.thumb_func
Mailbox_MoveToBag:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	HandleDestroyMenuCursors
	ldr	r0, .L472
	ldr	r1, .L472+0x4
	bl	StringCopy
	ldr	r0, .L472+0x8
	mov	r1, #0x1
	mov	r2, #0x3
	bl	MenuPrint
	ldr	r1, .L472+0xc
	ldr	r2, .L472+0x10
	add	r0, r4, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	pop	{r4}
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	gStringVar1
	.word	gOtherText_MoveToBag
	.word	gHighlightedMoveToBagFormatText
	.word	gOtherText_MessageWillBeLost
	.word	Mailbox_DrawYesNoBeforeMove
.Lfe61:
	.size	 Mailbox_MoveToBag,.Lfe61-Mailbox_MoveToBag
	.align	2, 0
	.type	 Mailbox_DrawYesNoBeforeMove,function
	.thumb_func
Mailbox_DrawYesNoBeforeMove:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x14
	mov	r1, #0x8
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r1, .L475
	add	r0, r4, #0
	bl	DoYesNoFuncWithChoice
	pop	{r4}
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	ResumeFromWithdrawYesNoFuncList
.Lfe62:
	.size	 Mailbox_DrawYesNoBeforeMove,.Lfe62-Mailbox_DrawYesNoBeforeMove
	.align	2, 0
	.type	 Mailbox_DoMailMoveToBag,function
	.thumb_func
Mailbox_DoMailMoveToBag:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L481
	ldrb	r0, [r4]
	add	r0, r0, #0x6
	ldrb	r1, [r4, #0x2]
	add	r0, r0, r1
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L481+0x4
	add	r6, r1, r0
	mov	r0, #0x14
	mov	r1, #0x8
	mov	r2, #0x1a
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	ldrh	r0, [r6, #0x20]
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L478	@cond_branch
	ldr	r1, .L481+0x8
	ldr	r2, .L481+0xc
	add	r0, r5, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	b	.L479
.L482:
	.align	2, 0
.L481:
	.word	gSharedMem+0x1fe00
	.word	gSaveBlock1+0x2b4c
	.word	gOtherText_BagIsFull
	.word	Mailbox_DrawMailMenuAndDoProcessInput
.L478:
	ldr	r1, .L483
	ldr	r2, .L483+0x4
	add	r0, r5, #0
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	add	r0, r6, #0
	bl	ClearMailStruct
	bl	Mailbox_UpdateMailList
	ldrb	r0, [r4, #0x3]
	sub	r0, r0, #0x1
	strb	r0, [r4, #0x3]
	ldrb	r1, [r4, #0x3]
	ldrb	r0, [r4, #0x1]
	ldrb	r2, [r4, #0x2]
	add	r0, r0, r2
	cmp	r1, r0
	bge	.L480	@cond_branch
	cmp	r2, #0
	beq	.L480	@cond_branch
	sub	r0, r2, #0x1
	strb	r0, [r4, #0x2]
.L480:
	add	r0, r5, #0
	bl	ItemStorage_SetItemAndMailCount
.L479:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L484:
	.align	2, 0
.L483:
	.word	gOtherText_MailWasReturned
	.word	Mailbox_DrawMailMenuAndDoProcessInput
.Lfe63:
	.size	 Mailbox_DoMailMoveToBag,.Lfe63-Mailbox_DoMailMoveToBag
	.align	2, 0
	.type	 Mailbox_ReturnToInputAfterNo,function
	.thumb_func
Mailbox_ReturnToInputAfterNo:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x14
	mov	r1, #0x8
	mov	r2, #0x1a
	mov	r3, #0xd
	bl	MenuZeroFillWindowRect
	add	r0, r4, #0
	bl	Mailbox_DrawMailMenuAndDoProcessInput
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 Mailbox_ReturnToInputAfterNo,.Lfe64-Mailbox_ReturnToInputAfterNo
	.align	2, 0
	.type	 Mailbox_Give,function
	.thumb_func
Mailbox_Give:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L487	@cond_branch
	add	r0, r4, #0
	bl	Mailbox_NoPokemonForMail
	b	.L488
.L487:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	fade_screen
	ldr	r0, .L489
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L489+0x4
	str	r0, [r1]
.L488:
	pop	{r4}
	pop	{r0}
	bx	r0
.L490:
	.align	2, 0
.L489:
	.word	gTasks
	.word	Mailbox_DoGiveMailPokeMenu
.Lfe65:
	.size	 Mailbox_Give,.Lfe65-Mailbox_Give
	.align	2, 0
	.type	 Mailbox_DoGiveMailPokeMenu,function
	.thumb_func
Mailbox_DoGiveMailPokeMenu:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L493
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L492	@cond_branch
	ldr	r0, .L493+0x4
	bl	SetMainCallback2
	ldr	r1, .L493+0x8
	mov	r0, #0x3
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L492:
	pop	{r4}
	pop	{r0}
	bx	r0
.L494:
	.align	2, 0
.L493:
	.word	gPaletteFade
	.word	sub_808B020
	.word	gUnknown_02038561
.Lfe66:
	.size	 Mailbox_DoGiveMailPokeMenu,.Lfe66-Mailbox_DoGiveMailPokeMenu
	.align	2, 0
	.type	 Mailbox_UpdateMailListAfterDeposit,function
	.thumb_func
Mailbox_UpdateMailListAfterDeposit:
	push	{r4, r5, r6, lr}
	ldr	r0, .L497
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L497+0x4
	ldrb	r4, [r5, #0x3]
	bl	GetMailboxMailCount
	strb	r0, [r5, #0x3]
	bl	Mailbox_UpdateMailList
	ldrb	r0, [r5, #0x3]
	cmp	r4, r0
	beq	.L496	@cond_branch
	ldrb	r1, [r5, #0x3]
	ldrb	r0, [r5, #0x1]
	ldrb	r2, [r5, #0x2]
	add	r0, r0, r2
	cmp	r1, r0
	bge	.L496	@cond_branch
	cmp	r2, #0
	beq	.L496	@cond_branch
	sub	r0, r2, #0x1
	strb	r0, [r5, #0x2]
.L496:
	add	r0, r6, #0
	bl	ItemStorage_SetItemAndMailCount
	add	r0, r6, #0
	bl	Mailbox_DrawMailboxMenu
	bl	pal_fill_black
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L498:
	.align	2, 0
.L497:
	.word	Mailbox_HandleReturnToProcessInput
	.word	gSharedMem+0x1fe00
.Lfe67:
	.size	 Mailbox_UpdateMailListAfterDeposit,.Lfe67-Mailbox_UpdateMailListAfterDeposit
	.align	2, 0
	.globl	Mailbox_ReturnToMailListAfterDeposit
	.type	 Mailbox_ReturnToMailListAfterDeposit,function
	.thumb_func
Mailbox_ReturnToMailListAfterDeposit:
	push	{lr}
	ldr	r0, .L500
	ldr	r1, .L500+0x4
	str	r1, [r0]
	ldr	r0, .L500+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L501:
	.align	2, 0
.L500:
	.word	gFieldCallback
	.word	Mailbox_UpdateMailListAfterDeposit
	.word	c2_exit_to_overworld_2_switch
.Lfe68:
	.size	 Mailbox_ReturnToMailListAfterDeposit,.Lfe68-Mailbox_ReturnToMailListAfterDeposit
	.align	2, 0
	.type	 Mailbox_NoPokemonForMail,function
	.thumb_func
Mailbox_NoPokemonForMail:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L503
	ldr	r2, .L503+0x4
	mov	r3, #0x0
	bl	DisplayItemMessageOnField
	pop	{r0}
	bx	r0
.L504:
	.align	2, 0
.L503:
	.word	gOtherText_NoPokemon
	.word	Mailbox_DrawMailMenuAndDoProcessInput
.Lfe69:
	.size	 Mailbox_NoPokemonForMail,.Lfe69-Mailbox_NoPokemonForMail
	.align	2, 0
	.type	 Mailbox_Cancel,function
	.thumb_func
Mailbox_Cancel:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	HandleDestroyMenuCursors
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0xc
	mov	r3, #0x9
	bl	MenuZeroFillWindowRect
	add	r0, r4, #0
	bl	Mailbox_DrawMailMenuAndDoProcessInput
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 Mailbox_Cancel,.Lfe70-Mailbox_Cancel
	.align	2, 0
	.type	 Mailbox_DrawMailMenuAndDoProcessInput,function
	.thumb_func
Mailbox_DrawMailMenuAndDoProcessInput:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	Mailbox_DrawMailboxMenu
	ldr	r1, .L507
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L507+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gTasks
	.word	Mailbox_ProcessInput
.Lfe71:
	.size	 Mailbox_DrawMailMenuAndDoProcessInput,.Lfe71-Mailbox_DrawMailMenuAndDoProcessInput

	.lcomm	gPcItemMenuOptionsNum,1
.text
	.align	2, 0
