@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	sub_8104CAC
	.type	 sub_8104CAC,function
	.thumb_func
sub_8104CAC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_8104DA4
	ldr	r0, .L7
	add	r0, r0, #0x3d
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L7+0x4
	add	r7, r0, r1
	strh	r4, [r7, #0xa]
	mov	r6, #0x0
	ldr	r1, .L7+0x8
	lsl	r5, r4, #0x2
	add	r0, r5, r1
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L4	@cond_branch
	mov	r8, r1
.L5:
	mov	r0, r8
	add	r4, r5, r0
	ldr	r0, [r4]
	lsl	r2, r6, #0x2
	add	r2, r2, r0
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	mov	r3, #0x2
	ldrsh	r2, [r2, r3]
	bl	sub_8105BB4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r6, #0x4
	lsl	r2, r2, #0x1
	add	r1, r7, #0
	add	r1, r1, #0x8
	add	r1, r1, r2
	strh	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, [r4]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L5	@cond_branch
.L4:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gSharedMem
	.word	gTasks
	.word	gUnknown_083ED048
.Lfe1:
	.size	 sub_8104CAC,.Lfe1-sub_8104CAC
	.section .text_b
	.code	16
	.align	2, 0
	.globl	sub_8106448
	.type	 sub_8106448,function
	.thumb_func
sub_8106448:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L15
	ldr	r4, .L15+0x4
	add	r1, r4, #0
	bl	LZDecompressWram
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	mov	r5, #0xe9
	lsl	r5, r5, #0x5
	ldr	r1, .L15+0x8
	ldr	r6, .L15+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r7, #0x80
	lsl	r7, r7, #0x18
.L10:
	str	r4, [r1]
	str	r3, [r1, #0x4]
	str	r6, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r4, r4, r2
	add	r3, r3, r2
	sub	r5, r5, r2
	cmp	r5, r2
	bhi	.L10	@cond_branch
	str	r4, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r5, #0x1
	orr	r0, r0, r7
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldr	r0, .L15+0x10
	mov	r1, #0x0
	mov	r2, #0xa0
	bl	LoadPalette
	ldr	r0, .L15+0x14
	mov	r1, #0xd0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gSlotMachine_Gfx
	.word	gSharedMem+0x10000
	.word	0x40000d4
	.word	0x80000800
	.word	gUnknown_08E95A18
	.word	gPalette_83EDE24
.Lfe2:
	.size	 sub_8106448,.Lfe2-sub_8106448
	.align	2, 0
	.globl	sub_81064B8
	.type	 sub_81064B8,function
	.thumb_func
sub_81064B8:
	push	{lr}
	ldr	r0, .L18
	ldr	r1, .L18+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x2
	bl	CpuSet
	bl	LoadSlotMachineWheelOverlay
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gUnknown_08E95AB8
	.word	0x600e800
.Lfe3:
	.size	 sub_81064B8,.Lfe3-sub_81064B8
	.align	2, 0
	.type	 LoadSlotMachineWheelOverlay,function
	.thumb_func
LoadSlotMachineWheelOverlay:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r6, .L36
	mov	r3, #0x4
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	mov	ip, r0
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	mov	r9, r1
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	mov	r8, r2
.L24:
	mov	r0, #0x0
	lsl	r4, r3, #0x10
	asr	r5, r4, #0x10
.L28:
	lsl	r2, r0, #0x10
	asr	r2, r2, #0x10
	add	r1, r5, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	mov	r7, r8
	add	r3, r1, r7
	ldr	r7, .L36+0x4
	add	r0, r7, #0
	strh	r0, [r3]
	mov	r0, #0xd0
	lsl	r0, r0, #0x2
	add	r3, r1, r0
	ldr	r7, .L36+0x8
	add	r0, r7, #0
	strh	r0, [r3]
	mov	r0, ip
	add	r3, r1, r0
	ldr	r7, .L36+0xc
	add	r0, r7, #0
	strh	r0, [r3]
	add	r1, r1, r9
	ldr	r3, .L36+0x10
	add	r0, r3, #0
	strh	r0, [r1]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	lsr	r0, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0x3
	ble	.L28	@cond_branch
	asr	r3, r4, #0x10
	lsl	r1, r3, #0x1
	add	r1, r1, r6
	mov	r5, ip
	add	r2, r1, r5
	add	r7, r7, #0x5d
	add	r0, r7, #0
	strh	r0, [r2]
	add	r1, r1, r9
	ldr	r2, .L36+0x14
	add	r0, r2, #0
	strh	r0, [r1]
	mov	r0, #0x7
	ldr	r5, .L36+0x18
	add	r2, r5, #0
.L33:
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	lsl	r0, r1, #0x5
	add	r0, r0, r3
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r2, [r0]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0xb
	ble	.L33	@cond_branch
	mov	r7, #0xa0
	lsl	r7, r7, #0xb
	add	r0, r4, r7
	lsr	r3, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	ble	.L24	@cond_branch
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	0x600f000
	.word	0x2051
	.word	0x2851
	.word	0x2061
	.word	0x2861
	.word	0x28be
	.word	0x20bf
.Lfe4:
	.size	 LoadSlotMachineWheelOverlay,.Lfe4-LoadSlotMachineWheelOverlay
	.align	2, 0
	.globl	sub_81065A8
	.type	 sub_81065A8,function
	.thumb_func
sub_81065A8:
	push	{r4, r5, r6, lr}
	ldr	r5, [sp, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0xf
	ldr	r6, .L39
	add	r4, r0, r6
	strh	r1, [r4]
	ldr	r4, .L39+0x4
	add	r1, r0, r4
	strh	r2, [r1]
	add	r6, r6, #0x40
	add	r1, r0, r6
	strh	r3, [r1]
	ldr	r1, .L39+0x8
	add	r0, r0, r1
	strh	r5, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	0x600ebc0
	.word	0x600ebc2
	.word	0x600ec02
.Lfe5:
	.size	 sub_81065A8,.Lfe5-sub_81065A8
	.align	2, 0
	.globl	sub_81065DC
	.type	 sub_81065DC,function
	.thumb_func
sub_81065DC:
	push	{r4, r5, lr}
	ldr	r0, .L52
	ldr	r1, .L52+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x2
	bl	CpuSet
	ldr	r5, .L52+0x8
	mov	r1, #0x0
	mov	r4, #0x0
.L45:
	mov	r0, #0x0
	lsl	r3, r1, #0x10
	asr	r2, r3, #0xb
.L49:
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	strh	r4, [r0]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x10
	lsr	r0, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x1d
	ble	.L49	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L45	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	gUnknown_08E95FB8
	.word	0x600e800
	.word	0x600f000
.Lfe6:
	.size	 sub_81065DC,.Lfe6-sub_81065DC
.text
	.align	2, 0
