@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	InitDewfordTrend
	.type	 InitDewfordTrend,function
	.thumb_func
InitDewfordTrend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	ldr	r7, .L11
	ldr	r0, .L11+0x4
	add	r0, r0, r7
	mov	r9, r0
	mov	r1, #0x1
	mov	r8, r1
.L6:
	mov	r0, #0xa
	bl	sub_80EB72C
	lsl	r4, r6, #0x3
	add	r5, r4, r7
	ldr	r2, .L11+0x8
	add	r1, r5, r2
	strh	r0, [r1]
	bl	Random
	mov	r1, r8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L7	@cond_branch
	mov	r0, #0xc
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	gSaveBlock1
	.word	0x2dd4
	.word	0x2dd8
.L7:
	mov	r0, #0xd
.L10:
	bl	sub_80EB72C
	ldr	r2, .L13
	add	r1, r5, r2
	strh	r0, [r1]
	bl	Random
	add	r3, r4, r7
	mov	r2, r8
	and	r2, r2, r0
	ldr	r5, .L13+0x4
	add	r3, r3, r5
	lsl	r2, r2, #0x6
	ldrb	r0, [r3]
	mov	r5, #0x41
	neg	r5, r5
	add	r1, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	mov	r1, r9
	add	r0, r4, r1
	bl	sub_80FA740
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x4
	bls	.L6	@cond_branch
	ldr	r0, .L13+0x8
	mov	r1, #0x5
	mov	r2, #0x0
	bl	sub_80FA46C
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	0x2dda
	.word	0x2dd5
	.word	gSaveBlock1+0x2dd4
.Lfe1:
	.size	 InitDewfordTrend,.Lfe1-InitDewfordTrend
	.align	2, 0
	.globl	UpdateDewfordTrendPerDay
	.type	 UpdateDewfordTrendPerDay,function
	.thumb_func
UpdateDewfordTrendPerDay:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.LCB116
	b	.L16	@long jump
.LCB116:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x7f
	mov	r9, r1
	mov	r2, #0x80
	neg	r2, r2
	mov	r8, r2
.L20:
	ldr	r2, [sp]
	mov	r4, sl
	lsl	r0, r4, #0x3
	ldr	r1, .L31
	add	r5, r0, r1
	ldrb	r6, [r5, #0x1]
	mov	r0, #0x40
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L21	@cond_branch
	ldrb	r4, [r5]
	lsl	r3, r4, #0x19
	lsr	r1, r3, #0x19
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bcc	.L22	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, r2
	mov	r2, r9
	and	r0, r0, r2
	mov	r1, r8
	and	r1, r1, r4
	orr	r1, r1, r0
	strb	r1, [r5]
	mov	r0, #0x7f
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L19	@cond_branch
	mov	r0, #0x40
	orr	r0, r0, r6
	b	.L30
.L32:
	.align	2, 0
.L31:
	.word	gSaveBlock1+0x2dd4
.L22:
	lsr	r0, r3, #0x19
	sub	r2, r2, r0
	mov	r0, r8
	and	r0, r0, r4
	strb	r0, [r5]
	mov	r0, #0x40
	orr	r0, r0, r6
	strb	r0, [r5, #0x1]
.L21:
	ldrb	r7, [r5]
	lsl	r0, r7, #0x19
	lsr	r0, r0, #0x19
	add	r4, r0, r2
	ldrh	r0, [r5]
	lsl	r6, r0, #0x12
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	lsr	r1, r6, #0x19
	cmp	r0, r1
	bls	.L24	@cond_branch
	add	r0, r4, #0
	bl	__umodsi3
	add	r3, r0, #0
	lsr	r1, r6, #0x19
	add	r0, r4, #0
	str	r3, [sp, #0x4]
	bl	__udivsi3
	add	r4, r0, #0
	mov	r0, #0x1
	eor	r4, r4, r0
	and	r4, r4, r0
	lsl	r2, r4, #0x6
	ldrb	r0, [r5, #0x1]
	mov	r4, #0x41
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x1]
	mov	r1, #0x40
	and	r0, r0, r1
	ldr	r3, [sp, #0x4]
	cmp	r0, #0
	beq	.L25	@cond_branch
	add	r1, r3, #0
	mov	r0, r9
	and	r1, r1, r0
	mov	r0, r8
	and	r0, r0, r7
	orr	r0, r0, r1
	strb	r0, [r5]
	b	.L19
.L25:
	ldrh	r0, [r5]
	lsl	r0, r0, #0x12
	lsr	r0, r0, #0x19
	sub	r0, r0, r3
	mov	r1, r9
	and	r0, r0, r1
	mov	r1, r8
	and	r1, r1, r7
	orr	r1, r1, r0
	strb	r1, [r5]
	b	.L19
.L24:
	mov	r2, r9
	and	r4, r4, r2
	mov	r0, r8
	and	r0, r0, r7
	orr	r0, r0, r4
	strb	r0, [r5]
	lsl	r0, r0, #0x19
	ldrh	r1, [r5]
	lsl	r1, r1, #0x12
	lsr	r0, r0, #0x19
	lsr	r1, r1, #0x19
	cmp	r0, r1
	bne	.L19	@cond_branch
	ldrb	r0, [r5, #0x1]
	mov	r4, #0x41
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
.L30:
	strb	r0, [r5, #0x1]
.L19:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	cmp	r0, #0x4
	bls	.L20	@cond_branch
	ldr	r0, .L33
	mov	r1, #0x5
	mov	r2, #0x0
	bl	sub_80FA46C
.L16:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gSaveBlock1+0x2dd4
.Lfe2:
	.size	 UpdateDewfordTrendPerDay,.Lfe2-UpdateDewfordTrendPerDay
	.align	2, 0
	.globl	sub_80FA364
	.type	 sub_80FA364,function
	.thumb_func
sub_80FA364:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [sp]
	str	r1, [sp, #0x4]
	add	r0, r4, #0
	bl	SB1ContainsWords
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L36	@cond_branch
	ldr	r5, .L51
	add	r0, r5, #0
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L37	@cond_branch
	add	r0, r5, #0
	bl	FlagSet
	ldr	r0, .L51+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L37	@cond_branch
	ldr	r1, .L51+0x8
	ldrh	r2, [r4]
	ldr	r3, .L51+0xc
	add	r0, r1, r3
	strh	r2, [r0]
	ldrh	r0, [r4, #0x2]
	ldr	r2, .L51+0x10
	add	r1, r1, r2
	strh	r0, [r1]
	mov	r0, #0x1
	b	.L50
.L52:
	.align	2, 0
.L51:
	.word	0x833
	.word	0x834
	.word	gSaveBlock1
	.word	0x2dd8
	.word	0x2dda
.L37:
	ldrh	r1, [r4, #0x2]
	lsl	r1, r1, #0x10
	ldrh	r0, [r4]
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	ldr	r0, [sp]
	orr	r0, r0, r1
	str	r0, [sp]
	mov	r0, sp
	bl	sub_80FA740
	mov	r6, #0x0
.L42:
	lsl	r4, r6, #0x3
	ldr	r5, .L53
	add	r1, r4, r5
	mov	r0, sp
	mov	r2, #0x0
	bl	sub_80FA670
	lsl	r0, r0, #0x18
	add	r7, r4, #0
	cmp	r0, #0
	beq	.L41	@cond_branch
	mov	r3, #0x4
	ldr	r0, .L53+0x4
	add	r0, r0, r5
	mov	ip, r0
	cmp	r3, r6
	bls	.L45	@cond_branch
	mov	r5, ip
	ldr	r4, .L53+0x8
.L46:
	lsl	r2, r3, #0x3
	add	r2, r2, r5
	add	r2, r2, r4
	sub	r3, r3, #0x1
	lsl	r0, r3, #0x3
	add	r0, r0, r5
	add	r0, r0, r4
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	cmp	r3, r6
	bhi	.L46	@cond_branch
.L45:
	mov	r3, ip
	add	r2, r7, r3
	ldr	r0, .L53+0x8
	add	r2, r2, r0
	ldr	r0, [sp]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	mov	r0, #0x0
	cmp	r6, #0
	bne	.L50	@cond_branch
	mov	r0, #0x1
	b	.L50
.L54:
	.align	2, 0
.L53:
	.word	gSaveBlock1+0x2dd4
	.word	0xffffd22c
	.word	0x2dd4
.L41:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x4
	bls	.L42	@cond_branch
	ldr	r0, [sp]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r5, #0x20]
	str	r1, [r5, #0x24]
.L36:
	mov	r0, #0x0
.L50:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 sub_80FA364,.Lfe3-sub_80FA364
	.align	2, 0
	.type	 sub_80FA46C,function
	.thumb_func
sub_80FA46C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	mov	r2, #0x0
	cmp	r2, r7
	bcs	.L57	@cond_branch
.L59:
	add	r1, r2, #0x1
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	mov	r8, r1
	cmp	r5, r7
	bcs	.L58	@cond_branch
	lsl	r0, r2, #0x3
	mov	r1, r9
	add	r6, r1, r0
.L63:
	lsl	r0, r5, #0x3
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, sl
	bl	sub_80FA670
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L62	@cond_branch
	ldr	r2, [r4]		@ created by thumb_load_double_from_address
	ldr	r3, [r4, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r6]		@ created by thumb_load_double_from_address
	ldr	r1, [r6, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r4]
	str	r1, [r4, #0x4]
	str	r2, [r6]
	str	r3, [r6, #0x4]
.L62:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r7
	bcc	.L63	@cond_branch
.L58:
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r7
	bcc	.L59	@cond_branch
.L57:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_80FA46C,.Lfe4-sub_80FA46C
	.align	2, 0
	.globl	sub_80FA4E4
	.type	 sub_80FA4E4,function
	.thumb_func
sub_80FA4E4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	add	r5, r1, #0
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r4, #0x0
	cmp	r4, r8
	bcs	.L69	@cond_branch
.L71:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L91
	add	r0, r0, r1
	mov	r1, r4
	mul	r1, r1, r5
	add	r1, r6, r1
	mov	r2, #0x28
	bl	memcpy
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r8
	bcc	.L71	@cond_branch
.L69:
	ldr	r5, .L91
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r3, r5, r0
	mov	r7, #0x0
	mov	r4, #0x0
	cmp	r4, r8
	bcs	.L74	@cond_branch
.L76:
	mov	r6, #0x0
.L80:
	add	r0, r5, #0
	add	r1, r7, #0
	str	r3, [sp]
	bl	sub_80FA828
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r3, [sp]
	cmp	r0, #0
	bge	.L81	@cond_branch
	ldr	r0, [r5]		@ created by thumb_load_double_from_address
	ldr	r1, [r5, #0x4]		@ created by thumb_load_double_from_address
	stmia	r3!, {r0, r1}
	add	r0, r7, #0x1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	b	.L82
.L92:
	.align	2, 0
.L91:
	.word	gSharedMem+0x7800
.L81:
	lsl	r1, r0, #0x3
	ldr	r0, .L93
	add	r2, r1, r0
	ldrb	r1, [r2]
	lsl	r1, r1, #0x19
	ldrb	r0, [r5]
	lsl	r0, r0, #0x19
	cmp	r1, r0
	bcs	.L82	@cond_branch
	ldr	r0, [r5]		@ created by thumb_load_double_from_address
	ldr	r1, [r5, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
.L82:
	add	r5, r5, #0x8
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x4
	bls	.L80	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r8
	bcc	.L76	@cond_branch
.L74:
	ldr	r4, .L93
	add	r0, r4, #0
	add	r1, r7, #0
	mov	r2, #0x2
	bl	sub_80FA46C
	add	r5, r4, #0
	ldr	r3, .L93+0x4
	mov	r4, #0x0
.L89:
	ldmia	r5!, {r0, r1}
	stmia	r3!, {r0, r1}
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x4
	bls	.L89	@cond_branch
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gSharedMem+0x7900
	.word	gSaveBlock1+0x2dd4
.Lfe5:
	.size	 sub_80FA4E4,.Lfe5-sub_80FA4E4
	.align	2, 0
	.globl	sub_80FA5BC
	.type	 sub_80FA5BC,function
	.thumb_func
sub_80FA5BC:
	push	{lr}
	ldr	r0, .L96
	ldrh	r1, [r0]
	lsl	r1, r1, #0x3
	ldr	r0, .L96+0x4
	add	r1, r1, r0
	ldr	r0, .L96+0x8
	add	r1, r1, #0x4
	mov	r2, #0x2
	mov	r3, #0x1
	bl	ConvertEasyChatWordsToString
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	gSpecialVar_0x8004
	.word	gSaveBlock1+0x2dd4
	.word	gStringVar1
.Lfe6:
	.size	 sub_80FA5BC,.Lfe6-sub_80FA5BC
	.align	2, 0
	.globl	sub_80FA5E4
	.type	 sub_80FA5E4,function
	.thumb_func
sub_80FA5E4:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r3, .L101
	ldr	r1, .L101+0x4
	add	r0, r3, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x19
	ldr	r2, .L101+0x8
	add	r0, r3, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x19
	sub	r1, r1, r0
	cmp	r1, #0x1
	bgt	.L99	@cond_branch
	.code	16
	ldr	r1, .L101+0xc
	add	r0, r3, r1
	ldrb	r1, [r0]
	mov	r2, #0x40
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L99	@cond_branch
	ldr	r1, .L101+0x10
	add	r0, r3, r1
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r0, r0
	lsr	r4, r0, #0x1f
.L99:
	ldr	r0, .L101+0x14
	strh	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L102:
	.align	2, 0
.L101:
	.word	gSaveBlock1
	.word	0x2dd4
	.word	0x2ddc
	.word	0x2dd5
	.word	0x2ddd
	.word	gScriptResult
.Lfe7:
	.size	 sub_80FA5E4,.Lfe7-sub_80FA5E4
	.align	2, 0
	.globl	sub_80FA648
	.type	 sub_80FA648,function
	.thumb_func
sub_80FA648:
	ldr	r2, .L104
	ldr	r0, .L104+0x4
	ldr	r3, .L104+0x8
	add	r1, r0, r3
	add	r3, r3, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x7
	and	r0, r0, r1
	strh	r0, [r2]
	bx	lr
.L105:
	.align	2, 0
.L104:
	.word	gScriptResult
	.word	gSaveBlock1
	.word	0x2dd8
.Lfe8:
	.size	 sub_80FA648,.Lfe8-sub_80FA648
	.align	2, 0
	.type	 sub_80FA670,function
	.thumb_func
sub_80FA670:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r2, #0
	cmp	r2, #0x1
	beq	.L113	@cond_branch
	cmp	r2, #0x1
	bgt	.L131	@cond_branch
	cmp	r2, #0
	beq	.L108	@cond_branch
	b	.L107
.L131:
	cmp	r0, #0x2
	beq	.L118	@cond_branch
	b	.L107
.L108:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x19
	ldrb	r0, [r5]
	lsl	r0, r0, #0x19
	cmp	r1, r0
	bhi	.L128	@cond_branch
	cmp	r1, r0
	bcc	.L135	@cond_branch
	ldrh	r0, [r3]
	lsl	r3, r0, #0x12
	ldrh	r0, [r5]
	lsl	r2, r0, #0x12
	lsr	r1, r3, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bhi	.L128	@cond_branch
	lsr	r1, r3, #0x19
	lsr	r0, r2, #0x19
	b	.L116
.L113:
	ldrh	r0, [r3]
	lsl	r4, r0, #0x12
	ldrh	r0, [r5]
	lsl	r2, r0, #0x12
	lsr	r1, r4, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bhi	.L128	@cond_branch
	lsr	r1, r4, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bcc	.L135	@cond_branch
	ldrb	r0, [r3]
	lsl	r1, r0, #0x19
	ldrb	r0, [r5]
	lsl	r0, r0, #0x19
	cmp	r1, r0
	bhi	.L128	@cond_branch
.L116:
	cmp	r1, r0
	bcs	.L107	@cond_branch
.L135:
	mov	r0, #0x0
	b	.L132
.L118:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x19
	ldrb	r0, [r5]
	lsl	r0, r0, #0x19
	cmp	r1, r0
	bhi	.L128	@cond_branch
	cmp	r1, r0
	bcc	.L135	@cond_branch
	ldrh	r0, [r3]
	lsl	r4, r0, #0x12
	ldrh	r0, [r5]
	lsl	r2, r0, #0x12
	lsr	r1, r4, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bhi	.L128	@cond_branch
	lsr	r1, r4, #0x19
	lsr	r0, r2, #0x19
	cmp	r1, r0
	bcc	.L135	@cond_branch
	ldrh	r1, [r3, #0x2]
	ldrh	r0, [r5, #0x2]
	cmp	r1, r0
	bhi	.L128	@cond_branch
	cmp	r1, r0
	bcc	.L135	@cond_branch
	ldrh	r1, [r3, #0x4]
	ldrh	r0, [r5, #0x4]
	cmp	r1, r0
	bhi	.L128	@cond_branch
	cmp	r1, r0
	bcc	.L135	@cond_branch
	ldrh	r1, [r3, #0x6]
	ldrh	r0, [r5, #0x6]
	cmp	r1, r0
	bhi	.L128	@cond_branch
	cmp	r1, r0
	bcc	.L135	@cond_branch
.L128:
	mov	r0, #0x1
	b	.L132
.L107:
	bl	Random
	mov	r1, #0x1
	and	r0, r0, r1
.L132:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_80FA670,.Lfe9-sub_80FA670
	.align	2, 0
	.type	 sub_80FA740,function
	.thumb_func
sub_80FA740:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x62
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x32
	bls	.L137	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x62
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x50
	bls	.L137	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x62
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L137:
	add	r1, r4, #0
	add	r1, r1, #0x1e
	mov	r0, #0x7f
	and	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrh	r2, [r5]
	ldr	r0, .L139
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0x1
	bl	__modsi3
	add	r0, r0, #0x1e
	mov	r1, #0x7f
	and	r0, r0, r1
	ldrb	r2, [r5]
	mov	r1, #0x80
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5]
	bl	Random
	strh	r0, [r5, #0x2]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	0xffffc07f
.Lfe10:
	.size	 sub_80FA740,.Lfe10-sub_80FA740
	.align	2, 0
	.type	 SB1ContainsWords,function
	.thumb_func
SB1ContainsWords:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r4, #0x0
.L145:
	lsl	r1, r4, #0x3
	ldr	r0, .L149
	add	r1, r1, r0
	add	r0, r5, #0
	bl	IsEasyChatPairEqual
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L144	@cond_branch
	mov	r0, #0x1
	b	.L148
.L150:
	.align	2, 0
.L149:
	.word	gSaveBlock1+0x2dd8
.L144:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x4
	bls	.L145	@cond_branch
	mov	r0, #0x0
.L148:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 SB1ContainsWords,.Lfe11-SB1ContainsWords
	.align	2, 0
	.type	 IsEasyChatPairEqual,function
	.thumb_func
IsEasyChatPairEqual:
	push	{r4, lr}
	add	r3, r0, #0
	add	r2, r1, #0
	mov	r4, #0x0
.L155:
	ldrh	r1, [r3]
	ldrh	r0, [r2]
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	cmp	r1, r0
	beq	.L154	@cond_branch
	mov	r0, #0x0
	b	.L158
.L154:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1
	bls	.L155	@cond_branch
	mov	r0, #0x1
.L158:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 IsEasyChatPairEqual,.Lfe12-IsEasyChatPairEqual
	.align	2, 0
	.type	 sub_80FA828,function
	.thumb_func
sub_80FA828:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r6, .L167
	mov	r4, #0x0
	cmp	r4, r5
	bge	.L161	@cond_branch
.L163:
	add	r1, r6, #0x4
	add	r0, r7, #0x4
	bl	IsEasyChatPairEqual
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L164	@cond_branch
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	b	.L166
.L168:
	.align	2, 0
.L167:
	.word	gSharedMem+0x7900
.L164:
	add	r6, r6, #0x8
	lsl	r0, r4, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r5
	blt	.L163	@cond_branch
.L161:
	mov	r0, #0x1
	neg	r0, r0
.L166:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 sub_80FA828,.Lfe13-sub_80FA828
.text
	.align	2, 0
