@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	FreezeMapObject
	.type	 FreezeMapObject,function
	.thumb_func
FreezeMapObject:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5]
	mov	r0, #0xa0
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldrb	r0, [r5, #0x1]
	mov	r4, #0x1
	orr	r0, r0, r4
	strb	r0, [r5, #0x1]
	ldr	r3, .L6
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x7
	ldrb	r2, [r5, #0x2]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x2]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	lsr	r1, r1, #0x7
	and	r1, r1, r4
	ldrb	r2, [r5, #0x3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x0
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gSprites
.L3:
	mov	r0, #0x1
.L5:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 FreezeMapObject,.Lfe1-FreezeMapObject
	.align	2, 0
	.globl	FreezeMapObjects
	.type	 FreezeMapObjects,function
	.thumb_func
FreezeMapObjects:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L15
.L12:
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L11	@cond_branch
	ldr	r0, .L15+0x4
	ldrb	r0, [r0, #0x5]
	cmp	r4, r0
	beq	.L11	@cond_branch
	add	r0, r1, #0
	bl	FreezeMapObject
.L11:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L12	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gMapObjects
	.word	gPlayerAvatar
.Lfe2:
	.size	 FreezeMapObjects,.Lfe2-FreezeMapObjects
	.align	2, 0
	.globl	FreezeMapObjectsExceptOne
	.type	 FreezeMapObjectsExceptOne,function
	.thumb_func
FreezeMapObjectsExceptOne:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r6, .L24
.L21:
	cmp	r4, r5
	beq	.L20	@cond_branch
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldr	r0, .L24+0x4
	ldrb	r0, [r0, #0x5]
	cmp	r4, r0
	beq	.L20	@cond_branch
	add	r0, r1, #0
	bl	FreezeMapObject
.L20:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L21	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	gMapObjects
	.word	gPlayerAvatar
.Lfe3:
	.size	 FreezeMapObjectsExceptOne,.Lfe3-FreezeMapObjectsExceptOne
	.align	2, 0
	.globl	UnfreezeMapObject
	.type	 UnfreezeMapObject,function
	.thumb_func
UnfreezeMapObject:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r2, [r5]
	ldr	r1, .L28
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, r1
	bne	.L27	@cond_branch
	ldrb	r1, [r5, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r5, #0x1]
	ldr	r4, .L28+0x4
	ldrb	r0, [r5, #0x4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r5, #0x2]
	add	r1, r1, #0x2c
	lsr	r2, r2, #0x7
	lsl	r2, r2, #0x6
	ldrb	r3, [r1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r5, #0x4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r1, [r5, #0x3]
	lsl	r1, r1, #0x1f
	lsr	r1, r1, #0x1f
	add	r2, r2, #0x2c
	lsl	r1, r1, #0x7
	ldrb	r3, [r2]
	mov	r0, #0x7f
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
.L27:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	0x101
	.word	gSprites
.Lfe4:
	.size	 UnfreezeMapObject,.Lfe4-UnfreezeMapObject
	.align	2, 0
	.globl	UnfreezeMapObjects
	.type	 UnfreezeMapObjects,function
	.thumb_func
UnfreezeMapObjects:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L37
.L34:
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L33	@cond_branch
	add	r0, r1, #0
	bl	UnfreezeMapObject
.L33:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L34	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gMapObjects
.Lfe5:
	.size	 UnfreezeMapObjects,.Lfe5-UnfreezeMapObjects
	.align	2, 0
	.globl	Step1
	.type	 Step1,function
	.thumb_func
Step1:
	lsl	r1, r1, #0x18
	ldr	r2, .L40
	lsr	r1, r1, #0x16
	add	r1, r1, r2
	ldrh	r2, [r1]
	ldrh	r3, [r0, #0x20]
	add	r2, r2, r3
	strh	r2, [r0, #0x20]
	ldrh	r1, [r1, #0x2]
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	strh	r1, [r0, #0x22]
	bx	lr
.L41:
	.align	2, 0
.L40:
	.word	gDirectionToVector
.Lfe6:
	.size	 Step1,.Lfe6-Step1
	.align	2, 0
	.globl	Step2
	.type	 Step2,function
	.thumb_func
Step2:
	lsl	r1, r1, #0x18
	ldr	r2, .L43
	lsr	r1, r1, #0x16
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r2, r2, #0x1
	ldrh	r3, [r0, #0x20]
	add	r2, r2, r3
	strh	r2, [r0, #0x20]
	ldrh	r1, [r1, #0x2]
	lsl	r1, r1, #0x1
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	strh	r1, [r0, #0x22]
	bx	lr
.L44:
	.align	2, 0
.L43:
	.word	gDirectionToVector
.Lfe7:
	.size	 Step2,.Lfe7-Step2
	.align	2, 0
	.globl	Step3
	.type	 Step3,function
	.thumb_func
Step3:
	lsl	r1, r1, #0x18
	ldr	r2, .L46
	lsr	r1, r1, #0x16
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r3, r2, #0x1
	add	r2, r2, r3
	ldrh	r3, [r0, #0x20]
	add	r2, r2, r3
	strh	r2, [r0, #0x20]
	ldrh	r1, [r1, #0x2]
	lsl	r2, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	strh	r1, [r0, #0x22]
	bx	lr
.L47:
	.align	2, 0
.L46:
	.word	gDirectionToVector
.Lfe8:
	.size	 Step3,.Lfe8-Step3
	.align	2, 0
	.globl	Step4
	.type	 Step4,function
	.thumb_func
Step4:
	lsl	r1, r1, #0x18
	ldr	r2, .L49
	lsr	r1, r1, #0x16
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r2, r2, #0x2
	ldrh	r3, [r0, #0x20]
	add	r2, r2, r3
	strh	r2, [r0, #0x20]
	ldrh	r1, [r1, #0x2]
	lsl	r1, r1, #0x2
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	strh	r1, [r0, #0x22]
	bx	lr
.L50:
	.align	2, 0
.L49:
	.word	gDirectionToVector
.Lfe9:
	.size	 Step4,.Lfe9-Step4
	.align	2, 0
	.globl	Step8
	.type	 Step8,function
	.thumb_func
Step8:
	lsl	r1, r1, #0x18
	ldr	r2, .L52
	lsr	r1, r1, #0x16
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r2, r2, #0x3
	ldrh	r3, [r0, #0x20]
	add	r2, r2, r3
	strh	r2, [r0, #0x20]
	ldrh	r1, [r1, #0x2]
	lsl	r1, r1, #0x3
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	strh	r1, [r0, #0x22]
	bx	lr
.L53:
	.align	2, 0
.L52:
	.word	gDirectionToVector
.Lfe10:
	.size	 Step8,.Lfe10-Step8
	.align	2, 0
	.globl	oamt_npc_ministep_reset
	.type	 oamt_npc_ministep_reset,function
	.thumb_func
oamt_npc_ministep_reset:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x0
	strh	r1, [r0, #0x34]
	strh	r2, [r0, #0x36]
	strh	r3, [r0, #0x38]
	bx	lr
.Lfe11:
	.size	 oamt_npc_ministep_reset,.Lfe11-oamt_npc_ministep_reset
	.align	2, 0
	.globl	obj_npc_ministep
	.type	 obj_npc_ministep,function
	.thumb_func
obj_npc_ministep:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L59
	mov	r0, #0x36
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x1
	add	r0, r0, r5
	mov	r3, #0x38
	ldrsh	r1, [r4, r3]
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	cmp	r1, r0
	bge	.L57	@cond_branch
	ldr	r1, .L59+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	mov	r1, #0x38
	ldrsh	r2, [r4, r1]
	ldr	r0, [r0]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, [r2]
	add	r0, r4, #0
	bl	_call_via_r2
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x0
	ldrsh	r1, [r1, r3]
	cmp	r0, r1
	blt	.L57	@cond_branch
	mov	r0, #0x1
	b	.L58
.L60:
	.align	2, 0
.L59:
	.word	gUnknown_08376194
	.word	gUnknown_08376180
.L57:
	mov	r0, #0x0
.L58:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 obj_npc_ministep,.Lfe12-obj_npc_ministep
	.align	2, 0
	.globl	sub_806467C
	.type	 sub_806467C,function
	.thumb_func
sub_806467C:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	strh	r1, [r0, #0x34]
	strh	r2, [r0, #0x36]
	strh	r2, [r0, #0x38]
	bx	lr
.Lfe13:
	.size	 sub_806467C,.Lfe13-sub_806467C
	.align	2, 0
	.globl	sub_806468C
	.type	 sub_806468C,function
	.thumb_func
sub_806468C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x36]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L63	@cond_branch
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	Step1
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
.L63:
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf
	bgt	.L64	@cond_branch
	mov	r0, #0x0
	b	.L66
.L64:
	mov	r0, #0x1
.L66:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 sub_806468C,.Lfe14-sub_806468C
	.align	2, 0
	.globl	sub_80646C8
	.type	 sub_80646C8,function
	.thumb_func
sub_80646C8:
	lsl	r1, r1, #0x18
	ldr	r2, .L68
	lsr	r1, r1, #0x16
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r1, [r1]
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	bx	lr
.L69:
	.align	2, 0
.L68:
	.word	gUnknown_083761D0
.Lfe15:
	.size	 sub_80646C8,.Lfe15-sub_80646C8
	.align	2, 0
	.globl	sub_80646E4
	.type	 sub_80646E4,function
	.thumb_func
sub_80646E4:
	push	{r4, lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r4, #0x0
	strh	r1, [r0, #0x34]
	strh	r2, [r0, #0x36]
	strh	r3, [r0, #0x38]
	strh	r4, [r0, #0x3a]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_80646E4,.Lfe16-sub_80646E4
	.align	2, 0
	.globl	sub_8064704
	.type	 sub_8064704,function
	.thumb_func
sub_8064704:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff4
	add	r4, r0, #0
	ldr	r1, .L75
	mov	r0, sp
	mov	r2, #0x6
	bl	memcpy
	add	r5, sp, #0x8
	ldr	r1, .L75+0x4
	add	r0, r5, #0
	mov	r2, #0x3
	bl	memcpy
	mov	r6, #0x0
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L72	@cond_branch
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	Step1
.L72:
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	add	r1, r5, r1
	ldrb	r1, [r1]
	asr	r0, r0, r1
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	sub_80646C8
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x3a]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x3a]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	asr	r0, r0, #0x11
	cmp	r1, r0
	bne	.L73	@cond_branch
	mov	r6, #0x1
.L73:
	cmp	r1, r2
	blt	.L74	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	mov	r6, #0xff
.L74:
	add	r0, r6, #0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L76:
	.align	2, 0
.L75:
	.word	gUnknown_083761DC
	.word	gUnknown_083761E2
.Lfe17:
	.size	 sub_8064704,.Lfe17-sub_8064704
	.align	2, 0
	.globl	sub_806478C
	.type	 sub_806478C,function
	.thumb_func
sub_806478C:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff4
	add	r5, r0, #0
	ldr	r1, .L81
	mov	r0, sp
	mov	r2, #0x6
	bl	memcpy
	add	r4, sp, #0x8
	ldr	r1, .L81+0x4
	add	r0, r4, #0
	mov	r2, #0x3
	bl	memcpy
	mov	r6, #0x0
	mov	r1, #0x36
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L78	@cond_branch
	ldrh	r1, [r5, #0x3a]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L78	@cond_branch
	ldrh	r1, [r5, #0x34]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	Step1
.L78:
	mov	r2, #0x3a
	ldrsh	r0, [r5, r2]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	add	r1, r4, r1
	ldrb	r1, [r1]
	asr	r0, r0, r1
	ldrh	r1, [r5, #0x38]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	sub_80646C8
	strh	r0, [r5, #0x26]
	ldrh	r1, [r5, #0x3a]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x3a]
	mov	r2, #0x36
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	asr	r0, r0, #0x11
	cmp	r1, r0
	bne	.L79	@cond_branch
	mov	r6, #0x1
.L79:
	cmp	r1, r2
	blt	.L80	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x26]
	mov	r6, #0xff
.L80:
	add	r0, r6, #0
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L82:
	.align	2, 0
.L81:
	.word	gUnknown_083761E6
	.word	gUnknown_083761EC
.Lfe18:
	.size	 sub_806478C,.Lfe18-sub_806478C
	.align	2, 0
	.globl	sub_8064820
	.type	 sub_8064820,function
	.thumb_func
sub_8064820:
	strh	r1, [r0, #0x34]
	bx	lr
.Lfe19:
	.size	 sub_8064820,.Lfe19-sub_8064820
	.align	2, 0
	.globl	sub_8064824
	.type	 sub_8064824,function
	.thumb_func
sub_8064824:
	push	{lr}
	ldrh	r1, [r0, #0x34]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x34]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	beq	.L85	@cond_branch
	mov	r0, #0x0
	b	.L87
.L85:
	mov	r0, #0x1
.L87:
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 sub_8064824,.Lfe20-sub_8064824
	.align	2, 0
	.globl	obj_anim_image_set_and_seek
	.type	 obj_anim_image_set_and_seek,function
	.thumb_func
obj_anim_image_set_and_seek:
	push	{r4, lr}
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r3, r0, #0
	add	r3, r3, #0x2a
	strb	r1, [r3]
	add	r4, r0, #0
	add	r4, r4, #0x2c
	ldrb	r3, [r4]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r3
	strb	r1, [r4]
	add	r1, r2, #0
	bl	SeekSpriteAnim
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 obj_anim_image_set_and_seek,.Lfe21-obj_anim_image_set_and_seek
	.align	2, 0
	.globl	sub_8064864
	.type	 sub_8064864,function
	.thumb_func
sub_8064864:
	push	{lr}
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L90	@cond_branch
	mov	r0, #0x0
	b	.L92
.L90:
	mov	r0, #0x1
.L92:
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 sub_8064864,.Lfe22-sub_8064864
	.align	2, 0
	.globl	sub_806487C
	.type	 sub_806487C,function
	.thumb_func
sub_806487C:
	push	{r4, r5, r6, lr}
	mov	ip, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, ip
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L94	@cond_branch
	mov	r0, ip
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	mov	r4, ip
	add	r4, r4, #0x28
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	ldr	r2, .L100
	add	r0, r0, r1
	ldrh	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, ip
	ldrh	r1, [r0, #0x26]
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	sub	r3, r3, #0x15
	mov	r0, #0x0
	ldrsb	r0, [r3, r0]
	ldr	r2, .L100+0x4
	add	r0, r0, r1
	ldrh	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r2, r3, #0
	b	.L95
.L101:
	.align	2, 0
.L100:
	.word	gSpriteCoordOffsetX
	.word	gSpriteCoordOffsetY
.L94:
	mov	r0, ip
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	mov	r3, ip
	add	r3, r3, #0x28
	mov	r0, #0x0
	ldrsb	r0, [r3, r0]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r0, ip
	ldrh	r1, [r0, #0x26]
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	mov	r2, ip
	add	r2, r2, #0x29
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r3, #0
.L95:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x19
	sub	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x19
	sub	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	bgt	.L97	@cond_branch
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bge	.L96	@cond_branch
.L97:
	mov	r4, ip
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
.L96:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xaf
	bgt	.L99	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bge	.L98	@cond_branch
.L99:
	mov	r0, ip
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L98:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_806487C,.Lfe23-sub_806487C
	.align	2, 0
	.globl	sub_8064970
	.type	 sub_8064970,function
	.thumb_func
sub_8064970:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	mov	r2, #0x1
	bl	SetObjectSubpriorityByZCoord
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_806487C
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 sub_8064970,.Lfe24-sub_8064970
	.align	2, 0
	.globl	sub_8064990
	.type	 sub_8064990,function
	.thumb_func
sub_8064990:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	mov	r2, #0x0
	ldr	r6, .L110
.L107:
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r6
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L106	@cond_branch
	ldr	r1, [r4, #0x1c]
	ldr	r0, .L110+0x4
	cmp	r1, r0
	bne	.L106	@cond_branch
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	bne	.L106	@cond_branch
	add	r0, r3, #0
	bl	FieldObjectDirectionToImageAnimId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	b	.L105
.L111:
	.align	2, 0
.L110:
	.word	gSprites
	.word	sub_8064970
.L106:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3f
	bls	.L107	@cond_branch
.L105:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 sub_8064990,.Lfe25-sub_8064990
	.align	2, 0
	.globl	oe_exec_and_other_stuff
	.type	 oe_exec_and_other_stuff,function
	.thumb_func
oe_exec_and_other_stuff:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L113
	add	r2, r1, #0x4
	add	r3, r1, #0
	add	r3, r3, #0x8
	bl	FieldObjectGetLocalIdAndMap
	add	r0, r4, #0
	bl	FieldEffectStart
	pop	{r4}
	pop	{r1}
	bx	r1
.L114:
	.align	2, 0
.L113:
	.word	gFieldEffectArguments
.Lfe26:
	.size	 oe_exec_and_other_stuff,.Lfe26-oe_exec_and_other_stuff
	.align	2, 0
	.globl	DoShadowFieldEffect
	.type	 DoShadowFieldEffect,function
	.thumb_func
DoShadowFieldEffect:
	push	{lr}
	add	r1, r0, #0
	ldrb	r2, [r1, #0x2]
	lsl	r0, r2, #0x19
	cmp	r0, #0
	blt	.L116	@cond_branch
	mov	r0, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	mov	r0, #0x3
	bl	oe_exec_and_other_stuff
.L116:
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 DoShadowFieldEffect,.Lfe27-DoShadowFieldEffect
	.align	2, 0
	.globl	DoRippleFieldEffect
	.type	 DoRippleFieldEffect,function
	.thumb_func
DoRippleFieldEffect:
	push	{r4, lr}
	add	r4, r1, #0
	ldrb	r0, [r0, #0x5]
	bl	GetFieldObjectGraphicsInfo
	ldr	r2, .L118
	mov	r3, #0x20
	ldrsh	r1, [r4, r3]
	str	r1, [r2]
	mov	r3, #0x22
	ldrsh	r1, [r4, r3]
	ldrh	r0, [r0, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x11
	add	r1, r1, r0
	sub	r1, r1, #0x2
	str	r1, [r2, #0x4]
	mov	r0, #0x97
	str	r0, [r2, #0x8]
	mov	r0, #0x3
	str	r0, [r2, #0xc]
	mov	r0, #0x5
	bl	FieldEffectStart
	pop	{r4}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gFieldEffectArguments
.Lfe28:
	.size	 DoRippleFieldEffect,.Lfe28-DoRippleFieldEffect
.text
	.align	2, 0
