@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_0202E8B0,object
	.size	 gUnknown_0202E8B0,4
gUnknown_0202E8B0:
	.word	0x0
	.align	1, 0
	.type	 sPauseCounter,object
	.size	 sPauseCounter,2
sPauseCounter:
	.short	0x0
	.align	1, 0
	.type	 sMovingNpcId,object
	.size	 sMovingNpcId,2
sMovingNpcId:
	.short	0x0
	.align	1, 0
	.type	 sMovingNpcMapBank,object
	.size	 sMovingNpcMapBank,2
sMovingNpcMapBank:
	.short	0x0
	.align	1, 0
	.type	 sMovingNpcMapId,object
	.size	 sMovingNpcMapId,2
sMovingNpcMapId:
	.short	0x0
	.align	1, 0
	.type	 sFieldEffectScriptId,object
	.size	 sFieldEffectScriptId,2
sFieldEffectScriptId:
	.short	0x0
	.globl	gNullScriptPtr
	.section .rodata
	.align	2, 0
	.type	 gNullScriptPtr,object
	.size	 gNullScriptPtr,4
gNullScriptPtr:
	.word	0x0
	.type	 sScriptConditionTable,object
	.size	 sScriptConditionTable,18
sScriptConditionTable:
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.align	2, 0
	.type	 sScriptStringVars,object
sScriptStringVars:
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar3
	.size	 sScriptStringVars,12
.text
	.align	2, 0
	.globl	ScrCmd_nop
	.type	 ScrCmd_nop,function
	.thumb_func
ScrCmd_nop:
	mov	r0, #0x0
	bx	lr
.Lfe1:
	.size	 ScrCmd_nop,.Lfe1-ScrCmd_nop
	.align	2, 0
	.globl	ScrCmd_nop1
	.type	 ScrCmd_nop1,function
	.thumb_func
ScrCmd_nop1:
	mov	r0, #0x0
	bx	lr
.Lfe2:
	.size	 ScrCmd_nop1,.Lfe2-ScrCmd_nop1
	.align	2, 0
	.globl	ScrCmd_end
	.type	 ScrCmd_end,function
	.thumb_func
ScrCmd_end:
	push	{lr}
	bl	StopScript
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 ScrCmd_end,.Lfe3-ScrCmd_end
	.align	2, 0
	.globl	ScrCmd_gotonative
	.type	 ScrCmd_gotonative,function
	.thumb_func
ScrCmd_gotonative:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r1, r0, #0
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 ScrCmd_gotonative,.Lfe4-ScrCmd_gotonative
	.align	2, 0
	.globl	ScrCmd_special
	.type	 ScrCmd_special,function
	.thumb_func
ScrCmd_special:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	ldr	r1, .L7
	lsr	r0, r0, #0xe
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L8:
	.align	2, 0
.L7:
	.word	gSpecials
.Lfe5:
	.size	 ScrCmd_special,.Lfe5-ScrCmd_special
	.align	2, 0
	.globl	ScrCmd_specialvar
	.type	 ScrCmd_specialvar,function
	.thumb_func
ScrCmd_specialvar:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r6, r0, #0
	ldr	r4, .L10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xe
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	_call_via_r0
	strh	r0, [r6]
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L11:
	.align	2, 0
.L10:
	.word	gSpecials
.Lfe6:
	.size	 ScrCmd_specialvar,.Lfe6-ScrCmd_specialvar
	.align	2, 0
	.globl	ScrCmd_callnative
	.type	 ScrCmd_callnative,function
	.thumb_func
ScrCmd_callnative:
	push	{lr}
	bl	ScriptReadWord
	bl	_call_via_r0
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 ScrCmd_callnative,.Lfe7-ScrCmd_callnative
	.align	2, 0
	.globl	ScrCmd_waitstate
	.type	 ScrCmd_waitstate,function
	.thumb_func
ScrCmd_waitstate:
	push	{lr}
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 ScrCmd_waitstate,.Lfe8-ScrCmd_waitstate
	.align	2, 0
	.globl	ScrCmd_goto
	.type	 ScrCmd_goto,function
	.thumb_func
ScrCmd_goto:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r1, r0, #0
	add	r0, r4, #0
	bl	ScriptJump
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 ScrCmd_goto,.Lfe9-ScrCmd_goto
	.align	2, 0
	.globl	ScrCmd_return
	.type	 ScrCmd_return,function
	.thumb_func
ScrCmd_return:
	push	{lr}
	bl	ScriptReturn
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 ScrCmd_return,.Lfe10-ScrCmd_return
	.align	2, 0
	.globl	ScrCmd_call
	.type	 ScrCmd_call,function
	.thumb_func
ScrCmd_call:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r1, r0, #0
	add	r0, r4, #0
	bl	ScriptCall
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 ScrCmd_call,.Lfe11-ScrCmd_call
	.align	2, 0
	.globl	ScrCmd_goto_if
	.type	 ScrCmd_goto_if,function
	.thumb_func
ScrCmd_goto_if:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r4, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadWord
	add	r2, r0, #0
	ldr	r1, .L19
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	ldrb	r3, [r5, #0x2]
	add	r0, r0, r3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L18	@cond_branch
	add	r0, r5, #0
	add	r1, r2, #0
	bl	ScriptJump
.L18:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L20:
	.align	2, 0
.L19:
	.word	sScriptConditionTable
.Lfe12:
	.size	 ScrCmd_goto_if,.Lfe12-ScrCmd_goto_if
	.align	2, 0
	.globl	ScrCmd_call_if
	.type	 ScrCmd_call_if,function
	.thumb_func
ScrCmd_call_if:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r4, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadWord
	add	r2, r0, #0
	ldr	r1, .L23
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	ldrb	r3, [r5, #0x2]
	add	r0, r0, r3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L22	@cond_branch
	add	r0, r5, #0
	add	r1, r2, #0
	bl	ScriptCall
.L22:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L24:
	.align	2, 0
.L23:
	.word	sScriptConditionTable
.Lfe13:
	.size	 ScrCmd_call_if,.Lfe13-ScrCmd_call_if
	.align	2, 0
	.globl	ScrCmd_setvaddress
	.type	 ScrCmd_setvaddress,function
	.thumb_func
ScrCmd_setvaddress:
	push	{r4, lr}
	ldr	r4, [r0, #0x8]
	sub	r4, r4, #0x1
	bl	ScriptReadWord
	ldr	r1, .L26
	sub	r0, r0, r4
	str	r0, [r1]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L27:
	.align	2, 0
.L26:
	.word	gUnknown_0202E8B0
.Lfe14:
	.size	 ScrCmd_setvaddress,.Lfe14-ScrCmd_setvaddress
	.align	2, 0
	.globl	ScrCmd_vgoto
	.type	 ScrCmd_vgoto,function
	.thumb_func
ScrCmd_vgoto:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r1, r0, #0
	ldr	r0, .L29
	ldr	r0, [r0]
	sub	r1, r1, r0
	add	r0, r4, #0
	bl	ScriptJump
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L30:
	.align	2, 0
.L29:
	.word	gUnknown_0202E8B0
.Lfe15:
	.size	 ScrCmd_vgoto,.Lfe15-ScrCmd_vgoto
	.align	2, 0
	.globl	ScrCmd_vcall
	.type	 ScrCmd_vcall,function
	.thumb_func
ScrCmd_vcall:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r1, r0, #0
	ldr	r0, .L32
	ldr	r0, [r0]
	sub	r1, r1, r0
	add	r0, r4, #0
	bl	ScriptCall
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L33:
	.align	2, 0
.L32:
	.word	gUnknown_0202E8B0
.Lfe16:
	.size	 ScrCmd_vcall,.Lfe16-ScrCmd_vcall
	.align	2, 0
	.globl	ScrCmd_vgoto_if
	.type	 ScrCmd_vgoto_if,function
	.thumb_func
ScrCmd_vgoto_if:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r4, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadWord
	ldr	r1, .L36
	ldr	r1, [r1]
	sub	r2, r0, r1
	ldr	r1, .L36+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	ldrb	r3, [r5, #0x2]
	add	r0, r0, r3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L35	@cond_branch
	add	r0, r5, #0
	add	r1, r2, #0
	bl	ScriptJump
.L35:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L37:
	.align	2, 0
.L36:
	.word	gUnknown_0202E8B0
	.word	sScriptConditionTable
.Lfe17:
	.size	 ScrCmd_vgoto_if,.Lfe17-ScrCmd_vgoto_if
	.align	2, 0
	.globl	ScrCmd_vcall_if
	.type	 ScrCmd_vcall_if,function
	.thumb_func
ScrCmd_vcall_if:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r4, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadWord
	ldr	r1, .L40
	ldr	r1, [r1]
	sub	r2, r0, r1
	ldr	r1, .L40+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	ldrb	r3, [r5, #0x2]
	add	r0, r0, r3
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L39	@cond_branch
	add	r0, r5, #0
	add	r1, r2, #0
	bl	ScriptCall
.L39:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L41:
	.align	2, 0
.L40:
	.word	gUnknown_0202E8B0
	.word	sScriptConditionTable
.Lfe18:
	.size	 ScrCmd_vcall_if,.Lfe18-ScrCmd_vcall_if
	.align	2, 0
	.globl	ScrCmd_gotostd
	.type	 ScrCmd_gotostd,function
	.thumb_func
ScrCmd_gotostd:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, [r2, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r2, #0x8]
	lsl	r1, r1, #0x2
	ldr	r0, .L44
	add	r1, r1, r0
	ldr	r0, .L44+0x4
	cmp	r1, r0
	bcs	.L43	@cond_branch
	ldr	r1, [r1]
	add	r0, r2, #0
	bl	ScriptJump
.L43:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L45:
	.align	2, 0
.L44:
	.word	gStdScripts
	.word	gStdScripts_End
.Lfe19:
	.size	 ScrCmd_gotostd,.Lfe19-ScrCmd_gotostd
	.align	2, 0
	.globl	ScrCmd_callstd
	.type	 ScrCmd_callstd,function
	.thumb_func
ScrCmd_callstd:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, [r2, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r2, #0x8]
	lsl	r1, r1, #0x2
	ldr	r0, .L48
	add	r1, r1, r0
	ldr	r0, .L48+0x4
	cmp	r1, r0
	bcs	.L47	@cond_branch
	ldr	r1, [r1]
	add	r0, r2, #0
	bl	ScriptCall
.L47:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L49:
	.align	2, 0
.L48:
	.word	gStdScripts
	.word	gStdScripts_End
.Lfe20:
	.size	 ScrCmd_callstd,.Lfe20-ScrCmd_callstd
	.align	2, 0
	.globl	ScrCmd_gotostd_if
	.type	 ScrCmd_gotostd_if,function
	.thumb_func
ScrCmd_gotostd_if:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, [r3, #0x8]
	ldrb	r2, [r0]
	add	r0, r0, #0x1
	str	r0, [r3, #0x8]
	ldrb	r4, [r0]
	add	r0, r0, #0x1
	str	r0, [r3, #0x8]
	ldr	r1, .L53
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldrb	r2, [r3, #0x2]
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L51	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L53+0x4
	add	r1, r0, r1
	ldr	r0, .L53+0x8
	cmp	r1, r0
	bcs	.L51	@cond_branch
	ldr	r1, [r1]
	add	r0, r3, #0
	bl	ScriptJump
.L51:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L54:
	.align	2, 0
.L53:
	.word	sScriptConditionTable
	.word	gStdScripts
	.word	gStdScripts_End
.Lfe21:
	.size	 ScrCmd_gotostd_if,.Lfe21-ScrCmd_gotostd_if
	.align	2, 0
	.globl	ScrCmd_callstd_if
	.type	 ScrCmd_callstd_if,function
	.thumb_func
ScrCmd_callstd_if:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, [r3, #0x8]
	ldrb	r2, [r0]
	add	r0, r0, #0x1
	str	r0, [r3, #0x8]
	ldrb	r4, [r0]
	add	r0, r0, #0x1
	str	r0, [r3, #0x8]
	ldr	r1, .L58
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	ldrb	r2, [r3, #0x2]
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L56	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L58+0x4
	add	r1, r0, r1
	ldr	r0, .L58+0x8
	cmp	r1, r0
	bcs	.L56	@cond_branch
	ldr	r1, [r1]
	add	r0, r3, #0
	bl	ScriptCall
.L56:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L59:
	.align	2, 0
.L58:
	.word	sScriptConditionTable
	.word	gStdScripts
	.word	gStdScripts_End
.Lfe22:
	.size	 ScrCmd_callstd_if,.Lfe22-ScrCmd_callstd_if
	.align	2, 0
	.globl	ScrCmd_gotoram
	.type	 ScrCmd_gotoram,function
	.thumb_func
ScrCmd_gotoram:
	push	{lr}
	ldr	r1, .L61
	ldr	r1, [r1]
	bl	ScriptJump
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L62:
	.align	2, 0
.L61:
	.word	gUnknown_0202E8AC
.Lfe23:
	.size	 ScrCmd_gotoram,.Lfe23-ScrCmd_gotoram
	.align	2, 0
	.globl	ScrCmd_killscript
	.type	 ScrCmd_killscript,function
	.thumb_func
ScrCmd_killscript:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ClearRamScript
	add	r0, r4, #0
	bl	StopScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 ScrCmd_killscript,.Lfe24-ScrCmd_killscript
	.align	2, 0
	.globl	ScrCmd_setmysteryeventstatus
	.type	 ScrCmd_setmysteryeventstatus,function
	.thumb_func
ScrCmd_setmysteryeventstatus:
	push	{lr}
	ldr	r1, [r0, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	add	r0, r2, #0
	bl	SetMysteryEventScriptStatus
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 ScrCmd_setmysteryeventstatus,.Lfe25-ScrCmd_setmysteryeventstatus
	.align	2, 0
	.globl	ScrCmd_loadword
	.type	 ScrCmd_loadword,function
	.thumb_func
ScrCmd_loadword:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x8]
	ldrb	r5, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	add	r0, r4, #0
	bl	ScriptReadWord
	lsl	r5, r5, #0x2
	add	r4, r4, #0x64
	add	r4, r4, r5
	str	r0, [r4]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 ScrCmd_loadword,.Lfe26-ScrCmd_loadword
	.align	2, 0
	.globl	ScrCmd_loadbytefromaddr
	.type	 ScrCmd_loadbytefromaddr,function
	.thumb_func
ScrCmd_loadbytefromaddr:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x8]
	ldrb	r5, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	add	r0, r4, #0
	bl	ScriptReadWord
	lsl	r5, r5, #0x2
	add	r4, r4, #0x64
	add	r4, r4, r5
	ldrb	r0, [r0]
	str	r0, [r4]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 ScrCmd_loadbytefromaddr,.Lfe27-ScrCmd_loadbytefromaddr
	.align	2, 0
	.globl	ScrCmd_writebytetoaddr
	.type	 ScrCmd_writebytetoaddr,function
	.thumb_func
ScrCmd_writebytetoaddr:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadWord
	strb	r4, [r0]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 ScrCmd_writebytetoaddr,.Lfe28-ScrCmd_writebytetoaddr
	.align	2, 0
	.globl	ScrCmd_loadbyte
	.type	 ScrCmd_loadbyte,function
	.thumb_func
ScrCmd_loadbyte:
	ldr	r1, [r0, #0x8]
	ldrb	r3, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	lsl	r3, r3, #0x2
	add	r2, r0, #0
	add	r2, r2, #0x64
	add	r2, r2, r3
	ldrb	r3, [r1]
	str	r3, [r2]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	mov	r0, #0x0
	bx	lr
.Lfe29:
	.size	 ScrCmd_loadbyte,.Lfe29-ScrCmd_loadbyte
	.align	2, 0
	.globl	ScrCmd_setptrbyte
	.type	 ScrCmd_setptrbyte,function
	.thumb_func
ScrCmd_setptrbyte:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x8]
	ldrb	r5, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	add	r0, r4, #0
	bl	ScriptReadWord
	lsl	r5, r5, #0x2
	add	r4, r4, #0x64
	add	r4, r4, r5
	ldr	r1, [r4]
	strb	r1, [r0]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 ScrCmd_setptrbyte,.Lfe30-ScrCmd_setptrbyte
	.align	2, 0
	.globl	ScrCmd_copylocal
	.type	 ScrCmd_copylocal,function
	.thumb_func
ScrCmd_copylocal:
	ldr	r1, [r0, #0x8]
	ldrb	r3, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	lsl	r3, r3, #0x2
	add	r0, r0, #0x64
	add	r3, r0, r3
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3]
	mov	r0, #0x0
	bx	lr
.Lfe31:
	.size	 ScrCmd_copylocal,.Lfe31-ScrCmd_copylocal
	.align	2, 0
	.globl	ScrCmd_copybyte
	.type	 ScrCmd_copybyte,function
	.thumb_func
ScrCmd_copybyte:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r5, r0, #0
	add	r0, r4, #0
	bl	ScriptReadWord
	ldrb	r0, [r0]
	strb	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 ScrCmd_copybyte,.Lfe32-ScrCmd_copybyte
	.align	2, 0
	.globl	ScrCmd_setvar
	.type	 ScrCmd_setvar,function
	.thumb_func
ScrCmd_setvar:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r4, r0, #0
	add	r0, r5, #0
	bl	ScriptReadHalfword
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 ScrCmd_setvar,.Lfe33-ScrCmd_setvar
	.align	2, 0
	.globl	ScrCmd_copyvar
	.type	 ScrCmd_copyvar,function
	.thumb_func
ScrCmd_copyvar:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r5, r0, #0
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	ldrh	r0, [r0]
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 ScrCmd_copyvar,.Lfe34-ScrCmd_copyvar
	.align	2, 0
	.globl	ScrCmd_setorcopyvar
	.type	 ScrCmd_setorcopyvar,function
	.thumb_func
ScrCmd_setorcopyvar:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r5, r0, #0
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 ScrCmd_setorcopyvar,.Lfe35-ScrCmd_setorcopyvar
	.align	2, 0
	.globl	compare_012
	.type	 compare_012,function
	.thumb_func
compare_012:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r0, r1
	bcs	.L76	@cond_branch
	mov	r0, #0x0
	b	.L78
.L76:
	cmp	r0, r1
	beq	.L77	@cond_branch
	mov	r0, #0x2
	b	.L78
.L77:
	mov	r0, #0x1
.L78:
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 compare_012,.Lfe36-compare_012
	.align	2, 0
	.globl	ScrCmd_compare_local_to_local
	.type	 ScrCmd_compare_local_to_local,function
	.thumb_func
ScrCmd_compare_local_to_local:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, [r4, #0x8]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r3, r4, #0
	add	r3, r3, #0x64
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r3, r3, r1
	ldrb	r1, [r3]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	bl	compare_012
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 ScrCmd_compare_local_to_local,.Lfe37-ScrCmd_compare_local_to_local
	.align	2, 0
	.globl	ScrCmd_compare_local_to_value
	.type	 ScrCmd_compare_local_to_value,function
	.thumb_func
ScrCmd_compare_local_to_value:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, [r4, #0x8]
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r0, r0, #0x64
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	ldrb	r1, [r2]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	bl	compare_012
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 ScrCmd_compare_local_to_value,.Lfe38-ScrCmd_compare_local_to_value
	.align	2, 0
	.globl	ScrCmd_compare_local_to_addr
	.type	 ScrCmd_compare_local_to_addr,function
	.thumb_func
ScrCmd_compare_local_to_addr:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r2, [r4, #0x8]
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r0, r0, #0x64
	add	r0, r0, r1
	ldrb	r5, [r0]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	add	r0, r4, #0
	bl	ScriptReadWord
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	compare_012
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 ScrCmd_compare_local_to_addr,.Lfe39-ScrCmd_compare_local_to_addr
	.align	2, 0
	.globl	ScrCmd_compare_addr_to_local
	.type	 ScrCmd_compare_addr_to_local,function
	.thumb_func
ScrCmd_compare_addr_to_local:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	ldrb	r0, [r0]
	ldr	r3, [r4, #0x8]
	ldrb	r2, [r3]
	lsl	r2, r2, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x64
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	bl	compare_012
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 ScrCmd_compare_addr_to_local,.Lfe40-ScrCmd_compare_addr_to_local
	.align	2, 0
	.globl	ScrCmd_compare_addr_to_value
	.type	 ScrCmd_compare_addr_to_value,function
	.thumb_func
ScrCmd_compare_addr_to_value:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	ldrb	r0, [r0]
	ldr	r2, [r4, #0x8]
	ldrb	r1, [r2]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	bl	compare_012
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 ScrCmd_compare_addr_to_value,.Lfe41-ScrCmd_compare_addr_to_value
	.align	2, 0
	.globl	ScrCmd_compare_addr_to_addr
	.type	 ScrCmd_compare_addr_to_addr,function
	.thumb_func
ScrCmd_compare_addr_to_addr:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	ldrb	r5, [r0]
	add	r0, r4, #0
	bl	ScriptReadWord
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	compare_012
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 ScrCmd_compare_addr_to_addr,.Lfe42-ScrCmd_compare_addr_to_addr
	.align	2, 0
	.globl	ScrCmd_compare_var_to_value
	.type	 ScrCmd_compare_var_to_value,function
	.thumb_func
ScrCmd_compare_var_to_value:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	ldrh	r5, [r0]
	add	r0, r4, #0
	bl	ScriptReadHalfword
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	compare_012
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 ScrCmd_compare_var_to_value,.Lfe43-ScrCmd_compare_var_to_value
	.align	2, 0
	.globl	ScrCmd_compare_var_to_var
	.type	 ScrCmd_compare_var_to_var,function
	.thumb_func
ScrCmd_compare_var_to_var:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r5, r0, #0
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	ldrh	r2, [r5]
	ldrh	r1, [r0]
	add	r0, r2, #0
	bl	compare_012
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 ScrCmd_compare_var_to_var,.Lfe44-ScrCmd_compare_var_to_var
	.align	2, 0
	.globl	ScrCmd_addvar
	.type	 ScrCmd_addvar,function
	.thumb_func
ScrCmd_addvar:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r4, r0, #0
	add	r0, r5, #0
	bl	ScriptReadHalfword
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 ScrCmd_addvar,.Lfe45-ScrCmd_addvar
	.align	2, 0
	.globl	ScrCmd_subvar
	.type	 ScrCmd_subvar,function
	.thumb_func
ScrCmd_subvar:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r5, r0, #0
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldrh	r1, [r5]
	sub	r1, r1, r0
	strh	r1, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 ScrCmd_subvar,.Lfe46-ScrCmd_subvar
	.align	2, 0
	.globl	ScrCmd_random
	.type	 ScrCmd_random,function
	.thumb_func
ScrCmd_random:
	push	{r4, r5, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r5, .L90
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__umodsi3
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L91:
	.align	2, 0
.L90:
	.word	gScriptResult
.Lfe47:
	.size	 ScrCmd_random,.Lfe47-ScrCmd_random
	.align	2, 0
	.globl	ScrCmd_additem
	.type	 ScrCmd_additem,function
	.thumb_func
ScrCmd_additem:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	ldr	r5, .L93
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L94:
	.align	2, 0
.L93:
	.word	gScriptResult
.Lfe48:
	.size	 ScrCmd_additem,.Lfe48-ScrCmd_additem
	.align	2, 0
	.globl	ScrCmd_removeitem
	.type	 ScrCmd_removeitem,function
	.thumb_func
ScrCmd_removeitem:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	ldr	r5, .L96
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	RemoveBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L97:
	.align	2, 0
.L96:
	.word	gScriptResult
.Lfe49:
	.size	 ScrCmd_removeitem,.Lfe49-ScrCmd_removeitem
	.align	2, 0
	.globl	ScrCmd_checkitemspace
	.type	 ScrCmd_checkitemspace,function
	.thumb_func
ScrCmd_checkitemspace:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	ldr	r5, .L99
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	CheckBagHasSpace
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L100:
	.align	2, 0
.L99:
	.word	gScriptResult
.Lfe50:
	.size	 ScrCmd_checkitemspace,.Lfe50-ScrCmd_checkitemspace
	.align	2, 0
	.globl	ScrCmd_checkitem
	.type	 ScrCmd_checkitem,function
	.thumb_func
ScrCmd_checkitem:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	ldr	r5, .L102
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L103:
	.align	2, 0
.L102:
	.word	gScriptResult
.Lfe51:
	.size	 ScrCmd_checkitem,.Lfe51-ScrCmd_checkitem
	.align	2, 0
	.globl	ScrCmd_checkitemtype
	.type	 ScrCmd_checkitemtype,function
	.thumb_func
ScrCmd_checkitemtype:
	push	{r4, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L105
	bl	GetPocketByItemId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L106:
	.align	2, 0
.L105:
	.word	gScriptResult
.Lfe52:
	.size	 ScrCmd_checkitemtype,.Lfe52-ScrCmd_checkitemtype
	.align	2, 0
	.globl	ScrCmd_addpcitem
	.type	 ScrCmd_addpcitem,function
	.thumb_func
ScrCmd_addpcitem:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r5, .L108
	add	r0, r4, #0
	bl	AddPCItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L109:
	.align	2, 0
.L108:
	.word	gScriptResult
.Lfe53:
	.size	 ScrCmd_addpcitem,.Lfe53-ScrCmd_addpcitem
	.align	2, 0
	.globl	ScrCmd_checkpcitem
	.type	 ScrCmd_checkpcitem,function
	.thumb_func
ScrCmd_checkpcitem:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r5, .L111
	add	r0, r4, #0
	bl	CheckPCHasItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L112:
	.align	2, 0
.L111:
	.word	gScriptResult
.Lfe54:
	.size	 ScrCmd_checkpcitem,.Lfe54-ScrCmd_checkpcitem
	.align	2, 0
	.globl	ScrCmd_adddecor
	.type	 ScrCmd_adddecor,function
	.thumb_func
ScrCmd_adddecor:
	push	{r4, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r4, .L114
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsThereStorageSpaceForDecoration
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L115:
	.align	2, 0
.L114:
	.word	gScriptResult
.Lfe55:
	.size	 ScrCmd_adddecor,.Lfe55-ScrCmd_adddecor
	.align	2, 0
	.globl	ScrCmd_removedecor
	.type	 ScrCmd_removedecor,function
	.thumb_func
ScrCmd_removedecor:
	push	{r4, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r4, .L117
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_81340A8
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L118:
	.align	2, 0
.L117:
	.word	gScriptResult
.Lfe56:
	.size	 ScrCmd_removedecor,.Lfe56-ScrCmd_removedecor
	.align	2, 0
	.globl	ScrCmd_checkdecor
	.type	 ScrCmd_checkdecor,function
	.thumb_func
ScrCmd_checkdecor:
	push	{r4, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r4, .L120
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8134074
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L121:
	.align	2, 0
.L120:
	.word	gScriptResult
.Lfe57:
	.size	 ScrCmd_checkdecor,.Lfe57-ScrCmd_checkdecor
	.align	2, 0
	.globl	ScrCmd_hasdecor
	.type	 ScrCmd_hasdecor,function
	.thumb_func
ScrCmd_hasdecor:
	push	{r4, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r4, .L123
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_8133FE4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L124:
	.align	2, 0
.L123:
	.word	gScriptResult
.Lfe58:
	.size	 ScrCmd_hasdecor,.Lfe58-ScrCmd_hasdecor
	.align	2, 0
	.globl	ScrCmd_setflag
	.type	 ScrCmd_setflag,function
	.thumb_func
ScrCmd_setflag:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 ScrCmd_setflag,.Lfe59-ScrCmd_setflag
	.align	2, 0
	.globl	ScrCmd_clearflag
	.type	 ScrCmd_clearflag,function
	.thumb_func
ScrCmd_clearflag:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagClear
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 ScrCmd_clearflag,.Lfe60-ScrCmd_clearflag
	.align	2, 0
	.globl	ScrCmd_checkflag
	.type	 ScrCmd_checkflag,function
	.thumb_func
ScrCmd_checkflag:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe61:
	.size	 ScrCmd_checkflag,.Lfe61-ScrCmd_checkflag
	.align	2, 0
	.globl	ScrCmd_incrementgamestat
	.type	 ScrCmd_incrementgamestat,function
	.thumb_func
ScrCmd_incrementgamestat:
	push	{lr}
	ldr	r1, [r0, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	add	r0, r2, #0
	bl	IncrementGameStat
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe62:
	.size	 ScrCmd_incrementgamestat,.Lfe62-ScrCmd_incrementgamestat
	.align	2, 0
	.globl	ScrCmd_animdarklevel
	.type	 ScrCmd_animdarklevel,function
	.thumb_func
ScrCmd_animdarklevel:
	push	{lr}
	ldr	r1, [r0, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	add	r0, r2, #0
	bl	sub_8081594
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 ScrCmd_animdarklevel,.Lfe63-ScrCmd_animdarklevel
	.align	2, 0
	.globl	ScrCmd_setdarklevel
	.type	 ScrCmd_setdarklevel,function
	.thumb_func
ScrCmd_setdarklevel:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	Overworld_SetFlashLevel
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 ScrCmd_setdarklevel,.Lfe64-ScrCmd_setdarklevel
	.align	2, 0
	.globl	IsPaletteNotActive
	.type	 IsPaletteNotActive,function
	.thumb_func
IsPaletteNotActive:
	push	{lr}
	ldr	r0, .L135
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L132	@cond_branch
	mov	r0, #0x0
	b	.L134
.L136:
	.align	2, 0
.L135:
	.word	gPaletteFade
.L132:
	mov	r0, #0x1
.L134:
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 IsPaletteNotActive,.Lfe65-IsPaletteNotActive
	.align	2, 0
	.globl	ScrCmd_fadescreen
	.type	 ScrCmd_fadescreen,function
	.thumb_func
ScrCmd_fadescreen:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, [r4, #0x8]
	ldrb	r0, [r1]
	add	r1, r1, #0x1
	str	r1, [r4, #0x8]
	mov	r1, #0x0
	bl	fade_screen
	ldr	r1, .L138
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L139:
	.align	2, 0
.L138:
	.word	IsPaletteNotActive
.Lfe66:
	.size	 ScrCmd_fadescreen,.Lfe66-ScrCmd_fadescreen
	.align	2, 0
	.globl	ScrCmd_fadescreendelay
	.type	 ScrCmd_fadescreendelay,function
	.thumb_func
ScrCmd_fadescreendelay:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, [r4, #0x8]
	ldrb	r0, [r2]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	ldrb	r1, [r2]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	bl	fade_screen
	ldr	r1, .L141
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L142:
	.align	2, 0
.L141:
	.word	IsPaletteNotActive
.Lfe67:
	.size	 ScrCmd_fadescreendelay,.Lfe67-ScrCmd_fadescreendelay
	.align	2, 0
	.globl	s28_pause_asm
	.type	 s28_pause_asm,function
	.thumb_func
s28_pause_asm:
	push	{lr}
	ldr	r1, .L147
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L144	@cond_branch
	mov	r0, #0x0
	b	.L146
.L148:
	.align	2, 0
.L147:
	.word	sPauseCounter
.L144:
	mov	r0, #0x1
.L146:
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 s28_pause_asm,.Lfe68-s28_pause_asm
	.align	2, 0
	.globl	ScrCmd_delay
	.type	 ScrCmd_delay,function
	.thumb_func
ScrCmd_delay:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	ldr	r1, .L150
	strh	r0, [r1]
	ldr	r1, .L150+0x4
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L151:
	.align	2, 0
.L150:
	.word	sPauseCounter
	.word	s28_pause_asm
.Lfe69:
	.size	 ScrCmd_delay,.Lfe69-ScrCmd_delay
	.align	2, 0
	.globl	ScrCmd_initclock
	.type	 ScrCmd_initclock,function
	.thumb_func
ScrCmd_initclock:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	RtcInitLocalTimeOffset
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 ScrCmd_initclock,.Lfe70-ScrCmd_initclock
	.align	2, 0
	.globl	ScrCmd_dodailyevents
	.type	 ScrCmd_dodailyevents,function
	.thumb_func
ScrCmd_dodailyevents:
	push	{lr}
	bl	DoTimeBasedEvents
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 ScrCmd_dodailyevents,.Lfe71-ScrCmd_dodailyevents
	.align	2, 0
	.globl	ScrCmd_gettime
	.type	 ScrCmd_gettime,function
	.thumb_func
ScrCmd_gettime:
	push	{lr}
	bl	RtcCalcLocalTime
	ldr	r2, .L155
	ldr	r1, .L155+0x4
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	strh	r0, [r2]
	ldr	r2, .L155+0x8
	mov	r0, #0x3
	ldrsb	r0, [r1, r0]
	strh	r0, [r2]
	ldr	r2, .L155+0xc
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	strh	r0, [r2]
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L156:
	.align	2, 0
.L155:
	.word	gSpecialVar_0x8000
	.word	gLocalTime
	.word	gSpecialVar_0x8001
	.word	gSpecialVar_0x8002
.Lfe72:
	.size	 ScrCmd_gettime,.Lfe72-ScrCmd_gettime
	.align	2, 0
	.globl	ScrCmd_setweather
	.type	 ScrCmd_setweather,function
	.thumb_func
ScrCmd_setweather:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	SetSav1Weather
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 ScrCmd_setweather,.Lfe73-ScrCmd_setweather
	.align	2, 0
	.globl	ScrCmd_resetweather
	.type	 ScrCmd_resetweather,function
	.thumb_func
ScrCmd_resetweather:
	push	{lr}
	bl	sub_80806E4
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 ScrCmd_resetweather,.Lfe74-ScrCmd_resetweather
	.align	2, 0
	.globl	ScrCmd_doweather
	.type	 ScrCmd_doweather,function
	.thumb_func
ScrCmd_doweather:
	push	{lr}
	bl	DoCurrentWeather
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 ScrCmd_doweather,.Lfe75-ScrCmd_doweather
	.align	2, 0
	.globl	ScrCmd_tileeffect
	.type	 ScrCmd_tileeffect,function
	.thumb_func
ScrCmd_tileeffect:
	push	{lr}
	ldr	r1, [r0, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	add	r0, r2, #0
	bl	ActivatePerStepCallback
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 ScrCmd_tileeffect,.Lfe76-ScrCmd_tileeffect
	.align	2, 0
	.globl	ScrCmd_setmaplayoutindex
	.type	 ScrCmd_setmaplayoutindex,function
	.thumb_func
ScrCmd_setmaplayoutindex:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	sub_8053D14
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 ScrCmd_setmaplayoutindex,.Lfe77-ScrCmd_setmaplayoutindex
	.align	2, 0
	.globl	ScrCmd_warp
	.type	 ScrCmd_warp,function
	.thumb_func
ScrCmd_warp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	Overworld_SetWarpDestination
	bl	sub_8080E88
	bl	player_avatar_init_params_reset
	mov	r0, #0x1
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 ScrCmd_warp,.Lfe78-ScrCmd_warp
	.align	2, 0
	.globl	ScrCmd_warpsilent
	.type	 ScrCmd_warpsilent,function
	.thumb_func
ScrCmd_warpsilent:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	Overworld_SetWarpDestination
	bl	sp13E_warp_to_last_warp
	bl	player_avatar_init_params_reset
	mov	r0, #0x1
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 ScrCmd_warpsilent,.Lfe79-ScrCmd_warpsilent
	.align	2, 0
	.globl	ScrCmd_warpdoor
	.type	 ScrCmd_warpdoor,function
	.thumb_func
ScrCmd_warpdoor:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	Overworld_SetWarpDestination
	bl	sub_8080EF0
	bl	player_avatar_init_params_reset
	mov	r0, #0x1
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 ScrCmd_warpdoor,.Lfe80-ScrCmd_warpdoor
	.align	2, 0
	.globl	ScrCmd_warphole
	.type	 ScrCmd_warphole,function
	.thumb_func
ScrCmd_warphole:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	ldr	r1, [r0, #0x8]
	ldrb	r6, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	ldrb	r5, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	mov	r4, sp
	add	r4, r4, #0x6
	add	r0, sp, #0x4
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	cmp	r6, #0xff
	bne	.L166	@cond_branch
	cmp	r5, #0xff
	bne	.L166	@cond_branch
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r0, r0, #0x7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4]
	sub	r1, r1, #0x7
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	sub_8053720
	b	.L167
.L166:
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r3, sp, #0x4
	ldrb	r3, [r3]
	sub	r3, r3, #0x7
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	ldrb	r4, [r4]
	sub	r4, r4, #0x7
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp]
	bl	Overworld_SetWarpDestination
.L167:
	bl	sp13F_fall_to_last_warp
	bl	player_avatar_init_params_reset
	mov	r0, #0x1
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe81:
	.size	 ScrCmd_warphole,.Lfe81-ScrCmd_warphole
	.align	2, 0
	.globl	ScrCmd_warpteleport
	.type	 ScrCmd_warpteleport,function
	.thumb_func
ScrCmd_warpteleport:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	Overworld_SetWarpDestination
	bl	sub_8080F68
	bl	player_avatar_init_params_reset
	mov	r0, #0x1
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 ScrCmd_warpteleport,.Lfe82-ScrCmd_warpteleport
	.align	2, 0
	.globl	ScrCmd_setwarp
	.type	 ScrCmd_setwarp,function
	.thumb_func
ScrCmd_setwarp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	Overworld_SetWarpDestination
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 ScrCmd_setwarp,.Lfe83-ScrCmd_setwarp
	.align	2, 0
	.globl	ScrCmd_setdynamicwarp
	.type	 ScrCmd_setdynamicwarp,function
	.thumb_func
ScrCmd_setdynamicwarp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffff8
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, r9
	mov	r2, r8
	add	r3, r6, #0
	bl	saved_warp2_set_2
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe84:
	.size	 ScrCmd_setdynamicwarp,.Lfe84-ScrCmd_setdynamicwarp
	.align	2, 0
	.globl	ScrCmd_setdivewarp
	.type	 ScrCmd_setdivewarp,function
	.thumb_func
ScrCmd_setdivewarp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	sub_8053690
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 ScrCmd_setdivewarp,.Lfe85-ScrCmd_setdivewarp
	.align	2, 0
	.globl	ScrCmd_setholewarp
	.type	 ScrCmd_setholewarp,function
	.thumb_func
ScrCmd_setholewarp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	sub_80536E4
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 ScrCmd_setholewarp,.Lfe86-ScrCmd_setholewarp
	.align	2, 0
	.globl	ScrCmd_setescapewarp
	.type	 ScrCmd_setescapewarp,function
	.thumb_func
ScrCmd_setescapewarp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r1, r0, #0x1
	str	r1, [r5, #0x8]
	ldrb	r6, [r0, #0x1]
	add	r1, r1, #0x1
	str	r1, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	mov	r1, r9
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r9, r1
	mov	r1, r8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r8, r1
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, r9
	add	r2, r6, #0
	add	r3, r4, #0
	bl	sub_805363C
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe87:
	.size	 ScrCmd_setescapewarp,.Lfe87-ScrCmd_setescapewarp
	.align	2, 0
	.globl	ScrCmd_getplayerxy
	.type	 ScrCmd_getplayerxy,function
	.thumb_func
ScrCmd_getplayerxy:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r5, r0, #0
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	ldr	r2, .L175
	ldrh	r1, [r2]
	strh	r1, [r5]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L176:
	.align	2, 0
.L175:
	.word	gSaveBlock1
.Lfe88:
	.size	 ScrCmd_getplayerxy,.Lfe88-ScrCmd_getplayerxy
	.align	2, 0
	.globl	ScrCmd_countpokemon
	.type	 ScrCmd_countpokemon,function
	.thumb_func
ScrCmd_countpokemon:
	push	{r4, lr}
	ldr	r4, .L178
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L179:
	.align	2, 0
.L178:
	.word	gScriptResult
.Lfe89:
	.size	 ScrCmd_countpokemon,.Lfe89-ScrCmd_countpokemon
	.align	2, 0
	.globl	ScrCmd_playse
	.type	 ScrCmd_playse,function
	.thumb_func
ScrCmd_playse:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	PlaySE
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe90:
	.size	 ScrCmd_playse,.Lfe90-ScrCmd_playse
	.align	2, 0
	.type	 WaitForSoundEffectFinish,function
	.thumb_func
WaitForSoundEffectFinish:
	push	{lr}
	bl	IsSEPlaying
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L182	@cond_branch
	mov	r0, #0x0
	b	.L184
.L182:
	mov	r0, #0x1
.L184:
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 WaitForSoundEffectFinish,.Lfe91-WaitForSoundEffectFinish
	.align	2, 0
	.globl	ScrCmd_waitse
	.type	 ScrCmd_waitse,function
	.thumb_func
ScrCmd_waitse:
	push	{lr}
	ldr	r1, .L186
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L187:
	.align	2, 0
.L186:
	.word	WaitForSoundEffectFinish
.Lfe92:
	.size	 ScrCmd_waitse,.Lfe92-ScrCmd_waitse
	.align	2, 0
	.globl	ScrCmd_playfanfare
	.type	 ScrCmd_playfanfare,function
	.thumb_func
ScrCmd_playfanfare:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	PlayFanfare
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 ScrCmd_playfanfare,.Lfe93-ScrCmd_playfanfare
	.align	2, 0
	.type	 WaitForFanfareFinish,function
	.thumb_func
WaitForFanfareFinish:
	push	{lr}
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe94:
	.size	 WaitForFanfareFinish,.Lfe94-WaitForFanfareFinish
	.align	2, 0
	.globl	ScrCmd_waitfanfare
	.type	 ScrCmd_waitfanfare,function
	.thumb_func
ScrCmd_waitfanfare:
	push	{lr}
	ldr	r1, .L191
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L192:
	.align	2, 0
.L191:
	.word	WaitForFanfareFinish
.Lfe95:
	.size	 ScrCmd_waitfanfare,.Lfe95-ScrCmd_waitfanfare
	.align	2, 0
	.globl	ScrCmd_playbgm
	.type	 ScrCmd_playbgm,function
	.thumb_func
ScrCmd_playbgm:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r5, r2, #0
	ldr	r0, [r4, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	cmp	r1, #0x1
	bne	.L194	@cond_branch
	add	r0, r2, #0
	bl	Overworld_SetSavedMusic
.L194:
	add	r0, r5, #0
	bl	PlayNewMapMusic
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 ScrCmd_playbgm,.Lfe96-ScrCmd_playbgm
	.align	2, 0
	.globl	ScrCmd_savebgm
	.type	 ScrCmd_savebgm,function
	.thumb_func
ScrCmd_savebgm:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	Overworld_SetSavedMusic
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe97:
	.size	 ScrCmd_savebgm,.Lfe97-ScrCmd_savebgm
	.align	2, 0
	.globl	ScrCmd_fadedefaultbgm
	.type	 ScrCmd_fadedefaultbgm,function
	.thumb_func
ScrCmd_fadedefaultbgm:
	push	{lr}
	bl	Overworld_ChangeMusicToDefault
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe98:
	.size	 ScrCmd_fadedefaultbgm,.Lfe98-ScrCmd_fadedefaultbgm
	.align	2, 0
	.globl	ScrCmd_fadenewbgm
	.type	 ScrCmd_fadenewbgm,function
	.thumb_func
ScrCmd_fadenewbgm:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	Overworld_ChangeMusicTo
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe99:
	.size	 ScrCmd_fadenewbgm,.Lfe99-ScrCmd_fadenewbgm
	.align	2, 0
	.globl	ScrCmd_fadeoutbgm
	.type	 ScrCmd_fadeoutbgm,function
	.thumb_func
ScrCmd_fadeoutbgm:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	cmp	r1, #0
	beq	.L199	@cond_branch
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x18
	bl	FadeOutBGMTemporarily
	b	.L200
.L199:
	mov	r0, #0x4
	bl	FadeOutBGMTemporarily
.L200:
	ldr	r1, .L201
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L202:
	.align	2, 0
.L201:
	.word	IsBGMPausedOrStopped
.Lfe100:
	.size	 ScrCmd_fadeoutbgm,.Lfe100-ScrCmd_fadeoutbgm
	.align	2, 0
	.globl	ScrCmd_fadeinbgm
	.type	 ScrCmd_fadeinbgm,function
	.thumb_func
ScrCmd_fadeinbgm:
	push	{lr}
	ldr	r1, [r0, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	cmp	r2, #0
	beq	.L204	@cond_branch
	lsl	r0, r2, #0x1a
	lsr	r0, r0, #0x18
	bl	FadeInBGM
	b	.L205
.L204:
	mov	r0, #0x4
	bl	FadeInBGM
.L205:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe101:
	.size	 ScrCmd_fadeinbgm,.Lfe101-ScrCmd_fadeinbgm
	.align	2, 0
	.globl	ScrCmd_applymovement
	.type	 ScrCmd_applymovement,function
	.thumb_func
ScrCmd_applymovement:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadWord
	add	r3, r0, #0
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L207
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	ScriptMovement_StartObjectMovementScript
	ldr	r0, .L207+0x4
	strh	r4, [r0]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L208:
	.align	2, 0
.L207:
	.word	gSaveBlock1
	.word	sMovingNpcId
.Lfe102:
	.size	 ScrCmd_applymovement,.Lfe102-ScrCmd_applymovement
	.align	2, 0
	.globl	ScrCmd_applymovement_at
	.type	 ScrCmd_applymovement_at,function
	.thumb_func
ScrCmd_applymovement_at:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadWord
	add	r3, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r2, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	ScriptMovement_StartObjectMovementScript
	ldr	r0, .L210
	strh	r4, [r0]
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L211:
	.align	2, 0
.L210:
	.word	sMovingNpcId
.Lfe103:
	.size	 ScrCmd_applymovement_at,.Lfe103-ScrCmd_applymovement_at
	.align	2, 0
	.type	 WaitForMovementFinish,function
	.thumb_func
WaitForMovementFinish:
	push	{lr}
	ldr	r0, .L213
	ldrb	r0, [r0]
	ldr	r1, .L213+0x4
	ldrb	r1, [r1]
	ldr	r2, .L213+0x8
	ldrb	r2, [r2]
	bl	ScriptMovement_IsObjectMovementFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L214:
	.align	2, 0
.L213:
	.word	sMovingNpcId
	.word	sMovingNpcMapId
	.word	sMovingNpcMapBank
.Lfe104:
	.size	 WaitForMovementFinish,.Lfe104-WaitForMovementFinish
	.align	2, 0
	.globl	ScrCmd_waitmovement
	.type	 ScrCmd_waitmovement,function
	.thumb_func
ScrCmd_waitmovement:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L216	@cond_branch
	ldr	r0, .L217
	strh	r1, [r0]
.L216:
	ldr	r1, .L217+0x4
	ldr	r2, .L217+0x8
	mov	r0, #0x4
	ldrsb	r0, [r2, r0]
	strh	r0, [r1]
	ldr	r1, .L217+0xc
	mov	r0, #0x5
	ldrsb	r0, [r2, r0]
	strh	r0, [r1]
	ldr	r1, .L217+0x10
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L218:
	.align	2, 0
.L217:
	.word	sMovingNpcId
	.word	sMovingNpcMapBank
	.word	gSaveBlock1
	.word	sMovingNpcMapId
	.word	WaitForMovementFinish
.Lfe105:
	.size	 ScrCmd_waitmovement,.Lfe105-ScrCmd_waitmovement
	.align	2, 0
	.globl	ScrCmd_waitmovement_at
	.type	 ScrCmd_waitmovement_at,function
	.thumb_func
ScrCmd_waitmovement_at:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L220	@cond_branch
	ldr	r0, .L221
	strh	r1, [r0]
.L220:
	ldr	r0, [r4, #0x8]
	ldrb	r2, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	ldr	r0, .L221+0x4
	strh	r2, [r0]
	ldr	r0, .L221+0x8
	strh	r1, [r0]
	ldr	r1, .L221+0xc
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L222:
	.align	2, 0
.L221:
	.word	sMovingNpcId
	.word	sMovingNpcMapBank
	.word	sMovingNpcMapId
	.word	WaitForMovementFinish
.Lfe106:
	.size	 ScrCmd_waitmovement_at,.Lfe106-ScrCmd_waitmovement_at
	.align	2, 0
	.globl	ScrCmd_removeobject
	.type	 ScrCmd_removeobject,function
	.thumb_func
ScrCmd_removeobject:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L224
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	RemoveFieldObjectByLocalIdAndMap
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L225:
	.align	2, 0
.L224:
	.word	gSaveBlock1
.Lfe107:
	.size	 ScrCmd_removeobject,.Lfe107-ScrCmd_removeobject
	.align	2, 0
	.globl	ScrCmd_removeobject_at
	.type	 ScrCmd_removeobject_at,function
	.thumb_func
ScrCmd_removeobject_at:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r3, [r4, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	ldrb	r1, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveFieldObjectByLocalIdAndMap
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe108:
	.size	 ScrCmd_removeobject_at,.Lfe108-ScrCmd_removeobject_at
	.align	2, 0
	.globl	ScrCmd_addobject
	.type	 ScrCmd_addobject,function
	.thumb_func
ScrCmd_addobject:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L228
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	show_sprite
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L229:
	.align	2, 0
.L228:
	.word	gSaveBlock1
.Lfe109:
	.size	 ScrCmd_addobject,.Lfe109-ScrCmd_addobject
	.align	2, 0
	.globl	ScrCmd_addobject_at
	.type	 ScrCmd_addobject_at,function
	.thumb_func
ScrCmd_addobject_at:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r3, [r4, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	ldrb	r1, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	show_sprite
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe110:
	.size	 ScrCmd_addobject_at,.Lfe110-ScrCmd_addobject_at
	.align	2, 0
	.globl	ScrCmd_setobjectxy
	.type	 ScrCmd_setobjectxy,function
	.thumb_func
ScrCmd_setobjectxy:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r6, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r6, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r2, .L232
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp]
	add	r0, r5, #0
	add	r3, r4, #0
	bl	sub_805C0F8
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L233:
	.align	2, 0
.L232:
	.word	gSaveBlock1
.Lfe111:
	.size	 ScrCmd_setobjectxy,.Lfe111-ScrCmd_setobjectxy
	.align	2, 0
	.globl	ScrCmd_setobjectxyperm
	.type	 ScrCmd_setobjectxyperm,function
	.thumb_func
ScrCmd_setobjectxyperm:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r6, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r2, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	Overworld_SetMapObjTemplateCoords
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe112:
	.size	 ScrCmd_setobjectxyperm,.Lfe112-ScrCmd_setobjectxyperm
	.align	2, 0
	.globl	ScrCmd_moveobjectoffscreen
	.type	 ScrCmd_moveobjectoffscreen,function
	.thumb_func
ScrCmd_moveobjectoffscreen:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L236
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	sub_805C78C
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L237:
	.align	2, 0
.L236:
	.word	gSaveBlock1
.Lfe113:
	.size	 ScrCmd_moveobjectoffscreen,.Lfe113-ScrCmd_moveobjectoffscreen
	.align	2, 0
	.globl	ScrCmd_showobject
	.type	 ScrCmd_showobject,function
	.thumb_func
ScrCmd_showobject:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r3, [r4, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	ldrb	r1, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x0
	bl	npc_by_local_id_and_map_set_field_1_bit_x20
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe114:
	.size	 ScrCmd_showobject,.Lfe114-ScrCmd_showobject
	.align	2, 0
	.globl	ScrCmd_hideobject
	.type	 ScrCmd_hideobject,function
	.thumb_func
ScrCmd_hideobject:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r3, [r4, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	ldrb	r1, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x1
	bl	npc_by_local_id_and_map_set_field_1_bit_x20
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe115:
	.size	 ScrCmd_hideobject,.Lfe115-ScrCmd_hideobject
	.align	2, 0
	.globl	ScrCmd_setobjectpriority
	.type	 ScrCmd_setobjectpriority,function
	.thumb_func
ScrCmd_setobjectpriority:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r3, [r5, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r5, #0x8]
	ldrb	r1, [r3]
	add	r4, r3, #0x1
	str	r4, [r5, #0x8]
	ldrb	r3, [r3, #0x1]
	add	r4, r4, #0x1
	str	r4, [r5, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r3, #0x53
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	sub_805BCF0
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe116:
	.size	 ScrCmd_setobjectpriority,.Lfe116-ScrCmd_setobjectpriority
	.align	2, 0
	.globl	ScrCmd_resetobjectpriority
	.type	 ScrCmd_resetobjectpriority,function
	.thumb_func
ScrCmd_resetobjectpriority:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r3, [r4, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	ldrb	r1, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_805BD48
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe117:
	.size	 ScrCmd_resetobjectpriority,.Lfe117-ScrCmd_resetobjectpriority
	.align	2, 0
	.globl	ScrCmd_faceplayer
	.type	 ScrCmd_faceplayer,function
	.thumb_func
ScrCmd_faceplayer:
	push	{r4, lr}
	ldr	r2, .L244
	ldr	r0, .L244+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L243	@cond_branch
	bl	player_get_direction_lower_nybble
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	FieldObjectFaceOppositeDirection
.L243:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L245:
	.align	2, 0
.L244:
	.word	gMapObjects
	.word	gSelectedMapObject
.Lfe118:
	.size	 ScrCmd_faceplayer,.Lfe118-ScrCmd_faceplayer
	.align	2, 0
	.globl	ScrCmd_turnobject
	.type	 ScrCmd_turnobject,function
	.thumb_func
ScrCmd_turnobject:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r1, [r4, #0x8]
	ldrb	r3, [r1]
	add	r1, r1, #0x1
	str	r1, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L247
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	FieldObjectTurnByLocalIdAndMap
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L248:
	.align	2, 0
.L247:
	.word	gSaveBlock1
.Lfe119:
	.size	 ScrCmd_turnobject,.Lfe119-ScrCmd_turnobject
	.align	2, 0
	.globl	ScrCmd_setobjectmovementtype
	.type	 ScrCmd_setobjectmovementtype,function
	.thumb_func
ScrCmd_setobjectmovementtype:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r2, [r4, #0x8]
	ldrb	r1, [r2]
	add	r2, r2, #0x1
	str	r2, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	Overworld_SetMapObjTemplateMovementType
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe120:
	.size	 ScrCmd_setobjectmovementtype,.Lfe120-ScrCmd_setobjectmovementtype
	.align	2, 0
	.globl	ScrCmd_createvobject
	.type	 ScrCmd_createvobject,function
	.thumb_func
ScrCmd_createvobject:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xfffffff8
	add	r5, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r6, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r3, r0, #0
	ldr	r0, [r5, #0x8]
	ldrb	r2, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r5, #0x8]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	str	r2, [sp]
	str	r1, [sp, #0x4]
	mov	r0, r8
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_805B410
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe121:
	.size	 ScrCmd_createvobject,.Lfe121-ScrCmd_createvobject
	.align	2, 0
	.globl	ScrCmd_turnvobject
	.type	 ScrCmd_turnvobject,function
	.thumb_func
ScrCmd_turnvobject:
	push	{lr}
	ldr	r2, [r0, #0x8]
	ldrb	r3, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	add	r0, r3, #0
	bl	sub_8064990
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe122:
	.size	 ScrCmd_turnvobject,.Lfe122-ScrCmd_turnvobject
	.align	2, 0
	.globl	ScrCmd_lockall
	.type	 ScrCmd_lockall,function
	.thumb_func
ScrCmd_lockall:
	push	{r4, lr}
	add	r4, r0, #0
	bl	is_c1_link_related_active
	cmp	r0, #0
	bne	.L253	@cond_branch
	bl	ScriptFreezeMapObjects
	ldr	r1, .L256
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	b	.L255
.L257:
	.align	2, 0
.L256:
	.word	sub_8064CFC
.L253:
	mov	r0, #0x0
.L255:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe123:
	.size	 ScrCmd_lockall,.Lfe123-ScrCmd_lockall
	.align	2, 0
	.globl	ScrCmd_lock
	.type	 ScrCmd_lock,function
	.thumb_func
ScrCmd_lock:
	push	{r4, lr}
	add	r4, r0, #0
	bl	is_c1_link_related_active
	cmp	r0, #0
	beq	.L259	@cond_branch
	mov	r0, #0x0
	b	.L263
.L259:
	ldr	r2, .L264
	ldr	r0, .L264+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L261	@cond_branch
	bl	LockSelectedMapObject
	ldr	r1, .L264+0x8
	add	r0, r4, #0
	bl	SetupNativeScript
	b	.L262
.L265:
	.align	2, 0
.L264:
	.word	gMapObjects
	.word	gSelectedMapObject
	.word	sub_8064DB4
.L261:
	bl	ScriptFreezeMapObjects
	ldr	r1, .L266
	add	r0, r4, #0
	bl	SetupNativeScript
.L262:
	mov	r0, #0x1
.L263:
	pop	{r4}
	pop	{r1}
	bx	r1
.L267:
	.align	2, 0
.L266:
	.word	sub_8064CFC
.Lfe124:
	.size	 ScrCmd_lock,.Lfe124-ScrCmd_lock
	.align	2, 0
	.globl	ScrCmd_releaseall
	.type	 ScrCmd_releaseall,function
	.thumb_func
ScrCmd_releaseall:
	push	{lr}
	bl	HideFieldMessageBox
	mov	r0, #0xff
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetFieldObjectIdByLocalIdAndMap
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L269
	add	r0, r0, r1
	bl	FieldObjectClearAnimIfSpecialAnimFinished
	bl	sub_80A2178
	bl	UnfreezeMapObjects
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L270:
	.align	2, 0
.L269:
	.word	gMapObjects
.Lfe125:
	.size	 ScrCmd_releaseall,.Lfe125-ScrCmd_releaseall
	.align	2, 0
	.globl	ScrCmd_release
	.type	 ScrCmd_release,function
	.thumb_func
ScrCmd_release:
	push	{r4, lr}
	bl	HideFieldMessageBox
	ldr	r4, .L273
	ldr	r0, .L273+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L272	@cond_branch
	add	r0, r1, #0
	bl	FieldObjectClearAnimIfSpecialAnimFinished
.L272:
	mov	r0, #0xff
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetFieldObjectIdByLocalIdAndMap
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	FieldObjectClearAnimIfSpecialAnimFinished
	bl	sub_80A2178
	bl	UnfreezeMapObjects
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L274:
	.align	2, 0
.L273:
	.word	gMapObjects
	.word	gSelectedMapObject
.Lfe126:
	.size	 ScrCmd_release,.Lfe126-ScrCmd_release
	.align	2, 0
	.globl	ScrCmd_message
	.type	 ScrCmd_message,function
	.thumb_func
ScrCmd_message:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	cmp	r0, #0
	bne	.L276	@cond_branch
	ldr	r0, [r4, #0x64]
.L276:
	bl	ShowFieldMessage
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe127:
	.size	 ScrCmd_message,.Lfe127-ScrCmd_message
	.align	2, 0
	.globl	ScrCmd_messageautoscroll
	.type	 ScrCmd_messageautoscroll,function
	.thumb_func
ScrCmd_messageautoscroll:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	cmp	r0, #0
	bne	.L278	@cond_branch
	ldr	r0, [r4, #0x64]
.L278:
	bl	ShowFieldAutoScrollMessage
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe128:
	.size	 ScrCmd_messageautoscroll,.Lfe128-ScrCmd_messageautoscroll
	.align	2, 0
	.globl	ScrCmd_waitmessage
	.type	 ScrCmd_waitmessage,function
	.thumb_func
ScrCmd_waitmessage:
	push	{lr}
	ldr	r1, .L280
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L281:
	.align	2, 0
.L280:
	.word	IsFieldMessageBoxHidden
.Lfe129:
	.size	 ScrCmd_waitmessage,.Lfe129-ScrCmd_waitmessage
	.align	2, 0
	.globl	ScrCmd_closemessage
	.type	 ScrCmd_closemessage,function
	.thumb_func
ScrCmd_closemessage:
	push	{lr}
	bl	HideFieldMessageBox
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe130:
	.size	 ScrCmd_closemessage,.Lfe130-ScrCmd_closemessage
	.align	2, 0
	.type	 WaitForAorBPress,function
	.thumb_func
WaitForAorBPress:
	push	{lr}
	ldr	r0, .L287
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L285	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L285	@cond_branch
	mov	r0, #0x0
	b	.L286
.L288:
	.align	2, 0
.L287:
	.word	gMain
.L285:
	mov	r0, #0x1
.L286:
	pop	{r1}
	bx	r1
.Lfe131:
	.size	 WaitForAorBPress,.Lfe131-WaitForAorBPress
	.align	2, 0
	.globl	ScrCmd_waitbutton
	.type	 ScrCmd_waitbutton,function
	.thumb_func
ScrCmd_waitbutton:
	push	{lr}
	ldr	r1, .L290
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L291:
	.align	2, 0
.L290:
	.word	WaitForAorBPress
.Lfe132:
	.size	 ScrCmd_waitbutton,.Lfe132-ScrCmd_waitbutton
	.align	2, 0
	.globl	ScrCmd_yesnobox
	.type	 ScrCmd_yesnobox,function
	.thumb_func
ScrCmd_yesnobox:
	push	{lr}
	ldr	r2, [r0, #0x8]
	ldrb	r3, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	add	r0, r3, #0
	bl	ScriptMenu_YesNo
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L293	@cond_branch
	mov	r0, #0x0
	b	.L295
.L293:
	bl	ScriptContext1_Stop
	mov	r0, #0x1
.L295:
	pop	{r1}
	bx	r1
.Lfe133:
	.size	 ScrCmd_yesnobox,.Lfe133-ScrCmd_yesnobox
	.align	2, 0
	.globl	ScrCmd_multichoice
	.type	 ScrCmd_multichoice,function
	.thumb_func
ScrCmd_multichoice:
	push	{r4, r5, lr}
	ldr	r2, [r0, #0x8]
	ldrb	r5, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r3, r2, #0x1
	str	r3, [r0, #0x8]
	ldrb	r2, [r2, #0x1]
	add	r4, r3, #0x1
	str	r4, [r0, #0x8]
	ldrb	r3, [r3, #0x1]
	add	r4, r4, #0x1
	str	r4, [r0, #0x8]
	add	r0, r5, #0
	bl	ScriptMenu_Multichoice
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L297	@cond_branch
	mov	r0, #0x0
	b	.L299
.L297:
	bl	ScriptContext1_Stop
	mov	r0, #0x1
.L299:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe134:
	.size	 ScrCmd_multichoice,.Lfe134-ScrCmd_multichoice
	.align	2, 0
	.globl	ScrCmd_multichoicedefault
	.type	 ScrCmd_multichoicedefault,function
	.thumb_func
ScrCmd_multichoicedefault:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xfffffffc
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2]
	mov	r8, r1
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r3, r2, #0x1
	str	r3, [r0, #0x8]
	ldrb	r2, [r2, #0x1]
	add	r5, r3, #0x1
	str	r5, [r0, #0x8]
	ldrb	r6, [r3, #0x1]
	add	r4, r5, #0x1
	str	r4, [r0, #0x8]
	ldrb	r3, [r5, #0x1]
	add	r4, r4, #0x1
	str	r4, [r0, #0x8]
	str	r6, [sp]
	mov	r0, r8
	bl	ScriptMenu_MultichoiceWithDefault
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L301	@cond_branch
	mov	r0, #0x0
	b	.L303
.L301:
	bl	ScriptContext1_Stop
	mov	r0, #0x1
.L303:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe135:
	.size	 ScrCmd_multichoicedefault,.Lfe135-ScrCmd_multichoicedefault
	.align	2, 0
	.globl	ScrCmd_drawbox
	.type	 ScrCmd_drawbox,function
	.thumb_func
ScrCmd_drawbox:
	push	{r4, r5, lr}
	ldr	r2, [r0, #0x8]
	ldrb	r5, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r3, r2, #0x1
	str	r3, [r0, #0x8]
	ldrb	r2, [r2, #0x1]
	add	r4, r3, #0x1
	str	r4, [r0, #0x8]
	ldrb	r3, [r3, #0x1]
	add	r4, r4, #0x1
	str	r4, [r0, #0x8]
	add	r0, r5, #0
	bl	MenuDrawTextWindow
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe136:
	.size	 ScrCmd_drawbox,.Lfe136-ScrCmd_drawbox
	.align	2, 0
	.globl	ScrCmd_multichoicegrid
	.type	 ScrCmd_multichoicegrid,function
	.thumb_func
ScrCmd_multichoicegrid:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xfffffffc
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2]
	mov	r8, r1
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r3, r2, #0x1
	str	r3, [r0, #0x8]
	ldrb	r2, [r2, #0x1]
	add	r5, r3, #0x1
	str	r5, [r0, #0x8]
	ldrb	r6, [r3, #0x1]
	add	r4, r5, #0x1
	str	r4, [r0, #0x8]
	ldrb	r3, [r5, #0x1]
	add	r4, r4, #0x1
	str	r4, [r0, #0x8]
	str	r6, [sp]
	mov	r0, r8
	bl	ScriptMenu_MultichoiceGrid
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L306	@cond_branch
	mov	r0, #0x0
	b	.L308
.L306:
	bl	ScriptContext1_Stop
	mov	r0, #0x1
.L308:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe137:
	.size	 ScrCmd_multichoicegrid,.Lfe137-ScrCmd_multichoicegrid
	.align	2, 0
	.globl	ScrCmd_erasebox
	.type	 ScrCmd_erasebox,function
	.thumb_func
ScrCmd_erasebox:
	push	{r4, r5, lr}
	ldr	r2, [r0, #0x8]
	ldrb	r5, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r3, r2, #0x1
	str	r3, [r0, #0x8]
	ldrb	r2, [r2, #0x1]
	add	r4, r3, #0x1
	str	r4, [r0, #0x8]
	ldrb	r3, [r3, #0x1]
	add	r4, r4, #0x1
	str	r4, [r0, #0x8]
	add	r0, r5, #0
	bl	MenuZeroFillWindowRect
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe138:
	.size	 ScrCmd_erasebox,.Lfe138-ScrCmd_erasebox
	.align	2, 0
	.globl	ScrCmd_drawboxtext
	.type	 ScrCmd_drawboxtext,function
	.thumb_func
ScrCmd_drawboxtext:
	push	{r4, r5, lr}
	ldr	r2, [r0, #0x8]
	ldrb	r5, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r3, r2, #0x1
	str	r3, [r0, #0x8]
	ldrb	r2, [r2, #0x1]
	add	r4, r3, #0x1
	str	r4, [r0, #0x8]
	ldrb	r3, [r3, #0x1]
	add	r4, r4, #0x1
	str	r4, [r0, #0x8]
	add	r0, r5, #0
	bl	Multichoice
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L311	@cond_branch
	mov	r0, #0x0
	b	.L313
.L311:
	bl	ScriptContext1_Stop
	mov	r0, #0x1
.L313:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe139:
	.size	 ScrCmd_drawboxtext,.Lfe139-ScrCmd_drawboxtext
	.align	2, 0
	.globl	ScrCmd_drawpokepic
	.type	 ScrCmd_drawpokepic,function
	.thumb_func
ScrCmd_drawpokepic:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r3, [r4, #0x8]
	ldrb	r1, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r4, #0x8]
	bl	ScriptMenu_ShowPokemonPic
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe140:
	.size	 ScrCmd_drawpokepic,.Lfe140-ScrCmd_drawpokepic
	.align	2, 0
	.globl	ScrCmd_erasepokepic
	.type	 ScrCmd_erasepokepic,function
	.thumb_func
ScrCmd_erasepokepic:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptMenu_GetPicboxWaitFunc
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L316	@cond_branch
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	b	.L317
.L316:
	mov	r0, #0x0
.L317:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe141:
	.size	 ScrCmd_erasepokepic,.Lfe141-ScrCmd_erasepokepic
	.align	2, 0
	.globl	ScrCmd_drawcontestwinner
	.type	 ScrCmd_drawcontestwinner,function
	.thumb_func
ScrCmd_drawcontestwinner:
	push	{lr}
	ldr	r1, [r0, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	cmp	r2, #0
	beq	.L319	@cond_branch
	add	r0, r2, #0
	bl	sub_8106630
.L319:
	bl	ShowContestWinner
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe142:
	.size	 ScrCmd_drawcontestwinner,.Lfe142-ScrCmd_drawcontestwinner
	.align	2, 0
	.globl	ScrCmd_braillemessage
	.type	 ScrCmd_braillemessage,function
	.thumb_func
ScrCmd_braillemessage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	bl	ScriptReadWord
	add	r1, r0, #0
	ldrb	r5, [r1]
	ldrb	r6, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	mov	r8, r0
	ldrb	r0, [r1, #0x3]
	mov	r9, r0
	ldrb	r0, [r1, #0x4]
	mov	sl, r0
	ldrb	r7, [r1, #0x5]
	ldr	r4, .L321
	add	r1, r1, #0x6
	add	r0, r4, #0
	bl	StringBraille
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, r8
	mov	r3, r9
	bl	MenuDrawTextWindow
	add	r0, r4, #0
	mov	r1, sl
	add	r2, r7, #0
	bl	MenuPrint
	mov	r0, #0x0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L322:
	.align	2, 0
.L321:
	.word	gStringVar4
.Lfe143:
	.size	 ScrCmd_braillemessage,.Lfe143-ScrCmd_braillemessage
	.align	2, 0
	.globl	ScrCmd_vmessage
	.type	 ScrCmd_vmessage,function
	.thumb_func
ScrCmd_vmessage:
	push	{lr}
	bl	ScriptReadWord
	ldr	r1, .L324
	ldr	r1, [r1]
	sub	r0, r0, r1
	bl	ShowFieldMessage
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L325:
	.align	2, 0
.L324:
	.word	gUnknown_0202E8B0
.Lfe144:
	.size	 ScrCmd_vmessage,.Lfe144-ScrCmd_vmessage
	.align	2, 0
	.globl	ScrCmd_getspeciesname
	.type	 ScrCmd_getspeciesname,function
	.thumb_func
ScrCmd_getspeciesname:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L327
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldr	r2, [r4]
	mov	r1, #0xb
	mul	r1, r1, r0
	ldr	r0, .L327+0x4
	add	r1, r1, r0
	add	r0, r2, #0
	bl	StringCopy
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L328:
	.align	2, 0
.L327:
	.word	sScriptStringVars
	.word	gSpeciesNames
.Lfe145:
	.size	 ScrCmd_getspeciesname,.Lfe145-ScrCmd_getspeciesname
	.align	2, 0
	.globl	ScrCmd_getfirstpartypokename
	.type	 ScrCmd_getfirstpartypokename,function
	.thumb_func
ScrCmd_getfirstpartypokename:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	ldr	r0, .L330
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r4, [r2]
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L330+0x4
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xb
	mul	r1, r1, r0
	ldr	r0, .L330+0x8
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L331:
	.align	2, 0
.L330:
	.word	sScriptStringVars
	.word	gPlayerParty
	.word	gSpeciesNames
.Lfe146:
	.size	 ScrCmd_getfirstpartypokename,.Lfe146-ScrCmd_getfirstpartypokename
	.align	2, 0
	.globl	ScrCmd_getpartypokename
	.type	 ScrCmd_getpartypokename,function
	.thumb_func
ScrCmd_getpartypokename:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L333
	add	r0, r0, r1
	ldr	r1, .L333+0x4
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldr	r4, [r4]
	mov	r1, #0x2
	add	r2, r4, #0
	bl	GetMonData
	add	r0, r4, #0
	bl	StringGetEnd10
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L334:
	.align	2, 0
.L333:
	.word	gPlayerParty
	.word	sScriptStringVars
.Lfe147:
	.size	 ScrCmd_getpartypokename,.Lfe147-ScrCmd_getpartypokename
	.align	2, 0
	.globl	ScrCmd_getitemname
	.type	 ScrCmd_getitemname,function
	.thumb_func
ScrCmd_getitemname:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L336
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldr	r1, [r4]
	bl	CopyItemName
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L337:
	.align	2, 0
.L336:
	.word	sScriptStringVars
.Lfe148:
	.size	 ScrCmd_getitemname,.Lfe148-ScrCmd_getitemname
	.align	2, 0
	.globl	ScrCmd_getdecorname
	.type	 ScrCmd_getdecorname,function
	.thumb_func
ScrCmd_getdecorname:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	ldr	r0, .L339
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, [r4]
	lsr	r1, r1, #0xb
	ldr	r2, .L339+0x4
	add	r1, r1, r2
	bl	StringCopy
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L340:
	.align	2, 0
.L339:
	.word	sScriptStringVars
	.word	gDecorations+0x1
.Lfe149:
	.size	 ScrCmd_getdecorname,.Lfe149-ScrCmd_getdecorname
	.align	2, 0
	.globl	ScrCmd_getmovename
	.type	 ScrCmd_getmovename,function
	.thumb_func
ScrCmd_getmovename:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L342
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldr	r2, [r4]
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	ldr	r0, .L342+0x4
	add	r1, r1, r0
	add	r0, r2, #0
	bl	StringCopy
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L343:
	.align	2, 0
.L342:
	.word	sScriptStringVars
	.word	gMoveNames
.Lfe150:
	.size	 ScrCmd_getmovename,.Lfe150-ScrCmd_getmovename
	.align	2, 0
	.globl	ScrCmd_getnumberstring
	.type	 ScrCmd_getnumberstring,function
	.thumb_func
ScrCmd_getnumberstring:
	push	{r4, r5, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r5, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r4, #0
	bl	sub_80BF0B8
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L345
	lsl	r5, r5, #0x2
	add	r5, r5, r0
	ldr	r0, [r5]
	add	r1, r4, #0
	mov	r2, #0x0
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L346:
	.align	2, 0
.L345:
	.word	sScriptStringVars
.Lfe151:
	.size	 ScrCmd_getnumberstring,.Lfe151-ScrCmd_getnumberstring
	.align	2, 0
	.globl	ScrCmd_getstdstring
	.type	 ScrCmd_getstdstring,function
	.thumb_func
ScrCmd_getstdstring:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	ldr	r1, .L348
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldr	r2, [r4]
	ldr	r1, .L348+0x4
	lsr	r0, r0, #0xe
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r2, #0
	bl	StringCopy
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L349:
	.align	2, 0
.L348:
	.word	sScriptStringVars
	.word	gUnknown_083CE048
.Lfe152:
	.size	 ScrCmd_getstdstring,.Lfe152-ScrCmd_getstdstring
	.align	2, 0
	.globl	ScrCmd_getstring
	.type	 ScrCmd_getstring,function
	.thumb_func
ScrCmd_getstring:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadWord
	add	r1, r0, #0
	ldr	r0, .L351
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, [r4]
	bl	StringCopy
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L352:
	.align	2, 0
.L351:
	.word	sScriptStringVars
.Lfe153:
	.size	 ScrCmd_getstring,.Lfe153-ScrCmd_getstring
	.align	2, 0
	.globl	ScrCmd_vloadword
	.type	 ScrCmd_vloadword,function
	.thumb_func
ScrCmd_vloadword:
	push	{lr}
	bl	ScriptReadWord
	add	r1, r0, #0
	ldr	r0, .L354
	ldr	r0, [r0]
	sub	r1, r1, r0
	ldr	r0, .L354+0x4
	bl	StringExpandPlaceholders
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L355:
	.align	2, 0
.L354:
	.word	gUnknown_0202E8B0
	.word	gStringVar4
.Lfe154:
	.size	 ScrCmd_vloadword,.Lfe154-ScrCmd_vloadword
	.align	2, 0
	.globl	ScrCmd_vgetstring
	.type	 ScrCmd_vgetstring,function
	.thumb_func
ScrCmd_vgetstring:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadWord
	add	r1, r0, #0
	ldr	r0, .L357
	ldr	r0, [r0]
	sub	r1, r1, r0
	ldr	r0, .L357+0x4
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, [r4]
	bl	StringCopy
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L358:
	.align	2, 0
.L357:
	.word	gUnknown_0202E8B0
	.word	sScriptStringVars
.Lfe155:
	.size	 ScrCmd_vgetstring,.Lfe155-ScrCmd_vgetstring
	.align	2, 0
	.globl	ScrCmd_givepoke
	.type	 ScrCmd_givepoke,function
	.thumb_func
ScrCmd_givepoke:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r6, r0, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	ldr	r0, [r4, #0x8]
	ldrb	r1, [r0]
	mov	r9, r1
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	bl	ScriptReadWord
	mov	r8, r0
	add	r0, r4, #0
	bl	ScriptReadWord
	ldr	r1, [r4, #0x8]
	ldrb	r2, [r1]
	add	r1, r1, #0x1
	str	r1, [r4, #0x8]
	ldr	r4, .L360
	str	r0, [sp]
	str	r2, [sp, #0x4]
	add	r0, r6, #0
	mov	r1, r9
	add	r2, r5, #0
	mov	r3, r8
	bl	ScriptGiveMon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L361:
	.align	2, 0
.L360:
	.word	gScriptResult
.Lfe156:
	.size	 ScrCmd_givepoke,.Lfe156-ScrCmd_givepoke
	.align	2, 0
	.globl	ScrCmd_giveegg
	.type	 ScrCmd_giveegg,function
	.thumb_func
ScrCmd_giveegg:
	push	{r4, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L363
	bl	ScriptGiveEgg
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L364:
	.align	2, 0
.L363:
	.word	gScriptResult
.Lfe157:
	.size	 ScrCmd_giveegg,.Lfe157-ScrCmd_giveegg
	.align	2, 0
	.globl	ScrCmd_setpokemove
	.type	 ScrCmd_setpokemove,function
	.thumb_func
ScrCmd_setpokemove:
	push	{r4, r5, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r5, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	add	r2, r4, #0
	bl	ScriptSetMonMoveSlot
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe158:
	.size	 ScrCmd_setpokemove,.Lfe158-ScrCmd_setpokemove
	.align	2, 0
	.globl	ScrCmd_checkpokemove
	.type	 ScrCmd_checkpokemove,function
	.thumb_func
ScrCmd_checkpokemove:
	push	{r4, r5, r6, r7, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r1, .L374
	mov	r0, #0x6
	strh	r0, [r1]
	mov	r6, #0x0
	b	.L367
.L375:
	.align	2, 0
.L374:
	.word	gScriptResult
.L371:
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L369	@cond_branch
	add	r0, r4, #0
	add	r1, r7, #0
	bl	pokemon_has_move
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L369	@cond_branch
	ldr	r0, .L376
	strh	r6, [r0]
	ldr	r0, .L376+0x4
	strh	r5, [r0]
	b	.L368
.L377:
	.align	2, 0
.L376:
	.word	gScriptResult
	.word	gSpecialVar_0x8004
.L369:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L367:
	cmp	r6, #0x5
	bhi	.L368	@cond_branch
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L378
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0
	bne	.L371	@cond_branch
.L368:
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L379:
	.align	2, 0
.L378:
	.word	gPlayerParty
.Lfe159:
	.size	 ScrCmd_checkpokemove,.Lfe159-ScrCmd_checkpokemove
	.align	2, 0
	.globl	ScrCmd_givemoney
	.type	 ScrCmd_givemoney,function
	.thumb_func
ScrCmd_givemoney:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r2, r0, #0
	ldr	r0, [r4, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	cmp	r1, #0
	bne	.L381	@cond_branch
	ldr	r0, .L382
	add	r1, r2, #0
	bl	AddMoney
.L381:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L383:
	.align	2, 0
.L382:
	.word	gSaveBlock1+0x490
.Lfe160:
	.size	 ScrCmd_givemoney,.Lfe160-ScrCmd_givemoney
	.align	2, 0
	.globl	ScrCmd_takemoney
	.type	 ScrCmd_takemoney,function
	.thumb_func
ScrCmd_takemoney:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r2, r0, #0
	ldr	r0, [r4, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	cmp	r1, #0
	bne	.L385	@cond_branch
	ldr	r0, .L386
	add	r1, r2, #0
	bl	RemoveMoney
.L385:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L387:
	.align	2, 0
.L386:
	.word	gSaveBlock1+0x490
.Lfe161:
	.size	 ScrCmd_takemoney,.Lfe161-ScrCmd_takemoney
	.align	2, 0
	.globl	ScrCmd_checkmoney
	.type	 ScrCmd_checkmoney,function
	.thumb_func
ScrCmd_checkmoney:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadWord
	add	r2, r0, #0
	ldr	r0, [r4, #0x8]
	ldrb	r1, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	cmp	r1, #0
	bne	.L389	@cond_branch
	ldr	r4, .L390
	ldr	r0, .L390+0x4
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r2, #0
	bl	IsEnoughMoney
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
.L389:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L391:
	.align	2, 0
.L390:
	.word	gScriptResult
	.word	gSaveBlock1
.Lfe162:
	.size	 ScrCmd_checkmoney,.Lfe162-ScrCmd_checkmoney
	.align	2, 0
	.globl	ScrCmd_showmoneybox
	.type	 ScrCmd_showmoneybox,function
	.thumb_func
ScrCmd_showmoneybox:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	ldrb	r3, [r1]
	add	r2, r1, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r1, #0x1]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	cmp	r1, #0
	bne	.L393	@cond_branch
	ldr	r0, .L394
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r4, #0
	add	r2, r3, #0
	bl	OpenMoneyWindow
.L393:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L395:
	.align	2, 0
.L394:
	.word	gSaveBlock1
.Lfe163:
	.size	 ScrCmd_showmoneybox,.Lfe163-ScrCmd_showmoneybox
	.align	2, 0
	.globl	ScrCmd_hidemoneybox
	.type	 ScrCmd_hidemoneybox,function
	.thumb_func
ScrCmd_hidemoneybox:
	push	{lr}
	ldr	r2, [r0, #0x8]
	ldrb	r3, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	add	r0, r3, #0
	bl	CloseMoneyWindow
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe164:
	.size	 ScrCmd_hidemoneybox,.Lfe164-ScrCmd_hidemoneybox
	.align	2, 0
	.globl	ScrCmd_updatemoneybox
	.type	 ScrCmd_updatemoneybox,function
	.thumb_func
ScrCmd_updatemoneybox:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	ldrb	r3, [r1]
	add	r2, r1, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r1, #0x1]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	cmp	r1, #0
	bne	.L398	@cond_branch
	ldr	r0, .L399
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r4, #0
	add	r2, r3, #0
	bl	UpdateMoneyWindow
.L398:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L400:
	.align	2, 0
.L399:
	.word	gSaveBlock1
.Lfe165:
	.size	 ScrCmd_updatemoneybox,.Lfe165-ScrCmd_updatemoneybox
	.align	2, 0
	.globl	ScrCmd_showcoinsbox
	.type	 ScrCmd_showcoinsbox,function
	.thumb_func
ScrCmd_showcoinsbox:
	push	{lr}
	ldr	r3, [r0, #0x8]
	ldrb	r1, [r3]
	add	r3, r3, #0x1
	str	r3, [r0, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r0, #0x8]
	ldr	r0, .L402
	ldr	r3, .L402+0x4
	add	r0, r0, r3
	ldrh	r0, [r0]
	bl	ShowCoinsWindow
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L403:
	.align	2, 0
.L402:
	.word	gSaveBlock1
	.word	0x494
.Lfe166:
	.size	 ScrCmd_showcoinsbox,.Lfe166-ScrCmd_showcoinsbox
	.align	2, 0
	.globl	ScrCmd_hidecoinsbox
	.type	 ScrCmd_hidecoinsbox,function
	.thumb_func
ScrCmd_hidecoinsbox:
	push	{lr}
	ldr	r2, [r0, #0x8]
	ldrb	r3, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	ldrb	r1, [r2]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	add	r0, r3, #0
	bl	HideCoinsWindow
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe167:
	.size	 ScrCmd_hidecoinsbox,.Lfe167-ScrCmd_hidecoinsbox
	.align	2, 0
	.globl	ScrCmd_updatecoinsbox
	.type	 ScrCmd_updatecoinsbox,function
	.thumb_func
ScrCmd_updatecoinsbox:
	push	{lr}
	ldr	r3, [r0, #0x8]
	ldrb	r1, [r3]
	add	r3, r3, #0x1
	str	r3, [r0, #0x8]
	ldrb	r2, [r3]
	add	r3, r3, #0x1
	str	r3, [r0, #0x8]
	ldr	r0, .L406
	ldr	r3, .L406+0x4
	add	r0, r0, r3
	ldrh	r0, [r0]
	bl	UpdateCoinsWindow
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L407:
	.align	2, 0
.L406:
	.word	gSaveBlock1
	.word	0x494
.Lfe168:
	.size	 ScrCmd_updatecoinsbox,.Lfe168-ScrCmd_updatecoinsbox
	.align	2, 0
	.globl	ScrCmd_trainerbattle
	.type	 ScrCmd_trainerbattle,function
	.thumb_func
ScrCmd_trainerbattle:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x8]
	bl	BattleSetup_ConfigureTrainerBattle
	str	r0, [r4, #0x8]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe169:
	.size	 ScrCmd_trainerbattle,.Lfe169-ScrCmd_trainerbattle
	.align	2, 0
	.globl	ScrCmd_battlebegin
	.type	 ScrCmd_battlebegin,function
	.thumb_func
ScrCmd_battlebegin:
	push	{lr}
	bl	BattleSetup_StartTrainerBattle
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe170:
	.size	 ScrCmd_battlebegin,.Lfe170-ScrCmd_battlebegin
	.align	2, 0
	.globl	ScrCmd_ontrainerbattleend
	.type	 ScrCmd_ontrainerbattleend,function
	.thumb_func
ScrCmd_ontrainerbattleend:
	push	{r4, lr}
	add	r4, r0, #0
	bl	BattleSetup_GetScriptAddrAfterBattle
	str	r0, [r4, #0x8]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe171:
	.size	 ScrCmd_ontrainerbattleend,.Lfe171-ScrCmd_ontrainerbattleend
	.align	2, 0
	.globl	ScrCmd_ontrainerbattleendgoto
	.type	 ScrCmd_ontrainerbattleendgoto,function
	.thumb_func
ScrCmd_ontrainerbattleendgoto:
	push	{r4, lr}
	add	r4, r0, #0
	bl	BattleSetup_GetTrainerPostBattleScript
	str	r0, [r4, #0x8]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe172:
	.size	 ScrCmd_ontrainerbattleendgoto,.Lfe172-ScrCmd_ontrainerbattleendgoto
	.align	2, 0
	.globl	ScrCmd_checktrainerflag
	.type	 ScrCmd_checktrainerflag,function
	.thumb_func
ScrCmd_checktrainerflag:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	HasTrainerAlreadyBeenFought
	strb	r0, [r4, #0x2]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe173:
	.size	 ScrCmd_checktrainerflag,.Lfe173-ScrCmd_checktrainerflag
	.align	2, 0
	.globl	ScrCmd_settrainerflag
	.type	 ScrCmd_settrainerflag,function
	.thumb_func
ScrCmd_settrainerflag:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	trainer_flag_set
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe174:
	.size	 ScrCmd_settrainerflag,.Lfe174-ScrCmd_settrainerflag
	.align	2, 0
	.globl	ScrCmd_cleartrainerflag
	.type	 ScrCmd_cleartrainerflag,function
	.thumb_func
ScrCmd_cleartrainerflag:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	trainer_flag_clear
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe175:
	.size	 ScrCmd_cleartrainerflag,.Lfe175-ScrCmd_cleartrainerflag
	.align	2, 0
	.globl	ScrCmd_setwildbattle
	.type	 ScrCmd_setwildbattle,function
	.thumb_func
ScrCmd_setwildbattle:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, [r4, #0x8]
	ldrb	r6, [r0]
	add	r0, r0, #0x1
	str	r0, [r4, #0x8]
	add	r0, r4, #0
	bl	ScriptReadHalfword
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r5, #0
	add	r1, r6, #0
	bl	CreateScriptedWildMon
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe176:
	.size	 ScrCmd_setwildbattle,.Lfe176-ScrCmd_setwildbattle
	.align	2, 0
	.globl	ScrCmd_dowildbattle
	.type	 ScrCmd_dowildbattle,function
	.thumb_func
ScrCmd_dowildbattle:
	push	{lr}
	bl	BattleSetup_StartScriptedWildBattle
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe177:
	.size	 ScrCmd_dowildbattle,.Lfe177-ScrCmd_dowildbattle
	.align	2, 0
	.globl	ScrCmd_pokemart
	.type	 ScrCmd_pokemart,function
	.thumb_func
ScrCmd_pokemart:
	push	{lr}
	bl	ScriptReadWord
	bl	CreatePokemartMenu
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe178:
	.size	 ScrCmd_pokemart,.Lfe178-ScrCmd_pokemart
	.align	2, 0
	.globl	ScrCmd_pokemartdecor
	.type	 ScrCmd_pokemartdecor,function
	.thumb_func
ScrCmd_pokemartdecor:
	push	{lr}
	bl	ScriptReadWord
	bl	CreateDecorationShop1Menu
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe179:
	.size	 ScrCmd_pokemartdecor,.Lfe179-ScrCmd_pokemartdecor
	.align	2, 0
	.globl	ScrCmd_pokemartbp
	.type	 ScrCmd_pokemartbp,function
	.thumb_func
ScrCmd_pokemartbp:
	push	{lr}
	bl	ScriptReadWord
	bl	CreateDecorationShop2Menu
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe180:
	.size	 ScrCmd_pokemartbp,.Lfe180-ScrCmd_pokemartbp
	.align	2, 0
	.globl	ScrCmd_playslotmachine
	.type	 ScrCmd_playslotmachine,function
	.thumb_func
ScrCmd_playslotmachine:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L421
	bl	PlaySlotMachine
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L422:
	.align	2, 0
.L421:
	.word	c2_exit_to_overworld_1_continue_scripts_restart_music
.Lfe181:
	.size	 ScrCmd_playslotmachine,.Lfe181-ScrCmd_playslotmachine
	.align	2, 0
	.globl	ScrCmd_plantberrytree
	.type	 ScrCmd_plantberrytree,function
	.thumb_func
ScrCmd_plantberrytree:
	push	{r4, r5, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r5, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	ldrb	r3, [r1]
	add	r2, r1, #0x1
	str	r2, [r0, #0x8]
	ldrb	r4, [r1, #0x1]
	add	r2, r2, #0x1
	str	r2, [r0, #0x8]
	cmp	r3, #0
	bne	.L424	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r4, #0
	mov	r3, #0x0
	bl	PlantBerryTree
	b	.L425
.L424:
	add	r0, r5, #0
	add	r1, r3, #0
	add	r2, r4, #0
	mov	r3, #0x0
	bl	PlantBerryTree
.L425:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe182:
	.size	 ScrCmd_plantberrytree,.Lfe182-ScrCmd_plantberrytree
	.align	2, 0
	.globl	ScrCmd_getpricereduction
	.type	 ScrCmd_getpricereduction,function
	.thumb_func
ScrCmd_getpricereduction:
	push	{r4, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r4, .L427
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetPriceReduction
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L428:
	.align	2, 0
.L427:
	.word	gScriptResult
.Lfe183:
	.size	 ScrCmd_getpricereduction,.Lfe183-ScrCmd_getpricereduction
	.align	2, 0
	.globl	ScrCmd_choosecontestpkmn
	.type	 ScrCmd_choosecontestpkmn,function
	.thumb_func
ScrCmd_choosecontestpkmn:
	push	{lr}
	bl	sub_80F99CC
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe184:
	.size	 ScrCmd_choosecontestpkmn,.Lfe184-ScrCmd_choosecontestpkmn
	.align	2, 0
	.globl	ScrCmd_startcontest
	.type	 ScrCmd_startcontest,function
	.thumb_func
ScrCmd_startcontest:
	push	{lr}
	bl	sub_80C48C8
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe185:
	.size	 ScrCmd_startcontest,.Lfe185-ScrCmd_startcontest
	.align	2, 0
	.globl	ScrCmd_showcontestresults
	.type	 ScrCmd_showcontestresults,function
	.thumb_func
ScrCmd_showcontestresults:
	push	{lr}
	bl	sub_80C4940
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe186:
	.size	 ScrCmd_showcontestresults,.Lfe186-ScrCmd_showcontestresults
	.align	2, 0
	.globl	ScrCmd_contestlinktransfer
	.type	 ScrCmd_contestlinktransfer,function
	.thumb_func
ScrCmd_contestlinktransfer:
	push	{lr}
	ldr	r0, .L433
	ldrb	r0, [r0]
	bl	sub_80C4980
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L434:
	.align	2, 0
.L433:
	.word	gScriptContestCategory
.Lfe187:
	.size	 ScrCmd_contestlinktransfer,.Lfe187-ScrCmd_contestlinktransfer
	.align	2, 0
	.globl	ScrCmd_dofieldeffect
	.type	 ScrCmd_dofieldeffect,function
	.thumb_func
ScrCmd_dofieldeffect:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L436
	strh	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	FieldEffectStart
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L437:
	.align	2, 0
.L436:
	.word	sFieldEffectScriptId
.Lfe188:
	.size	 ScrCmd_dofieldeffect,.Lfe188-ScrCmd_dofieldeffect
	.align	2, 0
	.globl	ScrCmd_setfieldeffect
	.type	 ScrCmd_setfieldeffect,function
	.thumb_func
ScrCmd_setfieldeffect:
	push	{r4, lr}
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1]
	add	r1, r1, #0x1
	str	r1, [r0, #0x8]
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r1, .L439
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L440:
	.align	2, 0
.L439:
	.word	gFieldEffectArguments
.Lfe189:
	.size	 ScrCmd_setfieldeffect,.Lfe189-ScrCmd_setfieldeffect
	.align	2, 0
	.type	 sub_8067B48,function
	.thumb_func
sub_8067B48:
	push	{lr}
	ldr	r0, .L445
	ldrb	r0, [r0]
	bl	FieldEffectActiveListContains
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L442	@cond_branch
	mov	r0, #0x0
	b	.L444
.L446:
	.align	2, 0
.L445:
	.word	sFieldEffectScriptId
.L442:
	mov	r0, #0x1
.L444:
	pop	{r1}
	bx	r1
.Lfe190:
	.size	 sub_8067B48,.Lfe190-sub_8067B48
	.align	2, 0
	.globl	ScrCmd_waitfieldeffect
	.type	 ScrCmd_waitfieldeffect,function
	.thumb_func
ScrCmd_waitfieldeffect:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	ldr	r1, .L448
	strh	r0, [r1]
	ldr	r1, .L448+0x4
	add	r0, r4, #0
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r4}
	pop	{r1}
	bx	r1
.L449:
	.align	2, 0
.L448:
	.word	sFieldEffectScriptId
	.word	sub_8067B48
.Lfe191:
	.size	 ScrCmd_waitfieldeffect,.Lfe191-ScrCmd_waitfieldeffect
	.align	2, 0
	.globl	ScrCmd_sethealplace
	.type	 ScrCmd_sethealplace,function
	.thumb_func
ScrCmd_sethealplace:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	Overworld_SetHealLocationWarp
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe192:
	.size	 ScrCmd_sethealplace,.Lfe192-ScrCmd_sethealplace
	.align	2, 0
	.globl	ScrCmd_checkplayergender
	.type	 ScrCmd_checkplayergender,function
	.thumb_func
ScrCmd_checkplayergender:
	ldr	r0, .L452
	ldr	r1, .L452+0x4
	ldrb	r1, [r1, #0x8]
	strh	r1, [r0]
	mov	r0, #0x0
	bx	lr
.L453:
	.align	2, 0
.L452:
	.word	gScriptResult
	.word	gSaveBlock2
.Lfe193:
	.size	 ScrCmd_checkplayergender,.Lfe193-ScrCmd_checkplayergender
	.align	2, 0
	.globl	ScrCmd_playpokecry
	.type	 ScrCmd_playpokecry,function
	.thumb_func
ScrCmd_playpokecry:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	PlayCry5
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe194:
	.size	 ScrCmd_playpokecry,.Lfe194-ScrCmd_playpokecry
	.align	2, 0
	.globl	ScrCmd_waitpokecry
	.type	 ScrCmd_waitpokecry,function
	.thumb_func
ScrCmd_waitpokecry:
	push	{lr}
	ldr	r1, .L456
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L457:
	.align	2, 0
.L456:
	.word	IsCryFinished
.Lfe195:
	.size	 ScrCmd_waitpokecry,.Lfe195-ScrCmd_waitpokecry
	.align	2, 0
	.globl	ScrCmd_setmaptile
	.type	 ScrCmd_setmaptile,function
	.thumb_func
ScrCmd_setmaptile:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	add	r1, r6, #0x7
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	add	r1, r5, #0x7
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	cmp	r0, #0
	bne	.L459	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	MapGridSetMetatileIdAt
	b	.L460
.L459:
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	add	r0, r1, #0
	add	r2, r7, #0
	orr	r2, r2, r0
	add	r0, r6, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
.L460:
	mov	r0, #0x0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe196:
	.size	 ScrCmd_setmaptile,.Lfe196-ScrCmd_setmaptile
	.align	2, 0
	.globl	ScrCmd_opendoor
	.type	 ScrCmd_opendoor,function
	.thumb_func
ScrCmd_opendoor:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	add	r5, r5, #0x7
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, #0xe0
	lsl	r0, r0, #0xb
	add	r4, r4, r0
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetDoorSoundEffect
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	PlaySE
	add	r0, r5, #0
	add	r1, r4, #0
	bl	FieldAnimateDoorOpen
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe197:
	.size	 ScrCmd_opendoor,.Lfe197-ScrCmd_opendoor
	.align	2, 0
	.globl	ScrCmd_closedoor
	.type	 ScrCmd_closedoor,function
	.thumb_func
ScrCmd_closedoor:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	add	r4, r4, #0x7
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0xe0
	lsl	r0, r0, #0xb
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	FieldAnimateDoorClose
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe198:
	.size	 ScrCmd_closedoor,.Lfe198-ScrCmd_closedoor
	.align	2, 0
	.type	 IsDoorAnimationStopped,function
	.thumb_func
IsDoorAnimationStopped:
	push	{lr}
	bl	FieldIsDoorAnimationRunning
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L464	@cond_branch
	mov	r0, #0x0
	b	.L466
.L464:
	mov	r0, #0x1
.L466:
	pop	{r1}
	bx	r1
.Lfe199:
	.size	 IsDoorAnimationStopped,.Lfe199-IsDoorAnimationStopped
	.align	2, 0
	.globl	ScrCmd_waitdooranim
	.type	 ScrCmd_waitdooranim,function
	.thumb_func
ScrCmd_waitdooranim:
	push	{lr}
	ldr	r1, .L468
	bl	SetupNativeScript
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L469:
	.align	2, 0
.L468:
	.word	IsDoorAnimationStopped
.Lfe200:
	.size	 ScrCmd_waitdooranim,.Lfe200-ScrCmd_waitdooranim
	.align	2, 0
	.globl	ScrCmd_setdooropen
	.type	 ScrCmd_setdooropen,function
	.thumb_func
ScrCmd_setdooropen:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	add	r4, r4, #0x7
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0xe0
	lsl	r0, r0, #0xb
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	FieldSetDoorOpened
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe201:
	.size	 ScrCmd_setdooropen,.Lfe201-ScrCmd_setdooropen
	.align	2, 0
	.globl	ScrCmd_setdoorclosed
	.type	 ScrCmd_setdoorclosed,function
	.thumb_func
ScrCmd_setdoorclosed:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	add	r4, r4, #0x7
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0xe0
	lsl	r0, r0, #0xb
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	FieldSetDoorClosed
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe202:
	.size	 ScrCmd_setdoorclosed,.Lfe202-ScrCmd_setdoorclosed
	.align	2, 0
	.globl	ScrCmd_addelevmenuitem
	.type	 ScrCmd_addelevmenuitem,function
	.thumb_func
ScrCmd_addelevmenuitem:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r6, r0, #0
	ldr	r0, [r6, #0x8]
	ldrb	r1, [r0]
	mov	r8, r1
	add	r0, r0, #0x1
	str	r0, [r6, #0x8]
	add	r0, r6, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r6, #0
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	add	r3, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r4, #0
	bl	ScriptAddElevatorMenuItem
	mov	r0, #0x0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe203:
	.size	 ScrCmd_addelevmenuitem,.Lfe203-ScrCmd_addelevmenuitem
	.align	2, 0
	.globl	ScrCmd_showelevmenu
	.type	 ScrCmd_showelevmenu,function
	.thumb_func
ScrCmd_showelevmenu:
	push	{lr}
	bl	ScriptShowElevatorMenu
	bl	ScriptContext1_Stop
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe204:
	.size	 ScrCmd_showelevmenu,.Lfe204-ScrCmd_showelevmenu
	.align	2, 0
	.globl	ScrCmd_checkcoins
	.type	 ScrCmd_checkcoins,function
	.thumb_func
ScrCmd_checkcoins:
	push	{r4, lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetVarPointer
	add	r4, r0, #0
	bl	GetCoins
	strh	r0, [r4]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe205:
	.size	 ScrCmd_checkcoins,.Lfe205-ScrCmd_checkcoins
	.align	2, 0
	.globl	ScrCmd_givecoins
	.type	 ScrCmd_givecoins,function
	.thumb_func
ScrCmd_givecoins:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GiveCoins
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L476	@cond_branch
	ldr	r1, .L479
	mov	r0, #0x0
	b	.L478
.L480:
	.align	2, 0
.L479:
	.word	gScriptResult
.L476:
	ldr	r1, .L481
	mov	r0, #0x1
.L478:
	strh	r0, [r1]
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L482:
	.align	2, 0
.L481:
	.word	gScriptResult
.Lfe206:
	.size	 ScrCmd_givecoins,.Lfe206-ScrCmd_givecoins
	.align	2, 0
	.globl	ScrCmd_takecoins
	.type	 ScrCmd_takecoins,function
	.thumb_func
ScrCmd_takecoins:
	push	{lr}
	bl	ScriptReadHalfword
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	TakeCoins
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L484	@cond_branch
	ldr	r1, .L487
	mov	r0, #0x0
	b	.L486
.L488:
	.align	2, 0
.L487:
	.word	gScriptResult
.L484:
	ldr	r1, .L489
	mov	r0, #0x1
.L486:
	strh	r0, [r1]
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L490:
	.align	2, 0
.L489:
	.word	gScriptResult
.Lfe207:
	.size	 ScrCmd_takecoins,.Lfe207-ScrCmd_takecoins
.text
	.align	2, 0
