@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gDexArrows_Pal
	.section .rodata
	.align	1, 0
	.type	 gDexArrows_Pal,object
gDexArrows_Pal:
	.short	0x3e0
	.short	0x1f
	.short	0x1c
	.short	0x1a
	.short	0x18
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x6318
	.short	0x0
	.short	0x7fff
	.size	 gDexArrows_Pal,32
	.globl	gDexArrows_Gfx
	.type	 gDexArrows_Gfx,object
gDexArrows_Gfx:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0xe2
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0xe
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0xe2
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x22
	.byte	0xe
	.byte	0xe0
	.byte	0x22
	.byte	0x22
	.byte	0xde
	.byte	0xe0
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0xe0
	.byte	0x22
	.byte	0xde
	.byte	0x0
	.byte	0xe0
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0xe0
	.byte	0xde
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xee
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x2e
	.byte	0xe2
	.byte	0xd
	.byte	0xe0
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0x2e
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0x2e
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0xe0
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x2e
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0xe0
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xee
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xd0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0xee
	.byte	0xee
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x2e
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2e
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xee
	.byte	0xee
	.byte	0xe
	.byte	0x0
	.byte	0x22
	.byte	0x22
	.byte	0xde
	.byte	0x0
	.byte	0x22
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x22
	.byte	0xde
	.byte	0x0
	.byte	0x0
	.byte	0xe2
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0xde
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2e
	.byte	0x0
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x0
	.byte	0x0
	.byte	0x2e
	.byte	0x22
	.byte	0x0
	.byte	0xe0
	.byte	0x22
	.byte	0x22
	.byte	0x0
	.byte	0xe0
	.byte	0xee
	.byte	0xee
	.byte	0x0
	.byte	0x0
	.byte	0xdd
	.byte	0xdd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xe2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0xe2
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x22
	.byte	0xe
	.byte	0x0
	.byte	0xee
	.byte	0xee
	.byte	0xde
	.byte	0x0
	.byte	0xdd
	.byte	0xdd
	.byte	0xdd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x2
	.byte	0x22
	.byte	0x0
	.byte	0xd2
	.byte	0x2d
	.byte	0xd
	.byte	0x2
	.byte	0xd2
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0xd2
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x20
	.byte	0x0
	.byte	0x20
	.byte	0xd
	.byte	0x0
	.byte	0x2
	.byte	0xd2
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x2
	.byte	0x22
	.byte	0x0
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x2
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x2
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x2
	.byte	0x20
	.byte	0x22
	.byte	0x22
	.byte	0xd
	.byte	0x0
	.byte	0x22
	.byte	0xd2
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0xc
	.byte	0xcc
	.byte	0x0
	.byte	0xdc
	.byte	0xcd
	.byte	0xd
	.byte	0xc
	.byte	0xdc
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xdc
	.byte	0x0
	.byte	0x0
	.byte	0xc
	.byte	0xc0
	.byte	0x0
	.byte	0xc0
	.byte	0xd
	.byte	0x0
	.byte	0xc
	.byte	0xdc
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0xc
	.byte	0xcc
	.byte	0x0
	.byte	0xcc
	.byte	0xcc
	.byte	0xcc
	.byte	0xc
	.byte	0xcc
	.byte	0xcc
	.byte	0xcc
	.byte	0xc
	.byte	0xcc
	.byte	0xcc
	.byte	0xcc
	.byte	0xc
	.byte	0xc0
	.byte	0xcc
	.byte	0xcc
	.byte	0xd
	.byte	0x0
	.byte	0xcc
	.byte	0xdc
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0xd
	.byte	0x0
	.size	 gDexArrows_Gfx,384
	.globl	gUnknown_08402CF8
	.type	 gUnknown_08402CF8,object
gUnknown_08402CF8:
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0xd
	.byte	0xa
	.byte	0x0
	.byte	0x1d
	.byte	0x7
	.byte	0x2
	.byte	0xe
	.byte	0x1b
	.byte	0x13
	.byte	0xa
	.byte	0x8
	.byte	0x1d
	.byte	0xd
	.size	 gUnknown_08402CF8,16
	.globl	gUnknown_08402D08
	.align	2, 0
	.type	 gUnknown_08402D08,object
gUnknown_08402D08:
	.word	OtherText_Battle
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.space	1
	.word	OtherText_Power
	.byte	0x1
	.byte	0x4
	.byte	0x1
	.space	1
	.word	OtherText_Accuracy
	.byte	0x1
	.byte	0x9
	.byte	0x2
	.space	1
	.word	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	OtherText_Contest
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.space	1
	.word	OtherText_Appeal
	.byte	0x1
	.byte	0x4
	.byte	0x1
	.space	1
	.word	OtherText_Jam
	.byte	0x1
	.byte	0x9
	.byte	0x2
	.space	1
	.word	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.size	 gUnknown_08402D08,64
	.globl	unkDataFF00FFEF
	.align	2, 0
	.type	 unkDataFF00FFEF,object
	.size	 unkDataFF00FFEF,4
unkDataFF00FFEF:
	.word	0xff00ffef
	.globl	gTileBuffer_
	.align	2, 0
	.type	 gTileBuffer_,object
	.size	 gTileBuffer_,4
gTileBuffer_:
	.word	gTileBuffer
	.globl	gOamData_8402D50
	.align	2, 0
	.type	 gOamData_8402D50,object
	.size	 gOamData_8402D50,8
gOamData_8402D50:
	.space	1
	.byte	0x0
	.space	6
	.globl	gOamData_8402D58
	.align	2, 0
	.type	 gOamData_8402D58,object
	.size	 gOamData_8402D58,8
gOamData_8402D58:
	.space	1
	.byte	0x80
	.space	6
	.globl	gOamData_8402D60
	.align	2, 0
	.type	 gOamData_8402D60,object
	.size	 gOamData_8402D60,8
gOamData_8402D60:
	.space	1
	.byte	0x40
	.space	6
	.globl	gSpriteAnim_8402D68
	.align	2, 0
	.type	 gSpriteAnim_8402D68,object
gSpriteAnim_8402D68:
	.short	0x2
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_8402D68,8
	.globl	gSpriteAnim_8402D70
	.align	2, 0
	.type	 gSpriteAnim_8402D70,object
gSpriteAnim_8402D70:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_8402D70,8
	.globl	gSpriteAnimTable_8402D78
	.align	2, 0
	.type	 gSpriteAnimTable_8402D78,object
gSpriteAnimTable_8402D78:
	.word	gSpriteAnim_8402D68
	.word	gSpriteAnim_8402D70
	.size	 gSpriteAnimTable_8402D78,8
	.globl	gUnknown_08402D80
	.align	2, 0
	.type	 gUnknown_08402D80,object
	.size	 gUnknown_08402D80,8
gUnknown_08402D80:
	.word	gDexArrows_Gfx
	.short	0x180
	.short	0x1595
	.globl	gUnknown_08402D88
	.align	2, 0
	.type	 gUnknown_08402D88,object
	.size	 gUnknown_08402D88,8
gUnknown_08402D88:
	.word	gDexArrows_Pal
	.short	0x1596
	.space	2
	.globl	gSpriteTemplate_8402D90
	.align	2, 0
	.type	 gSpriteTemplate_8402D90,object
	.size	 gSpriteTemplate_8402D90,24
gSpriteTemplate_8402D90:
	.short	0x1595
	.short	0x1596
	.word	gOamData_8402D58
	.word	gSpriteAnimTable_8402D78
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8133300
	.globl	gSpriteAnim_8402DA8
	.align	2, 0
	.type	 gSpriteAnim_8402DA8,object
gSpriteAnim_8402DA8:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_8402DA8,8
	.globl	gSpriteAnim_8402DB0
	.align	2, 0
	.type	 gSpriteAnim_8402DB0,object
gSpriteAnim_8402DB0:
	.short	0x6
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_8402DB0,8
	.globl	gSpriteAnimTable_8402DB8
	.align	2, 0
	.type	 gSpriteAnimTable_8402DB8,object
gSpriteAnimTable_8402DB8:
	.word	gSpriteAnim_8402DA8
	.word	gSpriteAnim_8402DB0
	.size	 gSpriteAnimTable_8402DB8,8
	.globl	gSpriteTemplate_8402DC0
	.align	2, 0
	.type	 gSpriteTemplate_8402DC0,object
	.size	 gSpriteTemplate_8402DC0,24
gSpriteTemplate_8402DC0:
	.short	0x1595
	.short	0x1596
	.word	gOamData_8402D60
	.word	gSpriteAnimTable_8402DB8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8133300
	.globl	gSpriteAnim_8402DD8
	.align	2, 0
	.type	 gSpriteAnim_8402DD8,object
gSpriteAnim_8402DD8:
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_8402DD8,8
	.globl	gSpriteAnim_8402DE0
	.align	2, 0
	.type	 gSpriteAnim_8402DE0,object
gSpriteAnim_8402DE0:
	.short	0x9
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_8402DE0,8
	.globl	gSpriteAnim_8402DE8
	.align	2, 0
	.type	 gSpriteAnim_8402DE8,object
gSpriteAnim_8402DE8:
	.short	0xa
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_8402DE8,8
	.globl	gSpriteAnim_8402DF0
	.align	2, 0
	.type	 gSpriteAnim_8402DF0,object
gSpriteAnim_8402DF0:
	.short	0xb
	.byte	0x5
	.space	1
	.short	0xffffffff
	.space	2
	.size	 gSpriteAnim_8402DF0,8
	.globl	gSpriteAnimTable_8402DF8
	.align	2, 0
	.type	 gSpriteAnimTable_8402DF8,object
gSpriteAnimTable_8402DF8:
	.word	gSpriteAnim_8402DD8
	.word	gSpriteAnim_8402DE0
	.word	gSpriteAnim_8402DE8
	.word	gSpriteAnim_8402DF0
	.size	 gSpriteAnimTable_8402DF8,16
	.globl	gSpriteTemplate_8402E08
	.align	2, 0
	.type	 gSpriteTemplate_8402E08,object
	.size	 gSpriteTemplate_8402E08,24
gSpriteTemplate_8402E08:
	.short	0x1595
	.short	0x1596
	.word	gOamData_8402D50
	.word	gSpriteAnimTable_8402DF8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8133300
	.globl	gString_AkitoMori
	.type	 gString_AkitoMori,object
gString_AkitoMori:
	.byte	0x1
	.byte	0x7
	.byte	0x14
	.byte	0xff
	.size	 gString_AkitoMori,4
.text
	.align	2, 0
	.globl	VBlankCB_LearnMove
	.type	 VBlankCB_LearnMove,function
	.thumb_func
VBlankCB_LearnMove:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 VBlankCB_LearnMove,.Lfe1-VBlankCB_LearnMove
	.align	2, 0
	.globl	sub_8132670
	.type	 sub_8132670,function
	.thumb_func
sub_8132670:
	push	{lr}
	add	sp, sp, #0xfffffffc
	bl	ScriptContext2_Enable
	ldr	r0, .L4
	mov	r1, #0xa
	bl	CreateTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	sub_813269C
.Lfe2:
	.size	 sub_8132670,.Lfe2-sub_8132670
	.align	2, 0
	.globl	sub_813269C
	.type	 sub_813269C,function
	.thumb_func
sub_813269C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r0, .L8+0x4
	bl	SetMainCallback2
	ldr	r1, .L8+0x8
	ldr	r0, .L8+0xc
	str	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L7:
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gPaletteFade
	.word	CB2_InitLearnMove
	.word	gFieldCallback
	.word	sub_8080990
.Lfe3:
	.size	 sub_813269C,.Lfe3-sub_813269C
	.align	2, 0
	.globl	CB2_InitLearnMove
	.type	 CB2_InitLearnMove,function
	.thumb_func
CB2_InitLearnMove:
	push	{r4, r5, lr}
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r0, #0x0
	strh	r0, [r1]
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	ldr	r4, .L11
	ldr	r0, .L11+0x4
	str	r0, [r4]
	bl	ClearLearnMoveVars
	ldr	r1, [r4]
	ldr	r0, .L11+0x8
	ldrh	r0, [r0]
	ldr	r2, .L11+0xc
	add	r1, r1, r2
	mov	r5, #0x0
	strb	r0, [r1]
	bl	sub_8133558
	ldr	r0, .L11+0x10
	bl	SetVBlankCallback
	ldr	r4, .L11+0x14
	add	r0, r4, #0
	bl	SetUpWindowConfig
	add	r0, r4, #0
	bl	InitMenuWindow
	bl	MenuZeroFillScreen
	ldr	r4, .L11+0x18
	add	r0, r4, #0
	bl	SetUpWindowConfig
	add	r0, r4, #0
	bl	InitMenuWindow
	bl	MenuZeroFillScreen
	ldr	r0, .L11+0x1c
	strh	r5, [r0]
	strh	r5, [r0]
	add	r0, r0, #0x2
	strh	r5, [r0]
	strh	r5, [r0]
	ldr	r0, .L11+0x20
	bl	LoadSpriteSheet
	ldr	r0, .L11+0x24
	bl	LoadSpritePalette
	bl	sub_8133358
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	ldr	r0, .L11+0x28
	bl	SetMainCallback2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	sLearnMoveStruct
	.word	gSharedMem+0x17000
	.word	gSpecialVar_0x8004
	.word	0x2c5
	.word	VBlankCB_LearnMove
	.word	gWindowConfig_81E7240
	.word	gWindowConfig_81E6CE4
	.word	0x4000012
	.word	gUnknown_08402D80
	.word	gUnknown_08402D88
	.word	CB2_LearnMove
.Lfe4:
	.size	 CB2_InitLearnMove,.Lfe4-CB2_InitLearnMove
	.align	2, 0
	.globl	sub_81327A4
	.type	 sub_81327A4,function
	.thumb_func
sub_81327A4:
	push	{r4, r5, lr}
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	ldr	r4, .L14
	ldr	r0, .L14+0x4
	str	r0, [r4]
	bl	sub_8133558
	ldr	r1, [r4]
	ldr	r0, .L14+0x8
	ldrh	r0, [r0]
	ldr	r2, .L14+0xc
	add	r1, r1, r2
	mov	r5, #0x0
	strb	r0, [r1]
	ldr	r0, .L14+0x10
	bl	SetVBlankCallback
	ldr	r4, .L14+0x14
	add	r0, r4, #0
	bl	SetUpWindowConfig
	add	r0, r4, #0
	bl	InitMenuWindow
	bl	MenuZeroFillScreen
	ldr	r4, .L14+0x18
	add	r0, r4, #0
	bl	SetUpWindowConfig
	add	r0, r4, #0
	bl	InitMenuWindow
	bl	MenuZeroFillScreen
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0x9a
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L14+0x1c
	strh	r5, [r0]
	sub	r0, r0, #0x2
	strh	r5, [r0]
	add	r0, r0, #0x4
	strh	r5, [r0]
	strh	r5, [r0]
	ldr	r0, .L14+0x20
	bl	LoadSpriteSheet
	ldr	r0, .L14+0x24
	bl	LoadSpritePalette
	bl	sub_8133358
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	ldr	r0, .L14+0x28
	bl	SetMainCallback2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	sLearnMoveStruct
	.word	gSharedMem+0x17000
	.word	gSpecialVar_0x8005
	.word	0x2c6
	.word	VBlankCB_LearnMove
	.word	gWindowConfig_81E7240
	.word	gWindowConfig_81E6CE4
	.word	0x4000012
	.word	gUnknown_08402D80
	.word	gUnknown_08402D88
	.word	CB2_LearnMove
.Lfe5:
	.size	 sub_81327A4,.Lfe5-sub_81327A4
	.align	2, 0
	.globl	CB2_LearnMove
	.type	 CB2_LearnMove,function
	.thumb_func
CB2_LearnMove:
	push	{r4, lr}
	bl	LearnMoveMain
	ldr	r4, .L20
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1d]
	cmp	r0, #0
	beq	.L17	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x1d]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x18]
	lsl	r1, r1, #0x1
	add	r1, r1, #0x1
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x18
	mov	r0, #0x58
	bl	sub_814AD7C
.L17:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1e]
	cmp	r0, #0
	beq	.L18	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x1e]
	bl	sub_8133800
.L18:
	ldr	r1, [r4]
	ldr	r2, .L20+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L19	@cond_branch
	add	r2, r2, #0x1
	add	r0, r1, r2
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	sub_8133AEC
	ldr	r0, [r4]
	ldr	r1, .L20+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
.L19:
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r4}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	sLearnMoveStruct
	.word	0x2c3
.Lfe6:
	.size	 CB2_LearnMove,.Lfe6-CB2_LearnMove
	.align	2, 0
	.globl	sub_81328E8
	.type	 sub_81328E8,function
	.thumb_func
sub_81328E8:
	push	{r4, lr}
	add	r1, r0, #0
	ldr	r4, .L23
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x3
	mov	r2, #0xf
	bl	MenuPrintMessage
	pop	{r4}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	gStringVar4
.Lfe7:
	.size	 sub_81328E8,.Lfe7-sub_81328E8
	.align	2, 0
	.globl	LearnMoveMain
	.type	 LearnMoveMain,function
	.thumb_func
LearnMoveMain:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L109
	ldr	r0, [r1]
	ldrb	r0, [r0]
	add	r7, r1, #0
	cmp	r0, #0x21
	bls	.LCB368
	b	.L25	@long jump
.LCB368:
	lsl	r0, r0, #0x2
	ldr	r1, .L109+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L110:
	.align	2, 0
.L109:
	.word	sLearnMoveStruct
	.word	.L104
	.align	2, 0
	.align	2, 0
.L104:
	.word	.L27
	.word	.L28
	.word	.L30
	.word	.L31
	.word	.L32
	.word	.L34
	.word	.L35
	.word	.L25
	.word	.L37
	.word	.L39
	.word	.L25
	.word	.L25
	.word	.L48
	.word	.L50
	.word	.L86
	.word	.L87
	.word	.L57
	.word	.L58
	.word	.L60
	.word	.L79
	.word	.L81
	.word	.L83
	.word	.L85
	.word	.L25
	.word	.L65
	.word	.L66
	.word	.L68
	.word	.L75
	.word	.L89
	.word	.L92
	.word	.L96
	.word	.L98
	.word	.L100
	.word	.L102
.L27:
	ldr	r1, [r7]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strb	r0, [r1]
	bl	DrawLearnMoveMenuWindow
	mov	r0, #0x0
	bl	sub_8133030
	bl	sub_8133800
	ldr	r0, .L111
	add	r0, r0, #0x64
	mov	r1, #0x48
	strh	r1, [r0]
	ldr	r0, [r7]
	ldr	r1, .L111+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0x9a
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L25
.L112:
	.align	2, 0
.L111:
	.word	gSprites
	.word	0x2c3
.L28:
	ldr	r0, .L113
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB439
	b	.L25	@long jump
.LCB439:
	ldr	r1, [r7]
	mov	r0, #0x4
	b	.L106
.L114:
	.align	2, 0
.L113:
	.word	gPaletteFade
.L30:
	ldr	r1, [r7]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L106
.L31:
	mov	r0, #0x0
	bl	sub_8133030
	bl	sub_8133800
	ldr	r2, .L115
	ldr	r0, [r2]
	ldr	r1, .L115+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r1, [r2]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L115+0x8
	add	r0, r0, #0x64
	mov	r1, #0x48
	strh	r1, [r0]
	b	.L25
.L116:
	.align	2, 0
.L115:
	.word	sLearnMoveStruct
	.word	0x2c3
	.word	gSprites
.L32:
	bl	sub_81330E8
	b	.L107
.L34:
	mov	r0, #0x0
	bl	sub_8133140
	bl	sub_8133800
	ldr	r2, .L117
	ldr	r0, [r2]
	ldr	r1, .L117+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L117+0x8
	add	r0, r0, #0x64
	mov	r1, #0x48
	strh	r1, [r0]
	ldr	r1, [r2]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L106
.L118:
	.align	2, 0
.L117:
	.word	sLearnMoveStruct
	.word	0x2c3
	.word	gSprites
.L35:
	bl	sub_8133248
.L107:
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB528
	b	.L25	@long jump
.LCB528:
	bl	sub_813362C
	b	.L25
.L37:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB538
	b	.L25	@long jump
.LCB538:
	mov	r0, #0x15
	mov	r1, #0x7
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r0, .L119
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L106
.L120:
	.align	2, 0
.L119:
	.word	sLearnMoveStruct
.L39:
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L40	@cond_branch
	bl	sub_8133CA4
	ldr	r4, .L121
	ldr	r2, [r4]
	ldr	r1, .L121+0x4
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L121+0x8
	add	r0, r0, r1
	ldrb	r1, [r2, #0x1b]
	lsl	r1, r1, #0x1
	add	r2, r2, #0x20
	add	r2, r2, r1
	ldrh	r1, [r2]
	bl	GiveMoveToMon
	lsl	r0, r0, #0x10
	ldr	r1, .L121+0xc
	cmp	r0, r1
	beq	.L41	@cond_branch
	ldr	r0, .L121+0x10
	bl	sub_81328E8
	ldr	r1, .L121+0x14
	mov	r0, #0x1
	strh	r0, [r1]
	ldr	r1, [r4]
	mov	r0, #0x1f
	b	.L106
.L122:
	.align	2, 0
.L121:
	.word	sLearnMoveStruct
	.word	0x2c5
	.word	gPlayerParty
	.word	0xffff0000
	.word	gOtherText_PokeLearnedMove
	.word	gSpecialVar_0x8004
.L41:
	ldr	r1, [r4]
	mov	r0, #0x10
	b	.L106
.L40:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L45	@cond_branch
	cmp	r1, #0x1
	beq	.LCB630
	b	.L25	@long jump
.LCB630:
.L45:
	bl	sub_8133CA4
	ldr	r3, .L123
	ldr	r1, [r3]
	mov	r2, #0xb1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L46	@cond_branch
	mov	r0, #0x3
	strb	r0, [r1]
.L46:
	ldr	r1, [r3]
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB653
	b	.L25	@long jump
.LCB653:
	mov	r0, #0x5
	b	.L106
.L124:
	.align	2, 0
.L123:
	.word	sLearnMoveStruct
.L48:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB670
	b	.L25	@long jump
.LCB670:
	mov	r0, #0x15
	mov	r1, #0x7
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r0, .L125
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L106
.L126:
	.align	2, 0
.L125:
	.word	sLearnMoveStruct
.L50:
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L51	@cond_branch
	bl	sub_8133CA4
	ldr	r0, .L127
	strh	r4, [r0]
	b	.L108
.L128:
	.align	2, 0
.L127:
	.word	gSpecialVar_0x8004
.L51:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r4, r0
	beq	.L54	@cond_branch
	cmp	r4, #0x1
	beq	.LCB718
	b	.L25	@long jump
.LCB718:
.L54:
	bl	sub_8133CA4
	ldr	r3, .L129
	ldr	r1, [r3]
	mov	r2, #0xb1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L55	@cond_branch
	mov	r0, #0x3
	strb	r0, [r1]
.L55:
	ldr	r1, [r3]
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB741
	b	.L25	@long jump
.LCB741:
	mov	r0, #0x5
	b	.L106
.L130:
	.align	2, 0
.L129:
	.word	sLearnMoveStruct
.L57:
	ldr	r0, .L131
	bl	sub_81328E8
	ldr	r0, .L131+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L106
.L132:
	.align	2, 0
.L131:
	.word	gOtherText_DeleteOlderMove
	.word	sLearnMoveStruct
.L58:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB775
	b	.L25	@long jump
.LCB775:
	mov	r0, #0x15
	mov	r1, #0x7
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	ldr	r0, .L133
	ldr	r1, [r0]
	mov	r0, #0x12
	b	.L106
.L134:
	.align	2, 0
.L133:
	.word	sLearnMoveStruct
.L60:
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L61	@cond_branch
	bl	sub_8133CA4
	ldr	r0, .L135
	bl	sub_81328E8
	ldr	r0, .L135+0x4
	ldr	r1, [r0]
	mov	r0, #0x13
	b	.L106
.L136:
	.align	2, 0
.L135:
	.word	gOtherText_WhichMoveToForget
	.word	sLearnMoveStruct
.L61:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L64	@cond_branch
	cmp	r1, #0x1
	beq	.LCB827
	b	.L25	@long jump
.LCB827:
.L64:
	bl	sub_8133CA4
	ldr	r0, .L137
	ldr	r1, [r0]
	mov	r0, #0x18
	b	.L106
.L138:
	.align	2, 0
.L137:
	.word	sLearnMoveStruct
.L65:
	ldr	r0, .L139
	bl	sub_81328E8
	ldr	r0, .L139+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L106
.L140:
	.align	2, 0
.L139:
	.word	gOtherText_StopLearningMove
	.word	sLearnMoveStruct
.L66:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB866
	b	.L25	@long jump
.LCB866:
	ldr	r0, .L141
	ldr	r1, [r0]
	mov	r0, #0x1a
	strb	r0, [r1]
	mov	r0, #0x15
	mov	r1, #0x7
	mov	r2, #0x1
	bl	DisplayYesNoMenu
	b	.L25
.L142:
	.align	2, 0
.L141:
	.word	sLearnMoveStruct
.L68:
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L69	@cond_branch
	bl	sub_8133CA4
	ldr	r0, .L143
	ldr	r1, [r0]
	mov	r0, #0x1b
	b	.L106
.L144:
	.align	2, 0
.L143:
	.word	sLearnMoveStruct
.L69:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L72	@cond_branch
	cmp	r1, #0x1
	beq	.LCB915
	b	.L25	@long jump
.LCB915:
.L72:
	bl	sub_8133CA4
	ldr	r1, .L145
	ldr	r2, [r1]
	mov	r3, #0xb1
	lsl	r3, r3, #0x2
	add	r0, r2, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L73	@cond_branch
	mov	r0, #0x3
	strb	r0, [r2]
.L73:
	ldr	r2, [r1]
	add	r0, r2, r3
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L74	@cond_branch
	mov	r0, #0x5
	strb	r0, [r2]
.L74:
	ldr	r1, [r1]
	mov	r0, #0x10
	b	.L106
.L146:
	.align	2, 0
.L145:
	.word	sLearnMoveStruct
.L75:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB959
	b	.L25	@long jump
.LCB959:
	ldr	r3, .L147
	ldr	r1, [r3]
	mov	r2, #0xb1
	lsl	r2, r2, #0x2
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L77	@cond_branch
	mov	r0, #0x3
	strb	r0, [r1]
.L77:
	ldr	r1, [r3]
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB980
	b	.L25	@long jump
.LCB980:
	mov	r0, #0x5
	b	.L106
.L148:
	.align	2, 0
.L147:
	.word	sLearnMoveStruct
.L79:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB996
	b	.L25	@long jump
.LCB996:
	ldr	r0, .L149
	ldr	r1, [r0]
	mov	r2, #0x0
	mov	r0, #0x14
	strb	r0, [r1]
	sub	r0, r0, #0x15
	str	r2, [sp]
	mov	r1, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L25
.L150:
	.align	2, 0
.L149:
	.word	sLearnMoveStruct
.L81:
	ldr	r0, .L151
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1026
	b	.L25	@long jump
.LCB1026:
	ldr	r0, .L151+0x4
	ldr	r5, [r7]
	ldr	r2, .L151+0x8
	add	r1, r5, r2
	ldrb	r1, [r1]
	ldr	r2, .L151+0xc
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L151+0x10
	ldrb	r4, [r5, #0x1b]
	lsl	r4, r4, #0x1
	add	r5, r5, #0x20
	add	r5, r5, r4
	ldrh	r4, [r5]
	str	r4, [sp]
	bl	sub_809D9F0
	ldr	r1, [r7]
	mov	r0, #0x1c
	b	.L106
.L152:
	.align	2, 0
.L151:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	0x2c5
	.word	gPlayerPartyCount
	.word	sub_81327A4
.L83:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB1072
	b	.L25	@long jump
.LCB1072:
	b	.L108
.L85:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L25
.L86:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L153
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L106
.L154:
	.align	2, 0
.L153:
	.word	sLearnMoveStruct
.L87:
	ldr	r0, .L155
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1117
	b	.L25	@long jump
.LCB1117:
	ldr	r0, .L155+0x4
	bl	SetMainCallback2
	b	.L25
.L156:
	.align	2, 0
.L155:
	.word	gPaletteFade
	.word	c2_exit_to_overworld_2_switch
.L89:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r5, .L157
	ldr	r1, [r5]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	bl	DrawLearnMoveMenuWindow
	bl	sub_8133800
	ldr	r0, [r5]
	mov	r4, #0xb1
	lsl	r4, r4, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L90	@cond_branch
	mov	r0, #0x1
	bl	sub_8133030
.L90:
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L91	@cond_branch
	ldr	r0, .L157+0x4
	add	r0, r0, #0x64
	mov	r1, #0x48
	strh	r1, [r0]
	mov	r0, #0x1
	bl	sub_8133140
.L91:
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	sub_8133AEC
	b	.L25
.L158:
	.align	2, 0
.L157:
	.word	sLearnMoveStruct
	.word	gSprites
.L92:
	ldr	r0, .L159
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1199
	b	.L25	@long jump
.LCB1199:
	ldr	r1, [r7]
	ldr	r0, .L159+0x4
	add	r2, r1, r0
	ldrb	r0, [r2]
	cmp	r0, #0x4
	bne	.L94	@cond_branch
	mov	r0, #0x18
	b	.L106
.L160:
	.align	2, 0
.L159:
	.word	gPaletteFade
	.word	0x2c6
.L94:
	ldr	r4, .L161
	add	r0, r1, r4
	ldrb	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L161+0x4
	add	r0, r0, r5
	ldrb	r1, [r2]
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L161+0x8
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	ldr	r0, .L161+0xc
	mov	r8, r0
	add	r1, r1, r8
	add	r0, r2, #0
	bl	StringCopy
	ldr	r1, [r7]
	add	r0, r1, r4
	ldrb	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	ldr	r2, .L161+0x10
	add	r1, r1, r2
	ldrb	r1, [r1]
	bl	RemoveMonPPBonus
	ldr	r3, [r7]
	add	r4, r3, r4
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	ldrb	r2, [r3, #0x1b]
	lsl	r2, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0x20
	add	r1, r1, r2
	ldrh	r1, [r1]
	ldr	r2, .L161+0x10
	add	r3, r3, r2
	ldrb	r2, [r3]
	bl	SetMonMoveSlot
	ldr	r0, .L161+0x14
	ldr	r1, [r7]
	ldrb	r2, [r1, #0x1b]
	lsl	r2, r2, #0x1
	add	r1, r1, #0x20
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	add	r1, r1, r8
	bl	StringCopy
	ldr	r0, .L161+0x18
	bl	sub_81328E8
	ldr	r1, [r7]
	mov	r0, #0x1e
	strb	r0, [r1]
	ldr	r1, .L161+0x1c
	mov	r0, #0x1
	strh	r0, [r1]
	b	.L25
.L162:
	.align	2, 0
.L161:
	.word	0x2c5
	.word	gPlayerParty
	.word	gStringVar3
	.word	gMoveNames
	.word	0x2c6
	.word	gStringVar2
	.word	gOtherText_ForgotMove123
	.word	gSpecialVar_0x8004
.L96:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r0, .L163
	bl	sub_81328E8
	ldr	r0, .L163+0x4
	ldr	r1, [r0]
	mov	r0, #0x1f
	strb	r0, [r1]
	ldr	r0, .L163+0x8
	bl	PlayFanfare
	b	.L25
.L164:
	.align	2, 0
.L163:
	.word	gOtherText_ForgotOrDidNotLearnMove
	.word	sLearnMoveStruct
	.word	0x16f
.L98:
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r0, .L165
	bl	PlayFanfare
	ldr	r0, .L165+0x4
	ldr	r1, [r0]
	mov	r0, #0x20
	b	.L106
.L166:
	.align	2, 0
.L165:
	.word	0x16f
	.word	sLearnMoveStruct
.L100:
	bl	IsFanfareTaskInactive
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r0, .L167
	ldr	r1, [r0]
	mov	r0, #0x21
	b	.L106
.L168:
	.align	2, 0
.L167:
	.word	sLearnMoveStruct
.L102:
	ldr	r0, .L169
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L108:
	ldr	r0, .L169+0x4
	ldr	r1, [r0]
	mov	r0, #0xe
.L106:
	strb	r0, [r1]
.L25:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	gMain
	.word	sLearnMoveStruct
.Lfe8:
	.size	 LearnMoveMain,.Lfe8-LearnMoveMain
	.align	2, 0
	.globl	DrawLearnMoveMenuWindow
	.type	 DrawLearnMoveMenuWindow,function
	.thumb_func
DrawLearnMoveMenuWindow:
	push	{r4, r5, r6, lr}
	ldr	r0, .L177
	bl	BasicInitMenuWindow
	mov	r5, #0x0
	ldr	r4, .L177+0x4
	add	r6, r4, #0
.L175:
	lsl	r3, r5, #0x2
	ldrb	r0, [r4]
	add	r1, r6, #0x1
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r6, #0x2
	add	r3, r3, r2
	ldrb	r2, [r3]
	ldrb	r3, [r4, #0x3]
	bl	MenuDrawTextWindow
	add	r4, r4, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bls	.L175	@cond_branch
	ldr	r0, .L177+0x8
	bl	BasicInitMenuWindow
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L178:
	.align	2, 0
.L177:
	.word	gWindowConfig_81E7240
	.word	gUnknown_08402CF8
	.word	gWindowConfig_81E6CE4
.Lfe9:
	.size	 DrawLearnMoveMenuWindow,.Lfe9-DrawLearnMoveMenuWindow
	.align	2, 0
	.globl	sub_8133030
	.type	 sub_8133030,function
	.thumb_func
sub_8133030:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L191
	ldr	r5, .L191+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x3]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	add	r1, r1, #0x3e
	ldrb	r3, [r1]
	mov	r2, #0x5
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r2, r2, r1
	strb	r2, [r0]
	mov	r2, #0x0
	ldr	r6, .L191+0x8
	mov	r3, #0x4
.L183:
	ldr	r0, [r5]
	add	r0, r0, r2
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xf
	ble	.L183	@cond_branch
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L186	@cond_branch
	ldr	r5, .L191+0xc
	add	r4, r6, #0
.L188:
	ldr	r1, [r4]
	add	r0, r5, #0
	mov	r2, #0x40
	mov	r3, #0x2
	bl	sub_8072C74
	ldrb	r1, [r4, #0x4]
	ldrb	r2, [r4, #0x5]
	add	r0, r5, #0
	bl	MenuPrint
	add	r4, r4, #0x8
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L188	@cond_branch
.L186:
	cmp	r7, #0
	bne	.L190	@cond_branch
	ldr	r0, .L191+0x10
	mov	r1, #0x20
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	mov	r1, #0x18
	mov	r2, #0x78
	mov	r3, #0xc0
	bl	sub_8072AB0
.L190:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	gSprites
	.word	sLearnMoveStruct
	.word	gUnknown_08402D08
	.word	gTileBuffer
	.word	gOtherText_TeachWhichMove
.Lfe10:
	.size	 sub_8133030,.Lfe10-sub_8133030
	.align	2, 0
	.globl	sub_81330E8
	.type	 sub_81330E8,function
	.thumb_func
sub_81330E8:
	push	{r4, lr}
	ldr	r0, .L197
	ldrh	r2, [r0, #0x2e]
	mov	r1, #0x30
	and	r1, r1, r2
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r4, r0, #0x1f
	ldr	r0, .L197+0x4
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L195	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L195	@cond_branch
	add	r4, r4, #0x1
.L195:
	cmp	r4, #0
	beq	.L196	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L197+0x8
	ldr	r1, [r2]
	mov	r0, #0x5
	strb	r0, [r1]
	ldr	r0, [r2]
	mov	r1, #0xb1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
.L196:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L198:
	.align	2, 0
.L197:
	.word	gMain
	.word	gSaveBlock2
	.word	sLearnMoveStruct
.Lfe11:
	.size	 sub_81330E8,.Lfe11-sub_81330E8
	.align	2, 0
	.globl	sub_8133140
	.type	 sub_8133140,function
	.thumb_func
sub_8133140:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	ldr	r4, .L212
	ldr	r5, .L212+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x3]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r3, #0x5
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	add	r1, r3, #0
	and	r1, r1, r2
	strb	r1, [r0]
	mov	r6, #0x0
	ldr	r7, .L212+0x8
.L203:
	ldr	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0, #0x7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L203	@cond_branch
	mov	r6, #0x0
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L206	@cond_branch
	mov	r9, r7
	mov	sl, r6
	mov	r0, #0x24
	add	r0, r0, r9
	mov	r8, r0
.L208:
	mov	r0, r9
	add	r0, r0, #0x20
	add	r0, r0, sl
	ldr	r1, [r0]
	ldr	r0, .L212+0xc
	mov	r2, #0x40
	mov	r3, #0x2
	bl	sub_8072C74
	mov	r0, r8
	ldrb	r5, [r0]
	ldrb	r4, [r0, #0x1]
	ldr	r0, .L212+0xc
	add	r1, r5, #0
	add	r2, r4, #0
	bl	MenuPrint
	cmp	r6, #0
	beq	.L207	@cond_branch
	add	r1, r4, #0x2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r5, #0x7
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r3, r4, #0x3
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r5, #0
	bl	MenuZeroFillWindowRect
.L207:
	mov	r0, #0x8
	add	sl, sl, r0
	add	r8, r8, r0
	add	r7, r7, #0x8
	add	r6, r6, #0x1
	ldr	r0, [r7]
	cmp	r0, #0
	bne	.L208	@cond_branch
.L206:
	ldr	r0, [sp, #0x8]
	cmp	r0, #0
	bne	.L211	@cond_branch
	ldr	r0, .L212+0x10
	mov	r1, #0x20
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	mov	r1, #0x18
	mov	r2, #0x78
	mov	r3, #0xc0
	bl	sub_8072AB0
.L211:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L213:
	.align	2, 0
.L212:
	.word	gSprites
	.word	sLearnMoveStruct
	.word	gUnknown_08402D08
	.word	gTileBuffer
	.word	gOtherText_TeachWhichMove
.Lfe12:
	.size	 sub_8133140,.Lfe12-sub_8133140
	.align	2, 0
	.globl	sub_8133248
	.type	 sub_8133248,function
	.thumb_func
sub_8133248:
	push	{r4, lr}
	ldr	r0, .L218
	ldrh	r2, [r0, #0x2e]
	mov	r1, #0x30
	and	r1, r1, r2
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r4, r0, #0x1f
	ldr	r0, .L218+0x4
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x1
	bne	.L216	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L216	@cond_branch
	add	r4, r4, #0x1
.L216:
	cmp	r4, #0
	beq	.L217	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L218+0x8
	ldr	r1, [r2]
	mov	r3, #0x0
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r0, [r2]
	mov	r1, #0xb1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r3, [r0]
.L217:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L219:
	.align	2, 0
.L218:
	.word	gMain
	.word	gSaveBlock2
	.word	sLearnMoveStruct
.Lfe13:
	.size	 sub_8133248,.Lfe13-sub_8133248
	.align	2, 0
	.globl	ClearLearnMoveVars
	.type	 ClearLearnMoveVars,function
	.thumb_func
ClearLearnMoveVars:
	push	{r4, lr}
	ldr	r2, .L226
	ldr	r0, [r2]
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, [r2]
	strb	r1, [r0, #0x2]
	ldr	r0, [r2]
	strb	r1, [r0, #0x19]
	ldr	r0, [r2]
	strb	r1, [r0, #0x18]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1c]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1a]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1b]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1d]
	ldr	r0, [r2]
	strb	r1, [r0, #0x1e]
	ldr	r0, [r2]
	ldr	r3, .L226+0x4
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r2]
	add	r3, r3, #0x1
	add	r0, r0, r3
	strb	r1, [r0]
	mov	r3, #0x0
	add	r4, r2, #0
	mov	r2, #0x0
.L224:
	ldr	r0, [r4]
	lsl	r1, r3, #0x1
	add	r0, r0, #0x20
	add	r0, r0, r1
	strh	r2, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x13
	ble	.L224	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L227:
	.align	2, 0
.L226:
	.word	sLearnMoveStruct
	.word	0x2c3
.Lfe14:
	.size	 ClearLearnMoveVars,.Lfe14-ClearLearnMoveVars
	.align	2, 0
	.globl	sub_8133300
	.type	 sub_8133300,function
	.thumb_func
sub_8133300:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	mov	r0, #0xff
	and	r1, r1, r0
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	beq	.L231	@cond_branch
	cmp	r0, #0x1
	ble	.L229	@cond_branch
	cmp	r0, #0x2
	beq	.L232	@cond_branch
	b	.L229
.L231:
	add	r0, r1, #0
	mov	r1, #0x3
	bl	Sin
	ldrh	r1, [r4, #0x32]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r2, #0
	strh	r0, [r4, #0x24]
	b	.L229
.L232:
	add	r0, r1, #0
	mov	r1, #0x1
	bl	Sin
	ldrh	r1, [r4, #0x32]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r2, #0
	strh	r0, [r4, #0x26]
.L229:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 sub_8133300,.Lfe15-sub_8133300
	.align	2, 0
	.globl	sub_8133358
	.type	 sub_8133358,function
	.thumb_func
sub_8133358:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L256
	add	r0, r6, #0
	mov	r1, #0x8
	mov	r2, #0x10
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r4, .L256+0x4
	ldr	r1, [r4]
	strb	r0, [r1, #0x3]
	ldr	r5, .L256+0x8
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	mov	r8, r1
	mov	r1, r8
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2, #0x3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L256+0xc
	strh	r1, [r0, #0x32]
	add	r0, r6, #0
	mov	r1, #0x48
	mov	r2, #0x10
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r4]
	strb	r0, [r1, #0x4]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldr	r0, .L256+0x10
	mov	r9, r0
	mov	r1, #0xa0
	mov	r2, #0x4
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r4]
	strb	r0, [r1, #0x5]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r6, #0x2
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r2, #0x5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	neg	r1, r1
	strh	r1, [r0, #0x32]
	mov	r0, r9
	mov	r1, #0xa0
	mov	r2, #0x3c
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r4]
	strb	r0, [r1, #0x6]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	mov	r5, #0x0
	ldr	r6, .L256+0x14
.L240:
	add	r2, r5, #0
	cmp	r5, #0
	bge	.L241	@cond_branch
	add	r2, r5, #0x3
.L241:
	asr	r2, r2, #0x2
	lsl	r1, r2, #0x2
	sub	r1, r5, r1
	lsl	r1, r1, #0x13
	mov	r0, #0xe0
	lsl	r0, r0, #0xd
	add	r1, r1, r0
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x13
	mov	r0, #0xd0
	lsl	r0, r0, #0xe
	add	r2, r2, r0
	asr	r2, r2, #0x10
	add	r0, r6, #0
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r4]
	add	r2, r5, #0x4
	add	r1, r1, #0x3
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L256+0x8
	add	r0, r0, r1
	mov	r1, #0x2
	bl	StartSpriteAnim
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L240	@cond_branch
	mov	r5, #0x0
	ldr	r7, .L256+0x14
	ldr	r6, .L256+0x4
.L247:
	add	r2, r5, #0
	cmp	r5, #0
	bge	.L248	@cond_branch
	add	r2, r5, #0x3
.L248:
	asr	r2, r2, #0x2
	lsl	r1, r2, #0x2
	sub	r1, r5, r1
	lsl	r1, r1, #0x13
	mov	r0, #0xe0
	lsl	r0, r0, #0xd
	add	r1, r1, r0
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x13
	mov	r0, #0xb8
	lsl	r0, r0, #0xf
	add	r2, r2, r0
	asr	r2, r2, #0x10
	add	r0, r7, #0
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r6]
	add	r2, r5, #0
	add	r2, r2, #0xc
	add	r1, r1, #0x3
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L256+0x8
	add	r0, r0, r4
	mov	r1, #0x2
	bl	StartSpriteAnim
	add	r5, r5, #0x1
	cmp	r5, #0x7
	ble	.L247	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L256+0x4
	mov	r2, #0x4
.L254:
	ldr	r0, [r3]
	add	r0, r0, #0x3
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x13
	ble	.L254	@cond_branch
	ldr	r1, .L256+0xc
	ldr	r3, .L256+0x18
	mov	r0, #0x12
	str	r0, [sp]
	mov	r0, #0x10
	mov	r2, #0xc
	bl	CreateBlendedOutlineCursor
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L257:
	.align	2, 0
.L256:
	.word	gSpriteTemplate_8402D90
	.word	sLearnMoveStruct
	.word	gSprites
	.word	0xffff
	.word	gSpriteTemplate_8402DC0
	.word	gSpriteTemplate_8402E08
	.word	0x2d9f
.Lfe16:
	.size	 sub_8133358,.Lfe16-sub_8133358
	.align	2, 0
	.globl	sub_8133558
	.type	 sub_8133558,function
	.thumb_func
sub_8133558:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff4
	ldr	r5, .L264
	ldr	r1, [r5]
	ldr	r2, .L264+0x4
	add	r0, r1, r2
	ldrb	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L264+0x8
	add	r0, r0, r2
	add	r1, r1, #0x20
	bl	GetMoveRelearnerMoves
	ldr	r1, [r5]
	strb	r0, [r1, #0x1a]
	mov	r4, #0x0
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1a]
	cmp	r4, r0
	bge	.L260	@cond_branch
	add	r6, r5, #0
	mov	r5, #0x52
.L262:
	lsl	r2, r4, #0x1
	ldr	r1, [r6]
	add	r0, r1, r5
	add	r1, r1, #0x20
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	ldr	r2, .L264+0xc
	add	r1, r1, r2
	bl	StringCopy
	add	r5, r5, #0x19
	add	r4, r4, #0x1
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1a]
	cmp	r4, r0
	blt	.L262	@cond_branch
.L260:
	ldr	r4, .L264
	ldr	r0, [r4]
	ldr	r1, .L264+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L264+0x8
	add	r0, r0, r1
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	ldr	r0, .L264+0x10
	mov	r1, sp
	bl	StringCopy10
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x1a]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	add	r1, r1, #0x52
	add	r0, r0, r1
	ldr	r1, .L264+0x14
	bl	StringCopy
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1a]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1a]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	sLearnMoveStruct
	.word	0x2c5
	.word	gPlayerParty
	.word	gMoveNames
	.word	gStringVar1
	.word	gUnknownText_Exit
.Lfe17:
	.size	 sub_8133558,.Lfe17-sub_8133558
	.align	2, 0
	.globl	sub_813360C
	.type	 sub_813360C,function
	.thumb_func
sub_813360C:
	lsl	r0, r0, #0x18
	ldr	r3, .L267
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x18]
	strb	r1, [r2, #0x1c]
	ldr	r1, [r3]
	lsr	r0, r0, #0x18
	ldrb	r2, [r1, #0x18]
	add	r0, r0, r2
	strb	r0, [r1, #0x18]
	ldr	r1, [r3]
	mov	r0, #0x1
	strb	r0, [r1, #0x1d]
	bx	lr
.L268:
	.align	2, 0
.L267:
	.word	sLearnMoveStruct
.Lfe18:
	.size	 sub_813360C,.Lfe18-sub_813360C
	.align	2, 0
	.globl	sub_813362C
	.type	 sub_813362C,function
	.thumb_func
sub_813362C:
	push	{r4, r5, lr}
	ldr	r2, .L292
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L270	@cond_branch
	ldr	r4, .L292+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1b]
	cmp	r0, #0
	bne	.LCB2475
	b	.L275	@long jump
.LCB2475:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1b]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x1b]
	ldr	r0, [r4]
	ldr	r1, .L292+0x8
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0
	beq	.L272	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	bl	sub_813360C
	b	.L275
.L293:
	.align	2, 0
.L292:
	.word	gMain
	.word	sLearnMoveStruct
	.word	0x2c3
.L272:
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0
	bne	.LCB2515
	b	.L275	@long jump
.LCB2515:
	sub	r0, r0, #0x1
	b	.L291
.L270:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L276	@cond_branch
	ldr	r4, .L294
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1b]
	ldrb	r0, [r0, #0x1a]
	sub	r0, r0, #0x1
	cmp	r1, r0
	blt	.LCB2534
	b	.L275	@long jump
.LCB2534:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1b]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1b]
	ldr	r0, [r4]
	ldr	r3, .L294+0x4
	add	r0, r0, r3
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0x2
	beq	.L278	@cond_branch
	mov	r0, #0x1
	bl	sub_813360C
	b	.L275
.L295:
	.align	2, 0
.L294:
	.word	sLearnMoveStruct
	.word	0x2c3
.L278:
	ldrb	r2, [r1, #0x19]
	ldrb	r0, [r1, #0x1a]
	sub	r0, r0, #0x3
	cmp	r2, r0
	beq	.L275	@cond_branch
	add	r0, r2, #0x1
.L291:
	strb	r0, [r1, #0x19]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1e]
	b	.L275
.L276:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L282	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r5, .L296
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1b]
	ldrb	r0, [r2, #0x1a]
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L283	@cond_branch
	mov	r0, #0x8
	strb	r0, [r2]
	ldr	r0, .L296+0x4
	ldr	r1, [r5]
	ldrb	r3, [r1, #0x1b]
	lsl	r2, r3, #0x1
	add	r2, r2, r3
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	add	r2, r2, #0x52
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L296+0x8
	ldr	r1, .L296+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x3
	mov	r2, #0xf
	bl	MenuPrintMessage
	b	.L275
.L297:
	.align	2, 0
.L296:
	.word	sLearnMoveStruct
	.word	gStringVar2
	.word	gStringVar4
	.word	gOtherText_TeachSpecificMove
.L283:
	ldr	r4, .L298
	ldr	r1, .L298+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x3
	mov	r2, #0xf
	bl	MenuPrintMessage
	ldr	r1, [r5]
	mov	r0, #0xc
	strb	r0, [r1]
	b	.L275
.L299:
	.align	2, 0
.L298:
	.word	gStringVar4
	.word	gOtherText_GiveUpTeachingMove
.L282:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L275	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L300
	ldr	r1, [r0]
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r4, .L300+0x4
	ldr	r1, .L300+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x3
	mov	r2, #0xf
	bl	MenuPrintMessage
.L275:
	ldr	r0, .L300
	ldr	r4, [r0]
	ldrb	r0, [r4, #0x1a]
	cmp	r0, #0x3
	bls	.L287	@cond_branch
	ldr	r3, .L300+0xc
	add	r5, r3, #0
	add	r5, r5, #0xc6
	ldrb	r0, [r5]
	mov	r1, #0x5
	neg	r1, r1
	add	r2, r1, #0
	and	r2, r2, r0
	strb	r2, [r5]
	mov	r0, #0x85
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r0, [r0]
	add	r3, r1, #0
	and	r3, r3, r0
	mov	r1, ip
	strb	r3, [r1]
	ldrb	r0, [r4, #0x19]
	cmp	r0, #0
	bne	.L288	@cond_branch
	mov	r1, #0x4
	add	r0, r2, #0
	orr	r0, r0, r1
	strb	r0, [r5]
	b	.L287
.L301:
	.align	2, 0
.L300:
	.word	sLearnMoveStruct
	.word	gStringVar4
	.word	gOtherText_GiveUpTeachingMove
	.word	gSprites
.L288:
	ldrb	r1, [r4, #0x19]
	ldrb	r0, [r4, #0x1a]
	sub	r0, r0, #0x3
	cmp	r1, r0
	bne	.L287	@cond_branch
	mov	r1, #0x4
	add	r0, r3, #0
	orr	r0, r0, r1
	mov	r3, ip
	strb	r0, [r3]
.L287:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_813362C,.Lfe19-sub_813362C
	.align	2, 0
	.globl	sub_8133800
	.type	 sub_8133800,function
	.thumb_func
sub_8133800:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r1, .L315
	ldr	r0, [r1]
	ldrb	r6, [r0, #0x19]
	ldr	r3, .L315+0x4
	mov	sl, r1
	ldr	r0, .L315+0x8
	mov	r9, r0
	mov	r1, #0x2
	mov	r8, r1
.L306:
	mov	r4, sl
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x1a]
	cmp	r6, r0
	bcc	.L307	@cond_branch
	add	r0, r3, #0
	ldr	r1, .L315+0xc
	mov	r2, #0x90
	mov	r3, #0x0
	bl	sub_8072C74
	b	.L314
.L316:
	.align	2, 0
.L315:
	.word	sLearnMoveStruct
	.word	gTileBuffer
	.word	gBattleMoves
	.word	gEmptyString_81E72B0
.L307:
	ldrb	r0, [r2, #0x1a]
	sub	r0, r0, #0x1
	cmp	r6, r0
	bne	.L309	@cond_branch
	add	r0, r3, #0
	ldr	r1, .L317
	mov	r2, #0x90
	mov	r3, #0x0
	bl	sub_8072C74
	b	.L314
.L318:
	.align	2, 0
.L317:
	.word	gUnknownText_Exit
.L309:
	lsl	r1, r6, #0x1
	add	r0, r2, #0
	add	r0, r0, #0x20
	add	r0, r0, r1
	ldrh	r5, [r0]
	mov	r4, #0xb1
	lsl	r4, r4, #0x2
	add	r0, r2, r4
	ldrb	r0, [r0]
	add	r7, r1, #0
	cmp	r0, #0
	beq	.L311	@cond_branch
	ldr	r1, .L319
	lsl	r0, r5, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1b
	ldr	r1, .L319+0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r3, #0
	mov	r2, #0x27
	mov	r3, #0x0
	bl	sub_8072C74
	add	r3, r0, #0
	lsl	r4, r5, #0x1
	b	.L312
.L320:
	.align	2, 0
.L319:
	.word	gContestMoves
	.word	gUnknown_083CAF70
.L311:
	lsl	r4, r5, #0x1
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x2]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	ldr	r0, .L321
	add	r1, r1, r0
	add	r0, r3, #0
	mov	r2, #0x27
	mov	r3, #0x0
	bl	sub_8072C74
	add	r3, r0, #0
.L312:
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	add	r0, r0, #0x52
	mov	r2, sl
	ldr	r1, [r2]
	add	r1, r1, r0
	add	r0, r3, #0
	mov	r2, #0x72
	mov	r3, #0x0
	bl	sub_8072C74
	add	r3, r0, #0
	mov	r0, #0xca
	strb	r0, [r3]
	strb	r0, [r3, #0x1]
	mov	r0, #0xba
	strb	r0, [r3, #0x2]
	add	r3, r3, #0x3
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r1, [r0, #0x4]
	add	r0, r3, #0
	mov	r2, #0x90
	mov	r3, #0x0
	bl	sub_8072C14
.L314:
	add	r3, r0, #0
	mov	r0, #0xfe
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x1
	neg	r4, r4
	add	r8, r8, r4
	mov	r0, r8
	cmp	r0, #0
	blt	.LCB2926
	b	.L306	@long jump
.LCB2926:
	mov	r0, #0xff
	strb	r0, [r3]
	ldr	r0, .L321+0x4
	mov	r1, #0xb
	mov	r2, #0x1
	bl	MenuPrint
	mov	r0, #0x0
	bl	sub_813360C
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L322:
	.align	2, 0
.L321:
	.word	gTypeNames
	.word	gTileBuffer
.Lfe20:
	.size	 sub_8133800,.Lfe20-sub_8133800
	.globl	gUnknown_08402E24
	.section .rodata
	.type	 gUnknown_08402E24,object
	.size	 gUnknown_08402E24,21
gUnknown_08402E24:
	.byte	0xb
	.byte	0x1
	.byte	0x1
	.byte	0x3
	.byte	0x6
	.byte	0x2
	.byte	0x18
	.byte	0x1
	.byte	0x3
	.byte	0x3
	.byte	0xb
	.byte	0x4
	.byte	0x5
	.byte	0x4
	.byte	0x5
	.byte	0x3
	.byte	0x6
	.byte	0x6
	.byte	0x3
	.byte	0xb
	.byte	0x7
	.globl	gUnknown_08402E39
	.type	 gUnknown_08402E39,object
gUnknown_08402E39:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.size	 gUnknown_08402E39,4
	.globl	gUnknown_08402E3D
	.type	 gUnknown_08402E3D,object
gUnknown_08402E3D:
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.size	 gUnknown_08402E3D,3
.text
	.align	2, 0
	.globl	PrintMoveInfo
	.type	 PrintMoveInfo,function
	.thumb_func
PrintMoveInfo:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffcc
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L355
	mov	r0, sp
	bl	StringCopy
	ldrb	r0, [r4, #0x2]
	sub	r0, r0, #0x1
	cmp	r0, #0x6
	bls	.LCB2967
	b	.L324	@long jump
.LCB2967:
	lsl	r0, r0, #0x2
	ldr	r1, .L355+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L356:
	.align	2, 0
.L355:
	.word	gExpandedPlaceholder_Empty
	.word	.L350
	.align	2, 0
	.align	2, 0
.L350:
	.word	.L324
	.word	.L326
	.word	.L324
	.word	.L329
	.word	.L324
	.word	.L332
	.word	.L341
.L326:
	ldr	r0, .L357
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x1
	bls	.L352	@cond_branch
	ldrb	r1, [r1, #0x1]
	b	.L354
.L358:
	.align	2, 0
.L357:
	.word	gBattleMoves
.L329:
	ldr	r0, .L359
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0
	bne	.L330	@cond_branch
.L352:
	ldr	r1, .L359+0x4
	mov	r0, sp
	mov	r2, #0x20
	mov	r3, #0x2
	bl	sub_8072C74
	b	.L331
.L360:
	.align	2, 0
.L359:
	.word	gBattleMoves
	.word	gOtherText_ThreeDashes2
.L330:
	ldrb	r1, [r1, #0x3]
.L354:
	mov	r0, sp
	mov	r2, #0x20
	mov	r3, #0x2
	bl	sub_8072C14
.L331:
	ldrb	r1, [r4]
	ldrb	r2, [r4, #0x1]
	mov	r0, sp
	bl	MenuPrint
	b	.L324
.L332:
	ldrb	r2, [r4]
	ldrb	r1, [r4, #0x1]
	add	r3, r1, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r2, #0
	bl	MenuZeroFillWindowRect
	ldr	r2, .L361
	ldr	r1, .L361+0x4
	lsl	r0, r5, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xff
	bne	.L333	@cond_branch
	mov	r5, #0x0
.L333:
	mov	r4, #0x0
	ldr	r7, .L361+0x8
	ldr	r6, .L361+0xc
.L337:
	cmp	r4, r5
	bcs	.L338	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L336
.L362:
	.align	2, 0
.L361:
	.word	gContestEffects
	.word	gContestMoves
	.word	sLearnMoveStruct
	.word	gSprites
.L338:
	ldr	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x0
	bl	StartSpriteAnim
.L336:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x7
	bls	.L337	@cond_branch
	b	.L324
.L341:
	ldrb	r2, [r4]
	ldrb	r1, [r4, #0x1]
	add	r3, r1, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r2, #0
	bl	MenuZeroFillWindowRect
	ldr	r2, .L363
	ldr	r1, .L363+0x4
	lsl	r0, r5, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xff
	bne	.L342	@cond_branch
	mov	r5, #0x0
.L342:
	mov	r4, #0x0
	ldr	r7, .L363+0x8
	ldr	r6, .L363+0xc
.L346:
	cmp	r4, r5
	bcs	.L347	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0, #0xf]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x3
	bl	StartSpriteAnim
	b	.L345
.L364:
	.align	2, 0
.L363:
	.word	gContestEffects
	.word	gContestMoves
	.word	sLearnMoveStruct
	.word	gSprites
.L347:
	ldr	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0, #0xf]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x2
	bl	StartSpriteAnim
.L345:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x7
	bls	.L346	@cond_branch
.L324:
	add	sp, sp, #0x34
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 PrintMoveInfo,.Lfe21-PrintMoveInfo
	.align	2, 0
	.globl	sub_8133AEC
	.type	 sub_8133AEC,function
	.thumb_func
sub_8133AEC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r6, .L393
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x1b]
	ldrb	r0, [r2, #0x1a]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.LCB3250
	b	.L366	@long jump
.LCB3250:
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	add	r0, r0, #0x20
	add	r0, r0, r1
	ldrh	r5, [r0]
	cmp	r3, #0
	beq	.L367	@cond_branch
	mov	r4, #0x0
	lsl	r0, r5, #0x3
	mov	r8, r0
	ldr	r7, .L393+0x4
	add	r3, r6, #0
	mov	r6, #0x5
	neg	r6, r6
.L371:
	ldr	r0, [r3]
	add	r0, r0, r4
	ldrb	r0, [r0, #0x7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xf
	bls	.L371	@cond_branch
	mov	r4, #0x0
.L376:
	ldr	r0, .L393+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldr	r0, .L393+0xc
	add	r1, r1, r0
	add	r0, r5, #0
	bl	PrintMoveInfo
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x2
	bls	.L376	@cond_branch
	ldr	r1, .L393+0x10
	ldr	r0, .L393+0x14
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	str	r1, [sp]
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	mov	r1, #0x58
	mov	r2, #0x48
	mov	r3, #0x90
	bl	sub_8072AB0
	b	.L385
.L394:
	.align	2, 0
.L393:
	.word	sLearnMoveStruct
	.word	gSprites
	.word	gUnknown_08402E3D
	.word	gUnknown_08402E24
	.word	gUnknown_083CADD4
	.word	gContestMoves
.L367:
	mov	r4, #0x0
	sub	r6, r5, #0x1
.L382:
	ldr	r0, .L395
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	ldr	r0, .L395+0x4
	add	r1, r1, r0
	add	r0, r5, #0
	bl	PrintMoveInfo
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L382	@cond_branch
	ldr	r1, .L395+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x58
	mov	r2, #0x48
	mov	r3, #0x90
	bl	sub_8072A18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L385	@cond_branch
	lsl	r1, r0, #0x19
	mov	r0, #0x90
	lsl	r0, r0, #0x14
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	mov	r0, #0xb
	mov	r2, #0x1c
	mov	r3, #0xc
	bl	MenuFillWindowRectWithBlankTile
	b	.L385
.L396:
	.align	2, 0
.L395:
	.word	gUnknown_08402E39
	.word	gUnknown_08402E24
	.word	gMoveDescriptions
.L366:
	cmp	r3, #0
	beq	.L386	@cond_branch
	ldr	r4, .L397
	ldrb	r2, [r4, #0xf]
	ldrb	r1, [r4, #0x10]
	add	r3, r1, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r2, #0
	bl	MenuZeroFillWindowRect
	ldrb	r2, [r4, #0x12]
	ldrb	r1, [r4, #0x13]
	add	r3, r1, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r2, #0
	bl	MenuZeroFillWindowRect
	mov	r4, #0x0
	ldr	r5, .L397+0x4
	add	r3, r6, #0
	mov	r2, #0x4
.L390:
	ldr	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0, #0x7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xf
	bls	.L390	@cond_branch
	b	.L392
.L398:
	.align	2, 0
.L397:
	.word	gUnknown_08402E24
	.word	gSprites
.L386:
	ldr	r4, .L399
	ldrb	r0, [r4, #0x3]
	ldrb	r1, [r4, #0x4]
	add	r2, r0, #0x3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r3, r1, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	MenuZeroFillWindowRect
	ldrb	r0, [r4, #0x9]
	ldrb	r1, [r4, #0xa]
	add	r2, r0, #0x3
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r3, r1, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	MenuZeroFillWindowRect
.L392:
	mov	r0, #0xb
	mov	r1, #0x9
	mov	r2, #0x1c
	mov	r3, #0xc
	bl	MenuZeroFillWindowRect
.L385:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	gUnknown_08402E24
.Lfe22:
	.size	 sub_8133AEC,.Lfe22-sub_8133AEC
	.align	2, 0
	.globl	sub_8133CA4
	.type	 sub_8133CA4,function
	.thumb_func
sub_8133CA4:
	push	{lr}
	mov	r0, #0x15
	mov	r1, #0x7
	mov	r2, #0x1b
	mov	r3, #0xc
	bl	MenuZeroFillWindowRect
	ldr	r0, .L402
	ldr	r0, [r0]
	mov	r1, #0xb1
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	sub_8133AEC
	pop	{r0}
	bx	r0
.L403:
	.align	2, 0
.L402:
	.word	sLearnMoveStruct
.Lfe23:
	.size	 sub_8133CA4,.Lfe23-sub_8133CA4

	.lcomm	sLearnMoveStruct,4
.text
	.align	2, 0
