@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sLearningMoveTableID,object
	.size	 sLearningMoveTableID,1
sLearningMoveTableID:
	.byte	0x0
.text
	.align	2, 0
	.globl	ZeroBoxMonData
	.type	 ZeroBoxMonData,function
	.thumb_func
ZeroBoxMonData:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x0
	mov	r3, #0x0
.L6:
	add	r0, r2, r1
	strb	r3, [r0]
	add	r1, r1, #0x1
	cmp	r1, #0x4f
	bls	.L6	@cond_branch
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 ZeroBoxMonData,.Lfe1-ZeroBoxMonData
	.align	2, 0
	.globl	ZeroMonData
	.type	 ZeroMonData,function
	.thumb_func
ZeroMonData:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	bl	ZeroBoxMonData
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	mov	r2, sp
	bl	SetMonData
	mov	r0, #0xff
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x40
	mov	r2, sp
	bl	SetMonData
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 ZeroMonData,.Lfe2-ZeroMonData
	.align	2, 0
	.globl	ZeroPlayerPartyMons
	.type	 ZeroPlayerPartyMons,function
	.thumb_func
ZeroPlayerPartyMons:
	push	{r4, r5, lr}
	ldr	r4, .L15
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	add	r5, r4, r0
.L13:
	add	r0, r4, #0
	bl	ZeroMonData
	add	r4, r4, #0x64
	cmp	r4, r5
	ble	.L13	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gPlayerParty
.Lfe3:
	.size	 ZeroPlayerPartyMons,.Lfe3-ZeroPlayerPartyMons
	.align	2, 0
	.globl	ZeroEnemyPartyMons
	.type	 ZeroEnemyPartyMons,function
	.thumb_func
ZeroEnemyPartyMons:
	push	{r4, r5, lr}
	ldr	r4, .L23
	mov	r0, #0xfa
	lsl	r0, r0, #0x1
	add	r5, r4, r0
.L21:
	add	r0, r4, #0
	bl	ZeroMonData
	add	r4, r4, #0x64
	cmp	r4, r5
	ble	.L21	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	gEnemyParty
.Lfe4:
	.size	 ZeroEnemyPartyMons,.Lfe4-ZeroEnemyPartyMons
	.align	2, 0
	.globl	CreateMon
	.type	 CreateMon,function
	.thumb_func
CreateMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xffffffe4
	mov	r8, r0
	add	r6, r1, #0
	ldr	r4, [sp, #0x34]
	ldr	r7, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	add	r0, sp, #0x10
	strb	r2, [r0]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, r8
	str	r3, [sp, #0x18]
	bl	ZeroMonData
	str	r4, [sp]
	str	r7, [sp, #0x4]
	str	r5, [sp, #0x8]
	ldr	r0, [sp, #0x40]
	str	r0, [sp, #0xc]
	mov	r0, r8
	add	r1, r6, #0
	add	r2, sp, #0x10
	ldrb	r2, [r2]
	ldr	r3, [sp, #0x18]
	bl	CreateBoxMon
	mov	r0, r8
	mov	r1, #0x38
	add	r2, sp, #0x10
	bl	SetMonData
	mov	r0, #0xff
	str	r0, [sp, #0x14]
	add	r2, sp, #0x14
	mov	r0, r8
	mov	r1, #0x40
	bl	SetMonData
	mov	r0, r8
	bl	CalculateMonStats
	add	sp, sp, #0x1c
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 CreateMon,.Lfe5-CreateMon
	.align	2, 0
	.globl	CreateBoxMon
	.type	 CreateBoxMon,function
	.thumb_func
CreateBoxMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffe0
	add	r7, r0, #0
	ldr	r4, [sp, #0x40]
	ldr	r0, [sp, #0x48]
	mov	r5, #0xe
	add	r5, r5, sp
	strh	r1, [r5]
	add	r6, sp, #0x10
	strb	r2, [r6]
	mov	r5, sp
	add	r5, r5, #0x11
	strb	r3, [r5]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r0, r7, #0
	bl	ZeroBoxMonData
	cmp	r4, #0
	beq	.L27	@cond_branch
	ldr	r0, [sp, #0x44]
	str	r0, [sp, #0x14]
	b	.L28
.L27:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	str	r4, [sp, #0x14]
.L28:
	add	r2, sp, #0x14
	add	r0, r7, #0
	mov	r1, #0x0
	bl	SetBoxMonData
	add	r0, sp, #0x18
	mov	r9, r0
	add	r5, sp, #0xc
	mov	r1, sl
	cmp	r1, #0x2
	bne	.L29	@cond_branch
	ldr	r2, .L41
	mov	r8, r2
	ldr	r6, .L41+0x4
.L30:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	str	r4, [sp, #0x18]
	add	r1, r4, #0
	mov	r3, r8
	and	r1, r1, r3
	lsr	r1, r1, #0x10
	and	r4, r4, r6
	eor	r1, r1, r4
	ldr	r2, [sp, #0x14]
	add	r0, r2, #0
	and	r0, r0, r3
	lsr	r0, r0, #0x10
	eor	r1, r1, r0
	and	r2, r2, r6
	eor	r1, r1, r2
	cmp	r1, #0x7
	bls	.L30	@cond_branch
	b	.L35
.L42:
	.align	2, 0
.L41:
	.word	0xffff0000
	.word	0xffff
.L29:
	mov	r0, sl
	cmp	r0, #0x1
	bne	.L36	@cond_branch
	ldr	r0, [sp, #0x4c]
	str	r0, [sp, #0x18]
	b	.L35
.L36:
	ldr	r2, .L43
	ldrb	r1, [r2, #0xa]
	ldrb	r0, [r2, #0xb]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0xc]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0xd]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [sp, #0x18]
.L35:
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, r9
	bl	SetBoxMonData
	add	r0, r7, #0
	bl	CalculateBoxMonChecksum
	strh	r0, [r5]
	add	r0, r7, #0
	mov	r1, #0x9
	add	r2, r5, #0
	bl	SetBoxMonData
	add	r0, r7, #0
	bl	EncryptBoxMon
	mov	r0, sp
	ldrh	r1, [r0, #0xe]
	bl	GetSpeciesName
	add	r0, r7, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	SetBoxMonData
	ldr	r2, .L43+0x4
	add	r0, r7, #0
	mov	r1, #0x3
	bl	SetBoxMonData
	ldr	r5, .L43
	add	r0, r7, #0
	mov	r1, #0x7
	add	r2, r5, #0
	bl	SetBoxMonData
	add	r0, r7, #0
	mov	r1, #0xb
	mov	r2, sp
	add	r2, r2, #0xe
	bl	SetBoxMonData
	ldr	r4, .L43+0x8
	mov	r2, sp
	ldrh	r1, [r2, #0xe]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mov	r2, r1
	mul	r2, r2, r0
	mov	r3, sp
	ldrb	r0, [r3, #0x10]
	lsl	r0, r0, #0x2
	ldr	r1, .L43+0xc
	add	r0, r0, r1
	add	r2, r2, r0
	add	r0, r7, #0
	mov	r1, #0x19
	bl	SetBoxMonData
	mov	r1, sp
	ldrh	r0, [r1, #0xe]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r4, r4, #0x12
	add	r2, r2, r4
	add	r0, r7, #0
	mov	r1, #0x20
	bl	SetBoxMonData
	bl	sav1_map_get_name
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x18]
	add	r0, r7, #0
	mov	r1, #0x23
	mov	r2, r9
	bl	SetBoxMonData
	add	r0, r7, #0
	mov	r1, #0x24
	add	r2, sp, #0x10
	bl	SetBoxMonData
	ldr	r2, .L43+0x10
	add	r0, r7, #0
	mov	r1, #0x25
	bl	SetBoxMonData
	mov	r0, #0x4
	str	r0, [sp, #0x18]
	add	r0, r7, #0
	mov	r1, #0x26
	mov	r2, r9
	bl	SetBoxMonData
	add	r5, r5, #0x8
	add	r0, r7, #0
	mov	r1, #0x31
	add	r2, r5, #0
	bl	SetBoxMonData
	mov	r2, sp
	ldrb	r0, [r2, #0x11]
	cmp	r0, #0x1f
	bhi	.L38	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x27
	add	r2, r2, #0x11
	bl	SetBoxMonData
	add	r0, r7, #0
	mov	r1, #0x28
	mov	r2, sp
	add	r2, r2, #0x11
	bl	SetBoxMonData
	add	r0, r7, #0
	mov	r1, #0x29
	mov	r2, sp
	add	r2, r2, #0x11
	bl	SetBoxMonData
	add	r0, r7, #0
	mov	r1, #0x2a
	mov	r2, sp
	add	r2, r2, #0x11
	bl	SetBoxMonData
	add	r0, r7, #0
	mov	r1, #0x2b
	mov	r2, sp
	add	r2, r2, #0x11
	bl	SetBoxMonData
	add	r0, r7, #0
	mov	r1, #0x2c
	mov	r2, sp
	add	r2, r2, #0x11
	bl	SetBoxMonData
	b	.L39
.L44:
	.align	2, 0
.L43:
	.word	gSaveBlock2
	.word	gGameLanguage
	.word	gBaseStats
	.word	gExperienceTables
	.word	gGameVersion
.L38:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x18]
	mov	r3, #0x1f
	mov	r8, r3
	and	r0, r0, r3
	str	r0, [sp, #0x1c]
	add	r4, sp, #0x1c
	add	r0, r7, #0
	mov	r1, #0x27
	add	r2, r4, #0
	bl	SetBoxMonData
	ldr	r0, [sp, #0x18]
	mov	r6, #0xf8
	lsl	r6, r6, #0x2
	and	r0, r0, r6
	lsr	r0, r0, #0x5
	str	r0, [sp, #0x1c]
	add	r0, r7, #0
	mov	r1, #0x28
	add	r2, r4, #0
	bl	SetBoxMonData
	ldr	r0, [sp, #0x18]
	mov	r5, #0xf8
	lsl	r5, r5, #0x7
	and	r0, r0, r5
	lsr	r0, r0, #0xa
	str	r0, [sp, #0x1c]
	add	r0, r7, #0
	mov	r1, #0x29
	add	r2, r4, #0
	bl	SetBoxMonData
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x18]
	mov	r1, r8
	and	r0, r0, r1
	str	r0, [sp, #0x1c]
	add	r0, r7, #0
	mov	r1, #0x2a
	add	r2, r4, #0
	bl	SetBoxMonData
	ldr	r0, [sp, #0x18]
	and	r0, r0, r6
	lsr	r0, r0, #0x5
	str	r0, [sp, #0x1c]
	add	r0, r7, #0
	mov	r1, #0x2b
	add	r2, r4, #0
	bl	SetBoxMonData
	ldr	r0, [sp, #0x18]
	and	r0, r0, r5
	lsr	r0, r0, #0xa
	str	r0, [sp, #0x1c]
	add	r0, r7, #0
	mov	r1, #0x2c
	add	r2, r4, #0
	bl	SetBoxMonData
.L39:
	ldr	r2, .L45
	mov	r3, sp
	ldrh	r1, [r3, #0xe]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0
	beq	.L40	@cond_branch
	ldr	r0, [sp, #0x14]
	mov	r1, #0x1
	and	r0, r0, r1
	str	r0, [sp, #0x18]
	add	r0, r7, #0
	mov	r1, #0x2e
	mov	r2, r9
	bl	SetBoxMonData
.L40:
	add	r0, r7, #0
	bl	GiveBoxMonInitialMoveset
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gBaseStats
.Lfe6:
	.size	 CreateBoxMon,.Lfe6-CreateBoxMon
	.align	2, 0
	.globl	CreateMonWithNature
	.type	 CreateMonWithNature,function
	.thumb_func
CreateMonWithNature:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff0
	mov	r9, r0
	ldr	r0, [sp, #0x2c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L48:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	add	r0, r4, #0
	bl	GetNatureFromPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	bne	.L48	@cond_branch
	mov	r0, #0x1
	str	r0, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r0, r9
	mov	r1, r8
	add	r2, r7, #0
	add	r3, r6, #0
	bl	CreateMon
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 CreateMonWithNature,.Lfe7-CreateMonWithNature
	.align	2, 0
	.globl	CreateMonWithGenderNatureLetter
	.type	 CreateMonWithGenderNatureLetter,function
	.thumb_func
CreateMonWithGenderNatureLetter:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffe8
	str	r0, [sp, #0x10]
	ldr	r4, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	ldr	r0, [sp, #0x40]
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x14]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	sl, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r8, r4
	lsl	r5, r5, #0x18
	lsr	r6, r5, #0x18
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r9, r1
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1b
	bhi	.L61	@cond_branch
.L55:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r4
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r4
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r4
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r4
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	bl	GetNatureFromPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bne	.L55	@cond_branch
	add	r0, r7, #0
	add	r1, r4, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r8, r0
	bne	.L55	@cond_branch
	mov	r0, r9
	sub	r0, r0, #0x1
	cmp	r5, r0
	bne	.L55	@cond_branch
	b	.L60
.L61:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	add	r0, r4, #0
	bl	GetNatureFromPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bne	.L61	@cond_branch
	add	r0, r7, #0
	add	r1, r4, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r8, r0
	bne	.L61	@cond_branch
.L60:
	mov	r0, #0x1
	str	r0, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	ldr	r0, [sp, #0x10]
	add	r1, r7, #0
	ldr	r2, [sp, #0x14]
	mov	r3, sl
	bl	CreateMon
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 CreateMonWithGenderNatureLetter,.Lfe8-CreateMonWithGenderNatureLetter
	.align	2, 0
	.globl	CreateMaleMon
	.type	 CreateMaleMon,function
	.thumb_func
CreateMaleMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff0
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
.L67:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r5, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	add	r0, r6, #0
	add	r1, r4, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L67	@cond_branch
	mov	r0, #0x1
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r0, r8
	add	r1, r6, #0
	add	r2, r7, #0
	mov	r3, #0x20
	bl	CreateMon
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 CreateMaleMon,.Lfe9-CreateMaleMon
	.align	2, 0
	.globl	CreateMonWithIVsPersonality
	.type	 CreateMonWithIVsPersonality,function
	.thumb_func
CreateMonWithIVsPersonality:
	push	{r4, lr}
	add	sp, sp, #0xffffffec
	add	r4, r0, #0
	str	r3, [sp, #0x10]
	ldr	r3, [sp, #0x1c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r4, #0
	mov	r3, #0x0
	bl	CreateMon
	add	r0, r4, #0
	mov	r1, #0x42
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, r4, #0
	bl	CalculateMonStats
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 CreateMonWithIVsPersonality,.Lfe10-CreateMonWithIVsPersonality
	.align	2, 0
	.globl	CreateMonWithIVsOTID
	.type	 CreateMonWithIVsOTID,function
	.thumb_func
CreateMonWithIVsOTID:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff0
	add	r5, r0, #0
	add	r4, r3, #0
	ldr	r3, [sp, #0x1c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	str	r3, [sp, #0xc]
	add	r0, r5, #0
	mov	r3, #0x0
	bl	CreateMon
	add	r0, r5, #0
	mov	r1, #0x27
	add	r2, r4, #0
	bl	SetMonData
	add	r2, r4, #0x1
	add	r0, r5, #0
	mov	r1, #0x28
	bl	SetMonData
	add	r2, r4, #0x2
	add	r0, r5, #0
	mov	r1, #0x29
	bl	SetMonData
	add	r2, r4, #0x3
	add	r0, r5, #0
	mov	r1, #0x2a
	bl	SetMonData
	add	r2, r4, #0x4
	add	r0, r5, #0
	mov	r1, #0x2b
	bl	SetMonData
	add	r4, r4, #0x5
	add	r0, r5, #0
	mov	r1, #0x2c
	add	r2, r4, #0
	bl	SetMonData
	add	r0, r5, #0
	bl	CalculateMonStats
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 CreateMonWithIVsOTID,.Lfe11-CreateMonWithIVsOTID
	.align	2, 0
	.globl	CreateMonWithEVSpread
	.type	 CreateMonWithEVSpread,function
	.thumb_func
CreateMonWithEVSpread:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xffffffec
	add	r7, r0, #0
	ldr	r0, [sp, #0x2c]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r6, #0x0
	str	r6, [sp]
	str	r6, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r6, [sp, #0xc]
	add	r0, r7, #0
	bl	CreateMon
	mov	r4, r8
	mov	r1, #0x1
	mov	r5, #0x5
.L78:
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L79	@cond_branch
	add	r6, r6, #0x1
.L79:
	lsr	r4, r4, #0x1
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L78	@cond_branch
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	add	r1, r6, #0
	bl	__divsi3
	add	r1, sp, #0x10
	strh	r0, [r1]
	mov	r4, #0x1
	mov	r5, #0x0
.L84:
	mov	r0, r8
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L85	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x1a
	add	r0, r7, #0
	add	r2, sp, #0x10
	bl	SetMonData
.L85:
	lsl	r0, r4, #0x19
	lsr	r4, r0, #0x18
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L84	@cond_branch
	add	r0, r7, #0
	bl	CalculateMonStats
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 CreateMonWithEVSpread,.Lfe12-CreateMonWithEVSpread
	.align	2, 0
	.globl	sub_803ADE8
	.type	 sub_803ADE8,function
	.thumb_func
sub_803ADE8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xffffffe0
	add	r7, r0, #0
	add	r6, r1, #0
	ldrh	r1, [r6]
	ldrb	r2, [r6, #0xc]
	mov	r3, #0x1
	str	r3, [sp]
	ldr	r0, [r6, #0x1c]
	str	r0, [sp, #0x4]
	str	r3, [sp, #0x8]
	ldr	r0, [r6, #0x14]
	str	r0, [sp, #0xc]
	add	r0, r7, #0
	mov	r3, #0x0
	bl	CreateMon
	mov	r5, #0x0
	add	r0, sp, #0x1c
	mov	r9, r0
	mov	r1, #0x1d
	add	r1, r1, sp
	mov	r8, r1
	add	r4, r6, #0x4
.L91:
	ldrh	r1, [r4]
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	add	r0, r7, #0
	bl	SetMonMoveSlot
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L91	@cond_branch
	add	r2, r6, #0
	add	r2, r2, #0xd
	add	r0, r7, #0
	mov	r1, #0x15
	bl	SetMonData
	add	r2, r6, #0x2
	add	r0, r7, #0
	mov	r1, #0xc
	bl	SetMonData
	add	r1, r6, #0
	add	r1, r1, #0x20
	add	r0, sp, #0x10
	bl	StringCopy
	add	r0, sp, #0x10
	ldrb	r0, [r0]
	cmp	r0, #0xfc
	bne	.L93	@cond_branch
	add	r0, sp, #0x10
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x15
	bne	.L93	@cond_branch
	mov	r0, #0x1
	b	.L95
.L93:
	mov	r0, #0x2
.L95:
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x3
	mov	r2, r9
	bl	SetMonData
	add	r0, sp, #0x10
	bl	StripExtCtrlCodes
	add	r0, r7, #0
	mov	r1, #0x2
	add	r2, sp, #0x10
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x2b
	add	r0, r7, #0
	mov	r1, #0x20
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0xe
	add	r0, r7, #0
	mov	r1, #0x1a
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0xf
	add	r0, r7, #0
	mov	r1, #0x1b
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x10
	add	r0, r7, #0
	mov	r1, #0x1c
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x11
	add	r0, r7, #0
	mov	r1, #0x1d
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x12
	add	r0, r7, #0
	mov	r1, #0x1e
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x13
	add	r0, r7, #0
	mov	r1, #0x1f
	bl	SetMonData
	ldrb	r0, [r6, #0x1b]
	lsr	r0, r0, #0x7
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x2e
	mov	r2, r8
	bl	SetMonData
	ldrb	r0, [r6, #0x18]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x27
	mov	r2, r8
	bl	SetMonData
	ldrh	r0, [r6, #0x18]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x28
	mov	r2, r8
	bl	SetMonData
	ldrb	r0, [r6, #0x19]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x29
	mov	r2, r8
	bl	SetMonData
	ldr	r0, [r6, #0x18]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x2a
	mov	r2, r8
	bl	SetMonData
	ldrh	r0, [r6, #0x1a]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x2b
	mov	r2, r8
	bl	SetMonData
	ldrb	r0, [r6, #0x1b]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x2c
	mov	r2, r8
	bl	SetMonData
	add	r0, r7, #0
	bl	CalculateMonStats
	add	sp, sp, #0x20
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 sub_803ADE8,.Lfe13-sub_803ADE8
	.align	2, 0
	.globl	sub_803AF78
	.type	 sub_803AF78,function
	.thumb_func
sub_803AF78:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	add	r6, r1, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r6]
	add	r0, r7, #0
	mov	r1, #0xc
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L97	@cond_branch
	mov	r0, #0x0
.L97:
	strh	r0, [r6, #0x2]
	mov	r5, #0x0
	mov	r0, #0x2b
	add	r0, r0, r6
	mov	r8, r0
	mov	r1, #0x20
	add	r1, r1, r6
	mov	r9, r1
	add	r4, r6, #0x4
.L101:
	add	r1, r5, #0
	add	r1, r1, #0xd
	add	r0, r7, #0
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L101	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x38
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r6, #0xc]
	add	r0, r7, #0
	mov	r1, #0x15
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r6, #0xd]
	add	r0, r7, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [r6, #0x14]
	add	r0, r7, #0
	mov	r1, #0x1a
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r6, #0xe]
	add	r0, r7, #0
	mov	r1, #0x1b
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r6, #0xf]
	add	r0, r7, #0
	mov	r1, #0x1c
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r6, #0x10]
	add	r0, r7, #0
	mov	r1, #0x1d
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r6, #0x11]
	add	r0, r7, #0
	mov	r1, #0x1e
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r6, #0x12]
	add	r0, r7, #0
	mov	r1, #0x1f
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r6, #0x13]
	add	r0, r7, #0
	mov	r1, #0x20
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r7, #0
	mov	r1, #0x27
	mov	r2, #0x0
	bl	GetMonData
	mov	r4, #0x1f
	and	r0, r0, r4
	ldrb	r2, [r6, #0x18]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r6, #0x18]
	add	r0, r7, #0
	mov	r1, #0x28
	mov	r2, #0x0
	bl	GetMonData
	mov	r5, #0x1f
	and	r0, r0, r5
	lsl	r0, r0, #0x5
	ldrh	r2, [r6, #0x18]
	ldr	r1, .L103
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r6, #0x18]
	add	r0, r7, #0
	mov	r1, #0x29
	mov	r2, #0x0
	bl	GetMonData
	and	r0, r0, r4
	lsl	r0, r0, #0x2
	ldrb	r2, [r6, #0x19]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r6, #0x19]
	add	r0, r7, #0
	mov	r1, #0x2a
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [r6, #0x18]
	ldr	r2, .L103+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [r6, #0x18]
	add	r0, r7, #0
	mov	r1, #0x2b
	mov	r2, #0x0
	bl	GetMonData
	and	r0, r0, r5
	lsl	r0, r0, #0x4
	ldrh	r2, [r6, #0x1a]
	ldr	r1, .L103+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r6, #0x1a]
	add	r0, r7, #0
	mov	r1, #0x2c
	mov	r2, #0x0
	bl	GetMonData
	and	r0, r0, r4
	lsl	r0, r0, #0x1
	ldrb	r2, [r6, #0x1b]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r6, #0x1b]
	add	r0, r7, #0
	mov	r1, #0x2e
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x7
	ldrb	r2, [r6, #0x1b]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r6, #0x1b]
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [r6, #0x1c]
	add	r0, r7, #0
	mov	r1, #0x2
	mov	r2, r9
	bl	GetMonData
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	0xfffffc1f
	.word	0xfff07fff
	.word	0xfffffe0f
.Lfe14:
	.size	 sub_803AF78,.Lfe14-sub_803AF78
	.align	2, 0
	.globl	CalculateBoxMonChecksum
	.type	 CalculateBoxMonChecksum,function
	.thumb_func
CalculateBoxMonChecksum:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	mov	r6, #0x0
	ldr	r1, [r4]
	mov	r2, #0x0
	bl	GetSubstruct
	add	r5, r0, #0
	ldr	r1, [r4]
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetSubstruct
	add	r7, r0, #0
	ldr	r1, [r4]
	add	r0, r4, #0
	mov	r2, #0x2
	bl	GetSubstruct
	mov	r8, r0
	ldr	r1, [r4]
	add	r0, r4, #0
	mov	r2, #0x3
	bl	GetSubstruct
	add	r3, r0, #0
	mov	r1, #0x5
.L109:
	ldrh	r0, [r5]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r5, r5, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L109	@cond_branch
	add	r2, r7, #0
	mov	r1, #0x5
.L114:
	ldrh	r0, [r2]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L114	@cond_branch
	mov	r2, r8
	mov	r1, #0x5
.L119:
	ldrh	r0, [r2]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L119	@cond_branch
	add	r2, r3, #0
	mov	r1, #0x5
.L124:
	ldrh	r0, [r2]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L124	@cond_branch
	add	r0, r6, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 CalculateBoxMonChecksum,.Lfe15-CalculateBoxMonChecksum
	.align	2, 0
	.globl	CalculateMonStats
	.type	 CalculateMonStats,function
	.thumb_func
CalculateMonStats:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffc0
	add	r5, r0, #0
	mov	r1, #0x3a
	mov	r2, #0x0
	bl	GetMonData
	mov	r8, r0
	add	r0, r5, #0
	mov	r1, #0x39
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x1c]
	add	r0, r5, #0
	mov	r1, #0x27
	mov	r2, #0x0
	bl	GetMonData
	add	r6, r0, #0
	add	r0, r5, #0
	mov	r1, #0x1a
	mov	r2, #0x0
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r5, #0
	mov	r1, #0x28
	mov	r2, #0x0
	bl	GetMonData
	mov	sl, r0
	add	r0, r5, #0
	mov	r1, #0x1b
	mov	r2, #0x0
	bl	GetMonData
	mov	r9, r0
	add	r0, r5, #0
	mov	r1, #0x29
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x20]
	add	r0, r5, #0
	mov	r1, #0x1c
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x24]
	add	r0, r5, #0
	mov	r1, #0x2a
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x28]
	add	r0, r5, #0
	mov	r1, #0x1d
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x2c]
	add	r0, r5, #0
	mov	r1, #0x2b
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x30]
	add	r0, r5, #0
	mov	r1, #0x1e
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x34]
	add	r0, r5, #0
	mov	r1, #0x2c
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x38]
	add	r0, r5, #0
	mov	r1, #0x1f
	mov	r2, #0x0
	bl	GetMonData
	str	r0, [sp, #0x3c]
	add	r0, r5, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r5, #0
	bl	GetLevelFromMonExp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x38
	mov	r2, sp
	bl	SetMonData
	ldr	r0, .L147
	cmp	r7, r0
	bne	.L127	@cond_branch
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	lsl	r6, r7, #0x3
	b	.L128
.L148:
	.align	2, 0
.L147:
	.word	0x12f
.L127:
	ldr	r1, .L149
	lsl	r2, r7, #0x3
	sub	r0, r2, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r1, r0, r6
	add	r0, r4, #0
	add	r6, r2, #0
	cmp	r0, #0
	bge	.L129	@cond_branch
	add	r0, r0, #0x3
.L129:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r4, [sp]
	mul	r0, r0, r4
	mov	r1, #0x64
	bl	__divsi3
	add	r0, r0, r4
	add	r0, r0, #0xa
	str	r0, [sp, #0x4]
.L128:
	ldr	r1, .L149+0x4
	add	r2, sp, #0x4
	ldrb	r0, [r2]
	mov	r3, r8
	sub	r0, r0, r3
	ldr	r3, .L149+0x8
	add	r1, r1, r3
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L130	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1]
.L130:
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	SetMonData
	ldr	r0, .L149
	sub	r1, r6, r7
	lsl	r1, r1, #0x2
	add	r6, r1, r0
	ldrb	r0, [r6, #0x1]
	lsl	r0, r0, #0x1
	mov	r2, sl
	add	r1, r0, r2
	mov	r0, r9
	cmp	r0, #0
	bge	.L131	@cond_branch
	add	r0, r0, #0x3
.L131:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r1, [sp]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r0, r0, #0x5
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	bl	GetNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, sp, #0x8
	ldrh	r1, [r4]
	mov	r2, #0x1
	bl	nature_stat_mod
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	mov	r1, #0x3b
	add	r2, r4, #0
	bl	SetMonData
	ldrb	r0, [r6, #0x2]
	lsl	r0, r0, #0x1
	ldr	r3, [sp, #0x20]
	add	r1, r0, r3
	ldr	r0, [sp, #0x24]
	cmp	r0, #0
	bge	.L132	@cond_branch
	add	r0, r0, #0x3
.L132:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r1, [sp]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r0, r0, #0x5
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	bl	GetNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, sp, #0xc
	ldrh	r1, [r4]
	mov	r2, #0x2
	bl	nature_stat_mod
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r1, #0x3c
	add	r2, r4, #0
	bl	SetMonData
	ldrb	r0, [r6, #0x3]
	lsl	r0, r0, #0x1
	ldr	r2, [sp, #0x28]
	add	r1, r0, r2
	ldr	r0, [sp, #0x2c]
	cmp	r0, #0
	bge	.L133	@cond_branch
	add	r0, r0, #0x3
.L133:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r1, [sp]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r0, r0, #0x5
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	bl	GetNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, sp, #0x10
	ldrh	r1, [r4]
	mov	r2, #0x3
	bl	nature_stat_mod
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x3d
	add	r2, r4, #0
	bl	SetMonData
	ldrb	r0, [r6, #0x4]
	lsl	r0, r0, #0x1
	ldr	r3, [sp, #0x30]
	add	r1, r0, r3
	ldr	r0, [sp, #0x34]
	cmp	r0, #0
	bge	.L134	@cond_branch
	add	r0, r0, #0x3
.L134:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r1, [sp]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r0, r0, #0x5
	str	r0, [sp, #0x14]
	add	r0, r5, #0
	bl	GetNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, sp, #0x14
	ldrh	r1, [r4]
	mov	r2, #0x4
	bl	nature_stat_mod
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x14]
	add	r0, r5, #0
	mov	r1, #0x3e
	add	r2, r4, #0
	bl	SetMonData
	ldrb	r0, [r6, #0x5]
	lsl	r0, r0, #0x1
	ldr	r2, [sp, #0x38]
	add	r1, r0, r2
	ldr	r0, [sp, #0x3c]
	cmp	r0, #0
	bge	.L135	@cond_branch
	add	r0, r0, #0x3
.L135:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r1, [sp]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r0, r0, #0x5
	str	r0, [sp, #0x18]
	add	r0, r5, #0
	bl	GetNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, sp, #0x18
	ldrh	r1, [r4]
	mov	r2, #0x5
	bl	nature_stat_mod
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x18]
	add	r0, r5, #0
	mov	r1, #0x3f
	add	r2, r4, #0
	bl	SetMonData
	ldr	r0, .L149+0xc
	cmp	r7, r0
	bne	.L136	@cond_branch
	ldr	r0, [sp, #0x1c]
	cmp	r0, #0
	bne	.L138	@cond_branch
	mov	r3, r8
	cmp	r3, #0
	bne	.L126	@cond_branch
.L138:
	mov	r0, #0x1
	b	.L146
.L150:
	.align	2, 0
.L149:
	.word	gBaseStats
	.word	gSharedMem
	.word	0x160fa
	.word	0x12f
.L136:
	ldr	r1, [sp, #0x1c]
	cmp	r1, #0
	bne	.L145	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	bne	.L126	@cond_branch
	ldr	r0, [sp, #0x4]
	b	.L146
.L145:
	ldr	r0, [sp, #0x4]
	mov	r2, r8
	sub	r0, r0, r2
	add	r0, r1, r0
.L146:
	str	r0, [sp, #0x1c]
	add	r2, sp, #0x1c
	add	r0, r5, #0
	mov	r1, #0x39
	bl	SetMonData
.L126:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 CalculateMonStats,.Lfe16-CalculateMonStats
	.align	2, 0
	.globl	sub_803B4B4
	.type	 sub_803B4B4,function
	.thumb_func
sub_803B4B4:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	add	r2, r0, #0
	add	r4, r1, #0
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r2, #0x50
	bl	memcpy
	add	r0, r4, #0
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, sp
	bl	SetMonData
	mov	r0, #0xff
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x40
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	bl	CalculateMonStats
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 sub_803B4B4,.Lfe17-sub_803B4B4
	.align	2, 0
	.globl	GetLevelFromMonExp
	.type	 GetLevelFromMonExp,function
	.thumb_func
GetLevelFromMonExp:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x19
	mov	r2, #0x0
	bl	GetMonData
	add	r3, r0, #0
	mov	r2, #0x1
	ldr	r6, .L158
	ldr	r1, .L158+0x4
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x13]
	mov	r5, #0xca
	lsl	r5, r5, #0x1
	mul	r0, r0, r5
	add	r0, r0, #0x4
	add	r0, r0, r6
	ldr	r0, [r0]
	cmp	r0, r3
	bhi	.L154	@cond_branch
	add	r4, r1, #0
.L155:
	add	r2, r2, #0x1
	cmp	r2, #0x64
	bgt	.L154	@cond_branch
	lsl	r1, r2, #0x2
	ldrb	r0, [r4, #0x13]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r0, [r1]
	cmp	r0, r3
	bls	.L155	@cond_branch
.L154:
	sub	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L159:
	.align	2, 0
.L158:
	.word	gExperienceTables
	.word	gBaseStats
.Lfe18:
	.size	 GetLevelFromMonExp,.Lfe18-GetLevelFromMonExp
	.align	2, 0
	.globl	GetLevelFromBoxMonExp
	.type	 GetLevelFromBoxMonExp,function
	.thumb_func
GetLevelFromBoxMonExp:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetBoxMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x19
	mov	r2, #0x0
	bl	GetBoxMonData
	add	r3, r0, #0
	mov	r2, #0x1
	ldr	r6, .L166
	ldr	r1, .L166+0x4
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x13]
	mov	r5, #0xca
	lsl	r5, r5, #0x1
	mul	r0, r0, r5
	add	r0, r0, #0x4
	add	r0, r0, r6
	ldr	r0, [r0]
	cmp	r0, r3
	bhi	.L162	@cond_branch
	add	r4, r1, #0
.L163:
	add	r2, r2, #0x1
	cmp	r2, #0x64
	bgt	.L162	@cond_branch
	lsl	r1, r2, #0x2
	ldrb	r0, [r4, #0x13]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r0, [r1]
	cmp	r0, r3
	bls	.L163	@cond_branch
.L162:
	sub	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L167:
	.align	2, 0
.L166:
	.word	gExperienceTables
	.word	gBaseStats
.Lfe19:
	.size	 GetLevelFromBoxMonExp,.Lfe19-GetLevelFromBoxMonExp
	.align	2, 0
	.globl	GiveMoveToMon
	.type	 GiveMoveToMon,function
	.thumb_func
GiveMoveToMon:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	GiveMoveToBoxMon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 GiveMoveToMon,.Lfe20-GiveMoveToMon
	.align	2, 0
	.globl	GiveMoveToBoxMon
	.type	 GiveMoveToBoxMon,function
	.thumb_func
GiveMoveToBoxMon:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	add	r7, r0, #0
	mov	r0, sp
	strh	r1, [r0]
	mov	r5, #0x0
	mov	r6, sp
.L173:
	add	r4, r5, #0
	add	r4, r4, #0xd
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	GetBoxMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L174	@cond_branch
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, sp
	bl	SetBoxMonData
	add	r1, r5, #0
	add	r1, r1, #0x11
	ldrh	r0, [r6]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L178
	add	r2, r2, r0
	add	r0, r7, #0
	bl	SetBoxMonData
	ldrh	r0, [r6]
	b	.L177
.L179:
	.align	2, 0
.L178:
	.word	gBattleMoves+0x4
.L174:
	ldrh	r1, [r6]
	cmp	r0, r1
	bne	.L172	@cond_branch
	ldr	r0, .L180
	b	.L177
.L181:
	.align	2, 0
.L180:
	.word	0xfffe
.L172:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L173	@cond_branch
	ldr	r0, .L182
.L177:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L183:
	.align	2, 0
.L182:
	.word	0xffff
.Lfe21:
	.size	 GiveMoveToBoxMon,.Lfe21-GiveMoveToBoxMon
	.align	2, 0
	.globl	GiveMoveToBattleMon
	.type	 GiveMoveToBattleMon,function
	.thumb_func
GiveMoveToBattleMon:
	push	{r4, r5, lr}
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	mov	r3, #0x0
	add	r5, r0, #0
	add	r5, r5, #0x24
	ldr	r2, .L192
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	add	r1, r0, #0
	add	r1, r1, #0xc
.L188:
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L187	@cond_branch
	strh	r4, [r1]
	add	r1, r5, r3
	ldrb	r0, [r2, #0x4]
	strb	r0, [r1]
	add	r0, r4, #0
	b	.L191
.L193:
	.align	2, 0
.L192:
	.word	gBattleMoves
.L187:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L188	@cond_branch
	ldr	r0, .L194
.L191:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L195:
	.align	2, 0
.L194:
	.word	0xffff
.Lfe22:
	.size	 GiveMoveToBattleMon,.Lfe22-GiveMoveToBattleMon
	.align	2, 0
	.globl	SetMonMoveSlot
	.type	 SetMonMoveSlot,function
	.thumb_func
SetMonMoveSlot:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	add	r4, r2, #0
	mov	r0, sp
	strh	r1, [r0]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	mov	r2, sp
	bl	SetMonData
	add	r4, r4, #0x11
	mov	r0, sp
	ldrh	r0, [r0]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L197
	add	r2, r2, r0
	add	r0, r5, #0
	add	r1, r4, #0
	bl	SetMonData
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	gBattleMoves+0x4
.Lfe23:
	.size	 SetMonMoveSlot,.Lfe23-SetMonMoveSlot
	.align	2, 0
	.globl	SetBattleMonMoveSlot
	.type	 SetBattleMonMoveSlot,function
	.thumb_func
SetBattleMonMoveSlot:
	push	{r4, lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r4, r2, #0x1
	add	r3, r0, #0
	add	r3, r3, #0xc
	add	r3, r3, r4
	strh	r1, [r3]
	add	r0, r0, #0x24
	add	r0, r0, r2
	ldr	r3, .L200
	lsl	r2, r1, #0x1
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r1, [r2, #0x4]
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L201:
	.align	2, 0
.L200:
	.word	gBattleMoves
.Lfe24:
	.size	 SetBattleMonMoveSlot,.Lfe24-SetBattleMonMoveSlot
	.align	2, 0
	.globl	GiveMonInitialMoveset
	.type	 GiveMonInitialMoveset,function
	.thumb_func
GiveMonInitialMoveset:
	push	{lr}
	bl	GiveBoxMonInitialMoveset
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 GiveMonInitialMoveset,.Lfe25-GiveMonInitialMoveset
	.align	2, 0
	.globl	GiveBoxMonInitialMoveset
	.type	 GiveBoxMonInitialMoveset,function
	.thumb_func
GiveBoxMonInitialMoveset:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r8, r0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetBoxMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, r8
	bl	GetLevelFromBoxMonExp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L211
	lsl	r6, r4, #0x2
	add	r0, r6, r0
	ldr	r0, [r0]
	ldrh	r1, [r0]
	ldr	r2, .L211+0x4
	lsr	r0, r2, #0x10
	cmp	r1, r0
	beq	.L205	@cond_branch
	mov	r9, r2
	mov	r3, #0x0
.L207:
	ldr	r0, .L211
	add	r7, r6, r0
	ldr	r0, [r7]
	add	r0, r3, r0
	ldrh	r2, [r0]
	mov	r1, #0xfe
	lsl	r1, r1, #0x8
	add	r0, r1, #0
	and	r0, r0, r2
	mov	r4, sl
	lsl	r1, r4, #0x9
	cmp	r0, r1
	bgt	.L205	@cond_branch
	ldr	r1, .L211+0x8
	add	r0, r1, #0
	add	r4, r0, #0
	and	r4, r4, r2
	mov	r0, r8
	add	r1, r4, #0
	str	r3, [sp]
	bl	GiveMoveToBoxMon
	lsl	r0, r0, #0x10
	mov	r1, r9
	lsr	r5, r1, #0x10
	ldr	r3, [sp]
	cmp	r0, r9
	bne	.L206	@cond_branch
	mov	r0, r8
	add	r1, r4, #0
	bl	DeleteFirstMoveAndGiveMoveToBoxMon
	ldr	r3, [sp]
.L206:
	add	r3, r3, #0x2
	ldr	r0, [r7]
	add	r0, r3, r0
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L207	@cond_branch
.L205:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L212:
	.align	2, 0
.L211:
	.word	gLevelUpLearnsets
	.word	0xffff0000
	.word	0x1ff
.Lfe26:
	.size	 GiveBoxMonInitialMoveset,.Lfe26-GiveBoxMonInitialMoveset
	.align	2, 0
	.globl	MonTryLearningNewMove
	.type	 MonTryLearningNewMove,function
	.thumb_func
MonTryLearningNewMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r8, r0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, r8
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r0, r8
	mov	r1, #0x38
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r4, #0
	beq	.L214	@cond_branch
	ldr	r4, .L223
	mov	r1, sp
	ldrb	r1, [r1]
	strb	r1, [r4]
	ldr	r2, .L223+0x4
	mov	r5, r9
	lsl	r3, r5, #0x2
	add	r5, r3, r2
	ldr	r0, [r5]
	ldrh	r1, [r0]
	mov	r7, #0xfe
	lsl	r7, r7, #0x8
	add	r0, r7, #0
	and	r0, r0, r1
	add	r6, r4, #0
	mov	ip, r2
	mov	r1, sl
	lsl	r4, r1, #0x9
	cmp	r0, r4
	beq	.L222	@cond_branch
	add	r2, r6, #0
	ldr	r0, .L223+0x8
	mov	ip, r0
	add	r6, r7, #0
	add	r3, r5, #0
.L217:
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	ldrb	r0, [r2]
	ldr	r1, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, ip
	bne	.L215	@cond_branch
	mov	r0, #0x0
	b	.L221
.L224:
	.align	2, 0
.L223:
	.word	sLearningMoveTableID
	.word	gLevelUpLearnsets
	.word	0xffff
.L215:
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, r4
	bne	.L217	@cond_branch
.L214:
	ldr	r3, .L225
	mov	r1, r9
	lsl	r4, r1, #0x2
	add	r1, r4, r3
	ldr	r2, .L225+0x4
	ldrb	r0, [r2]
	ldr	r1, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0xfe
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	mov	r5, sl
	lsl	r1, r5, #0x9
	add	r6, r2, #0
	mov	ip, r3
	add	r3, r4, #0
	cmp	r0, r1
	bne	.L220	@cond_branch
.L222:
	ldr	r2, .L225+0x8
	mov	r0, ip
	add	r1, r3, r0
	ldrb	r0, [r6]
	ldr	r1, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldr	r0, .L225+0xc
	and	r0, r0, r1
	strh	r0, [r2]
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	ldrh	r1, [r2]
	mov	r0, r8
	bl	GiveMoveToMon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp]
.L220:
	ldr	r0, [sp]
.L221:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L226:
	.align	2, 0
.L225:
	.word	gLevelUpLearnsets
	.word	sLearningMoveTableID
	.word	gMoveToLearn
	.word	0x1ff
.Lfe27:
	.size	 MonTryLearningNewMove,.Lfe27-MonTryLearningNewMove
	.align	2, 0
	.globl	DeleteFirstMoveAndGiveMoveToMon
	.type	 DeleteFirstMoveAndGiveMoveToMon,function
	.thumb_func
DeleteFirstMoveAndGiveMoveToMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff0
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	mov	r4, #0x0
	add	r7, sp, #0x8
	add	r0, sp, #0xc
	mov	r9, r0
	mov	r5, sp
.L231:
	add	r1, r4, #0
	add	r1, r1, #0xe
	add	r0, r6, #0
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x12
	add	r0, r6, #0
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r7, r4
	strb	r0, [r1]
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L231	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1]
	ldrb	r0, [r1]
	lsr	r0, r0, #0x2
	strb	r0, [r1]
	mov	r0, sp
	mov	r2, r8
	strh	r2, [r0, #0x6]
	ldr	r1, .L238
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
	strb	r0, [r7, #0x3]
	mov	r4, #0x0
	mov	r5, sp
.L236:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	add	r2, r5, #0
	bl	SetMonData
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r2, r7, r4
	add	r0, r6, #0
	bl	SetMonData
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L236	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	gBattleMoves
.Lfe28:
	.size	 DeleteFirstMoveAndGiveMoveToMon,.Lfe28-DeleteFirstMoveAndGiveMoveToMon
	.align	2, 0
	.globl	DeleteFirstMoveAndGiveMoveToBoxMon
	.type	 DeleteFirstMoveAndGiveMoveToBoxMon,function
	.thumb_func
DeleteFirstMoveAndGiveMoveToBoxMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff0
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	mov	r4, #0x0
	add	r7, sp, #0x8
	add	r0, sp, #0xc
	mov	r9, r0
	mov	r5, sp
.L244:
	add	r1, r4, #0
	add	r1, r1, #0xe
	add	r0, r6, #0
	mov	r2, #0x0
	bl	GetBoxMonData
	strh	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x12
	add	r0, r6, #0
	mov	r2, #0x0
	bl	GetBoxMonData
	add	r1, r7, r4
	strb	r0, [r1]
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L244	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	mov	r2, #0x0
	bl	GetBoxMonData
	mov	r1, r9
	strb	r0, [r1]
	ldrb	r0, [r1]
	lsr	r0, r0, #0x2
	strb	r0, [r1]
	mov	r0, sp
	mov	r2, r8
	strh	r2, [r0, #0x6]
	ldr	r1, .L251
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
	strb	r0, [r7, #0x3]
	mov	r4, #0x0
	mov	r5, sp
.L249:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	add	r2, r5, #0
	bl	SetBoxMonData
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r2, r7, r4
	add	r0, r6, #0
	bl	SetBoxMonData
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L249	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x15
	mov	r2, r9
	bl	SetBoxMonData
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	gBattleMoves
.Lfe29:
	.size	 DeleteFirstMoveAndGiveMoveToBoxMon,.Lfe29-DeleteFirstMoveAndGiveMoveToBoxMon
	.comm	gPlayerPartyCount, 4	@ 1
	.comm	gPlayerParty, 600	@ 600
	.comm	gEnemyPartyCount, 4	@ 1
	.comm	gEnemyParty, 600	@ 600
.text
	.align	2, 0
