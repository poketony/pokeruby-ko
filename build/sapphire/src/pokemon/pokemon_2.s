@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_02024E8C
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_02024E8C,object
	.size	 gUnknown_02024E8C,24
gUnknown_02024E8C:
	.short	0x0
	.space	22
.text
	.align	2, 0
	.globl	CountAliveMons
	.type	 CountAliveMons,function
	.thumb_func
CountAliveMons:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	mov	r6, #0x0
	cmp	r0, #0x1
	beq	.L11	@cond_branch
	cmp	r0, #0x1
	bgt	.L27	@cond_branch
	cmp	r0, #0
	beq	.L4	@cond_branch
	b	.L3
.L27:
	cmp	r1, #0x2
	beq	.L18	@cond_branch
	b	.L3
.L4:
	mov	r5, #0x0
	ldr	r0, .L28
	ldrb	r3, [r0]
	ldr	r4, .L28+0x4
	ldr	r2, .L28+0x8
.L8:
	cmp	r5, r3
	beq	.L7	@cond_branch
	ldrb	r0, [r4]
	ldr	r1, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L7:
	add	r2, r2, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L8	@cond_branch
	b	.L3
.L29:
	.align	2, 0
.L28:
	.word	gActiveBank
	.word	gAbsentBankFlags
	.word	gBitTable
.L11:
	mov	r5, #0x0
.L15:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	add	r4, r0, #0
	ldr	r0, .L30
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L14	@cond_branch
	ldr	r0, .L30+0x4
	ldrb	r1, [r0]
	ldr	r2, .L30+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L14	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L14:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L15	@cond_branch
	b	.L3
.L31:
	.align	2, 0
.L30:
	.word	gBankAttacker
	.word	gAbsentBankFlags
	.word	gBitTable
.L18:
	mov	r5, #0x0
.L22:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankSide
	add	r4, r0, #0
	ldr	r0, .L32
	ldrb	r0, [r0]
	bl	GetBankSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L21	@cond_branch
	ldr	r0, .L32+0x4
	ldrb	r1, [r0]
	ldr	r2, .L32+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L21	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L21:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L22	@cond_branch
.L3:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L33:
	.align	2, 0
.L32:
	.word	gBankTarget
	.word	gAbsentBankFlags
	.word	gBitTable
.Lfe1:
	.size	 CountAliveMons,.Lfe1-CountAliveMons
	.align	2, 0
	.globl	sub_803C434
	.type	 sub_803C434,function
	.thumb_func
sub_803C434:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBankIdentity
	mov	r1, #0x1
	mov	r6, #0x1
	add	r4, r6, #0
	and	r4, r4, r0
	eor	r4, r4, r1
	add	r5, r4, #0
	ldr	r0, .L47
	ldrh	r1, [r0]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L35	@cond_branch
	add	r0, r4, #0
	b	.L44
.L48:
	.align	2, 0
.L47:
	.word	gBattleTypeFlags
.L35:
	mov	r0, #0x0
	bl	CountAliveMons
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L36	@cond_branch
	bl	Random
	add	r1, r6, #0
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L37	@cond_branch
	mov	r0, #0x2
	eor	r0, r0, r4
	b	.L44
.L37:
	add	r0, r4, #0
	b	.L44
.L36:
	ldr	r0, .L49
	ldrb	r1, [r0]
	ldr	r2, .L49+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L40	@cond_branch
	add	r0, r4, #0
	b	.L44
.L50:
	.align	2, 0
.L49:
	.word	gAbsentBankFlags
	.word	gBitTable
.L40:
	mov	r0, #0x2
	eor	r5, r5, r0
	add	r0, r5, #0
.L44:
	bl	GetBankByPlayerAI
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 sub_803C434,.Lfe2-sub_803C434
	.align	2, 0
	.globl	GetMonGender
	.type	 GetMonGender,function
	.thumb_func
GetMonGender:
	push	{lr}
	bl	GetBoxMonGender
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 GetMonGender,.Lfe3-GetMonGender
	.align	2, 0
	.globl	GetBoxMonGender
	.type	 GetBoxMonGender,function
	.thumb_func
GetBoxMonGender:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetBoxMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetBoxMonData
	add	r2, r0, #0
	ldr	r1, .L62
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	beq	.L61	@cond_branch
	cmp	r0, #0
	blt	.L53	@cond_branch
	cmp	r0, #0xff
	bgt	.L53	@cond_branch
	cmp	r0, #0xfe
	bge	.L61	@cond_branch
.L53:
	ldr	r1, .L62
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	mov	r0, #0xff
	and	r0, r0, r2
	cmp	r1, r0
	bhi	.L59	@cond_branch
	mov	r0, #0x0
	b	.L61
.L63:
	.align	2, 0
.L62:
	.word	gBaseStats
.L59:
	mov	r0, #0xfe
.L61:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 GetBoxMonGender,.Lfe4-GetBoxMonGender
	.align	2, 0
	.globl	GetGenderFromSpeciesAndPersonality
	.type	 GetGenderFromSpeciesAndPersonality,function
	.thumb_func
GetGenderFromSpeciesAndPersonality:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, .L74
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	beq	.L73	@cond_branch
	cmp	r0, #0
	blt	.L65	@cond_branch
	cmp	r0, #0xff
	bgt	.L65	@cond_branch
	cmp	r0, #0xfe
	bge	.L73	@cond_branch
.L65:
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	mov	r0, #0xff
	and	r0, r0, r3
	cmp	r1, r0
	bhi	.L71	@cond_branch
	mov	r0, #0x0
	b	.L73
.L75:
	.align	2, 0
.L74:
	.word	gBaseStats
.L71:
	mov	r0, #0xfe
.L73:
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetGenderFromSpeciesAndPersonality,.Lfe5-GetGenderFromSpeciesAndPersonality
	.align	2, 0
	.globl	GetMonSpriteTemplate_803C56C
	.type	 GetMonSpriteTemplate_803C56C,function
	.thumb_func
GetMonSpriteTemplate_803C56C:
	push	{r4, r5, r6, lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L77
	ldr	r4, .L77+0x4
	lsl	r2, r1, #0x1
	add	r2, r2, r1
	lsl	r2, r2, #0x3
	add	r1, r3, #0
	add	r2, r2, r4
	ldmia	r2!, {r4, r5, r6}
	stmia	r1!, {r4, r5, r6}
	ldmia	r2!, {r4, r5, r6}
	stmia	r1!, {r4, r5, r6}
	strh	r0, [r3, #0x2]
	ldr	r0, .L77+0x8
	str	r0, [r3, #0x8]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	gUnknown_02024E8C
	.word	gSpriteTemplate_8208288
	.word	gSpriteAnimTable_81E7C64
.Lfe6:
	.size	 GetMonSpriteTemplate_803C56C,.Lfe6-GetMonSpriteTemplate_803C56C
	.align	2, 0
	.globl	GetMonSpriteTemplate_803C5A0
	.type	 GetMonSpriteTemplate_803C5A0,function
	.thumb_func
GetMonSpriteTemplate_803C5A0:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldr	r5, .L84
	ldr	r2, .L84+0x4
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r1, r5, #0
	add	r0, r0, r2
	ldmia	r0!, {r2, r6, r7}
	stmia	r1!, {r2, r6, r7}
	ldmia	r0!, {r2, r6, r7}
	stmia	r1!, {r2, r6, r7}
	strh	r4, [r5, #0x2]
	cmp	r3, #0
	beq	.L81	@cond_branch
	cmp	r3, #0x2
	bne	.L80	@cond_branch
.L81:
	ldr	r0, .L84+0x8
	b	.L83
.L85:
	.align	2, 0
.L84:
	.word	gUnknown_02024E8C
	.word	gSpriteTemplate_8208288
	.word	gUnknown_081ECACC
.L80:
	ldr	r0, .L86
.L83:
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r5, #0x8]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L87:
	.align	2, 0
.L86:
	.word	gUnknown_081EC2A4
.Lfe7:
	.size	 GetMonSpriteTemplate_803C5A0,.Lfe7-GetMonSpriteTemplate_803C5A0
	.align	2, 0
	.globl	EncryptBoxMon
	.type	 EncryptBoxMon,function
	.thumb_func
EncryptBoxMon:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r4, #0x0
	add	r2, r3, #0
	add	r2, r2, #0x20
.L92:
	ldr	r0, [r2]
	ldr	r1, [r3]
	eor	r0, r0, r1
	str	r0, [r2]
	ldr	r1, [r3, #0x4]
	eor	r0, r0, r1
	stmia	r2!, {r0}
	add	r4, r4, #0x1
	cmp	r4, #0xb
	bls	.L92	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 EncryptBoxMon,.Lfe8-EncryptBoxMon
	.align	2, 0
	.globl	DecryptBoxMon
	.type	 DecryptBoxMon,function
	.thumb_func
DecryptBoxMon:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r4, #0x0
	add	r2, r3, #0
	add	r2, r2, #0x20
.L98:
	ldr	r0, [r2]
	ldr	r1, [r3, #0x4]
	eor	r0, r0, r1
	str	r0, [r2]
	ldr	r1, [r3]
	eor	r0, r0, r1
	stmia	r2!, {r0}
	add	r4, r4, #0x1
	cmp	r4, #0xb
	bls	.L98	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 DecryptBoxMon,.Lfe9-DecryptBoxMon
	.align	2, 0
	.globl	GetSubstruct
	.type	 GetSubstruct,function
	.thumb_func
GetSubstruct:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffb4
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r5, #0x0
	add	r0, r0, #0x20
	str	r0, [sp, #0x4]
	str	r0, [sp]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0x14]
	str	r0, [sp, #0x10]
	str	r0, [sp, #0x1c]
	str	r0, [sp, #0x18]
	str	r0, [sp, #0x24]
	str	r0, [sp, #0x20]
	str	r0, [sp, #0x2c]
	str	r0, [sp, #0x28]
	mov	sl, r0
	str	r0, [sp, #0x30]
	mov	r8, sl
	str	r0, [sp, #0x34]
	mov	r3, r8
	str	r3, [sp, #0x38]
	add	r7, r3, #0
	str	r7, [sp, #0x3c]
	add	r6, r7, #0
	str	r6, [sp, #0x40]
	add	r2, r6, #0
	mov	r9, r2
	add	r0, r1, #0
	mov	r1, #0x18
	str	r2, [sp, #0x44]
	str	r3, [sp, #0x48]
	bl	__umodsi3
	ldr	r2, [sp, #0x44]
	ldr	r3, [sp, #0x48]
	cmp	r0, #0x17
	bls	.LCB631
	b	.L101	@long jump
.LCB631:
	lsl	r0, r0, #0x2
	ldr	r1, .L320
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L321:
	.align	2, 0
.L320:
	.word	.L318
	.align	2, 0
	.align	2, 0
.L318:
	.word	.L102
	.word	.L111
	.word	.L120
	.word	.L129
	.word	.L138
	.word	.L147
	.word	.L156
	.word	.L165
	.word	.L174
	.word	.L183
	.word	.L192
	.word	.L201
	.word	.L210
	.word	.L219
	.word	.L228
	.word	.L237
	.word	.L246
	.word	.L255
	.word	.L264
	.word	.L273
	.word	.L282
	.word	.L291
	.word	.L300
	.word	.L309
.L102:
	cmp	r4, #0x1
	beq	.L105	@cond_branch
	cmp	r4, #0x1
	bgt	.L110	@cond_branch
	cmp	r4, #0
	beq	.L104	@cond_branch
	b	.L101
.L110:
	cmp	r4, #0x2
	beq	.L106	@cond_branch
	cmp	r4, #0x3
	beq	.L107	@cond_branch
	b	.L101
.L104:
	ldr	r5, [sp]
	b	.L101
.L105:
	ldr	r5, [sp]
	add	r5, r5, #0xc
	b	.L101
.L106:
	ldr	r5, [sp]
	add	r5, r5, #0x18
	b	.L101
.L107:
	ldr	r5, [sp]
	add	r5, r5, #0x24
	b	.L101
.L111:
	cmp	r4, #0x1
	beq	.L114	@cond_branch
	cmp	r4, #0x1
	bgt	.L119	@cond_branch
	cmp	r4, #0
	beq	.L113	@cond_branch
	b	.L101
.L119:
	cmp	r4, #0x2
	beq	.L115	@cond_branch
	cmp	r4, #0x3
	beq	.L116	@cond_branch
	b	.L101
.L113:
	ldr	r5, [sp, #0x4]
	b	.L101
.L114:
	ldr	r5, [sp, #0x4]
	add	r5, r5, #0xc
	b	.L101
.L115:
	ldr	r5, [sp, #0x4]
	add	r5, r5, #0x24
	b	.L101
.L116:
	ldr	r5, [sp, #0x4]
	add	r5, r5, #0x18
	b	.L101
.L120:
	cmp	r4, #0x1
	beq	.L123	@cond_branch
	cmp	r4, #0x1
	bgt	.L128	@cond_branch
	cmp	r4, #0
	beq	.L122	@cond_branch
	b	.L101
.L128:
	cmp	r4, #0x2
	beq	.L124	@cond_branch
	cmp	r4, #0x3
	beq	.L125	@cond_branch
	b	.L101
.L122:
	ldr	r5, [sp, #0x8]
	b	.L101
.L123:
	ldr	r5, [sp, #0x8]
	add	r5, r5, #0x18
	b	.L101
.L124:
	ldr	r5, [sp, #0x8]
	add	r5, r5, #0xc
	b	.L101
.L125:
	ldr	r5, [sp, #0x8]
	add	r5, r5, #0x24
	b	.L101
.L129:
	cmp	r4, #0x1
	beq	.L132	@cond_branch
	cmp	r4, #0x1
	bgt	.L137	@cond_branch
	cmp	r4, #0
	beq	.L131	@cond_branch
	b	.L101
.L137:
	cmp	r4, #0x2
	beq	.L133	@cond_branch
	cmp	r4, #0x3
	beq	.L134	@cond_branch
	b	.L101
.L131:
	ldr	r5, [sp, #0xc]
	b	.L101
.L132:
	ldr	r5, [sp, #0xc]
	add	r5, r5, #0x24
	b	.L101
.L133:
	ldr	r5, [sp, #0xc]
	add	r5, r5, #0xc
	b	.L101
.L134:
	ldr	r5, [sp, #0xc]
	add	r5, r5, #0x18
	b	.L101
.L138:
	cmp	r4, #0x1
	beq	.L141	@cond_branch
	cmp	r4, #0x1
	bgt	.L146	@cond_branch
	cmp	r4, #0
	beq	.L140	@cond_branch
	b	.L101
.L146:
	cmp	r4, #0x2
	beq	.L142	@cond_branch
	cmp	r4, #0x3
	beq	.L143	@cond_branch
	b	.L101
.L140:
	ldr	r5, [sp, #0x10]
	b	.L101
.L141:
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x18
	b	.L101
.L142:
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0x24
	b	.L101
.L143:
	ldr	r5, [sp, #0x10]
	add	r5, r5, #0xc
	b	.L101
.L147:
	cmp	r4, #0x1
	beq	.L150	@cond_branch
	cmp	r4, #0x1
	bgt	.L155	@cond_branch
	cmp	r4, #0
	beq	.L149	@cond_branch
	b	.L101
.L155:
	cmp	r4, #0x2
	beq	.L151	@cond_branch
	cmp	r4, #0x3
	beq	.L152	@cond_branch
	b	.L101
.L149:
	ldr	r5, [sp, #0x14]
	b	.L101
.L150:
	ldr	r5, [sp, #0x14]
	add	r5, r5, #0x24
	b	.L101
.L151:
	ldr	r5, [sp, #0x14]
	add	r5, r5, #0x18
	b	.L101
.L152:
	ldr	r5, [sp, #0x14]
	add	r5, r5, #0xc
	b	.L101
.L156:
	cmp	r4, #0x1
	beq	.L159	@cond_branch
	cmp	r4, #0x1
	bgt	.L164	@cond_branch
	cmp	r4, #0
	beq	.L158	@cond_branch
	b	.L101
.L164:
	cmp	r4, #0x2
	beq	.L160	@cond_branch
	cmp	r4, #0x3
	beq	.L161	@cond_branch
	b	.L101
.L158:
	ldr	r5, [sp, #0x18]
	add	r5, r5, #0xc
	b	.L101
.L159:
	ldr	r5, [sp, #0x18]
	b	.L101
.L160:
	ldr	r5, [sp, #0x18]
	add	r5, r5, #0x18
	b	.L101
.L161:
	ldr	r5, [sp, #0x18]
	add	r5, r5, #0x24
	b	.L101
.L165:
	cmp	r4, #0x1
	beq	.L168	@cond_branch
	cmp	r4, #0x1
	bgt	.L173	@cond_branch
	cmp	r4, #0
	beq	.L167	@cond_branch
	b	.L101
.L173:
	cmp	r4, #0x2
	beq	.L169	@cond_branch
	cmp	r4, #0x3
	beq	.L170	@cond_branch
	b	.L101
.L167:
	ldr	r5, [sp, #0x1c]
	add	r5, r5, #0xc
	b	.L101
.L168:
	ldr	r5, [sp, #0x1c]
	b	.L101
.L169:
	ldr	r5, [sp, #0x1c]
	add	r5, r5, #0x24
	b	.L101
.L170:
	ldr	r5, [sp, #0x1c]
	add	r5, r5, #0x18
	b	.L101
.L174:
	cmp	r4, #0x1
	beq	.L177	@cond_branch
	cmp	r4, #0x1
	bgt	.L182	@cond_branch
	cmp	r4, #0
	beq	.L176	@cond_branch
	b	.L101
.L182:
	cmp	r4, #0x2
	beq	.L178	@cond_branch
	cmp	r4, #0x3
	beq	.L179	@cond_branch
	b	.L101
.L176:
	ldr	r5, [sp, #0x20]
	add	r5, r5, #0x18
	b	.L101
.L177:
	ldr	r5, [sp, #0x20]
	b	.L101
.L178:
	ldr	r5, [sp, #0x20]
	add	r5, r5, #0xc
	b	.L101
.L179:
	ldr	r5, [sp, #0x20]
	add	r5, r5, #0x24
	b	.L101
.L183:
	cmp	r4, #0x1
	beq	.L186	@cond_branch
	cmp	r4, #0x1
	bgt	.L191	@cond_branch
	cmp	r4, #0
	beq	.L185	@cond_branch
	b	.L101
.L191:
	cmp	r4, #0x2
	beq	.L187	@cond_branch
	cmp	r4, #0x3
	beq	.L188	@cond_branch
	b	.L101
.L185:
	ldr	r5, [sp, #0x24]
	add	r5, r5, #0x24
	b	.L101
.L186:
	ldr	r5, [sp, #0x24]
	b	.L101
.L187:
	ldr	r5, [sp, #0x24]
	add	r5, r5, #0xc
	b	.L101
.L188:
	ldr	r5, [sp, #0x24]
	add	r5, r5, #0x18
	b	.L101
.L192:
	cmp	r4, #0x1
	beq	.L195	@cond_branch
	cmp	r4, #0x1
	bgt	.L200	@cond_branch
	cmp	r4, #0
	beq	.L194	@cond_branch
	b	.L101
.L200:
	cmp	r4, #0x2
	beq	.L196	@cond_branch
	cmp	r4, #0x3
	beq	.L197	@cond_branch
	b	.L101
.L194:
	ldr	r5, [sp, #0x28]
	add	r5, r5, #0x18
	b	.L101
.L195:
	ldr	r5, [sp, #0x28]
	b	.L101
.L196:
	ldr	r5, [sp, #0x28]
	add	r5, r5, #0x24
	b	.L101
.L197:
	ldr	r5, [sp, #0x28]
	add	r5, r5, #0xc
	b	.L101
.L201:
	cmp	r4, #0x1
	beq	.L204	@cond_branch
	cmp	r4, #0x1
	bgt	.L209	@cond_branch
	cmp	r4, #0
	beq	.L203	@cond_branch
	b	.L101
.L209:
	cmp	r4, #0x2
	beq	.L205	@cond_branch
	cmp	r4, #0x3
	beq	.L206	@cond_branch
	b	.L101
.L203:
	ldr	r5, [sp, #0x2c]
	add	r5, r5, #0x24
	b	.L101
.L204:
	ldr	r5, [sp, #0x2c]
	b	.L101
.L205:
	ldr	r5, [sp, #0x2c]
	add	r5, r5, #0x18
	b	.L101
.L206:
	ldr	r5, [sp, #0x2c]
	add	r5, r5, #0xc
	b	.L101
.L210:
	cmp	r4, #0x1
	beq	.L213	@cond_branch
	cmp	r4, #0x1
	bgt	.L218	@cond_branch
	cmp	r4, #0
	beq	.L212	@cond_branch
	b	.L101
.L218:
	cmp	r4, #0x2
	beq	.L214	@cond_branch
	cmp	r4, #0x3
	beq	.L215	@cond_branch
	b	.L101
.L212:
	ldr	r5, [sp, #0x30]
	add	r5, r5, #0xc
	b	.L101
.L213:
	ldr	r5, [sp, #0x30]
	add	r5, r5, #0x18
	b	.L101
.L214:
	ldr	r5, [sp, #0x30]
	b	.L101
.L215:
	ldr	r5, [sp, #0x30]
	add	r5, r5, #0x24
	b	.L101
.L219:
	cmp	r4, #0x1
	beq	.L222	@cond_branch
	cmp	r4, #0x1
	bgt	.L227	@cond_branch
	cmp	r4, #0
	beq	.L221	@cond_branch
	b	.L101
.L227:
	cmp	r4, #0x2
	beq	.L223	@cond_branch
	cmp	r4, #0x3
	beq	.L224	@cond_branch
	b	.L101
.L221:
	mov	r5, sl
	add	r5, r5, #0xc
	b	.L101
.L222:
	mov	r5, sl
	add	r5, r5, #0x24
	b	.L101
.L223:
	mov	r5, sl
	b	.L101
.L224:
	mov	r5, sl
	add	r5, r5, #0x18
	b	.L101
.L228:
	cmp	r4, #0x1
	beq	.L231	@cond_branch
	cmp	r4, #0x1
	bgt	.L236	@cond_branch
	cmp	r4, #0
	beq	.L230	@cond_branch
	b	.L101
.L236:
	cmp	r4, #0x2
	beq	.L232	@cond_branch
	cmp	r4, #0x3
	beq	.L233	@cond_branch
	b	.L101
.L230:
	ldr	r5, [sp, #0x34]
	add	r5, r5, #0x18
	b	.L101
.L231:
	ldr	r5, [sp, #0x34]
	add	r5, r5, #0xc
	b	.L101
.L232:
	ldr	r5, [sp, #0x34]
	b	.L101
.L233:
	ldr	r5, [sp, #0x34]
	add	r5, r5, #0x24
	b	.L101
.L237:
	cmp	r4, #0x1
	beq	.L240	@cond_branch
	cmp	r4, #0x1
	bgt	.L245	@cond_branch
	cmp	r4, #0
	beq	.L239	@cond_branch
	b	.L101
.L245:
	cmp	r4, #0x2
	beq	.L241	@cond_branch
	cmp	r4, #0x3
	beq	.L242	@cond_branch
	b	.L101
.L239:
	mov	r5, r8
	add	r5, r5, #0x24
	b	.L101
.L240:
	mov	r5, r8
	add	r5, r5, #0xc
	b	.L101
.L241:
	mov	r5, r8
	b	.L101
.L242:
	mov	r5, r8
	add	r5, r5, #0x18
	b	.L101
.L246:
	cmp	r4, #0x1
	beq	.L249	@cond_branch
	cmp	r4, #0x1
	bgt	.L254	@cond_branch
	cmp	r4, #0
	beq	.L248	@cond_branch
	b	.L101
.L254:
	cmp	r4, #0x2
	beq	.L250	@cond_branch
	cmp	r4, #0x3
	beq	.L251	@cond_branch
	b	.L101
.L248:
	ldr	r5, [sp, #0x38]
	add	r5, r5, #0x18
	b	.L101
.L249:
	ldr	r5, [sp, #0x38]
	add	r5, r5, #0x24
	b	.L101
.L250:
	ldr	r5, [sp, #0x38]
	b	.L101
.L251:
	ldr	r5, [sp, #0x38]
	add	r5, r5, #0xc
	b	.L101
.L255:
	cmp	r4, #0x1
	beq	.L258	@cond_branch
	cmp	r4, #0x1
	bgt	.L263	@cond_branch
	cmp	r4, #0
	beq	.L257	@cond_branch
	b	.L101
.L263:
	cmp	r4, #0x2
	beq	.L259	@cond_branch
	cmp	r4, #0x3
	beq	.L260	@cond_branch
	b	.L101
.L257:
	add	r5, r3, #0
	add	r5, r5, #0x24
	b	.L101
.L258:
	add	r5, r3, #0
	add	r5, r5, #0x18
	b	.L101
.L259:
	add	r5, r3, #0
	b	.L101
.L260:
	add	r5, r3, #0
	add	r5, r5, #0xc
	b	.L101
.L264:
	cmp	r4, #0x1
	beq	.L267	@cond_branch
	cmp	r4, #0x1
	bgt	.L272	@cond_branch
	cmp	r4, #0
	beq	.L266	@cond_branch
	b	.L101
.L272:
	cmp	r4, #0x2
	beq	.L268	@cond_branch
	cmp	r4, #0x3
	beq	.L269	@cond_branch
	b	.L101
.L266:
	ldr	r5, [sp, #0x3c]
	add	r5, r5, #0xc
	b	.L101
.L267:
	ldr	r5, [sp, #0x3c]
	add	r5, r5, #0x18
	b	.L101
.L268:
	ldr	r5, [sp, #0x3c]
	add	r5, r5, #0x24
	b	.L101
.L269:
	ldr	r5, [sp, #0x3c]
	b	.L101
.L273:
	cmp	r4, #0x1
	beq	.L276	@cond_branch
	cmp	r4, #0x1
	bgt	.L281	@cond_branch
	cmp	r4, #0
	beq	.L275	@cond_branch
	b	.L101
.L281:
	cmp	r4, #0x2
	beq	.L277	@cond_branch
	cmp	r4, #0x3
	beq	.L278	@cond_branch
	b	.L101
.L275:
	add	r5, r7, #0
	add	r5, r5, #0xc
	b	.L101
.L276:
	add	r5, r7, #0
	add	r5, r5, #0x24
	b	.L101
.L277:
	add	r5, r7, #0
	add	r5, r5, #0x18
	b	.L101
.L278:
	add	r5, r7, #0
	b	.L101
.L282:
	cmp	r4, #0x1
	beq	.L285	@cond_branch
	cmp	r4, #0x1
	bgt	.L290	@cond_branch
	cmp	r4, #0
	beq	.L284	@cond_branch
	b	.L101
.L290:
	cmp	r4, #0x2
	beq	.L286	@cond_branch
	cmp	r4, #0x3
	beq	.L287	@cond_branch
	b	.L101
.L284:
	ldr	r5, [sp, #0x40]
	add	r5, r5, #0x18
	b	.L101
.L285:
	ldr	r5, [sp, #0x40]
	add	r5, r5, #0xc
	b	.L101
.L286:
	ldr	r5, [sp, #0x40]
	add	r5, r5, #0x24
	b	.L101
.L287:
	ldr	r5, [sp, #0x40]
	b	.L101
.L291:
	cmp	r4, #0x1
	beq	.L294	@cond_branch
	cmp	r4, #0x1
	bgt	.L299	@cond_branch
	cmp	r4, #0
	beq	.L293	@cond_branch
	b	.L101
.L299:
	cmp	r4, #0x2
	beq	.L295	@cond_branch
	cmp	r4, #0x3
	beq	.L296	@cond_branch
	b	.L101
.L293:
	add	r5, r6, #0
	add	r5, r5, #0x24
	b	.L101
.L294:
	add	r5, r6, #0
	add	r5, r5, #0xc
	b	.L101
.L295:
	add	r5, r6, #0
	add	r5, r5, #0x18
	b	.L101
.L296:
	add	r5, r6, #0
	b	.L101
.L300:
	cmp	r4, #0x1
	beq	.L303	@cond_branch
	cmp	r4, #0x1
	bgt	.L308	@cond_branch
	cmp	r4, #0
	beq	.L302	@cond_branch
	b	.L101
.L308:
	cmp	r4, #0x2
	beq	.L304	@cond_branch
	cmp	r4, #0x3
	beq	.L305	@cond_branch
	b	.L101
.L302:
	mov	r5, r9
	add	r5, r5, #0x18
	b	.L101
.L303:
	mov	r5, r9
	add	r5, r5, #0x24
	b	.L101
.L304:
	mov	r5, r9
	add	r5, r5, #0xc
	b	.L101
.L305:
	mov	r5, r9
	b	.L101
.L309:
	cmp	r4, #0x1
	beq	.L312	@cond_branch
	cmp	r4, #0x1
	bgt	.L317	@cond_branch
	cmp	r4, #0
	beq	.L311	@cond_branch
	b	.L101
.L317:
	cmp	r4, #0x2
	beq	.L313	@cond_branch
	cmp	r4, #0x3
	beq	.L314	@cond_branch
	b	.L101
.L311:
	add	r5, r2, #0
	add	r5, r5, #0x24
	b	.L101
.L312:
	add	r5, r2, #0
	add	r5, r5, #0x18
	b	.L101
.L313:
	add	r5, r2, #0
	add	r5, r5, #0xc
	b	.L101
.L314:
	add	r5, r2, #0
.L101:
	add	r0, r5, #0
	add	sp, sp, #0x4c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 GetSubstruct,.Lfe10-GetSubstruct
	.align	2, 0
	.globl	GetMonData
	.type	 GetMonData,function
	.thumb_func
GetMonData:
	push	{lr}
	add	r3, r0, #0
	add	r0, r1, #0
	sub	r0, r0, #0x37
	cmp	r0, #0x9
	bhi	.L334	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L338
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L339:
	.align	2, 0
.L338:
	.word	.L335
	.align	2, 0
	.align	2, 0
.L335:
	.word	.L324
	.word	.L325
	.word	.L326
	.word	.L327
	.word	.L328
	.word	.L329
	.word	.L330
	.word	.L331
	.word	.L332
	.word	.L333
.L324:
	ldr	r0, [r3, #0x50]
	b	.L337
.L325:
	add	r0, r3, #0
	add	r0, r0, #0x54
	ldrb	r0, [r0]
	b	.L337
.L326:
	add	r0, r3, #0
	add	r0, r0, #0x56
	ldrh	r0, [r0]
	b	.L337
.L327:
	add	r0, r3, #0
	add	r0, r0, #0x58
	ldrh	r0, [r0]
	b	.L337
.L328:
	add	r0, r3, #0
	add	r0, r0, #0x5a
	ldrh	r0, [r0]
	b	.L337
.L329:
	add	r0, r3, #0
	add	r0, r0, #0x5c
	ldrh	r0, [r0]
	b	.L337
.L330:
	add	r0, r3, #0
	add	r0, r0, #0x5e
	ldrh	r0, [r0]
	b	.L337
.L331:
	add	r0, r3, #0
	add	r0, r0, #0x60
	ldrh	r0, [r0]
	b	.L337
.L332:
	add	r0, r3, #0
	add	r0, r0, #0x62
	ldrh	r0, [r0]
	b	.L337
.L333:
	add	r0, r3, #0
	add	r0, r0, #0x55
	ldrb	r0, [r0]
	b	.L337
.L334:
	add	r0, r3, #0
	bl	GetBoxMonData
.L337:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 GetMonData,.Lfe11-GetMonData
	.align	2, 0
	.globl	GetBoxMonData
	.type	 GetBoxMonData,function
	.thumb_func
GetBoxMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r8, r0
	str	r1, [sp]
	add	r7, r2, #0
	mov	r4, #0x0
	mov	r9, r4
	mov	sl, r4
	mov	r6, #0x0
	mov	r5, #0x0
	cmp	r1, #0xa
	ble	.L341	@cond_branch
	ldr	r1, [r0]
	mov	r2, #0x0
	bl	GetSubstruct
	mov	r9, r0
	mov	r0, r8
	ldr	r1, [r0]
	mov	r2, #0x1
	bl	GetSubstruct
	mov	sl, r0
	mov	r2, r8
	ldr	r1, [r2]
	mov	r0, r8
	mov	r2, #0x2
	bl	GetSubstruct
	add	r6, r0, #0
	mov	r0, r8
	ldr	r1, [r0]
	mov	r2, #0x3
	bl	GetSubstruct
	add	r5, r0, #0
	mov	r0, r8
	bl	DecryptBoxMon
	mov	r0, r8
	bl	CalculateBoxMonChecksum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, r8
	ldrh	r1, [r1, #0x1c]
	cmp	r0, r1
	beq	.L341	@cond_branch
	mov	r2, r8
	ldrb	r0, [r2, #0x13]
	mov	r1, #0x1
	orr	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x13]
	ldrb	r0, [r5, #0x7]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r5, #0x7]
.L341:
	ldr	r0, [sp]
	cmp	r0, #0x52
	bls	.LCB1742
	b	.L343	@long jump
.LCB1742:
	lsl	r0, r0, #0x2
	ldr	r1, .L452
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L453:
	.align	2, 0
.L452:
	.word	.L445
	.align	2, 0
	.align	2, 0
.L445:
	.word	.L344
	.word	.L345
	.word	.L346
	.word	.L356
	.word	.L357
	.word	.L358
	.word	.L359
	.word	.L360
	.word	.L366
	.word	.L367
	.word	.L368
	.word	.L369
	.word	.L372
	.word	.L379
	.word	.L379
	.word	.L379
	.word	.L379
	.word	.L383
	.word	.L383
	.word	.L383
	.word	.L383
	.word	.L374
	.word	.L390
	.word	.L391
	.word	.L392
	.word	.L373
	.word	.L384
	.word	.L385
	.word	.L386
	.word	.L387
	.word	.L388
	.word	.L389
	.word	.L375
	.word	.L393
	.word	.L396
	.word	.L397
	.word	.L398
	.word	.L399
	.word	.L400
	.word	.L402
	.word	.L403
	.word	.L404
	.word	.L405
	.word	.L406
	.word	.L407
	.word	.L408
	.word	.L409
	.word	.L394
	.word	.L395
	.word	.L401
	.word	.L410
	.word	.L411
	.word	.L412
	.word	.L413
	.word	.L414
	.word	.L343
	.word	.L343
	.word	.L343
	.word	.L343
	.word	.L343
	.word	.L343
	.word	.L343
	.word	.L343
	.word	.L343
	.word	.L343
	.word	.L428
	.word	.L431
	.word	.L415
	.word	.L416
	.word	.L417
	.word	.L418
	.word	.L419
	.word	.L420
	.word	.L421
	.word	.L422
	.word	.L423
	.word	.L424
	.word	.L425
	.word	.L426
	.word	.L427
	.word	.L432
	.word	.L440
	.word	.L442
.L344:
	mov	r1, r8
	ldr	r4, [r1]
	b	.L343
.L345:
	mov	r2, r8
	ldr	r4, [r2, #0x4]
	b	.L343
.L346:
	mov	r0, r8
	ldrb	r1, [r0, #0x13]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L347	@cond_branch
	ldr	r1, .L454
	add	r0, r7, #0
	bl	StringCopy
	b	.L447
.L455:
	.align	2, 0
.L454:
	.word	gBadEggNickname
.L347:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L349	@cond_branch
	ldr	r1, .L456
	add	r0, r7, #0
	bl	StringCopy
	b	.L447
.L457:
	.align	2, 0
.L456:
	.word	gEggNickname
.L349:
	mov	r4, #0x0
	mov	r1, r8
	add	r1, r1, #0x8
	mov	r2, r8
	ldrb	r0, [r2, #0x8]
	ldrb	r3, [r2, #0x12]
	cmp	r0, #0xff
	beq	.L352	@cond_branch
	add	r2, r1, #0
.L353:
	add	r1, r7, r4
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x9
	bhi	.L352	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L353	@cond_branch
.L352:
	add	r1, r7, r4
	mov	r0, #0xff
	strb	r0, [r1]
	add	r0, r7, #0
	add	r1, r3, #0
	bl	ConvertInternationalString
.L447:
	add	r0, r7, #0
	bl	StringLength
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L343
.L356:
	mov	r7, r8
	ldrb	r4, [r7, #0x12]
	b	.L343
.L357:
	mov	r1, r8
	ldrb	r0, [r1, #0x13]
	b	.L448
.L358:
	mov	r2, r8
	ldrb	r0, [r2, #0x13]
	b	.L449
.L359:
	mov	r7, r8
	ldrb	r0, [r7, #0x13]
	b	.L450
.L360:
	mov	r4, #0x0
	mov	r1, r8
	add	r1, r1, #0x14
	mov	r2, r8
	ldrb	r0, [r2, #0x14]
	cmp	r0, #0xff
	beq	.L362	@cond_branch
	add	r2, r1, #0
.L363:
	add	r1, r7, r4
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x6
	bhi	.L362	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L363	@cond_branch
.L362:
	add	r1, r7, r4
	mov	r0, #0xff
	strb	r0, [r1]
	b	.L343
.L366:
	mov	r7, r8
	ldrb	r4, [r7, #0x1b]
	b	.L343
.L367:
	mov	r0, r8
	ldrh	r4, [r0, #0x1c]
	b	.L343
.L368:
	mov	r1, r8
	ldrh	r4, [r1, #0x1e]
	b	.L343
.L369:
	mov	r2, r8
	ldrb	r1, [r2, #0x13]
	mov	r0, #0x1
	and	r0, r0, r1
	mov	r4, #0xce
	lsl	r4, r4, #0x1
	cmp	r0, #0
	beq	.LCB1957
	b	.L343	@long jump
.LCB1957:
	mov	r7, r9
	ldrh	r4, [r7]
	b	.L343
.L372:
	mov	r0, r9
	ldrh	r4, [r0, #0x2]
	b	.L343
.L373:
	mov	r1, r9
	ldr	r4, [r1, #0x4]
	b	.L343
.L374:
	mov	r2, r9
	ldrb	r4, [r2, #0x8]
	b	.L343
.L375:
	mov	r7, r9
	ldrb	r4, [r7, #0x9]
	b	.L343
.L379:
	ldr	r0, [sp]
	sub	r0, r0, #0xd
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r4, [r0]
	b	.L343
.L383:
	ldr	r0, [sp]
	add	r0, r0, sl
	sub	r0, r0, #0x9
	ldrb	r4, [r0]
	b	.L343
.L384:
	ldrb	r4, [r6]
	b	.L343
.L385:
	ldrb	r4, [r6, #0x1]
	b	.L343
.L386:
	ldrb	r4, [r6, #0x2]
	b	.L343
.L387:
	ldrb	r4, [r6, #0x3]
	b	.L343
.L388:
	ldrb	r4, [r6, #0x4]
	b	.L343
.L389:
	ldrb	r4, [r6, #0x5]
	b	.L343
.L390:
	ldrb	r4, [r6, #0x6]
	b	.L343
.L391:
	ldrb	r4, [r6, #0x7]
	b	.L343
.L392:
	ldrb	r4, [r6, #0x8]
	b	.L343
.L393:
	ldrb	r4, [r6, #0x9]
	b	.L343
.L394:
	ldrb	r4, [r6, #0xa]
	b	.L343
.L395:
	ldrb	r4, [r6, #0xb]
	b	.L343
.L396:
	ldrb	r4, [r5]
	b	.L343
.L397:
	ldrb	r4, [r5, #0x1]
	b	.L343
.L398:
	ldrb	r0, [r5, #0x2]
	lsl	r0, r0, #0x19
	lsr	r4, r0, #0x19
	b	.L343
.L399:
	ldrh	r0, [r5, #0x2]
	lsl	r0, r0, #0x15
	lsr	r4, r0, #0x1c
	b	.L343
.L400:
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x19
	lsr	r4, r0, #0x1c
	b	.L343
.L401:
	ldrb	r0, [r5, #0x3]
	lsr	r4, r0, #0x7
	b	.L343
.L402:
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x1b
	lsr	r4, r0, #0x1b
	b	.L343
.L403:
	ldrh	r0, [r5, #0x4]
	lsl	r0, r0, #0x16
	lsr	r4, r0, #0x1b
	b	.L343
.L404:
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x19
	lsr	r4, r0, #0x1b
	b	.L343
.L405:
	ldr	r0, [r5, #0x4]
	lsl	r0, r0, #0xc
	lsr	r4, r0, #0x1b
	b	.L343
.L406:
	ldrh	r0, [r5, #0x6]
	lsl	r0, r0, #0x17
	lsr	r4, r0, #0x1b
	b	.L343
.L407:
	ldrb	r0, [r5, #0x7]
	lsl	r0, r0, #0x1a
	lsr	r4, r0, #0x1b
	b	.L343
.L408:
	ldrb	r0, [r5, #0x7]
	b	.L451
.L409:
	ldrb	r0, [r5, #0x7]
	lsr	r4, r0, #0x7
	b	.L343
.L410:
	ldrb	r0, [r5, #0x8]
	lsl	r0, r0, #0x1d
	lsr	r4, r0, #0x1d
	b	.L343
.L411:
	ldrb	r0, [r5, #0x8]
	lsl	r0, r0, #0x1a
	lsr	r4, r0, #0x1d
	b	.L343
.L412:
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x17
	lsr	r4, r0, #0x1d
	b	.L343
.L413:
	ldrb	r0, [r5, #0x9]
	lsl	r0, r0, #0x1c
	lsr	r4, r0, #0x1d
	b	.L343
.L414:
	ldrb	r0, [r5, #0x9]
	lsl	r0, r0, #0x19
	lsr	r4, r0, #0x1d
	b	.L343
.L415:
	ldrb	r0, [r5, #0x9]
	lsr	r4, r0, #0x7
	b	.L343
.L416:
	ldrb	r0, [r5, #0xa]
	b	.L448
.L417:
	ldrb	r0, [r5, #0xa]
	b	.L449
.L418:
	ldrb	r0, [r5, #0xa]
	b	.L450
.L419:
	ldrb	r0, [r5, #0xa]
	lsl	r0, r0, #0x1c
	lsr	r4, r0, #0x1f
	b	.L343
.L420:
	ldrb	r0, [r5, #0xa]
	lsl	r0, r0, #0x1b
	lsr	r4, r0, #0x1f
	b	.L343
.L421:
	ldrb	r0, [r5, #0xa]
	lsl	r0, r0, #0x1a
	lsr	r4, r0, #0x1f
	b	.L343
.L422:
	ldrb	r0, [r5, #0xa]
.L451:
	lsl	r0, r0, #0x19
	lsr	r4, r0, #0x1f
	b	.L343
.L423:
	ldrb	r0, [r5, #0xa]
	lsr	r4, r0, #0x7
	b	.L343
.L424:
	ldrb	r0, [r5, #0xb]
.L448:
	lsl	r0, r0, #0x1f
	lsr	r4, r0, #0x1f
	b	.L343
.L425:
	ldrb	r0, [r5, #0xb]
.L449:
	lsl	r0, r0, #0x1e
	lsr	r4, r0, #0x1f
	b	.L343
.L426:
	ldrb	r0, [r5, #0xb]
.L450:
	lsl	r0, r0, #0x1d
	lsr	r4, r0, #0x1f
	b	.L343
.L427:
	ldrb	r0, [r5, #0xb]
	lsr	r4, r0, #0x3
	b	.L343
.L428:
	mov	r0, r9
	ldrh	r4, [r0]
	cmp	r4, #0
	bne	.LCB2245
	b	.L343	@long jump
.LCB2245:
	ldrb	r0, [r5, #0x7]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L430	@cond_branch
	mov	r2, r8
	ldrb	r1, [r2, #0x13]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2258
	b	.L343	@long jump
.LCB2258:
.L430:
	mov	r4, #0xce
	lsl	r4, r4, #0x1
	b	.L343
.L431:
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x1b
	lsr	r4, r0, #0x1b
	ldrh	r1, [r5, #0x4]
	mov	r0, #0xf8
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	lsl	r0, r0, #0xa
	orr	r4, r4, r0
	ldr	r0, [r5, #0x4]
	mov	r1, #0xf8
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	orr	r4, r4, r0
	ldrh	r0, [r5, #0x6]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	lsl	r0, r0, #0x14
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x7]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	lsl	r0, r0, #0x19
	orr	r4, r4, r0
	b	.L343
.L432:
	mov	r1, r9
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.LCB2303
	b	.L343	@long jump
.LCB2303:
	ldrb	r0, [r5, #0x7]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.LCB2308
	b	.L343	@long jump
.LCB2308:
	ldrh	r0, [r7]
	ldr	r1, .L458
	cmp	r0, r1
	bne	.LCB2319
	b	.L343	@long jump
.LCB2319:
	mov	r2, sl
	ldrh	r5, [r2]
	add	r6, r1, #0
	add	r2, r7, #0
	ldr	r1, .L458+0x4
.L436:
	ldrh	r3, [r2]
	cmp	r5, r3
	beq	.L438	@cond_branch
	mov	r7, sl
	ldrh	r0, [r7, #0x2]
	cmp	r0, r3
	beq	.L438	@cond_branch
	ldrh	r0, [r7, #0x4]
	cmp	r0, r3
	beq	.L438	@cond_branch
	ldrh	r0, [r7, #0x6]
	cmp	r0, r3
	bne	.L437	@cond_branch
.L438:
	ldr	r0, [r1]
	orr	r4, r4, r0
.L437:
	add	r2, r2, #0x2
	add	r1, r1, #0x4
	ldrh	r0, [r2]
	cmp	r0, r6
	bne	.L436	@cond_branch
	b	.L343
.L459:
	.align	2, 0
.L458:
	.word	0x163
	.word	gBitTable
.L440:
	mov	r4, #0x0
	mov	r1, r9
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.LCB2384
	b	.L343	@long jump
.LCB2384:
	ldrb	r0, [r5, #0x7]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.LCB2389
	b	.L343	@long jump
.LCB2389:
	ldrb	r0, [r5, #0x8]
	lsl	r1, r0, #0x1d
	lsr	r4, r1, #0x1d
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1d
	add	r4, r4, r0
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1d
	add	r4, r4, r0
	ldrb	r1, [r5, #0x9]
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1d
	add	r4, r4, r0
	lsl	r0, r1, #0x19
	lsr	r0, r0, #0x1d
	add	r4, r4, r0
	lsr	r1, r1, #0x7
	add	r4, r4, r1
	ldrb	r1, [r5, #0xa]
	lsl	r0, r1, #0x1f
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsl	r0, r1, #0x1d
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsl	r0, r1, #0x1b
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsl	r0, r1, #0x19
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsr	r1, r1, #0x7
	add	r4, r4, r1
	ldrb	r1, [r5, #0xb]
	lsl	r0, r1, #0x1f
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1f
	add	r4, r4, r0
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	add	r4, r4, r1
	b	.L343
.L442:
	mov	r4, #0x0
	mov	r2, r9
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L343	@cond_branch
	ldrb	r0, [r5, #0x7]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L343	@cond_branch
	ldrb	r2, [r5, #0x9]
	lsr	r4, r2, #0x7
	ldrb	r1, [r5, #0x8]
	lsl	r0, r1, #0x1d
	lsr	r0, r0, #0x1c
	orr	r4, r4, r0
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1d
	lsl	r1, r1, #0x4
	orr	r4, r4, r1
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1d
	lsl	r0, r0, #0x7
	orr	r4, r4, r0
	lsl	r0, r2, #0x1c
	lsr	r0, r0, #0x1d
	lsl	r0, r0, #0xa
	orr	r4, r4, r0
	lsl	r2, r2, #0x19
	lsr	r2, r2, #0x1d
	lsl	r2, r2, #0xd
	orr	r4, r4, r2
	ldrb	r1, [r5, #0xa]
	lsl	r0, r1, #0x1f
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x11
	orr	r4, r4, r0
	lsl	r0, r1, #0x1d
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x12
	orr	r4, r4, r0
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x13
	orr	r4, r4, r0
	lsl	r0, r1, #0x1b
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x14
	orr	r4, r4, r0
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x15
	orr	r4, r4, r0
	lsl	r0, r1, #0x19
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x16
	orr	r4, r4, r0
	lsr	r1, r1, #0x7
	lsl	r1, r1, #0x17
	orr	r4, r4, r1
	ldrb	r1, [r5, #0xb]
	lsl	r0, r1, #0x1f
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1f
	lsl	r0, r0, #0x19
	orr	r4, r4, r0
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x1a
	orr	r4, r4, r1
.L343:
	ldr	r7, [sp]
	cmp	r7, #0xa
	ble	.L446	@cond_branch
	mov	r0, r8
	bl	EncryptBoxMon
.L446:
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 GetBoxMonData,.Lfe12-GetBoxMonData
	.align	2, 0
	.globl	SetMonData
	.type	 SetMonData,function
	.thumb_func
SetMonData:
	push	{lr}
	add	r3, r0, #0
	add	r0, r1, #0
	sub	r0, r0, #0x37
	cmp	r0, #0xa
	bhi	.L473	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L475
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L476:
	.align	2, 0
.L475:
	.word	.L474
	.align	2, 0
	.align	2, 0
.L474:
	.word	.L462
	.word	.L463
	.word	.L464
	.word	.L465
	.word	.L466
	.word	.L467
	.word	.L468
	.word	.L469
	.word	.L470
	.word	.L471
	.word	.L461
.L462:
	ldrb	r1, [r2]
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3, #0x50]
	b	.L461
.L463:
	ldrb	r1, [r2]
	add	r0, r3, #0
	add	r0, r0, #0x54
	strb	r1, [r0]
	b	.L461
.L464:
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x56
	strh	r0, [r1]
	b	.L461
.L465:
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x58
	strh	r0, [r1]
	b	.L461
.L466:
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x5a
	strh	r0, [r1]
	b	.L461
.L467:
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x5c
	strh	r0, [r1]
	b	.L461
.L468:
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x5e
	strh	r0, [r1]
	b	.L461
.L469:
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x60
	strh	r0, [r1]
	b	.L461
.L470:
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x62
	strh	r0, [r1]
	b	.L461
.L471:
	ldrb	r1, [r2]
	add	r0, r3, #0
	add	r0, r0, #0x55
	strb	r1, [r0]
	b	.L461
.L473:
	add	r0, r3, #0
	bl	SetBoxMonData
.L461:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 SetMonData,.Lfe13-SetMonData
	.align	2, 0
	.globl	SetBoxMonData
	.type	 SetBoxMonData,function
	.thumb_func
SetBoxMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r7, r0, #0
	mov	sl, r1
	add	r4, r2, #0
	mov	r0, #0x0
	mov	r8, r0
	mov	r9, r0
	mov	r6, #0x0
	mov	r5, #0x0
	cmp	r1, #0xa
	ble	.L478	@cond_branch
	ldr	r1, [r7]
	add	r0, r7, #0
	mov	r2, #0x0
	bl	GetSubstruct
	mov	r8, r0
	ldr	r1, [r7]
	add	r0, r7, #0
	mov	r2, #0x1
	bl	GetSubstruct
	mov	r9, r0
	ldr	r1, [r7]
	add	r0, r7, #0
	mov	r2, #0x2
	bl	GetSubstruct
	add	r6, r0, #0
	ldr	r1, [r7]
	add	r0, r7, #0
	mov	r2, #0x3
	bl	GetSubstruct
	add	r5, r0, #0
	add	r0, r7, #0
	bl	DecryptBoxMon
	add	r0, r7, #0
	bl	CalculateBoxMonChecksum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r7, #0x1c]
	cmp	r0, r1
	beq	.L478	@cond_branch
	ldrb	r0, [r7, #0x13]
	mov	r1, #0x1
	orr	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r7, #0x13]
	ldrb	r0, [r5, #0x7]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r5, #0x7]
	add	r0, r7, #0
	bl	EncryptBoxMon
	b	.L477
.L478:
	mov	r0, sl
	cmp	r0, #0x4f
	bls	.LCB2762
	b	.L480	@long jump
.LCB2762:
	lsl	r0, r0, #0x2
	ldr	r1, .L574
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L575:
	.align	2, 0
.L574:
	.word	.L565
	.align	2, 0
	.align	2, 0
.L565:
	.word	.L481
	.word	.L482
	.word	.L483
	.word	.L489
	.word	.L490
	.word	.L491
	.word	.L492
	.word	.L493
	.word	.L499
	.word	.L500
	.word	.L501
	.word	.L502
	.word	.L505
	.word	.L512
	.word	.L512
	.word	.L512
	.word	.L512
	.word	.L516
	.word	.L516
	.word	.L516
	.word	.L516
	.word	.L507
	.word	.L523
	.word	.L524
	.word	.L525
	.word	.L506
	.word	.L517
	.word	.L518
	.word	.L519
	.word	.L520
	.word	.L521
	.word	.L522
	.word	.L508
	.word	.L526
	.word	.L529
	.word	.L530
	.word	.L531
	.word	.L532
	.word	.L533
	.word	.L535
	.word	.L536
	.word	.L537
	.word	.L538
	.word	.L539
	.word	.L540
	.word	.L541
	.word	.L544
	.word	.L527
	.word	.L528
	.word	.L534
	.word	.L545
	.word	.L546
	.word	.L547
	.word	.L548
	.word	.L549
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L480
	.word	.L563
	.word	.L550
	.word	.L551
	.word	.L552
	.word	.L553
	.word	.L554
	.word	.L555
	.word	.L556
	.word	.L557
	.word	.L558
	.word	.L559
	.word	.L560
	.word	.L561
	.word	.L562
.L481:
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r7]
	b	.L480
.L482:
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r7, #0x4]
	b	.L480
.L483:
	mov	r2, #0x0
	add	r3, r7, #0
	add	r3, r3, #0x8
.L487:
	add	r0, r3, r2
	add	r1, r4, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x9
	ble	.L487	@cond_branch
	b	.L480
.L489:
	ldrb	r0, [r4]
	strb	r0, [r7, #0x12]
	b	.L480
.L490:
	ldrb	r0, [r4]
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r2, [r7, #0x13]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	b	.L567
.L491:
	ldrb	r0, [r4]
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r7, #0x13]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	b	.L567
.L492:
	ldrb	r0, [r4]
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x13]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	b	.L567
.L493:
	mov	r2, #0x0
	add	r3, r7, #0
	add	r3, r3, #0x14
.L497:
	add	r0, r3, r2
	add	r1, r4, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L497	@cond_branch
	b	.L480
.L499:
	ldrb	r0, [r4]
	strb	r0, [r7, #0x1b]
	b	.L480
.L500:
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	strh	r1, [r7, #0x1c]
	b	.L480
.L501:
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	strh	r1, [r7, #0x1e]
	b	.L480
.L502:
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	mov	r0, r8
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	beq	.L503	@cond_branch
	ldrb	r0, [r7, #0x13]
	mov	r1, #0x2
	b	.L567
.L503:
	ldrb	r1, [r7, #0x13]
	mov	r0, #0x3
	neg	r0, r0
	b	.L568
.L505:
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	mov	r0, r8
	strh	r1, [r0, #0x2]
	b	.L480
.L506:
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	mov	r0, r8
	str	r1, [r0, #0x4]
	b	.L480
.L507:
	ldrb	r0, [r4]
	mov	r1, r8
	strb	r0, [r1, #0x8]
	b	.L480
.L508:
	ldrb	r0, [r4]
	mov	r1, r8
	strb	r0, [r1, #0x9]
	b	.L480
.L512:
	mov	r2, sl
	sub	r2, r2, #0xd
	lsl	r2, r2, #0x1
	add	r2, r2, r9
	ldrb	r1, [r4]
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	strh	r1, [r2]
	b	.L480
.L516:
	mov	r0, r9
	add	r0, r0, sl
	sub	r0, r0, #0x9
	ldrb	r1, [r4]
	strb	r1, [r0]
	b	.L480
.L517:
	ldrb	r0, [r4]
	strb	r0, [r6]
	b	.L480
.L518:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x1]
	b	.L480
.L519:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x2]
	b	.L480
.L520:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x3]
	b	.L480
.L521:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x4]
	b	.L480
.L522:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x5]
	b	.L480
.L523:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x6]
	b	.L480
.L524:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x7]
	b	.L480
.L525:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x8]
	b	.L480
.L526:
	ldrb	r0, [r4]
	strb	r0, [r6, #0x9]
	b	.L480
.L527:
	ldrb	r0, [r4]
	strb	r0, [r6, #0xa]
	b	.L480
.L528:
	ldrb	r0, [r4]
	strb	r0, [r6, #0xb]
	b	.L480
.L529:
	ldrb	r0, [r4]
	strb	r0, [r5]
	b	.L480
.L530:
	ldrb	r0, [r4]
	strb	r0, [r5, #0x1]
	b	.L480
.L531:
	ldrb	r1, [r4]
	mov	r0, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r5, #0x2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x2]
	b	.L480
.L532:
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrh	r2, [r5, #0x2]
	ldr	r0, .L576
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x2]
	b	.L480
.L577:
	.align	2, 0
.L576:
	.word	0xfffff87f
.L533:
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r5, #0x3]
	mov	r0, #0x79
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	b	.L480
.L534:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x7
	ldrb	r2, [r5, #0x3]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
	b	.L480
.L535:
	ldrb	r1, [r4]
	mov	r0, #0x1f
	and	r1, r1, r0
	ldrb	r2, [r5, #0x4]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x4]
	b	.L480
.L536:
	ldrb	r1, [r4]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L578
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	b	.L480
.L579:
	.align	2, 0
.L578:
	.word	0xfffffc1f
.L537:
	ldrb	r1, [r4]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0x7d
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L480
.L538:
	ldrb	r2, [r4]
	mov	r0, #0x1f
	and	r2, r2, r0
	lsl	r2, r2, #0xf
	ldr	r0, [r5, #0x4]
	ldr	r1, .L580
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [r5, #0x4]
	b	.L480
.L581:
	.align	2, 0
.L580:
	.word	0xfff07fff
.L539:
	ldrb	r1, [r4]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	ldrh	r2, [r5, #0x6]
	ldr	r0, .L582
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x6]
	b	.L480
.L583:
	.align	2, 0
.L582:
	.word	0xfffffe0f
.L540:
	ldrb	r1, [r4]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x7]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	b	.L569
.L541:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrb	r2, [r5, #0x7]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x7]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L542	@cond_branch
	ldrb	r0, [r7, #0x13]
	mov	r1, #0x4
.L567:
	orr	r0, r0, r1
	strb	r0, [r7, #0x13]
	b	.L480
.L542:
	ldrb	r1, [r7, #0x13]
	mov	r0, #0x5
	neg	r0, r0
.L568:
	and	r0, r0, r1
	strb	r0, [r7, #0x13]
	b	.L480
.L544:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x7
	ldrb	r2, [r5, #0x7]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x7]
	b	.L480
.L545:
	ldrb	r1, [r4]
	mov	r0, #0x7
	and	r1, r1, r0
	ldrb	r2, [r5, #0x8]
	mov	r0, #0x8
	neg	r0, r0
	b	.L570
.L546:
	ldrb	r1, [r4]
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r5, #0x8]
	mov	r0, #0x39
	neg	r0, r0
.L570:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x8]
	b	.L480
.L547:
	ldrb	r1, [r4]
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrh	r2, [r5, #0x8]
	ldr	r0, .L584
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x8]
	b	.L480
.L585:
	.align	2, 0
.L584:
	.word	0xfffffe3f
.L548:
	ldrb	r1, [r4]
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x9]
	mov	r0, #0xf
	neg	r0, r0
	b	.L571
.L549:
	ldrb	r1, [r4]
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	ldrb	r2, [r5, #0x9]
	mov	r0, #0x71
	neg	r0, r0
.L571:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x9]
	b	.L480
.L550:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x7
	ldrb	r2, [r5, #0x9]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x9]
	b	.L480
.L551:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	ldrb	r2, [r5, #0xa]
	mov	r0, #0x2
	neg	r0, r0
	b	.L572
.L552:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0xa]
	mov	r0, #0x3
	neg	r0, r0
	b	.L572
.L553:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0xa]
	mov	r0, #0x5
	neg	r0, r0
	b	.L572
.L554:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r5, #0xa]
	mov	r0, #0x9
	neg	r0, r0
	b	.L572
.L555:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	ldrb	r2, [r5, #0xa]
	mov	r0, #0x11
	neg	r0, r0
	b	.L572
.L556:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrb	r2, [r5, #0xa]
	mov	r0, #0x21
	neg	r0, r0
	b	.L572
.L557:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrb	r2, [r5, #0xa]
	mov	r0, #0x41
	neg	r0, r0
.L572:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0xa]
	b	.L480
.L558:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x7
	ldrb	r2, [r5, #0xa]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0xa]
	b	.L480
.L559:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	ldrb	r2, [r5, #0xb]
	mov	r0, #0x2
	neg	r0, r0
	b	.L573
.L560:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0xb]
	mov	r0, #0x3
	neg	r0, r0
	b	.L573
.L561:
	ldrb	r1, [r4]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0xb]
	mov	r0, #0x5
	neg	r0, r0
.L573:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0xb]
	b	.L480
.L562:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x3
	ldrb	r2, [r5, #0xb]
	mov	r1, #0x7
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0xb]
	b	.L480
.L563:
	ldrb	r1, [r4]
	mov	r4, #0x1f
	add	r2, r1, #0
	and	r2, r2, r4
	ldrb	r3, [r5, #0x4]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r5, #0x4]
	lsr	r1, r1, #0x5
	and	r1, r1, r4
	lsl	r1, r1, #0x5
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L586
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	ldrb	r1, [r5, #0x5]
	mov	r0, #0x7d
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r5, #0x5]
	ldr	r0, [r5, #0x4]
	ldr	r1, .L586+0x4
	and	r0, r0, r1
	str	r0, [r5, #0x4]
	ldrh	r1, [r5, #0x6]
	ldr	r0, .L586+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0x6]
	ldrb	r1, [r5, #0x7]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
.L569:
	strb	r0, [r5, #0x7]
.L480:
	mov	r0, sl
	cmp	r0, #0xa
	ble	.L477	@cond_branch
	add	r0, r7, #0
	bl	CalculateBoxMonChecksum
	strh	r0, [r7, #0x1c]
	add	r0, r7, #0
	bl	EncryptBoxMon
.L477:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L587:
	.align	2, 0
.L586:
	.word	0xfffffc1f
	.word	0xfff07fff
	.word	0xfffffe0f
.Lfe14:
	.size	 SetBoxMonData,.Lfe14-SetBoxMonData
	.align	2, 0
	.globl	CopyMon
	.type	 CopyMon,function
	.thumb_func
CopyMon:
	push	{lr}
	bl	memcpy
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 CopyMon,.Lfe15-CopyMon
	.align	2, 0
	.globl	GiveMonToPlayer
	.type	 GiveMonToPlayer,function
	.thumb_func
GiveMonToPlayer:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r4, .L597
	mov	r1, #0x7
	add	r2, r4, #0
	bl	SetMonData
	add	r2, r4, #0
	add	r2, r2, #0x8
	add	r0, r6, #0
	mov	r1, #0x31
	bl	SetMonData
	add	r4, r4, #0xa
	add	r0, r6, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	SetMonData
	mov	r5, #0x0
	b	.L590
.L598:
	.align	2, 0
.L597:
	.word	gSaveBlock2
.L592:
	add	r5, r5, #0x1
.L590:
	cmp	r5, #0x5
	bgt	.L595	@cond_branch
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L599
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0
	bne	.L592	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x64
	bl	CopyMon
	ldr	r1, .L599+0x4
	add	r0, r5, #0x1
	strb	r0, [r1]
	mov	r0, #0x0
	b	.L596
.L600:
	.align	2, 0
.L599:
	.word	gPlayerParty
	.word	gPlayerPartyCount
.L595:
	add	r0, r6, #0
	bl	SendMonToPC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L596:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 GiveMonToPlayer,.Lfe16-GiveMonToPlayer
	.align	2, 0
	.globl	SendMonToPC
	.type	 SendMonToPC,function
	.thumb_func
SendMonToPC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	mov	r9, r0
	ldr	r0, .L615
	ldrb	r5, [r0]
.L602:
	mov	r7, #0x0
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x5
	mov	r8, r0
	mov	r6, #0x0
.L608:
	ldr	r3, .L615+0x4
	add	r0, r6, r3
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	str	r3, [sp]
	bl	GetBoxMonData
	ldr	r3, [sp]
	cmp	r0, #0
	bne	.L607	@cond_branch
	mov	r0, r9
	bl	MonRestorePP
	add	r0, r4, #0
	mov	r1, r9
	mov	r2, #0x50
	bl	CopyMon
	mov	r0, #0x1
	b	.L614
.L616:
	.align	2, 0
.L615:
	.word	gPokemonStorage
	.word	gPokemonStorage+0x4
.L607:
	add	r6, r6, #0x50
	add	r7, r7, #0x1
	cmp	r7, #0x1d
	ble	.L608	@cond_branch
	add	r5, r5, #0x1
	cmp	r5, #0xe
	bne	.L604	@cond_branch
	mov	r5, #0x0
.L604:
	sub	r0, r3, #0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L602	@cond_branch
	mov	r0, #0x2
.L614:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 SendMonToPC,.Lfe17-SendMonToPC
	.align	2, 0
	.globl	CalculatePlayerPartyCount
	.type	 CalculatePlayerPartyCount,function
	.thumb_func
CalculatePlayerPartyCount:
	push	{r4, lr}
	ldr	r0, .L623
	mov	r1, #0x0
	strb	r1, [r0]
	b	.L618
.L624:
	.align	2, 0
.L623:
	.word	gPlayerPartyCount
.L620:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	add	r0, r4, #0
.L618:
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x5
	bhi	.L619	@cond_branch
	add	r1, r0, #0
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L625
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0
	bne	.L620	@cond_branch
.L619:
	ldrb	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L626:
	.align	2, 0
.L625:
	.word	gPlayerParty
.Lfe18:
	.size	 CalculatePlayerPartyCount,.Lfe18-CalculatePlayerPartyCount
	.align	2, 0
	.globl	CalculateEnemyPartyCount
	.type	 CalculateEnemyPartyCount,function
	.thumb_func
CalculateEnemyPartyCount:
	push	{r4, lr}
	ldr	r0, .L633
	mov	r1, #0x0
	strb	r1, [r0]
	b	.L628
.L634:
	.align	2, 0
.L633:
	.word	gEnemyPartyCount
.L630:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	add	r0, r4, #0
.L628:
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x5
	bhi	.L629	@cond_branch
	add	r1, r0, #0
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L635
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0
	bne	.L630	@cond_branch
.L629:
	ldrb	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L636:
	.align	2, 0
.L635:
	.word	gEnemyParty
.Lfe19:
	.size	 CalculateEnemyPartyCount,.Lfe19-CalculateEnemyPartyCount
	.align	2, 0
	.globl	sub_803DAA0
	.type	 sub_803DAA0,function
	.thumb_func
sub_803DAA0:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	bl	CalculatePlayerPartyCount
	ldr	r1, .L648
	ldrb	r0, [r1]
	cmp	r0, #0x1
	beq	.L647	@cond_branch
	mov	r5, #0x0
	ldrb	r1, [r1]
	cmp	r6, r1
	bge	.L640	@cond_branch
.L642:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L648+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0
	beq	.L641	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0
	beq	.L641	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L641	@cond_branch
	add	r6, r6, #0x1
.L641:
	add	r5, r5, #0x1
	ldr	r0, .L648
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L642	@cond_branch
.L640:
	mov	r0, #0x0
	cmp	r6, #0x1
	bgt	.L647	@cond_branch
	mov	r0, #0x2
.L647:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L649:
	.align	2, 0
.L648:
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe20:
	.size	 sub_803DAA0,.Lfe20-sub_803DAA0
	.align	2, 0
	.globl	GetAbilityBySpecies
	.type	 GetAbilityBySpecies,function
	.thumb_func
GetAbilityBySpecies:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r1, r1, #0x18
	cmp	r1, #0
	beq	.L651	@cond_branch
	ldr	r2, .L654
	ldr	r1, .L654+0x4
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x17]
	b	.L653
.L655:
	.align	2, 0
.L654:
	.word	gLastUsedAbility
	.word	gBaseStats
.L651:
	ldr	r2, .L656
	ldr	r1, .L656+0x4
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
.L653:
	strb	r0, [r2]
	ldrb	r0, [r2]
	pop	{r1}
	bx	r1
.L657:
	.align	2, 0
.L656:
	.word	gLastUsedAbility
	.word	gBaseStats
.Lfe21:
	.size	 GetAbilityBySpecies,.Lfe21-GetAbilityBySpecies
	.align	2, 0
	.globl	GetMonAbility
	.type	 GetMonAbility,function
	.thumb_func
GetMonAbility:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x2e
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	GetAbilityBySpecies
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 GetMonAbility,.Lfe22-GetMonAbility
	.align	2, 0
	.globl	CreateSecretBaseEnemyParty
	.type	 CreateSecretBaseEnemyParty,function
	.thumb_func
CreateSecretBaseEnemyParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffe8
	add	r4, r0, #0
	bl	ZeroEnemyPartyMons
	ldr	r5, .L676
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0xa0
	bl	memcpy
	mov	r7, #0x0
.L663:
	lsl	r0, r7, #0x1
	mov	r9, r0
	ldr	r2, .L676
	add	r2, r2, #0x7c
	mov	sl, r2
	mov	r1, r9
	add	r1, r1, sl
	ldrh	r0, [r1]
	add	r2, r7, #0x1
	str	r2, [sp, #0x10]
	cmp	r0, #0
	beq	.L662	@cond_branch
	mov	r0, #0x64
	mov	r6, r7
	mul	r6, r6, r0
	ldr	r2, .L676+0x4
	mov	r8, r2
	add	r5, r6, r2
	ldrh	r1, [r1]
	ldr	r0, .L676
	add	r0, r0, #0x94
	add	r0, r7, r0
	ldrb	r2, [r0]
	mov	r0, #0x1
	str	r0, [sp]
	lsl	r4, r7, #0x2
	ldr	r0, .L676
	add	r0, r0, #0x34
	add	r0, r4, r0
	ldr	r0, [r0]
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r3, #0xf
	bl	CreateMon
	ldr	r2, .L676+0x8
	add	r2, r2, r9
	add	r0, r5, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r5, #0x0
	mov	r9, r4
	mov	r3, r8
	mov	r4, sl
	add	r4, r4, #0x1e
.L668:
	add	r1, r5, #0
	add	r1, r1, #0x1a
	add	r0, r6, r3
	add	r2, r7, r4
	str	r3, [sp, #0x14]
	bl	SetMonData
	add	r5, r5, #0x1
	ldr	r3, [sp, #0x14]
	cmp	r5, #0x5
	ble	.L668	@cond_branch
	mov	r5, #0x0
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L676+0x4
	add	r7, r1, r0
	mov	r2, r9
	lsl	r6, r2, #0x1
.L673:
	add	r1, r5, #0
	add	r1, r1, #0xd
	ldr	r4, .L676+0xc
	add	r4, r6, r4
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	add	r1, r5, #0
	add	r1, r1, #0x11
	ldrh	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r0, .L676+0x10
	add	r2, r2, r0
	add	r0, r7, #0
	bl	SetMonData
	add	r6, r6, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L673	@cond_branch
.L662:
	ldr	r7, [sp, #0x10]
	cmp	r7, #0x5
	ble	.L663	@cond_branch
	ldr	r1, .L676+0x14
	mov	r0, #0x8
	strh	r0, [r1]
	ldr	r1, .L676+0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	strh	r0, [r1]
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	gSharedMem+0x17000
	.word	gEnemyParty
	.word	gSharedMem+0x17088
	.word	gSharedMem+0x1704c
	.word	gBattleMoves+0x4
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent
.Lfe23:
	.size	 CreateSecretBaseEnemyParty,.Lfe23-CreateSecretBaseEnemyParty
	.align	2, 0
	.globl	GetSecretBaseTrainerPicIndex
	.type	 GetSecretBaseTrainerPicIndex,function
	.thumb_func
GetSecretBaseTrainerPicIndex:
	push	{r4, r5, lr}
	ldr	r5, .L679
	ldr	r4, .L679+0x4
	ldrb	r0, [r4, #0x9]
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4, #0x1]
	lsl	r2, r2, #0x1b
	lsr	r2, r2, #0x1f
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r0, [r0]
	ldr	r1, .L679+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L680:
	.align	2, 0
.L679:
	.word	gSecretBaseTrainerClasses
	.word	gSharedMem+0x17000
	.word	gTrainerClassToPicIndex
.Lfe24:
	.size	 GetSecretBaseTrainerPicIndex,.Lfe24-GetSecretBaseTrainerPicIndex
	.align	2, 0
	.globl	GetSecretBaseTrainerNameIndex
	.type	 GetSecretBaseTrainerNameIndex,function
	.thumb_func
GetSecretBaseTrainerNameIndex:
	push	{r4, r5, lr}
	ldr	r5, .L682
	ldr	r4, .L682+0x4
	ldrb	r0, [r4, #0x9]
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4, #0x1]
	lsl	r2, r2, #0x1b
	lsr	r2, r2, #0x1f
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r0, [r0]
	ldr	r1, .L682+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L683:
	.align	2, 0
.L682:
	.word	gSecretBaseTrainerClasses
	.word	gSharedMem+0x17000
	.word	gTrainerClassToNameIndex
.Lfe25:
	.size	 GetSecretBaseTrainerNameIndex,.Lfe25-GetSecretBaseTrainerNameIndex
	.align	2, 0
	.globl	PlayerPartyAndPokemonStorageFull
	.type	 PlayerPartyAndPokemonStorageFull,function
	.thumb_func
PlayerPartyAndPokemonStorageFull:
	push	{r4, lr}
	mov	r4, #0x0
.L688:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L692
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0
	bne	.L687	@cond_branch
	mov	r0, #0x0
	b	.L691
.L693:
	.align	2, 0
.L692:
	.word	gPlayerParty
.L687:
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L688	@cond_branch
	bl	PokemonStorageFull
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L691:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 PlayerPartyAndPokemonStorageFull,.Lfe26-PlayerPartyAndPokemonStorageFull
	.align	2, 0
	.globl	PokemonStorageFull
	.type	 PokemonStorageFull,function
	.thumb_func
PokemonStorageFull:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	mov	r3, #0x0
	mov	r7, #0x0
.L698:
	mov	r5, #0x0
	add	r6, r7, #0
	mov	r4, #0x0
.L702:
	ldr	r0, .L707
	add	r0, r4, r0
	add	r0, r6, r0
	mov	r1, #0xb
	mov	r2, #0x0
	str	r3, [sp]
	bl	GetBoxMonData
	ldr	r3, [sp]
	cmp	r0, #0
	bne	.L701	@cond_branch
	mov	r0, #0x0
	b	.L706
.L708:
	.align	2, 0
.L707:
	.word	gPokemonStorage+0x4
.L701:
	add	r4, r4, #0x50
	add	r5, r5, #0x1
	cmp	r5, #0x1d
	ble	.L702	@cond_branch
	mov	r0, #0x96
	lsl	r0, r0, #0x4
	add	r7, r7, r0
	add	r3, r3, #0x1
	cmp	r3, #0xd
	ble	.L698	@cond_branch
	mov	r0, #0x1
.L706:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 PokemonStorageFull,.Lfe27-PokemonStorageFull
	.align	2, 0
	.globl	GetSpeciesName
	.type	 GetSpeciesName,function
	.thumb_func
GetSpeciesName:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r1, #0x0
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	mov	ip, r0
	ldr	r7, .L719
	mov	r0, #0xb
	mul	r0, r0, r5
	add	r3, r0, r7
	add	r2, r6, #0
	b	.L710
.L720:
	.align	2, 0
.L719:
	.word	gSpeciesNames
.L712:
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	add	r1, r1, #0x1
.L710:
	add	r4, r6, r1
	cmp	r1, #0xa
	bgt	.L711	@cond_branch
	cmp	r5, ip
	bls	.L714	@cond_branch
	add	r0, r1, r7
	ldrb	r0, [r0]
	b	.L718
.L714:
	ldrb	r0, [r3]
.L718:
	strb	r0, [r2]
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L712	@cond_branch
.L711:
	mov	r0, #0xff
	strb	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 GetSpeciesName,.Lfe28-GetSpeciesName
	.align	2, 0
	.globl	CalculatePPWithBonus
	.type	 CalculatePPWithBonus,function
	.thumb_func
CalculatePPWithBonus:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, .L722
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r4
	ldrb	r4, [r3, #0x4]
	ldr	r0, .L722+0x4
	add	r0, r2, r0
	ldrb	r3, [r0]
	and	r3, r3, r1
	lsl	r2, r2, #0x1
	asr	r3, r3, r2
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	mul	r0, r0, r4
	mov	r1, #0x64
	bl	__divsi3
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L723:
	.align	2, 0
.L722:
	.word	gBattleMoves
	.word	gUnknown_08208238
.Lfe29:
	.size	 CalculatePPWithBonus,.Lfe29-CalculatePPWithBonus
	.align	2, 0
	.globl	RemoveMonPPBonus
	.type	 RemoveMonPPBonus,function
	.thumb_func
RemoveMonPPBonus:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x15
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	strb	r0, [r1]
	ldr	r1, .L725
	add	r4, r4, r1
	ldrb	r1, [r4]
	and	r1, r1, r0
	mov	r0, sp
	strb	r1, [r0]
	add	r0, r5, #0
	mov	r1, #0x15
	mov	r2, sp
	bl	SetMonData
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L726:
	.align	2, 0
.L725:
	.word	gUnknown_0820823C
.Lfe30:
	.size	 RemoveMonPPBonus,.Lfe30-RemoveMonPPBonus
	.align	2, 0
	.globl	RemoveBattleMonPPBonus
	.type	 RemoveBattleMonPPBonus,function
	.thumb_func
RemoveBattleMonPPBonus:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r0, #0x3b
	ldr	r2, .L728
	add	r1, r1, r2
	ldrb	r2, [r0]
	ldrb	r1, [r1]
	and	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.L729:
	.align	2, 0
.L728:
	.word	gUnknown_0820823C
.Lfe31:
	.size	 RemoveBattleMonPPBonus,.Lfe31-RemoveBattleMonPPBonus
	.align	2, 0
	.globl	CopyPlayerPartyMonToBattleData
	.type	 CopyPlayerPartyMonToBattleData,function
	.thumb_func
CopyPlayerPartyMonToBattleData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xffffffe8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, #0x64
	mov	r5, r9
	mul	r5, r5, r0
	ldr	r0, .L741
	add	r5, r5, r0
	add	r0, r5, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	ldr	r1, .L741+0x4
	mov	r8, r1
	mov	r1, #0x58
	ldr	r2, [sp, #0x14]
	mov	r4, r2
	mul	r4, r4, r1
	mov	r3, r8
	add	r6, r4, r3
	strh	r0, [r6]
	add	r0, r5, #0
	mov	r1, #0xc
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r6, #0x2e]
	mov	r6, #0x0
	mov	r0, r8
	add	r0, r0, #0x24
	add	r7, r4, r0
.L734:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xc
	add	r1, r1, r8
	mov	sl, r1
	add	r1, r4, r1
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r5, #0
	mov	r2, #0x0
	bl	GetMonData
	strb	r0, [r7]
	add	r7, r7, #0x1
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L734	@cond_branch
	mov	r0, #0x64
	mov	r4, r9
	mul	r4, r4, r0
	ldr	r0, .L741
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, #0x0
	bl	GetMonData
	mov	r2, #0xc
	neg	r2, r2
	add	r2, r2, sl
	mov	r9, r2
	mov	r1, #0x58
	ldr	r3, [sp, #0x14]
	mov	r5, r3
	mul	r5, r5, r1
	add	r7, r5, r2
	add	r1, r7, #0
	add	r1, r1, #0x3b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r7, #0
	add	r1, r1, #0x2b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x19
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, sl
	add	r1, r1, #0x38
	add	r1, r5, r1
	str	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, #0x0
	bl	GetMonData
	mov	r6, #0x1f
	and	r0, r0, r6
	ldrb	r2, [r7, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0x1f
	mov	r8, r1
	mov	r2, r8
	and	r0, r0, r2
	lsl	r0, r0, #0x5
	ldrh	r2, [r7, #0x14]
	ldr	r1, .L741+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r7, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, #0x0
	bl	GetMonData
	and	r0, r0, r6
	lsl	r0, r0, #0x2
	ldrb	r2, [r7, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [r7, #0x14]
	ldr	r2, .L741+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [r7, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, #0x0
	bl	GetMonData
	mov	r3, r8
	and	r0, r0, r3
	lsl	r0, r0, #0x4
	ldrh	r2, [r7, #0x16]
	ldr	r1, .L741+0x10
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r7, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, #0x0
	bl	GetMonData
	and	r0, r0, r6
	lsl	r0, r0, #0x1
	ldrb	r2, [r7, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, sl
	add	r1, r1, #0x3c
	add	r1, r5, r1
	str	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x37
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, sl
	add	r1, r1, #0x40
	add	r1, r5, r1
	str	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x38
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r7, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r7, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r7, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r7, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r7, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r7, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r7, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x7
	ldrb	r2, [r7, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, sl
	add	r1, r1, #0x48
	add	r1, r5, r1
	str	r0, [r1]
	ldr	r2, .L741+0x14
	ldrh	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	add	r1, r7, #0
	add	r1, r1, #0x21
	strb	r0, [r1]
	ldrh	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x7]
	add	r1, r7, #0
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldrh	r0, [r7]
	ldrb	r1, [r7, #0x17]
	lsr	r1, r1, #0x7
	bl	GetAbilityBySpecies
	add	r1, r7, #0
	add	r1, r1, #0x20
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	mov	r0, sl
	add	r0, r0, #0x24
	add	r0, r5, r0
	mov	r1, sp
	bl	StringCopy10
	mov	r2, sl
	add	r2, r2, #0x30
	add	r2, r5, r2
	add	r0, r4, #0
	mov	r1, #0x7
	bl	GetMonData
	ldr	r0, [sp, #0x14]
	bl	GetBankSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	ldr	r1, .L741+0x18
	add	r0, r0, r1
	ldrh	r1, [r7, #0x28]
	strh	r1, [r0]
	mov	r2, #0x6
	mov	r1, r9
	mov	r6, #0x7
	add	r5, r5, sl
	add	r0, r5, #0
	add	r0, r0, #0x13
.L739:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L739	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x58
	ldr	r3, [sp, #0x14]
	mul	r0, r0, r3
	add	r1, r1, #0x50
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, [sp, #0x14]
	bl	sub_80157C4
	ldr	r0, [sp, #0x14]
	mov	r1, #0x0
	bl	sub_8032AA8
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L742:
	.align	2, 0
.L741:
	.word	gPlayerParty
	.word	gBattleMons
	.word	0xfffffc1f
	.word	0xfff07fff
	.word	0xfffffe0f
	.word	gBaseStats
	.word	gSharedMem+0x160bc
.Lfe32:
	.size	 CopyPlayerPartyMonToBattleData,.Lfe32-CopyPlayerPartyMonToBattleData
.text
	.align	2, 0
