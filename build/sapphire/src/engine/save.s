@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gLastSaveSectorStatus,object
	.size	 gLastSaveSectorStatus,4
gLastSaveSectorStatus:
	.word	0x0
	.globl	gSaveSectionLocations
	.section .rodata
	.align	2, 0
	.type	 gSaveSectionLocations,object
gSaveSectionLocations:
	.word	gSaveBlock2
	.short	0x890
	.space	2
	.word	gSaveBlock1
	.short	0xf80
	.space	2
	.word	gSaveBlock1+0xf80
	.short	0xf80
	.space	2
	.word	gSaveBlock1+0x1f00
	.short	0xf80
	.space	2
	.word	gSaveBlock1+0x2e80
	.short	0xc40
	.space	2
	.word	gPokemonStorage
	.short	0xf80
	.space	2
	.word	gPokemonStorage+0xf80
	.short	0xf80
	.space	2
	.word	gPokemonStorage+0x1f00
	.short	0xf80
	.space	2
	.word	gPokemonStorage+0x2e80
	.short	0xf80
	.space	2
	.word	gPokemonStorage+0x3e00
	.short	0xf80
	.space	2
	.word	gPokemonStorage+0x4d80
	.short	0xf80
	.space	2
	.word	gPokemonStorage+0x5d00
	.short	0xf80
	.space	2
	.word	gPokemonStorage+0x6c80
	.short	0xf80
	.space	2
	.word	gPokemonStorage+0x7c00
	.short	0x840
	.space	2
	.size	 gSaveSectionLocations,112
	.globl	gHallOfFameSaveSectionLocations
	.align	2, 0
	.type	 gHallOfFameSaveSectionLocations,object
gHallOfFameSaveSectionLocations:
	.word	gSharedMem+0x1e000
	.short	0xf80
	.space	2
	.word	gSharedMem+0x1ef80
	.short	0xf80
	.space	2
	.size	 gHallOfFameSaveSectionLocations,16
	.globl	gFlashSectors
	.type	 gFlashSectors,object
gFlashSectors:
	.byte	0x1e
	.byte	0x1f
	.size	 gFlashSectors,2
.text
	.align	2, 0
	.globl	ClearSaveData
	.type	 ClearSaveData,function
	.thumb_func
ClearSaveData:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L8
.L6:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1f
	bls	.L6	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	EraseFlashSector
.Lfe1:
	.size	 ClearSaveData,.Lfe1-ClearSaveData
	.align	2, 0
	.globl	ResetSaveCounters
	.type	 ResetSaveCounters,function
	.thumb_func
ResetSaveCounters:
	ldr	r0, .L11
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L11+0x4
	strh	r1, [r0]
	ldr	r0, .L11+0x8
	str	r1, [r0]
	bx	lr
.L12:
	.align	2, 0
.L11:
	.word	gSaveCounter
	.word	gLastWrittenSector
	.word	gDamagedSaveSectors
.Lfe2:
	.size	 ResetSaveCounters,.Lfe2-ResetSaveCounters
	.align	2, 0
	.globl	SetDamagedSectorBits
	.type	 SetDamagedSectorBits,function
	.thumb_func
SetDamagedSectorBits:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	mov	r4, #0x0
	cmp	r0, #0x1
	beq	.L16	@cond_branch
	cmp	r0, #0x1
	bgt	.L21	@cond_branch
	cmp	r0, #0
	beq	.L15	@cond_branch
	b	.L14
.L21:
	cmp	r0, #0x2
	beq	.L17	@cond_branch
	b	.L14
.L15:
	ldr	r2, .L22
	mov	r1, #0x1
	lsl	r1, r1, r3
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L14
.L23:
	.align	2, 0
.L22:
	.word	gDamagedSaveSectors
.L16:
	ldr	r2, .L24
	add	r1, r0, #0
	lsl	r1, r1, r3
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	b	.L14
.L25:
	.align	2, 0
.L24:
	.word	gDamagedSaveSectors
.L17:
	ldr	r0, .L26
	mov	r1, #0x1
	lsl	r1, r1, r3
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	mov	r4, #0x1
.L14:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L27:
	.align	2, 0
.L26:
	.word	gDamagedSaveSectors
.Lfe3:
	.size	 SetDamagedSectorBits,.Lfe3-SetDamagedSectorBits
	.align	2, 0
	.globl	save_write_to_flash
	.type	 save_write_to_flash,function
	.thumb_func
save_write_to_flash:
	push	{r4, r5, r6, r7, lr}
	add	r7, r1, #0
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, .L37
	ldr	r0, .L37+0x4
	str	r0, [r1]
	ldr	r0, .L37+0x8
	cmp	r2, r0
	beq	.L29	@cond_branch
	add	r0, r2, #0
	add	r1, r7, #0
	bl	HandleWriteSector
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L30
.L38:
	.align	2, 0
.L37:
	.word	gFastSaveSection
	.word	gSharedMem
	.word	0xffff
.L29:
	ldr	r1, .L39
	ldr	r5, .L39+0x4
	ldrh	r0, [r5]
	strh	r0, [r1]
	ldr	r1, .L39+0x8
	ldr	r6, .L39+0xc
	ldr	r4, [r6]
	str	r4, [r1]
	add	r0, r0, #0x1
	strh	r0, [r5]
	ldrh	r0, [r5]
	mov	r1, #0xe
	bl	__umodsi3
	strh	r0, [r5]
	add	r4, r4, #0x1
	str	r4, [r6]
	mov	r5, #0x1
	mov	r4, #0x0
.L34:
	add	r0, r4, #0
	add	r1, r7, #0
	bl	HandleWriteSector
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L34	@cond_branch
	ldr	r0, .L39+0x10
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L30	@cond_branch
	mov	r5, #0xff
	ldr	r1, .L39+0x4
	ldr	r0, .L39
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L39+0xc
	ldr	r0, .L39+0x8
	ldr	r0, [r0]
	str	r0, [r1]
.L30:
	add	r0, r5, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L40:
	.align	2, 0
.L39:
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gDamagedSaveSectors
.Lfe4:
	.size	 save_write_to_flash,.Lfe4-save_write_to_flash
	.align	2, 0
	.globl	HandleWriteSector
	.type	 HandleWriteSector,function
	.thumb_func
HandleWriteSector:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L52
	ldrh	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L52+0x4
	ldr	r1, [r2]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r6, #0x3
	add	r0, r0, r4
	ldr	r1, [r0]
	mov	sl, r1
	ldrh	r4, [r0, #0x4]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r2, .L52+0x8
	mov	ip, r2
	mov	r8, ip
	mov	r2, #0x0
	ldr	r1, .L52+0xc
.L45:
	mov	r7, r8
	ldr	r0, [r7]
	add	r0, r0, r3
	strb	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bls	.L45	@cond_branch
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r2, .L52+0x10
	add	r0, r1, r2
	strh	r6, [r0]
	ldr	r3, .L52+0x14
	add	r2, r1, r3
	ldr	r0, .L52+0x18
	str	r0, [r2]
	ldr	r6, .L52+0x1c
	add	r1, r1, r6
	mov	r7, r9
	ldr	r0, [r7]
	str	r0, [r1]
	mov	r3, #0x0
	lsl	r5, r5, #0x18
	cmp	r3, r4
	bcs	.L48	@cond_branch
	mov	r2, ip
.L50:
	ldr	r1, [r2]
	add	r1, r1, r3
	mov	r6, sl
	add	r0, r6, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r4
	bcc	.L50	@cond_branch
.L48:
	mov	r0, sl
	add	r1, r4, #0
	bl	CalculateChecksum
	ldr	r1, .L52+0x8
	ldr	r1, [r1]
	ldr	r7, .L52+0x20
	add	r2, r1, r7
	strh	r0, [r2]
	lsr	r0, r5, #0x18
	bl	TryWriteSector
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L53:
	.align	2, 0
.L52:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	gFastSaveSection
	.word	0xfff
	.word	0xff4
	.word	0xff8
	.word	0x8012025
	.word	0xffc
	.word	0xff6
.Lfe5:
	.size	 HandleWriteSector,.Lfe5-HandleWriteSector
	.align	2, 0
	.globl	HandleWriteSectorNBytes
	.type	 HandleWriteSectorNBytes,function
	.thumb_func
HandleWriteSectorNBytes:
	push	{r4, r5, r6, r7, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r4, .L65
	mov	r3, #0x0
	mov	r6, #0x0
	ldr	r1, .L65+0x4
.L58:
	add	r0, r4, r3
	strb	r6, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bls	.L58	@cond_branch
	ldr	r0, .L65+0x8
	add	r1, r4, r0
	ldr	r0, .L65+0xc
	str	r0, [r1]
	mov	r3, #0x0
	cmp	r3, r2
	bcs	.L61	@cond_branch
.L63:
	add	r1, r4, r3
	add	r0, r5, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r2
	bcc	.L63	@cond_branch
.L61:
	add	r0, r5, #0
	add	r1, r2, #0
	bl	CalculateChecksum
	ldr	r2, .L65+0x10
	add	r1, r4, r2
	strh	r0, [r1]
	add	r0, r7, #0
	add	r1, r4, #0
	bl	TryWriteSector
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L66:
	.align	2, 0
.L65:
	.word	gSharedMem
	.word	0xfff
	.word	0xff8
	.word	0x8012025
	.word	0xff4
.Lfe6:
	.size	 HandleWriteSectorNBytes,.Lfe6-HandleWriteSectorNBytes
	.align	2, 0
	.globl	TryWriteSector
	.type	 TryWriteSector,function
	.thumb_func
TryWriteSector:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	ProgramFlashSectorAndVerify
	cmp	r0, #0
	bne	.L68	@cond_branch
	mov	r0, #0x1
	add	r1, r4, #0
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L70
.L68:
	mov	r0, #0x0
	add	r1, r4, #0
	bl	SetDamagedSectorBits
	mov	r0, #0xff
.L70:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 TryWriteSector,.Lfe7-TryWriteSector
	.align	2, 0
	.globl	RestoreSaveBackupVarsAndIncrement
	.type	 RestoreSaveBackupVarsAndIncrement,function
	.thumb_func
RestoreSaveBackupVarsAndIncrement:
	push	{r4, r5, r6, lr}
	ldr	r1, .L72
	ldr	r0, .L72+0x4
	str	r0, [r1]
	ldr	r1, .L72+0x8
	ldr	r5, .L72+0xc
	ldrh	r0, [r5]
	strh	r0, [r1]
	ldr	r1, .L72+0x10
	ldr	r6, .L72+0x14
	ldr	r4, [r6]
	str	r4, [r1]
	add	r0, r0, #0x1
	strh	r0, [r5]
	ldrh	r0, [r5]
	mov	r1, #0xe
	bl	__umodsi3
	strh	r0, [r5]
	add	r4, r4, #0x1
	str	r4, [r6]
	ldr	r1, .L72+0x18
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L72+0x1c
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L73:
	.align	2, 0
.L72:
	.word	gFastSaveSection
	.word	gSharedMem
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gUnknown_03005EB4
	.word	gDamagedSaveSectors
.Lfe8:
	.size	 RestoreSaveBackupVarsAndIncrement,.Lfe8-RestoreSaveBackupVarsAndIncrement
	.align	2, 0
	.globl	RestoreSaveBackupVars
	.type	 RestoreSaveBackupVars,function
	.thumb_func
RestoreSaveBackupVars:
	ldr	r1, .L75
	ldr	r0, .L75+0x4
	str	r0, [r1]
	ldr	r1, .L75+0x8
	ldr	r0, .L75+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L75+0x10
	ldr	r0, .L75+0x14
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r1, .L75+0x18
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L75+0x1c
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L76:
	.align	2, 0
.L75:
	.word	gFastSaveSection
	.word	gSharedMem
	.word	gLastKnownGoodSector
	.word	gLastWrittenSector
	.word	gLastSaveCounter
	.word	gSaveCounter
	.word	gUnknown_03005EB4
	.word	gDamagedSaveSectors
.Lfe9:
	.size	 RestoreSaveBackupVars,.Lfe9-RestoreSaveBackupVars
	.align	2, 0
	.globl	sub_812550C
	.type	 sub_812550C,function
	.thumb_func
sub_812550C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L81
	ldrh	r2, [r4]
	sub	r0, r0, #0x1
	cmp	r2, r0
	bge	.L78	@cond_branch
	mov	r5, #0x1
	add	r0, r2, #0
	bl	HandleWriteSector
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L81+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L80	@cond_branch
	mov	r5, #0xff
	ldr	r1, .L81+0x8
	ldr	r0, .L81+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L81+0x10
	ldr	r0, .L81+0x14
	ldr	r0, [r0]
	str	r0, [r1]
	b	.L80
.L82:
	.align	2, 0
.L81:
	.word	gUnknown_03005EB4
	.word	gDamagedSaveSectors
	.word	gLastWrittenSector
	.word	gLastKnownGoodSector
	.word	gSaveCounter
	.word	gLastSaveCounter
.L78:
	mov	r5, #0xff
.L80:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 sub_812550C,.Lfe10-sub_812550C
	.align	2, 0
	.globl	sub_812556C
	.type	 sub_812556C,function
	.thumb_func
sub_812556C:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	mov	r4, #0x1
	ldr	r2, .L85
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	bl	sub_81255B8
	ldr	r0, .L85+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L84	@cond_branch
	mov	r4, #0xff
	ldr	r1, .L85+0x8
	ldr	r0, .L85+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L85+0x10
	ldr	r0, .L85+0x14
	ldr	r0, [r0]
	str	r0, [r1]
.L84:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L86:
	.align	2, 0
.L85:
	.word	0xffff0000
	.word	gDamagedSaveSectors
	.word	gLastWrittenSector
	.word	gLastKnownGoodSector
	.word	gSaveCounter
	.word	gLastSaveCounter
.Lfe11:
	.size	 sub_812556C,.Lfe11-sub_812556C
	.align	2, 0
	.globl	sub_81255B8
	.type	 sub_81255B8,function
	.thumb_func
sub_81255B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L116
	ldrh	r0, [r0]
	add	r0, r6, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L116+0x4
	ldr	r1, [r2]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r6, #0x3
	add	r0, r0, r4
	ldr	r1, [r0]
	mov	sl, r1
	ldrh	r3, [r0, #0x4]
	mov	r4, #0x0
	mov	r9, r2
	ldr	r2, .L116+0x8
	mov	ip, r2
	mov	r8, ip
	mov	r2, #0x0
	ldr	r1, .L116+0xc
.L91:
	mov	r7, r8
	ldr	r0, [r7]
	add	r0, r0, r4
	strb	r2, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r1
	bls	.L91	@cond_branch
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r2, .L116+0x10
	add	r0, r1, r2
	strh	r6, [r0]
	ldr	r6, .L116+0x14
	add	r2, r1, r6
	ldr	r0, .L116+0x18
	str	r0, [r2]
	ldr	r7, .L116+0x1c
	add	r1, r1, r7
	mov	r2, r9
	ldr	r0, [r2]
	str	r0, [r1]
	mov	r4, #0x0
	lsl	r6, r5, #0x18
	mov	r8, r6
	cmp	r4, r3
	bcs	.L94	@cond_branch
	mov	r2, ip
.L96:
	ldr	r1, [r2]
	add	r1, r1, r4
	mov	r7, sl
	add	r0, r7, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r3
	bcc	.L96	@cond_branch
.L94:
	mov	r0, sl
	add	r1, r3, #0
	bl	CalculateChecksum
	ldr	r1, .L116+0x8
	ldr	r1, [r1]
	ldr	r2, .L116+0x20
	add	r1, r1, r2
	strh	r0, [r1]
	ldr	r0, .L116+0x24
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
	mov	r6, #0x1
	mov	r4, #0x0
	ldr	r7, .L116+0x28
	mov	r9, r7
	ldr	r7, .L116+0x2c
	b	.L98
.L117:
	.align	2, 0
.L116:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	gFastSaveSection
	.word	0xfff
	.word	0xff4
	.word	0xff8
	.word	0x8012025
	.word	0xffc
	.word	0xff6
	.word	EraseFlashSector
	.word	0xff7
	.word	ProgramFlashByte
.L100:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L98:
	cmp	r4, r9
	bhi	.L99	@cond_branch
	ldr	r0, .L118
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrb	r2, [r0]
	ldr	r3, [r7]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L100	@cond_branch
	mov	r6, #0xff
.L99:
	cmp	r6, #0xff
	bne	.L104	@cond_branch
	mov	r0, r8
	lsr	r1, r0, #0x18
	b	.L115
.L119:
	.align	2, 0
.L118:
	.word	gFastSaveSection
.L104:
	mov	r6, #0x1
	mov	r4, #0x0
	ldr	r1, .L120
	mov	r9, r1
	ldr	r7, .L120+0x4
	b	.L106
.L121:
	.align	2, 0
.L120:
	.word	ProgramFlashByte
	.word	0xff9
.L108:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L106:
	cmp	r4, #0x6
	bhi	.L107	@cond_branch
	add	r1, r4, r7
	ldr	r0, .L122
	ldr	r0, [r0]
	add	r0, r4, r0
	add	r0, r0, r7
	ldrb	r2, [r0]
	mov	r0, r9
	ldr	r3, [r0]
	add	r0, r5, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L108	@cond_branch
	mov	r6, #0xff
.L107:
	cmp	r6, #0xff
	beq	.L112	@cond_branch
	mov	r2, r8
	lsr	r1, r2, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L114
.L123:
	.align	2, 0
.L122:
	.word	gFastSaveSection
.L112:
	mov	r6, r8
	lsr	r1, r6, #0x18
.L115:
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	mov	r0, #0xff
.L114:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 sub_81255B8,.Lfe12-sub_81255B8
	.align	2, 0
	.globl	sub_8125758
	.type	 sub_8125758,function
	.thumb_func
sub_8125758:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r6, .L128
	lsr	r0, r0, #0x10
	ldrh	r1, [r6]
	add	r0, r0, r1
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L128+0x4
	ldr	r1, [r5]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r3, .L128+0x8
	ldr	r1, .L128+0xc
	ldr	r0, .L128+0x10
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r3, [r3]
	add	r0, r4, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L125	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L127
.L129:
	.align	2, 0
.L128:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	ProgramFlashByte
	.word	0xff8
	.word	gFastSaveSection
.L125:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	ldr	r0, .L130
	ldrh	r0, [r0]
	strh	r0, [r6]
	ldr	r0, .L130+0x4
	ldr	r0, [r0]
	str	r0, [r5]
	mov	r0, #0xff
.L127:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L131:
	.align	2, 0
.L130:
	.word	gLastKnownGoodSector
	.word	gLastSaveCounter
.Lfe13:
	.size	 sub_8125758,.Lfe13-sub_8125758
	.align	2, 0
	.globl	sub_81257F0
	.type	 sub_81257F0,function
	.thumb_func
sub_81257F0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	ldr	r6, .L136
	lsr	r0, r0, #0x10
	ldrh	r1, [r6]
	add	r0, r0, r1
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xe
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r5, .L136+0x4
	ldr	r1, [r5]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L136+0x8
	ldr	r1, .L136+0xc
	ldr	r3, [r0]
	add	r0, r4, #0
	mov	r2, #0x25
	bl	_call_via_r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L133	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	SetDamagedSectorBits
	mov	r0, #0x1
	b	.L135
.L137:
	.align	2, 0
.L136:
	.word	gLastWrittenSector
	.word	gSaveCounter
	.word	ProgramFlashByte
	.word	0xff8
.L133:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	SetDamagedSectorBits
	ldr	r0, .L138
	ldrh	r0, [r0]
	strh	r0, [r6]
	ldr	r0, .L138+0x4
	ldr	r0, [r0]
	str	r0, [r5]
	mov	r0, #0xff
.L135:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L139:
	.align	2, 0
.L138:
	.word	gLastKnownGoodSector
	.word	gLastSaveCounter
.Lfe14:
	.size	 sub_81257F0,.Lfe14-sub_81257F0
	.align	2, 0
	.globl	sub_812587C
	.type	 sub_812587C,function
	.thumb_func
sub_812587C:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, .L143
	ldr	r0, .L143+0x4
	str	r0, [r1]
	ldr	r0, .L143+0x8
	cmp	r4, r0
	beq	.L141	@cond_branch
	mov	r5, #0xff
	b	.L142
.L144:
	.align	2, 0
.L143:
	.word	gFastSaveSection
	.word	gSharedMem
	.word	0xffff
.L141:
	add	r0, r6, #0
	bl	GetSaveValidStatus
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	bl	sub_81258BC
.L142:
	add	r0, r5, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 sub_812587C,.Lfe15-sub_812587C
	.align	2, 0
	.globl	sub_81258BC
	.type	 sub_81258BC,function
	.thumb_func
sub_81258BC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r1
	ldr	r0, .L158
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x11
	lsr	r7, r0, #0x10
	mov	r5, #0x0
	ldr	r6, .L158+0x4
.L149:
	add	r0, r5, r7
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r6]
	bl	DoReadFlashWholeSection
	ldr	r0, [r6]
	ldr	r1, .L158+0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	bne	.L150	@cond_branch
	ldr	r0, .L158+0xc
	strh	r5, [r0]
.L150:
	ldr	r0, [r6]
	lsl	r1, r1, #0x3
	mov	r2, r8
	add	r4, r1, r2
	ldrh	r1, [r4, #0x4]
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r2, [r6]
	ldr	r1, .L158+0x10
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L158+0x14
	add	r5, r5, #0x1
	cmp	r1, r0
	bne	.L148	@cond_branch
	ldr	r1, .L158+0x18
	add	r0, r2, r1
	ldrh	r0, [r0]
	cmp	r0, r3
	bne	.L148	@cond_branch
	mov	r2, #0x0
	ldrh	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L148	@cond_branch
	add	r3, r4, #0
	ldr	r4, .L158+0x4
.L155:
	ldr	r1, [r3]
	add	r1, r1, r2
	ldr	r0, [r4]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrh	r1, [r3, #0x4]
	cmp	r2, r1
	bcc	.L155	@cond_branch
.L148:
	lsl	r0, r5, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xd
	bls	.L149	@cond_branch
	mov	r0, #0x1
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L159:
	.align	2, 0
.L158:
	.word	gSaveCounter
	.word	gFastSaveSection
	.word	0xff4
	.word	gLastWrittenSector
	.word	0xff8
	.word	0x8012025
	.word	0xff6
.Lfe16:
	.size	 sub_81258BC,.Lfe16-sub_81258BC
	.align	2, 0
	.globl	GetSaveValidStatus
	.type	 GetSaveValidStatus,function
	.thumb_func
GetSaveValidStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	sl, r0
	mov	r0, #0x0
	mov	r8, r0
	mov	r9, r0
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r4, #0x0
	ldr	r7, .L200
.L164:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r7]
	bl	DoReadFlashWholeSection
	ldr	r2, [r7]
	ldr	r1, .L200+0x4
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L200+0x8
	cmp	r1, r0
	bne	.L163	@cond_branch
	mov	r5, #0x1
	ldr	r3, .L200+0xc
	add	r0, r2, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	add	r0, r2, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, [r7]
	ldr	r3, .L200+0x10
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L163	@cond_branch
	ldr	r2, .L200+0x14
	add	r0, r1, r2
	ldr	r0, [r0]
	mov	r8, r0
	sub	r3, r3, #0x2
	add	r1, r1, r3
	add	r0, r5, #0
	ldrh	r1, [r1]
	lsl	r0, r0, r1
	orr	r6, r6, r0
.L163:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L164	@cond_branch
	cmp	r5, #0
	beq	.L168	@cond_branch
	ldr	r0, .L200+0x18
	mov	r1, #0xff
	str	r1, [sp]
	cmp	r6, r0
	bne	.L171	@cond_branch
	mov	r2, #0x1
	str	r2, [sp]
	b	.L171
.L201:
	.align	2, 0
.L200:
	.word	gFastSaveSection
	.word	0xff8
	.word	0x8012025
	.word	0xff4
	.word	0xff6
	.word	0xffc
	.word	0x3fff
.L168:
	mov	r3, #0x0
	str	r3, [sp]
.L171:
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r4, #0x0
	ldr	r7, .L202
.L175:
	add	r0, r4, #0
	add	r0, r0, #0xe
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [r7]
	bl	DoReadFlashWholeSection
	ldr	r2, [r7]
	ldr	r1, .L202+0x4
	add	r0, r2, r1
	ldr	r1, [r0]
	ldr	r0, .L202+0x8
	cmp	r1, r0
	bne	.L174	@cond_branch
	mov	r5, #0x1
	ldr	r3, .L202+0xc
	add	r0, r2, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	add	r0, r2, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r1, [r7]
	ldr	r3, .L202+0x10
	add	r0, r1, r3
	ldrh	r0, [r0]
	cmp	r0, r2
	bne	.L174	@cond_branch
	ldr	r2, .L202+0x14
	add	r0, r1, r2
	ldr	r0, [r0]
	mov	r9, r0
	sub	r3, r3, #0x2
	add	r1, r1, r3
	add	r0, r5, #0
	ldrh	r1, [r1]
	lsl	r0, r0, r1
	orr	r6, r6, r0
.L174:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0xd
	bls	.L175	@cond_branch
	cmp	r5, #0
	beq	.L179	@cond_branch
	ldr	r0, .L202+0x18
	mov	r1, #0xff
	cmp	r6, r0
	bne	.L182	@cond_branch
	mov	r1, #0x1
	b	.L182
.L203:
	.align	2, 0
.L202:
	.word	gFastSaveSection
	.word	0xff8
	.word	0x8012025
	.word	0xff4
	.word	0xff6
	.word	0xffc
	.word	0x3fff
.L179:
	mov	r1, #0x0
.L182:
	ldr	r0, [sp]
	cmp	r0, #0x1
	bne	.L192	@cond_branch
	cmp	r1, #0x1
	bne	.L183	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r8, r0
	bne	.L186	@cond_branch
	mov	r1, r9
	cmp	r1, #0
	beq	.L185	@cond_branch
.L186:
	mov	r2, r8
	cmp	r2, #0
	bne	.L184	@cond_branch
	cmp	r9, r0
	bne	.L184	@cond_branch
.L185:
	mov	r1, r8
	add	r1, r1, #0x1
	mov	r0, r9
	add	r0, r0, #0x1
	cmp	r1, r0
	bcs	.L187	@cond_branch
	ldr	r0, .L204
	mov	r3, r9
	b	.L198
.L205:
	.align	2, 0
.L204:
	.word	gSaveCounter
.L187:
	ldr	r0, .L206
	mov	r1, r8
	str	r1, [r0]
	b	.L195
.L207:
	.align	2, 0
.L206:
	.word	gSaveCounter
.L184:
	cmp	r8, r9
	bcs	.L190	@cond_branch
	ldr	r0, .L208
	mov	r2, r9
	str	r2, [r0]
	b	.L195
.L209:
	.align	2, 0
.L208:
	.word	gSaveCounter
.L190:
	ldr	r0, .L210
	mov	r3, r8
.L198:
	str	r3, [r0]
	b	.L195
.L211:
	.align	2, 0
.L210:
	.word	gSaveCounter
.L183:
	ldr	r0, .L212
	mov	r2, r8
	str	r2, [r0]
	cmp	r1, #0xff
	beq	.L199	@cond_branch
	b	.L195
.L213:
	.align	2, 0
.L212:
	.word	gSaveCounter
.L192:
	cmp	r1, #0x1
	bne	.L194	@cond_branch
	ldr	r0, .L214
	mov	r3, r9
	str	r3, [r0]
	ldr	r0, [sp]
	cmp	r0, #0xff
	bne	.L195	@cond_branch
.L199:
	mov	r0, #0xff
	b	.L197
.L215:
	.align	2, 0
.L214:
	.word	gSaveCounter
.L195:
	mov	r0, #0x1
	b	.L197
.L194:
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L196	@cond_branch
	cmp	r1, #0
	bne	.L196	@cond_branch
	ldr	r0, .L216
	str	r1, [r0]
	ldr	r0, .L216+0x4
	strh	r1, [r0]
	mov	r0, #0x0
	b	.L197
.L217:
	.align	2, 0
.L216:
	.word	gSaveCounter
	.word	gLastWrittenSector
.L196:
	ldr	r0, .L218
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L218+0x4
	strh	r1, [r0]
	mov	r0, #0x2
.L197:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L219:
	.align	2, 0
.L218:
	.word	gSaveCounter
	.word	gLastWrittenSector
.Lfe17:
	.size	 GetSaveValidStatus,.Lfe17-GetSaveValidStatus
	.align	2, 0
	.globl	sub_8125B88
	.type	 sub_8125B88,function
	.thumb_func
sub_8125B88:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	ldr	r5, .L231
	add	r1, r5, #0
	bl	DoReadFlashWholeSection
	ldr	r1, .L231+0x4
	add	r0, r5, r1
	ldr	r1, [r0]
	ldr	r0, .L231+0x8
	cmp	r1, r0
	bne	.L221	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	CalculateChecksum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L231+0xc
	add	r1, r5, r2
	ldrh	r1, [r1]
	cmp	r1, r0
	bne	.L222	@cond_branch
	mov	r2, #0x0
	cmp	r2, r4
	bcs	.L224	@cond_branch
.L226:
	add	r1, r6, r2
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r4
	bcc	.L226	@cond_branch
.L224:
	mov	r0, #0x1
	b	.L230
.L232:
	.align	2, 0
.L231:
	.word	gSharedMem
	.word	0xff8
	.word	0x8012025
	.word	0xff4
.L222:
	mov	r0, #0x2
	b	.L230
.L221:
	mov	r0, #0x0
.L230:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 sub_8125B88,.Lfe18-sub_8125B88
	.align	2, 0
	.globl	DoReadFlashWholeSection
	.type	 DoReadFlashWholeSection,function
	.thumb_func
DoReadFlashWholeSection:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	mov	r1, #0x0
	bl	ReadFlash
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 DoReadFlashWholeSection,.Lfe19-DoReadFlashWholeSection
	.align	2, 0
	.globl	CalculateChecksum
	.type	 CalculateChecksum,function
	.thumb_func
CalculateChecksum:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	mov	r2, #0x0
	mov	r3, #0x0
	lsr	r1, r1, #0x12
	cmp	r2, r1
	bcs	.L236	@cond_branch
.L238:
	ldmia	r4!, {r0}
	add	r2, r2, r0
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, r1
	bcc	.L238	@cond_branch
.L236:
	lsr	r0, r2, #0x10
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 CalculateChecksum,.Lfe20-CalculateChecksum
	.align	2, 0
	.globl	HandleSavingData
	.type	 HandleSavingData,function
	.thumb_func
HandleSavingData:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bhi	.L256	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L271
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L272:
	.align	2, 0
.L271:
	.word	.L270
	.align	2, 0
	.align	2, 0
.L270:
	.word	.L256
	.word	.L257
	.word	.L263
	.word	.L248
	.word	.L264
	.word	.L242
.L242:
	mov	r4, #0x1c
	ldr	r5, .L273
.L246:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1f
	bls	.L246	@cond_branch
.L248:
	mov	r0, #0xa
	bl	GetGameStat
	ldr	r1, .L273+0x4
	cmp	r0, r1
	bhi	.L249	@cond_branch
	mov	r0, #0xa
	bl	IncrementGameStat
.L249:
	mov	r4, #0x0
	ldr	r5, .L273+0x8
.L253:
	add	r0, r4, #0
	add	r0, r0, #0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r4, #0x3
	add	r2, r2, r5
	ldr	r1, [r2]
	ldrh	r2, [r2, #0x4]
	bl	HandleWriteSectorNBytes
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L253	@cond_branch
.L256:
	bl	SaveSerializedGame
	ldr	r0, .L273+0xc
	ldr	r1, .L273+0x10
	bl	save_write_to_flash
	b	.L241
.L274:
	.align	2, 0
.L273:
	.word	EraseFlashSector
	.word	0x3e6
	.word	gHallOfFameSaveSectionLocations
	.word	0xffff
	.word	gSaveSectionLocations
.L257:
	bl	SaveSerializedGame
	mov	r4, #0x0
.L261:
	add	r0, r4, #0
	ldr	r1, .L275
	bl	save_write_to_flash
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L261	@cond_branch
	b	.L241
.L276:
	.align	2, 0
.L275:
	.word	gSaveSectionLocations
.L263:
	bl	SaveSerializedGame
	ldr	r1, .L277
	mov	r0, #0x0
	bl	save_write_to_flash
	b	.L241
.L278:
	.align	2, 0
.L277:
	.word	gSaveSectionLocations
.L264:
	mov	r4, #0x1c
	ldr	r5, .L279
.L268:
	ldr	r1, [r5]
	add	r0, r4, #0
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1f
	bls	.L268	@cond_branch
	bl	SaveSerializedGame
	ldr	r0, .L279+0x4
	ldr	r1, .L279+0x8
	bl	save_write_to_flash
.L241:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L280:
	.align	2, 0
.L279:
	.word	EraseFlashSector
	.word	0xffff
	.word	gSaveSectionLocations
.Lfe21:
	.size	 HandleSavingData,.Lfe21-HandleSavingData
	.align	2, 0
	.globl	TrySavingData
	.type	 TrySavingData,function
	.thumb_func
TrySavingData:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L285
	ldr	r0, [r0]
	cmp	r0, #0x1
	beq	.L282	@cond_branch
	mov	r0, #0xff
	b	.L284
.L286:
	.align	2, 0
.L285:
	.word	gFlashMemoryPresent
.L282:
	add	r0, r4, #0
	bl	HandleSavingData
	ldr	r0, .L287
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L283	@cond_branch
	add	r0, r4, #0
	bl	DoSaveFailedScreen
	mov	r0, #0xff
	b	.L284
.L288:
	.align	2, 0
.L287:
	.word	gDamagedSaveSectors
.L283:
	mov	r0, #0x1
.L284:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 TrySavingData,.Lfe22-TrySavingData
	.align	2, 0
	.globl	sub_8125D80
	.type	 sub_8125D80,function
	.thumb_func
sub_8125D80:
	push	{lr}
	ldr	r0, .L292
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L290	@cond_branch
	bl	SaveSerializedGame
	ldr	r0, .L292+0x4
	bl	RestoreSaveBackupVarsAndIncrement
	mov	r0, #0x0
	b	.L291
.L293:
	.align	2, 0
.L292:
	.word	gFlashMemoryPresent
	.word	gSaveSectionLocations
.L290:
	mov	r0, #0x1
.L291:
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 sub_8125D80,.Lfe23-sub_8125D80
	.align	2, 0
	.globl	sub_8125DA8
	.type	 sub_8125DA8,function
	.thumb_func
sub_8125DA8:
	push	{r4, lr}
	ldr	r1, .L299
	mov	r0, #0xe
	bl	sub_812550C
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L299+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L295	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L295:
	cmp	r4, #0xff
	beq	.L296	@cond_branch
	mov	r0, #0x0
	b	.L298
.L300:
	.align	2, 0
.L299:
	.word	gSaveSectionLocations
	.word	gDamagedSaveSectors
.L296:
	mov	r0, #0x1
.L298:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 sub_8125DA8,.Lfe24-sub_8125DA8
	.align	2, 0
	.globl	sub_8125DDC
	.type	 sub_8125DDC,function
	.thumb_func
sub_8125DDC:
	push	{lr}
	ldr	r1, .L303
	mov	r0, #0xe
	bl	sub_812556C
	ldr	r0, .L303+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L302	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L302:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L304:
	.align	2, 0
.L303:
	.word	gSaveSectionLocations
	.word	gDamagedSaveSectors
.Lfe25:
	.size	 sub_8125DDC,.Lfe25-sub_8125DDC
	.align	2, 0
	.globl	sub_8125E04
	.type	 sub_8125E04,function
	.thumb_func
sub_8125E04:
	push	{lr}
	ldr	r1, .L307
	mov	r0, #0xe
	bl	sub_8125758
	ldr	r0, .L307+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L306	@cond_branch
	mov	r0, #0x0
	bl	DoSaveFailedScreen
.L306:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L308:
	.align	2, 0
.L307:
	.word	gSaveSectionLocations
	.word	gDamagedSaveSectors
.Lfe26:
	.size	 sub_8125E04,.Lfe26-sub_8125E04
	.align	2, 0
	.globl	sub_8125E2C
	.type	 sub_8125E2C,function
	.thumb_func
sub_8125E2C:
	push	{r4, lr}
	ldr	r0, .L312
	ldr	r0, [r0]
	cmp	r0, #0x1
	bne	.L310	@cond_branch
	bl	SaveSerializedGame
	ldr	r4, .L312+0x4
	add	r0, r4, #0
	bl	RestoreSaveBackupVars
	ldr	r0, .L312+0x8
	ldrh	r0, [r0]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	sub_812556C
	mov	r0, #0x0
	b	.L311
.L313:
	.align	2, 0
.L312:
	.word	gFlashMemoryPresent
	.word	gSaveSectionLocations
	.word	gUnknown_03005EB4
.L310:
	mov	r0, #0x1
.L311:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 sub_8125E2C,.Lfe27-sub_8125E2C
	.align	2, 0
	.globl	sub_8125E6C
	.type	 sub_8125E6C,function
	.thumb_func
sub_8125E6C:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	ldr	r0, .L318
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r0, r1, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x4
	bhi	.L315	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L318+0x4
	add	r1, r4, #0
	bl	sub_812556C
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_81257F0
	b	.L316
.L319:
	.align	2, 0
.L318:
	.word	gUnknown_03005EB4
	.word	gSaveSectionLocations
.L315:
	ldr	r1, .L320
	add	r0, r5, #0
	bl	sub_81257F0
	mov	r6, #0x1
.L316:
	ldr	r0, .L320+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L317	@cond_branch
	mov	r0, #0x1
	bl	DoSaveFailedScreen
.L317:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L321:
	.align	2, 0
.L320:
	.word	gSaveSectionLocations
	.word	gDamagedSaveSectors
.Lfe28:
	.size	 sub_8125E6C,.Lfe28-sub_8125E6C
	.align	2, 0
	.globl	sub_8125EC8
	.type	 sub_8125EC8,function
	.thumb_func
sub_8125EC8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L331
	ldr	r0, [r0]
	cmp	r0, #0x1
	beq	.L323	@cond_branch
	ldr	r1, .L331+0x4
	mov	r0, #0x4
	strh	r0, [r1]
	mov	r0, #0xff
	b	.L330
.L332:
	.align	2, 0
.L331:
	.word	gFlashMemoryPresent
	.word	gSaveFileStatus
.L323:
	cmp	r1, #0
	beq	.L326	@cond_branch
	cmp	r1, #0x3
	beq	.L327	@cond_branch
.L326:
	ldr	r0, .L333
	ldr	r1, .L333+0x4
	bl	sub_812587C
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	LoadSerializedGame
	ldr	r0, .L333+0x8
	strh	r4, [r0]
	ldr	r1, .L333+0xc
	mov	r0, #0x0
	str	r0, [r1]
	b	.L324
.L334:
	.align	2, 0
.L333:
	.word	0xffff
	.word	gSaveSectionLocations
	.word	gSaveFileStatus
	.word	gGameContinueCallback
.L327:
	ldr	r5, .L335
	ldr	r1, [r5]
	ldrh	r2, [r5, #0x4]
	mov	r0, #0x1c
	bl	sub_8125B88
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bne	.L324	@cond_branch
	ldr	r1, [r5, #0x8]
	ldrh	r2, [r5, #0xc]
	mov	r0, #0x1d
	bl	sub_8125B88
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L324:
	add	r0, r4, #0
.L330:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L336:
	.align	2, 0
.L335:
	.word	gHallOfFameSaveSectionLocations
.Lfe29:
	.size	 sub_8125EC8,.Lfe29-sub_8125EC8
	.align	2, 0
	.globl	unref_sub_8125F4C
	.type	 unref_sub_8125F4C,function
	.thumb_func
unref_sub_8125F4C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	mov	r1, #0x0
	ldr	r6, .L345
	mov	r5, #0x0
	ldr	r3, .L345+0x4
.L341:
	add	r0, r2, r1
	strb	r5, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, r3
	bls	.L341	@cond_branch
	ldrb	r0, [r6]
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	mov	r1, #0x0
	add	r2, r4, #0
	bl	ReadFlash
	ldr	r1, .L345+0x8
	add	r0, r4, r1
	ldr	r1, [r0]
	ldr	r0, .L345+0xc
	cmp	r1, r0
	bne	.L343	@cond_branch
	mov	r0, #0x1
	b	.L344
.L346:
	.align	2, 0
.L345:
	.word	gFlashSectors
	.word	0xfff
	.word	0xff4
	.word	0x8012025
.L343:
	mov	r0, #0x0
.L344:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 unref_sub_8125F4C,.Lfe30-unref_sub_8125F4C
	.align	2, 0
	.globl	unref_sub_8125FA0
	.type	 unref_sub_8125FA0,function
	.thumb_func
unref_sub_8125FA0:
	push	{r4, r5, r6, r7, lr}
	mov	r0, #0x0
	bl	TrySavingData
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r7, .L358
	ldr	r6, .L358+0x4
.L351:
	add	r0, r4, r6
	ldrb	r0, [r0]
	ldr	r1, [r7]
	bl	_call_via_r1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x1
	bls	.L351	@cond_branch
	cmp	r5, #0xff
	bne	.L353	@cond_branch
	mov	r0, #0x3
	b	.L357
.L359:
	.align	2, 0
.L358:
	.word	EraseFlashSector
	.word	gFlashSectors
.L353:
	cmp	r5, #0x3
	beq	.L355	@cond_branch
	mov	r0, #0x0
	bl	sub_8125EC8
	mov	r0, #0x1
	b	.L357
.L355:
	mov	r0, #0x2
.L357:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 unref_sub_8125FA0,.Lfe31-unref_sub_8125FA0
	.align	2, 0
	.globl	unref_sub_8125FF0
	.type	 unref_sub_8125FF0,function
	.thumb_func
unref_sub_8125FF0:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r3, r1, #0x10
	ldr	r4, .L374
	mov	r2, #0x0
	ldr	r7, .L374+0x4
	mov	r5, #0x0
	ldr	r1, .L374+0x8
.L364:
	add	r0, r4, r2
	strb	r5, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r1
	bls	.L364	@cond_branch
	ldr	r0, .L374+0xc
	add	r1, r4, r0
	ldr	r0, .L374+0x10
	str	r0, [r1]
	mov	r2, #0x0
	cmp	r2, r3
	bcs	.L367	@cond_branch
.L369:
	add	r1, r4, r2
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	bcc	.L369	@cond_branch
.L367:
	ldrb	r0, [r7]
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	add	r1, r4, #0
	bl	ProgramFlashSectorAndVerifyNBytes
	ldr	r1, .L374+0x14
	str	r0, [r1]
	cmp	r0, #0
	bne	.L371	@cond_branch
	mov	r0, #0x1
	b	.L373
.L375:
	.align	2, 0
.L374:
	.word	gSharedMem
	.word	gFlashSectors
	.word	0xfff
	.word	0xff4
	.word	0x8012025
	.word	gLastSaveSectorStatus
.L371:
	mov	r0, #0xff
.L373:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 unref_sub_8125FF0,.Lfe32-unref_sub_8125FF0
	.align	2, 0
	.globl	unref_sub_8126068
	.type	 unref_sub_8126068,function
	.thumb_func
unref_sub_8126068:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ProgramFlashSectorAndVerify
	cmp	r0, #0
	bne	.L377	@cond_branch
	mov	r0, #0x1
	b	.L379
.L377:
	mov	r0, #0xff
.L379:
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 unref_sub_8126068,.Lfe33-unref_sub_8126068
	.align	2, 0
	.globl	unref_sub_8126080
	.type	 unref_sub_8126080,function
	.thumb_func
unref_sub_8126080:
	push	{lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	mov	r1, #0x0
	bl	ReadFlash
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 unref_sub_8126080,.Lfe34-unref_sub_8126080
	.comm	gLastWrittenSector, 4	@ 2
	.comm	gLastSaveCounter, 4	@ 4
	.comm	gLastKnownGoodSector, 4	@ 2
	.comm	gDamagedSaveSectors, 4	@ 4
	.comm	gSaveCounter, 4	@ 4
	.comm	gFastSaveSection, 4	@ 4
	.comm	gUnknown_03005EB4, 4	@ 2
	.comm	gSaveFileStatus, 4	@ 2
	.comm	gGameContinueCallback, 4	@ 4
.text
	.align	2, 0
