@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	CB2_InitClearSaveDataScreen
	.type	 CB2_InitClearSaveDataScreen,function
	.thumb_func
CB2_InitClearSaveDataScreen:
	push	{lr}
	bl	InitClearSaveDataScreen
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L4
	mov	r1, #0x0
	bl	CreateTask
.L3:
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	Task_InitMenu
.Lfe1:
	.size	 CB2_InitClearSaveDataScreen,.Lfe1-CB2_InitClearSaveDataScreen
	.align	2, 0
	.type	 VBlankCB_ClearSaveDataScreen,function
	.thumb_func
VBlankCB_ClearSaveDataScreen:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 VBlankCB_ClearSaveDataScreen,.Lfe2-VBlankCB_ClearSaveDataScreen
	.align	2, 0
	.type	 Task_InitMenu,function
	.thumb_func
Task_InitMenu:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ResetSpriteData
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xca
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L8
	bl	SetVBlankCallback
	mov	r0, #0x2
	mov	r1, #0xe
	mov	r2, #0x1b
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	ldr	r0, .L8+0x4
	mov	r1, #0x3
	mov	r2, #0xf
	bl	MenuPrint
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x8
	mov	r3, #0x6
	bl	MenuDrawTextWindow
	ldr	r3, .L8+0x8
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x2
	bl	PrintMenuItems
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x5
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x2
	mov	r3, #0x2
	bl	InitMenu
	ldr	r1, .L8+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L8+0x10
	str	r1, [r0]
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	VBlankCB_ClearSaveDataScreen
	.word	gSystemText_ClearAllSaveDataPrompt
	.word	gMenuYesNoItems
	.word	gTasks
	.word	Task_ProcessMenuInput
.Lfe3:
	.size	 Task_InitMenu,.Lfe3-Task_InitMenu
	.align	2, 0
	.type	 Task_ProcessMenuInput,function
	.thumb_func
Task_ProcessMenuInput:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	ProcessMenuInputNoWrap_
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L12	@cond_branch
	cmp	r1, #0
	bgt	.L17	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L14	@cond_branch
	b	.L11
.L17:
	cmp	r1, #0x1
	beq	.L14	@cond_branch
	b	.L11
.L12:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L18
	bl	sub_8071F40
	ldr	r1, .L18+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L18+0x8
	str	r1, [r0]
	b	.L11
.L19:
	.align	2, 0
.L18:
	.word	gSystemText_ClearingData
	.word	gTasks
	.word	Task_ClearSaveData
.L14:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r0, .L20
	bl	SetMainCallback2
.L11:
	bl	AnimateSprites
	bl	BuildOamBuffer
	pop	{r4}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	CB2_SoftReset
.Lfe4:
	.size	 Task_ProcessMenuInput,.Lfe4-Task_ProcessMenuInput
	.align	2, 0
	.type	 Task_ClearSaveData,function
	.thumb_func
Task_ClearSaveData:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ClearSaveData
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r0, .L23
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	CB2_SoftReset
.Lfe5:
	.size	 Task_ClearSaveData,.Lfe5-Task_ClearSaveData
	.align	2, 0
	.type	 CB2_ClearSaveDataScreen,function
	.thumb_func
CB2_ClearSaveDataScreen:
	push	{lr}
	bl	RunTasks
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 CB2_ClearSaveDataScreen,.Lfe6-CB2_ClearSaveDataScreen
	.align	2, 0
	.type	 VBlankCB_InitClearSaveDataScreen,function
	.thumb_func
VBlankCB_InitClearSaveDataScreen:
	push	{lr}
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 VBlankCB_InitClearSaveDataScreen,.Lfe7-VBlankCB_InitClearSaveDataScreen
	.align	2, 0
	.type	 InitClearSaveDataScreen,function
	.thumb_func
InitClearSaveDataScreen:
	push	{r4, lr}
	add	sp, sp, #0xfffffff4
	ldr	r0, .L45
	ldr	r1, .L45+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L30	@cond_branch
	cmp	r0, #0x1
	bne	.LCB246
	b	.L41	@long jump
.LCB246:
.L30:
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	mov	r4, #0x0
	strh	r4, [r0]
	add	r0, r0, #0x10
	strh	r4, [r0]
	add	r0, r0, #0x2
	strh	r4, [r0]
	add	r0, r0, #0xa
	strh	r4, [r0]
	add	r0, r0, #0x2
	strh	r4, [r0]
	add	r0, r0, #0x22
	strh	r4, [r0]
	add	r0, r0, #0x4
	strh	r4, [r0]
	add	r0, r0, #0x4
	strh	r4, [r0]
	add	r0, r0, #0x2
	strh	r4, [r0]
	add	r0, r0, #0x6
	strh	r4, [r0]
	add	r0, r0, #0x2
	strh	r4, [r0]
	add	r0, r0, #0x2
	strh	r4, [r0]
	add	r0, sp, #0x4
	strh	r4, [r0]
	ldr	r1, .L45+0x8
	str	r0, [r1]
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L45+0xc
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	add	r0, sp, #0x8
	str	r0, [r1]
	mov	r0, #0xe0
	lsl	r0, r0, #0x13
	str	r0, [r1, #0x4]
	ldr	r0, .L45+0x10
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r0, sp, #0x4
	strh	r2, [r0]
	str	r0, [r1]
	ldr	r0, .L45+0x14
	str	r0, [r1, #0x4]
	ldr	r0, .L45+0x18
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	bl	ResetPaletteFade
	ldr	r2, .L45+0x1c
	ldr	r0, .L45+0x20
	strh	r0, [r2]
	ldr	r1, .L45+0x24
	strh	r0, [r1]
	ldr	r0, .L45+0x28
	strh	r0, [r2, #0x2]
	strh	r0, [r1, #0x2]
	mov	r1, #0x0
	ldr	r3, .L45+0x2c
	ldr	r0, .L45+0x30
	add	r2, r0, #0
.L34:
	lsl	r0, r1, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L34	@cond_branch
	mov	r1, #0x0
	ldr	r4, .L45+0x34
	mov	r3, #0x1
	ldr	r2, .L45+0x38
.L39:
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	strh	r3, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, r2
	bls	.L39	@cond_branch
	bl	ResetTasks
	bl	ResetSpriteData
	ldr	r0, .L45+0x3c
	bl	SetUpWindowConfig
	ldr	r0, .L45+0x40
	bl	InitMenuWindow
	mov	r0, #0x1
	neg	r0, r0
	ldr	r1, .L45+0x44
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r2, .L45+0x48
	ldrh	r1, [r2]
	mov	r0, #0x0
	strh	r0, [r2]
	ldr	r3, .L45+0x4c
	ldrh	r0, [r3]
	mov	r4, #0x1
	orr	r0, r0, r4
	strh	r0, [r3]
	strh	r1, [r2]
	ldr	r2, .L45+0x50
	ldrh	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L45+0x54
	bl	SetVBlankCallback
	ldr	r1, .L45+0x58
	ldr	r2, .L45+0x5c
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0xe
	mov	r2, #0x90
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L45
	ldr	r1, .L45+0x4
	add	r0, r0, r1
	strb	r4, [r0]
	b	.L42
.L46:
	.align	2, 0
.L45:
	.word	gMain
	.word	0x43c
	.word	0x40000d4
	.word	0x8100c000
	.word	0x85000100
	.word	0x5000002
	.word	0x810001ff
	.word	gPlttBufferUnfaded
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	0x3945
	.word	0x6000020
	.word	0x1111
	.word	0x6003800
	.word	0x4ff
	.word	gWindowConfig_81E6C3C
	.word	gWindowConfig_81E6CE4
	.word	0xffff
	.word	0x4000208
	.word	0x4000200
	.word	0x4000004
	.word	VBlankCB_InitClearSaveDataScreen
	.word	0x400000e
	.word	0x703
.L41:
	bl	UpdatePaletteFade
	ldr	r0, .L47
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L42	@cond_branch
	ldr	r0, .L47+0x4
	bl	SetMainCallback2
	mov	r0, #0x1
	b	.L44
.L48:
	.align	2, 0
.L47:
	.word	gPaletteFade
	.word	CB2_ClearSaveDataScreen
.L42:
	mov	r0, #0x0
.L44:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 InitClearSaveDataScreen,.Lfe8-InitClearSaveDataScreen
	.align	2, 0
	.type	 CB2_SoftReset,function
	.thumb_func
CB2_SoftReset:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L56
	ldr	r1, .L56+0x4
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L52	@cond_branch
	cmp	r0, #0x1
	beq	.L53	@cond_branch
.L52:
	mov	r0, #0x1
	neg	r0, r0
	ldr	r1, .L56+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, #0x1
	strb	r0, [r4]
	b	.L49
.L57:
	.align	2, 0
.L56:
	.word	gMain
	.word	0x43c
	.word	0xffff
.L53:
	bl	UpdatePaletteFade
	ldr	r0, .L58
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L49	@cond_branch
	bl	DoSoftReset
.L49:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gPaletteFade
.Lfe9:
	.size	 CB2_SoftReset,.Lfe9-CB2_SoftReset
.text
	.align	2, 0
