@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	recordMixingSecretBases
.data
	.align	2, 0
	.type	 recordMixingSecretBases,object
	.size	 recordMixingSecretBases,4
recordMixingSecretBases:
	.word	gSaveBlock1+0x1a08
	.globl	recordMixingTvShows
	.align	2, 0
	.type	 recordMixingTvShows,object
	.size	 recordMixingTvShows,4
recordMixingTvShows:
	.word	gSaveBlock1+0x2738
	.globl	gUnknown_083D0274
	.align	2, 0
	.type	 gUnknown_083D0274,object
	.size	 gUnknown_083D0274,4
gUnknown_083D0274:
	.word	gSaveBlock1+0x2abc
	.globl	gUnknown_083D0278
	.align	2, 0
	.type	 gUnknown_083D0278,object
	.size	 gUnknown_083D0278,4
gUnknown_083D0278:
	.word	gSaveBlock1+0x2d94
	.globl	recordMixingEasyChatPairs
	.align	2, 0
	.type	 recordMixingEasyChatPairs,object
	.size	 recordMixingEasyChatPairs,4
recordMixingEasyChatPairs:
	.word	gSaveBlock1+0x2dd4
	.globl	gUnknown_083D0280
	.align	2, 0
	.type	 gUnknown_083D0280,object
	.size	 gUnknown_083D0280,4
gUnknown_083D0280:
	.word	gUnknown_02038738
	.globl	gBattleTowerPlayerRecord
	.align	2, 0
	.type	 gBattleTowerPlayerRecord,object
	.size	 gBattleTowerPlayerRecord,4
gBattleTowerPlayerRecord:
	.word	gSaveBlock2+0xa8
.text
	.align	2, 0
	.globl	sub_80B929C
	.type	 sub_80B929C,function
	.thumb_func
sub_80B929C:
	push	{lr}
	ldr	r0, .L3
	bl	sub_8083A84
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	Task_RecordMixing_Main
.Lfe1:
	.size	 sub_80B929C,.Lfe1-sub_80B929C
	.align	2, 0
	.globl	RecordMixing_PrepareExchangePacket
	.type	 RecordMixing_PrepareExchangePacket,function
	.thumb_func
RecordMixing_PrepareExchangePacket:
	push	{r4, r5, r6, lr}
	bl	sub_80BC300
	bl	sub_80C045C
	ldr	r6, .L7
	ldr	r0, .L7+0x4
	ldr	r1, [r0]
	mov	r2, #0xc8
	lsl	r2, r2, #0x4
	add	r0, r6, #0
	bl	memcpy
	mov	r1, #0xc8
	lsl	r1, r1, #0x4
	add	r0, r6, r1
	ldr	r1, .L7+0x8
	ldr	r1, [r1]
	mov	r2, #0xe1
	lsl	r2, r2, #0x2
	bl	memcpy
	ldr	r2, .L7+0xc
	add	r0, r6, r2
	ldr	r1, .L7+0x10
	ldr	r1, [r1]
	mov	r2, #0x40
	bl	memcpy
	ldr	r1, .L7+0x14
	add	r0, r6, r1
	ldr	r1, .L7+0x18
	ldr	r1, [r1]
	mov	r2, #0x40
	bl	memcpy
	ldr	r2, .L7+0x1c
	add	r0, r6, r2
	ldr	r1, .L7+0x20
	ldr	r1, [r1]
	mov	r2, #0x28
	bl	memcpy
	ldr	r5, .L7+0x24
	ldr	r4, .L7+0x28
	ldr	r0, .L7+0x2c
	add	r1, r4, r0
	add	r0, r5, #0
	mov	r2, #0x38
	bl	memcpy
	ldr	r2, .L7+0x30
	add	r1, r4, r2
	add	r0, r5, #0
	add	r0, r0, #0x38
	mov	r2, #0x38
	bl	memcpy
	ldr	r0, .L7+0x34
	add	r4, r4, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	InitDaycareMailRecordMixing
	ldr	r1, .L7+0x38
	add	r0, r6, r1
	ldr	r1, .L7+0x3c
	ldr	r1, [r1]
	mov	r2, #0x78
	bl	memcpy
	ldr	r2, .L7+0x40
	add	r0, r6, r2
	ldr	r1, .L7+0x44
	ldr	r1, [r1]
	mov	r2, #0xa4
	bl	memcpy
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L6	@cond_branch
	bl	GetRecordMixingGift
	ldr	r2, .L7+0x48
	add	r1, r6, r2
	strh	r0, [r1]
.L6:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gSharedMem+0x18000
	.word	recordMixingSecretBases
	.word	recordMixingTvShows
	.word	0x1004
	.word	gUnknown_083D0274
	.word	0x1044
	.word	gUnknown_083D0278
	.word	0x1084
	.word	recordMixingEasyChatPairs
	.word	gUnknown_02038738
	.word	gSaveBlock1
	.word	0x303c
	.word	0x3074
	.word	0x2f9c
	.word	0x10ac
	.word	gUnknown_083D0280
	.word	0x1124
	.word	gBattleTowerPlayerRecord
	.word	0x11c8
.Lfe2:
	.size	 RecordMixing_PrepareExchangePacket,.Lfe2-RecordMixing_PrepareExchangePacket
	.align	2, 0
	.globl	RecordMixing_ReceiveExchangePacket
	.type	 RecordMixing_ReceiveExchangePacket,function
	.thumb_func
RecordMixing_ReceiveExchangePacket:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r4, r0, #0
	ldr	r5, .L10
	ldr	r6, .L10+0x4
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_80BD674
	mov	r0, #0xc8
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	mov	r8, r0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_80BFD44
	ldr	r1, .L10+0x8
	add	r0, r5, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_80C0514
	ldr	r1, .L10+0xc
	add	r0, r5, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_80B9B1C
	ldr	r1, .L10+0x10
	add	r0, r5, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_80FA4E4
	ldr	r1, .L10+0x14
	add	r0, r5, r1
	add	r1, r6, #0
	add	r2, r4, #0
	mov	r3, r8
	bl	sub_80B9C6C
	ldr	r1, .L10+0x18
	add	r0, r5, r1
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_80B9B70
	ldr	r0, .L10+0x1c
	add	r5, r5, r0
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_80B9F3C
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L11:
	.align	2, 0
.L10:
	.word	gSharedMem+0x8000
	.word	0x1230
	.word	0x1004
	.word	0x1044
	.word	0x1084
	.word	0x10ac
	.word	0x1124
	.word	0x11c8
.Lfe3:
	.size	 RecordMixing_ReceiveExchangePacket,.Lfe3-RecordMixing_ReceiveExchangePacket
	.align	2, 0
	.globl	Task_RecordMixing_SoundEffect
	.type	 Task_RecordMixing_SoundEffect,function
	.thumb_func
Task_RecordMixing_SoundEffect:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L14
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	bne	.L13	@cond_branch
	mov	r0, #0xe2
	bl	PlaySE
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
.L13:
	pop	{r4}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gTasks
.Lfe4:
	.size	 Task_RecordMixing_SoundEffect,.Lfe4-Task_RecordMixing_SoundEffect
	.align	2, 0
	.globl	Task_RecordMixing_Main
	.type	 Task_RecordMixing_Main,function
	.thumb_func
Task_RecordMixing_Main:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L30
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bls	.LCB278
	b	.L17	@long jump
.LCB278:
	lsl	r0, r0, #0x2
	ldr	r1, .L30+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L31:
	.align	2, 0
.L30:
	.word	gTasks+0x8
	.word	.L28
	.align	2, 0
	.align	2, 0
.L28:
	.word	.L18
	.word	.L19
	.word	.L21
	.word	.L22
	.word	.L24
	.word	.L26
.L18:
	ldr	r0, .L32
	ldrb	r0, [r0]
	bl	sub_8007270
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	mov	r1, #0x1
	bl	VarSet
	ldr	r1, .L32+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	bl	RecordMixing_PrepareExchangePacket
	bl	CreateRecordMixingSprite
	mov	r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L32+0x8
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x14]
	ldr	r0, .L32+0xc
	mov	r1, #0x51
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1e]
	b	.L17
.L33:
	.align	2, 0
.L32:
	.word	gSpecialVar_0x8005
	.word	gUnknown_03000718
	.word	sub_80B95F0
	.word	Task_RecordMixing_SoundEffect
.L19:
	ldr	r2, .L34
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L17	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4]
	ldr	r0, .L34+0x4
	bl	FlagSet
	bl	DestroyRecordMixingSprite
	ldrb	r0, [r4, #0x1e]
	bl	DestroyTask
	b	.L17
.L35:
	.align	2, 0
.L34:
	.word	gTasks
	.word	0x834
.L21:
	ldr	r0, .L36
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x14]
	mov	r0, #0x3
	strh	r0, [r4]
	mov	r0, #0xe0
	bl	PlaySE
	b	.L17
.L37:
	.align	2, 0
.L36:
	.word	sub_80BA00C
.L22:
	ldr	r2, .L38
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r5, [r0, #0x4]
	cmp	r5, #0
	bne	.L17	@cond_branch
	mov	r0, #0x4
	strh	r0, [r4]
	bl	sub_8083664
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x14]
	bl	sub_80720B0
	ldr	r0, .L38+0x4
	mov	r1, #0x2
	mov	r2, #0xf
	bl	MenuPrint
	strh	r5, [r4, #0x10]
	b	.L17
.L39:
	.align	2, 0
.L38:
	.word	gTasks
	.word	gOtherText_MixingComplete
.L24:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L17	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4]
	b	.L17
.L26:
	ldr	r2, .L40
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L17	@cond_branch
	bl	sub_8055588
	bl	MenuZeroFillScreen
	add	r0, r5, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
.L17:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	gTasks
.Lfe5:
	.size	 Task_RecordMixing_Main,.Lfe5-Task_RecordMixing_Main
	.align	2, 0
	.globl	sub_80B95F0
	.type	 sub_80B95F0,function
	.thumb_func
sub_80B95F0:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r7, .L69
	add	r5, r0, r7
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	cmp	r1, #0x64
	beq	.L45	@cond_branch
	cmp	r1, #0x64
	bgt	.L65	@cond_branch
	cmp	r1, #0x1
	bne	.LCB499
	b	.L58	@long jump
.LCB499:
	cmp	r1, #0x1
	bgt	.L66	@cond_branch
	cmp	r1, #0
	beq	.L44	@cond_branch
	b	.L43
.L70:
	.align	2, 0
.L69:
	.word	gTasks
.L66:
	cmp	r1, #0x2
	bne	.LCB514
	b	.L60	@long jump
.LCB514:
	cmp	r1, #0x5
	bne	.LCB516
	b	.L61	@long jump
.LCB516:
	b	.L43
.L65:
	cmp	r1, #0xc9
	beq	.L51	@cond_branch
	cmp	r1, #0xc9
	bgt	.L67	@cond_branch
	cmp	r1, #0x65
	beq	.L47	@cond_branch
	b	.L43
.L67:
	ldr	r0, .L71
	cmp	r1, r0
	beq	.L54	@cond_branch
	add	r0, r0, #0x63
	cmp	r1, r0
	beq	.L56	@cond_branch
	b	.L43
.L72:
	.align	2, 0
.L71:
	.word	0x12d
.L44:
	bl	sub_80B9A78
	bl	MenuDisplayMessageBox
	ldr	r0, .L73
	mov	r1, #0x2
	mov	r2, #0xf
	bl	MenuPrint
	mov	r0, #0xe1
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x18]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	bl	ClearLinkCallback_2
	b	.L43
.L74:
	.align	2, 0
.L73:
	.word	gOtherText_MixingRecordsWithFriend
.L45:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bgt	.LCB577
	b	.L43	@long jump
.LCB577:
	mov	r0, #0x0
	strh	r0, [r5, #0x20]
	mov	r0, #0x65
	b	.L68
.L47:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsLinkMaster
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L48	@cond_branch
	bl	sub_800820C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.LCB602
	b	.L43	@long jump
.LCB602:
	mov	r0, #0x15
	bl	PlaySE
	mov	r1, #0x0
	mov	r0, #0xc9
	strh	r0, [r5, #0x8]
	strh	r1, [r5, #0x20]
	b	.L43
.L48:
	mov	r0, #0x16
	bl	PlaySE
	ldr	r0, .L75
	b	.L68
.L76:
	.align	2, 0
.L75:
	.word	0x12d
.L51:
	bl	sub_800820C
	add	r4, r0, #0
	bl	GetLinkPlayerCount_2
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L43	@cond_branch
	ldrh	r4, [r5, #0x20]
	add	r4, r4, #0x1
	strh	r4, [r5, #0x20]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r1, r1, #0x1
	cmp	r4, r1
	ble	.L43	@cond_branch
	bl	sub_8007F4C
	mov	r0, #0x1
	b	.L68
.L54:
	bl	sub_800820C
	add	r4, r0, #0
	bl	GetLinkPlayerCount_2
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L43	@cond_branch
	mov	r0, #0x1
	b	.L68
.L56:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L43	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0x8]
	mov	r0, #0x0
	strh	r0, [r5, #0x20]
	b	.L43
.L58:
	ldr	r0, .L77
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r4, .L77+0x4
	bl	GetMultiplayerId_
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x5
	b	.L68
.L78:
	.align	2, 0
.L77:
	.word	gReceivedRemoteLinkPlayers
	.word	gStringVar1
.L60:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r5, #0x14]
	strh	r1, [r5, #0x8]
	bl	GetMultiplayerId_
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	ldr	r0, .L79
	str	r0, [r5]
	ldr	r4, .L79+0x4
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r0, r4, #0
	bl	StorePtrInTaskData
	ldr	r0, .L79+0x8
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1c]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r0, r1, r7
	strh	r6, [r0, #0x8]
	ldr	r0, .L79+0xc
	add	r4, r4, r0
	add	r1, r7, r1
	add	r1, r1, #0x12
	add	r0, r4, #0
	bl	StorePtrInTaskData
	b	.L43
.L80:
	.align	2, 0
.L79:
	.word	Task_RecordMixing_SendPacket
	.word	gSharedMem+0x18000
	.word	Task_RecordMixing_CopyReceiveBuffer
	.word	0xffff0000
.L61:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L43	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x1c]
	mov	r0, #0x2
.L68:
	strh	r0, [r5, #0x8]
.L43:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_80B95F0,.Lfe6-sub_80B95F0
	.align	2, 0
	.globl	Task_RecordMixing_SendPacket
	.type	 Task_RecordMixing_SendPacket,function
	.thumb_func
Task_RecordMixing_SendPacket:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L95
	add	r4, r1, r0
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	add	r2, r0, #0
	cmp	r1, #0x4
	bhi	.L82	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L95+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L96:
	.align	2, 0
.L95:
	.word	gTasks
	.word	.L92
	.align	2, 0
	.align	2, 0
.L92:
	.word	.L83
	.word	.L84
	.word	.L82
	.word	.L87
	.word	.L90
.L83:
	add	r0, r4, #0
	add	r0, r0, #0xc
	bl	LoadPtrFromTaskData
	add	r1, r0, #0
	mov	r0, #0x10
	ldrsh	r2, [r4, r0]
	mov	r0, #0xc8
	mul	r0, r0, r2
	add	r1, r1, r0
	ldr	r0, .L97
	mov	r2, #0xc8
	bl	memcpy
	b	.L94
.L98:
	.align	2, 0
.L97:
	.word	gBlockSendBuffer
.L84:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L94	@cond_branch
	mov	r0, #0x1
	bl	sub_8007E9C
	b	.L94
.L87:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x18
	bne	.L88	@cond_branch
.L94:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L82
.L88:
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	b	.L82
.L90:
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L82	@cond_branch
	ldr	r0, .L99
	str	r0, [r4]
.L82:
	pop	{r4}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	Task_RecordMixing_SendPacket_SwitchToReceive
.Lfe7:
	.size	 Task_RecordMixing_SendPacket,.Lfe7-Task_RecordMixing_SendPacket
	.align	2, 0
	.globl	Task_RecordMixing_CopyReceiveBuffer
	.type	 Task_RecordMixing_CopyReceiveBuffer,function
	.thumb_func
Task_RecordMixing_CopyReceiveBuffer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r0, r0, #0x2
	ldr	r1, [sp]
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L114
	add	r0, r0, r1
	mov	sl, r0
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	bl	sub_8008198
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [sp, #0x4]
	cmp	r3, r0
	bne	.L102	@cond_branch
	mov	r0, #0x0
	b	.L113
.L115:
	.align	2, 0
.L114:
	.word	gTasks
.L106:
	ldr	r1, [sp, #0x4]
	mov	r2, r9
	asr	r1, r1, r2
	mov	r0, #0x1
	and	r1, r1, r0
	mov	r3, #0x1
	add	r3, r3, r9
	mov	r8, r3
	cmp	r1, #0
	beq	.L105	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x12
	bl	LoadPtrFromTaskData
	mov	r1, r8
	lsl	r4, r1, #0x1
	mov	r5, sl
	add	r5, r5, #0x8
	add	r4, r5, r4
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	mov	r3, #0xc8
	mul	r1, r1, r3
	add	r0, r0, r1
	ldr	r7, .L116
	mov	r1, r9
	mul	r1, r1, r7
	add	r6, r0, r1
	mov	r0, r9
	str	r3, [sp, #0xc]
	bl	GetPlayerRecvBuffer
	add	r1, r0, #0
	mov	r0, #0x0
	ldrsh	r2, [r4, r0]
	add	r0, r2, #0x1
	ldr	r3, [sp, #0xc]
	mul	r0, r0, r3
	cmp	r0, r7
	bls	.L108	@cond_branch
	mul	r2, r2, r3
	sub	r2, r7, r2
	add	r0, r6, #0
	bl	memcpy
	b	.L109
.L117:
	.align	2, 0
.L116:
	.word	0x1230
.L108:
	add	r0, r6, #0
	mov	r2, #0xc8
	bl	memcpy
.L109:
	mov	r0, r9
	bl	ResetBlockReceivedFlag
	mov	r2, r8
	lsl	r1, r2, #0x1
	add	r1, r5, r1
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x18
	bne	.L105	@cond_branch
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L105:
	mov	r3, r8
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
.L113:
	mov	r9, r0
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r9, r0
	bcc	.L106	@cond_branch
	ldr	r2, .L118
	mov	r0, sl
	mov	r3, #0x8
	ldrsh	r1, [r0, r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
.L102:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, [sp, #0x8]
	cmp	r1, r0
	bne	.L112	@cond_branch
	ldr	r0, [sp]
	bl	DestroyTask
.L112:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gTasks
.Lfe8:
	.size	 Task_RecordMixing_CopyReceiveBuffer,.Lfe8-Task_RecordMixing_CopyReceiveBuffer
	.align	2, 0
	.globl	sub_80B99B4
	.type	 sub_80B99B4,function
	.thumb_func
sub_80B99B4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	ldr	r2, .L122
	add	r0, r0, r2
	mov	r4, #0x1c
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L121	@cond_branch
	add	r0, r3, #0
	bl	DestroyTask
.L121:
	pop	{r4}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gTasks
.Lfe9:
	.size	 sub_80B99B4,.Lfe9-sub_80B99B4
	.align	2, 0
	.globl	Task_RecordMixing_ReceivePacket
	.type	 Task_RecordMixing_ReceivePacket,function
	.thumb_func
Task_RecordMixing_ReceivePacket:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L126
	add	r1, r1, r0
	ldr	r0, .L126+0x4
	str	r0, [r1]
	ldr	r0, .L126+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L125	@cond_branch
	mov	r2, #0x12
	ldrsh	r0, [r1, r2]
	bl	RecordMixing_ReceiveExchangePacket
.L125:
	pop	{r0}
	bx	r0
.L127:
	.align	2, 0
.L126:
	.word	gTasks
	.word	sub_80B99B4
	.word	gUnknown_03000718
.Lfe10:
	.size	 Task_RecordMixing_ReceivePacket,.Lfe10-Task_RecordMixing_ReceivePacket
	.align	2, 0
	.globl	Task_RecordMixing_SendPacket_SwitchToReceive
	.type	 Task_RecordMixing_SendPacket_SwitchToReceive,function
	.thumb_func
Task_RecordMixing_SendPacket_SwitchToReceive:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L129
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L129+0x4
	str	r0, [r1]
	ldr	r1, .L129+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L130:
	.align	2, 0
.L129:
	.word	gTasks
	.word	Task_RecordMixing_ReceivePacket
	.word	gUnknown_03000718
.Lfe11:
	.size	 Task_RecordMixing_SendPacket_SwitchToReceive,.Lfe11-Task_RecordMixing_SendPacket_SwitchToReceive
	.align	2, 0
	.globl	LoadPtrFromTaskData
	.type	 LoadPtrFromTaskData,function
	.thumb_func
LoadPtrFromTaskData:
	add	r1, r0, #0
	ldrh	r0, [r1]
	ldrh	r1, [r1, #0x2]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	bx	lr
.Lfe12:
	.size	 LoadPtrFromTaskData,.Lfe12-LoadPtrFromTaskData
	.align	2, 0
	.globl	StorePtrInTaskData
	.type	 StorePtrInTaskData,function
	.thumb_func
StorePtrInTaskData:
	strh	r0, [r1]
	lsr	r0, r0, #0x10
	strh	r0, [r1, #0x2]
	bx	lr
.Lfe13:
	.size	 StorePtrInTaskData,.Lfe13-StorePtrInTaskData
	.align	2, 0
	.globl	GetMultiplayerId_
	.type	 GetMultiplayerId_,function
	.thumb_func
GetMultiplayerId_:
	push	{lr}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 GetMultiplayerId_,.Lfe14-GetMultiplayerId_
	.align	2, 0
	.globl	GetPlayerRecvBuffer
	.type	 GetPlayerRecvBuffer,function
	.thumb_func
GetPlayerRecvBuffer:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	ldr	r1, .L135
	add	r0, r0, r1
	bx	lr
.L136:
	.align	2, 0
.L135:
	.word	gBlockRecvBuffer
.Lfe15:
	.size	 GetPlayerRecvBuffer,.Lfe15-GetPlayerRecvBuffer
	.align	2, 0
	.globl	sub_80B9A78
	.type	 sub_80B9A78,function
	.thumb_func
sub_80B9A78:
	ldr	r1, .L138
	ldr	r0, .L138+0x4
	str	r0, [r1]
	bx	lr
.L139:
	.align	2, 0
.L138:
	.word	gUnknown_03005D2C
	.word	0x1230
.Lfe16:
	.size	 sub_80B9A78,.Lfe16-sub_80B9A78
	.globl	gUnknown_083D0288
	.section .rodata
	.type	 gUnknown_083D0288,object
	.size	 gUnknown_083D0288,2
gUnknown_083D0288:
	.byte	0x1
	.byte	0x0
	.globl	gUnknown_083D028A
	.type	 gUnknown_083D028A,object
	.size	 gUnknown_083D028A,6
gUnknown_083D028A:
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.globl	gUnknown_083D0290
	.type	 gUnknown_083D0290,object
	.size	 gUnknown_083D0290,36
gUnknown_083D0290:
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
.text
	.align	2, 0
	.globl	sub_80B9A88
	.type	 sub_80B9A88,function
	.thumb_func
sub_80B9A88:
	push	{r4, lr}
	add	r4, r0, #0
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L148	@cond_branch
	cmp	r0, #0x3
	bhi	.L162	@cond_branch
	cmp	r0, #0x2
	beq	.L142	@cond_branch
	b	.L141
.L162:
	cmp	r0, #0x4
	beq	.L154	@cond_branch
	b	.L141
.L142:
	mov	r2, #0x0
	ldr	r3, .L163
.L146:
	add	r0, r4, r2
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x1
	bls	.L146	@cond_branch
	b	.L141
.L164:
	.align	2, 0
.L163:
	.word	gUnknown_083D0288
.L148:
	mov	r0, #0x0
	bl	GetLinkPlayerTrainerId
	add	r3, r0, #0
	mov	r0, #0x1
	and	r3, r3, r0
	mov	r2, #0x0
	ldr	r1, .L165
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	add	r3, r0, r1
.L152:
	add	r1, r4, r2
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2
	bls	.L152	@cond_branch
	b	.L141
.L166:
	.align	2, 0
.L165:
	.word	gUnknown_083D028A
.L154:
	mov	r0, #0x0
	bl	GetLinkPlayerTrainerId
	mov	r1, #0x9
	bl	__umodsi3
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r1, .L167
	lsl	r0, r3, #0x2
	add	r3, r0, r1
.L158:
	add	r1, r4, r2
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L158	@cond_branch
.L141:
	pop	{r4}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	gUnknown_083D0290
.Lfe17:
	.size	 sub_80B9A88,.Lfe17-sub_80B9A88
	.align	2, 0
	.globl	sub_80B9B1C
	.type	 sub_80B9B1C,function
	.thumb_func
sub_80B9B1C:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	mov	r8, r1
	lsl	r4, r2, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sp
	bl	sub_80B9A88
	mov	r0, r8
	mul	r0, r0, r4
	add	r0, r5, r0
	ldr	r1, .L170
	ldr	r6, [r1]
	add	r1, r6, #0
	mov	r2, #0x40
	bl	memcpy
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r5, r5, r0
	add	r0, r6, #0
	add	r1, r5, #0
	mov	r2, #0x40
	bl	memcpy
	bl	sub_80F7F30
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	gUnknown_083D0278
.Lfe18:
	.size	 sub_80B9B1C,.Lfe18-sub_80B9B1C
	.align	2, 0
	.globl	sub_80B9B70
	.type	 sub_80B9B70,function
	.thumb_func
sub_80B9B70:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	r6, r0, #0
	mov	r9, r1
	lsl	r4, r2, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L173
	mov	r8, r0
	bl	sub_80B9A88
	mov	r5, r9
	mul	r5, r5, r4
	add	r5, r6, r5
	add	r4, r4, r8
	ldrb	r0, [r4]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r6, r6, r0
	add	r0, r5, #0
	add	r1, r6, #0
	mov	r2, #0xa4
	bl	memcpy
	add	r0, r5, #0
	bl	sub_8134AC0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L174:
	.align	2, 0
.L173:
	.word	gUnknown_0300071C
.Lfe19:
	.size	 sub_80B9B70,.Lfe19-sub_80B9B70
	.align	2, 0
	.globl	sub_80B9BBC
	.type	 sub_80B9BBC,function
	.thumb_func
sub_80B9BBC:
	ldrh	r0, [r0, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.Lfe20:
	.size	 sub_80B9BBC,.Lfe20-sub_80B9BBC
	.align	2, 0
	.globl	sub_80B9BC4
	.type	 sub_80B9BC4,function
	.thumb_func
sub_80B9BC4:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #0xffffffc8
	mov	r8, r0
	mov	sl, r1
	mov	r9, r2
	add	r4, r3, #0
	ldr	r5, [sp, #0x54]
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsr	r4, r4, #0x17
	add	r4, r4, r9
	ldrb	r0, [r4]
	mov	r6, sl
	mul	r6, r6, r0
	add	r6, r6, r8
	ldrb	r0, [r4, #0x1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r6, r1
	mov	r0, sp
	mov	r2, #0x38
	bl	memcpy
	lsl	r5, r5, #0x1
	add	r5, r5, r9
	ldrb	r0, [r5]
	mov	r1, sl
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r8, r8, r0
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r6, r6, r0
	ldrb	r0, [r5, #0x1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	add	r0, r6, #0
	mov	r2, #0x38
	bl	memcpy
	ldrb	r1, [r5, #0x1]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r8, r8, r0
	mov	r0, r8
	mov	r1, sp
	mov	r2, #0x38
	bl	memcpy
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 sub_80B9BC4,.Lfe21-sub_80B9BC4
	.align	2, 0
	.globl	sub_80B9C4C
	.type	 sub_80B9C4C,function
	.thumb_func
sub_80B9C4C:
	push	{lr}
	add	r3, r0, #0
	mov	r2, #0x0
	mov	r1, #0x0
.L181:
	add	r0, r3, r1
	ldrb	r0, [r0]
	add	r0, r2, r0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r1, r1, #0x1
	cmp	r1, #0xff
	ble	.L181	@cond_branch
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 sub_80B9C4C,.Lfe22-sub_80B9C4C
	.globl	gUnknown_083D02B4
	.section .rodata
	.type	 gUnknown_083D02B4,object
gUnknown_083D02B4:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.size	 gUnknown_083D02B4,6
	.globl	gUnknown_083D02BA
	.type	 gUnknown_083D02BA,object
	.size	 gUnknown_083D02BA,12
gUnknown_083D02BA:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x1
.text
	.align	2, 0
	.globl	sub_80B9C6C
	.type	 sub_80B9C6C,function
	.thumb_func
sub_80B9C6C:
	.syntax unified
    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x58
    str r0, [sp, 0x2C]
    str r1, [sp, 0x30]
    str r3, [sp, 0x38]
    lsls r2, 24
    lsrs r2, 24
    str r2, [sp, 0x34]
    bl Random
    lsls r0, 16
    lsrs r0, 16
    str r0, [sp, 0x40]
    ldr r0, _080B9DA8 @ =gLinkPlayers
    ldrh r0, [r0, 0x4]
    bl SeedRng
    bl GetLinkPlayerCount
    lsls r0, 24
    lsrs r0, 24
    mov r8, r0
    movs r3, 0
    add r0, sp, 0x1C
    mov r9, r0
    movs r1, 0x1D
    add r1, sp
    mov r10, r1
    mov r2, sp
    adds r2, 0xC
    str r2, [sp, 0x4C]
    movs r7, 0xFF
    add r4, sp, 0x8
    movs r2, 0
    mov r6, r9
    mov r5, r10
_080B9CBC:
    mov r1, sp
    adds r1, r3
    adds r1, 0x4
    ldrb r0, [r1]
    orrs r0, r7
    strb r0, [r1]
    adds r0, r4, r3
    strb r2, [r0]
    lsls r1, r3, 1
    adds r0, r6, r1
    strb r2, [r0]
    adds r1, r5, r1
    strb r2, [r1]
    adds r0, r3, 0x1
    lsls r0, 16
    lsrs r3, r0, 16
    cmp r3, 0x3
    bls _080B9CBC
    movs r4, 0
    str r4, [sp, 0x3C]
    movs r3, 0
    mov r1, r8
    lsls r0, r1, 16
    lsrs r1, r0, 16
    str r0, [sp, 0x50]
    ldr r4, [sp, 0x30]
    ldr r0, [sp, 0x34]
    adds r2, r4, 0
    muls r2, r0
    str r2, [sp, 0x48]
    ldr r2, [sp, 0x3C]
    cmp r2, r1
    bcs _080B9D46
    mov r8, r1
_080B9D00:
    ldr r4, [sp, 0x30]
    adds r0, r4, 0
    muls r0, r3
    ldr r1, [sp, 0x2C]
    adds r6, r1, r0
    ldr r0, [r6, 0x70]
    cmp r0, 0
    beq _080B9D3C
    movs r7, 0
    cmp r7, r0
    bcs _080B9D3C
    adds r4, r6, 0
    adds r4, 0x74
    mov r2, r9
    lsls r1, r3, 1
    movs r5, 0x1
_080B9D20:
    lsls r0, r7, 1
    adds r0, r4, r0
    ldrh r0, [r0]
    cmp r0, 0
    bne _080B9D30
    adds r0, r7, r1
    adds r0, r2, r0
    strb r5, [r0]
_080B9D30:
    adds r0, r7, 0x1
    lsls r0, 16
    lsrs r7, r0, 16
    ldr r0, [r6, 0x70]
    cmp r7, r0
    bcc _080B9D20
_080B9D3C:
    adds r0, r3, 0x1
    lsls r0, 16
    lsrs r3, r0, 16
    cmp r3, r8
    bcc _080B9D00
_080B9D46:
    movs r7, 0
    movs r3, 0
    ldr r2, [sp, 0x50]
    cmp r2, 0
    beq _080B9E3E
    mov r4, sp
    adds r4, 0x24
    str r4, [sp, 0x44]
    movs r0, 0x25
    add r0, sp
    mov r8, r0
_080B9D5C:
    ldr r1, [sp, 0x30]
    adds r0, r1, 0
    muls r0, r3
    ldr r2, [sp, 0x2C]
    adds r6, r2, r0
    lsls r1, r3, 1
    mov r4, r9
    adds r0, r4, r1
    ldrb r0, [r0]
    cmp r0, 0x1
    beq _080B9D7C
    mov r2, r10
    adds r0, r2, r1
    ldrb r0, [r0]
    cmp r0, 0x1
    bne _080B9D86
_080B9D7C:
    ldr r0, [sp, 0x3C]
    adds r0, 0x1
    lsls r0, 24
    lsrs r0, 24
    str r0, [sp, 0x3C]
_080B9D86:
    mov r4, r9
    adds r0, r4, r1
    ldrb r0, [r0]
    cmp r0, 0x1
    bne _080B9DAC
    mov r2, r10
    adds r0, r2, r1
    ldrb r2, [r0]
    cmp r2, 0
    bne _080B9DAC
_080B9D9A:
    lsls r1, r7, 1
    ldr r4, [sp, 0x44]
    adds r0, r4, r1
    strb r3, [r0]
    add r1, r8
    strb r2, [r1]
    b _080B9E2C
    .align 2, 0
_080B9DA8: .4byte gLinkPlayers
_080B9DAC:
    mov r2, r9
    adds r0, r2, r1
    ldrb r0, [r0]
    cmp r0, 0
    bne _080B9DC0
    mov r4, r10
    adds r0, r4, r1
    ldrb r2, [r0]
    cmp r2, 0x1
    beq _080B9D9A
_080B9DC0:
    mov r2, r9
    adds r0, r2, r1
    ldrb r0, [r0]
    cmp r0, 0x1
    bne _080B9E32
    mov r4, r10
    adds r0, r4, r1
    ldrb r0, [r0]
    cmp r0, 0x1
    bne _080B9E32
    lsls r5, r7, 1
    ldr r1, [sp, 0x44]
    adds r0, r1, r5
    strb r3, [r0]
    adds r0, r6, 0
    str r3, [sp, 0x54]
    bl sub_80B9BBC
    adds r4, r0, 0
    lsls r4, 24
    lsrs r4, 24
    adds r0, r6, 0
    adds r0, 0x38
    bl sub_80B9BBC
    lsls r0, 24
    lsrs r1, r0, 24
    ldr r3, [sp, 0x54]
    cmp r4, 0
    bne _080B9E0A
    cmp r1, 0
    beq _080B9E0E
    mov r2, r8
    adds r1, r2, r5
    movs r0, 0x1
    strb r0, [r1]
    b _080B9E2C
_080B9E0A:
    cmp r1, 0
    beq _080B9E26
_080B9E0E:
    str r3, [sp, 0x54]
    bl Random
    mov r4, r8
    adds r2, r4, r5
    lsls r0, 16
    lsrs r0, 16
    movs r1, 0x1
    ands r0, r1
    strb r0, [r2]
    ldr r3, [sp, 0x54]
    b _080B9E2C
_080B9E26:
    mov r2, r8
    adds r0, r2, r5
    strb r1, [r0]
_080B9E2C:
    adds r0, r7, 0x1
    lsls r0, 16
    lsrs r7, r0, 16
_080B9E32:
    adds r0, r3, 0x1
    lsls r0, 16
    lsrs r3, r0, 16
    ldr r4, [sp, 0x50]
    cmp r0, r4
    bcc _080B9D5C
_080B9E3E:
    movs r3, 0
    ldr r1, [sp, 0x48]
    lsls r0, r1, 4
    subs r0, r1
    lsls r0, 3
    ldr r2, [sp, 0x2C]
    adds r6, r2, r0
    ldr r1, [sp, 0x4C]
_080B9E4E:
    lsls r0, r3, 2
    adds r0, r1, r0
    str r6, [r0]
    adds r0, r3, 0x1
    lsls r0, 16
    lsrs r3, r0, 16
    cmp r3, 0x3
    bls _080B9E4E
    ldr r0, [sp, 0x38]
    bl sub_80B9C4C
    lsls r0, 24
    lsrs r0, 24
    movs r1, 0x3
    bl __umodsi3
    lsls r0, 24
    lsrs r1, r0, 24
    ldr r4, [sp, 0x3C]
    cmp r4, 0x3
    beq _080B9E9C
    cmp r4, 0x3
    bgt _080B9E82
    cmp r4, 0x2
    beq _080B9E8A
    b _080B9EF0
_080B9E82:
    ldr r0, [sp, 0x3C]
    cmp r0, 0x4
    beq _080B9EBC
    b _080B9EF0
_080B9E8A:
    add r2, sp, 0x24
    movs r0, 0x1
    str r0, [sp]
    ldr r0, [sp, 0x2C]
    ldr r1, [sp, 0x30]
    movs r3, 0
    bl sub_80B9BC4
    b _080B9EF0
_080B9E9C:
    ldr r0, _080B9EB8 @ =gUnknown_083D02B4
    lsls r1, 1
    adds r2, r1, r0
    ldrb r3, [r2]
    adds r0, 0x1
    adds r1, r0
    ldrb r0, [r1]
    add r2, sp, 0x24
    str r0, [sp]
    ldr r0, [sp, 0x2C]
    ldr r1, [sp, 0x30]
    bl sub_80B9BC4
    b _080B9EF0
    .align 2, 0
_080B9EB8: .4byte gUnknown_083D02B4
_080B9EBC:
    add r6, sp, 0x24
    ldr r4, _080B9F2C @ =gUnknown_083D02BA
    lsls r5, r1, 2
    adds r0, r5, r4
    ldrb r3, [r0]
    adds r0, r4, 0x1
    adds r0, r5, r0
    ldrb r0, [r0]
    str r0, [sp]
    ldr r0, [sp, 0x2C]
    ldr r1, [sp, 0x30]
    adds r2, r6, 0
    bl sub_80B9BC4
    adds r0, r4, 0x2
    adds r0, r5, r0
    ldrb r3, [r0]
    adds r4, 0x3
    adds r5, r4
    ldrb r0, [r5]
    str r0, [sp]
    ldr r0, [sp, 0x2C]
    ldr r1, [sp, 0x30]
    adds r2, r6, 0
    bl sub_80B9BC4
_080B9EF0:
    ldr r1, [sp, 0x2C]
    ldr r2, [sp, 0x48]
    adds r6, r1, r2
    ldr r4, _080B9F30 @ =gSaveBlock1
    ldr r1, _080B9F34 @ =0x0000303c
    adds r0, r4, r1
    adds r1, r6, 0
    movs r2, 0x38
    bl memcpy
    ldr r2, _080B9F38 @ =0x00003074
    adds r4, r2
    adds r1, r6, 0
    adds r1, 0x38
    adds r0, r4, 0
    movs r2, 0x38
    bl memcpy
    ldr r0, [sp, 0x40]
    bl SeedRng
    add sp, 0x58
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r0}
    bx r0
    .align 2, 0
_080B9F2C: .4byte gUnknown_083D02BA
_080B9F30: .4byte gSaveBlock1
_080B9F34: .4byte 0x0000303c
_080B9F38: .4byte 0x00003074
    .syntax divided

	.code	16
.Lfe23:
	.size	 sub_80B9C6C,.Lfe23-sub_80B9C6C
	.align	2, 0
	.globl	sub_80B9F3C
	.type	 sub_80B9F3C,function
	.thumb_func
sub_80B9F3C:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	beq	.L185	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L185	@cond_branch
	bl	GetPocketByItemId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bne	.L186	@cond_branch
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	CheckPCHasItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L187	@cond_branch
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L187	@cond_branch
	ldr	r0, .L193
	ldrh	r1, [r4]
	bl	VarSet
	ldr	r0, .L193+0x4
	ldr	r1, .L193+0x8
	bl	StringCopy
	ldrh	r1, [r4]
	ldr	r0, .L193+0xc
	cmp	r1, r0
	bne	.L185	@cond_branch
	ldr	r0, .L193+0x10
	bl	FlagSet
	b	.L185
.L194:
	.align	2, 0
.L193:
	.word	0x4001
	.word	gStringVar1
	.word	gLinkPlayers+0x8
	.word	0x113
	.word	0x853
.L187:
	ldr	r0, .L195
	mov	r1, #0x0
	bl	VarSet
	b	.L185
.L196:
	.align	2, 0
.L195:
	.word	0x4001
.L186:
	ldrh	r0, [r4]
	mov	r1, #0x1
	bl	AddBagItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L191	@cond_branch
	ldr	r0, .L197
	ldrh	r1, [r4]
	bl	VarSet
	ldr	r0, .L197+0x4
	ldr	r1, .L197+0x8
	bl	StringCopy
	b	.L185
.L198:
	.align	2, 0
.L197:
	.word	0x4001
	.word	gStringVar1
	.word	gLinkPlayers+0x8
.L191:
	ldr	r0, .L199
	mov	r1, #0x0
	bl	VarSet
.L185:
	pop	{r4}
	pop	{r0}
	bx	r0
.L200:
	.align	2, 0
.L199:
	.word	0x4001
.Lfe24:
	.size	 sub_80B9F3C,.Lfe24-sub_80B9F3C
	.align	2, 0
	.globl	sub_80BA00C
	.type	 sub_80BA00C,function
	.thumb_func
sub_80BA00C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L215
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bhi	.L202	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L215+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L216:
	.align	2, 0
.L215:
	.word	gTasks
	.word	.L212
	.align	2, 0
	.align	2, 0
.L212:
	.word	.L214
	.word	.L214
	.word	.L205
	.word	.L206
	.word	.L208
	.word	.L210
.L205:
	bl	SetSecretBase2Field_9_AndHideBG
	bl	sub_8125E2C
	b	.L214
.L206:
	bl	sub_8125E6C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L202	@cond_branch
	bl	ClearSecretBase2Field_9_2
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	strh	r1, [r4, #0xa]
	b	.L202
.L208:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L202	@cond_branch
	bl	sub_800832C
.L214:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L202
.L210:
	ldr	r0, .L217
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L202	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
.L202:
	pop	{r4}
	pop	{r0}
	bx	r0
.L218:
	.align	2, 0
.L217:
	.word	gReceivedRemoteLinkPlayers
.Lfe25:
	.size	 sub_80BA00C,.Lfe25-sub_80BA00C
	.comm	gUnknown_03005D2C, 4	@ 4

	.lcomm	gUnknown_03000718,1

	.lcomm	gUnknown_0300071C,4
.text
	.align	2, 0
