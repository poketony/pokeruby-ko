@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gMenuWindow
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gMenuWindow,object
	.size	 gMenuWindow,48
gMenuWindow:
	.byte	0x0
	.space	47
	.globl	gFiller_202E908
	.type	 gFiller_202E908,object
	.size	 gFiller_202E908,144
gFiller_202E908:
	.byte	0x0
	.space	143
	.globl	gMenuWindowPtr
	.align	2, 0
	.type	 gMenuWindowPtr,object
	.size	 gMenuWindowPtr,4
gMenuWindowPtr:
	.word	0x0
	.globl	gMenuMultistepInitState
	.type	 gMenuMultistepInitState,object
	.size	 gMenuMultistepInitState,1
gMenuMultistepInitState:
	.byte	0x0
	.globl	gMenuTextTileOffset
	.align	1, 0
	.type	 gMenuTextTileOffset,object
	.size	 gMenuTextTileOffset,2
gMenuTextTileOffset:
	.short	0x0
	.globl	gMenuTextWindowTileOffset
	.align	1, 0
	.type	 gMenuTextWindowTileOffset,object
	.size	 gMenuTextWindowTileOffset,2
gMenuTextWindowTileOffset:
	.short	0x0
	.globl	gMenuTextWindowContentTileOffset
	.align	1, 0
	.type	 gMenuTextWindowContentTileOffset,object
	.size	 gMenuTextWindowContentTileOffset,2
gMenuTextWindowContentTileOffset:
	.short	0x0
	.globl	gMenuMessageBoxContentTileOffset
	.align	1, 0
	.type	 gMenuMessageBoxContentTileOffset,object
	.size	 gMenuMessageBoxContentTileOffset,2
gMenuMessageBoxContentTileOffset:
	.short	0x0
	.globl	gMenuYesNoItems
	.section .rodata
	.align	2, 0
	.type	 gMenuYesNoItems,object
gMenuYesNoItems:
	.word	OtherText_Yes
	.word	0x0
	.word	OtherText_No
	.word	0x0
	.size	 gMenuYesNoItems,16
.text
	.align	2, 0
	.globl	CloseMenu
	.type	 CloseMenu,function
	.thumb_func
CloseMenu:
	push	{lr}
	mov	r0, #0x5
	bl	PlaySE
	bl	MenuZeroFillScreen
	bl	sub_8064E2C
	bl	ScriptContext2_Disable
	bl	HandleDestroyMenuCursors
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 CloseMenu,.Lfe1-CloseMenu
	.align	2, 0
	.globl	AppendToList
	.type	 AppendToList,function
	.thumb_func
AppendToList:
	ldrb	r3, [r1]
	add	r0, r0, r3
	strb	r2, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	bx	lr
.Lfe2:
	.size	 AppendToList,.Lfe2-AppendToList
	.align	2, 0
	.globl	InitMenuWindow
	.type	 InitMenuWindow,function
	.thumb_func
InitMenuWindow:
	push	{lr}
	mov	r1, #0x1
	bl	InitMenuWindowInternal
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 InitMenuWindow,.Lfe3-InitMenuWindow
	.align	2, 0
	.globl	MultistepInitMenuWindowBegin
	.type	 MultistepInitMenuWindowBegin,function
	.thumb_func
MultistepInitMenuWindowBegin:
	push	{lr}
	mov	r1, #0x1
	bl	MultistepInitMenuWindowInternal
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 MultistepInitMenuWindowBegin,.Lfe4-MultistepInitMenuWindowBegin
	.align	2, 0
	.type	 MultistepInitMenuWindowInternal,function
	.thumb_func
MultistepInitMenuWindowInternal:
	push	{lr}
	add	r3, r0, #0
	ldr	r2, .L7
	mov	r0, #0x0
	strb	r0, [r2]
	ldr	r0, .L7+0x4
	strh	r1, [r0]
	ldr	r1, .L7+0x8
	ldr	r0, .L7+0xc
	str	r0, [r1]
	add	r1, r3, #0
	bl	InitWindowFromConfig
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gMenuMultistepInitState
	.word	gMenuTextTileOffset
	.word	gMenuWindowPtr
	.word	gMenuWindow
.Lfe5:
	.size	 MultistepInitMenuWindowInternal,.Lfe5-MultistepInitMenuWindowInternal
	.align	2, 0
	.globl	MultistepInitMenuWindowContinue
	.type	 MultistepInitMenuWindowContinue,function
	.thumb_func
MultistepInitMenuWindowContinue:
	push	{r4, lr}
	ldr	r0, .L22
	ldrb	r1, [r0]
	add	r2, r0, #0
	cmp	r1, #0x4
	bhi	.L16	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L22+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L23:
	.align	2, 0
.L22:
	.word	gMenuMultistepInitState
	.word	.L20
	.align	2, 0
	.align	2, 0
.L20:
	.word	.L11
	.word	.L12
	.word	.L14
	.word	.L17
	.word	.L18
.L11:
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	b	.L16
.L12:
	ldr	r4, .L24
	ldr	r0, .L24+0x4
	ldr	r0, [r0]
	ldr	r1, .L24+0x8
	ldrh	r1, [r1]
	bl	MultistepInitWindowTileData
	strh	r0, [r4]
	b	.L13
.L25:
	.align	2, 0
.L24:
	.word	gMenuTextWindowTileOffset
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.L14:
	bl	MultistepLoadFont
	cmp	r0, #0
	beq	.L16	@cond_branch
	b	.L13
.L17:
	ldr	r0, .L26
	ldrh	r0, [r0]
	bl	SetTextWindowBaseTileNum
	ldr	r1, .L26+0x4
	strh	r0, [r1]
.L13:
	ldr	r1, .L26+0x8
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L16
.L27:
	.align	2, 0
.L26:
	.word	gMenuTextWindowTileOffset
	.word	gMenuTextWindowContentTileOffset
	.word	gMenuMultistepInitState
.L18:
	ldr	r0, .L28
	ldr	r0, [r0]
	bl	LoadTextWindowGraphics
	ldr	r0, .L28+0x4
	ldrh	r0, [r0]
	bl	SetMessageBoxBaseTileNum
	ldr	r1, .L28+0x8
	strh	r0, [r1]
	mov	r0, #0x1
	b	.L21
.L29:
	.align	2, 0
.L28:
	.word	gMenuWindowPtr
	.word	gMenuTextWindowContentTileOffset
	.word	gMenuMessageBoxContentTileOffset
.L16:
	mov	r0, #0x0
.L21:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 MultistepInitMenuWindowContinue,.Lfe6-MultistepInitMenuWindowContinue
	.align	2, 0
	.type	 InitMenuWindowInternal,function
	.thumb_func
InitMenuWindowInternal:
	push	{r4, r5, lr}
	add	r2, r0, #0
	lsl	r4, r1, #0x10
	lsr	r4, r4, #0x10
	ldr	r5, .L31
	ldr	r0, .L31+0x4
	str	r0, [r5]
	add	r1, r2, #0
	bl	InitWindowFromConfig
	ldr	r1, .L31+0x8
	strh	r4, [r1]
	ldr	r0, [r5]
	ldrh	r1, [r1]
	bl	InitWindowTileData
	ldr	r1, .L31+0xc
	strh	r0, [r1]
	ldrh	r0, [r1]
	bl	SetTextWindowBaseTileNum
	ldr	r4, .L31+0x10
	strh	r0, [r4]
	ldr	r0, [r5]
	bl	LoadTextWindowGraphics
	ldrh	r0, [r4]
	bl	SetMessageBoxBaseTileNum
	ldr	r1, .L31+0x14
	strh	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gMenuWindowPtr
	.word	gMenuWindow
	.word	gMenuTextTileOffset
	.word	gMenuTextWindowTileOffset
	.word	gMenuTextWindowContentTileOffset
	.word	gMenuMessageBoxContentTileOffset
.Lfe7:
	.size	 InitMenuWindowInternal,.Lfe7-InitMenuWindowInternal
	.align	2, 0
	.globl	unref_sub_8071DA4
	.type	 unref_sub_8071DA4,function
	.thumb_func
unref_sub_8071DA4:
	push	{r4, r5, lr}
	add	r2, r0, #0
	lsl	r4, r1, #0x10
	lsr	r4, r4, #0x10
	ldr	r5, .L34
	ldr	r0, .L34+0x4
	str	r0, [r5]
	add	r1, r2, #0
	bl	InitWindowFromConfig
	ldr	r0, .L34+0x8
	strh	r4, [r0]
	ldrh	r0, [r0]
	bl	SetTextWindowBaseTileNum
	ldr	r4, .L34+0xc
	strh	r0, [r4]
	ldr	r0, [r5]
	bl	LoadTextWindowGraphics
	ldrh	r0, [r4]
	bl	SetMessageBoxBaseTileNum
	ldr	r1, .L34+0x10
	strh	r0, [r1]
	ldr	r0, [r5]
	ldrh	r1, [r1]
	bl	InitWindowTileData
	ldr	r1, .L34+0x14
	strh	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	gMenuWindowPtr
	.word	gMenuWindow
	.word	gMenuTextWindowTileOffset
	.word	gMenuTextWindowContentTileOffset
	.word	gMenuTextTileOffset
	.word	gMenuMessageBoxContentTileOffset
.Lfe8:
	.size	 unref_sub_8071DA4,.Lfe8-unref_sub_8071DA4
	.align	2, 0
	.globl	MenuLoadTextWindowGraphics_OverrideFrameType
	.type	 MenuLoadTextWindowGraphics_OverrideFrameType,function
	.thumb_func
MenuLoadTextWindowGraphics_OverrideFrameType:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L37
	ldr	r0, [r0]
	bl	LoadTextWindowGraphics_OverrideFrameType
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gMenuWindowPtr
.Lfe9:
	.size	 MenuLoadTextWindowGraphics_OverrideFrameType,.Lfe9-MenuLoadTextWindowGraphics_OverrideFrameType
	.align	2, 0
	.globl	MenuLoadTextWindowGraphics
	.type	 MenuLoadTextWindowGraphics,function
	.thumb_func
MenuLoadTextWindowGraphics:
	push	{lr}
	ldr	r0, .L40
	ldr	r0, [r0]
	bl	LoadTextWindowGraphics
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	gMenuWindowPtr
.Lfe10:
	.size	 MenuLoadTextWindowGraphics,.Lfe10-MenuLoadTextWindowGraphics
	.align	2, 0
	.globl	BasicInitMenuWindow
	.type	 BasicInitMenuWindow,function
	.thumb_func
BasicInitMenuWindow:
	push	{r4, lr}
	add	r1, r0, #0
	ldr	r4, .L43
	ldr	r0, [r4]
	bl	InitWindowFromConfig
	ldr	r1, [r4]
	ldr	r0, .L43+0x4
	ldrh	r0, [r0]
	strh	r0, [r1, #0x1a]
	pop	{r4}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe11:
	.size	 BasicInitMenuWindow,.Lfe11-BasicInitMenuWindow
	.align	2, 0
	.globl	MenuPrint
	.type	 MenuPrint,function
	.thumb_func
MenuPrint:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	add	r3, r1, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L46
	ldr	r0, [r0]
	ldr	r1, .L46+0x4
	ldrh	r4, [r1]
	str	r2, [sp]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	sub_8003460
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe12:
	.size	 MenuPrint,.Lfe12-MenuPrint
	.align	2, 0
	.globl	MenuZeroFillWindowRect
	.type	 MenuZeroFillWindowRect,function
	.thumb_func
MenuZeroFillWindowRect:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L49
	ldr	r0, [r0]
	str	r3, [sp]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	ZeroFillWindowRect
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gMenuWindowPtr
.Lfe13:
	.size	 MenuZeroFillWindowRect,.Lfe13-MenuZeroFillWindowRect
	.align	2, 0
	.globl	MenuFillWindowRectWithBlankTile
	.type	 MenuFillWindowRectWithBlankTile,function
	.thumb_func
MenuFillWindowRectWithBlankTile:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L52
	ldr	r0, [r0]
	str	r3, [sp]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	FillWindowRectWithBlankTile
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L53:
	.align	2, 0
.L52:
	.word	gMenuWindowPtr
.Lfe14:
	.size	 MenuFillWindowRectWithBlankTile,.Lfe14-MenuFillWindowRectWithBlankTile
	.align	2, 0
	.globl	MenuZeroFillScreen
	.type	 MenuZeroFillScreen,function
	.thumb_func
MenuZeroFillScreen:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	MenuZeroFillWindowRect
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 MenuZeroFillScreen,.Lfe15-MenuZeroFillScreen
	.align	2, 0
	.globl	MenuDrawTextWindow
	.type	 MenuDrawTextWindow,function
	.thumb_func
MenuDrawTextWindow:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L56
	ldr	r0, [r0]
	str	r3, [sp]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	DrawTextWindow
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gMenuWindowPtr
.Lfe16:
	.size	 MenuDrawTextWindow,.Lfe16-MenuDrawTextWindow
	.align	2, 0
	.globl	sub_8071F40
	.type	 sub_8071F40,function
	.thumb_func
sub_8071F40:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2
	mov	r1, #0xe
	mov	r2, #0x1c
	mov	r3, #0x13
	bl	MenuDrawTextWindow
	add	r0, r4, #0
	mov	r1, #0x3
	mov	r2, #0xf
	bl	MenuPrint
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 sub_8071F40,.Lfe17-sub_8071F40
	.align	2, 0
	.globl	sub_8071F60
	.type	 sub_8071F60,function
	.thumb_func
sub_8071F60:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r3, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L60
	ldr	r0, [r0]
	ldr	r1, .L60+0x4
	ldrh	r5, [r1]
	str	r2, [sp]
	add	r1, r4, #0
	add	r2, r5, #0
	bl	sub_8003490
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe18:
	.size	 sub_8071F60,.Lfe18-sub_8071F60
	.align	2, 0
	.globl	unref_sub_8071F98
	.type	 unref_sub_8071F98,function
	.thumb_func
unref_sub_8071F98:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L63
	ldr	r0, [r0]
	add	r1, r3, #0
	bl	GetWindowTilemapEntry
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L64:
	.align	2, 0
.L63:
	.word	gMenuWindowPtr
.Lfe19:
	.size	 unref_sub_8071F98,.Lfe19-unref_sub_8071F98
	.align	2, 0
	.globl	unref_sub_8071FBC
	.type	 unref_sub_8071FBC,function
	.thumb_func
unref_sub_8071FBC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r1, [sp, #0x18]
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L66
	ldr	r0, [r0]
	str	r3, [sp]
	str	r1, [sp, #0x4]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	DrawWindowRect
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	gMenuWindowPtr
.Lfe20:
	.size	 unref_sub_8071FBC,.Lfe20-unref_sub_8071FBC
	.align	2, 0
	.globl	MenuDisplayMessageBox
	.type	 MenuDisplayMessageBox,function
	.thumb_func
MenuDisplayMessageBox:
	push	{lr}
	ldr	r0, .L69
	ldr	r0, [r0]
	bl	DisplayMessageBox
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gMenuWindowPtr
.Lfe21:
	.size	 MenuDisplayMessageBox,.Lfe21-MenuDisplayMessageBox
	.align	2, 0
	.globl	MenuPrintMessage
	.type	 MenuPrintMessage,function
	.thumb_func
MenuPrintMessage:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	add	r3, r1, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L72
	ldr	r0, [r0]
	ldr	r1, .L72+0x4
	ldrh	r4, [r1]
	str	r2, [sp]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	sub_8002EB0
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe22:
	.size	 MenuPrintMessage,.Lfe22-MenuPrintMessage
	.align	2, 0
	.globl	MenuPrintMessageDefaultCoords
	.type	 MenuPrintMessageDefaultCoords,function
	.thumb_func
MenuPrintMessageDefaultCoords:
	push	{lr}
	add	sp, sp, #0xfffffffc
	add	r1, r0, #0
	ldr	r0, .L75
	ldr	r0, [r0]
	ldr	r2, .L75+0x4
	ldrh	r2, [r2]
	mov	r3, #0xf
	str	r3, [sp]
	mov	r3, #0x4
	bl	sub_8002EB0
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe23:
	.size	 MenuPrintMessageDefaultCoords,.Lfe23-MenuPrintMessageDefaultCoords
	.align	2, 0
	.globl	MenuSetText
	.type	 MenuSetText,function
	.thumb_func
MenuSetText:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L78
	ldr	r0, [r0]
	bl	sub_8002E90
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gMenuWindowPtr
.Lfe24:
	.size	 MenuSetText,.Lfe24-MenuSetText
	.align	2, 0
	.globl	MenuUpdateWindowText
	.type	 MenuUpdateWindowText,function
	.thumb_func
MenuUpdateWindowText:
	push	{lr}
	ldr	r0, .L81
	ldr	r0, [r0]
	bl	sub_80035AC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L82:
	.align	2, 0
.L81:
	.word	gMenuWindowPtr
.Lfe25:
	.size	 MenuUpdateWindowText,.Lfe25-MenuUpdateWindowText
	.align	2, 0
	.globl	unref_sub_8072098
	.type	 unref_sub_8072098,function
	.thumb_func
unref_sub_8072098:
	push	{lr}
	ldr	r0, .L84
	ldr	r0, [r0]
	bl	sub_8003418
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L85:
	.align	2, 0
.L84:
	.word	gMenuWindowPtr
.Lfe26:
	.size	 unref_sub_8072098,.Lfe26-unref_sub_8072098
	.align	2, 0
	.globl	sub_80720B0
	.type	 sub_80720B0,function
	.thumb_func
sub_80720B0:
	push	{lr}
	ldr	r0, .L87
	ldr	r0, [r0]
	bl	ClearWindowTextLines
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	gMenuWindowPtr
.Lfe27:
	.size	 sub_80720B0,.Lfe27-sub_80720B0
	.section .rodata
.LC46:
	.byte	0x0
	.byte	0xff
.text
	.align	2, 0
	.globl	MoveMenuCursor
	.type	 MoveMenuCursor,function
	.thumb_func
MoveMenuCursor:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r4, .L95
	mov	r1, #0x2
	ldrsb	r1, [r4, r1]
	lsl	r0, r0, #0x18
	asr	r6, r0, #0x18
	add	r5, r1, r6
	ldr	r1, .L95+0x4
	mov	r0, sp
	mov	r2, #0x2
	bl	memcpy
	ldrb	r1, [r4]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x2
	ldrsb	r2, [r4, r2]
	lsl	r2, r2, #0x1
	ldrb	r0, [r4, #0x1]
	add	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, sp
	bl	MenuPrint
	mov	r0, #0x3
	ldrsb	r0, [r4, r0]
	cmp	r5, r0
	bge	.L90	@cond_branch
	ldrb	r0, [r4, #0x4]
	b	.L94
.L96:
	.align	2, 0
.L95:
	.word	gMenu
	.word	.LC46
.L90:
	mov	r0, #0x4
	ldrsb	r0, [r4, r0]
	cmp	r5, r0
	ble	.L92	@cond_branch
	ldrb	r0, [r4, #0x3]
	b	.L94
.L92:
	ldrb	r0, [r4, #0x2]
	add	r0, r6, r0
.L94:
	strb	r0, [r4, #0x2]
	ldr	r4, .L97
	ldrb	r0, [r4]
	mov	r1, #0x2
	ldrsb	r1, [r4, r1]
	lsl	r1, r1, #0x1
	ldrb	r2, [r4, #0x1]
	add	r1, r1, r2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	RedrawMenuCursor
	ldrb	r0, [r4, #0x2]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L98:
	.align	2, 0
.L97:
	.word	gMenu
.Lfe28:
	.size	 MoveMenuCursor,.Lfe28-MoveMenuCursor
	.align	2, 0
	.globl	MoveMenuCursorNoWrap
	.type	 MoveMenuCursorNoWrap,function
	.thumb_func
MoveMenuCursorNoWrap:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r4, .L105
	mov	r1, #0x2
	ldrsb	r1, [r4, r1]
	lsl	r0, r0, #0x18
	asr	r6, r0, #0x18
	add	r5, r1, r6
	ldr	r1, .L105+0x4
	mov	r0, sp
	mov	r2, #0x2
	bl	memcpy
	ldrb	r1, [r4]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x2
	ldrsb	r2, [r4, r2]
	lsl	r2, r2, #0x1
	ldrb	r0, [r4, #0x1]
	add	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, sp
	bl	MenuPrint
	mov	r0, #0x3
	ldrsb	r0, [r4, r0]
	cmp	r5, r0
	bge	.L100	@cond_branch
	ldrb	r0, [r4, #0x3]
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	gMenu
	.word	.LC46
.L100:
	mov	r0, #0x4
	ldrsb	r0, [r4, r0]
	cmp	r5, r0
	ble	.L102	@cond_branch
	ldrb	r0, [r4, #0x4]
	b	.L104
.L102:
	ldrb	r0, [r4, #0x2]
	add	r0, r6, r0
.L104:
	strb	r0, [r4, #0x2]
	ldr	r4, .L107
	ldrb	r0, [r4]
	mov	r1, #0x2
	ldrsb	r1, [r4, r1]
	lsl	r1, r1, #0x1
	ldrb	r2, [r4, #0x1]
	add	r1, r1, r2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	RedrawMenuCursor
	ldrb	r0, [r4, #0x2]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L108:
	.align	2, 0
.L107:
	.word	gMenu
.Lfe29:
	.size	 MoveMenuCursorNoWrap,.Lfe29-MoveMenuCursorNoWrap
	.align	2, 0
	.globl	GetMenuCursorPos
	.type	 GetMenuCursorPos,function
	.thumb_func
GetMenuCursorPos:
	ldr	r0, .L110
	ldrb	r0, [r0, #0x2]
	bx	lr
.L111:
	.align	2, 0
.L110:
	.word	gMenu
.Lfe30:
	.size	 GetMenuCursorPos,.Lfe30-GetMenuCursorPos
	.align	2, 0
	.globl	ProcessMenuInput
	.type	 ProcessMenuInput,function
	.thumb_func
ProcessMenuInput:
	push	{r4, lr}
	ldr	r0, .L123
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L113	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r4, .L123+0x4
	ldrb	r0, [r4, #0x7]
	cmp	r0, #0
	beq	.L114	@cond_branch
	bl	HandleDestroyMenuCursors
.L114:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L120
.L124:
	.align	2, 0
.L123:
	.word	gMain
	.word	gMenu
.L113:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L115	@cond_branch
	ldr	r0, .L125
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	beq	.L116	@cond_branch
	bl	HandleDestroyMenuCursors
.L116:
	mov	r0, #0x1
	neg	r0, r0
	b	.L120
.L126:
	.align	2, 0
.L125:
	.word	gMenu
.L115:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L117	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L121
.L117:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L122	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L121:
	bl	MoveMenuCursor
.L122:
	mov	r0, #0x2
	neg	r0, r0
.L120:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 ProcessMenuInput,.Lfe31-ProcessMenuInput
	.align	2, 0
	.globl	ProcessMenuInputNoWrap
	.type	 ProcessMenuInputNoWrap,function
	.thumb_func
ProcessMenuInputNoWrap:
	push	{r4, r5, r6, lr}
	ldr	r4, .L139
	ldrb	r5, [r4, #0x2]
	add	r6, r5, #0
	ldr	r0, .L139+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L128	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x7]
	cmp	r0, #0
	beq	.L129	@cond_branch
	bl	HandleDestroyMenuCursors
.L129:
	mov	r0, #0x2
	ldrsb	r0, [r4, r0]
	b	.L137
.L140:
	.align	2, 0
.L139:
	.word	gMenu
	.word	gMain
.L128:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L130	@cond_branch
	ldrb	r0, [r4, #0x7]
	cmp	r0, #0
	beq	.L131	@cond_branch
	bl	HandleDestroyMenuCursors
.L131:
	mov	r0, #0x1
	neg	r0, r0
	b	.L137
.L130:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L132	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	bl	MoveMenuCursorNoWrap
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	beq	.L138	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	b	.L138
.L132:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L134	@cond_branch
	mov	r0, #0x1
	bl	MoveMenuCursorNoWrap
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	beq	.L138	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	b	.L138
.L134:
	mov	r0, #0x0
	bl	MoveMenuCursorNoWrap
.L138:
	mov	r0, #0x2
	neg	r0, r0
.L137:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 ProcessMenuInputNoWrap,.Lfe32-ProcessMenuInputNoWrap
	.align	2, 0
	.globl	MoveMenuCursor3
	.type	 MoveMenuCursor3,function
	.thumb_func
MoveMenuCursor3:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffffc
	ldr	r6, .L147
	mov	r1, #0x4
	ldrsb	r1, [r6, r1]
	add	r1, r1, #0x1
	asr	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	mov	r1, #0x2
	ldrsb	r1, [r6, r1]
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r9, r0
	add	r1, r1, r9
	mov	r8, r1
	ldr	r1, .L147+0x4
	mov	r0, sp
	mov	r2, #0x2
	bl	memcpy
	mov	r5, #0x2
	ldrsb	r5, [r6, r5]
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__divsi3
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x1
	ldrb	r0, [r6]
	add	r4, r4, r0
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__modsi3
	add	r2, r0, #0
	lsl	r2, r2, #0x1
	ldrb	r0, [r6, #0x1]
	add	r2, r2, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, sp
	add	r1, r4, #0
	bl	MenuPrint
	mov	r0, #0x3
	ldrsb	r0, [r6, r0]
	cmp	r8, r0
	bge	.L142	@cond_branch
	ldrb	r0, [r6, #0x4]
	b	.L146
.L148:
	.align	2, 0
.L147:
	.word	gMenu
	.word	.LC46
.L142:
	mov	r0, #0x4
	ldrsb	r0, [r6, r0]
	cmp	r8, r0
	ble	.L144	@cond_branch
	ldrb	r0, [r6, #0x3]
	b	.L146
.L144:
	ldrb	r0, [r6, #0x2]
	add	r0, r0, r9
.L146:
	strb	r0, [r6, #0x2]
	ldr	r5, .L149
	mov	r6, #0x2
	ldrsb	r6, [r5, r6]
	add	r0, r6, #0
	add	r1, r7, #0
	bl	__divsi3
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	lsl	r4, r4, #0x1
	ldrb	r0, [r5]
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	add	r1, r7, #0
	bl	__modsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x1
	ldrb	r0, [r5, #0x1]
	add	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	RedrawMenuCursor
	ldrb	r0, [r5, #0x2]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L150:
	.align	2, 0
.L149:
	.word	gMenu
.Lfe33:
	.size	 MoveMenuCursor3,.Lfe33-MoveMenuCursor3
	.align	2, 0
	.globl	MoveMenuCursor4
	.type	 MoveMenuCursor4,function
	.thumb_func
MoveMenuCursor4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L161
	mov	r0, sp
	mov	r2, #0x2
	bl	memcpy
	ldr	r6, .L161+0x4
	mov	r1, #0x2
	ldrsb	r1, [r6, r1]
	mov	r2, r8
	lsl	r0, r2, #0x18
	asr	r0, r0, #0x18
	add	r1, r1, r0
	mov	r0, #0x4
	ldrsb	r0, [r6, r0]
	cmp	r1, r0
	bgt	.L152	@cond_branch
	bl	sub_80723D4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L154	@cond_branch
	ldrb	r0, [r6, #0x2]
	b	.L160
.L162:
	.align	2, 0
.L161:
	.word	.LC46
	.word	gMenu
.L152:
	ldrb	r0, [r6, #0x2]
	b	.L160
.L154:
	mov	r0, #0x4
	ldrsb	r0, [r6, r0]
	add	r0, r0, #0x1
	ldrb	r7, [r6, #0x5]
	add	r1, r7, #0
	bl	__divsi3
	cmp	r0, #0
	bne	.L155	@cond_branch
	mov	r5, #0x2
	ldrsb	r5, [r6, r5]
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__modsi3
	add	r1, r6, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r4, [r0]
	add	r4, r4, #0x1
	ldrb	r0, [r6]
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__divsi3
	ldrb	r1, [r6, #0x6]
	bl	__modsi3
	add	r2, r0, #0
	lsl	r2, r2, #0x1
	ldrb	r6, [r6, #0x1]
	add	r2, r2, r6
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, sp
	add	r1, r4, #0
	bl	MenuPrint
	b	.L156
.L155:
	mov	r5, #0x2
	ldrsb	r5, [r6, r5]
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__modsi3
	add	r1, r6, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r4, [r0]
	add	r4, r4, #0x1
	ldrb	r1, [r6]
	add	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__divsi3
	add	r2, r0, #0
	lsl	r2, r2, #0x1
	ldrb	r6, [r6, #0x1]
	add	r2, r2, r6
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, sp
	add	r1, r4, #0
	bl	MenuPrint
.L156:
	ldr	r6, .L163
	mov	r2, r8
	lsl	r0, r2, #0x18
	asr	r0, r0, #0x18
	ldrb	r1, [r6, #0x2]
	add	r0, r0, r1
	strb	r0, [r6, #0x2]
	mov	r0, #0x4
	ldrsb	r0, [r6, r0]
	add	r0, r0, #0x1
	ldrb	r7, [r6, #0x5]
	add	r1, r7, #0
	bl	__divsi3
	cmp	r0, #0
	bne	.L157	@cond_branch
	mov	r5, #0x2
	ldrsb	r5, [r6, r5]
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__modsi3
	add	r1, r6, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r4, [r0]
	ldrb	r2, [r6]
	add	r4, r4, r2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__divsi3
	ldrb	r1, [r6, #0x6]
	bl	__modsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x1
	ldrb	r6, [r6, #0x1]
	add	r1, r1, r6
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	RedrawMenuCursor
	b	.L158
.L164:
	.align	2, 0
.L163:
	.word	gMenu
.L157:
	mov	r5, #0x2
	ldrsb	r5, [r6, r5]
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__modsi3
	add	r1, r6, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r4, [r0]
	ldrb	r0, [r6]
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	add	r1, r7, #0
	bl	__divsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x1
	ldrb	r6, [r6, #0x1]
	add	r1, r1, r6
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	RedrawMenuCursor
.L158:
	ldr	r0, .L165
	ldrb	r0, [r0, #0x2]
.L160:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L166:
	.align	2, 0
.L165:
	.word	gMenu
.Lfe34:
	.size	 MoveMenuCursor4,.Lfe34-MoveMenuCursor4
	.align	2, 0
	.type	 sub_80723D4,function
	.thumb_func
sub_80723D4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r2, .L175
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L168	@cond_branch
	ldr	r1, .L175+0x4
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	ldrb	r1, [r1, #0x5]
	cmp	r0, r1
	blt	.L174	@cond_branch
.L168:
	mov	r0, r8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, .L175+0x4
	mov	r2, #0x2
	ldrsb	r2, [r0, r2]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	ldrb	r0, [r0, #0x5]
	sub	r0, r0, #0x1
	sub	r1, r1, r0
	cmp	r2, r1
	bge	.L174	@cond_branch
.L169:
	mov	r0, r8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L170	@cond_branch
	ldr	r6, .L175+0x4
	mov	r4, #0x2
	ldrsb	r4, [r6, r4]
	ldrb	r5, [r6, #0x5]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__modsi3
	add	r7, r0, #0
	sub	r4, r4, r7
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__modsi3
	cmp	r0, #0x1
	beq	.L174	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r6, r0]
	cmp	r0, #0
	beq	.L174	@cond_branch
	cmp	r7, #0
	beq	.L174	@cond_branch
.L170:
	mov	r0, r8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L172	@cond_branch
	ldr	r1, .L175+0x4
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	ldrb	r4, [r1, #0x5]
	add	r1, r4, #0
	bl	__modsi3
	sub	r4, r4, #0x1
	cmp	r0, r4
	bne	.L172	@cond_branch
.L174:
	mov	r0, #0x1
	b	.L173
.L176:
	.align	2, 0
.L175:
	.word	gMain
	.word	gMenu
.L172:
	mov	r0, #0x0
.L173:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 sub_80723D4,.Lfe35-sub_80723D4
	.align	2, 0
	.type	 sub_8072484,function
	.thumb_func
sub_8072484:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff8
	add	r6, r0, #0
	mov	r8, r1
	add	r5, r2, #0
	ldr	r1, [sp, #0x24]
	ldr	r4, [sp, #0x28]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r7, .L179
	strb	r1, [r7, #0x5]
	add	r0, r5, #0
	bl	__udivsi3
	strb	r0, [r7, #0x6]
	mov	r1, r9
	str	r1, [sp]
	str	r4, [sp, #0x4]
	mov	r0, #0x0
	add	r1, r6, #0
	mov	r2, r8
	add	r3, r5, #0
	bl	InitMenu
	mov	r0, #0x0
	ldr	r1, [sp, #0x2c]
	cmp	r1, #0
	beq	.L178	@cond_branch
	mov	r0, #0xff
.L178:
	strb	r0, [r7, #0x7]
	mov	r0, r9
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L180:
	.align	2, 0
.L179:
	.word	gMenu
.Lfe36:
	.size	 sub_8072484,.Lfe36-sub_8072484
	.align	2, 0
	.type	 sub_80724F4,function
	.thumb_func
sub_80724F4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff4
	mov	r8, r3
	ldr	r3, [sp, #0x2c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	mov	r4, #0x0
	ldr	r0, .L208
	mov	r9, r0
	mov	r1, r9
	add	r1, r1, #0x8
	mov	r2, #0x0
.L185:
	add	r0, r4, r1
	strb	r2, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bls	.L185	@cond_branch
	mov	r7, #0x0
	mov	r4, #0x0
	lsr	r2, r6, #0x1
	mov	sl, r2
	ldr	r0, [sp, #0x4]
	lsl	r0, r0, #0x18
	str	r0, [sp, #0x8]
	cmp	r7, r6
	bcs	.L188	@cond_branch
.L190:
	lsl	r0, r4, #0x3
	add	r0, r0, r8
	ldr	r0, [r0]
	bl	sub_8072CA4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0x7
	asr	r0, r1, #0x3
	add	r0, r0, #0x1
	cmp	r0, r7
	bls	.L189	@cond_branch
	add	r7, r0, #0
.L189:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L190	@cond_branch
.L188:
	mov	r4, #0x1
	ldr	r2, .L208
	mov	r9, r2
	cmp	r4, r5
	bhi	.L195	@cond_branch
	mov	r1, r9
	add	r1, r1, #0x8
.L197:
	add	r0, r4, r1
	strb	r7, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bls	.L197	@cond_branch
.L195:
	mov	r4, #0x1
	cmp	r4, r5
	bhi	.L200	@cond_branch
	ldr	r3, .L208+0x4
.L202:
	add	r2, r4, r3
	ldrb	r1, [r2]
	sub	r0, r4, #0x1
	add	r0, r0, r3
	add	r1, r1, #0x1
	ldrb	r0, [r0]
	add	r1, r1, r0
	strb	r1, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bls	.L202	@cond_branch
.L200:
	mov	r1, r9
	add	r1, r1, #0x8
	add	r1, r5, r1
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	cmp	sl, r5
	bcc	.L206	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L205	@cond_branch
.L206:
	cmp	r5, #0x1
	beq	.L205	@cond_branch
	cmp	r5, r6
	bne	.L204	@cond_branch
.L205:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, #0x1
	b	.L207
.L209:
	.align	2, 0
.L208:
	.word	gMenu
	.word	gMenu+0x8
.L204:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, #0x3
.L207:
	ldr	r2, [sp, #0x8]
	asr	r1, r2, #0x18
	add	r1, r1, r0
	lsl	r1, r1, #0x18
	.code	16
	lsr	r3, r1, #0x18
	mov	r0, r9
	add	r0, r0, #0x8
	add	r0, r5, r0
	ldrb	r2, [r0]
	add	r2, r2, #0x1
	ldr	r0, [sp]
	add	r2, r0, r2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, [sp, #0x4]
	bl	MenuDrawTextWindow
	add	r0, r7, #0
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 sub_80724F4,.Lfe37-sub_80724F4
	.align	2, 0
	.type	 sub_8072620,function
	.thumb_func
sub_8072620:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffff0
	mov	sl, r3
	ldr	r3, [sp, #0x30]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	mov	r4, #0x0
	ldr	r7, .L243
	add	r1, r7, #0
	add	r1, r1, #0x8
	mov	r2, #0x0
.L214:
	add	r0, r4, r1
	strb	r2, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bls	.L214	@cond_branch
	mov	r5, #0x0
	mov	r4, #0x0
	cmp	r4, r8
	bcs	.L217	@cond_branch
.L219:
	lsl	r0, r4, #0x3
	add	r0, r0, sl
	ldr	r0, [r0]
	bl	sub_8072CA4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0x7
	asr	r0, r1, #0x3
	add	r0, r0, #0x1
	cmp	r0, r5
	bls	.L218	@cond_branch
	add	r5, r0, #0
.L218:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r8
	bcc	.L219	@cond_branch
.L217:
	mov	r4, #0x1
	ldr	r7, .L243
	cmp	r4, r6
	bhi	.L224	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #0x8
.L226:
	add	r0, r4, r1
	strb	r5, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bls	.L226	@cond_branch
.L224:
	mov	r4, #0x1
	cmp	r4, r6
	bhi	.L229	@cond_branch
	ldr	r3, .L243+0x4
.L231:
	add	r2, r4, r3
	ldrb	r1, [r2]
	sub	r0, r4, #0x1
	add	r0, r0, r3
	add	r1, r1, #0x1
	ldrb	r0, [r0]
	add	r1, r1, r0
	strb	r1, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bls	.L231	@cond_branch
.L229:
	add	r1, r7, #0
	add	r1, r1, #0x8
	add	r1, r6, r1
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	mov	r4, #0x0
	cmp	r4, r6
	bcs	.L234	@cond_branch
.L236:
	mov	r7, #0x0
	mov	r5, #0x0
	add	r0, r4, #0x1
	mov	r9, r0
	cmp	r4, r8
	bge	.L235	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L243+0x4
	add	r0, r0, r1
	str	r0, [sp, #0xc]
.L240:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldr	r0, [r0]
	ldr	r2, [sp, #0xc]
	ldrb	r1, [r2]
	add	r1, r1, #0x1
	ldr	r3, [sp]
	add	r1, r3, r1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r7, #0x1
	ldr	r3, [sp, #0x4]
	add	r2, r3, r2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	bl	MenuPrint
	add	r0, r5, r6
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, r5
	cmp	r0, r8
	blt	.L240	@cond_branch
.L235:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r6
	bcc	.L236	@cond_branch
.L234:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L244:
	.align	2, 0
.L243:
	.word	gMenu
	.word	gMenu+0x8
.Lfe38:
	.size	 sub_8072620,.Lfe38-sub_8072620
	.align	2, 0
	.globl	sub_807274C
	.type	 sub_807274C,function
	.thumb_func
sub_807274C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff4
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r8, r2
	mov	r9, r3
	ldr	r7, [sp, #0x28]
	ldr	r6, [sp, #0x2c]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, r8
	add	r3, r7, #0
	bl	sub_80724F4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r5, r5, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r6, [sp]
	str	r0, [sp, #0x4]
	ldr	r0, [sp, #0x30]
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, r8
	mov	r3, r9
	bl	sub_8072484
	str	r6, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, r8
	add	r3, r7, #0
	bl	sub_8072620
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 sub_807274C,.Lfe39-sub_807274C
	.align	2, 0
	.globl	sub_80727CC
	.type	 sub_80727CC,function
	.thumb_func
sub_80727CC:
	push	{lr}
	ldr	r0, .L261
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L247	@cond_branch
	ldr	r0, .L261+0x4
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	beq	.L248	@cond_branch
	bl	HandleDestroyMenuCursors
.L248:
	mov	r0, #0x5
	bl	PlaySE
	bl	GetMenuCursorPos
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	b	.L258
.L262:
	.align	2, 0
.L261:
	.word	gMain
	.word	gMenu
.L247:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L249	@cond_branch
	ldr	r0, .L263
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	beq	.L250	@cond_branch
	bl	HandleDestroyMenuCursors
.L250:
	mov	r0, #0x1
	neg	r0, r0
	b	.L258
.L264:
	.align	2, 0
.L263:
	.word	gMenu
.L249:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L251	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L265
	ldrb	r0, [r0, #0x5]
	neg	r0, r0
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	b	.L259
.L266:
	.align	2, 0
.L265:
	.word	gMenu
.L251:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L253	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L267
	ldrb	r0, [r0, #0x5]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	b	.L259
.L268:
	.align	2, 0
.L267:
	.word	gMenu
.L253:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L259
.L255:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L260	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L259:
	bl	MoveMenuCursor4
.L260:
	mov	r0, #0x2
	neg	r0, r0
.L258:
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 sub_80727CC,.Lfe40-sub_80727CC
	.align	2, 0
	.globl	sub_807288C
	.type	 sub_807288C,function
	.thumb_func
sub_807288C:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L270
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L271:
	.align	2, 0
.L270:
	.word	gMenu
.Lfe41:
	.size	 sub_807288C,.Lfe41-sub_807288C
	.align	2, 0
	.globl	PrintMenuItems
	.type	 PrintMenuItems,function
	.thumb_func
PrintMenuItems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L274	@cond_branch
	add	r0, r0, #0x1
	lsl	r6, r0, #0x18
.L276:
	lsl	r0, r4, #0x3
	add	r0, r0, r8
	ldr	r0, [r0]
	lsl	r2, r4, #0x1
	add	r2, r7, r2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsr	r1, r6, #0x18
	bl	MenuPrint
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L276	@cond_branch
.L274:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 PrintMenuItems,.Lfe42-PrintMenuItems
	.align	2, 0
	.globl	PrintMenuItemsReordered
	.type	 PrintMenuItemsReordered,function
	.thumb_func
PrintMenuItemsReordered:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L280	@cond_branch
	add	r0, r0, #0x1
	lsl	r6, r0, #0x18
.L282:
	ldr	r1, [sp, #0x18]
	add	r0, r1, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	ldr	r0, [r0]
	lsl	r2, r4, #0x1
	add	r2, r7, r2
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsr	r1, r6, #0x18
	bl	MenuPrint
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L282	@cond_branch
.L280:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 PrintMenuItemsReordered,.Lfe43-PrintMenuItemsReordered
	.align	2, 0
	.globl	InitYesNoMenu
	.type	 InitYesNoMenu,function
	.thumb_func
InitYesNoMenu:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r4, r4, r0
	lsr	r4, r4, #0x18
	add	r5, r5, r0
	lsr	r5, r5, #0x18
	ldr	r3, .L285
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x2
	bl	PrintMenuItems
	mov	r0, #0x0
	str	r0, [sp]
	str	r6, [sp, #0x4]
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x2
	bl	InitMenu
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	gMenuYesNoItems
.Lfe44:
	.size	 InitYesNoMenu,.Lfe44-InitYesNoMenu
	.align	2, 0
	.globl	DisplayYesNoMenu
	.type	 DisplayYesNoMenu,function
	.thumb_func
DisplayYesNoMenu:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r4, r0, #0
	add	r3, r1, #0
	mov	r8, r2
	lsl	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r4, #0x18
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	add	r4, r4, r0
	lsr	r4, r4, #0x18
	lsr	r5, r3, #0x18
	mov	r2, #0xa0
	lsl	r2, r2, #0x13
	add	r3, r3, r2
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	MenuDrawTextWindow
	add	r0, r6, #0
	add	r1, r5, #0
	mov	r2, #0x5
	bl	InitYesNoMenu
	ldr	r1, .L290
	mov	r0, #0x0
	mov	r2, r8
	cmp	r2, #0
	beq	.L288	@cond_branch
	mov	r0, #0xff
.L288:
	strb	r0, [r1, #0x7]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L291:
	.align	2, 0
.L290:
	.word	gMenu
.Lfe45:
	.size	 DisplayYesNoMenu,.Lfe45-DisplayYesNoMenu
	.align	2, 0
	.globl	ProcessMenuInputNoWrap_
	.type	 ProcessMenuInputNoWrap_,function
	.thumb_func
ProcessMenuInputNoWrap_:
	push	{lr}
	bl	ProcessMenuInputNoWrap
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 ProcessMenuInputNoWrap_,.Lfe46-ProcessMenuInputNoWrap_
	.align	2, 0
	.globl	MenuPrint_PixelCoords
	.type	 MenuPrint_PixelCoords,function
	.thumb_func
MenuPrint_PixelCoords:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L294
	ldr	r0, [r0]
	ldr	r1, .L294+0x4
	ldrh	r5, [r1]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	add	r1, r6, #0
	add	r2, r5, #0
	add	r3, r4, #0
	bl	sub_8004D04
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L295:
	.align	2, 0
.L294:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe47:
	.size	 MenuPrint_PixelCoords,.Lfe47-MenuPrint_PixelCoords
	.align	2, 0
	.globl	sub_8072A18
	.type	 sub_8072A18,function
	.thumb_func
sub_8072A18:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff0
	add	r6, r0, #0
	ldr	r5, [sp, #0x20]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L297
	ldr	r0, [r0]
	ldr	r4, .L297+0x4
	ldrh	r4, [r4]
	str	r1, [sp]
	str	r2, [sp, #0x4]
	str	r3, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r1, #0x0
	add	r2, r6, #0
	add	r3, r4, #0
	bl	sub_8004FD0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L298:
	.align	2, 0
.L297:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe48:
	.size	 sub_8072A18,.Lfe48-sub_8072A18
	.align	2, 0
	.globl	unref_sub_8072A5C
	.type	 unref_sub_8072A5C,function
	.thumb_func
unref_sub_8072A5C:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #0xfffffff0
	mov	r8, r0
	mov	r9, r1
	ldr	r4, [sp, #0x28]
	ldr	r6, [sp, #0x2c]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L300
	ldr	r0, [r0]
	ldr	r1, .L300+0x4
	ldrh	r5, [r1]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r6, [sp, #0xc]
	mov	r1, r8
	mov	r2, r9
	add	r3, r5, #0
	bl	sub_8004FD0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L301:
	.align	2, 0
.L300:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe49:
	.size	 unref_sub_8072A5C,.Lfe49-unref_sub_8072A5C
	.align	2, 0
	.globl	sub_8072AB0
	.type	 sub_8072AB0,function
	.thumb_func
sub_8072AB0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #0xfffffff0
	mov	r9, r0
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r0, [sp, #0x2c]
	ldr	r2, [sp, #0x30]
	lsl	r4, r4, #0x18
	lsr	r1, r4, #0x18
	mov	ip, r1
	lsl	r5, r5, #0x10
	lsr	r7, r5, #0x10
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L306
	ldr	r0, [r0]
	ldr	r1, .L306+0x4
	ldrh	r3, [r1]
	mov	r1, ip
	str	r1, [sp]
	str	r7, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r2, [sp, #0xc]
	mov	r1, #0x0
	mov	r2, r9
	bl	sub_8004FD0
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	lsr	r4, r4, #0x1b
	mov	ip, r4
	lsr	r7, r5, #0x13
	add	r1, r6, #0x7
	lsr	r6, r1, #0x3
	mov	r1, r8
	add	r1, r1, #0x7
	asr	r1, r1, #0x3
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	cmp	r2, r8
	bcs	.L305	@cond_branch
	lsl	r1, r2, #0x1
	add	r1, r7, r1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, ip
	add	r2, r0, r6
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r8
	add	r3, r0, r7
	sub	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, ip
	bl	MenuFillWindowRectWithBlankTile
.L305:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L307:
	.align	2, 0
.L306:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe50:
	.size	 sub_8072AB0,.Lfe50-sub_8072AB0
	.align	2, 0
	.globl	MenuPrint_RightAligned
	.type	 MenuPrint_RightAligned,function
	.thumb_func
MenuPrint_RightAligned:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	add	r3, r1, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L309
	ldr	r0, [r0]
	ldr	r1, .L309+0x4
	ldrh	r4, [r1]
	str	r2, [sp]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	sub_8004D38
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe51:
	.size	 MenuPrint_RightAligned,.Lfe51-MenuPrint_RightAligned
	.align	2, 0
	.globl	sub_8072B80
	.type	 sub_8072B80,function
	.thumb_func
sub_8072B80:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xffffffbc
	mov	r8, r0
	add	r6, r1, #0
	add	r5, r2, #0
	add	r1, r3, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L312
	ldr	r0, [r4]
	bl	GetStringWidth
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, [r4]
	mov	r1, #0x1
	str	r1, [sp]
	add	r1, sp, #0x4
	mov	r2, r8
	bl	AlignString
	ldr	r0, [r4]
	ldr	r1, .L312+0x4
	ldrh	r2, [r1]
	str	r5, [sp]
	add	r1, sp, #0x4
	add	r3, r6, #0
	bl	sub_8003460
	add	sp, sp, #0x44
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe52:
	.size	 sub_8072B80,.Lfe52-sub_8072B80
	.align	2, 0
	.globl	sub_8072BD8
	.type	 sub_8072BD8,function
	.thumb_func
sub_8072BD8:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff8
	add	r6, r0, #0
	add	r4, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r0, .L315
	ldr	r0, [r0]
	ldr	r1, .L315+0x4
	ldrh	r5, [r1]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	add	r1, r6, #0
	add	r2, r5, #0
	add	r3, r4, #0
	bl	sub_8004DB0
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L316:
	.align	2, 0
.L315:
	.word	gMenuWindowPtr
	.word	gMenuTextTileOffset
.Lfe53:
	.size	 sub_8072BD8,.Lfe53-sub_8072BD8
	.align	2, 0
	.globl	sub_8072C14
	.type	 sub_8072C14,function
	.thumb_func
sub_8072C14:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L318
	ldr	r0, [r0]
	str	r3, [sp]
	add	r1, r5, #0
	add	r2, r6, #0
	add	r3, r4, #0
	bl	AlignInt1
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L319:
	.align	2, 0
.L318:
	.word	gMenuWindowPtr
.Lfe54:
	.size	 sub_8072C14,.Lfe54-sub_8072C14
	.align	2, 0
	.globl	sub_8072C44
	.type	 sub_8072C44,function
	.thumb_func
sub_8072C44:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L321
	ldr	r0, [r0]
	str	r3, [sp]
	add	r1, r5, #0
	add	r2, r6, #0
	add	r3, r4, #0
	bl	AlignInt2
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L322:
	.align	2, 0
.L321:
	.word	gMenuWindowPtr
.Lfe55:
	.size	 sub_8072C44,.Lfe55-sub_8072C44
	.align	2, 0
	.globl	sub_8072C74
	.type	 sub_8072C74,function
	.thumb_func
sub_8072C74:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldr	r0, .L324
	ldr	r0, [r0]
	str	r3, [sp]
	add	r1, r5, #0
	add	r2, r6, #0
	add	r3, r4, #0
	bl	AlignString
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L325:
	.align	2, 0
.L324:
	.word	gMenuWindowPtr
.Lfe56:
	.size	 sub_8072C74,.Lfe56-sub_8072C74
	.align	2, 0
	.globl	sub_8072CA4
	.type	 sub_8072CA4,function
	.thumb_func
sub_8072CA4:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L327
	ldr	r0, [r0]
	bl	GetStringWidth
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L328:
	.align	2, 0
.L327:
	.word	gMenuWindowPtr
.Lfe57:
	.size	 sub_8072CA4,.Lfe57-sub_8072CA4
	.align	2, 0
	.globl	sub_8072CBC
	.type	 sub_8072CBC,function
	.thumb_func
sub_8072CBC:
	push	{lr}
	ldr	r0, .L330
	ldr	r0, [r0]
	bl	sub_8004E24
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L331:
	.align	2, 0
.L330:
	.word	gMenuWindowPtr
.Lfe58:
	.size	 sub_8072CBC,.Lfe58-sub_8072CBC
	.align	2, 0
	.globl	sub_8072CD4
	.type	 sub_8072CD4,function
	.thumb_func
sub_8072CD4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r3, r2, #0
	ldr	r0, .L333
	ldr	r0, [r0]
	add	r1, r4, #0
	add	r2, r5, #0
	bl	sub_8004E28
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	gMenuWindowPtr
.Lfe59:
	.size	 sub_8072CD4,.Lfe59-sub_8072CD4
	.align	2, 0
	.globl	MenuUpdateWindowText_OverrideLineLength
	.type	 MenuUpdateWindowText_OverrideLineLength,function
	.thumb_func
MenuUpdateWindowText_OverrideLineLength:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L336
	ldr	r0, [r0]
	bl	sub_80037C8
	pop	{r1}
	bx	r1
.L337:
	.align	2, 0
.L336:
	.word	gMenuWindowPtr
.Lfe60:
	.size	 MenuUpdateWindowText_OverrideLineLength,.Lfe60-MenuUpdateWindowText_OverrideLineLength
	.align	2, 0
	.globl	unref_sub_8072D0C
	.type	 unref_sub_8072D0C,function
	.thumb_func
unref_sub_8072D0C:
	ldr	r0, .L339
	ldr	r0, [r0]
	bx	lr
.L340:
	.align	2, 0
.L339:
	.word	gMenuWindowPtr
.Lfe61:
	.size	 unref_sub_8072D0C,.Lfe61-unref_sub_8072D0C
	.align	2, 0
	.type	 sub_8072D18,function
	.thumb_func
sub_8072D18:
	push	{lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L342
	ldr	r3, .L342+0x4
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x18
	str	r1, [sp]
	add	r1, r2, #0
	mov	r2, #0xc
	bl	sub_814A5C0
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	0xffff
	.word	0x2d9f
.Lfe62:
	.size	 sub_8072D18,.Lfe62-sub_8072D18
	.align	2, 0
	.globl	InitMenu
	.type	 InitMenu,function
	.thumb_func
InitMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, [sp, #0x18]
	ldr	r5, [sp, #0x1c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r1, r5, #0x18
	cmp	r1, #0
	beq	.L345	@cond_branch
	bl	sub_8072D18
.L345:
	ldr	r1, .L348
	sub	r0, r7, #0x1
	mov	r2, #0x0
	strb	r0, [r1]
	mov	r0, r8
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x3]
	sub	r0, r6, #0x1
	strb	r0, [r1, #0x4]
	strb	r2, [r1, #0x7]
	cmp	r4, #0
	blt	.L347	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	cmp	r4, r0
	ble	.L346	@cond_branch
.L347:
	mov	r4, #0x0
.L346:
	strb	r4, [r1, #0x2]
	mov	r0, #0x0
	bl	MoveMenuCursor
	add	r0, r4, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L349:
	.align	2, 0
.L348:
	.word	gMenu
.Lfe63:
	.size	 InitMenu,.Lfe63-InitMenu
	.section .rodata
.LC136:
	.byte	0xef
	.byte	0xff
.text
	.align	2, 0
	.globl	RedrawMenuCursor
	.type	 RedrawMenuCursor,function
	.thumb_func
RedrawMenuCursor:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, .L351
	mov	r0, sp
	mov	r2, #0x2
	bl	memcpy
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sp
	add	r1, r4, #0
	add	r2, r5, #0
	bl	MenuPrint
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L352:
	.align	2, 0
.L351:
	.word	.LC136
.Lfe64:
	.size	 RedrawMenuCursor,.Lfe64-RedrawMenuCursor
	.align	2, 0
	.globl	unref_sub_8072DC0
	.type	 unref_sub_8072DC0,function
	.thumb_func
unref_sub_8072DC0:
	push	{lr}
	bl	sub_814A904
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 unref_sub_8072DC0,.Lfe65-unref_sub_8072DC0
	.align	2, 0
	.globl	sub_8072DCC
	.type	 sub_8072DCC,function
	.thumb_func
sub_8072DCC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_814A958
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 sub_8072DCC,.Lfe66-sub_8072DCC
	.align	2, 0
	.globl	sub_8072DDC
	.type	 sub_8072DDC,function
	.thumb_func
sub_8072DDC:
	push	{lr}
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x18
	bl	sub_8072DCC
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 sub_8072DDC,.Lfe67-sub_8072DDC
	.align	2, 0
	.globl	HandleDestroyMenuCursors
	.type	 HandleDestroyMenuCursors,function
	.thumb_func
HandleDestroyMenuCursors:
	push	{lr}
	bl	DestroyMenuCursor
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 HandleDestroyMenuCursors,.Lfe68-HandleDestroyMenuCursors

	.lcomm	gMenu,16
.text
	.align	2, 0
