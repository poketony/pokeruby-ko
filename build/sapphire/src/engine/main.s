@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gGameVersion
	.section .rodata
	.type	 gGameVersion,object
	.size	 gGameVersion,1
gGameVersion:
	.byte	0x1
	.globl	gGameLanguage
	.type	 gGameLanguage,object
	.size	 gGameLanguage,1
gGameLanguage:
	.byte	0x2
	.globl	BuildDateTime
	.align	2, 0
	.type	 BuildDateTime,object
	.size	 BuildDateTime,17
BuildDateTime:
	.ascii	"2002 10 15 20:34\000"
	.globl	gIntrTableTemplate
	.align	2, 0
	.type	 gIntrTableTemplate,object
gIntrTableTemplate:
	.word	SerialIntr
	.word	Timer3Intr
	.word	HBlankIntr
	.word	VBlankIntr
	.word	VCountIntr
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.word	IntrDummy
	.size	 gIntrTableTemplate,56
	.globl	gSharedMem
	.section ewram_data,"aw"
	.type	 gSharedMem,object
	.size	 gSharedMem,131072
gSharedMem:
	.byte	0x0
	.space	131071
	.globl	gFlashTimerIntrFunc
	.align	2, 0
	.type	 gFlashTimerIntrFunc,object
	.size	 gFlashTimerIntrFunc,4
gFlashTimerIntrFunc:
	.word	0x0
.text
	.align	2, 0
	.globl	AgbMain
	.type	 AgbMain,function
	.thumb_func
AgbMain:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0xff
	bl	RegisterRamReset
	ldr	r1, .L12
	ldr	r2, .L12+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	bl	InitKeys
	bl	InitIntrHandlers
	bl	m4aSoundInit
	bl	RtcInit
	bl	CheckForFlashMemory
	bl	InitMainCallbacks
	bl	InitMapMusic
	bl	SeedRngWithRtc
	ldr	r0, .L12+0x8
	mov	r4, #0x0
	strb	r4, [r0]
	ldr	r0, .L12+0xc
	ldr	r0, [r0]
	cmp	r0, #0x1
	beq	.L3	@cond_branch
	mov	r0, #0x0
	bl	SetMainCallback2
.L3:
	ldr	r0, .L12+0x10
	strb	r4, [r0]
	ldr	r5, .L12+0x14
	ldr	r6, .L12+0x18
	ldr	r0, .L12+0x1c
	add	r0, r0, r6
	mov	r8, r0
	mov	r7, #0x0
.L4:
	bl	ReadKeys
	ldr	r0, .L12+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldrh	r1, [r5, #0x28]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L7	@cond_branch
	mov	r0, #0xe
	and	r0, r0, r1
	cmp	r0, #0xe
	bne	.L7	@cond_branch
	bl	DoSoftReset
.L7:
	ldrb	r0, [r6]
	cmp	r0, #0x1
	bls	.L8	@cond_branch
	bl	sub_8055910
	cmp	r0, #0x1
	bne	.L8	@cond_branch
	ldr	r4, .L12+0x10
	strb	r0, [r4]
	bl	UpdateLinkAndCallCallbacks
	mov	r0, #0x0
	strb	r0, [r4]
	b	.L9
.L13:
	.align	2, 0
.L12:
	.word	0x4000204
	.word	0x4014
	.word	gSoftResetDisabled
	.word	gFlashMemoryPresent
	.word	gLinkTransferringData
	.word	gMain
	.word	gLink+0x339
	.word	0xc84
.L8:
	ldr	r4, .L14
	mov	r0, #0x0
	strb	r0, [r4]
	bl	UpdateLinkAndCallCallbacks
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bls	.L9	@cond_branch
	bl	sub_80558AC
	add	r1, r0, #0
	cmp	r1, #0x1
	bne	.L9	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	strb	r1, [r4]
	bl	UpdateLinkAndCallCallbacks
	strb	r7, [r4]
.L9:
	bl	PlayTimeCounter_Update
	bl	MapMusicMain
	bl	WaitForVBlank
	b	.L4
.L15:
	.align	2, 0
.L14:
	.word	gLinkTransferringData
.Lfe1:
	.size	 AgbMain,.Lfe1-AgbMain
	.align	2, 0
	.type	 UpdateLinkAndCallCallbacks,function
	.thumb_func
UpdateLinkAndCallCallbacks:
	push	{r4, lr}
	ldr	r0, .L19
	ldr	r1, .L19+0x4
	ldr	r2, .L19+0x8
	bl	LinkMain1
	ldr	r4, .L19+0xc
	str	r0, [r4]
	ldr	r0, .L19+0x10
	bl	LinkMain2
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L18	@cond_branch
	bl	sub_8055940
	cmp	r0, #0x1
	beq	.L17	@cond_branch
.L18:
	bl	CallCallbacks
.L17:
	pop	{r4}
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	gShouldAdvanceLinkState
	.word	gSendCmd
	.word	gRecvCmds
	.word	gLinkStatus
	.word	gMain+0x2c
.Lfe2:
	.size	 UpdateLinkAndCallCallbacks,.Lfe2-UpdateLinkAndCallCallbacks
	.align	2, 0
	.type	 InitMainCallbacks,function
	.thumb_func
InitMainCallbacks:
	push	{lr}
	ldr	r0, .L22
	mov	r1, #0x0
	str	r1, [r0, #0x20]
	str	r1, [r0, #0x24]
	str	r1, [r0]
	ldr	r0, .L22+0x4
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gMain
	.word	CB2_InitCopyrightScreenAfterBootup
.Lfe3:
	.size	 InitMainCallbacks,.Lfe3-InitMainCallbacks
	.align	2, 0
	.type	 CallCallbacks,function
	.thumb_func
CallCallbacks:
	push	{r4, lr}
	ldr	r4, .L27
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L25	@cond_branch
	bl	_call_via_r0
.L25:
	ldr	r0, [r4, #0x4]
	cmp	r0, #0
	beq	.L26	@cond_branch
	bl	_call_via_r0
.L26:
	pop	{r4}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	gMain
.Lfe4:
	.size	 CallCallbacks,.Lfe4-CallCallbacks
	.align	2, 0
	.globl	SetMainCallback2
	.type	 SetMainCallback2,function
	.thumb_func
SetMainCallback2:
	ldr	r1, .L30
	str	r0, [r1, #0x4]
	ldr	r0, .L30+0x4
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L31:
	.align	2, 0
.L30:
	.word	gMain
	.word	0x43c
.Lfe5:
	.size	 SetMainCallback2,.Lfe5-SetMainCallback2
	.align	2, 0
	.type	 SeedRngWithRtc,function
	.thumb_func
SeedRngWithRtc:
	push	{lr}
	bl	RtcGetMinuteCount
	add	r2, r0, #0
	lsr	r0, r2, #0x10
	ldr	r1, .L33
	and	r1, r1, r2
	eor	r0, r0, r1
	bl	SeedRng
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	0xffff
.Lfe6:
	.size	 SeedRngWithRtc,.Lfe6-SeedRngWithRtc
	.align	2, 0
	.globl	InitKeys
	.type	 InitKeys,function
	.thumb_func
InitKeys:
	ldr	r1, .L36
	mov	r0, #0x5
	strh	r0, [r1]
	ldr	r1, .L36+0x4
	mov	r0, #0x28
	strh	r0, [r1]
	ldr	r1, .L36+0x8
	mov	r0, #0x0
	strh	r0, [r1, #0x2c]
	strh	r0, [r1, #0x2e]
	strh	r0, [r1, #0x30]
	strh	r0, [r1, #0x28]
	strh	r0, [r1, #0x2a]
	bx	lr
.L37:
	.align	2, 0
.L36:
	.word	gKeyRepeatContinueDelay
	.word	gKeyRepeatStartDelay
	.word	gMain
.Lfe7:
	.size	 InitKeys,.Lfe7-InitKeys
	.align	2, 0
	.type	 ReadKeys,function
	.thumb_func
ReadKeys:
	push	{lr}
	ldr	r0, .L47
	ldrh	r1, [r0]
	ldr	r2, .L47+0x4
	add	r0, r2, #0
	add	r3, r0, #0
	eor	r3, r3, r1
	ldr	r1, .L47+0x8
	ldrh	r2, [r1, #0x28]
	add	r0, r3, #0
	bic	r0, r0, r2
	strh	r0, [r1, #0x2a]
	strh	r0, [r1, #0x2e]
	strh	r0, [r1, #0x30]
	add	r2, r1, #0
	cmp	r3, #0
	beq	.L39	@cond_branch
	ldrh	r0, [r2, #0x2c]
	cmp	r0, r3
	bne	.L39	@cond_branch
	ldrh	r0, [r2, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L41	@cond_branch
	strh	r3, [r2, #0x30]
	ldr	r0, .L47+0xc
	b	.L46
.L48:
	.align	2, 0
.L47:
	.word	0x4000130
	.word	0x3ff
	.word	gMain
	.word	gKeyRepeatContinueDelay
.L39:
	ldr	r0, .L49
.L46:
	ldrh	r0, [r0]
	strh	r0, [r2, #0x32]
.L41:
	strh	r3, [r2, #0x28]
	strh	r3, [r2, #0x2c]
	ldr	r0, .L49+0x4
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x2
	bne	.L42	@cond_branch
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strh	r0, [r2, #0x2e]
.L43:
	ldrh	r1, [r2, #0x2c]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L42	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strh	r0, [r2, #0x2c]
.L42:
	ldrh	r1, [r2, #0x2e]
	ldrh	r0, [r2, #0x36]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L45	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2, #0x34]
.L45:
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gKeyRepeatStartDelay
	.word	gSaveBlock2
.Lfe8:
	.size	 ReadKeys,.Lfe8-ReadKeys
	.align	2, 0
	.type	 InitIntrHandlers,function
	.thumb_func
InitIntrHandlers:
	push	{r4, r5, lr}
	ldr	r5, .L57
	ldr	r4, .L57+0x4
	ldr	r3, .L57+0x8
	ldr	r2, .L57+0xc
	mov	r1, #0xd
.L55:
	ldmia	r3!, {r0}
	stmia	r2!, {r0}
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L55	@cond_branch
	ldr	r0, .L57+0x10
	str	r5, [r0]
	str	r4, [r0, #0x4]
	ldr	r1, .L57+0x14
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	ldr	r0, .L57+0x18
	str	r4, [r0]
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetSerialCallback
	ldr	r0, .L57+0x1c
	mov	r2, #0x1
	strh	r2, [r0]
	ldr	r1, .L57+0x20
	strh	r2, [r1]
	ldr	r3, .L57+0x24
	mov	r0, #0x8
	strh	r0, [r3]
	ldrh	r0, [r1]
	orr	r0, r0, r2
	strh	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	IntrMain
	.word	IntrMain_Buffer
	.word	gIntrTableTemplate
	.word	gIntrTable
	.word	0x40000d4
	.word	0x84000200
	.word	0x3007ffc
	.word	0x4000208
	.word	0x4000200
	.word	0x4000004
.Lfe9:
	.size	 InitIntrHandlers,.Lfe9-InitIntrHandlers
	.align	2, 0
	.globl	SetVBlankCallback
	.type	 SetVBlankCallback,function
	.thumb_func
SetVBlankCallback:
	ldr	r1, .L60
	str	r0, [r1, #0xc]
	bx	lr
.L61:
	.align	2, 0
.L60:
	.word	gMain
.Lfe10:
	.size	 SetVBlankCallback,.Lfe10-SetVBlankCallback
	.align	2, 0
	.globl	SetHBlankCallback
	.type	 SetHBlankCallback,function
	.thumb_func
SetHBlankCallback:
	ldr	r1, .L63
	str	r0, [r1, #0x10]
	bx	lr
.L64:
	.align	2, 0
.L63:
	.word	gMain
.Lfe11:
	.size	 SetHBlankCallback,.Lfe11-SetHBlankCallback
	.align	2, 0
	.globl	SetVCountCallback
	.type	 SetVCountCallback,function
	.thumb_func
SetVCountCallback:
	ldr	r1, .L66
	str	r0, [r1, #0x14]
	bx	lr
.L67:
	.align	2, 0
.L66:
	.word	gMain
.Lfe12:
	.size	 SetVCountCallback,.Lfe12-SetVCountCallback
	.align	2, 0
	.globl	SetSerialCallback
	.type	 SetSerialCallback,function
	.thumb_func
SetSerialCallback:
	ldr	r1, .L69
	str	r0, [r1, #0x18]
	bx	lr
.L70:
	.align	2, 0
.L69:
	.word	gMain
.Lfe13:
	.size	 SetSerialCallback,.Lfe13-SetSerialCallback
	.align	2, 0
	.type	 VBlankIntr,function
	.thumb_func
VBlankIntr:
	push	{r4, r5, r6, lr}
	ldr	r0, .L74
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L72	@cond_branch
	bl	LinkVSync
.L72:
	ldr	r5, .L74+0x4
	ldrh	r4, [r5]
	mov	r6, #0x0
	strh	r6, [r5]
	bl	m4aSoundVSync
	strh	r4, [r5]
	ldr	r4, .L74+0x8
	ldr	r0, [r4, #0x20]
	add	r0, r0, #0x1
	str	r0, [r4, #0x20]
	ldr	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.L73	@cond_branch
	bl	_call_via_r0
.L73:
	ldr	r0, [r4, #0x24]
	add	r0, r0, #0x1
	str	r0, [r4, #0x24]
	ldr	r1, .L74+0xc
	ldr	r0, .L74+0x10
	ldrb	r0, [r0, #0x4]
	strb	r0, [r1]
	bl	m4aSoundMain
	bl	sub_800C35C
	bl	Random
	ldr	r1, .L74+0x14
	ldrh	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrh	r0, [r4, #0x1c]
	orr	r0, r0, r2
	ldrh	r1, [r4, #0x1c]
	orr	r0, r0, r6
	strh	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gLinkVSyncDisabled
	.word	0x4000208
	.word	gMain
	.word	gPcmDmaCounter
	.word	gSoundInfo
	.word	0x3007ff8
.Lfe14:
	.size	 VBlankIntr,.Lfe14-VBlankIntr
	.align	2, 0
	.globl	InitFlashTimer
	.type	 InitFlashTimer,function
	.thumb_func
InitFlashTimer:
	push	{lr}
	ldr	r0, .L77
	ldr	r1, [r0]
	mov	r0, #0x2
	bl	SetFlashTimerIntr
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	gFlashTimerIntrFunc
.Lfe15:
	.size	 InitFlashTimer,.Lfe15-InitFlashTimer
	.align	2, 0
	.type	 HBlankIntr,function
	.thumb_func
HBlankIntr:
	push	{r4, lr}
	ldr	r4, .L81
	ldr	r0, [r4, #0x10]
	cmp	r0, #0
	beq	.L80	@cond_branch
	bl	_call_via_r0
.L80:
	ldr	r2, .L81+0x4
	ldrh	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x1c]
	ldrh	r2, [r4, #0x1c]
	orr	r1, r1, r0
	strh	r1, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gMain
	.word	0x3007ff8
.Lfe16:
	.size	 HBlankIntr,.Lfe16-HBlankIntr
	.align	2, 0
	.type	 VCountIntr,function
	.thumb_func
VCountIntr:
	push	{r4, lr}
	ldr	r4, .L85
	ldr	r0, [r4, #0x14]
	cmp	r0, #0
	beq	.L84	@cond_branch
	bl	_call_via_r0
.L84:
	ldr	r2, .L85+0x4
	ldrh	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x1c]
	ldrh	r2, [r4, #0x1c]
	orr	r1, r1, r0
	strh	r1, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	gMain
	.word	0x3007ff8
.Lfe17:
	.size	 VCountIntr,.Lfe17-VCountIntr
	.align	2, 0
	.type	 SerialIntr,function
	.thumb_func
SerialIntr:
	push	{r4, lr}
	ldr	r4, .L89
	ldr	r0, [r4, #0x18]
	cmp	r0, #0
	beq	.L88	@cond_branch
	bl	_call_via_r0
.L88:
	ldr	r2, .L89+0x4
	ldrh	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x1c]
	ldrh	r2, [r4, #0x1c]
	orr	r1, r1, r0
	strh	r1, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gMain
	.word	0x3007ff8
.Lfe18:
	.size	 SerialIntr,.Lfe18-SerialIntr
	.align	2, 0
	.type	 IntrDummy,function
	.thumb_func
IntrDummy:
	bx	lr
.Lfe19:
	.size	 IntrDummy,.Lfe19-IntrDummy
	.align	2, 0
	.type	 WaitForVBlank,function
	.thumb_func
WaitForVBlank:
	push	{lr}
	ldr	r1, .L93
	ldrh	r2, [r1, #0x1c]
	ldr	r0, .L93+0x4
	and	r0, r0, r2
	ldrh	r2, [r1, #0x1c]
	strh	r0, [r1, #0x1c]
	bl	VBlankIntrWait
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gMain
	.word	0xfffe
.Lfe20:
	.size	 WaitForVBlank,.Lfe20-WaitForVBlank
	.align	2, 0
	.globl	DoSoftReset
	.type	 DoSoftReset,function
	.thumb_func
DoSoftReset:
	push	{r4, lr}
	ldr	r1, .L96
	mov	r0, #0x0
	strh	r0, [r1]
	bl	m4aSoundVSyncOff
	bl	remove_some_task
	ldr	r1, .L96+0x4
	ldrh	r2, [r1, #0xa]
	ldr	r3, .L96+0x8
	add	r0, r3, #0
	and	r0, r0, r2
	strh	r0, [r1, #0xa]
	ldrh	r4, [r1, #0xa]
	ldr	r2, .L96+0xc
	add	r0, r2, #0
	and	r0, r0, r4
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	add	r1, r1, #0xc
	ldrh	r4, [r1, #0xa]
	add	r0, r3, #0
	and	r0, r0, r4
	strh	r0, [r1, #0xa]
	ldrh	r4, [r1, #0xa]
	add	r0, r2, #0
	and	r0, r0, r4
	strh	r0, [r1, #0xa]
	ldrh	r0, [r1, #0xa]
	ldr	r0, .L96+0x10
	ldrh	r1, [r0, #0xa]
	and	r3, r3, r1
	strh	r3, [r0, #0xa]
	ldrh	r1, [r0, #0xa]
	and	r2, r2, r1
	strh	r2, [r0, #0xa]
	ldrh	r0, [r0, #0xa]
	bl	SiiRtcProtect
	mov	r0, #0xff
	bl	SoftReset
	pop	{r4}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	0x4000208
	.word	0x40000bc
	.word	0xc5ff
	.word	0x7fff
	.word	0x40000d4
.Lfe21:
	.size	 DoSoftReset,.Lfe21-DoSoftReset
	.align	2, 0
	.globl	ClearPokemonCrySongs
	.type	 ClearPokemonCrySongs,function
	.thumb_func
ClearPokemonCrySongs:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L99
	ldr	r2, .L99+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gPokemonCrySongs
	.word	0x1000034
.Lfe22:
	.size	 ClearPokemonCrySongs,.Lfe22-ClearPokemonCrySongs
	.comm	gLinkTransferringData, 4	@ 1
	.comm	gMain, 1088	@ 1088
	.comm	gSoftResetDisabled, 4	@ 1
	.comm	gLinkVSyncDisabled, 4	@ 1
	.comm	gKeyRepeatStartDelay, 4	@ 2
	.comm	gKeyRepeatContinueDelay, 4	@ 2
	.comm	gIntrTable, 56	@ 56
	.comm	IntrMain_Buffer, 2048	@ 2048
	.comm	gPcmDmaCounter, 4	@ 1
.text
	.align	2, 0
