@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08376420,object
	.size	 gUnknown_08376420,60
gUnknown_08376420:
	.byte	0x3
	.space	1
	.short	0x1
	.short	0x270f
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.space	3
	.byte	0x4
	.space	1
	.short	0x0
	.short	0x17
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.space	3
	.byte	0x5
	.space	1
	.short	0x0
	.short	0x3b
	.byte	0x2
	.byte	0x4
	.byte	0x0
	.space	3
	.byte	0x6
	.space	1
	.short	0x0
	.short	0x3b
	.byte	0x3
	.byte	0x5
	.byte	0x0
	.space	3
	.byte	0x7
	.space	1
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x6
	.space	3
	.globl	gOamData_837645C
	.align	2, 0
	.type	 gOamData_837645C,object
	.size	 gOamData_837645C,8
gOamData_837645C:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.globl	gSpriteImage_8376464
	.type	 gSpriteImage_8376464,object
gSpriteImage_8376464:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x2
	.byte	0x12
	.byte	0x11
	.byte	0x11
	.byte	0x2
	.byte	0x12
	.byte	0x11
	.byte	0x11
	.byte	0x2
	.byte	0x12
	.byte	0x11
	.byte	0x11
	.byte	0x2
	.byte	0x20
	.byte	0x11
	.byte	0x21
	.byte	0x0
	.byte	0x0
	.byte	0x12
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x0
	.byte	0x0
	.size	 gSpriteImage_8376464,32
	.globl	gSpriteImage_8376484
	.type	 gSpriteImage_8376484,object
gSpriteImage_8376484:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.byte	0x22
	.byte	0x2
	.byte	0x0
	.byte	0x20
	.byte	0x11
	.byte	0x21
	.byte	0x0
	.byte	0x20
	.byte	0x11
	.byte	0x11
	.byte	0x2
	.byte	0x20
	.byte	0x11
	.byte	0x11
	.byte	0x21
	.byte	0x20
	.byte	0x11
	.byte	0x11
	.byte	0x2
	.byte	0x20
	.byte	0x11
	.byte	0x21
	.byte	0x0
	.byte	0x20
	.byte	0x22
	.byte	0x2
	.byte	0x0
	.size	 gSpriteImage_8376484,32
	.globl	Palette_3764A4
	.align	1, 0
	.type	 Palette_3764A4,object
Palette_3764A4:
	.short	0x0
	.short	0x1f
	.short	0x2529
	.short	0x0
	.size	 Palette_3764A4,8
	.globl	gSpriteImageTable_83764AC
	.align	2, 0
	.type	 gSpriteImageTable_83764AC,object
gSpriteImageTable_83764AC:
	.word	gSpriteImage_8376464
	.short	0x20
	.space	2
	.word	gSpriteImage_8376484
	.short	0x20
	.space	2
	.size	 gSpriteImageTable_83764AC,16
	.globl	gUnknown_083764BC
	.align	2, 0
	.type	 gUnknown_083764BC,object
	.size	 gUnknown_083764BC,8
gUnknown_083764BC:
	.word	Palette_3764A4
	.short	0x1000
	.space	2
	.globl	gSpriteAnim_83764C4
	.align	2, 0
	.type	 gSpriteAnim_83764C4,object
gSpriteAnim_83764C4:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	0xfffffffe
	.byte	0x0
	.space	1
	.size	 gSpriteAnim_83764C4,8
	.globl	gSpriteAnim_83764CC
	.align	2, 0
	.type	 gSpriteAnim_83764CC,object
gSpriteAnim_83764CC:
	.short	0x0
	.byte	0x9e
	.space	1
	.short	0xfffffffe
	.byte	0x0
	.space	1
	.size	 gSpriteAnim_83764CC,8
	.globl	gSpriteAnim_83764D4
	.align	2, 0
	.type	 gSpriteAnim_83764D4,object
gSpriteAnim_83764D4:
	.short	0x1
	.byte	0x1e
	.space	1
	.short	0xfffffffe
	.byte	0x0
	.space	1
	.size	 gSpriteAnim_83764D4,8
	.globl	gSpriteAnimTable_83764DC
	.align	2, 0
	.type	 gSpriteAnimTable_83764DC,object
gSpriteAnimTable_83764DC:
	.word	gSpriteAnim_83764C4
	.word	gSpriteAnim_83764CC
	.word	gSpriteAnim_83764D4
	.size	 gSpriteAnimTable_83764DC,12
	.globl	gSpriteTemplate_83764E8
	.align	2, 0
	.type	 gSpriteTemplate_83764E8,object
	.size	 gSpriteTemplate_83764E8,24
gSpriteTemplate_83764E8:
	.short	0xffff
	.short	0x1000
	.word	gOamData_837645C
	.word	gSpriteAnimTable_83764DC
	.word	gSpriteImageTable_83764AC
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_08376500
	.type	 gUnknown_08376500,object
gUnknown_08376500:
	.byte	0x0
	.byte	0xf0
	.byte	0x0
	.byte	0xff
	.size	 gUnknown_08376500,4
.text
	.align	2, 0
	.globl	SpriteCB_ResetRtcCusor0
	.type	 SpriteCB_ResetRtcCusor0,function
	.thumb_func
SpriteCB_ResetRtcCusor0:
	push	{lr}
	add	r3, r0, #0
	ldr	r2, .L14
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0xc
	ldrsh	r1, [r0, r2]
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	beq	.L3	@cond_branch
	strh	r1, [r3, #0x30]
	sub	r0, r1, #0x1
	cmp	r0, #0x5
	bhi	.L3	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L14+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L15:
	.align	2, 0
.L14:
	.word	gTasks
	.word	.L11
	.align	2, 0
	.align	2, 0
.L11:
	.word	.L5
	.word	.L6
	.word	.L7
	.word	.L8
	.word	.L9
	.word	.L10
.L5:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x1
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x41
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x35
	b	.L13
.L6:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x1
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x41
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x56
	b	.L13
.L7:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x1
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x41
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x6b
	b	.L13
.L8:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x1
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x41
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x80
.L13:
	strh	r0, [r3, #0x20]
	mov	r0, #0x44
	strh	r0, [r3, #0x22]
	b	.L3
.L9:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x2
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x42
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x9b
	strh	r0, [r3, #0x20]
	mov	r0, #0x50
	strh	r0, [r3, #0x22]
	b	.L3
.L10:
	add	r0, r3, #0
	bl	DestroySprite
.L3:
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 SpriteCB_ResetRtcCusor0,.Lfe1-SpriteCB_ResetRtcCusor0
	.align	2, 0
	.globl	SpriteCB_ResetRtcCusor1
	.type	 SpriteCB_ResetRtcCusor1,function
	.thumb_func
SpriteCB_ResetRtcCusor1:
	push	{lr}
	add	r3, r0, #0
	ldr	r2, .L28
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0xc
	ldrsh	r1, [r0, r2]
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	beq	.L17	@cond_branch
	strh	r1, [r3, #0x30]
	sub	r0, r1, #0x1
	cmp	r0, #0x5
	bhi	.L17	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L28+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L29:
	.align	2, 0
.L28:
	.word	gTasks
	.word	.L25
	.align	2, 0
	.align	2, 0
.L25:
	.word	.L19
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L24
.L19:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x0
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x40
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x35
	b	.L27
.L20:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x0
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x40
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x56
	b	.L27
.L21:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x0
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x40
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x6b
	b	.L27
.L22:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r1, r3, #0
	add	r1, r1, #0x2a
	mov	r0, #0x0
	strb	r0, [r1]
	sub	r2, r2, #0x12
	ldrb	r1, [r2]
	sub	r0, r0, #0x40
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x80
.L27:
	strh	r0, [r3, #0x20]
	mov	r0, #0x5c
	strh	r0, [r3, #0x22]
	b	.L17
.L23:
	add	r0, r3, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L17
.L24:
	add	r0, r3, #0
	bl	DestroySprite
.L17:
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 SpriteCB_ResetRtcCusor1,.Lfe2-SpriteCB_ResetRtcCusor1
	.align	2, 0
	.globl	ResetRtcScreen_CreateCursor
	.type	 ResetRtcScreen_CreateCursor,function
	.thumb_func
ResetRtcScreen_CreateCursor:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L31
	bl	LoadSpritePalette
	ldr	r0, .L31+0x4
	mov	r8, r0
	mov	r1, #0x35
	mov	r2, #0x44
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r6, .L31+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r6, #0
	add	r4, r4, #0x1c
	add	r2, r0, r4
	ldr	r1, .L31+0xc
	str	r1, [r2]
	add	r0, r0, r6
	strh	r5, [r0, #0x2e]
	ldr	r1, .L31+0x10
	strh	r1, [r0, #0x30]
	mov	r0, r8
	mov	r1, #0x35
	mov	r2, #0x44
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r4
	ldr	r1, .L31+0x14
	str	r1, [r4]
	add	r0, r0, r6
	strh	r5, [r0, #0x2e]
	mov	r1, #0x1
	neg	r1, r1
	strh	r1, [r0, #0x30]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gUnknown_083764BC
	.word	gSpriteTemplate_83764E8
	.word	gSprites
	.word	SpriteCB_ResetRtcCusor0
	.word	0xffff
	.word	SpriteCB_ResetRtcCusor1
.Lfe3:
	.size	 ResetRtcScreen_CreateCursor,.Lfe3-ResetRtcScreen_CreateCursor
	.align	2, 0
	.globl	ResetRtcScreen_FreeCursorPalette
	.type	 ResetRtcScreen_FreeCursorPalette,function
	.thumb_func
ResetRtcScreen_FreeCursorPalette:
	push	{lr}
	ldr	r0, .L34
	ldrh	r0, [r0, #0x4]
	bl	FreeSpritePaletteByTag
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	gUnknown_083764BC
.Lfe4:
	.size	 ResetRtcScreen_FreeCursorPalette,.Lfe4-ResetRtcScreen_FreeCursorPalette
	.align	2, 0
	.globl	ResetRtcScreen_HideChooseTimeWindow
	.type	 ResetRtcScreen_HideChooseTimeWindow,function
	.thumb_func
ResetRtcScreen_HideChooseTimeWindow:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x8
	mov	r2, #0x19
	mov	r3, #0xb
	bl	MenuZeroFillWindowRect
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 ResetRtcScreen_HideChooseTimeWindow,.Lfe5-ResetRtcScreen_HideChooseTimeWindow
	.align	2, 0
	.globl	ResetRtcScreen_PrintTime
	.type	 ResetRtcScreen_PrintTime,function
	.thumb_func
ResetRtcScreen_PrintTime:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #0xfffffffc
	mov	sl, r0
	add	r0, r2, #0
	add	r4, r3, #0
	ldr	r6, [sp, #0x24]
	ldr	r2, [sp, #0x28]
	mov	r9, r2
	mov	r2, sl
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	ldr	r7, .L38
	ldr	r1, .L38+0x4
	bl	__umodsi3
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r4, #0
	mov	r1, #0x18
	bl	__umodsi3
	mov	r8, r0
	mov	r2, r8
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	add	r0, r6, #0
	mov	r1, #0x3c
	bl	__umodsi3
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r9
	mov	r1, #0x3c
	bl	__umodsi3
	mov	r9, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L38+0x8
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x18
	mov	r3, #0x1
	bl	sub_8072C44
	add	r0, r7, #0
	add	r1, r4, #0
	bl	StringCopy
	add	r7, r0, #0
	ldr	r1, .L38+0xc
	bl	StringCopy
	add	r7, r0, #0
	add	r0, r4, #0
	mov	r1, r8
	mov	r2, #0x12
	mov	r3, #0x1
	bl	sub_8072C44
	add	r0, r7, #0
	add	r1, r4, #0
	bl	StringCopy
	add	r7, r0, #0
	ldr	r4, .L38+0x10
	add	r1, r4, #0
	bl	StringCopy
	add	r7, r0, #0
	add	r1, r6, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	add	r7, r0, #0
	add	r1, r4, #0
	bl	StringCopy
	add	r7, r0, #0
	mov	r1, r9
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L38
	mov	r1, sl
	ldr	r2, [sp]
	bl	MenuPrint
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gStringVar4
	.word	0x2710
	.word	gStringVar1
	.word	gOtherText_Day
	.word	gUnknown_08376500
.Lfe6:
	.size	 ResetRtcScreen_PrintTime,.Lfe6-ResetRtcScreen_PrintTime
	.align	2, 0
	.globl	ResetRtcScreen_ShowChooseTimeWindow
	.type	 ResetRtcScreen_ShowChooseTimeWindow,function
	.thumb_func
ResetRtcScreen_ShowChooseTimeWindow:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #0xfffffff8
	add	r6, r0, #0
	mov	r8, r1
	add	r4, r2, #0
	add	r5, r3, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x3
	mov	r1, #0x8
	mov	r2, #0x19
	mov	r3, #0xb
	bl	MenuDrawTextWindow
	ldr	r0, .L41
	mov	r1, #0x14
	mov	r2, #0x9
	bl	MenuPrint
	str	r4, [sp]
	str	r5, [sp, #0x4]
	mov	r0, #0x4
	mov	r1, #0x9
	add	r2, r6, #0
	mov	r3, r8
	bl	ResetRtcScreen_PrintTime
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L42:
	.align	2, 0
.L41:
	.word	gOtherText_OK
.Lfe7:
	.size	 ResetRtcScreen_ShowChooseTimeWindow,.Lfe7-ResetRtcScreen_ShowChooseTimeWindow
	.align	2, 0
	.globl	ResetRtcScreen_MoveTimeUpDown
	.type	 ResetRtcScreen_MoveTimeUpDown,function
	.thumb_func
ResetRtcScreen_MoveTimeUpDown:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	add	r1, r3, #0
	mov	r0, #0x80
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L44	@cond_branch
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
	b	.L57
.L44:
	mov	r0, #0x40
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L47	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	b	.L58
.L47:
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L50	@cond_branch
	ldrh	r0, [r4]
	sub	r0, r0, #0xa
.L57:
	strh	r0, [r4]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, r5
	bge	.L46	@cond_branch
	strh	r2, [r4]
	b	.L46
.L50:
	mov	r0, #0x10
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L53	@cond_branch
	mov	r0, #0x0
	b	.L56
.L53:
	ldrh	r0, [r4]
	add	r0, r0, #0xa
.L58:
	strh	r0, [r4]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, r2
	ble	.L46	@cond_branch
	strh	r5, [r4]
.L46:
	mov	r0, #0x1
.L56:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 ResetRtcScreen_MoveTimeUpDown,.Lfe8-ResetRtcScreen_MoveTimeUpDown
	.align	2, 0
	.globl	Task_ResetRtc_3
	.type	 Task_ResetRtc_3,function
	.thumb_func
Task_ResetRtc_3:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L60
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
	bx	lr
.L61:
	.align	2, 0
.L60:
	.word	gTasks
.Lfe9:
	.size	 Task_ResetRtc_3,.Lfe9-Task_ResetRtc_3
	.align	2, 0
	.globl	Task_ResetRtc_2
	.type	 Task_ResetRtc_2,function
	.thumb_func
Task_ResetRtc_2:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ResetRtcScreen_HideChooseTimeWindow
	bl	ResetRtcScreen_FreeCursorPalette
	ldr	r1, .L63
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L63+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	gTasks
	.word	Task_ResetRtc_3
.Lfe10:
	.size	 Task_ResetRtc_2,.Lfe10-Task_ResetRtc_2
	.align	2, 0
	.globl	Task_ResetRtc_1
	.type	 Task_ResetRtc_1,function
	.thumb_func
Task_ResetRtc_1:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r7, r0, #0x3
	ldr	r0, .L76
	mov	r8, r0
	add	r5, r7, r0
	ldrb	r4, [r5, #0x4]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L76+0x4
	add	r2, r0, r1
	ldr	r1, .L76+0x8
	ldrh	r3, [r1, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r3
	mov	ip, r1
	cmp	r0, #0
	beq	.L66	@cond_branch
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L76+0xc
	str	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r5, #0x2]
	mov	r0, #0x6
	b	.L75
.L77:
	.align	2, 0
.L76:
	.word	gTasks+0x8
	.word	gUnknown_08376420+0xfffffff4
	.word	gMain
	.word	Task_ResetRtc_2
.L66:
	mov	r0, #0x10
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L67	@cond_branch
	ldrb	r0, [r2, #0x7]
	cmp	r0, #0
	bne	.L75	@cond_branch
.L67:
	mov	r3, ip
	ldrh	r1, [r3, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L69	@cond_branch
	ldrb	r0, [r2, #0x6]
	cmp	r0, #0
	beq	.L69	@cond_branch
.L75:
	strh	r0, [r5, #0x4]
	mov	r0, #0x5
	bl	PlaySE
	b	.L65
.L69:
	cmp	r4, #0x5
	bne	.L71	@cond_branch
	mov	r0, ip
	ldrh	r1, [r0, #0x2e]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L65	@cond_branch
	ldr	r1, .L78
	ldrh	r0, [r5, #0x6]
	strh	r0, [r1]
	ldrh	r0, [r5, #0x8]
	strb	r0, [r1, #0x2]
	ldrh	r0, [r5, #0xa]
	strb	r0, [r1, #0x3]
	ldrh	r0, [r5, #0xc]
	strb	r0, [r1, #0x4]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L78+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L78+0x8
	str	r1, [r0]
	strh	r4, [r5, #0x2]
	mov	r0, #0x6
	strh	r0, [r5, #0x4]
	b	.L65
.L79:
	.align	2, 0
.L78:
	.word	gLocalTime
	.word	gTasks
	.word	Task_ResetRtc_2
.L71:
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r5, r0
	ldrh	r1, [r2, #0x2]
	ldrh	r2, [r2, #0x4]
	mov	r3, ip
	ldrh	r4, [r3, #0x30]
	mov	r3, #0xc0
	and	r3, r3, r4
	bl	ResetRtcScreen_MoveTimeUpDown
	cmp	r0, #0
	beq	.L65	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrh	r2, [r5, #0x6]
	ldrb	r3, [r5, #0x8]
	ldrb	r0, [r5, #0xa]
	str	r0, [sp]
	ldrb	r0, [r5, #0xc]
	str	r0, [sp, #0x4]
	mov	r0, #0x4
	mov	r1, #0x9
	bl	ResetRtcScreen_PrintTime
.L65:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 Task_ResetRtc_1,.Lfe11-Task_ResetRtc_1
	.align	2, 0
	.globl	Task_ResetRtc_0
	.type	 Task_ResetRtc_0,function
	.thumb_func
Task_ResetRtc_0:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r5, #0x2
	add	r6, r6, r5
	lsl	r6, r6, #0x3
	ldr	r0, .L81
	mov	r8, r0
	add	r4, r6, r0
	mov	r0, #0x0
	strh	r0, [r4]
	ldr	r3, .L81+0x4
	ldrh	r0, [r3]
	strh	r0, [r4, #0x6]
	mov	r1, #0x2
	ldrsb	r1, [r3, r1]
	strh	r1, [r4, #0x8]
	mov	r2, #0x3
	ldrsb	r2, [r3, r2]
	strh	r2, [r4, #0xa]
	ldrb	r3, [r3, #0x4]
	lsl	r3, r3, #24
	asr	r3, r3, #24
	strh	r3, [r4, #0xc]
	ldrh	r0, [r4, #0x6]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	ResetRtcScreen_ShowChooseTimeWindow
	add	r0, r5, #0
	bl	ResetRtcScreen_CreateCursor
	mov	r0, #0x2
	strh	r0, [r4, #0x4]
	mov	r0, #0x8
	neg	r0, r0
	add	r8, r8, r0
	add	r6, r6, r8
	ldr	r0, .L81+0x8
	str	r0, [r6]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gTasks+0x8
	.word	gLocalTime
	.word	Task_ResetRtc_1
.Lfe12:
	.size	 Task_ResetRtc_0,.Lfe12-Task_ResetRtc_0
	.align	2, 0
	.globl	CB2_InitResetRtcScreen
	.type	 CB2_InitResetRtcScreen,function
	.thumb_func
CB2_InitResetRtcScreen:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	mov	r4, #0x0
	strh	r4, [r0]
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r2, #0xa0
	lsl	r2, r2, #0x13
	mov	r0, sp
	strh	r4, [r0]
	ldr	r1, .L89
	str	r0, [r1]
	str	r2, [r1, #0x4]
	ldr	r0, .L89+0x4
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r2, #0xc0
	lsl	r2, r2, #0x13
	mov	r3, #0xc0
	lsl	r3, r3, #0x9
	mov	r4, sp
	mov	r6, #0x0
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L89+0x8
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L86:
	strh	r6, [r4]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r5
	sub	r3, r3, r5
	cmp	r3, r5
	bhi	.L86	@cond_branch
	strh	r6, [r4]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0x0
	mov	r1, #0x80
	bl	ResetOamRange
	bl	LoadOam
	bl	remove_some_task
	bl	dp12_8087EA4
	bl	ResetSpriteData
	bl	ResetTasks
	bl	ResetPaletteFade
	ldr	r4, .L89+0xc
	add	r0, r4, #0
	bl	SetUpWindowConfig
	add	r0, r4, #0
	bl	InitMenuWindow
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0x88
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L89+0x10
	bl	SetVBlankCallback
	ldr	r0, .L89+0x14
	bl	SetMainCallback2
	ldr	r0, .L89+0x18
	mov	r1, #0x50
	bl	CreateTask
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	0x40000d4
	.word	0x81000200
	.word	0x81000800
	.word	gWindowConfig_81E6CE4
	.word	VBlankCB_ResetRtcScreen
	.word	CB2_ResetRtcScreen
	.word	Task_ResetRtcScreen
.Lfe13:
	.size	 CB2_InitResetRtcScreen,.Lfe13-CB2_InitResetRtcScreen
	.align	2, 0
	.globl	CB2_ResetRtcScreen
	.type	 CB2_ResetRtcScreen,function
	.thumb_func
CB2_ResetRtcScreen:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CB2_ResetRtcScreen,.Lfe14-CB2_ResetRtcScreen
	.align	2, 0
	.globl	VBlankCB_ResetRtcScreen
	.type	 VBlankCB_ResetRtcScreen,function
	.thumb_func
VBlankCB_ResetRtcScreen:
	push	{lr}
	bl	ProcessSpriteCopyRequests
	bl	LoadOam
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 VBlankCB_ResetRtcScreen,.Lfe15-VBlankCB_ResetRtcScreen
	.align	2, 0
	.globl	ResetRtcScreen_ShowMessage
	.type	 ResetRtcScreen_ShowMessage,function
	.thumb_func
ResetRtcScreen_ShowMessage:
	push	{r4, lr}
	add	r4, r0, #0
	bl	MenuDisplayMessageBox
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, #0xf
	bl	MenuPrint
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 ResetRtcScreen_ShowMessage,.Lfe16-ResetRtcScreen_ShowMessage
	.align	2, 0
	.globl	Task_ShowResetRtcPrompt
	.type	 Task_ShowResetRtcPrompt,function
	.thumb_func
Task_ShowResetRtcPrompt:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L103
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L96	@cond_branch
	cmp	r0, #0x1
	beq	.L97	@cond_branch
	b	.L95
.L104:
	.align	2, 0
.L103:
	.word	gTasks+0x8
.L96:
	bl	MenuZeroFillScreen
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x14
	mov	r3, #0xa
	bl	MenuDrawTextWindow
	ldr	r0, .L105
	mov	r1, #0x1
	mov	r2, #0x1
	bl	MenuPrint
	ldr	r0, .L105+0x4
	ldrh	r2, [r0]
	ldrb	r3, [r0, #0x2]
	ldrb	r1, [r0, #0x3]
	str	r1, [sp]
	ldrb	r0, [r0, #0x4]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x3
	bl	ResetRtcScreen_PrintTime
	ldr	r0, .L105+0x8
	mov	r1, #0x1
	mov	r2, #0x5
	bl	MenuPrint
	ldr	r1, .L105+0xc
	add	r0, r1, #0
	add	r0, r0, #0xa0
	ldrh	r2, [r0]
	add	r0, r0, #0x2
	ldrb	r3, [r0]
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	str	r0, [sp]
	add	r0, r1, #0
	add	r0, r0, #0xa4
	ldrb	r0, [r0]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x7
	bl	ResetRtcScreen_PrintTime
	ldr	r0, .L105+0x10
	bl	ResetRtcScreen_ShowMessage
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
.L97:
	ldr	r0, .L105+0x14
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L98	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	bl	DoSoftReset
	b	.L95
.L106:
	.align	2, 0
.L105:
	.word	gSystemText_PresentTime
	.word	gLocalTime
	.word	gSystemText_PreviousTime
	.word	gSaveBlock2
	.word	gSystemText_ResetRTCPrompt
	.word	gMain
.L98:
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L95	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	DestroyTask
.L95:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 Task_ShowResetRtcPrompt,.Lfe17-Task_ShowResetRtcPrompt
	.align	2, 0
	.globl	Task_ResetRtcScreen
	.type	 Task_ResetRtcScreen,function
	.thumb_func
Task_ResetRtcScreen:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L132
	add	r5, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x6
	bls	.LCB1317
	b	.L108	@long jump
.LCB1317:
	lsl	r0, r0, #0x2
	ldr	r1, .L132+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L133:
	.align	2, 0
.L132:
	.word	gTasks+0x8
	.word	.L129
	.align	2, 0
	.align	2, 0
.L129:
	.word	.L109
	.word	.L110
	.word	.L115
	.word	.L117
	.word	.L121
	.word	.L124
	.word	.L127
.L109:
	mov	r0, #0x1
	neg	r0, r0
	ldr	r1, .L134
	str	r1, [sp]
	mov	r1, #0x1
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x1
	strh	r0, [r5]
	b	.L108
.L135:
	.align	2, 0
.L134:
	.word	0xffff
.L110:
	ldr	r0, .L136
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1364
	b	.L108	@long jump
.LCB1364:
	ldr	r0, .L136+0x4
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L113	@cond_branch
	cmp	r0, #0x2
	bne	.L112	@cond_branch
.L113:
	ldr	r0, .L136+0x8
	bl	ResetRtcScreen_ShowMessage
	mov	r0, #0x5
	strh	r0, [r5]
	b	.L108
.L137:
	.align	2, 0
.L136:
	.word	gPaletteFade
	.word	gSaveFileStatus
	.word	gSystemText_NoSaveFileNoTime
.L112:
	bl	RtcCalcLocalTime
	ldr	r0, .L138
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x2]
	b	.L131
.L139:
	.align	2, 0
.L138:
	.word	Task_ShowResetRtcPrompt
.L115:
	ldr	r2, .L140
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x1
	bne	.LCB1421
	b	.L108	@long jump
.LCB1421:
	bl	MenuZeroFillScreen
	ldr	r0, .L140+0x4
	bl	ResetRtcScreen_ShowMessage
	ldr	r2, .L140+0x8
	ldr	r0, .L140+0xc
	add	r0, r0, #0xa0
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldr	r0, .L140+0x10
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x2]
	mov	r0, #0x3
	strh	r0, [r5]
	b	.L108
.L141:
	.align	2, 0
.L140:
	.word	gTasks
	.word	gSystemText_PleaseResetTime
	.word	gLocalTime
	.word	gSaveBlock2
	.word	Task_ResetRtc_0
.L117:
	ldr	r2, .L142
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L108	@cond_branch
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L119	@cond_branch
	ldrb	r0, [r5, #0x2]
	bl	DestroyTask
.L131:
	mov	r0, #0x2
	strh	r0, [r5]
	b	.L108
.L143:
	.align	2, 0
.L142:
	.word	gTasks
.L119:
	ldrb	r0, [r5, #0x2]
	bl	DestroyTask
	bl	RtcReset
	ldr	r4, .L144
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x2
	ldrsb	r1, [r4, r1]
	mov	r2, #0x3
	ldrsb	r2, [r4, r2]
	mov	r3, #0x4
	ldrsb	r3, [r4, r3]
	bl	RtcCalcLocalTimeOffset
	ldr	r2, .L144+0x4
	add	r2, r2, #0xa0
	ldr	r0, [r4]		@ created by thumb_load_double_from_address
	ldr	r1, [r4, #0x4]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldr	r0, .L144+0x8
	ldrh	r1, [r4]
	bl	VarSet
	bl	DisableResetRTC
	ldr	r0, .L144+0xc
	bl	ResetRtcScreen_ShowMessage
	mov	r0, #0x4
	strh	r0, [r5]
	b	.L108
.L145:
	.align	2, 0
.L144:
	.word	gLocalTime
	.word	gSaveBlock2
	.word	0x4040
	.word	gSystemText_ClockResetDataSave
.L121:
	mov	r0, #0x0
	bl	TrySavingData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L122	@cond_branch
	ldr	r0, .L146
	bl	ResetRtcScreen_ShowMessage
	mov	r0, #0x49
	bl	PlaySE
	b	.L123
.L147:
	.align	2, 0
.L146:
	.word	gSystemText_SaveCompleted
.L122:
	ldr	r0, .L148
	bl	ResetRtcScreen_ShowMessage
	mov	r0, #0x16
	bl	PlaySE
.L123:
	mov	r0, #0x5
	strh	r0, [r5]
.L124:
	ldr	r0, .L148+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L108	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	ldr	r1, .L148+0x8
	str	r1, [sp]
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, #0x6
	strh	r0, [r5]
.L127:
	ldr	r0, .L148+0xc
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L108	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
	bl	DoSoftReset
.L108:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L149:
	.align	2, 0
.L148:
	.word	gSystemText_SaveFailed
	.word	gMain
	.word	0xffff
	.word	gPaletteFade
.Lfe18:
	.size	 Task_ResetRtcScreen,.Lfe18-Task_ResetRtcScreen
.text
	.align	2, 0
