@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gSpriteImage_83CE094
	.section .rodata
	.align	2, 0
	.type	 gSpriteImage_83CE094,object
gSpriteImage_83CE094:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x33333300
	.word	0x88888830
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x333333
	.word	0x3888888
	.word	0x55555830
	.word	0x5d5d5830
	.word	0xd5d55830
	.word	0x5d5d5830
	.word	0xd5d55830
	.word	0x5d5d5830
	.word	0x55555830
	.word	0x88888830
	.word	0x3855555
	.word	0x3855d5d
	.word	0x385d5d5
	.word	0x3855d5d
	.word	0x385d5d5
	.word	0x3855d5d
	.word	0x3855555
	.word	0x388a888
	.word	0x33333300
	.word	0x33d00000
	.word	0x33333300
	.word	0x8fffff30
	.word	0x8888a830
	.word	0x55555530
	.word	0x33333300
	.word	0x0
	.word	0x333333
	.word	0xd33
	.word	0x333333
	.word	0x3888888
	.word	0x38ddd38
	.word	0x3555555
	.word	0x333333
	.word	0x0
	.size	 gSpriteImage_83CE094,192
	.globl	gSpriteImage_83CE154
	.align	2, 0
	.type	 gSpriteImage_83CE154,object
gSpriteImage_83CE154:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x33333300
	.word	0x88888830
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x333333
	.word	0x3888888
	.word	0xe8e8e830
	.word	0xffff8830
	.word	0xffffe830
	.word	0x8e8e8830
	.word	0xffefe830
	.word	0xff8f8830
	.word	0xe8e8e830
	.word	0x88888830
	.word	0x388e8e8
	.word	0x38effff
	.word	0x388ffff
	.word	0x38e8e8e
	.word	0x388ffff
	.word	0x38e8efe
	.word	0x388e8e8
	.word	0x388a888
	.word	0x33333300
	.word	0x33d00000
	.word	0x33333300
	.word	0x8fffff30
	.word	0x8888a830
	.word	0x55555530
	.word	0x33333300
	.word	0x0
	.word	0x333333
	.word	0xd33
	.word	0x333333
	.word	0x3888888
	.word	0x38ddd38
	.word	0x3555555
	.word	0x333333
	.word	0x0
	.size	 gSpriteImage_83CE154,192
	.section .rodata
@ XXX: what is this?
    .align 2
    .4byte 0x2000000

	.code	16
.text
	.align	2, 0
	.globl	DoNamingScreen
	.type	 DoNamingScreen,function
	.thumb_func
DoNamingScreen:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	ldr	r4, [sp, #0x14]
	ldr	r5, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	str	r4, [sp]
	str	r5, [sp, #0x4]
	bl	StoreNamingScreenParameters
	ldr	r0, .L3
	bl	SetMainCallback2
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	C2_NamingScreen
.Lfe1:
	.size	 DoNamingScreen,.Lfe1-DoNamingScreen
	.align	2, 0
	.type	 C2_NamingScreen,function
	.thumb_func
C2_NamingScreen:
	push	{lr}
	ldr	r0, .L18
	ldr	r1, .L18+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bhi	.L6	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L18+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L19:
	.align	2, 0
.L18:
	.word	gMain
	.word	0x43c
	.word	.L15
	.align	2, 0
	.align	2, 0
.L15:
	.word	.L7
	.word	.L8
	.word	.L9
	.word	.L10
	.word	.L11
	.word	.L12
	.word	.L13
	.word	.L14
.L7:
	bl	NamingScreen_TurnOffScreen
	bl	NamingScreen_Init
	b	.L17
.L8:
	bl	NamingScreen_ClearVram
	b	.L17
.L9:
	bl	NamingScreen_ClearOam
	b	.L17
.L10:
	bl	NamingScreen_SetUpVideoRegs
	b	.L17
.L11:
	bl	NamingScreen_SetUpWindow
	b	.L17
.L12:
	bl	NamingScreen_ResetObjects
	b	.L17
.L13:
	bl	sub_80B5DFC
.L17:
	ldr	r1, .L20
	ldr	r0, .L20+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L6
.L21:
	.align	2, 0
.L20:
	.word	gMain
	.word	0x43c
.L14:
	bl	sub_80B5E20
	bl	sub_80B5E3C
	bl	NamingScreen_InitDisplayMode
	ldr	r0, .L22
	bl	SetMainCallback2
.L6:
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	sub_80B5AA0
.Lfe2:
	.size	 C2_NamingScreen,.Lfe2-C2_NamingScreen
	.align	2, 0
	.type	 sub_80B5AA0,function
	.thumb_func
sub_80B5AA0:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_80B5AA0,.Lfe3-sub_80B5AA0
	.align	2, 0
	.type	 VBlankCB_NamingScreen,function
	.thumb_func
VBlankCB_NamingScreen:
	push	{r4, lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	ldr	r1, .L26
	ldr	r4, .L26+0x4
	ldrh	r0, [r4, #0x4]
	strh	r0, [r1]
	add	r1, r1, #0x4
	ldrh	r0, [r4, #0x6]
	strh	r0, [r1]
	ldr	r2, .L26+0x8
	ldrh	r1, [r2]
	ldr	r3, .L26+0xc
	add	r0, r3, #0
	and	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r2]
	ldrh	r1, [r4, #0x8]
	orr	r0, r0, r1
	strh	r0, [r2]
	add	r2, r2, #0x2
	ldrh	r0, [r2]
	and	r3, r3, r0
	strh	r3, [r2]
	ldrh	r0, [r2]
	ldrh	r1, [r4, #0xa]
	orr	r0, r0, r1
	strh	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	0x4000016
	.word	gSharedMem
	.word	0x400000a
	.word	0xfffc
.Lfe4:
	.size	 VBlankCB_NamingScreen,.Lfe4-VBlankCB_NamingScreen
	.align	2, 0
	.type	 StoreNamingScreenParameters,function
	.thumb_func
StoreNamingScreenParameters:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r8, r0
	mov	r9, r1
	add	r5, r2, #0
	add	r6, r3, #0
	ldr	r7, [sp, #0x1c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	ldr	r0, .L29
	mov	r1, #0xff
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L29+0x4
	add	r4, r4, r0
	mov	r0, r8
	strh	r0, [r4, #0x8]
	strh	r5, [r4, #0xa]
	strh	r6, [r4, #0xc]
	lsr	r0, r7, #0x10
	strh	r0, [r4, #0xe]
	strh	r7, [r4, #0x10]
	add	r0, r4, #0
	add	r0, r0, #0x12
	mov	r1, r9
	bl	StoreWordInTwoHalfwords
	add	r4, r4, #0x16
	add	r0, r4, #0
	ldr	r1, [sp, #0x20]
	bl	StoreWordInTwoHalfwords
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	Task_DoNothing
	.word	gTasks
.Lfe5:
	.size	 StoreNamingScreenParameters,.Lfe5-StoreNamingScreenParameters
	.align	2, 0
	.type	 GetNamingScreenParameters,function
	.thumb_func
GetNamingScreenParameters:
	push	{r4, r5, r6, lr}
	ldr	r0, .L32
	bl	FindTaskIdByFunc
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L32+0x4
	add	r4, r4, r0
	ldr	r6, .L32+0x8
	ldrh	r0, [r4, #0x8]
	strb	r0, [r6, #0x1]
	ldrh	r0, [r4, #0xa]
	add	r1, r6, #0
	add	r1, r1, #0x4e
	strh	r0, [r1]
	ldrh	r1, [r4, #0xc]
	add	r0, r6, #0
	add	r0, r0, #0x50
	strh	r1, [r0]
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x10
	ldrh	r1, [r4, #0x10]
	orr	r0, r0, r1
	str	r0, [r6, #0x54]
	add	r0, r4, #0
	add	r0, r0, #0x12
	add	r1, r6, #0
	add	r1, r1, #0x48
	bl	LoadWordFromTwoHalfwords
	add	r4, r4, #0x16
	add	r1, r6, #0
	add	r1, r1, #0x58
	add	r0, r4, #0
	bl	LoadWordFromTwoHalfwords
	add	r0, r5, #0
	bl	DestroyTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	Task_DoNothing
	.word	gTasks
	.word	gSharedMem
.Lfe6:
	.size	 GetNamingScreenParameters,.Lfe6-GetNamingScreenParameters
	.align	2, 0
	.type	 Task_DoNothing,function
	.thumb_func
Task_DoNothing:
	bx	lr
.Lfe7:
	.size	 Task_DoNothing,.Lfe7-Task_DoNothing
	.align	2, 0
	.type	 NamingScreen_TurnOffScreen,function
	.thumb_func
NamingScreen_TurnOffScreen:
	push	{lr}
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r0, #0x0
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 NamingScreen_TurnOffScreen,.Lfe8-NamingScreen_TurnOffScreen
	.align	2, 0
	.type	 NamingScreen_InitDisplayMode,function
	.thumb_func
NamingScreen_InitDisplayMode:
	push	{r4, lr}
	ldr	r0, .L37
	bl	SetVBlankCallback
	ldr	r3, .L37+0x4
	ldrh	r2, [r3]
	mov	r0, #0x0
	strh	r0, [r3]
	ldr	r4, .L37+0x8
	ldrh	r0, [r4]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r4]
	strh	r2, [r3]
	ldr	r2, .L37+0xc
	ldrh	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	mov	r2, #0xfa
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	strh	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	VBlankCB_NamingScreen
	.word	0x4000208
	.word	0x4000200
	.word	0x4000004
.Lfe9:
	.size	 NamingScreen_InitDisplayMode,.Lfe9-NamingScreen_InitDisplayMode
	.align	2, 0
	.type	 NamingScreen_ClearVram,function
	.thumb_func
NamingScreen_ClearVram:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xfffffffc
	mov	r2, #0xc0
	lsl	r2, r2, #0x13
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	mov	r4, sp
	mov	r6, #0x0
	ldr	r1, .L45
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L45+0x4
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L42:
	strh	r6, [r4]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r5
	sub	r3, r3, r5
	cmp	r3, r5
	bhi	.L42	@cond_branch
	strh	r6, [r4]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	0x40000d4
	.word	0x81000800
.Lfe10:
	.size	 NamingScreen_ClearVram,.Lfe10-NamingScreen_ClearVram
	.align	2, 0
	.type	 NamingScreen_ClearOam,function
	.thumb_func
NamingScreen_ClearOam:
	add	sp, sp, #0xfffffffc
	mov	r2, #0xe0
	lsl	r2, r2, #0x13
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L48
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L48+0x4
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	add	sp, sp, #0x4
	bx	lr
.L49:
	.align	2, 0
.L48:
	.word	0x40000d4
	.word	0x81000200
.Lfe11:
	.size	 NamingScreen_ClearOam,.Lfe11-NamingScreen_ClearOam
	.align	2, 0
	.type	 NamingScreen_SetUpVideoRegs,function
	.thumb_func
NamingScreen_SetUpVideoRegs:
	push	{r4, r5, lr}
	ldr	r5, .L51
	mov	r1, #0x0
	strh	r1, [r5]
	ldr	r2, .L51+0x4
	strh	r1, [r2]
	ldr	r3, .L51+0x8
	strh	r1, [r3]
	ldr	r4, .L51+0xc
	strh	r1, [r4]
	ldr	r0, .L51+0x10
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	add	r0, r0, #0x2
	strh	r1, [r0]
	mov	r1, #0xf8
	lsl	r1, r1, #0x5
	add	r0, r1, #0
	strh	r0, [r5]
	ldr	r1, .L51+0x14
	add	r0, r1, #0
	strh	r0, [r2]
	ldr	r2, .L51+0x18
	add	r0, r2, #0
	strh	r0, [r3]
	ldr	r1, .L51+0x1c
	add	r0, r1, #0
	strh	r0, [r4]
	ldr	r1, .L51+0x20
	mov	r2, #0xc8
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	strh	r0, [r1]
	add	r1, r1, #0x2
	ldr	r2, .L51+0x24
	add	r0, r2, #0
	strh	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	0x4000008
	.word	0x400000a
	.word	0x400000c
	.word	0x400000e
	.word	0x4000010
	.word	0x1c01
	.word	0x1d0a
	.word	0x1e03
	.word	0x4000050
	.word	0x80c
.Lfe12:
	.size	 NamingScreen_SetUpVideoRegs,.Lfe12-NamingScreen_SetUpVideoRegs
	.align	2, 0
	.type	 NamingScreen_Init,function
	.thumb_func
NamingScreen_Init:
	push	{r4, r5, r6, lr}
	bl	GetNamingScreenParameters
	ldr	r4, .L55
	add	r1, r4, #0
	add	r1, r1, #0x5c
	mov	r0, #0x0
	strb	r0, [r1]
	strb	r0, [r4]
	mov	r2, #0x0
	strh	r0, [r4, #0x4]
	strh	r0, [r4, #0x6]
	mov	r1, #0x1
	mov	r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r0, #0x2
	strh	r0, [r4, #0xa]
	strb	r2, [r4, #0xc]
	strb	r1, [r4, #0xd]
	ldr	r1, .L55+0x4
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r4, #0x44]
	ldrb	r1, [r0, #0x4]
	strb	r1, [r4, #0xe]
	ldrb	r1, [r0, #0x1]
	lsr	r1, r1, #0x1
	mov	r0, #0xe
	sub	r0, r0, r1
	strh	r0, [r4, #0x2]
	ldr	r6, .L55+0x8
	ldrh	r1, [r6]
	add	r0, r4, #0
	add	r0, r0, #0x4c
	strh	r1, [r0]
	add	r5, r4, #0
	add	r5, r5, #0x11
	add	r0, r5, #0
	mov	r1, #0xff
	mov	r2, #0x20
	bl	memset
	ldr	r0, [r4, #0x44]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L54	@cond_branch
	ldr	r1, [r4, #0x48]
	add	r0, r5, #0
	bl	StringCopy
.L54:
	add	r0, r4, #0
	add	r0, r0, #0x5d
	ldr	r1, [r4, #0x48]
	bl	StringCopy
	mov	r0, #0x10
	strh	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gSharedMem
	.word	sNamingScreenTemplates
	.word	gKeyRepeatStartDelay
.Lfe13:
	.size	 NamingScreen_Init,.Lfe13-NamingScreen_Init
	.align	2, 0
	.type	 NamingScreen_SetUpWindow,function
	.thumb_func
NamingScreen_SetUpWindow:
	push	{r4, lr}
	ldr	r4, .L58
	add	r0, r4, #0
	bl	SetUpWindowConfig
	add	r0, r4, #0
	bl	InitMenuWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gWindowConfig_81E6E88
.Lfe14:
	.size	 NamingScreen_SetUpWindow,.Lfe14-NamingScreen_SetUpWindow
	.align	2, 0
	.type	 NamingScreen_ResetObjects,function
	.thumb_func
NamingScreen_ResetObjects:
	push	{lr}
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 NamingScreen_ResetObjects,.Lfe15-NamingScreen_ResetObjects
	.align	2, 0
	.type	 sub_80B5DFC,function
	.thumb_func
sub_80B5DFC:
	push	{lr}
	bl	sub_80B7558
	bl	sub_80B753C
	bl	sub_80B7680
	bl	sub_80B75C4
	bl	sub_80B7794
	bl	sub_80B78A8
	bl	sub_80B7960
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_80B5DFC,.Lfe16-sub_80B5DFC
	.align	2, 0
	.type	 sub_80B5E20,function
	.thumb_func
sub_80B5E20:
	push	{lr}
	bl	CursorInit
	bl	sub_80B6A80
	bl	sub_80B6CA8
	bl	sub_80B6D04
	bl	sub_80B6E44
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 sub_80B5E20,.Lfe17-sub_80B5E20
	.align	2, 0
	.type	 sub_80B5E3C,function
	.thumb_func
sub_80B5E3C:
	push	{lr}
	bl	InputInit
	bl	sub_80B6438
	bl	sub_80B5E50
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_80B5E3C,.Lfe18-sub_80B5E3C
	.section .rodata
	.align	2, 0
	.type	 sMainStateFuncs,object
sMainStateFuncs:
	.word	MainState_BeginFadeIn
	.word	MainState_WaitFadeIn
	.word	MainState_HandleInput
	.word	MainState_MoveToOKButton
	.word	MainState_StartPageSwap
	.word	MainState_WaitPageSwap
	.word	MainState_6
	.word	MainState_UpdateSentToPCMessage
	.word	MainState_BeginFadeInOut
	.word	MainState_WaitFadeOutAndExit
	.size	 sMainStateFuncs,40
.text
	.align	2, 0
	.type	 sub_80B5E50,function
	.thumb_func
sub_80B5E50:
	push	{r4, lr}
	ldr	r4, .L65
	add	r0, r4, #0
	mov	r1, #0x2
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	_call_via_r4
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	Task_NamingScreenMain
.Lfe19:
	.size	 sub_80B5E50,.Lfe19-sub_80B5E50
	.align	2, 0
	.type	 Task_NamingScreenMain,function
	.thumb_func
Task_NamingScreenMain:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r7, .L72
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r4, r1, #0x3
	ldr	r6, .L72+0x4
	ldr	r5, .L72+0x8
.L68:
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, [r0]
	add	r0, r4, r5
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L68	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	sMainStateFuncs
	.word	gSharedMem
	.word	gTasks
.Lfe20:
	.size	 Task_NamingScreenMain,.Lfe20-Task_NamingScreenMain
	.align	2, 0
	.type	 MainState_BeginFadeIn,function
	.thumb_func
MainState_BeginFadeIn:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L75
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r1}
	bx	r1
.L76:
	.align	2, 0
.L75:
	.word	gSharedMem
.Lfe21:
	.size	 MainState_BeginFadeIn,.Lfe21-MainState_BeginFadeIn
	.align	2, 0
	.type	 MainState_WaitFadeIn,function
	.thumb_func
MainState_WaitFadeIn:
	push	{lr}
	ldr	r0, .L79
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L78	@cond_branch
	mov	r0, #0x1
	bl	SetInputState
	mov	r0, #0x1
	bl	sub_80B68D8
	ldr	r1, .L79+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L78:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L80:
	.align	2, 0
.L79:
	.word	gPaletteFade
	.word	gSharedMem
.Lfe22:
	.size	 MainState_WaitFadeIn,.Lfe22-MainState_WaitFadeIn
	.align	2, 0
	.type	 MainState_HandleInput,function
	.thumb_func
MainState_HandleInput:
	push	{lr}
	bl	HandleKeyboardEvent
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 MainState_HandleInput,.Lfe23-MainState_HandleInput
	.align	2, 0
	.type	 MainState_MoveToOKButton,function
	.thumb_func
MainState_MoveToOKButton:
	push	{lr}
	bl	IsCursorAnimFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L83	@cond_branch
	mov	r0, #0x1
	bl	SetInputState
	bl	MoveCursorToOKButton
	ldr	r1, .L84
	mov	r0, #0x2
	strb	r0, [r1]
.L83:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L85:
	.align	2, 0
.L84:
	.word	gSharedMem
.Lfe24:
	.size	 MainState_MoveToOKButton,.Lfe24-MainState_MoveToOKButton
	.align	2, 0
	.type	 MainState_StartPageSwap,function
	.thumb_func
MainState_StartPageSwap:
	push	{lr}
	mov	r0, #0x0
	bl	SetInputState
	bl	sub_80B6B14
	bl	StartPageSwapAnim
	mov	r0, #0x1
	bl	sub_80B6888
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x1
	bl	sub_80B6460
	mov	r0, #0x6
	bl	PlaySE
	ldr	r1, .L87
	mov	r0, #0x5
	strb	r0, [r1]
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L88:
	.align	2, 0
.L87:
	.word	gSharedMem
.Lfe25:
	.size	 MainState_StartPageSwap,.Lfe25-MainState_StartPageSwap
	.align	2, 0
	.type	 MainState_WaitPageSwap,function
	.thumb_func
MainState_WaitPageSwap:
	push	{r4, lr}
	add	sp, sp, #0xfffffffc
	bl	IsPageSwapAnimNotInProgress
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L90	@cond_branch
	ldr	r4, .L91
	mov	r0, #0x2
	strb	r0, [r4]
	ldrb	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xe]
	ldrb	r0, [r4, #0xe]
	mov	r1, #0x3
	bl	__umodsi3
	strb	r0, [r4, #0xe]
	bl	sub_80B7614
	bl	sub_80B77F8
	mov	r0, #0x1
	bl	SetInputState
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetCursorPos
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	SetCursorPos
	mov	r0, #0x0
	bl	sub_80B6888
.L90:
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.L92:
	.align	2, 0
.L91:
	.word	gSharedMem
.Lfe26:
	.size	 MainState_WaitPageSwap,.Lfe26-MainState_WaitPageSwap
	.align	2, 0
	.type	 MainState_6,function
	.thumb_func
MainState_6:
	push	{r4, lr}
	bl	sub_80B74B0
	mov	r0, #0x0
	bl	SetInputState
	mov	r0, #0x0
	bl	sub_80B68D8
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x1
	bl	sub_80B6460
	ldr	r1, .L97
	ldr	r4, .L97+0x4
	add	r0, r4, #0
	add	r0, r0, #0x4c
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x2
	bne	.L94	@cond_branch
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bls	.L94	@cond_branch
	bl	DisplaySentToPCMessage
	mov	r0, #0x7
	strb	r0, [r4]
	mov	r0, #0x0
	b	.L96
.L98:
	.align	2, 0
.L97:
	.word	gKeyRepeatStartDelay
	.word	gSharedMem
.L94:
	ldr	r1, .L99
	mov	r0, #0x8
	strb	r0, [r1]
	mov	r0, #0x1
.L96:
	pop	{r4}
	pop	{r1}
	bx	r1
.L100:
	.align	2, 0
.L99:
	.word	gSharedMem
.Lfe27:
	.size	 MainState_6,.Lfe27-MainState_6
	.align	2, 0
	.type	 MainState_UpdateSentToPCMessage,function
	.thumb_func
MainState_UpdateSentToPCMessage:
	push	{lr}
	bl	MenuUpdateWindowText
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L102	@cond_branch
	ldr	r1, .L103
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L102:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L104:
	.align	2, 0
.L103:
	.word	gSharedMem
.Lfe28:
	.size	 MainState_UpdateSentToPCMessage,.Lfe28-MainState_UpdateSentToPCMessage
	.align	2, 0
	.type	 MainState_BeginFadeInOut,function
	.thumb_func
MainState_BeginFadeInOut:
	push	{lr}
	add	sp, sp, #0xfffffffc
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L106
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r1}
	bx	r1
.L107:
	.align	2, 0
.L106:
	.word	gSharedMem
.Lfe29:
	.size	 MainState_BeginFadeInOut,.Lfe29-MainState_BeginFadeInOut
	.align	2, 0
	.type	 MainState_WaitFadeOutAndExit,function
	.thumb_func
MainState_WaitFadeOutAndExit:
	push	{lr}
	ldr	r0, .L110
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L109	@cond_branch
	ldr	r0, .L110+0x4
	ldr	r0, [r0, #0x58]
	bl	SetMainCallback2
.L109:
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L111:
	.align	2, 0
.L110:
	.word	gPaletteFade
	.word	gSharedMem
.Lfe30:
	.size	 MainState_WaitFadeOutAndExit,.Lfe30-MainState_WaitFadeOutAndExit
	.section .rodata
	.align	2, 0
	.type	 sKeyboardKeyHandlers,object
sKeyboardKeyHandlers:
	.word	KeyboardKeyHandler_Character
	.word	KeyboardKeyHandler_Page
	.word	KeyboardKeyHandler_Backspace
	.word	KeyboardKeyHandler_OK
	.size	 sKeyboardKeyHandlers,16
.text
	.align	2, 0
	.type	 HandleKeyboardEvent,function
	.thumb_func
HandleKeyboardEvent:
	push	{r4, r5, lr}
	bl	GetInputEvent
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	GetKeyRoleAtCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, #0x8
	bne	.L113	@cond_branch
	bl	sub_80B61C8
	b	.L119
.L113:
	cmp	r4, #0x6
	bne	.L115	@cond_branch
	bl	DeleteTextCharacter
	b	.L120
.L115:
	cmp	r5, #0x7
	beq	.L114	@cond_branch
	ldr	r1, .L121
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r1
.L119:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L118
.L122:
	.align	2, 0
.L121:
	.word	sKeyboardKeyHandlers
.L114:
	bl	sub_80B7090
.L120:
	mov	r0, #0x0
.L118:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 HandleKeyboardEvent,.Lfe31-HandleKeyboardEvent
	.align	2, 0
	.type	 KeyboardKeyHandler_Character,function
	.thumb_func
KeyboardKeyHandler_Character:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	sub_80B6460
	cmp	r4, #0x5
	bne	.L124	@cond_branch
	bl	sub_80B7004
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_80B6914
	cmp	r4, #0
	beq	.L124	@cond_branch
	mov	r0, #0x0
	bl	SetInputState
	ldr	r1, .L126
	mov	r0, #0x3
	strb	r0, [r1]
.L124:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L127:
	.align	2, 0
.L126:
	.word	gSharedMem
.Lfe32:
	.size	 KeyboardKeyHandler_Character,.Lfe32-KeyboardKeyHandler_Character
	.align	2, 0
	.type	 KeyboardKeyHandler_Page,function
	.thumb_func
KeyboardKeyHandler_Page:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_80B6460
	cmp	r4, #0x5
	beq	.L129	@cond_branch
	mov	r0, #0x0
	b	.L131
.L129:
	bl	sub_80B61C8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L131:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 KeyboardKeyHandler_Page,.Lfe33-KeyboardKeyHandler_Page
	.align	2, 0
	.type	 KeyboardKeyHandler_Backspace,function
	.thumb_func
KeyboardKeyHandler_Backspace:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_80B6460
	cmp	r4, #0x5
	bne	.L133	@cond_branch
	bl	DeleteTextCharacter
.L133:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe34:
	.size	 KeyboardKeyHandler_Backspace,.Lfe34-KeyboardKeyHandler_Backspace
	.align	2, 0
	.type	 KeyboardKeyHandler_OK,function
	.thumb_func
KeyboardKeyHandler_OK:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_80B6460
	cmp	r4, #0x5
	beq	.L135	@cond_branch
	mov	r0, #0x0
	b	.L137
.L135:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L138
	mov	r0, #0x6
	strb	r0, [r1]
	mov	r0, #0x1
.L137:
	pop	{r4}
	pop	{r1}
	bx	r1
.L139:
	.align	2, 0
.L138:
	.word	gSharedMem
.Lfe35:
	.size	 KeyboardKeyHandler_OK,.Lfe35-KeyboardKeyHandler_OK
	.align	2, 0
	.type	 sub_80B61C8,function
	.thumb_func
sub_80B61C8:
	ldr	r1, .L141
	mov	r0, #0x4
	strb	r0, [r1]
	mov	r0, #0x1
	bx	lr
.L142:
	.align	2, 0
.L141:
	.word	gSharedMem
.Lfe36:
	.size	 sub_80B61C8,.Lfe36-sub_80B61C8
	.section .rodata
	.align	2, 0
	.type	 sInputStateFuncs,object
sInputStateFuncs:
	.word	InputState_Disabled
	.word	InputState_Enabled
	.size	 sInputStateFuncs,8
.text
	.align	2, 0
	.type	 InputInit,function
	.thumb_func
InputInit:
	push	{lr}
	ldr	r0, .L144
	mov	r1, #0x1
	bl	CreateTask
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	Task_HandleInput
.Lfe37:
	.size	 InputInit,.Lfe37-InputInit
	.align	2, 0
	.type	 GetInputEvent,function
	.thumb_func
GetInputEvent:
	push	{lr}
	ldr	r0, .L147
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L147+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0xa]
	pop	{r1}
	bx	r1
.L148:
	.align	2, 0
.L147:
	.word	Task_HandleInput
	.word	gTasks
.Lfe38:
	.size	 GetInputEvent,.Lfe38-GetInputEvent
	.align	2, 0
	.type	 SetInputState,function
	.thumb_func
SetInputState:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L150
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L150+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	Task_HandleInput
	.word	gTasks
.Lfe39:
	.size	 SetInputState,.Lfe39-SetInputState
	.align	2, 0
	.type	 Task_HandleInput,function
	.thumb_func
Task_HandleInput:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L153
	ldr	r2, .L153+0x4
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x8
	ldrsh	r1, [r0, r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L154:
	.align	2, 0
.L153:
	.word	sInputStateFuncs
	.word	gTasks
.Lfe40:
	.size	 Task_HandleInput,.Lfe40-Task_HandleInput
	.align	2, 0
	.type	 InputState_Disabled,function
	.thumb_func
InputState_Disabled:
	mov	r1, #0x0
	strh	r1, [r0, #0xa]
	bx	lr
.Lfe41:
	.size	 InputState_Disabled,.Lfe41-InputState_Disabled
	.align	2, 0
	.type	 InputState_Enabled,function
	.thumb_func
InputState_Enabled:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	ldr	r0, .L161
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L157	@cond_branch
	mov	r0, #0x5
	strh	r0, [r2, #0xa]
	b	.L156
.L162:
	.align	2, 0
.L161:
	.word	gMain
.L157:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L158	@cond_branch
	mov	r0, #0x6
	strh	r0, [r2, #0xa]
	b	.L156
.L158:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L159	@cond_branch
	mov	r0, #0x8
	strh	r0, [r2, #0xa]
	b	.L156
.L159:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L160	@cond_branch
	mov	r0, #0x9
	strh	r0, [r2, #0xa]
	bl	MoveCursorToOKButton
	b	.L156
.L160:
	add	r0, r2, #0
	bl	HandleDpadMovement
.L156:
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 InputState_Enabled,.Lfe42-InputState_Enabled
	.section .rodata
	.align	1, 0
	.type	 sDpadDeltaX,object
sDpadDeltaX:
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0xffffffff
	.short	0x1
	.size	 sDpadDeltaX,10
	.align	1, 0
	.type	 sDpadDeltaY,object
sDpadDeltaY:
	.short	0x0
	.short	0xffffffff
	.short	0x1
	.short	0x0
	.short	0x0
	.size	 sDpadDeltaY,10
	.align	1, 0
	.type	 s4RowTo3RowTableY,object
s4RowTo3RowTableY:
	.short	0x0
	.short	0x1
	.short	0x1
	.short	0x2
	.size	 s4RowTo3RowTableY,8
	.align	1, 0
	.type	 gUnknown_083CE274,object
gUnknown_083CE274:
	.short	0x0
	.short	0x0
	.short	0x3
	.short	0x0
	.size	 gUnknown_083CE274,8
.text
	.align	2, 0
	.type	 HandleDpadMovement,function
	.thumb_func
HandleDpadMovement:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	add	r5, r0, #0
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetCursorPos
	ldr	r0, .L186
	ldrh	r2, [r0, #0x30]
	mov	r0, #0x40
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	neg	r0, r0
	lsr	r1, r0, #0x1f
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L165	@cond_branch
	mov	r1, #0x2
.L165:
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L166	@cond_branch
	mov	r1, #0x3
.L166:
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L167	@cond_branch
	mov	r1, #0x4
.L167:
	mov	r0, sp
	ldrh	r6, [r0]
	mov	r2, sp
	ldr	r0, .L186+0x4
	lsl	r1, r1, #0x1
	add	r0, r1, r0
	ldrh	r3, [r0]
	add	r0, r6, r3
	strh	r0, [r2]
	ldr	r0, .L186+0x8
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r4]
	mov	r0, sp
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bge	.L168	@cond_branch
	mov	r1, sp
	mov	r0, #0xa
	strh	r0, [r1]
.L168:
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0xa
	ble	.L169	@cond_branch
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
.L169:
	cmp	r3, #0
	beq	.L170	@cond_branch
	mov	r0, sp
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0xa
	bne	.L171	@cond_branch
	ldrh	r0, [r4]
	strh	r0, [r5, #0xc]
	ldr	r1, .L186+0xc
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	b	.L185
.L187:
	.align	2, 0
.L186:
	.word	gMain
	.word	sDpadDeltaX
	.word	sDpadDeltaY
	.word	s4RowTo3RowTableY
.L171:
	cmp	r6, #0xa
	bne	.L170	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L174	@cond_branch
	ldrh	r0, [r5, #0xc]
	b	.L185
.L174:
	ldr	r0, .L188
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
.L185:
	strh	r0, [r4]
.L170:
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0xa
	bne	.L176	@cond_branch
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bge	.L177	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4]
.L177:
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x2
	ble	.L178	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4]
.L178:
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L179	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0xc]
	b	.L182
.L189:
	.align	2, 0
.L188:
	.word	gUnknown_083CE274
.L179:
	cmp	r0, #0x2
	bne	.L182	@cond_branch
	strh	r0, [r5, #0xc]
	b	.L182
.L176:
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L183	@cond_branch
	mov	r0, #0x3
	strh	r0, [r4]
.L183:
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	ble	.L182	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4]
.L182:
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	SetCursorPos
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 HandleDpadMovement,.Lfe43-HandleDpadMovement
	.align	2, 0
	.type	 sub_80B6438,function
	.thumb_func
sub_80B6438:
	push	{lr}
	ldr	r0, .L191
	mov	r1, #0x3
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L191+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L192:
	.align	2, 0
.L191:
	.word	Task_80B64D4
	.word	gTasks
.Lfe44:
	.size	 sub_80B6438,.Lfe44-sub_80B6438
	.align	2, 0
	.type	 sub_80B6460,function
	.thumb_func
sub_80B6460:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r0, .L197
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L197+0x4
	add	r4, r1, r0
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r5, r0
	bne	.L194	@cond_branch
	cmp	r6, #0
	bne	.L194	@cond_branch
	strh	r7, [r4, #0xa]
	mov	r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L193
.L198:
	.align	2, 0
.L197:
	.word	Task_80B64D4
	.word	gTasks
.L194:
	cmp	r5, #0x3
	bne	.L195	@cond_branch
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L195	@cond_branch
	cmp	r6, #0
	beq	.L193	@cond_branch
.L195:
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	beq	.L196	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80B65AC
.L196:
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	sub_80B65D4
.L193:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 sub_80B6460,.Lfe45-sub_80B6460
	.align	2, 0
	.type	 Task_80B64D4,function
	.thumb_func
Task_80B64D4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L208
	add	r4, r1, r0
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	beq	.L199	@cond_branch
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L199	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80B654C
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r3, [r4, #0xe]
	add	r1, r3, #0
	add	r2, r3, #0
	bl	MultiplyInvertedPaletteRGBComponents
	ldrh	r1, [r4, #0x12]
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L202	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L199	@cond_branch
.L202:
	mov	r0, #0x2
	strh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x10]
	ldrh	r2, [r4, #0xe]
	add	r0, r1, r2
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	beq	.L207	@cond_branch
	cmp	r0, #0
	bne	.L199	@cond_branch
	ldrh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
.L207:
	neg	r0, r1
	strh	r0, [r4, #0x10]
.L199:
	pop	{r4}
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	gTasks
.Lfe46:
	.size	 Task_80B64D4,.Lfe46-Task_80B64D4
	.align	2, 0
	.type	 sub_80B654C,function
	.thumb_func
sub_80B654C:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffff0
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x87
	lsl	r1, r1, #0x1
	add	r5, r1, #0
	add	r0, r0, r5
	add	r6, sp, #0x8
	strh	r0, [r6]
	mov	r0, #0x6
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x86
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, sp
	add	r1, r1, #0xa
	strh	r0, [r1]
	mov	r0, #0x6
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	add	r0, r0, r5
	add	r1, sp, #0xc
	strh	r0, [r1]
	mov	r0, sp
	add	r1, r6, #0
	mov	r2, #0x6
	bl	memcpy
	lsl	r4, r4, #0x1
	mov	r1, sp
	add	r0, r1, r4
	ldrh	r0, [r0]
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 sub_80B654C,.Lfe47-sub_80B654C
	.align	2, 0
	.type	 sub_80B65AC,function
	.thumb_func
sub_80B65AC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80B654C
	lsl	r0, r0, #0x10
	ldr	r2, .L212
	lsr	r0, r0, #0xf
	add	r2, r0, r2
	ldr	r1, .L212+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
	pop	{r0}
	bx	r0
.L213:
	.align	2, 0
.L212:
	.word	gPlttBufferFaded
	.word	gPlttBufferUnfaded
.Lfe48:
	.size	 sub_80B65AC,.Lfe48-sub_80B65AC
	.align	2, 0
	.type	 sub_80B65D4,function
	.thumb_func
sub_80B65D4:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x0
	strh	r1, [r0, #0x8]
	strh	r2, [r0, #0xa]
	mov	r2, #0x1
	strh	r2, [r0, #0xc]
	mov	r1, #0xf
	strh	r1, [r0, #0xe]
	strh	r2, [r0, #0x10]
	strh	r3, [r0, #0x12]
	bx	lr
.Lfe49:
	.size	 sub_80B65D4,.Lfe49-sub_80B65D4
	.section .rodata
	.align	2, 0
	.type	 sPageSwapAnimStateFuncs,object
sPageSwapAnimStateFuncs:
	.word	PageSwapAnimState_Init
	.word	PageSwapAnimState_1
	.word	PageSwapAnimState_2
	.word	PageSwapAnimState_Done
	.size	 sPageSwapAnimStateFuncs,16
.text
	.align	2, 0
	.type	 StartPageSwapAnim,function
	.thumb_func
StartPageSwapAnim:
	push	{r4, lr}
	ldr	r4, .L216
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	_call_via_r4
	pop	{r4}
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	Task_HandlePageSwapAnim
.Lfe50:
	.size	 StartPageSwapAnim,.Lfe50-StartPageSwapAnim
	.align	2, 0
	.type	 IsPageSwapAnimNotInProgress,function
	.thumb_func
IsPageSwapAnimNotInProgress:
	push	{lr}
	ldr	r0, .L222
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L219	@cond_branch
	mov	r0, #0x0
	b	.L221
.L223:
	.align	2, 0
.L222:
	.word	Task_HandlePageSwapAnim
.L219:
	mov	r0, #0x1
.L221:
	pop	{r1}
	bx	r1
.Lfe51:
	.size	 IsPageSwapAnimNotInProgress,.Lfe51-IsPageSwapAnimNotInProgress
	.align	2, 0
	.type	 Task_HandlePageSwapAnim,function
	.thumb_func
Task_HandlePageSwapAnim:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L229
	ldr	r2, .L229+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L225:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L225	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L230:
	.align	2, 0
.L229:
	.word	sPageSwapAnimStateFuncs
	.word	gTasks
.Lfe52:
	.size	 Task_HandlePageSwapAnim,.Lfe52-Task_HandlePageSwapAnim
	.align	2, 0
	.type	 PageSwapAnimState_Init,function
	.thumb_func
PageSwapAnimState_Init:
	ldr	r2, .L232
	mov	r1, #0x0
	strh	r1, [r2, #0x4]
	strh	r1, [r2, #0x6]
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	mov	r0, #0x0
	bx	lr
.L233:
	.align	2, 0
.L232:
	.word	gSharedMem
.Lfe53:
	.size	 PageSwapAnimState_Init,.Lfe53-PageSwapAnimState_Init
	.section .rodata
	.align	2, 0
.LC96:
	.word	gSharedMem+0x6
	.word	gSharedMem+0x4
.text
	.align	2, 0
	.type	 PageSwapAnimState_1,function
	.thumb_func
PageSwapAnimState_1:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	ldr	r0, .L236
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x4
	strh	r0, [r4, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r1, #0x28
	bl	Sin
	ldr	r5, .L236+0x4
	ldrb	r1, [r5, #0xc]
	lsl	r1, r1, #0x2
	add	r1, r1, sp
	ldr	r1, [r1]
	strh	r0, [r1]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x80
	mov	r1, #0xff
	and	r0, r0, r1
	mov	r1, #0x28
	bl	Sin
	ldrb	r1, [r5, #0xd]
	lsl	r1, r1, #0x2
	add	r1, r1, sp
	ldr	r1, [r1]
	strh	r0, [r1]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3f
	ble	.L235	@cond_branch
	ldrb	r1, [r5, #0x8]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r5, #0x8]
	strh	r1, [r5, #0xa]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L235:
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L237:
	.align	2, 0
.L236:
	.word	.LC96
	.word	gSharedMem
.Lfe54:
	.size	 PageSwapAnimState_1,.Lfe54-PageSwapAnimState_1
	.align	2, 0
	.type	 PageSwapAnimState_2,function
	.thumb_func
PageSwapAnimState_2:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	ldr	r0, .L240
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x4
	strh	r0, [r4, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r1, #0x28
	bl	Sin
	ldr	r5, .L240+0x4
	ldrb	r1, [r5, #0xc]
	lsl	r1, r1, #0x2
	add	r1, r1, sp
	ldr	r1, [r1]
	strh	r0, [r1]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x80
	mov	r1, #0xff
	and	r0, r0, r1
	mov	r1, #0x28
	bl	Sin
	ldrb	r1, [r5, #0xd]
	lsl	r1, r1, #0x2
	add	r1, r1, sp
	ldr	r1, [r1]
	strh	r0, [r1]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	ble	.L239	@cond_branch
	ldrb	r1, [r5, #0xc]
	ldrb	r0, [r5, #0xd]
	strb	r0, [r5, #0xc]
	strb	r1, [r5, #0xd]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L239:
	mov	r0, #0x0
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L241:
	.align	2, 0
.L240:
	.word	.LC96
	.word	gSharedMem
.Lfe55:
	.size	 PageSwapAnimState_2,.Lfe55-PageSwapAnimState_2
	.align	2, 0
	.type	 PageSwapAnimState_Done,function
	.thumb_func
PageSwapAnimState_Done:
	push	{lr}
	ldr	r0, .L243
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L244:
	.align	2, 0
.L243:
	.word	Task_HandlePageSwapAnim
.Lfe56:
	.size	 PageSwapAnimState_Done,.Lfe56-PageSwapAnimState_Done
	.align	2, 0
	.type	 CursorInit,function
	.thumb_func
CursorInit:
	push	{r4, r5, lr}
	ldr	r0, .L246
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r4, .L246+0x4
	strb	r0, [r4, #0xf]
	ldr	r5, .L246+0x8
	ldrb	r0, [r4, #0xf]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r3, [r1, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4, #0xf]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	and	r2, r2, r1
	orr	r2, r2, r3
	strb	r2, [r0, #0x1]
	ldrb	r1, [r4, #0xf]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	strh	r1, [r0, #0x3a]
	ldrb	r1, [r4, #0xf]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x2
	strh	r1, [r0, #0x3a]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetCursorPos
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	gSpriteTemplate_83CE640
	.word	gSharedMem
	.word	gSprites
.Lfe57:
	.size	 CursorInit,.Lfe57-CursorInit
	.section .rodata
	.type	 sKeyboardSymbolPositions,object
sKeyboardSymbolPositions:
	.byte	0x0
	.byte	0x2
	.byte	0x4
	.byte	0x6
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.byte	0x10
	.byte	0x12
	.byte	0x14
	.byte	0x0
	.byte	0x2
	.byte	0x4
	.byte	0x6
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.byte	0x10
	.byte	0x12
	.byte	0x14
	.byte	0x0
	.byte	0x2
	.byte	0x4
	.byte	0x6
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.byte	0x10
	.byte	0x12
	.byte	0x14
	.size	 sKeyboardSymbolPositions,33
.text
	.align	2, 0
	.type	 CursorColToKeyboardCol,function
	.thumb_func
CursorColToKeyboardCol:
	ldr	r3, .L249
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r1, .L249+0x4
	ldrb	r2, [r1, #0xe]
	mov	r1, #0xb
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	bx	lr
.L250:
	.align	2, 0
.L249:
	.word	sKeyboardSymbolPositions
	.word	gSharedMem
.Lfe58:
	.size	 CursorColToKeyboardCol,.Lfe58-CursorColToKeyboardCol
	.align	2, 0
	.type	 SetCursorPos,function
	.thumb_func
SetCursorPos:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r1, .L252
	ldrb	r1, [r1, #0xf]
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	ldr	r1, .L252+0x4
	add	r4, r4, r1
	lsr	r6, r0, #0x10
	asr	r0, r0, #0x10
	bl	CursorColToKeyboardCol
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x15
	add	r0, r0, #0x1b
	strh	r0, [r4, #0x20]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0xc
	add	r0, r0, #0x50
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0x2e]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	strh	r0, [r4, #0x34]
	strh	r6, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	gSharedMem
	.word	gSprites
.Lfe59:
	.size	 SetCursorPos,.Lfe59-SetCursorPos
	.align	2, 0
	.type	 GetCursorPos,function
	.thumb_func
GetCursorPos:
	ldr	r2, .L255
	ldrb	r3, [r2, #0xf]
	lsl	r2, r3, #0x4
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	ldr	r3, .L255+0x4
	add	r2, r2, r3
	ldrh	r3, [r2, #0x2e]
	strh	r3, [r0]
	ldrh	r0, [r2, #0x30]
	strh	r0, [r1]
	bx	lr
.L256:
	.align	2, 0
.L255:
	.word	gSharedMem
	.word	gSprites
.Lfe60:
	.size	 GetCursorPos,.Lfe60-GetCursorPos
	.align	2, 0
	.type	 MoveCursorToOKButton,function
	.thumb_func
MoveCursorToOKButton:
	push	{lr}
	mov	r0, #0xa
	mov	r1, #0x2
	bl	SetCursorPos
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 MoveCursorToOKButton,.Lfe61-MoveCursorToOKButton
	.align	2, 0
	.type	 sub_80B6888,function
	.thumb_func
sub_80B6888:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L259
	ldr	r4, .L259+0x4
	ldrb	r1, [r4, #0xf]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrh	r3, [r2, #0x36]
	ldr	r1, .L259+0x8
	and	r1, r1, r3
	strh	r1, [r2, #0x36]
	ldrb	r2, [r4, #0xf]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r2, [r1, #0x36]
	orr	r0, r0, r2
	strh	r0, [r1, #0x36]
	ldrb	r1, [r4, #0xf]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x0
	bl	StartSpriteAnim
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L260:
	.align	2, 0
.L259:
	.word	gSprites
	.word	gSharedMem
	.word	0xffffff00
.Lfe62:
	.size	 sub_80B6888,.Lfe62-sub_80B6888
	.align	2, 0
	.type	 sub_80B68D8,function
	.thumb_func
sub_80B68D8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	ldr	r5, .L262
	ldr	r4, .L262+0x4
	ldrb	r1, [r4, #0xf]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrh	r3, [r2, #0x36]
	mov	r1, #0xff
	and	r1, r1, r3
	strh	r1, [r2, #0x36]
	ldrb	r2, [r4, #0xf]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsr	r0, r0, #0x10
	ldrh	r2, [r1, #0x36]
	orr	r0, r0, r2
	strh	r0, [r1, #0x36]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L263:
	.align	2, 0
.L262:
	.word	gSprites
	.word	gSharedMem
.Lfe63:
	.size	 sub_80B68D8,.Lfe63-sub_80B68D8
	.align	2, 0
	.type	 sub_80B6914,function
	.thumb_func
sub_80B6914:
	push	{lr}
	ldr	r0, .L265
	ldrb	r1, [r0, #0xf]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L265+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	bl	StartSpriteAnim
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gSharedMem
	.word	gSprites
.Lfe64:
	.size	 sub_80B6914,.Lfe64-sub_80B6914
	.align	2, 0
	.type	 IsCursorAnimFinished,function
	.thumb_func
IsCursorAnimFinished:
	ldr	r2, .L268
	ldr	r0, .L268+0x4
	ldrb	r1, [r0, #0xf]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	bx	lr
.L269:
	.align	2, 0
.L268:
	.word	gSprites
	.word	gSharedMem
.Lfe65:
	.size	 IsCursorAnimFinished,.Lfe65-IsCursorAnimFinished
	.section .rodata
.LC133:
	.byte	0x1
	.byte	0x2
	.byte	0x3
.text
	.align	2, 0
	.type	 GetKeyRoleAtCursorPos,function
	.thumb_func
GetKeyRoleAtCursorPos:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	ldr	r1, .L274
	mov	r0, sp
	mov	r2, #0x3
	bl	memcpy
	add	r4, sp, #0x4
	mov	r5, sp
	add	r5, r5, #0x6
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetCursorPos
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x9
	ble	.L271	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	add	r0, r0, sp
	ldrb	r0, [r0]
	b	.L273
.L275:
	.align	2, 0
.L274:
	.word	.LC133
.L271:
	mov	r0, #0x0
.L273:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 GetKeyRoleAtCursorPos,.Lfe66-GetKeyRoleAtCursorPos
	.align	2, 0
	.globl	sub_80B6998
	.type	 sub_80B6998,function
	.thumb_func
sub_80B6998:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L277	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
.L277:
	ldrh	r1, [r4, #0x36]
	mov	r0, #0xff
	and	r0, r0, r1
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r1, [r3]
	mov	r2, #0x5
	neg	r2, r2
	and	r2, r2, r1
	orr	r2, r2, r0
	strb	r2, [r3]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xa
	bne	.L278	@cond_branch
	mov	r0, #0x4
	orr	r2, r2, r0
	strb	r2, [r3]
.L278:
	ldrb	r1, [r3]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L280	@cond_branch
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L280	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L280	@cond_branch
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	beq	.L279	@cond_branch
.L280:
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	mov	r0, #0x1
	strh	r0, [r4, #0x3a]
	mov	r0, #0x2
	strh	r0, [r4, #0x3c]
.L279:
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L281	@cond_branch
	ldrh	r1, [r4, #0x3a]
	ldrh	r2, [r4, #0x38]
	add	r0, r1, r2
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	beq	.L283	@cond_branch
	cmp	r0, #0
	bne	.L282	@cond_branch
.L283:
	neg	r0, r1
	strh	r0, [r4, #0x3a]
.L282:
	mov	r0, #0x2
	strh	r0, [r4, #0x3c]
.L281:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L284	@cond_branch
	ldrh	r4, [r4, #0x38]
	lsl	r5, r4, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x11
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x5
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x4
	ldr	r2, .L285
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r5, #0
	bl	MultiplyInvertedPaletteRGBComponents
.L284:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	0x1010000
.Lfe67:
	.size	 sub_80B6998,.Lfe67-sub_80B6998
	.align	2, 0
	.type	 sub_80B6A80,function
	.thumb_func
sub_80B6A80:
	push	{r4, r5, lr}
	ldr	r0, .L288
	mov	r1, #0xcc
	mov	r2, #0x50
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L288+0x4
	strb	r0, [r1, #0x10]
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r5, .L288+0x8
	add	r4, r4, r5
	ldr	r1, .L288+0xc
	add	r0, r4, #0
	bl	SetSubspriteTables
	ldr	r0, .L288+0x10
	mov	r1, #0xcc
	mov	r2, #0x4c
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x3a]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldr	r1, .L288+0x14
	add	r0, r2, #0
	bl	SetSubspriteTables
	ldr	r0, .L288+0x18
	mov	r1, #0xcc
	mov	r2, #0x4b
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r3, [r1, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	and	r2, r2, r3
	mov	r3, #0x4
	orr	r2, r2, r3
	strb	r2, [r1, #0x5]
	strh	r0, [r4, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L289:
	.align	2, 0
.L288:
	.word	gSpriteTemplate_83CE5C8
	.word	gSharedMem
	.word	gSprites
	.word	gSubspriteTables_83CE558
	.word	gSpriteTemplate_83CE5F8
	.word	gSubspriteTables_83CE560
	.word	gSpriteTemplate_83CE5E0
.Lfe68:
	.size	 sub_80B6A80,.Lfe68-sub_80B6A80
	.align	2, 0
	.type	 sub_80B6B14,function
	.thumb_func
sub_80B6B14:
	ldr	r2, .L291
	ldrb	r1, [r2, #0x10]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L291+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2, #0xe]
	strh	r1, [r0, #0x30]
	bx	lr
.L292:
	.align	2, 0
.L291:
	.word	gSharedMem
	.word	gSprites
.Lfe69:
	.size	 sub_80B6B14,.Lfe69-sub_80B6B14
	.section .rodata
	.align	2, 0
	.type	 gUnknown_083CE2B4,object
gUnknown_083CE2B4:
	.word	sub_80B6B5C
	.word	sub_80B6B98
	.word	sub_80B6B9C
	.word	sub_80B6C08
	.size	 gUnknown_083CE2B4,16
.text
	.align	2, 0
	.globl	sub_80B6B34
	.type	 sub_80B6B34,function
	.thumb_func
sub_80B6B34:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L298
.L294:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L294	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L299:
	.align	2, 0
.L298:
	.word	gUnknown_083CE2B4
.Lfe70:
	.size	 sub_80B6B34,.Lfe70-sub_80B6B34
	.align	2, 0
	.type	 sub_80B6B5C,function
	.thumb_func
sub_80B6B5C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r3, .L301
	add	r1, r1, r3
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L301+0x4
	ldrb	r0, [r0, #0xe]
	bl	sub_80B6C48
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L302:
	.align	2, 0
.L301:
	.word	gSprites
	.word	gSharedMem
.Lfe71:
	.size	 sub_80B6B5C,.Lfe71-sub_80B6B5C
	.align	2, 0
	.type	 sub_80B6B98,function
	.thumb_func
sub_80B6B98:
	mov	r0, #0x0
	bx	lr
.Lfe72:
	.size	 sub_80B6B98,.Lfe72-sub_80B6B98
	.align	2, 0
	.type	 sub_80B6B9C,function
	.thumb_func
sub_80B6B9C:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r0, #0x3a
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L306
	add	r4, r0, r2
	mov	r0, #0x3c
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r0, r2
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L305	@cond_branch
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	ldr	r0, .L306+0x4
	strh	r0, [r4, #0x26]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r3, #0x30]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	add	r2, r5, #0
	bl	sub_80B6C48
.L305:
	mov	r0, #0x0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L307:
	.align	2, 0
.L306:
	.word	gSprites
	.word	0xfffc
.Lfe73:
	.size	 sub_80B6B9C,.Lfe73-sub_80B6B9C
	.align	2, 0
	.type	 sub_80B6C08,function
	.thumb_func
sub_80B6C08:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L310
	add	r2, r0, r1
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r2, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L309	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x26]
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
.L309:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L311:
	.align	2, 0
.L310:
	.word	gSprites
.Lfe74:
	.size	 sub_80B6C08,.Lfe74-sub_80B6C08
	.section .rodata
	.align	1, 0
	.type	 gUnknown_083CE2C4,object
gUnknown_083CE2C4:
	.short	0x1
	.short	0x3
	.short	0x2
	.size	 gUnknown_083CE2C4,6
	.align	1, 0
	.type	 gUnknown_083CE2CA,object
gUnknown_083CE2CA:
	.short	0x4
	.short	0x6
	.short	0x5
	.size	 gUnknown_083CE2CA,6
.text
	.align	2, 0
	.type	 sub_80B6C48,function
	.thumb_func
sub_80B6C48:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L313
	lsl	r4, r5, #0x1
	add	r0, r4, r0
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x4
	mov	r1, r8
	ldrb	r2, [r1, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	orr	r1, r1, r0
	mov	r0, r8
	strb	r1, [r0, #0x5]
	ldr	r0, .L313+0x4
	add	r4, r4, r0
	ldrh	r0, [r4]
	bl	GetSpriteTileStartByTag
	add	r1, r6, #0
	add	r1, r1, #0x40
	strh	r0, [r1]
	add	r6, r6, #0x42
	mov	r1, #0x3f
	and	r1, r1, r5
	ldrb	r2, [r6]
	mov	r0, #0x40
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r6]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gUnknown_083CE2C4
	.word	gUnknown_083CE2CA
.Lfe75:
	.size	 sub_80B6C48,.Lfe75-sub_80B6C48
	.align	2, 0
	.type	 sub_80B6CA8,function
	.thumb_func
sub_80B6CA8:
	push	{r4, r5, lr}
	ldr	r0, .L316
	mov	r1, #0xcc
	mov	r2, #0x6c
	mov	r3, #0x0
	bl	CreateSprite
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L316+0x4
	add	r0, r0, r4
	ldr	r5, .L316+0x8
	add	r1, r5, #0
	bl	SetSubspriteTables
	ldr	r0, .L316+0xc
	mov	r1, #0xcc
	mov	r2, #0x84
	mov	r3, #0x0
	bl	CreateSprite
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r1, r5, #0
	bl	SetSubspriteTables
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L317:
	.align	2, 0
.L316:
	.word	gSpriteTemplate_83CE610
	.word	gSprites
	.word	gSubspriteTables_83CE578
	.word	gSpriteTemplate_83CE628
.Lfe76:
	.size	 sub_80B6CA8,.Lfe76-sub_80B6CA8
	.align	2, 0
	.type	 sub_80B6D04,function
	.thumb_func
sub_80B6D04:
	push	{r4, r5, r6, lr}
	ldr	r4, .L324
	ldrh	r1, [r4, #0x2]
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x3
	add	r1, r1, #0x4
	ldr	r0, .L324+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x28
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r3, .L324+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	ldrh	r0, [r4, #0x2]
	lsl	r0, r0, #0x3
	add	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r5, #0x0
	ldr	r0, [r4, #0x44]
	ldrb	r0, [r0, #0x1]
	cmp	r5, r0
	bcs	.L320	@cond_branch
	add	r6, r3, #0
.L322:
	lsl	r4, r1, #0x10
	asr	r4, r4, #0x10
	ldr	r0, .L324+0xc
	add	r1, r4, #0
	mov	r2, #0x2c
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	strh	r5, [r0, #0x2e]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r4, r4, #0x8
	lsl	r4, r4, #0x10
	lsr	r1, r4, #0x10
	ldr	r0, .L324
	ldr	r0, [r0, #0x44]
	ldrb	r0, [r0, #0x1]
	cmp	r5, r0
	bcc	.L322	@cond_branch
.L320:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L325:
	.align	2, 0
.L324:
	.word	gSharedMem
	.word	gSpriteTemplate_83CE658
	.word	gSprites
	.word	gSpriteTemplate_83CE670
.Lfe77:
	.size	 sub_80B6D04,.Lfe77-sub_80B6D04
	.section .rodata
	.align	1, 0
.LC165:
	.short	0x0
	.short	0xfffffffc
	.short	0xfffffffe
	.short	0xffffffff
.text
	.align	2, 0
	.globl	sub_80B6D9C
	.type	 sub_80B6D9C,function
	.thumb_func
sub_80B6D9C:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	ldr	r1, .L329
	mov	r0, sp
	mov	r2, #0x8
	bl	memcpy
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L328	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L327	@cond_branch
.L328:
	mov	r0, #0x8
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
.L327:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x24]
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L330:
	.align	2, 0
.L329:
	.word	.LC165
.Lfe78:
	.size	 sub_80B6D9C,.Lfe78-sub_80B6D9C
	.section .rodata
	.align	1, 0
.LC167:
	.short	0x2
	.short	0x3
	.short	0x2
	.short	0x1
.text
	.align	2, 0
	.globl	sub_80B6DE8
	.type	 sub_80B6DE8,function
	.thumb_func
sub_80B6DE8:
	push	{r4, lr}
	add	sp, sp, #0xfffffff8
	add	r4, r0, #0
	ldr	r1, .L336
	mov	r0, sp
	mov	r2, #0x8
	bl	memcpy
	bl	GetCursorPosition
	lsl	r0, r0, #0x18
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x18
	cmp	r0, r1
	beq	.L332	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	strh	r0, [r4, #0x30]
	b	.L335
.L337:
	.align	2, 0
.L336:
	.word	.LC167
.L332:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L333	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r0, #0x0
.L335:
	strh	r0, [r4, #0x32]
.L333:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 sub_80B6DE8,.Lfe79-sub_80B6DE8
	.section .rodata
	.align	2, 0
	.type	 gUnknown_083CE2E0,object
gUnknown_083CE2E0:
	.word	nullsub_40
	.word	sub_80B6E68
	.word	sub_80B6EBC
	.word	sub_80B6EFC
	.size	 gUnknown_083CE2E0,16
.text
	.align	2, 0
	.type	 sub_80B6E44,function
	.thumb_func
sub_80B6E44:
	push	{lr}
	ldr	r1, .L339
	ldr	r0, .L339+0x4
	ldr	r0, [r0, #0x44]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L340:
	.align	2, 0
.L339:
	.word	gUnknown_083CE2E0
	.word	gSharedMem
.Lfe80:
	.size	 sub_80B6E44,.Lfe80-sub_80B6E44
	.align	2, 0
	.type	 nullsub_40,function
	.thumb_func
nullsub_40:
	bx	lr
.Lfe81:
	.size	 nullsub_40,.Lfe81-nullsub_40
	.align	2, 0
	.type	 sub_80B6E68,function
	.thumb_func
sub_80B6E68:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L343
	add	r0, r0, #0x4e
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	GetRivalAvatarGraphicsIdByStateIdAndGender
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L343+0x4
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x38
	mov	r3, #0x18
	bl	AddPseudoFieldObject
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L343+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r1, #0x4
	bl	StartSpriteAnim
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L344:
	.align	2, 0
.L343:
	.word	gSharedMem
	.word	SpriteCallbackDummy
	.word	gSprites
.Lfe82:
	.size	 sub_80B6E68,.Lfe82-sub_80B6E68
	.align	2, 0
	.type	 sub_80B6EBC,function
	.thumb_func
sub_80B6EBC:
	push	{r4, lr}
	ldr	r0, .L346
	mov	r1, #0x34
	mov	r2, #0x18
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L346+0x4
	add	r4, r4, r0
	ldr	r1, .L346+0x8
	add	r0, r4, #0
	bl	SetSubspriteTables
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xc
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	pop	{r4}
	pop	{r0}
	bx	r0
.L347:
	.align	2, 0
.L346:
	.word	gSpriteTemplate_83CE688
	.word	gSprites
	.word	gSubspriteTables_83CE580
.Lfe83:
	.size	 sub_80B6EBC,.Lfe83-sub_80B6EBC
	.align	2, 0
	.type	 sub_80B6EFC,function
	.thumb_func
sub_80B6EFC:
	push	{lr}
	add	sp, sp, #0xfffffff8
	bl	sub_809D51C
	ldr	r3, .L349
	add	r0, r3, #0
	add	r0, r0, #0x4e
	ldrh	r0, [r0]
	ldr	r1, .L349+0x4
	mov	r2, #0x0
	str	r2, [sp]
	ldr	r2, [r3, #0x54]
	str	r2, [sp, #0x4]
	mov	r2, #0x34
	mov	r3, #0x18
	bl	CreateMonIcon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L349+0x8
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x5]
	mov	r2, #0xc
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	gSharedMem
	.word	SpriteCallbackDummy
	.word	gSprites
.Lfe84:
	.size	 sub_80B6EFC,.Lfe84-sub_80B6EFC
	.align	2, 0
	.type	 GetTextCaretPosition,function
	.thumb_func
GetTextCaretPosition:
	push	{r4, lr}
	mov	r2, #0x0
	ldr	r1, .L361
	ldr	r0, [r1, #0x44]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r2, r0
	bcs	.L353	@cond_branch
	add	r1, r1, #0x11
	add	r3, r0, #0
.L355:
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L354	@cond_branch
	lsl	r0, r2, #0x19
	b	.L360
.L362:
	.align	2, 0
.L361:
	.word	gSharedMem
.L354:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r3
	bcc	.L355	@cond_branch
.L353:
	ldr	r0, [r4, #0x44]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x19
.L360:
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 GetTextCaretPosition,.Lfe85-GetTextCaretPosition
	.align	2, 0
	.type	 GetCursorPosition,function
	.thumb_func
GetCursorPosition:
	push	{r4, lr}
	mov	r2, #0x0
	ldr	r1, .L371
	ldr	r0, [r1, #0x44]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r2, r0
	bcs	.L365	@cond_branch
	add	r1, r1, #0x11
	add	r3, r0, #0
.L367:
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L366	@cond_branch
	add	r0, r2, #0
	b	.L370
.L372:
	.align	2, 0
.L371:
	.word	gSharedMem
.L366:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r3
	bcc	.L367	@cond_branch
.L365:
	ldr	r0, [r4, #0x44]
	ldrb	r0, [r0, #0x1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L370:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 GetCursorPosition,.Lfe86-GetCursorPosition
	.align	2, 0
	.type	 GetPreviousTextCaretPosition,function
	.thumb_func
GetPreviousTextCaretPosition:
	push	{lr}
	ldr	r1, .L381
	ldr	r0, [r1, #0x44]
	ldrb	r0, [r0, #0x1]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	ble	.L375	@cond_branch
	add	r2, r1, #0
	add	r2, r2, #0x11
.L377:
	asr	r1, r0, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L376	@cond_branch
	lsl	r0, r1, #0x19
	lsr	r0, r0, #0x18
	b	.L380
.L382:
	.align	2, 0
.L381:
	.word	gSharedMem
.L376:
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bgt	.L377	@cond_branch
.L375:
	mov	r0, #0x0
.L380:
	pop	{r1}
	bx	r1
.Lfe87:
	.size	 GetPreviousTextCaretPosition,.Lfe87-GetPreviousTextCaretPosition
	.align	2, 0
	.type	 DeleteTextCharacter,function
	.thumb_func
DeleteTextCharacter:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L400
	add	r0, r4, #0
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	mov	r8, r0
	bl	GetPreviousTextCaretPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r4, r4, #0x11
	add	r0, r7, r4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x8
	add	r0, r7, #0x1
	add	r0, r0, r4
	ldrb	r6, [r0]
	orr	r6, r6, r1
	mov	r0, r8
	cmp	r0, #0x6
	bls	.LCB3997
	b	.L384	@long jump
.LCB3997:
	lsl	r0, r0, #0x2
	ldr	r1, .L400+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L401:
	.align	2, 0
.L400:
	.word	gSharedMem
	.word	.L395
	.align	2, 0
	.align	2, 0
.L395:
	.word	.L386
	.word	.L386
	.word	.L388
	.word	.L388
	.word	.L390
	.word	.L390
	.word	.L394
.L386:
	ldr	r1, .L402
	add	r1, r1, #0x11
	add	r2, r7, r1
	mov	r0, #0xff
	strb	r0, [r2]
	add	r0, r7, #0x1
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	b	.L384
.L403:
	.align	2, 0
.L402:
	.word	gSharedMem
.L388:
	mov	r1, #0x1
	mov	r8, r1
	ldr	r4, .L404
	add	r4, r4, #0x11
	add	r1, r7, r4
	mov	r0, #0x41
	strb	r0, [r1]
	add	r0, r6, #0
	bl	getCho
	add	r1, r7, #0x1
	add	r1, r1, r4
	strb	r0, [r1]
	b	.L384
.L405:
	.align	2, 0
.L404:
	.word	gSharedMem
.L390:
	add	r0, r6, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1c
	beq	.L392	@cond_branch
	cmp	r0, #0x21
	beq	.L392	@cond_branch
	cmp	r0, #0x26
	bne	.L391	@cond_branch
.L392:
	mov	r0, #0x2
	mov	r8, r0
	b	.L393
.L391:
	mov	r1, #0x3
	mov	r8, r1
.L393:
	add	r0, r6, #0
	bl	getCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeJung
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	b	.L399
.L394:
	mov	r0, #0x4
	mov	r8, r0
	add	r0, r6, #0
	bl	getCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeJung
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	isHavingJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	SplitJong
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
.L399:
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r1, .L406
	add	r1, r1, #0x11
	add	r2, r7, r1
	lsr	r0, r6, #0x8
	strb	r0, [r2]
	add	r0, r7, #0x1
	add	r0, r0, r1
	strb	r6, [r0]
.L384:
	ldr	r0, .L406
	add	r0, r0, #0x5c
	mov	r1, r8
	strb	r1, [r0]
	bl	sub_80B7960
	bl	GetKeyRoleAtCursorPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L398	@cond_branch
	cmp	r0, #0x2
	bne	.L397	@cond_branch
.L398:
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x1
	bl	sub_80B6460
.L397:
	mov	r0, #0x17
	bl	PlaySE
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L407:
	.align	2, 0
.L406:
	.word	gSharedMem
.Lfe88:
	.size	 DeleteTextCharacter,.Lfe88-DeleteTextCharacter
	.align	2, 0
	.type	 sub_80B7004,function
	.thumb_func
sub_80B7004:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffffc
	mov	r5, sp
	add	r5, r5, #0x2
	mov	r0, sp
	add	r1, r5, #0
	bl	GetCursorPos
	mov	r4, sp
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	bl	CursorColToKeyboardCol
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, sp
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	bl	GetCharAtKeyboardPos
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0xff
	bne	.L409	@cond_branch
	bl	sub_80B7104
	b	.L410
.L409:
	cmp	r0, #0xfe
	bne	.L411	@cond_branch
	bl	sub_80B713C
	b	.L410
.L411:
	add	r0, r1, #0
	bl	AddTextCharacter
.L410:
	bl	sub_80B7960
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe89:
	.size	 sub_80B7004,.Lfe89-sub_80B7004
	.align	2, 0
	.type	 sub_80B7090,function
	.thumb_func
sub_80B7090:
	push	{r4, r5, r6, r7, lr}
	bl	GetPreviousTextCaretPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r5, #0
	ldr	r0, .L420
	add	r0, r0, #0x11
	add	r0, r5, r0
	ldrb	r4, [r0]
	add	r6, r4, #0
	add	r0, r4, #0
	bl	sub_80B7198
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L414	@cond_branch
	add	r0, r4, #0
	bl	sub_80B7264
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L415	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80B7370
	b	.L417
.L421:
	.align	2, 0
.L420:
	.word	gSharedMem
.L415:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80B73CC
	b	.L417
.L414:
	add	r0, r4, #0
	bl	sub_80B71E4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L418	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80B7474
	b	.L417
.L418:
	add	r0, r6, #0
	add	r1, r7, #0
	bl	sub_80B72A4
.L417:
	bl	sub_80B7960
	mov	r0, #0x5
	bl	PlaySE
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 sub_80B7090,.Lfe90-sub_80B7090
	.align	2, 0
	.type	 sub_80B7104,function
	.thumb_func
sub_80B7104:
	push	{r4, r5, lr}
	bl	GetPreviousTextCaretPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L425
	add	r0, r0, #0x11
	add	r0, r5, r0
	ldrb	r4, [r0]
	add	r0, r4, #0
	bl	sub_80B720C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L423	@cond_branch
	mov	r0, #0x0
	b	.L424
.L426:
	.align	2, 0
.L425:
	.word	gSharedMem
.L423:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80B72A4
	mov	r0, #0x1
.L424:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 sub_80B7104,.Lfe91-sub_80B7104
	.align	2, 0
	.type	 sub_80B713C,function
	.thumb_func
sub_80B713C:
	push	{r4, r5, lr}
	bl	GetPreviousTextCaretPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L430
	add	r0, r0, #0x11
	add	r0, r5, r0
	ldrb	r4, [r0]
	add	r0, r4, #0
	bl	sub_80B7264
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L428	@cond_branch
	mov	r0, #0x0
	b	.L429
.L431:
	.align	2, 0
.L430:
	.word	gSharedMem
.L428:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80B7370
	mov	r0, #0x1
.L429:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe92:
	.size	 sub_80B713C,.Lfe92-sub_80B713C
	.align	2, 0
	.type	 AddTextCharacter,function
	.thumb_func
AddTextCharacter:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	GetTextCaretPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L516
	add	r0, r3, #0
	add	r0, r0, #0x5c
	ldrb	r4, [r0]
	cmp	r6, #0x1
	bls	.L433	@cond_branch
	sub	r0, r6, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x11
	add	r0, r0, r1
	ldrb	r2, [r0]
	sub	r0, r6, #0x1
	add	r0, r0, r1
	ldrb	r5, [r0]
	lsl	r7, r2, #0x8
	orr	r7, r7, r5
.L433:
	mov	r0, r8
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9f
	bls	.L434	@cond_branch
	ldr	r0, [r3, #0x44]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bne	.LCB4464
	b	.L432	@long jump
.LCB4464:
	add	r1, r3, #0
	add	r1, r1, #0x11
	add	r2, r6, r1
	mov	r0, #0x0
	strb	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r6, r1
	mov	r0, r8
	strb	r0, [r1]
	mov	r4, #0x0
	b	.L436
.L517:
	.align	2, 0
.L516:
	.word	gSharedMem
.L434:
	cmp	r4, #0x6
	bls	.LCB4488
	b	.L436	@long jump
.LCB4488:
	lsl	r0, r4, #0x2
	ldr	r1, .L518
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L519:
	.align	2, 0
.L518:
	.word	.L510
	.align	2, 0
	.align	2, 0
.L510:
	.word	.L438
	.word	.L441
	.word	.L451
	.word	.L464
	.word	.L475
	.word	.L490
	.word	.L500
.L438:
	ldr	r1, .L520
	ldr	r0, [r1, #0x44]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bne	.LCB4512
	b	.L432	@long jump
.LCB4512:
	add	r1, r1, #0x11
	add	r2, r6, r1
	mov	r0, #0x41
	strb	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r6, r1
	mov	r0, r8
	strb	r0, [r1]
	mov	r0, r8
	bl	distJamo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB4529
	b	.L436	@long jump
.LCB4529:
	mov	r4, #0x1
	b	.L436
.L521:
	.align	2, 0
.L520:
	.word	gSharedMem
.L441:
	mov	r0, r8
	bl	distJamo
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB4546
	b	.L512	@long jump
.LCB4546:
	add	r0, r5, #0
	bl	MakeCho
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	bl	MakeJung
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L522
	cmp	r4, r0
	bne	.L443	@cond_branch
	mov	r4, #0x0
	b	.L512
.L523:
	.align	2, 0
.L522:
	.word	0xffff
.L443:
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L524
	add	r1, r1, #0x11
	add	r2, r6, r1
	lsr	r0, r4, #0x8
	strb	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r6, r1
	strb	r4, [r1]
	mov	r1, r8
	cmp	r1, #0x1c
	bne	.LCB4601
	b	.L508	@long jump
.LCB4601:
	cmp	r1, #0x21
	bne	.LCB4603
	b	.L508	@long jump
.LCB4603:
	cmp	r1, #0x26
	bne	.LCB4605
	b	.L508	@long jump
.LCB4605:
	b	.L507
.L525:
	.align	2, 0
.L524:
	.word	gSharedMem
.L451:
	mov	r0, r8
	bl	distJamo
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L452	@cond_branch
	add	r0, r7, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	bl	DoubleJung
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L453	@cond_branch
	mov	r4, #0x0
	b	.L512
.L453:
	add	r0, r7, #0
	bl	getCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	bl	DoubleJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeJung
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L526
	cmp	r4, r0
	bne	.L456	@cond_branch
	mov	r4, #0x0
	b	.L512
.L527:
	.align	2, 0
.L526:
	.word	0xffff
.L456:
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L528
	add	r1, r1, #0x11
	add	r2, r6, r1
	lsr	r0, r4, #0x8
	strb	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r6, r1
	strb	r4, [r1]
	b	.L507
.L529:
	.align	2, 0
.L528:
	.word	gSharedMem
.L452:
	add	r0, r7, #0
	bl	getCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r7, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeJung
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	bl	MakeJong
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L530
	cmp	r4, r0
	bne	.LCB4756
	b	.L513	@long jump
.LCB4756:
	mov	r0, r8
	bl	MakeJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB4763
	b	.L513	@long jump
.LCB4763:
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L530+0x4
	add	r1, r1, #0x11
	add	r2, r6, r1
	lsr	r0, r4, #0x8
	strb	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r6, r1
	strb	r4, [r1]
.L514:
	mov	r4, #0x5
	b	.L436
.L531:
	.align	2, 0
.L530:
	.word	0xffff
	.word	gSharedMem
.L464:
	mov	r0, r8
	bl	distJamo
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB4801
	b	.L512	@long jump
.LCB4801:
	add	r0, r7, #0
	bl	getCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r7, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeJung
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	bl	MakeJong
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L532
	cmp	r4, r0
	bne	.LCB4840
	b	.L513	@long jump
.LCB4840:
	mov	r0, r8
	bl	MakeJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.LCB4847
	b	.L513	@long jump
.LCB4847:
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L532+0x4
	add	r1, r1, #0x11
	add	r2, r6, r1
	lsr	r0, r4, #0x8
	strb	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r6, r1
	strb	r4, [r1]
	mov	r1, r8
	cmp	r1, #0x1
	beq	.L473	@cond_branch
	cmp	r1, #0x3
	beq	.L473	@cond_branch
	cmp	r1, #0x6
	beq	.L473	@cond_branch
	cmp	r1, #0x8
	bne	.L514	@cond_branch
.L473:
	mov	r4, #0x4
	b	.L436
.L533:
	.align	2, 0
.L532:
	.word	0xffff
	.word	gSharedMem
.L475:
	mov	r0, r8
	bl	distJamo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L476	@cond_branch
	add	r0, r7, #0
	bl	getJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	bl	DoubleJong
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4908
	b	.L513	@long jump
.LCB4908:
	add	r0, r7, #0
	bl	getCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r7, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeJung
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	bl	getJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	bl	DoubleJong
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L534
	cmp	r4, r0
	bne	.L480	@cond_branch
	mov	r4, #0x0
	b	.L512
.L535:
	.align	2, 0
.L534:
	.word	0xffff
.L480:
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L536
	add	r1, r1, #0x11
	add	r2, r6, r1
	lsr	r0, r4, #0x8
	strb	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r6, r1
	strb	r4, [r1]
	mov	r4, #0x6
	b	.L436
.L537:
	.align	2, 0
.L536:
	.word	gSharedMem
.L476:
	ldr	r5, .L538
	ldr	r0, [r5, #0x44]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bne	.LCB4999
	b	.L432	@long jump
.LCB4999:
	add	r0, r7, #0
	bl	getCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeJung
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r5, r5, #0x11
	mov	r9, r5
	add	r1, r6, r5
	mov	r5, #0xff
	lsl	r5, r5, #0x8
	lsr	r0, r4, #0x8
	strb	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, r9
	add	r0, r6, r1
	strb	r4, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r7, #0
	bl	getJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	bl	MakeJung
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L538+0x4
	cmp	r4, r0
	bne	.LCB5075
	b	.L515	@long jump
.LCB5075:
	mov	r0, r9
	add	r1, r6, r0
	and	r5, r5, r4
	lsr	r0, r5, #0x8
	strb	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, r9
	add	r0, r6, r1
	strb	r4, [r0]
	mov	r0, r8
	cmp	r0, #0x1c
	bne	.LCB5092
	b	.L508	@long jump
.LCB5092:
	cmp	r0, #0x21
	bne	.LCB5094
	b	.L508	@long jump
.LCB5094:
	cmp	r0, #0x26
	bne	.LCB5096
	b	.L508	@long jump
.LCB5096:
	b	.L507
.L539:
	.align	2, 0
.L538:
	.word	gSharedMem
	.word	0xffff
.L490:
	mov	r0, r8
	bl	distJamo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L513	@cond_branch
	b	.L476
.L500:
	mov	r0, r8
	bl	distJamo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L501	@cond_branch
.L513:
	mov	r4, #0x1
.L512:
	ldr	r1, .L540
	ldr	r0, [r1, #0x44]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bne	.LCB5153
	b	.L432	@long jump
.LCB5153:
	add	r1, r1, #0x11
	add	r2, r6, r1
	mov	r0, #0x41
	strb	r0, [r2]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r6, r1
	mov	r0, r8
	strb	r0, [r1]
	b	.L436
.L541:
	.align	2, 0
.L540:
	.word	gSharedMem
.L501:
	ldr	r1, .L542
	mov	r9, r1
	ldr	r0, [r1, #0x44]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bne	.LCB5180
	b	.L432	@long jump
.LCB5180:
	add	r0, r7, #0
	bl	getCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r7, #0
	bl	getJung
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeJung
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r7, #0
	bl	isHavingJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	SplitJong
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	sub	r0, r6, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x11
	add	r9, r9, r0
	mov	r0, r9
	add	r1, r6, r0
	mov	r5, #0xff
	lsl	r5, r5, #0x8
	lsr	r0, r4, #0x8
	strb	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, r9
	add	r0, r6, r1
	strb	r4, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r7, #0
	bl	isHavingJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	SplitJong
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	JongToCho
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MakeCho
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	bl	MakeJung
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	mov	r2, #0x0
	bl	MakeKorean
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L542+0x4
	cmp	r4, r0
	bne	.L505	@cond_branch
.L515:
	mov	r4, #0x0
	mov	r0, r9
	add	r1, r6, r0
	mov	r0, #0x41
	strb	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, r9
	add	r0, r6, r1
	mov	r1, r8
	strb	r1, [r0]
	b	.L436
.L543:
	.align	2, 0
.L542:
	.word	gSharedMem
	.word	0xffff
.L505:
	mov	r0, r9
	add	r1, r6, r0
	and	r5, r5, r4
	lsr	r0, r5, #0x8
	strb	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, r9
	add	r0, r6, r1
	strb	r4, [r0]
	mov	r0, r8
	cmp	r0, #0x1c
	beq	.L508	@cond_branch
	cmp	r0, #0x21
	beq	.L508	@cond_branch
	cmp	r0, #0x26
	bne	.L507	@cond_branch
.L508:
	mov	r4, #0x2
	b	.L436
.L507:
	mov	r4, #0x3
.L436:
	ldr	r0, .L544
	add	r0, r0, #0x5c
	strb	r4, [r0]
.L432:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L545:
	.align	2, 0
.L544:
	.word	gSharedMem
.Lfe93:
	.size	 AddTextCharacter,.Lfe93-AddTextCharacter
	.align	2, 0
	.type	 sub_80B7198,function
	.thumb_func
sub_80B7198:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xc9
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bls	.L548	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x79
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L548	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x74
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L548	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x6f
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L548	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x6a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L547	@cond_branch
.L548:
	mov	r0, #0x1
	b	.L550
.L547:
	mov	r0, #0x0
.L550:
	pop	{r1}
	bx	r1
.Lfe94:
	.size	 sub_80B7198,.Lfe94-sub_80B7198
	.align	2, 0
	.type	 sub_80B71E4,function
	.thumb_func
sub_80B71E4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xb5
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L553	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x65
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L552	@cond_branch
.L553:
	mov	r0, #0x1
	b	.L555
.L552:
	mov	r0, #0x0
.L555:
	pop	{r1}
	bx	r1
.Lfe95:
	.size	 sub_80B71E4,.Lfe95-sub_80B71E4
	.align	2, 0
	.type	 sub_80B720C,function
	.thumb_func
sub_80B720C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xfa
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0xe
	bls	.L558	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x1a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L558	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x4b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L558	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x56
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xe
	bls	.L558	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x6a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L558	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x65
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L557	@cond_branch
.L558:
	mov	r0, #0x1
	b	.L560
.L557:
	mov	r0, #0x0
.L560:
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 sub_80B720C,.Lfe96-sub_80B720C
	.align	2, 0
	.type	 sub_80B7264,function
	.thumb_func
sub_80B7264:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xe6
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L563	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x46
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L563	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x6a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L563	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x6a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L562	@cond_branch
.L563:
	mov	r0, #0x1
	b	.L565
.L562:
	mov	r0, #0x0
.L565:
	pop	{r1}
	bx	r1
.Lfe97:
	.size	 sub_80B7264,.Lfe97-sub_80B7264
	.align	2, 0
	.type	 sub_80B72A4,function
	.thumb_func
sub_80B72A4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0xfa
	lsl	r3, r3, #0x18
	add	r0, r0, r3
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L567	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x31
	b	.L586
.L567:
	add	r0, r2, #0
	sub	r0, r0, #0xb
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L569	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x31
	b	.L586
.L569:
	add	r0, r2, #0
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L571	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x31
	b	.L586
.L571:
	add	r0, r2, #0
	sub	r0, r0, #0x1a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L573	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x2c
	b	.L586
.L573:
	add	r0, r2, #0
	sub	r0, r0, #0x4b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L587	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0x56
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L577	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x31
	b	.L586
.L577:
	add	r0, r2, #0
	sub	r0, r0, #0x5b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L579	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x31
	b	.L586
.L579:
	add	r0, r2, #0
	sub	r0, r0, #0x60
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L581	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x31
	b	.L586
.L581:
	add	r0, r2, #0
	sub	r0, r0, #0x6a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L583	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x2c
	b	.L586
.L583:
	add	r0, r2, #0
	add	r0, r0, #0x65
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L568	@cond_branch
.L587:
	add	r0, r2, #0
	add	r0, r0, #0xfb
.L586:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L568:
	ldr	r0, .L588
	add	r0, r0, #0x11
	add	r0, r1, r0
	strb	r2, [r0]
	pop	{r0}
	bx	r0
.L589:
	.align	2, 0
.L588:
	.word	gSharedMem
.Lfe98:
	.size	 sub_80B72A4,.Lfe98-sub_80B72A4
	.align	2, 0
	.type	 sub_80B7370,function
	.thumb_func
sub_80B7370:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0xe6
	lsl	r3, r3, #0x18
	add	r0, r0, r3
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L591	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x31
	b	.L598
.L591:
	add	r0, r2, #0
	sub	r0, r0, #0x46
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L599	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0x6a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L595	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x31
	b	.L598
.L595:
	add	r0, r2, #0
	add	r0, r0, #0x6a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L592	@cond_branch
.L599:
	add	r0, r2, #0x5
.L598:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L592:
	ldr	r0, .L600
	add	r0, r0, #0x11
	add	r0, r1, r0
	strb	r2, [r0]
	pop	{r0}
	bx	r0
.L601:
	.align	2, 0
.L600:
	.word	gSharedMem
.Lfe99:
	.size	 sub_80B7370,.Lfe99-sub_80B7370
	.align	2, 0
	.type	 sub_80B73CC,function
	.thumb_func
sub_80B73CC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0xc9
	lsl	r3, r3, #0x18
	add	r0, r0, r3
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L603	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xcf
	b	.L618
.L603:
	add	r0, r2, #0
	sub	r0, r0, #0x3c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L605	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xcf
	b	.L618
.L605:
	add	r0, r2, #0
	sub	r0, r0, #0x41
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L607	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xcf
	b	.L618
.L607:
	add	r0, r2, #0
	sub	r0, r0, #0x46
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L619	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x79
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L611	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xcf
	b	.L618
.L611:
	add	r0, r2, #0
	add	r0, r0, #0x74
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L613	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xcf
	b	.L618
.L613:
	add	r0, r2, #0
	add	r0, r0, #0x6f
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L615	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xcf
	b	.L618
.L615:
	add	r0, r2, #0
	add	r0, r0, #0x6a
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L604	@cond_branch
.L619:
	add	r0, r2, #0
	add	r0, r0, #0xd4
.L618:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L604:
	ldr	r0, .L620
	add	r0, r0, #0x11
	add	r0, r1, r0
	strb	r2, [r0]
	pop	{r0}
	bx	r0
.L621:
	.align	2, 0
.L620:
	.word	gSharedMem
.Lfe100:
	.size	 sub_80B73CC,.Lfe100-sub_80B73CC
	.align	2, 0
	.type	 sub_80B7474,function
	.thumb_func
sub_80B7474:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0xb5
	lsl	r3, r3, #0x18
	add	r0, r0, r3
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L626	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x65
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L624	@cond_branch
.L626:
	add	r0, r2, #0
	add	r0, r0, #0xcf
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L624:
	ldr	r0, .L627
	add	r0, r0, #0x11
	add	r0, r1, r0
	strb	r2, [r0]
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gSharedMem
.Lfe101:
	.size	 sub_80B7474,.Lfe101-sub_80B7474
	.align	2, 0
	.type	 sub_80B74B0,function
	.thumb_func
sub_80B74B0:
	push	{r4, r5, r6, r7, lr}
	mov	r5, #0x0
	mov	r4, #0x0
	ldr	r7, .L645
	ldrb	r0, [r7, #0x11]
	mov	ip, r7
	cmp	r0, #0xff
	beq	.L631	@cond_branch
	mov	r6, ip
	add	r6, r6, #0x11
.L633:
	add	r0, r5, r6
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L634	@cond_branch
	ldr	r1, [r7, #0x48]
	add	r1, r1, r4
	add	r0, r5, #0x1
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	b	.L632
.L646:
	.align	2, 0
.L645:
	.word	gSharedMem
.L634:
	add	r1, r4, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r2, r4, #0
	ldr	r0, [r7, #0x48]
	add	r0, r0, r1
	strb	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, [r7, #0x48]
	add	r1, r1, r2
	add	r0, r5, #0x1
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
.L632:
	add	r0, r5, #0x2
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r7, ip
	add	r0, r5, r6
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L633	@cond_branch
.L631:
	mov	r1, ip
	ldr	r0, [r1, #0x48]
	add	r0, r0, r4
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r5, #0x0
	mov	r0, ip
	ldr	r1, [r0, #0x48]
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L638	@cond_branch
.L644:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r1, r5
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L644	@cond_branch
.L638:
	cmp	r4, #0
	bne	.L643	@cond_branch
	mov	r1, ip
	ldr	r0, [r1, #0x48]
	add	r1, r1, #0x5d
	bl	StringCopy
.L643:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe102:
	.size	 sub_80B74B0,.Lfe102-sub_80B74B0
	.align	2, 0
	.type	 DisplaySentToPCMessage,function
	.thumb_func
DisplaySentToPCMessage:
	push	{r4, lr}
	ldr	r0, .L648
	ldr	r1, .L648+0x4
	ldr	r1, [r1, #0x48]
	bl	StringCopy
	ldr	r4, .L648+0x8
	ldr	r1, .L648+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r0, .L648+0x10
	bl	BasicInitMenuWindow
	bl	MenuDisplayMessageBox
	add	r0, r4, #0
	bl	MenuPrintMessageDefaultCoords
	pop	{r4}
	pop	{r0}
	bx	r0
.L649:
	.align	2, 0
.L648:
	.word	gStringVar1
	.word	gSharedMem
	.word	gStringVar4
	.word	gOtherText_SentToPC
	.word	gWindowConfig_81E6E88
.Lfe103:
	.size	 DisplaySentToPCMessage,.Lfe103-DisplaySentToPCMessage
	.align	2, 0
	.type	 sub_80B753C,function
	.thumb_func
sub_80B753C:
	push	{lr}
	ldr	r0, .L651
	bl	LoadSpriteSheets
	ldr	r0, .L651+0x4
	bl	LoadSpritePalettes
	pop	{r0}
	bx	r0
.L652:
	.align	2, 0
.L651:
	.word	gUnknown_083CE6A0
	.word	gUnknown_083CE708
.Lfe104:
	.size	 sub_80B753C,.Lfe104-sub_80B753C
	.align	2, 0
	.type	 sub_80B7558,function
	.thumb_func
sub_80B7558:
	push	{lr}
	bl	sub_80B7568
	bl	sub_80B75B0
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 sub_80B7558,.Lfe105-sub_80B7558
	.align	2, 0
	.type	 sub_80B7568,function
	.thumb_func
sub_80B7568:
	push	{r4, lr}
	ldr	r4, .L655
	ldr	r3, .L655+0x4
	ldrh	r0, [r3]
	lsl	r0, r0, #0x5
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	ldr	r1, .L655+0x8
	str	r4, [r1]
	str	r0, [r1, #0x4]
	ldr	r2, .L655+0xc
	str	r2, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	ldrh	r0, [r3]
	lsl	r0, r0, #0x5
	ldr	r3, .L655+0x10
	add	r0, r0, r3
	str	r4, [r1]
	str	r0, [r1, #0x4]
	str	r2, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	gNamingScreenMenu_Gfx
	.word	gMenuMessageBoxContentTileOffset
	.word	0x40000d4
	.word	0x80000400
	.word	0x6008000
.Lfe106:
	.size	 sub_80B7568,.Lfe106-sub_80B7568
	.align	2, 0
	.type	 sub_80B75B0,function
	.thumb_func
sub_80B75B0:
	push	{lr}
	ldr	r0, .L658
	mov	r1, #0x0
	mov	r2, #0x80
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gNamingScreenPalettes
.Lfe107:
	.size	 sub_80B75B0,.Lfe107-sub_80B75B0
	.section .rodata
	.align	2, 0
	.type	 gUnknown_083CE2F0,object
gUnknown_083CE2F0:
	.word	sub_80B7660
	.word	sub_80B7650
	.word	sub_80B7650
	.word	sub_80B7670
	.word	sub_80B7670
	.word	sub_80B7660
	.size	 gUnknown_083CE2F0,24
	.align	2, 0
.LC231:
	.word	0x600e000
	.word	0x600e800
.text
	.align	2, 0
	.type	 sub_80B75C4,function
	.thumb_func
sub_80B75C4:
	push	{r4, r5, lr}
	add	sp, sp, #0xfffffff8
	ldr	r0, .L661
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r4, .L661+0x4
	ldr	r5, .L661+0x8
	ldrb	r1, [r5, #0xe]
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r5, #0xc]
	lsl	r0, r0, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	ldr	r1, [r1]
	bl	_call_via_r1
	ldrb	r1, [r5, #0xe]
	lsl	r1, r1, #0x3
	add	r4, r4, #0x4
	add	r1, r1, r4
	ldrb	r0, [r5, #0xd]
	lsl	r0, r0, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	ldr	r1, [r1]
	bl	_call_via_r1
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L662:
	.align	2, 0
.L661:
	.word	.LC231
	.word	gUnknown_083CE2F0
	.word	gSharedMem
.Lfe108:
	.size	 sub_80B75C4,.Lfe108-sub_80B75C4
	.align	2, 0
	.type	 sub_80B7614,function
	.thumb_func
sub_80B7614:
	push	{lr}
	add	sp, sp, #0xfffffff8
	ldr	r0, .L664
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r0, .L664+0x4
	ldr	r2, .L664+0x8
	ldrb	r1, [r2, #0xe]
	lsl	r1, r1, #0x3
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldrb	r0, [r2, #0xd]
	lsl	r0, r0, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	ldr	r1, [r1]
	bl	_call_via_r1
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L665:
	.align	2, 0
.L664:
	.word	.LC231
	.word	gUnknown_083CE2F0
	.word	gSharedMem
.Lfe109:
	.size	 sub_80B7614,.Lfe109-sub_80B7614
	.align	2, 0
	.type	 sub_80B7650,function
	.thumb_func
sub_80B7650:
	push	{lr}
	ldr	r1, .L667
	bl	sub_80B7698
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	gUnknown_083CE748
.Lfe110:
	.size	 sub_80B7650,.Lfe110-sub_80B7650
	.align	2, 0
	.type	 sub_80B7660,function
	.thumb_func
sub_80B7660:
	push	{lr}
	ldr	r1, .L670
	bl	sub_80B7698
	pop	{r0}
	bx	r0
.L671:
	.align	2, 0
.L670:
	.word	gUnknown_083CEBF8
.Lfe111:
	.size	 sub_80B7660,.Lfe111-sub_80B7660
	.align	2, 0
	.type	 sub_80B7670,function
	.thumb_func
sub_80B7670:
	push	{lr}
	ldr	r1, .L673
	bl	sub_80B7698
	pop	{r0}
	bx	r0
.L674:
	.align	2, 0
.L673:
	.word	gUnknown_083CF0A8
.Lfe112:
	.size	 sub_80B7670,.Lfe112-sub_80B7670
	.align	2, 0
	.type	 sub_80B7680,function
	.thumb_func
sub_80B7680:
	push	{lr}
	ldr	r0, .L676
	ldr	r1, .L676+0x4
	bl	sub_80B76E0
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	0x600f000
	.word	gUnknown_08E86258
.Lfe113:
	.size	 sub_80B7680,.Lfe113-sub_80B7680
	.align	2, 0
	.type	 sub_80B7698,function
	.thumb_func
sub_80B7698:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	add	r3, r1, #0
	mov	r4, #0x0
	ldr	r0, .L689
	ldrh	r6, [r0]
.L682:
	mov	r1, #0x0
	lsl	r4, r4, #0x10
	asr	r5, r4, #0xb
.L686:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r1, r5, r0
	lsl	r1, r1, #0x1
	add	r1, r1, ip
	ldrh	r7, [r3]
	add	r2, r6, r7
	strh	r2, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	add	r3, r3, #0x2
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L686	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r4, r1
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L682	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L690:
	.align	2, 0
.L689:
	.word	gMenuMessageBoxContentTileOffset
.Lfe114:
	.size	 sub_80B7698,.Lfe114-sub_80B7698
	.align	2, 0
	.type	 sub_80B76E0,function
	.thumb_func
sub_80B76E0:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r0
	add	r3, r1, #0
	mov	r4, #0x0
	ldr	r0, .L702
	ldrh	r6, [r0]
.L695:
	mov	r1, #0x0
	lsl	r5, r4, #0x10
	asr	r4, r5, #0xb
.L699:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r1, r4, r0
	lsl	r1, r1, #0x1
	add	r1, r1, ip
	ldrh	r7, [r3]
	add	r2, r6, r7
	strh	r2, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	add	r3, r3, #0x2
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L699	@cond_branch
	add	r3, r3, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r5, r1
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L695	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	gMenuMessageBoxContentTileOffset
.Lfe115:
	.size	 sub_80B76E0,.Lfe115-sub_80B76E0
	.align	2, 0
	.type	 sub_80B772C,function
	.thumb_func
sub_80B772C:
	push	{lr}
	ldr	r1, .L705
	ldrb	r0, [r1, #0xe]
	ldrb	r1, [r1, #0xc]
	bl	nullsub_20
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	gSharedMem
.Lfe116:
	.size	 sub_80B772C,.Lfe116-sub_80B772C
	.align	2, 0
	.type	 sub_80B7740,function
	.thumb_func
sub_80B7740:
	push	{r4, lr}
	ldr	r4, .L708
	ldrb	r0, [r4, #0xe]
	add	r0, r0, #0x1
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4, #0xd]
	bl	nullsub_20
	pop	{r4}
	pop	{r0}
	bx	r0
.L709:
	.align	2, 0
.L708:
	.word	gSharedMem
.Lfe117:
	.size	 sub_80B7740,.Lfe117-sub_80B7740
	.align	2, 0
	.type	 nullsub_20,function
	.thumb_func
nullsub_20:
	bx	lr
.Lfe118:
	.size	 nullsub_20,.Lfe118-nullsub_20
	.section .rodata
	.align	2, 0
	.type	 gUnknown_083CE310,object
gUnknown_083CE310:
	.word	sub_80B7844
	.word	sub_80B7838
	.word	sub_80B7838
	.word	sub_80B7850
	.word	sub_80B7850
	.word	sub_80B7844
	.size	 gUnknown_083CE310,24
	.align	2, 0
	.type	 gUnknown_083CE328,object
gUnknown_083CE328:
	.word	gWindowConfig_81E6EDC
	.word	gWindowConfig_81E6EF8
	.word	gWindowConfig_81E6EA4
	.word	gWindowConfig_81E6EC0
	.word	gWindowConfig_81E6EA4
	.word	gWindowConfig_81E6EC0
	.word	gWindowConfig_81E6F14
	.word	gWindowConfig_81E6F30
	.word	gWindowConfig_81E6F14
	.word	gWindowConfig_81E6F30
	.word	gWindowConfig_81E6EDC
	.word	gWindowConfig_81E6EF8
	.size	 gUnknown_083CE328,48
	.align	2, 0
	.type	 gUnknown_083CE358,object
gUnknown_083CE358:
	.word	nullsub_61
	.word	nullsub_61
	.word	sub_80B78F8
	.word	sub_80B78F8
	.size	 gUnknown_083CE358,16
	.align	2, 0
	.type	 gUnknown_083CE368,object
gUnknown_083CE368:
	.word	nullsub_62
	.word	sub_80B7924
	.size	 gUnknown_083CE368,8
.text
	.align	2, 0
	.type	 GetCharAtKeyboardPos,function
	.thumb_func
GetCharAtKeyboardPos:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L717
	ldrb	r0, [r4, #0xe]
	cmp	r0, #0
	beq	.L712	@cond_branch
	ldr	r3, .L717+0x4
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	ldrb	r1, [r4, #0xe]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x5
	b	.L716
.L718:
	.align	2, 0
.L717:
	.word	gSharedMem
	.word	sKeyboardCharacters
.L712:
	ldr	r3, .L719
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
.L716:
	add	r2, r2, r0
	add	r2, r2, r3
	ldrb	r0, [r2]
	pop	{r4}
	pop	{r1}
	bx	r1
.L720:
	.align	2, 0
.L719:
	.word	sKoreanCharacters
.Lfe119:
	.size	 GetCharAtKeyboardPos,.Lfe119-GetCharAtKeyboardPos
	.align	2, 0
	.type	 sub_80B7794,function
	.thumb_func
sub_80B7794:
	push	{r4, r5, r6, lr}
	ldr	r6, .L722
	ldr	r4, .L722+0x4
	ldrb	r0, [r4, #0xc]
	lsl	r0, r0, #0x2
	ldrb	r1, [r4, #0xe]
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r6
	ldr	r0, [r0]
	bl	BasicInitMenuWindow
	ldr	r5, .L722+0x8
	ldrb	r0, [r4, #0xe]
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	_call_via_r0
	ldrb	r1, [r4, #0xd]
	lsl	r1, r1, #0x2
	ldrb	r0, [r4, #0xe]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r6, r6, #0x8
	add	r1, r1, r6
	ldr	r0, [r1]
	bl	BasicInitMenuWindow
	ldrb	r0, [r4, #0xe]
	lsl	r0, r0, #0x3
	add	r5, r5, #0x4
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	_call_via_r0
	bl	sub_80B772C
	bl	sub_80B7740
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L723:
	.align	2, 0
.L722:
	.word	gUnknown_083CE328
	.word	gSharedMem
	.word	gUnknown_083CE310
.Lfe120:
	.size	 sub_80B7794,.Lfe120-sub_80B7794
	.align	2, 0
	.type	 sub_80B77F8,function
	.thumb_func
sub_80B77F8:
	push	{r4, lr}
	ldr	r2, .L725
	ldr	r4, .L725+0x4
	ldrb	r1, [r4, #0xd]
	lsl	r1, r1, #0x2
	ldrb	r0, [r4, #0xe]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, #0x8
	add	r1, r1, r2
	ldr	r0, [r1]
	bl	BasicInitMenuWindow
	ldr	r1, .L725+0x8
	ldrb	r0, [r4, #0xe]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	bl	sub_80B7740
	pop	{r4}
	pop	{r0}
	bx	r0
.L726:
	.align	2, 0
.L725:
	.word	gUnknown_083CE328
	.word	gSharedMem
	.word	gUnknown_083CE310
.Lfe121:
	.size	 sub_80B77F8,.Lfe121-sub_80B77F8
	.align	2, 0
	.type	 sub_80B7838,function
	.thumb_func
sub_80B7838:
	push	{lr}
	mov	r0, #0x1
	bl	PrintKeyboardCharacters
	pop	{r0}
	bx	r0
.Lfe122:
	.size	 sub_80B7838,.Lfe122-sub_80B7838
	.align	2, 0
	.type	 sub_80B7844,function
	.thumb_func
sub_80B7844:
	push	{lr}
	mov	r0, #0x0
	bl	PrintKeyboardCharacters
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 sub_80B7844,.Lfe123-sub_80B7844
	.align	2, 0
	.type	 sub_80B7850,function
	.thumb_func
sub_80B7850:
	push	{lr}
	mov	r0, #0x2
	bl	PrintKeyboardCharacters
	pop	{r0}
	bx	r0
.Lfe124:
	.size	 sub_80B7850,.Lfe124-sub_80B7850
	.align	2, 0
	.type	 PrintKeyboardCharacters,function
	.thumb_func
PrintKeyboardCharacters:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	SetCustomFont
	mov	r1, #0x0
	mov	r5, #0x9
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r6, r0, #0x5
.L734:
	lsl	r4, r1, #0x10
	asr	r4, r4, #0x10
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L736
	add	r0, r0, r1
	add	r0, r6, r0
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	mov	r1, #0x3
	bl	MenuPrint
	add	r4, r4, #0x1
	lsl	r4, r4, #0x10
	lsl	r0, r5, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	add	r0, r0, r1
	lsr	r5, r0, #0x10
	lsr	r1, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0x3
	ble	.L734	@cond_branch
	mov	r0, #0x0
	bl	SetCustomFont
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L737:
	.align	2, 0
.L736:
	.word	sKeyboardCharacters
.Lfe125:
	.size	 PrintKeyboardCharacters,.Lfe125-PrintKeyboardCharacters
	.align	2, 0
	.type	 sub_80B78A8,function
	.thumb_func
sub_80B78A8:
	push	{r4, lr}
	ldr	r0, .L739
	bl	BasicInitMenuWindow
	ldr	r1, .L739+0x4
	ldr	r4, .L739+0x8
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r1, .L739+0xc
	ldr	r0, [r4, #0x44]
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, [r4, #0x44]
	ldr	r0, [r0, #0x8]
	mov	r1, #0x9
	mov	r2, #0x2
	bl	MenuPrint
	pop	{r4}
	pop	{r0}
	bx	r0
.L740:
	.align	2, 0
.L739:
	.word	gWindowConfig_81E6F4C
	.word	gUnknown_083CE358
	.word	gSharedMem
	.word	gUnknown_083CE368
.Lfe126:
	.size	 sub_80B78A8,.Lfe126-sub_80B78A8
	.align	2, 0
	.type	 nullsub_61,function
	.thumb_func
nullsub_61:
	bx	lr
.Lfe127:
	.size	 nullsub_61,.Lfe127-nullsub_61
	.align	2, 0
	.type	 sub_80B78F8,function
	.thumb_func
sub_80B78F8:
	push	{lr}
	ldr	r0, .L743
	ldr	r1, .L743+0x4
	add	r1, r1, #0x4e
	mov	r3, #0x0
	ldrsh	r2, [r1, r3]
	mov	r1, #0xb
	mul	r1, r1, r2
	ldr	r2, .L743+0x8
	add	r1, r1, r2
	bl	StringCopy
	pop	{r0}
	bx	r0
.L744:
	.align	2, 0
.L743:
	.word	gStringVar1
	.word	gSharedMem
	.word	gSpeciesNames
.Lfe128:
	.size	 sub_80B78F8,.Lfe128-sub_80B78F8
	.align	2, 0
	.type	 nullsub_62,function
	.thumb_func
nullsub_62:
	bx	lr
.Lfe129:
	.size	 nullsub_62,.Lfe129-nullsub_62
	.section .rodata
.LC287:
	.byte	0xb5
	.byte	0xff
.text
	.align	2, 0
	.type	 sub_80B7924,function
	.thumb_func
sub_80B7924:
	push	{lr}
	add	sp, sp, #0xfffffffc
	ldr	r1, .L749
	mov	r0, sp
	mov	r2, #0x2
	bl	memcpy
	ldr	r0, .L749+0x4
	add	r0, r0, #0x50
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0xff
	beq	.L747	@cond_branch
	cmp	r0, #0xfe
	bne	.L748	@cond_branch
	mov	r1, sp
	mov	r0, #0xb6
	strb	r0, [r1]
.L748:
	mov	r0, sp
	mov	r1, #0x14
	mov	r2, #0x4
	bl	MenuPrint
.L747:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L750:
	.align	2, 0
.L749:
	.word	.LC287
	.word	gSharedMem
.Lfe130:
	.size	 sub_80B7924,.Lfe130-sub_80B7924
	.align	2, 0
	.type	 sub_80B7960,function
	.thumb_func
sub_80B7960:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffec
	ldr	r6, .L769
	mov	r4, #0x0
	add	r7, r6, #0x6
	ldr	r5, .L769+0x4
	mov	r2, #0x2
.L755:
	mov	r3, #0x0
	lsl	r1, r4, #0x6
.L759:
	add	r0, r1, r3
	add	r0, r0, r5
	strh	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x19
	bls	.L759	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L755	@cond_branch
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x14
	bl	memset
	mov	r1, #0xfc
	strb	r1, [r6]
	mov	r0, #0x14
	strb	r0, [r6, #0x1]
	mov	r0, #0x8
	strb	r0, [r6, #0x2]
	strb	r1, [r6, #0x3]
	mov	r0, #0x11
	strb	r0, [r6, #0x4]
	mov	r0, #0x1
	strb	r0, [r6, #0x5]
	add	r6, r7, #0
	mov	r3, #0x0
	mov	r4, #0x0
	ldr	r7, .L769+0x8
.L765:
	add	r0, r3, r7
	ldrb	r5, [r0]
	cmp	r5, #0
	bne	.L766	@cond_branch
	mov	r0, sp
	add	r1, r0, r4
	add	r0, r3, #0x1
	add	r0, r0, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	b	.L764
.L770:
	.align	2, 0
.L769:
	.word	gStringVar1
	.word	0x600f10a
	.word	gSharedMem+0x11
.L766:
	add	r1, r4, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r2, r4, #0
	mov	r4, sp
	add	r0, r4, r1
	strb	r5, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, sp
	add	r1, r0, r2
	add	r0, r3, #0x1
	add	r0, r0, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
.L764:
	add	r0, r3, #0x2
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x1f
	bls	.L765	@cond_branch
	add	r0, r6, #0
	mov	r1, sp
	bl	StringCopy
	ldr	r0, .L771
	bl	BasicInitMenuWindow
	mov	r0, #0x1
	bl	SetCustomFont
	ldr	r0, .L771+0x4
	ldr	r1, .L771+0x8
	ldrb	r1, [r1, #0x2]
	mov	r2, #0x4
	bl	MenuPrint
	mov	r0, #0x0
	bl	SetCustomFont
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L772:
	.align	2, 0
.L771:
	.word	gWindowConfig_81E6F4C
	.word	gStringVar1
	.word	gSharedMem
.Lfe131:
	.size	 sub_80B7960,.Lfe131-sub_80B7960
	.section .rodata
	.align	2, 0
	.type	 playerNamingScreenTemplate,object
	.size	 playerNamingScreenTemplate,12
playerNamingScreenTemplate:
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.word	OtherText_YourName
	.align	2, 0
	.type	 pcBoxNamingTemplate,object
	.size	 pcBoxNamingTemplate,12
pcBoxNamingTemplate:
	.byte	0x0
	.byte	0x8
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.word	OtherText_BoxName
	.align	2, 0
	.type	 monNamingScreenTemplate,object
	.size	 monNamingScreenTemplate,12
monNamingScreenTemplate:
	.byte	0x0
	.byte	0x5
	.byte	0x3
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.word	OtherText_PokeName
	.align	2, 0
	.type	 sNamingScreenTemplates,object
sNamingScreenTemplates:
	.word	playerNamingScreenTemplate
	.word	pcBoxNamingTemplate
	.word	monNamingScreenTemplate
	.word	monNamingScreenTemplate
	.size	 sNamingScreenTemplates,16
	.type	 sKoreanCharacters,object
sKoreanCharacters:
	.byte	0x9
	.byte	0x0
	.byte	0xe
	.byte	0x0
	.byte	0x5
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0xb
	.byte	0x0
	.byte	0xab
	.byte	0x0
	.byte	0xac
	.byte	0x0
	.byte	0xae
	.byte	0x0
	.byte	0x17
	.byte	0x0
	.byte	0x1b
	.space	1
	.byte	0x8
	.byte	0x0
	.byte	0xd
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0xa
	.byte	0x0
	.byte	0x20
	.byte	0x0
	.byte	0x1a
	.byte	0x0
	.byte	0x16
	.byte	0x0
	.byte	0x15
	.byte	0x0
	.byte	0x19
	.space	1
	.byte	0x7
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0xc
	.byte	0x0
	.byte	0x6
	.byte	0x0
	.byte	0x13
	.byte	0x0
	.byte	0x1c
	.byte	0x0
	.byte	0x18
	.byte	0x0
	.byte	0x14
	.byte	0x0
	.byte	0x28
	.byte	0x0
	.byte	0xba
	.space	1
	.byte	0x10
	.byte	0x0
	.byte	0x11
	.byte	0x0
	.byte	0xf
	.byte	0x0
	.byte	0x12
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x25
	.byte	0x0
	.byte	0x21
	.byte	0x0
	.byte	0x26
	.byte	0x0
	.byte	0xb8
	.byte	0x0
	.byte	0xad
	.space	1
	.size	 sKoreanCharacters,80
	.type	 sKeyboardCharacters,object
sKeyboardCharacters:
	.byte	0x41
	.byte	0x9
	.byte	0x0
	.byte	0x41
	.byte	0xe
	.byte	0x0
	.byte	0x41
	.byte	0x5
	.byte	0x0
	.byte	0x41
	.byte	0x2
	.byte	0x0
	.byte	0x41
	.byte	0xb
	.byte	0x0
	.byte	0xab
	.byte	0x0
	.byte	0xac
	.byte	0x0
	.byte	0xae
	.byte	0x0
	.byte	0x41
	.byte	0x17
	.byte	0x0
	.byte	0x41
	.byte	0x1b
	.byte	0xff
	.space	13
	.byte	0x41
	.byte	0x8
	.byte	0x0
	.byte	0x41
	.byte	0xd
	.byte	0x0
	.byte	0x41
	.byte	0x4
	.byte	0x0
	.byte	0x41
	.byte	0x1
	.byte	0x0
	.byte	0x41
	.byte	0xa
	.byte	0x0
	.byte	0x41
	.byte	0x20
	.byte	0x0
	.byte	0x41
	.byte	0x1a
	.byte	0x0
	.byte	0x41
	.byte	0x16
	.byte	0x0
	.byte	0x41
	.byte	0x15
	.byte	0x0
	.byte	0x41
	.byte	0x19
	.byte	0xff
	.space	10
	.byte	0x41
	.byte	0x7
	.byte	0x0
	.byte	0x41
	.byte	0x3
	.byte	0x0
	.byte	0x41
	.byte	0xc
	.byte	0x0
	.byte	0x41
	.byte	0x6
	.byte	0x0
	.byte	0x41
	.byte	0x13
	.byte	0x0
	.byte	0x41
	.byte	0x1c
	.byte	0x0
	.byte	0x41
	.byte	0x18
	.byte	0x0
	.byte	0x41
	.byte	0x14
	.byte	0x0
	.byte	0x41
	.byte	0x28
	.byte	0x0
	.byte	0xba
	.byte	0xff
	.space	11
	.byte	0x41
	.byte	0x10
	.byte	0x0
	.byte	0x41
	.byte	0x11
	.byte	0x0
	.byte	0x41
	.byte	0xf
	.byte	0x0
	.byte	0x41
	.byte	0x12
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x41
	.byte	0x25
	.byte	0x0
	.byte	0x41
	.byte	0x21
	.byte	0x0
	.byte	0x41
	.byte	0x26
	.byte	0x0
	.byte	0xb8
	.byte	0x0
	.byte	0xad
	.byte	0xff
	.space	13
	.byte	0xa2
	.byte	0x0
	.byte	0xa3
	.byte	0x0
	.byte	0xa4
	.byte	0x0
	.byte	0xa5
	.byte	0x0
	.byte	0xa6
	.byte	0x0
	.byte	0xa7
	.byte	0x0
	.byte	0xa8
	.byte	0x0
	.byte	0xa9
	.byte	0x0
	.byte	0xaa
	.byte	0x0
	.byte	0xa1
	.byte	0xff
	.space	20
	.byte	0xbb
	.byte	0x0
	.byte	0xbc
	.byte	0x0
	.byte	0xbd
	.byte	0x0
	.byte	0xbe
	.byte	0x0
	.byte	0xbf
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0xc1
	.byte	0x0
	.byte	0xc2
	.byte	0x0
	.byte	0xc3
	.byte	0x0
	.byte	0xc4
	.byte	0xff
	.space	20
	.byte	0xc5
	.byte	0x0
	.byte	0xc6
	.byte	0x0
	.byte	0xc7
	.byte	0x0
	.byte	0xc8
	.byte	0x0
	.byte	0xc9
	.byte	0x0
	.byte	0xca
	.byte	0x0
	.byte	0xcb
	.byte	0x0
	.byte	0xcc
	.byte	0x0
	.byte	0xcd
	.byte	0x0
	.byte	0xce
	.byte	0xff
	.space	20
	.byte	0xcf
	.byte	0x0
	.byte	0xd0
	.byte	0x0
	.byte	0xd1
	.byte	0x0
	.byte	0xd2
	.byte	0x0
	.byte	0xd3
	.byte	0x0
	.byte	0xd4
	.byte	0x0
	.byte	0xb3
	.byte	0x0
	.byte	0xb4
	.byte	0x0
	.byte	0xb1
	.byte	0x0
	.byte	0xb2
	.byte	0xff
	.space	20
	.byte	0xa2
	.byte	0x0
	.byte	0xa3
	.byte	0x0
	.byte	0xa4
	.byte	0x0
	.byte	0xa5
	.byte	0x0
	.byte	0xa6
	.byte	0x0
	.byte	0xa7
	.byte	0x0
	.byte	0xa8
	.byte	0x0
	.byte	0xa9
	.byte	0x0
	.byte	0xaa
	.byte	0x0
	.byte	0xa1
	.byte	0xff
	.space	20
	.byte	0xd5
	.byte	0x0
	.byte	0xd6
	.byte	0x0
	.byte	0xd7
	.byte	0x0
	.byte	0xd8
	.byte	0x0
	.byte	0xd9
	.byte	0x0
	.byte	0xda
	.byte	0x0
	.byte	0xdb
	.byte	0x0
	.byte	0xdc
	.byte	0x0
	.byte	0xdd
	.byte	0x0
	.byte	0xde
	.byte	0xff
	.space	20
	.byte	0xdf
	.byte	0x0
	.byte	0xe0
	.byte	0x0
	.byte	0xe1
	.byte	0x0
	.byte	0xe2
	.byte	0x0
	.byte	0xe3
	.byte	0x0
	.byte	0xe4
	.byte	0x0
	.byte	0xe5
	.byte	0x0
	.byte	0xe6
	.byte	0x0
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xff
	.space	20
	.byte	0xe9
	.byte	0x0
	.byte	0xea
	.byte	0x0
	.byte	0xeb
	.byte	0x0
	.byte	0xec
	.byte	0x0
	.byte	0xed
	.byte	0x0
	.byte	0xee
	.byte	0x0
	.byte	0xb5
	.byte	0x0
	.byte	0xb6
	.byte	0x0
	.byte	0xae
	.byte	0x0
	.byte	0xaf
	.byte	0xff
	.space	20
	.size	 sKeyboardCharacters,480
	.globl	gOamData_83CE498
	.align	2, 0
	.type	 gOamData_83CE498,object
	.size	 gOamData_83CE498,8
gOamData_83CE498:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.globl	gOamData_83CE4A0
	.align	2, 0
	.type	 gOamData_83CE4A0,object
	.size	 gOamData_83CE4A0,8
gOamData_83CE4A0:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.globl	gOamData_83CE4A8
	.align	2, 0
	.type	 gOamData_83CE4A8,object
	.size	 gOamData_83CE4A8,8
gOamData_83CE4A8:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.short	0x0
.text
	.align	2, 0
