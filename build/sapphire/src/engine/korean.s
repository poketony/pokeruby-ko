@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	JongTable
	.section .rodata
	.type	 JongTable,object
JongTable:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0xff
	.byte	0x3
	.byte	0xff
	.byte	0xff
	.byte	0x4
	.byte	0x6
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x7
	.byte	0x8
	.byte	0xff
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0xff
	.size	 JongTable,29
.text
	.align	2, 0
	.globl	isHavingJong
	.type	 isHavingJong,function
	.thumb_func
isHavingJong:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r1, .L3
	lsr	r0, r0, #0xf
	ldr	r2, .L3+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L4:
	.align	2, 0
.L3:
	.word	gKoreanToUnicode
	.word	0xffff9200
.Lfe1:
	.size	 isHavingJong,.Lfe1-isHavingJong
	.align	2, 0
	.globl	getJong
	.type	 getJong,function
	.thumb_func
getJong:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	ldr	r4, .L6
	ldr	r1, .L6+0x4
	lsr	r0, r0, #0xf
	ldr	r2, .L6+0x8
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4}
	pop	{r1}
	bx	r1
.L7:
	.align	2, 0
.L6:
	.word	JongTable
	.word	gKoreanToUnicode
	.word	0xffff9200
.Lfe2:
	.size	 getJong,.Lfe2-getJong
	.align	2, 0
	.globl	getJung
	.type	 getJung,function
	.thumb_func
getJung:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r1, .L9
	lsr	r0, r0, #0xf
	ldr	r2, .L9+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x1c
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x15
	bl	__umodsi3
	add	r0, r0, #0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L10:
	.align	2, 0
.L9:
	.word	gKoreanToUnicode
	.word	0xffff9200
.Lfe3:
	.size	 getJung,.Lfe3-getJung
	.align	2, 0
	.globl	getCho
	.type	 getCho,function
	.thumb_func
getCho:
	push	{lr}
	lsl	r0, r0, #0x10
	ldr	r1, .L12
	lsr	r0, r0, #0xf
	ldr	r2, .L12+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x93
	lsl	r1, r1, #0x2
	bl	__udivsi3
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L13:
	.align	2, 0
.L12:
	.word	gKoreanToUnicode
	.word	0xffff9200
.Lfe4:
	.size	 getCho,.Lfe4-getCho
	.align	2, 0
	.globl	distJamo
	.type	 distJamo,function
	.thumb_func
distJamo:
	push	{lr}
	lsl	r0, r0, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x12
	bls	.L15	@cond_branch
	mov	r0, #0x1
	b	.L17
.L15:
	mov	r0, #0x0
.L17:
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 distJamo,.Lfe5-distJamo
	.align	2, 0
	.globl	MakeKorean
	.type	 MakeKorean,function
	.thumb_func
MakeKorean:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	add	r3, r3, r1
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	ldr	r1, .L19
	lsr	r0, r0, #0xf
	add	r0, r0, r1
	ldrh	r0, [r0]
	bx	lr
.L20:
	.align	2, 0
.L19:
	.word	gUnicodeToKorean
.Lfe6:
	.size	 MakeKorean,.Lfe6-MakeKorean
	.align	2, 0
	.globl	MakeJong
	.type	 MakeJong,function
	.thumb_func
MakeJong:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r3, .L29
.L25:
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L24	@cond_branch
	add	r0, r1, #0
	b	.L28
.L30:
	.align	2, 0
.L29:
	.word	JongTable
.L24:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1c
	bls	.L25	@cond_branch
	mov	r0, #0xff
.L28:
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 MakeJong,.Lfe7-MakeJong
	.align	2, 0
	.globl	MakeJung
	.type	 MakeJung,function
	.thumb_func
MakeJung:
	lsl	r0, r0, #0x18
	mov	r1, #0xec
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	bx	lr
.Lfe8:
	.size	 MakeJung,.Lfe8-MakeJung
	.align	2, 0
	.globl	MakeCho
	.type	 MakeCho,function
	.thumb_func
MakeCho:
	lsl	r0, r0, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	bx	lr
.Lfe9:
	.size	 MakeCho,.Lfe9-MakeCho
	.align	2, 0
	.globl	DoubleJong
	.type	 DoubleJong,function
	.thumb_func
DoubleJong:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r0, #0x3
	beq	.L37	@cond_branch
	cmp	r0, #0x3
	bgt	.L58	@cond_branch
	cmp	r0, #0x1
	beq	.L35	@cond_branch
	b	.L34
.L58:
	cmp	r2, #0x6
	beq	.L43	@cond_branch
	cmp	r2, #0x8
	beq	.L54	@cond_branch
	b	.L34
.L35:
	cmp	r1, #0xa
	bne	.L34	@cond_branch
	mov	r0, #0x3
	b	.L59
.L37:
	cmp	r1, #0xd
	beq	.L39	@cond_branch
	cmp	r1, #0x13
	beq	.L40	@cond_branch
	b	.L34
.L39:
	mov	r0, #0x5
	b	.L59
.L40:
	mov	r0, #0x6
	b	.L59
.L43:
	sub	r0, r1, #0x1
	cmp	r0, #0x12
	bhi	.L34	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L60
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L61:
	.align	2, 0
.L60:
	.word	.L52
	.align	2, 0
	.align	2, 0
.L52:
	.word	.L45
	.word	.L34
	.word	.L34
	.word	.L34
	.word	.L34
	.word	.L34
	.word	.L46
	.word	.L47
	.word	.L34
	.word	.L48
	.word	.L34
	.word	.L34
	.word	.L34
	.word	.L34
	.word	.L34
	.word	.L34
	.word	.L49
	.word	.L50
	.word	.L51
.L45:
	mov	r0, #0x9
	b	.L59
.L46:
	mov	r0, #0xa
	b	.L59
.L47:
	mov	r0, #0xb
	b	.L59
.L48:
	mov	r0, #0xc
	b	.L59
.L49:
	mov	r0, #0xd
	b	.L59
.L50:
	mov	r0, #0xe
	b	.L59
.L51:
	mov	r0, #0xf
	b	.L59
.L54:
	cmp	r1, #0xa
	bne	.L34	@cond_branch
	mov	r0, #0x12
	b	.L59
.L34:
	mov	r0, #0x0
.L59:
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 DoubleJong,.Lfe10-DoubleJong
	.align	2, 0
	.globl	DoubleJung
	.type	 DoubleJung,function
	.thumb_func
DoubleJung:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r0, #0x21
	beq	.L72	@cond_branch
	cmp	r0, #0x21
	bgt	.L84	@cond_branch
	cmp	r0, #0x1c
	beq	.L64	@cond_branch
	b	.L63
.L84:
	cmp	r2, #0x26
	beq	.L80	@cond_branch
	b	.L63
.L64:
	cmp	r1, #0x15
	beq	.L67	@cond_branch
	cmp	r1, #0x15
	bgt	.L71	@cond_branch
	cmp	r1, #0x14
	beq	.L66	@cond_branch
	b	.L63
.L71:
	cmp	r1, #0x28
	beq	.L68	@cond_branch
	b	.L63
.L66:
	mov	r0, #0x1d
	b	.L85
.L67:
	mov	r0, #0x1e
	b	.L85
.L68:
	mov	r0, #0x1f
	b	.L85
.L72:
	cmp	r1, #0x19
	beq	.L75	@cond_branch
	cmp	r1, #0x19
	bgt	.L79	@cond_branch
	cmp	r1, #0x18
	beq	.L74	@cond_branch
	b	.L63
.L79:
	cmp	r1, #0x28
	beq	.L76	@cond_branch
	b	.L63
.L74:
	mov	r0, #0x22
	b	.L85
.L75:
	mov	r0, #0x23
	b	.L85
.L76:
	mov	r0, #0x24
	b	.L85
.L80:
	cmp	r1, #0x28
	bne	.L63	@cond_branch
	mov	r0, #0x27
	b	.L85
.L63:
	mov	r0, #0x0
.L85:
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 DoubleJung,.Lfe11-DoubleJung
	.align	2, 0
	.globl	SplitJong
	.type	 SplitJong,function
	.thumb_func
SplitJong:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L87	@cond_branch
	cmp	r2, #0x3
	bne	.L88	@cond_branch
.L111:
	mov	r0, #0x1
	b	.L110
.L88:
	sub	r0, r2, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L90	@cond_branch
	mov	r0, #0x4
	b	.L110
.L90:
	add	r0, r2, #0
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bhi	.L92	@cond_branch
	mov	r0, #0x8
	b	.L110
.L92:
	cmp	r2, #0x12
	bne	.L95	@cond_branch
.L112:
	mov	r0, #0x11
	b	.L110
.L87:
	sub	r0, r2, #0x3
	cmp	r0, #0xf
	bhi	.L95	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L113
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L114:
	.align	2, 0
.L113:
	.word	.L108
	.align	2, 0
	.align	2, 0
.L108:
	.word	.L107
	.word	.L95
	.word	.L98
	.word	.L106
	.word	.L95
	.word	.L95
	.word	.L111
	.word	.L101
	.word	.L112
	.word	.L107
	.word	.L104
	.word	.L105
	.word	.L106
	.word	.L95
	.word	.L95
	.word	.L107
.L98:
	mov	r0, #0x16
	b	.L110
.L101:
	mov	r0, #0x10
	b	.L110
.L104:
	mov	r0, #0x19
	b	.L110
.L105:
	mov	r0, #0x1a
	b	.L110
.L106:
	mov	r0, #0x1b
	b	.L110
.L107:
	mov	r0, #0x13
	b	.L110
.L95:
	mov	r0, #0x0
.L110:
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 SplitJong,.Lfe12-SplitJong
	.align	2, 0
	.globl	JongToCho
	.type	 JongToCho,function
	.thumb_func
JongToCho:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L116
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L117:
	.align	2, 0
.L116:
	.word	JongTable
.Lfe13:
	.size	 JongToCho,.Lfe13-JongToCho
.text
	.align	2, 0
