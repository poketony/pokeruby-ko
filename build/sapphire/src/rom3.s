@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 gUnknown_020238C4,object
	.size	 gUnknown_020238C4,1
gUnknown_020238C4:
	.byte	0x0
	.type	 gUnknown_020238C5,object
	.size	 gUnknown_020238C5,1
gUnknown_020238C5:
	.byte	0x0
	.type	 gUnknown_020238C6,object
	.size	 gUnknown_020238C6,1
gUnknown_020238C6:
	.byte	0x0
.text
	.align	2, 0
	.globl	sub_800B858
	.type	 sub_800B858,function
	.thumb_func
sub_800B858:
	push	{lr}
	ldr	r0, .L4
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3	@cond_branch
	bl	OpenLink
	ldr	r0, .L4+0x4
	mov	r1, #0x0
	bl	CreateTask
	bl	sub_800BF28
.L3:
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	gBattleTypeFlags
	.word	sub_8083C50
.Lfe1:
	.size	 sub_800B858,.Lfe1-sub_800B858
	.align	2, 0
	.globl	setup_poochyena_battle
	.type	 setup_poochyena_battle,function
	.thumb_func
setup_poochyena_battle:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #0xffffffec
	ldr	r0, .L13
	ldr	r1, .L13+0x4
	str	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp, #0x10]
	mov	r1, #0x0
	ldr	r7, .L13+0x8
	ldr	r6, .L13+0xc
	mov	r2, #0x0
	ldr	r5, .L13+0x10
	ldr	r4, .L13+0x14
	ldr	r3, .L13+0x18
.L10:
	lsl	r0, r1, #0x2
	add	r0, r0, r7
	str	r4, [r0]
	add	r1, r1, r3
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r0, [sp, #0x10]
	add	r0, r0, r6
	strb	r2, [r0]
	ldr	r0, [sp, #0x10]
	add	r0, r0, r5
	strb	r2, [r0]
	ldr	r0, [sp, #0x10]
	add	r0, r0, #0x1
	str	r0, [sp, #0x10]
	add	r1, r0, #0
	cmp	r1, #0x3
	ble	.L10	@cond_branch
	bl	sub_800B858
	ldr	r0, .L13+0x1c
	mov	r5, #0x0
	str	r5, [r0]
	bl	battle_anim_clear_some_data
	bl	ClearBattleMonForms
	bl	BattleAI_HandleItemUseBeforeAISetup
	ldr	r0, .L13+0x20
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L12	@cond_branch
	bl	ZeroEnemyPartyMons
	ldr	r4, .L13+0x24
	mov	r1, #0x8f
	lsl	r1, r1, #0x1
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	add	r0, r4, #0
	mov	r2, #0x2
	mov	r3, #0x20
	bl	CreateMon
	str	r5, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
.L12:
	ldr	r0, .L13+0x28
	str	r5, [r0]
	ldr	r0, .L13+0x2c
	strb	r5, [r0]
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gBattleMainFunc
	.word	nullsub_41
	.word	gBattleBankFunc
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	nullsub_91
	.word	gBanksBySide
	.word	gBattleExecBuffer
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	gUnknown_020239FC
	.word	gUnknown_02024C78
.Lfe2:
	.size	 setup_poochyena_battle,.Lfe2-setup_poochyena_battle
	.align	2, 0
	.globl	sub_800B950
	.type	 sub_800B950,function
	.thumb_func
sub_800B950:
	push	{r4, r5, lr}
	ldr	r0, .L24
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L16	@cond_branch
	bl	sub_800BA78
	b	.L17
.L25:
	.align	2, 0
.L24:
	.word	gBattleTypeFlags
.L16:
	bl	sub_800B9A8
.L17:
	bl	sub_800BD54
	ldr	r0, .L26
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L18	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L26+0x4
	ldrb	r1, [r0]
	cmp	r4, r1
	bge	.L18	@cond_branch
	add	r5, r0, #0
.L22:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	sub_8094978
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	cmp	r4, r0
	blt	.L22	@cond_branch
.L18:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	gBattleTypeFlags
	.word	gNoOfAllBanks
.Lfe3:
	.size	 sub_800B950,.Lfe3-sub_800B950
	.align	2, 0
	.globl	sub_800B9A8
	.type	 sub_800B9A8,function
	.thumb_func
sub_800B9A8:
	push	{r4, lr}
	ldr	r0, .L37
	ldrh	r2, [r0]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldr	r1, .L37+0x4
	ldr	r0, .L37+0x8
	str	r0, [r1]
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L30	@cond_branch
	ldr	r1, .L37+0xc
	ldr	r0, .L37+0x10
	b	.L35
.L38:
	.align	2, 0
.L37:
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	sub_8010800
	.word	gBattleBankFunc
	.word	SetBankFuncToSafariBufferRunCommand
.L30:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L32	@cond_branch
	ldr	r1, .L39
	ldr	r0, .L39+0x4
	b	.L35
.L40:
	.align	2, 0
.L39:
	.word	gBattleBankFunc
	.word	SetBankFuncToWallyBufferRunCommand
.L32:
	ldr	r1, .L41
	ldr	r0, .L41+0x4
.L35:
	str	r0, [r1]
	add	r2, r1, #0
	ldr	r1, .L41+0x8
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L41+0xc
	str	r0, [r2, #0x4]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r1, .L41+0x10
	mov	r0, #0x2
	b	.L36
.L42:
	.align	2, 0
.L41:
	.word	gBattleBankFunc
	.word	SetBankFuncToPlayerBufferRunCommand
	.word	gBanksBySide
	.word	SetBankFuncToOpponentBufferRunCommand
	.word	gNoOfAllBanks
.L29:
	ldr	r1, .L43
	ldr	r0, .L43+0x4
	str	r0, [r1]
	ldr	r2, .L43+0x8
	ldr	r4, .L43+0xc
	str	r4, [r2]
	ldr	r1, .L43+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r3, .L43+0x14
	str	r3, [r2, #0x4]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	str	r4, [r2, #0x8]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	str	r3, [r2, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
	ldr	r1, .L43+0x18
	mov	r0, #0x4
.L36:
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gBattleMainFunc
	.word	sub_8010800
	.word	gBattleBankFunc
	.word	SetBankFuncToPlayerBufferRunCommand
	.word	gBanksBySide
	.word	SetBankFuncToOpponentBufferRunCommand
	.word	gNoOfAllBanks
.Lfe4:
	.size	 sub_800B9A8,.Lfe4-sub_800B9A8
	.align	2, 0
	.globl	sub_800BA78
	.type	 sub_800BA78,function
	.thumb_func
sub_800BA78:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r6, .L102
	ldrh	r1, [r6]
	mov	r5, #0x1
	mov	r4, #0x1
	and	r4, r4, r1
	cmp	r4, #0
	bne	.L46	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	beq	.L47	@cond_branch
	ldr	r1, .L102+0x4
	ldr	r0, .L102+0x8
	str	r0, [r1]
	ldr	r2, .L102+0xc
	ldr	r0, .L102+0x10
	str	r0, [r2]
	ldr	r1, .L102+0x14
	strb	r4, [r1]
	ldr	r0, .L102+0x18
	str	r0, [r2, #0x4]
	strb	r5, [r1, #0x1]
	ldr	r1, .L102+0x1c
	mov	r0, #0x2
	b	.L97
.L103:
	.align	2, 0
.L102:
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	sub_8010800
	.word	gBattleBankFunc
	.word	SetBankFuncToPlayerBufferRunCommand
	.word	gBanksBySide
	.word	SetBankFuncToLinkOpponentBufferRunCommand
	.word	gNoOfAllBanks
.L47:
	ldr	r2, .L104
	ldr	r0, .L104+0x4
	str	r0, [r2, #0x4]
	ldr	r1, .L104+0x8
	strb	r3, [r1, #0x1]
	ldr	r0, .L104+0xc
	str	r0, [r2]
	strb	r5, [r1]
	ldr	r1, .L104+0x10
	mov	r0, #0x2
	b	.L97
.L105:
	.align	2, 0
.L104:
	.word	gBattleBankFunc
	.word	SetBankFuncToPlayerBufferRunCommand
	.word	gBanksBySide
	.word	SetBankFuncToLinkOpponentBufferRunCommand
	.word	gNoOfAllBanks
.L46:
	mov	r0, #0x41
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L49	@cond_branch
	mov	r6, #0x4
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	beq	.L50	@cond_branch
	ldr	r1, .L106
	ldr	r0, .L106+0x4
	str	r0, [r1]
	ldr	r2, .L106+0x8
	ldr	r4, .L106+0xc
	str	r4, [r2]
	ldr	r1, .L106+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r3, .L106+0x14
	str	r3, [r2, #0x4]
	strb	r5, [r1, #0x1]
	str	r4, [r2, #0x8]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	str	r3, [r2, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
	b	.L98
.L107:
	.align	2, 0
.L106:
	.word	gBattleMainFunc
	.word	sub_8010800
	.word	gBattleBankFunc
	.word	SetBankFuncToPlayerBufferRunCommand
	.word	gBanksBySide
	.word	SetBankFuncToLinkOpponentBufferRunCommand
.L50:
	ldr	r2, .L108
	ldr	r0, .L108+0x4
	str	r0, [r2, #0x4]
	ldr	r1, .L108+0x8
	strb	r3, [r1, #0x1]
	ldr	r3, .L108+0xc
	str	r3, [r2]
	strb	r5, [r1]
	str	r0, [r2, #0xc]
	mov	r0, #0x2
	strb	r0, [r1, #0x3]
	str	r3, [r2, #0x8]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
.L98:
	ldr	r0, .L108+0x10
	strb	r6, [r0]
	b	.L45
.L109:
	.align	2, 0
.L108:
	.word	gBattleBankFunc
	.word	SetBankFuncToPlayerBufferRunCommand
	.word	gBanksBySide
	.word	SetBankFuncToLinkOpponentBufferRunCommand
	.word	gNoOfAllBanks
.L49:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrh	r1, [r6]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L52	@cond_branch
	ldr	r1, .L110
	ldr	r0, .L110+0x4
	str	r0, [r1]
.L52:
	mov	r0, #0x0
	mov	sl, r0
	ldr	r1, .L110+0x8
	mov	ip, r1
	ldr	r7, .L110+0xc
	mov	r8, r0
	ldr	r6, .L110+0x10
	mov	r4, #0x0
	mov	r2, #0x3
	mov	r9, r2
.L56:
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x2
	bgt	.L64	@cond_branch
	cmp	r0, #0x1
	bge	.L61	@cond_branch
	cmp	r0, #0
	beq	.L59	@cond_branch
	b	.L57
.L111:
	.align	2, 0
.L110:
	.word	gBattleMainFunc
	.word	sub_8010800
	.word	gLinkPlayers
	.word	gBanksBySide
	.word	gBattlePartyID
.L64:
	cmp	r0, #0x3
	bne	.L57	@cond_branch
.L59:
	ldr	r0, .L112
	add	r0, r4, r0
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x0
	bl	sub_8094978
	b	.L57
.L113:
	.align	2, 0
.L112:
	.word	gLinkPlayers
.L61:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	sub_8094978
.L57:
	cmp	sl, r5
	bne	.L65	@cond_branch
	ldr	r0, .L114
	add	r3, r4, r0
	ldrh	r1, [r3, #0x18]
	lsl	r1, r1, #0x2
	ldr	r2, .L114+0x4
	add	r1, r1, r2
	ldr	r2, .L114+0x8
	str	r2, [r1]
	ldrh	r1, [r3, #0x18]
	mov	ip, r0
	cmp	r1, #0x2
	bgt	.L73	@cond_branch
	cmp	r1, #0x1
	bge	.L70	@cond_branch
	cmp	r1, #0
	beq	.L68	@cond_branch
	b	.L55
.L115:
	.align	2, 0
.L114:
	.word	gLinkPlayers
	.word	gBattleBankFunc
	.word	SetBankFuncToPlayerBufferRunCommand
.L73:
	cmp	r1, #0x3
	bne	.L55	@cond_branch
.L68:
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r1, [r0, #0x18]
	add	r1, r1, r7
	mov	r2, r8
	strb	r2, [r1]
	ldrh	r0, [r0, #0x18]
	b	.L99
.L70:
	add	r1, r1, r7
	mov	r0, #0x2
	strb	r0, [r1]
	ldrh	r0, [r3, #0x18]
	b	.L100
.L65:
	ldr	r2, .L116
	add	r0, r4, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	mov	ip, r2
	cmp	r0, #0
	bne	.L96	@cond_branch
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L76	@cond_branch
	b	.L75
.L117:
	.align	2, 0
.L116:
	.word	gLinkPlayers
.L96:
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L75	@cond_branch
.L76:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	lsl	r0, r0, #0x2
	ldr	r1, .L118
	add	r0, r0, r1
	ldr	r1, .L118+0x4
	str	r1, [r0]
	ldrh	r1, [r2, #0x18]
	cmp	r1, #0x2
	bgt	.L85	@cond_branch
	cmp	r1, #0x1
	bge	.L82	@cond_branch
	cmp	r1, #0
	beq	.L80	@cond_branch
	b	.L55
.L119:
	.align	2, 0
.L118:
	.word	gBattleBankFunc
	.word	SetBankFuncToLinkPartnerBufferRunCommand
.L85:
	cmp	r1, #0x3
	bne	.L55	@cond_branch
.L80:
	mov	r2, ip
	add	r0, r4, r2
	ldrh	r1, [r0, #0x18]
	add	r1, r1, r7
	mov	r2, r8
	strb	r2, [r1]
	ldrh	r0, [r0, #0x18]
	b	.L99
.L82:
	add	r1, r1, r7
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L101
.L75:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	lsl	r0, r0, #0x2
	ldr	r1, .L120
	add	r0, r0, r1
	ldr	r1, .L120+0x4
	str	r1, [r0]
	ldrh	r0, [r2, #0x18]
	cmp	r0, #0x2
	bgt	.L94	@cond_branch
	cmp	r0, #0x1
	bge	.L91	@cond_branch
	cmp	r0, #0
	beq	.L89	@cond_branch
	b	.L55
.L121:
	.align	2, 0
.L120:
	.word	gBattleBankFunc
	.word	SetBankFuncToLinkOpponentBufferRunCommand
.L94:
	cmp	r0, #0x3
	bne	.L55	@cond_branch
.L89:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	add	r0, r0, r7
	mov	r1, #0x1
	strb	r1, [r0]
	ldrh	r0, [r2, #0x18]
.L99:
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r1, r8
	strh	r1, [r0]
	b	.L55
.L91:
	add	r0, r0, r7
	mov	r1, r9
	strb	r1, [r0]
.L101:
	ldrh	r0, [r2, #0x18]
.L100:
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r2, r9
	strh	r2, [r0]
.L55:
	add	r4, r4, #0x1c
	mov	r0, #0x1
	add	sl, sl, r0
	mov	r1, sl
	cmp	r1, #0x3
	bgt	.LCB803
	b	.L56	@long jump
.LCB803:
	ldr	r1, .L122
	mov	r0, #0x4
.L97:
	strb	r0, [r1]
.L45:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gNoOfAllBanks
.Lfe5:
	.size	 sub_800BA78,.Lfe5-sub_800BA78
	.align	2, 0
	.globl	sub_800BD54
	.type	 sub_800BD54,function
	.thumb_func
sub_800BD54:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L149
	ldrh	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB835
	b	.L125	@long jump
.LCB835:
	mov	r0, #0x0
	mov	r8, r0
	b	.L146
.L150:
	.align	2, 0
.L149:
	.word	gBattleTypeFlags
.L129:
	mov	r5, #0x0
	mov	r0, #0x1
	add	r0, r0, r8
	mov	sl, r0
	ldr	r0, .L151
	add	r0, r0, r8
	mov	r9, r0
	mov	r0, r8
	lsl	r6, r0, #0x1
	mov	r7, #0x0
.L133:
	mov	r0, r8
	cmp	r0, #0x1
	bgt	.L134	@cond_branch
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L135	@cond_branch
	ldr	r0, .L151+0x4
	b	.L147
.L152:
	.align	2, 0
.L151:
	.word	gBanksBySide
	.word	gPlayerParty
.L135:
	ldr	r0, .L153
.L147:
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L132	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L132	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L132	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L132	@cond_branch
	ldr	r0, .L153+0x4
	add	r0, r6, r0
	strh	r5, [r0]
	b	.L128
.L154:
	.align	2, 0
.L153:
	.word	gEnemyParty
	.word	gBattlePartyID
.L134:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L140	@cond_branch
	ldr	r0, .L155
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L132	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	b	.L148
.L156:
	.align	2, 0
.L155:
	.word	gPlayerParty
.L140:
	ldr	r0, .L157
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L132	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
.L148:
	bl	GetMonData
	cmp	r0, #0
	beq	.L132	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L132	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L132	@cond_branch
	ldr	r1, .L157+0x4
	mov	r0, r8
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r5
	beq	.L132	@cond_branch
	add	r0, r6, r1
	strh	r5, [r0]
	b	.L128
.L158:
	.align	2, 0
.L157:
	.word	gEnemyParty
	.word	gBattlePartyID
.L132:
	add	r7, r7, #0x64
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L133	@cond_branch
.L128:
	mov	r8, sl
.L146:
	ldr	r0, .L159
	ldrb	r0, [r0]
	cmp	r8, r0
	bge	.LCB1041
	b	.L129	@long jump
.LCB1041:
.L125:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	gNoOfAllBanks
.Lfe6:
	.size	 sub_800BD54,.Lfe6-sub_800BD54
	.align	2, 0
	.globl	PrepareBufferDataTransfer
	.type	 PrepareBufferDataTransfer,function
	.thumb_func
PrepareBufferDataTransfer:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r5, r3, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L179
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L162	@cond_branch
	add	r0, r3, #0
	add	r1, r2, #0
	add	r2, r4, #0
	bl	PrepareBufferDataTransferLink
	b	.L163
.L180:
	.align	2, 0
.L179:
	.word	gBattleTypeFlags
.L162:
	cmp	r5, #0
	beq	.L165	@cond_branch
	cmp	r5, #0x1
	beq	.L171	@cond_branch
	b	.L163
.L165:
	mov	r3, #0x0
	cmp	r3, r2
	bge	.L163	@cond_branch
	ldr	r6, .L181
	ldr	r5, .L181+0x4
.L169:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	blt	.L169	@cond_branch
	b	.L163
.L182:
	.align	2, 0
.L181:
	.word	gBattleBufferA
	.word	gActiveBank
.L171:
	mov	r3, #0x0
	cmp	r3, r2
	bge	.L163	@cond_branch
	ldr	r6, .L183
	ldr	r5, .L183+0x4
.L175:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	blt	.L175	@cond_branch
.L163:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L184:
	.align	2, 0
.L183:
	.word	gBattleBufferB
	.word	gActiveBank
.Lfe7:
	.size	 PrepareBufferDataTransfer,.Lfe7-PrepareBufferDataTransfer
	.align	2, 0
	.globl	sub_800BF28
	.type	 sub_800BF28,function
	.thumb_func
sub_800BF28:
	push	{r4, r5, r6, lr}
	add	sp, sp, #0xfffffffc
	ldr	r0, .L186
	mov	r1, #0x0
	bl	CreateTask
	ldr	r2, .L186+0x4
	strb	r0, [r2]
	ldr	r5, .L186+0x8
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r6, #0x0
	mov	r4, #0x0
	strh	r4, [r0, #0x1e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x20]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x22]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x24]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x26]
	ldr	r0, .L186+0xc
	mov	r1, #0x0
	bl	CreateTask
	ldr	r2, .L186+0x10
	strb	r0, [r2]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x20]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x22]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x24]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x26]
	ldr	r0, .L186+0x14
	strb	r6, [r0]
	mov	r0, sp
	strh	r4, [r0]
	ldr	r1, .L186+0x18
	ldr	r2, .L186+0x1c
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L187:
	.align	2, 0
.L186:
	.word	sub_800C1A8
	.word	gUnknown_020238C4
	.word	gTasks
	.word	sub_800C47C
	.word	gUnknown_020238C5
	.word	gUnknown_020238C6
	.word	gSharedMem+0x14000
	.word	0x1001000
.Lfe8:
	.size	 sub_800BF28,.Lfe8-sub_800BF28
	.align	2, 0
	.globl	PrepareBufferDataTransferLink
	.type	 PrepareBufferDataTransferLink,function
	.thumb_func
PrepareBufferDataTransferLink:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	mov	r1, #0x3
	mov	r0, r8
	bic	r0, r0, r1
	add	r0, r0, #0x4
	mov	r9, r0
	ldr	r2, .L195
	ldr	r3, .L195+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	add	r0, r0, r9
	add	r0, r0, #0x9
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	add	r5, r2, #0
	cmp	r0, r1
	ble	.L189	@cond_branch
	ldrh	r0, [r4, #0x24]
	mov	r2, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r2, [r0, #0x24]
.L189:
	ldr	r4, .L195+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r0, [r0, r2]
	mov	r7, #0xa0
	lsl	r7, r7, #0x9
	add	r0, r0, r7
	add	r0, r0, r4
	strb	r6, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	ldr	r2, .L195+0xc
	add	r0, r0, r2
	add	r0, r0, r4
	ldr	r1, .L195+0x10
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r0, [r0, r7]
	ldr	r1, .L195+0x14
	add	r0, r0, r1
	add	r0, r0, r4
	ldr	r1, .L195+0x18
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r0, [r0, r2]
	ldr	r7, .L195+0x1c
	add	r0, r0, r7
	add	r0, r0, r4
	ldr	r1, .L195+0x20
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	ldr	r2, .L195+0x24
	add	r0, r0, r2
	add	r0, r0, r4
	mov	r7, r9
	strb	r7, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	ldr	r7, .L195+0x28
	add	r1, r1, r7
	add	r1, r1, r4
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	mov	r2, r9
	and	r0, r0, r2
	asr	r0, r0, #0x8
	strb	r0, [r1]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r0, [r0, r7]
	ldr	r1, .L195+0x2c
	add	r0, r0, r1
	add	r0, r0, r4
	ldr	r1, .L195+0x30
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r0, [r0, r2]
	ldr	r7, .L195+0x34
	add	r0, r0, r7
	add	r0, r0, r4
	ldr	r1, .L195+0x38
	ldrb	r1, [r1]
	strb	r1, [r0]
	mov	r2, #0x0
	cmp	r2, r8
	bge	.L191	@cond_branch
	mov	ip, r4
	add	r6, r3, #0
	ldr	r4, .L195+0x3c
.L193:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L195
	add	r0, r0, r1
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	add	r0, r2, r4
	add	r1, r1, r0
	add	r1, r1, ip
	mov	r7, sl
	add	r0, r7, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, r8
	blt	.L193	@cond_branch
.L191:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x24]
	add	r0, r0, r9
	add	r0, r0, #0x8
	strh	r0, [r1, #0x24]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L196:
	.align	2, 0
.L195:
	.word	gTasks
	.word	gUnknown_020238C4
	.word	gSharedMem
	.word	0x14001
	.word	gActiveBank
	.word	0x14002
	.word	gBankAttacker
	.word	0x14003
	.word	gBankTarget
	.word	0x14004
	.word	0x14005
	.word	0x14006
	.word	gAbsentBankFlags
	.word	0x14007
	.word	gEffectBank
	.word	0x14008
.Lfe9:
	.size	 PrepareBufferDataTransferLink,.Lfe9-PrepareBufferDataTransferLink
	.align	2, 0
	.globl	sub_800C1A8
	.type	 sub_800C1A8,function
	.thumb_func
sub_800C1A8:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L216
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x1e
	ldrsh	r0, [r0, r2]
	add	r7, r1, #0
	cmp	r0, #0x5
	bls	.LCB1511
	b	.L198	@long jump
.LCB1511:
	lsl	r0, r0, #0x2
	ldr	r1, .L216+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L217:
	.align	2, 0
.L216:
	.word	gTasks
	.word	.L213
	.align	2, 0
	.align	2, 0
.L213:
	.word	.L199
	.word	.L200
	.word	.L202
	.word	.L204
	.word	.L209
	.word	.L211
.L199:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x64
	strh	r1, [r0, #0x1c]
	ldrh	r1, [r0, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x1e]
	b	.L198
.L200:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r7
	ldrh	r0, [r1, #0x1c]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1556
	b	.L198	@long jump
.LCB1556:
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	b	.L215
.L202:
	bl	GetLinkPlayerCount_2
	bl	IsLinkMaster
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L203	@cond_branch
	bl	sub_8007F4C
	ldr	r0, .L218
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	b	.L215
.L219:
	.align	2, 0
.L218:
	.word	gTasks
.L203:
	ldr	r0, .L220
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	b	.L215
.L221:
	.align	2, 0
.L220:
	.word	gTasks
.L204:
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	mov	r5, #0x26
	ldrsh	r3, [r2, r5]
	mov	r0, #0x24
	ldrsh	r6, [r2, r0]
	mov	ip, r6
	cmp	r3, ip
	beq	.L198	@cond_branch
	ldrh	r0, [r2, #0x22]
	mov	r6, #0x22
	ldrsh	r5, [r2, r6]
	cmp	r5, #0
	bne	.L206	@cond_branch
	cmp	r3, ip
	ble	.L207	@cond_branch
	mov	r6, #0x20
	ldrsh	r0, [r2, r6]
	cmp	r3, r0
	bne	.L207	@cond_branch
	strh	r5, [r2, #0x20]
	strh	r5, [r2, #0x26]
.L207:
	ldr	r5, .L222
	add	r4, r1, r4
	lsl	r4, r4, #0x3
	add	r4, r4, r7
	mov	r0, #0x26
	ldrsh	r2, [r4, r0]
	ldr	r1, .L222+0x4
	add	r0, r2, r1
	add	r0, r0, r5
	ldrb	r1, [r0]
	ldr	r6, .L222+0x8
	add	r2, r2, r6
	add	r2, r2, r5
	ldrb	r0, [r2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	add	r1, r1, #0x8
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	mov	r2, #0xa0
	lsl	r2, r2, #0x9
	add	r5, r5, r2
	add	r1, r1, r5
	add	r2, r6, #0
	bl	SendBlock
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	b	.L198
.L223:
	.align	2, 0
.L222:
	.word	gSharedMem
	.word	0x14004
	.word	0x14005
.L206:
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x22]
	b	.L198
.L209:
	bl	sub_8007ECC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L198	@cond_branch
	ldr	r2, .L224
	ldr	r0, .L224+0x4
	lsl	r3, r4, #0x2
	add	r3, r3, r4
	lsl	r3, r3, #0x3
	add	r3, r3, r0
	mov	r4, #0x26
	ldrsh	r1, [r3, r4]
	ldr	r5, .L224+0x8
	add	r0, r1, r5
	add	r0, r0, r2
	ldrb	r0, [r0]
	ldr	r6, .L224+0xc
	add	r1, r1, r6
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	mov	r2, #0x1
	strh	r2, [r3, #0x22]
	orr	r0, r0, r1
	ldrh	r1, [r3, #0x26]
	add	r0, r0, r1
	add	r0, r0, #0x8
	strh	r0, [r3, #0x26]
	mov	r0, #0x3
	strh	r0, [r3, #0x1e]
	b	.L198
.L225:
	.align	2, 0
.L224:
	.word	gSharedMem
	.word	gTasks
	.word	0x14004
	.word	0x14005
.L211:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r7
	ldrh	r0, [r1, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L198	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1, #0x22]
	mov	r0, #0x3
.L215:
	strh	r0, [r1, #0x1e]
.L198:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_800C1A8,.Lfe10-sub_800C1A8
	.align	2, 0
	.globl	sub_800C35C
	.type	 sub_800C35C,function
	.thumb_func
sub_800C35C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L240
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L227	@cond_branch
	ldr	r0, .L240+0x4
	ldrh	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L227	@cond_branch
	ldr	r0, .L240+0x8
	ldr	r1, [r0, #0x14]
	ldr	r0, .L240+0xc
	cmp	r1, r0
	bne	.L227	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L240+0x10
	mov	sl, r0
	b	.L228
.L241:
	.align	2, 0
.L240:
	.word	gReceivedRemoteLinkPlayers
	.word	gBattleTypeFlags
	.word	gLinkPlayers
	.word	0x2211
	.word	gBlockRecvBuffer
.L231:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L242
	lsl	r1, r4, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	and	r0, r0, r1
	add	r1, r4, #0x1
	mov	r9, r1
	cmp	r0, #0
	beq	.L230	@cond_branch
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	lsl	r0, r4, #0x8
	mov	r2, sl
	add	r3, r0, r2
	
	.code	16
	ldr	r1, .L242+0x4
	add	r0, r0, r1
	ldrh	r6, [r0]
	ldr	r7, .L242+0x8
	ldr	r2, .L242+0xc
	mov	ip, r2
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	mov	r0, #0x24
	ldrsh	r1, [r2, r0]
	add	r0, r6, #0
	add	r0, r0, #0x9
	add	r1, r1, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	ble	.L233	@cond_branch
	ldrh	r0, [r2, #0x24]
	strh	r0, [r2, #0x20]
	mov	r2, ip
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
.L233:
	mov	r2, ip
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	ldr	r0, .L242+0x10
	add	r5, r1, r0
	add	r4, r3, #0
	mov	r2, #0x0
	add	r3, r6, #0
	add	r3, r3, #0x8
	mov	r8, r7
	mov	r7, ip
	cmp	r2, r3
	bge	.L235	@cond_branch
.L237:
	add	r0, r5, r2
	add	r1, r4, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r3
	blt	.L237	@cond_branch
.L235:
	ldrb	r0, [r7]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	ldrh	r0, [r1, #0x24]
	add	r0, r6, r0
	add	r0, r0, #0x8
	strh	r0, [r1, #0x24]
.L230:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
.L228:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L231	@cond_branch
.L227:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gBitTable
	.word	gBlockRecvBuffer+0x4
	.word	gTasks
	.word	gUnknown_020238C5
	.word	gSharedMem+0x15000
.Lfe11:
	.size	 sub_800C35C,.Lfe11-sub_800C35C
	.align	2, 0
	.globl	sub_800C47C
	.type	 sub_800C47C,function
	.thumb_func
sub_800C47C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L256
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r0, #0x26
	ldrsh	r2, [r3, r0]
	mov	r4, #0x24
	ldrsh	r0, [r3, r4]
	add	r4, r1, #0
	cmp	r2, r0
	bne	.LCB1956
	b	.L244	@long jump
.LCB1956:
	cmp	r2, r0
	ble	.L246	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	cmp	r2, r0
	bne	.L246	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x20]
	strh	r0, [r3, #0x26]
.L246:
	ldr	r5, .L256+0x4
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r0, r1, r2
	lsl	r0, r0, #0x3
	add	r6, r0, r4
	mov	r4, #0x26
	ldrsh	r3, [r6, r4]
	ldr	r2, .L256+0x8
	add	r0, r3, r2
	add	r0, r0, r5
	ldrb	r4, [r0]
	add	r2, r2, #0x3
	add	r0, r3, r2
	add	r0, r0, r5
	ldrb	r7, [r0]
	add	r2, r2, #0x1
	add	r0, r3, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	sub	r2, r2, #0x5
	add	r0, r3, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r9, r1
	cmp	r0, #0x1
	beq	.L251	@cond_branch
	cmp	r0, #0x1
	bgt	.L255	@cond_branch
	cmp	r0, #0
	beq	.L248	@cond_branch
	b	.L247
.L257:
	.align	2, 0
.L256:
	.word	gTasks
	.word	gSharedMem
	.word	0x15001
.L255:
	cmp	r0, #0x2
	beq	.L252	@cond_branch
	b	.L247
.L248:
	ldr	r2, .L258
	ldr	r1, .L258+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L244	@cond_branch
	lsl	r0, r4, #0x9
	ldr	r1, .L258+0x8
	add	r0, r0, r1
	ldr	r2, .L258+0xc
	add	r1, r5, r2
	add	r1, r3, r1
	add	r2, r7, #0
	bl	memcpy
	add	r0, r4, #0
	bl	sub_80155A4
	ldr	r0, .L258+0x10
	ldrh	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L247	@cond_branch
	ldr	r1, .L258+0x14
	mov	r4, #0x26
	ldrsh	r0, [r6, r4]
	ldr	r2, .L258+0x18
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L258+0x1c
	mov	r4, #0x26
	ldrsh	r0, [r6, r4]
	add	r2, r2, #0x1
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L258+0x20
	mov	r4, #0x26
	ldrsh	r0, [r6, r4]
	add	r2, r2, #0x3
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L258+0x24
	mov	r4, #0x26
	ldrsh	r0, [r6, r4]
	add	r2, r2, #0x1
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L247
.L259:
	.align	2, 0
.L258:
	.word	gBattleExecBuffer
	.word	gBitTable
	.word	gBattleBufferA
	.word	0x15008
	.word	gBattleTypeFlags
	.word	gBankAttacker
	.word	0x15002
	.word	gBankTarget
	.word	gAbsentBankFlags
	.word	gEffectBank
.L251:
	lsl	r0, r4, #0x9
	ldr	r1, .L260
	add	r0, r0, r1
	ldr	r4, .L260+0x4
	add	r1, r5, r4
	add	r1, r3, r1
	add	r2, r7, #0
	bl	memcpy
	b	.L247
.L261:
	.align	2, 0
.L260:
	.word	gBattleBufferB
	.word	0x15008
.L252:
	ldr	r1, .L262
	add	r0, r3, r1
	add	r0, r0, r5
	ldrb	r2, [r0]
	ldr	r3, .L262+0x4
	ldr	r1, .L262+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	lsl	r2, r2, #0x2
	ldr	r1, [r0]
	lsl	r1, r1, r2
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
.L247:
	ldr	r0, .L262+0xc
	mov	r1, r9
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	add	r0, r7, r0
	add	r0, r0, #0x8
	strh	r0, [r1, #0x26]
.L244:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L263:
	.align	2, 0
.L262:
	.word	0x15008
	.word	gBattleExecBuffer
	.word	gBitTable
	.word	gTasks
.Lfe12:
	.size	 sub_800C47C,.Lfe12-sub_800C47C
	.align	2, 0
	.globl	EmitGetAttributes
	.type	 EmitGetAttributes,function
	.thumb_func
EmitGetAttributes:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L265
	mov	r3, #0x0
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	gBattleBuffersTransferData
.Lfe13:
	.size	 EmitGetAttributes,.Lfe13-EmitGetAttributes
	.align	2, 0
	.globl	Emitcmd1
	.type	 Emitcmd1,function
	.thumb_func
Emitcmd1:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L268
	mov	r4, #0x0
	mov	r3, #0x1
	strb	r3, [r1]
	strb	r5, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r4, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	gBattleBuffersTransferData
.Lfe14:
	.size	 Emitcmd1,.Lfe14-Emitcmd1
	.align	2, 0
	.globl	EmitSetAttributes
	.type	 EmitSetAttributes,function
	.thumb_func
EmitSetAttributes:
	push	{r4, r5, r6, lr}
	ldr	r4, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	ldr	r0, .L276
	mov	r3, #0x2
	strb	r3, [r0]
	strb	r1, [r0, #0x1]
	strb	r2, [r0, #0x2]
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L272	@cond_branch
	add	r3, r1, #0x3
	add	r2, r5, #0
.L274:
	ldrb	r0, [r4]
	strb	r0, [r3]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L274	@cond_branch
.L272:
	add	r2, r5, #0x3
	add	r0, r6, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L277:
	.align	2, 0
.L276:
	.word	gBattleBuffersTransferData
.Lfe15:
	.size	 EmitSetAttributes,.Lfe15-EmitSetAttributes
	.align	2, 0
	.globl	Emitcmd3
	.type	 Emitcmd3,function
	.thumb_func
Emitcmd3:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	ldr	r0, .L284
	mov	r2, #0x3
	strb	r2, [r0]
	strb	r1, [r0, #0x1]
	strb	r4, [r0, #0x2]
	add	r5, r0, #0
	cmp	r4, #0
	beq	.L280	@cond_branch
	add	r1, r5, #0x3
	add	r2, r4, #0
.L282:
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r3, r3, #0x1
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L282	@cond_branch
.L280:
	add	r2, r4, #0x3
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	gBattleBuffersTransferData
.Lfe16:
	.size	 Emitcmd3,.Lfe16-Emitcmd3
	.align	2, 0
	.globl	EmitLoadPokeSprite
	.type	 EmitLoadPokeSprite,function
	.thumb_func
EmitLoadPokeSprite:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L287
	mov	r2, #0x4
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	gBattleBuffersTransferData
.Lfe17:
	.size	 EmitLoadPokeSprite,.Lfe17-EmitLoadPokeSprite
	.align	2, 0
	.globl	EmitSendOutPoke
	.type	 EmitSendOutPoke,function
	.thumb_func
EmitSendOutPoke:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L290
	mov	r3, #0x5
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L291:
	.align	2, 0
.L290:
	.word	gBattleBuffersTransferData
.Lfe18:
	.size	 EmitSendOutPoke,.Lfe18-EmitSendOutPoke
	.align	2, 0
	.globl	EmitReturnPokeToBall
	.type	 EmitReturnPokeToBall,function
	.thumb_func
EmitReturnPokeToBall:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L293
	mov	r2, #0x6
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gBattleBuffersTransferData
.Lfe19:
	.size	 EmitReturnPokeToBall,.Lfe19-EmitReturnPokeToBall
	.align	2, 0
	.globl	EmitTrainerThrow
	.type	 EmitTrainerThrow,function
	.thumb_func
EmitTrainerThrow:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L296
	mov	r2, #0x7
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L297:
	.align	2, 0
.L296:
	.word	gBattleBuffersTransferData
.Lfe20:
	.size	 EmitTrainerThrow,.Lfe20-EmitTrainerThrow
	.align	2, 0
	.globl	EmitTrainerSlide
	.type	 EmitTrainerSlide,function
	.thumb_func
EmitTrainerSlide:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L299
	mov	r2, #0x8
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gBattleBuffersTransferData
.Lfe21:
	.size	 EmitTrainerSlide,.Lfe21-EmitTrainerSlide
	.align	2, 0
	.globl	EmitTrainerSlideBack
	.type	 EmitTrainerSlideBack,function
	.thumb_func
EmitTrainerSlideBack:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L302
	mov	r2, #0x9
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gBattleBuffersTransferData
.Lfe22:
	.size	 EmitTrainerSlideBack,.Lfe22-EmitTrainerSlideBack
	.align	2, 0
	.globl	Emitcmd10
	.type	 Emitcmd10,function
	.thumb_func
Emitcmd10:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L305
	mov	r2, #0xa
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gBattleBuffersTransferData
.Lfe23:
	.size	 Emitcmd10,.Lfe23-Emitcmd10
	.align	2, 0
	.globl	Emitcmd11
	.type	 Emitcmd11,function
	.thumb_func
Emitcmd11:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L308
	mov	r2, #0xb
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gBattleBuffersTransferData
.Lfe24:
	.size	 Emitcmd11,.Lfe24-Emitcmd11
	.align	2, 0
	.globl	Emitcmd12
	.type	 Emitcmd12,function
	.thumb_func
Emitcmd12:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L311
	mov	r2, #0xc
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L312:
	.align	2, 0
.L311:
	.word	gBattleBuffersTransferData
.Lfe25:
	.size	 Emitcmd12,.Lfe25-Emitcmd12
	.align	2, 0
	.globl	EmitBallThrow
	.type	 EmitBallThrow,function
	.thumb_func
EmitBallThrow:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L314
	mov	r2, #0xd
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L315:
	.align	2, 0
.L314:
	.word	gBattleBuffersTransferData
.Lfe26:
	.size	 EmitBallThrow,.Lfe26-EmitBallThrow
	.align	2, 0
	.globl	EmitPuase
	.type	 EmitPuase,function
	.thumb_func
EmitPuase:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r1, .L322
	mov	r0, #0xe
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L318	@cond_branch
	add	r1, r5, #0x2
	add	r3, r0, #0
.L320:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L320	@cond_branch
.L318:
	lsl	r2, r4, #0x1
	add	r2, r2, r4
	add	r2, r2, #0x2
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	gBattleBuffersTransferData
.Lfe27:
	.size	 EmitPuase,.Lfe27-EmitPuase
	.align	2, 0
	.globl	EmitMoveAnimation
	.type	 EmitMoveAnimation,function
	.thumb_func
EmitMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #0xfffffffc
	ldr	r4, [sp, #0x1c]
	ldr	r5, [sp, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r7, .L327
	mov	r0, #0x0
	mov	ip, r0
	mov	r0, #0xf
	strb	r0, [r7]
	strb	r1, [r7, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r7, #0x2]
	strb	r2, [r7, #0x3]
	strb	r3, [r7, #0x4]
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	lsr	r3, r3, #0x8
	strb	r3, [r7, #0x5]
	strb	r4, [r7, #0x6]
	add	r0, r4, #0
	and	r0, r0, r6
	asr	r0, r0, #0x8
	strb	r0, [r7, #0x7]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r4
	asr	r0, r0, #0x10
	strb	r0, [r7, #0x8]
	lsr	r4, r4, #0x18
	strb	r4, [r7, #0x9]
	strb	r5, [r7, #0xa]
	ldr	r0, .L327+0x4
	ldrb	r0, [r0]
	strb	r0, [r7, #0xb]
	mov	r0, ip
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L325	@cond_branch
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L325	@cond_branch
	ldr	r0, .L327+0x8
	ldrh	r0, [r0]
	strb	r0, [r7, #0xc]
	and	r6, r6, r0
	lsr	r0, r6, #0x8
	strb	r0, [r7, #0xd]
	add	r4, r7, #0
	b	.L326
.L328:
	.align	2, 0
.L327:
	.word	gBattleBuffersTransferData
	.word	gMultiHitCounter
	.word	gBattleWeather
.L325:
	ldr	r0, .L329
	mov	r1, #0x0
	strb	r1, [r0, #0xc]
	strb	r1, [r0, #0xd]
	add	r4, r0, #0
.L326:
	mov	r0, #0x0
	strb	r0, [r4, #0xe]
	strb	r0, [r4, #0xf]
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldr	r1, [sp, #0x24]
	mov	r2, #0x1c
	bl	memcpy
	mov	r0, r8
	add	r1, r4, #0
	mov	r2, #0x2c
	bl	PrepareBufferDataTransfer
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L330:
	.align	2, 0
.L329:
	.word	gBattleBuffersTransferData
.Lfe28:
	.size	 EmitMoveAnimation,.Lfe28-EmitMoveAnimation
	.align	2, 0
	.globl	EmitPrintString
	.type	 EmitPrintString,function
	.thumb_func
EmitPrintString:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L342
	mov	r0, #0x10
	strb	r0, [r2]
	ldr	r0, .L342+0x4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x1]
	strb	r1, [r2, #0x2]
	lsr	r1, r1, #0x8
	strb	r1, [r2, #0x3]
	add	r0, r2, #0x4
	mov	ip, r0
	ldr	r4, .L342+0x8
	ldrh	r0, [r4]
	strh	r0, [r2, #0x4]
	ldr	r0, .L342+0xc
	ldrh	r0, [r0]
	mov	r1, ip
	strh	r0, [r1, #0x2]
	ldr	r0, .L342+0x10
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L342+0x14
	ldrb	r0, [r0]
	strb	r0, [r1, #0x6]
	ldr	r1, .L342+0x18
	ldr	r3, .L342+0x1c
	add	r0, r1, r3
	ldrb	r0, [r0]
	mov	r7, ip
	strb	r0, [r7, #0x7]
	add	r3, r3, #0x5b
	add	r0, r1, r3
	ldrb	r0, [r0]
	strb	r0, [r7, #0x8]
	ldr	r7, .L342+0x20
	add	r1, r1, r7
	ldrb	r0, [r1]
	mov	r1, ip
	strb	r0, [r1, #0x9]
	ldr	r0, .L342+0x24
	ldrb	r0, [r0]
	strb	r0, [r1, #0xa]
	ldr	r3, .L342+0x28
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x2]
	mov	r3, ip
	strb	r0, [r3, #0xb]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r7, .L342+0x2c
	mov	r8, r7
	add	r2, r2, #0x10
	ldr	r0, .L342+0x30
	add	r4, r0, #0
	add	r4, r4, #0x20
.L335:
	add	r1, r2, r3
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x58
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L335	@cond_branch
	mov	r3, #0x0
	mov	r5, ip
	add	r5, r5, #0x10
	mov	r4, ip
	add	r4, r4, #0x20
	ldr	r6, .L342+0x34
	mov	r2, ip
	add	r2, r2, #0x30
.L340:
	add	r1, r5, r3
	ldr	r7, .L342+0x38
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r4, r3
	add	r0, r3, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r2, r3
	mov	r7, r8
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0xf
	ble	.L340	@cond_branch
	mov	r0, sl
	mov	r1, r9
	mov	r2, #0x44
	bl	PrepareBufferDataTransfer
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	gBattleBuffersTransferData
	.word	gBattleOutcome
	.word	gCurrentMove
	.word	gUnknown_02024BE8
	.word	gLastUsedItem
	.word	gLastUsedAbility
	.word	gSharedMem
	.word	0x16003
	.word	0x160c1
	.word	gStringBank
	.word	gBattleMoves
	.word	gBattleTextBuff3
	.word	gBattleMons
	.word	gBattleTextBuff2
	.word	gBattleTextBuff1
.Lfe29:
	.size	 EmitPrintString,.Lfe29-EmitPrintString
	.align	2, 0
	.globl	EmitPrintStringPlayerOnly
	.type	 EmitPrintStringPlayerOnly,function
	.thumb_func
EmitPrintStringPlayerOnly:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L355
	mov	r0, #0x11
	strb	r0, [r2]
	strb	r0, [r2, #0x1]
	strb	r1, [r2, #0x2]
	lsr	r1, r1, #0x8
	strb	r1, [r2, #0x3]
	add	r0, r2, #0x4
	mov	ip, r0
	ldr	r0, .L355+0x4
	ldrh	r0, [r0]
	strh	r0, [r2, #0x4]
	ldr	r0, .L355+0x8
	ldrh	r0, [r0]
	mov	r1, ip
	strh	r0, [r1, #0x2]
	ldr	r0, .L355+0xc
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L355+0x10
	ldrb	r0, [r0]
	strb	r0, [r1, #0x6]
	ldr	r0, .L355+0x14
	ldr	r3, .L355+0x18
	add	r1, r0, r3
	ldrb	r1, [r1]
	mov	r7, ip
	strb	r1, [r7, #0x7]
	ldr	r1, .L355+0x1c
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r7, #0x8]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r7, .L355+0x20
	mov	r8, r7
	mov	r4, r9
	add	r4, r4, #0x10
	ldr	r0, .L355+0x24
	add	r2, r0, #0
	add	r2, r2, #0x20
.L348:
	add	r1, r4, r3
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x58
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L348	@cond_branch
	mov	r3, #0x0
	mov	r5, ip
	add	r5, r5, #0x10
	mov	r4, ip
	add	r4, r4, #0x20
	ldr	r6, .L355+0x28
	mov	r2, ip
	add	r2, r2, #0x30
.L353:
	add	r1, r5, r3
	ldr	r7, .L355+0x2c
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r4, r3
	add	r0, r3, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r2, r3
	mov	r7, r8
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0xf
	ble	.L353	@cond_branch
	mov	r0, sl
	mov	r1, r9
	mov	r2, #0x44
	bl	PrepareBufferDataTransfer
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	gBattleBuffersTransferData
	.word	gCurrentMove
	.word	gUnknown_02024BE8
	.word	gLastUsedItem
	.word	gLastUsedAbility
	.word	gSharedMem
	.word	0x16003
	.word	0x1605e
	.word	gBattleTextBuff3
	.word	gBattleMons
	.word	gBattleTextBuff2
	.word	gBattleTextBuff1
.Lfe30:
	.size	 EmitPrintStringPlayerOnly,.Lfe30-EmitPrintStringPlayerOnly
	.align	2, 0
	.globl	Emitcmd18
	.type	 Emitcmd18,function
	.thumb_func
Emitcmd18:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L358
	mov	r3, #0x12
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L359:
	.align	2, 0
.L358:
	.word	gBattleBuffersTransferData
.Lfe31:
	.size	 Emitcmd18,.Lfe31-Emitcmd18
	.align	2, 0
	.globl	Emitcmd19
	.type	 Emitcmd19,function
	.thumb_func
Emitcmd19:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L361
	mov	r2, #0x13
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L362:
	.align	2, 0
.L361:
	.word	gBattleBuffersTransferData
.Lfe32:
	.size	 Emitcmd19,.Lfe32-Emitcmd19
	.align	2, 0
	.globl	Emitcmd20
	.type	 Emitcmd20,function
	.thumb_func
Emitcmd20:
	push	{r4, r5, r6, lr}
	add	r5, r3, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L369
	mov	r4, #0x0
	mov	r0, #0x14
	strb	r0, [r3]
	strb	r1, [r3, #0x1]
	strb	r2, [r3, #0x2]
	strb	r4, [r3, #0x3]
	mov	r2, #0x0
	add	r1, r3, #0
	add	r4, r1, #0x4
.L367:
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r4]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x13
	bls	.L367	@cond_branch
	add	r0, r6, #0
	mov	r2, #0x18
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	gBattleBuffersTransferData
.Lfe33:
	.size	 Emitcmd20,.Lfe33-Emitcmd20
	.align	2, 0
	.globl	EmitOpenBag
	.type	 EmitOpenBag,function
	.thumb_func
EmitOpenBag:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L377
	mov	r0, #0x15
	strb	r0, [r1]
	mov	r2, #0x0
	add	r3, r1, #0x1
.L375:
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L375	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L378:
	.align	2, 0
.L377:
	.word	gBattleBuffersTransferData
.Lfe34:
	.size	 EmitOpenBag,.Lfe34-EmitOpenBag
	.align	2, 0
	.globl	EmitChoosePokemon
	.type	 EmitChoosePokemon,function
	.thumb_func
EmitChoosePokemon:
	push	{r4, r5, r6, lr}
	ldr	r6, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L385
	mov	r0, #0x16
	strb	r0, [r4]
	strb	r1, [r4, #0x1]
	strb	r2, [r4, #0x2]
	strb	r3, [r4, #0x3]
	mov	r2, #0x0
	add	r1, r4, #0
	add	r3, r1, #0x4
.L383:
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L383	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x8
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L386:
	.align	2, 0
.L385:
	.word	gBattleBuffersTransferData
.Lfe35:
	.size	 EmitChoosePokemon,.Lfe35-EmitChoosePokemon
	.align	2, 0
	.globl	Emitcmd23
	.type	 Emitcmd23,function
	.thumb_func
Emitcmd23:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L388
	mov	r2, #0x17
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L389:
	.align	2, 0
.L388:
	.word	gBattleBuffersTransferData
.Lfe36:
	.size	 Emitcmd23,.Lfe36-Emitcmd23
	.align	2, 0
	.globl	EmitHealthBarUpdate
	.type	 EmitHealthBarUpdate,function
	.thumb_func
EmitHealthBarUpdate:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L391
	mov	r4, #0x0
	mov	r2, #0x18
	strb	r2, [r3]
	strb	r4, [r3, #0x1]
	strb	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0xff
	lsl	r2, r2, #0x8
	and	r1, r1, r2
	asr	r1, r1, #0x8
	strb	r1, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	gBattleBuffersTransferData
.Lfe37:
	.size	 EmitHealthBarUpdate,.Lfe37-EmitHealthBarUpdate
	.align	2, 0
	.globl	EmitExpBarUpdate
	.type	 EmitExpBarUpdate,function
	.thumb_func
EmitExpBarUpdate:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L394
	mov	r3, #0x19
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	and	r2, r2, r3
	asr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	gBattleBuffersTransferData
.Lfe38:
	.size	 EmitExpBarUpdate,.Lfe38-EmitExpBarUpdate
	.align	2, 0
	.globl	EmitStatusIconUpdate
	.type	 EmitStatusIconUpdate,function
	.thumb_func
EmitStatusIconUpdate:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L397
	mov	r3, #0x1a
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	add	r3, r4, #0
	and	r3, r3, r6
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x2]
	mov	r5, #0xff
	lsl	r5, r5, #0x10
	add	r3, r4, #0
	and	r3, r3, r5
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x3]
	lsr	r4, r4, #0x18
	strb	r4, [r1, #0x4]
	strb	r2, [r1, #0x5]
	add	r3, r2, #0
	and	r3, r3, r6
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x6]
	add	r3, r2, #0
	and	r3, r3, r5
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x7]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x8]
	mov	r2, #0x9
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L398:
	.align	2, 0
.L397:
	.word	gBattleBuffersTransferData
.Lfe39:
	.size	 EmitStatusIconUpdate,.Lfe39-EmitStatusIconUpdate
	.align	2, 0
	.globl	EmitStatusAnimation
	.type	 EmitStatusAnimation,function
	.thumb_func
EmitStatusAnimation:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L400
	mov	r3, #0x1b
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	and	r3, r3, r2
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x3]
	mov	r3, #0xff
	lsl	r3, r3, #0x10
	and	r3, r3, r2
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x4]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x5]
	mov	r2, #0x6
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L401:
	.align	2, 0
.L400:
	.word	gBattleBuffersTransferData
.Lfe40:
	.size	 EmitStatusAnimation,.Lfe40-EmitStatusAnimation
	.align	2, 0
	.globl	EmitStatusXor
	.type	 EmitStatusXor,function
	.thumb_func
EmitStatusXor:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L403
	mov	r2, #0x1c
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	gBattleBuffersTransferData
.Lfe41:
	.size	 EmitStatusXor,.Lfe41-EmitStatusXor
	.align	2, 0
	.globl	Emitcmd29
	.type	 Emitcmd29,function
	.thumb_func
Emitcmd29:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L411
	mov	r0, #0x1d
	strb	r0, [r1]
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L407	@cond_branch
	add	r1, r5, #0x4
	add	r3, r4, #0
.L409:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L409	@cond_branch
.L407:
	add	r2, r4, #0x4
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L412:
	.align	2, 0
.L411:
	.word	gBattleBuffersTransferData
.Lfe42:
	.size	 Emitcmd29,.Lfe42-Emitcmd29
	.align	2, 0
	.globl	EmitDMATransfer
	.type	 EmitDMATransfer,function
	.thumb_func
EmitDMATransfer:
	push	{r4, r5, r6, lr}
	add	r4, r3, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	ldr	r2, .L419
	mov	r0, #0x1e
	strb	r0, [r2]
	strb	r1, [r2, #0x1]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r0, r1, #0
	and	r0, r0, r3
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r2, #0x3]
	lsr	r1, r1, #0x18
	strb	r1, [r2, #0x4]
	strb	r5, [r2, #0x5]
	add	r0, r5, #0
	and	r0, r0, r3
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x6]
	add	r1, r2, #0
	cmp	r5, #0
	beq	.L415	@cond_branch
	add	r3, r1, #0x7
	add	r2, r5, #0
.L417:
	ldrb	r0, [r4]
	strb	r0, [r3]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L417	@cond_branch
.L415:
	add	r2, r5, #0x7
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L420:
	.align	2, 0
.L419:
	.word	gBattleBuffersTransferData
.Lfe43:
	.size	 EmitDMATransfer,.Lfe43-EmitDMATransfer
	.align	2, 0
	.globl	Emitcmd31
	.type	 Emitcmd31,function
	.thumb_func
Emitcmd31:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L427
	mov	r0, #0x1f
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x2]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L423	@cond_branch
	add	r1, r5, #0x3
	add	r3, r4, #0
.L425:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L425	@cond_branch
.L423:
	add	r2, r4, #0x3
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L428:
	.align	2, 0
.L427:
	.word	gBattleBuffersTransferData
.Lfe44:
	.size	 Emitcmd31,.Lfe44-Emitcmd31
	.align	2, 0
	.globl	Emitcmd32
	.type	 Emitcmd32,function
	.thumb_func
Emitcmd32:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L435
	mov	r0, #0x20
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x2]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L431	@cond_branch
	add	r1, r5, #0x3
	add	r3, r4, #0
.L433:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L433	@cond_branch
.L431:
	add	r2, r4, #0x3
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L436:
	.align	2, 0
.L435:
	.word	gBattleBuffersTransferData
.Lfe45:
	.size	 Emitcmd32,.Lfe45-Emitcmd32
	.align	2, 0
	.globl	Emitcmd33
	.type	 Emitcmd33,function
	.thumb_func
Emitcmd33:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L438
	mov	r3, #0x21
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	gBattleBuffersTransferData
.Lfe46:
	.size	 Emitcmd33,.Lfe46-Emitcmd33
	.align	2, 0
	.globl	Emitcmd34
	.type	 Emitcmd34,function
	.thumb_func
Emitcmd34:
	push	{r4, r5, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L446
	mov	r0, #0x22
	strb	r0, [r2]
	strb	r1, [r2, #0x1]
	mov	r3, #0x0
	add	r1, r2, #0x2
.L444:
	add	r0, r4, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L444	@cond_branch
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r2, #0x5
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L447:
	.align	2, 0
.L446:
	.word	gBattleBuffersTransferData
.Lfe47:
	.size	 Emitcmd34,.Lfe47-Emitcmd34
	.align	2, 0
	.globl	Emitcmd35
	.type	 Emitcmd35,function
	.thumb_func
Emitcmd35:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L449
	mov	r4, #0x0
	mov	r2, #0x23
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L450:
	.align	2, 0
.L449:
	.word	gBattleBuffersTransferData
.Lfe48:
	.size	 Emitcmd35,.Lfe48-Emitcmd35
	.align	2, 0
	.globl	Emitcmd36
	.type	 Emitcmd36,function
	.thumb_func
Emitcmd36:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L452
	mov	r4, #0x0
	mov	r2, #0x24
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	gBattleBuffersTransferData
.Lfe49:
	.size	 Emitcmd36,.Lfe49-Emitcmd36
	.align	2, 0
	.globl	Emitcmd37
	.type	 Emitcmd37,function
	.thumb_func
Emitcmd37:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L455
	mov	r2, #0x25
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L456:
	.align	2, 0
.L455:
	.word	gBattleBuffersTransferData
.Lfe50:
	.size	 Emitcmd37,.Lfe50-Emitcmd37
	.align	2, 0
	.globl	Emitcmd38
	.type	 Emitcmd38,function
	.thumb_func
Emitcmd38:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L458
	mov	r2, #0x26
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	gBattleBuffersTransferData
.Lfe51:
	.size	 Emitcmd38,.Lfe51-Emitcmd38
	.align	2, 0
	.globl	Emitcmd39
	.type	 Emitcmd39,function
	.thumb_func
Emitcmd39:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L461
	mov	r2, #0x27
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	gBattleBuffersTransferData
.Lfe52:
	.size	 Emitcmd39,.Lfe52-Emitcmd39
	.align	2, 0
	.globl	Emitcmd40
	.type	 Emitcmd40,function
	.thumb_func
Emitcmd40:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L464
	mov	r2, #0x28
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L465:
	.align	2, 0
.L464:
	.word	gBattleBuffersTransferData
.Lfe53:
	.size	 Emitcmd40,.Lfe53-Emitcmd40
	.align	2, 0
	.globl	EmitHitAnimation
	.type	 EmitHitAnimation,function
	.thumb_func
EmitHitAnimation:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L467
	mov	r2, #0x29
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	gBattleBuffersTransferData
.Lfe54:
	.size	 EmitHitAnimation,.Lfe54-EmitHitAnimation
	.align	2, 0
	.globl	Emitcmd42
	.type	 Emitcmd42,function
	.thumb_func
Emitcmd42:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L470
	mov	r2, #0x2a
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L471:
	.align	2, 0
.L470:
	.word	gBattleBuffersTransferData
.Lfe55:
	.size	 Emitcmd42,.Lfe55-Emitcmd42
	.align	2, 0
	.globl	EmitEffectivenessSound
	.type	 EmitEffectivenessSound,function
	.thumb_func
EmitEffectivenessSound:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L473
	mov	r4, #0x0
	mov	r2, #0x2b
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L474:
	.align	2, 0
.L473:
	.word	gBattleBuffersTransferData
.Lfe56:
	.size	 EmitEffectivenessSound,.Lfe56-EmitEffectivenessSound
	.align	2, 0
	.globl	Emitcmd44
	.type	 Emitcmd44,function
	.thumb_func
Emitcmd44:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L476
	mov	r4, #0x0
	mov	r2, #0x2c
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L477:
	.align	2, 0
.L476:
	.word	gBattleBuffersTransferData
.Lfe57:
	.size	 Emitcmd44,.Lfe57-Emitcmd44
	.align	2, 0
	.globl	EmitFaintingCry
	.type	 EmitFaintingCry,function
	.thumb_func
EmitFaintingCry:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L479
	mov	r2, #0x2d
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L480:
	.align	2, 0
.L479:
	.word	gBattleBuffersTransferData
.Lfe58:
	.size	 EmitFaintingCry,.Lfe58-EmitFaintingCry
	.align	2, 0
	.globl	EmitIntroSlide
	.type	 EmitIntroSlide,function
	.thumb_func
EmitIntroSlide:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L482
	mov	r2, #0x2e
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L483:
	.align	2, 0
.L482:
	.word	gBattleBuffersTransferData
.Lfe59:
	.size	 EmitIntroSlide,.Lfe59-EmitIntroSlide
	.align	2, 0
	.globl	EmitTrainerBallThrow
	.type	 EmitTrainerBallThrow,function
	.thumb_func
EmitTrainerBallThrow:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L485
	mov	r2, #0x2f
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L486:
	.align	2, 0
.L485:
	.word	gBattleBuffersTransferData
.Lfe60:
	.size	 EmitTrainerBallThrow,.Lfe60-EmitTrainerBallThrow
	.align	2, 0
	.globl	EmitDrawPartyStatusSummary
	.type	 EmitDrawPartyStatusSummary,function
	.thumb_func
EmitDrawPartyStatusSummary:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L493
	mov	r3, #0x30
	strb	r3, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, #0x80
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x1f
	strb	r0, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x0
	add	r3, r1, #0x4
.L491:
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2f
	ble	.L491	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x34
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L494:
	.align	2, 0
.L493:
	.word	gBattleBuffersTransferData
.Lfe61:
	.size	 EmitDrawPartyStatusSummary,.Lfe61-EmitDrawPartyStatusSummary
	.align	2, 0
	.globl	Emitcmd49
	.type	 Emitcmd49,function
	.thumb_func
Emitcmd49:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L496
	mov	r2, #0x31
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	gBattleBuffersTransferData
.Lfe62:
	.size	 Emitcmd49,.Lfe62-Emitcmd49
	.align	2, 0
	.globl	Emitcmd50
	.type	 Emitcmd50,function
	.thumb_func
Emitcmd50:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L499
	mov	r2, #0x32
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	gBattleBuffersTransferData
.Lfe63:
	.size	 Emitcmd50,.Lfe63-Emitcmd50
	.align	2, 0
	.globl	EmitSpriteInvisibility
	.type	 EmitSpriteInvisibility,function
	.thumb_func
EmitSpriteInvisibility:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L502
	mov	r2, #0x33
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L503:
	.align	2, 0
.L502:
	.word	gBattleBuffersTransferData
.Lfe64:
	.size	 EmitSpriteInvisibility,.Lfe64-EmitSpriteInvisibility
	.align	2, 0
	.globl	EmitBattleAnimation
	.type	 EmitBattleAnimation,function
	.thumb_func
EmitBattleAnimation:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L505
	mov	r3, #0x34
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L506:
	.align	2, 0
.L505:
	.word	gBattleBuffersTransferData
.Lfe65:
	.size	 EmitBattleAnimation,.Lfe65-EmitBattleAnimation
	.align	2, 0
	.globl	EmitLinkStandbyMsg
	.type	 EmitLinkStandbyMsg,function
	.thumb_func
EmitLinkStandbyMsg:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L508
	mov	r2, #0x35
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L509:
	.align	2, 0
.L508:
	.word	gBattleBuffersTransferData
.Lfe66:
	.size	 EmitLinkStandbyMsg,.Lfe66-EmitLinkStandbyMsg
	.align	2, 0
	.globl	EmitResetActionMoveSelection
	.type	 EmitResetActionMoveSelection,function
	.thumb_func
EmitResetActionMoveSelection:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L511
	mov	r2, #0x36
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	gBattleBuffersTransferData
.Lfe67:
	.size	 EmitResetActionMoveSelection,.Lfe67-EmitResetActionMoveSelection
	.align	2, 0
	.globl	Emitcmd55
	.type	 Emitcmd55,function
	.thumb_func
Emitcmd55:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L514
	mov	r2, #0x37
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	gBattleBuffersTransferData
.Lfe68:
	.size	 Emitcmd55,.Lfe68-Emitcmd55
	.comm	gBattleBuffersTransferData, 368	@ 368
.text
	.align	2, 0
